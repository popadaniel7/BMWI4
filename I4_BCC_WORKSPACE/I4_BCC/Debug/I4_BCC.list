
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013510  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  080136b0  080136b0  000236b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013ce0  08013ce0  00030074  2**0
                  CONTENTS
  4 .ARM          00000008  08013ce0  08013ce0  00023ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013ce8  08013ce8  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013ce8  08013ce8  00023ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013cec  08013cec  00023cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08013cf0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009408  20000074  08013d64  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000947c  08013d64  0003947c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000328bf  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007d7b  00000000  00000000  00062963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a78  00000000  00000000  0006a6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000026b8  00000000  00000000  0006d158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002689f  00000000  00000000  0006f810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004af85  00000000  00000000  000960af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6848  00000000  00000000  000e1034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019787c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b0d8  00000000  00000000  001978cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013698 	.word	0x08013698

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08013698 	.word	0x08013698

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <main>:
/***********************************************************************************
* Function: main														   		   *
* Description: Defined in the linker file as the start of the application.         *
************************************************************************************/
int main()
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	/* Calls for system initialization. */
	SystemManager_Init();
 8000d64:	f011 fd88 	bl	8012878 <SystemManager_Init>
	/* Initialize the kernel of FreeRTOS. */
	osKernelInitialize();
 8000d68:	f00d f8f6 	bl	800df58 <osKernelInitialize>
	/* Initialize the FreeRTOS with all its objects.*/
	MX_FREERTOS_Init();
 8000d6c:	f003 f8b2 	bl	8003ed4 <MX_FREERTOS_Init>
	/* Start the kernel and the scheduler and FreeRTOS takes
	 * control of the application execution. */
	osKernelStart();
 8000d70:	f00d f916 	bl	800dfa0 <osKernelStart>
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <Btc_RequestState>:
/***********************************************************************************
* Function: Btc_RequestState													   *
* Description: Process bluetooth command for request state 					       *
************************************************************************************/
VOID Btc_RequestState()
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	if(Btc_ReceivedDataOnBluetooth == 99)
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <Btc_RequestState+0x14>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b63      	cmp	r3, #99	; 0x63
 8000d86:	d101      	bne.n	8000d8c <Btc_RequestState+0x10>
	{
		SystemManager_PerformReset();
 8000d88:	f011 fdae 	bl	80128e8 <SystemManager_PerformReset>
	}
	else
	{
		/* do nothing */
	}
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000096 	.word	0x20000096

08000d94 <Btc_RxVal>:
/***********************************************************************************
* Function: Btc_RxVal													   		   *
* Description: Process bluetooth commands.	 		   							   *
************************************************************************************/
VOID Btc_RxVal()
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	if(Rte_Call_Crc_R_CrcPort_Crc_VerifyUartData() == E_OK)
 8000d98:	f010 fdda 	bl	8011950 <Crc_VerifyUartData>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f040 832d 	bne.w	80013fe <Btc_RxVal+0x66a>
	{
		if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000da4:	4bbc      	ldr	r3, [pc, #752]	; (8001098 <Btc_RxVal+0x304>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d11d      	bne.n	8000de8 <Btc_RxVal+0x54>
		{
			if(Btc_ReceivedDataOnBluetooth >= BTC_RX_HVAC_FANVALUE_MIN &&
 8000dac:	4bbb      	ldr	r3, [pc, #748]	; (800109c <Btc_RxVal+0x308>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b1d      	cmp	r3, #29
 8000db2:	d90a      	bls.n	8000dca <Btc_RxVal+0x36>
				Btc_ReceivedDataOnBluetooth <= BTC_RX_HVAC_FANVALUE_MAX)
 8000db4:	4bb9      	ldr	r3, [pc, #740]	; (800109c <Btc_RxVal+0x308>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
			if(Btc_ReceivedDataOnBluetooth >= BTC_RX_HVAC_FANVALUE_MIN &&
 8000db8:	2b25      	cmp	r3, #37	; 0x25
 8000dba:	d806      	bhi.n	8000dca <Btc_RxVal+0x36>
			{
				Btc_FanValue = Btc_ReceivedDataOnBluetooth;
 8000dbc:	4bb7      	ldr	r3, [pc, #732]	; (800109c <Btc_RxVal+0x308>)
 8000dbe:	781a      	ldrb	r2, [r3, #0]
 8000dc0:	4bb7      	ldr	r3, [pc, #732]	; (80010a0 <Btc_RxVal+0x30c>)
 8000dc2:	701a      	strb	r2, [r3, #0]
				Rte_Write_Hvac_HvacPort_Hvac_FanValue(&Btc_FanValue);
 8000dc4:	48b6      	ldr	r0, [pc, #728]	; (80010a0 <Btc_RxVal+0x30c>)
 8000dc6:	f010 f99b 	bl	8011100 <Rte_Write_Hvac_HvacPort_Hvac_FanValue>
			else
			{
				/* do nothing */
			}

			if(Btc_ReceivedDataOnBluetooth >= BTC_RX_HVAC_TEMPERATUREVALUE_MIN &&
 8000dca:	4bb4      	ldr	r3, [pc, #720]	; (800109c <Btc_RxVal+0x308>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b25      	cmp	r3, #37	; 0x25
 8000dd0:	d90a      	bls.n	8000de8 <Btc_RxVal+0x54>
					Btc_ReceivedDataOnBluetooth <= BTC_RX_HVAC_TEMPERATUREVALUE_MAX)
 8000dd2:	4bb2      	ldr	r3, [pc, #712]	; (800109c <Btc_RxVal+0x308>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
			if(Btc_ReceivedDataOnBluetooth >= BTC_RX_HVAC_TEMPERATUREVALUE_MIN &&
 8000dd6:	2b36      	cmp	r3, #54	; 0x36
 8000dd8:	d806      	bhi.n	8000de8 <Btc_RxVal+0x54>
			{
				Btc_TemperatureValue = Btc_ReceivedDataOnBluetooth;
 8000dda:	4bb0      	ldr	r3, [pc, #704]	; (800109c <Btc_RxVal+0x308>)
 8000ddc:	781a      	ldrb	r2, [r3, #0]
 8000dde:	4bb1      	ldr	r3, [pc, #708]	; (80010a4 <Btc_RxVal+0x310>)
 8000de0:	701a      	strb	r2, [r3, #0]
				Rte_Write_Hvac_HvacPort_Hvac_TemperatureValue(&Btc_TemperatureValue);
 8000de2:	48b0      	ldr	r0, [pc, #704]	; (80010a4 <Btc_RxVal+0x310>)
 8000de4:	f010 f99e 	bl	8011124 <Rte_Write_Hvac_HvacPort_Hvac_TemperatureValue>
		{
			/* do nothing */
		}

		/* Process the command on each case and update the respective variable. */
		switch(Btc_ReceivedDataOnBluetooth)
 8000de8:	4bac      	ldr	r3, [pc, #688]	; (800109c <Btc_RxVal+0x308>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	2b46      	cmp	r3, #70	; 0x46
 8000df0:	f200 829b 	bhi.w	800132a <Btc_RxVal+0x596>
 8000df4:	a201      	add	r2, pc, #4	; (adr r2, 8000dfc <Btc_RxVal+0x68>)
 8000df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfa:	bf00      	nop
 8000dfc:	08001175 	.word	0x08001175
 8000e00:	08001183 	.word	0x08001183
 8000e04:	08001191 	.word	0x08001191
 8000e08:	080011af 	.word	0x080011af
 8000e0c:	0800132b 	.word	0x0800132b
 8000e10:	0800132b 	.word	0x0800132b
 8000e14:	080011c7 	.word	0x080011c7
 8000e18:	080011eb 	.word	0x080011eb
 8000e1c:	08001203 	.word	0x08001203
 8000e20:	08001227 	.word	0x08001227
 8000e24:	0800123f 	.word	0x0800123f
 8000e28:	08001257 	.word	0x08001257
 8000e2c:	0800126f 	.word	0x0800126f
 8000e30:	08001287 	.word	0x08001287
 8000e34:	0800129f 	.word	0x0800129f
 8000e38:	080012b7 	.word	0x080012b7
 8000e3c:	080012cf 	.word	0x080012cf
 8000e40:	080012e7 	.word	0x080012e7
 8000e44:	080012ff 	.word	0x080012ff
 8000e48:	08001315 	.word	0x08001315
 8000e4c:	080010e5 	.word	0x080010e5
 8000e50:	080010fd 	.word	0x080010fd
 8000e54:	08001115 	.word	0x08001115
 8000e58:	0800112d 	.word	0x0800112d
 8000e5c:	08001145 	.word	0x08001145
 8000e60:	0800115d 	.word	0x0800115d
 8000e64:	0800132b 	.word	0x0800132b
 8000e68:	0800132b 	.word	0x0800132b
 8000e6c:	0800132b 	.word	0x0800132b
 8000e70:	0800132b 	.word	0x0800132b
 8000e74:	0800132b 	.word	0x0800132b
 8000e78:	0800132b 	.word	0x0800132b
 8000e7c:	0800132b 	.word	0x0800132b
 8000e80:	0800132b 	.word	0x0800132b
 8000e84:	0800132b 	.word	0x0800132b
 8000e88:	0800132b 	.word	0x0800132b
 8000e8c:	0800132b 	.word	0x0800132b
 8000e90:	0800132b 	.word	0x0800132b
 8000e94:	0800132b 	.word	0x0800132b
 8000e98:	0800132b 	.word	0x0800132b
 8000e9c:	0800132b 	.word	0x0800132b
 8000ea0:	0800132b 	.word	0x0800132b
 8000ea4:	0800132b 	.word	0x0800132b
 8000ea8:	0800132b 	.word	0x0800132b
 8000eac:	0800132b 	.word	0x0800132b
 8000eb0:	0800132b 	.word	0x0800132b
 8000eb4:	0800132b 	.word	0x0800132b
 8000eb8:	0800132b 	.word	0x0800132b
 8000ebc:	0800132b 	.word	0x0800132b
 8000ec0:	0800132b 	.word	0x0800132b
 8000ec4:	0800132b 	.word	0x0800132b
 8000ec8:	0800132b 	.word	0x0800132b
 8000ecc:	0800132b 	.word	0x0800132b
 8000ed0:	0800132b 	.word	0x0800132b
 8000ed4:	08000f19 	.word	0x08000f19
 8000ed8:	08000f31 	.word	0x08000f31
 8000edc:	08000f49 	.word	0x08000f49
 8000ee0:	08000f61 	.word	0x08000f61
 8000ee4:	08000f79 	.word	0x08000f79
 8000ee8:	08000f91 	.word	0x08000f91
 8000eec:	08000fa9 	.word	0x08000fa9
 8000ef0:	08000fc1 	.word	0x08000fc1
 8000ef4:	08001009 	.word	0x08001009
 8000ef8:	08001021 	.word	0x08001021
 8000efc:	08001039 	.word	0x08001039
 8000f00:	0800105d 	.word	0x0800105d
 8000f04:	0800132b 	.word	0x0800132b
 8000f08:	08001081 	.word	0x08001081
 8000f0c:	080010cd 	.word	0x080010cd
 8000f10:	08000fd9 	.word	0x08000fd9
 8000f14:	08000ff1 	.word	0x08000ff1
		{
			case BTC_RX_HVAC_LEGVENT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f18:	4b5f      	ldr	r3, [pc, #380]	; (8001098 <Btc_RxVal+0x304>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	f040 8206 	bne.w	800132e <Btc_RxVal+0x59a>
				{
					Btc_LegVent = STD_HIGH;
 8000f22:	4b61      	ldr	r3, [pc, #388]	; (80010a8 <Btc_RxVal+0x314>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_LegVent(&Btc_LegVent);
 8000f28:	485f      	ldr	r0, [pc, #380]	; (80010a8 <Btc_RxVal+0x314>)
 8000f2a:	f010 f90d 	bl	8011148 <Rte_Write_Hvac_HvacPort_Hvac_LegVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f2e:	e1fe      	b.n	800132e <Btc_RxVal+0x59a>
			case BTC_RX_HVAC_LEGVENT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f30:	4b59      	ldr	r3, [pc, #356]	; (8001098 <Btc_RxVal+0x304>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	f040 81fc 	bne.w	8001332 <Btc_RxVal+0x59e>
				{
					Btc_LegVent = STD_LOW;
 8000f3a:	4b5b      	ldr	r3, [pc, #364]	; (80010a8 <Btc_RxVal+0x314>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_LegVent(&Btc_LegVent);
 8000f40:	4859      	ldr	r0, [pc, #356]	; (80010a8 <Btc_RxVal+0x314>)
 8000f42:	f010 f901 	bl	8011148 <Rte_Write_Hvac_HvacPort_Hvac_LegVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f46:	e1f4      	b.n	8001332 <Btc_RxVal+0x59e>
			case BTC_RX_HVAC_MIDVENT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f48:	4b53      	ldr	r3, [pc, #332]	; (8001098 <Btc_RxVal+0x304>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	f040 81f2 	bne.w	8001336 <Btc_RxVal+0x5a2>
				{
					Btc_MidVent = STD_HIGH;
 8000f52:	4b56      	ldr	r3, [pc, #344]	; (80010ac <Btc_RxVal+0x318>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_MidVent(&Btc_MidVent);
 8000f58:	4854      	ldr	r0, [pc, #336]	; (80010ac <Btc_RxVal+0x318>)
 8000f5a:	f010 f905 	bl	8011168 <Rte_Write_Hvac_HvacPort_Hvac_MidVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f5e:	e1ea      	b.n	8001336 <Btc_RxVal+0x5a2>
			case BTC_RX_HVAC_MIDVENT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f60:	4b4d      	ldr	r3, [pc, #308]	; (8001098 <Btc_RxVal+0x304>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	f040 81e8 	bne.w	800133a <Btc_RxVal+0x5a6>
				{
					Btc_MidVent = STD_LOW;
 8000f6a:	4b50      	ldr	r3, [pc, #320]	; (80010ac <Btc_RxVal+0x318>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_MidVent(&Btc_MidVent);
 8000f70:	484e      	ldr	r0, [pc, #312]	; (80010ac <Btc_RxVal+0x318>)
 8000f72:	f010 f8f9 	bl	8011168 <Rte_Write_Hvac_HvacPort_Hvac_MidVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f76:	e1e0      	b.n	800133a <Btc_RxVal+0x5a6>
			case BTC_RX_HVAC_WINDSHIELDVENT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f78:	4b47      	ldr	r3, [pc, #284]	; (8001098 <Btc_RxVal+0x304>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	f040 81de 	bne.w	800133e <Btc_RxVal+0x5aa>
				{
					Btc_WindshieldVent = STD_HIGH;
 8000f82:	4b4b      	ldr	r3, [pc, #300]	; (80010b0 <Btc_RxVal+0x31c>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent(&Btc_WindshieldVent);
 8000f88:	4849      	ldr	r0, [pc, #292]	; (80010b0 <Btc_RxVal+0x31c>)
 8000f8a:	f010 f8fd 	bl	8011188 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f8e:	e1d6      	b.n	800133e <Btc_RxVal+0x5aa>
			case BTC_RX_HVAC_WINDSHIELDVENT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f90:	4b41      	ldr	r3, [pc, #260]	; (8001098 <Btc_RxVal+0x304>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	f040 81d4 	bne.w	8001342 <Btc_RxVal+0x5ae>
				{
					Btc_WindshieldVent = STD_LOW;
 8000f9a:	4b45      	ldr	r3, [pc, #276]	; (80010b0 <Btc_RxVal+0x31c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent(&Btc_WindshieldVent);
 8000fa0:	4843      	ldr	r0, [pc, #268]	; (80010b0 <Btc_RxVal+0x31c>)
 8000fa2:	f010 f8f1 	bl	8011188 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000fa6:	e1cc      	b.n	8001342 <Btc_RxVal+0x5ae>
			case BTC_RX_HVAC_WINDSHIELDDEFROST_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000fa8:	4b3b      	ldr	r3, [pc, #236]	; (8001098 <Btc_RxVal+0x304>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	f040 81ca 	bne.w	8001346 <Btc_RxVal+0x5b2>
				{
					Btc_WindshieldDefrost = STD_HIGH;
 8000fb2:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <Btc_RxVal+0x320>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost(&Btc_WindshieldDefrost);
 8000fb8:	483e      	ldr	r0, [pc, #248]	; (80010b4 <Btc_RxVal+0x320>)
 8000fba:	f010 f8f5 	bl	80111a8 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000fbe:	e1c2      	b.n	8001346 <Btc_RxVal+0x5b2>
			case BTC_RX_HVAC_WINDSHIELDDEFROST_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000fc0:	4b35      	ldr	r3, [pc, #212]	; (8001098 <Btc_RxVal+0x304>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	f040 81c0 	bne.w	800134a <Btc_RxVal+0x5b6>
				{
					Btc_WindshieldDefrost = STD_LOW;
 8000fca:	4b3a      	ldr	r3, [pc, #232]	; (80010b4 <Btc_RxVal+0x320>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost(&Btc_WindshieldDefrost);
 8000fd0:	4838      	ldr	r0, [pc, #224]	; (80010b4 <Btc_RxVal+0x320>)
 8000fd2:	f010 f8e9 	bl	80111a8 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000fd6:	e1b8      	b.n	800134a <Btc_RxVal+0x5b6>
			case BTC_RX_HVAC_REARWINDSHIELDDEFROST_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000fd8:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <Btc_RxVal+0x304>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	f040 81b6 	bne.w	800134e <Btc_RxVal+0x5ba>
				{
					Btc_RearWindshieldDefrost = STD_HIGH;
 8000fe2:	4b35      	ldr	r3, [pc, #212]	; (80010b8 <Btc_RxVal+0x324>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost(&Btc_RearWindshieldDefrost);
 8000fe8:	4833      	ldr	r0, [pc, #204]	; (80010b8 <Btc_RxVal+0x324>)
 8000fea:	f010 f8ed 	bl	80111c8 <Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000fee:	e1ae      	b.n	800134e <Btc_RxVal+0x5ba>
			case BTC_RX_HVAC_REARWINDSHIELDDEFROST_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <Btc_RxVal+0x304>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	f040 81ac 	bne.w	8001352 <Btc_RxVal+0x5be>
				{
					Btc_RearWindshieldDefrost = STD_LOW;
 8000ffa:	4b2f      	ldr	r3, [pc, #188]	; (80010b8 <Btc_RxVal+0x324>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost(&Btc_RearWindshieldDefrost);
 8001000:	482d      	ldr	r0, [pc, #180]	; (80010b8 <Btc_RxVal+0x324>)
 8001002:	f010 f8e1 	bl	80111c8 <Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001006:	e1a4      	b.n	8001352 <Btc_RxVal+0x5be>
			case BTC_RX_HVAC_AC_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <Btc_RxVal+0x304>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	f040 81a2 	bne.w	8001356 <Btc_RxVal+0x5c2>
				{
					Btc_Ac = STD_HIGH;
 8001012:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <Btc_RxVal+0x328>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_Ac(&Btc_Ac);
 8001018:	4828      	ldr	r0, [pc, #160]	; (80010bc <Btc_RxVal+0x328>)
 800101a:	f010 f8e5 	bl	80111e8 <Rte_Write_Hvac_HvacPort_Hvac_Ac>
				}
				else
				{
					/* do nothing */
				}
				break;
 800101e:	e19a      	b.n	8001356 <Btc_RxVal+0x5c2>
			case BTC_RX_HVAC_AC_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001020:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <Btc_RxVal+0x304>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b01      	cmp	r3, #1
 8001026:	f040 8198 	bne.w	800135a <Btc_RxVal+0x5c6>
				{
					Btc_Ac = STD_LOW;
 800102a:	4b24      	ldr	r3, [pc, #144]	; (80010bc <Btc_RxVal+0x328>)
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_Ac(&Btc_Ac);
 8001030:	4822      	ldr	r0, [pc, #136]	; (80010bc <Btc_RxVal+0x328>)
 8001032:	f010 f8d9 	bl	80111e8 <Rte_Write_Hvac_HvacPort_Hvac_Ac>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001036:	e190      	b.n	800135a <Btc_RxVal+0x5c6>
			case BTC_RX_HVAC_RECIRCULATION:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <Btc_RxVal+0x304>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b01      	cmp	r3, #1
 800103e:	f040 818e 	bne.w	800135e <Btc_RxVal+0x5ca>
				{
					Btc_Recirculation = STD_HIGH;
 8001042:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <Btc_RxVal+0x32c>)
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
					Btc_NoRecirculation = STD_LOW;
 8001048:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <Btc_RxVal+0x330>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_Recirculation(&Btc_Recirculation);
 800104e:	481c      	ldr	r0, [pc, #112]	; (80010c0 <Btc_RxVal+0x32c>)
 8001050:	f010 f8da 	bl	8011208 <Rte_Write_Hvac_HvacPort_Hvac_Recirculation>
					Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation(&Btc_NoRecirculation);
 8001054:	481b      	ldr	r0, [pc, #108]	; (80010c4 <Btc_RxVal+0x330>)
 8001056:	f010 f8e7 	bl	8011228 <Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation>
				}
				else
				{
					/* do nothing */
				}
				break;
 800105a:	e180      	b.n	800135e <Btc_RxVal+0x5ca>
			case BTC_RX_HVAC_NORECIRCULATION:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <Btc_RxVal+0x304>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	f040 817e 	bne.w	8001362 <Btc_RxVal+0x5ce>
				{
					Btc_Recirculation = STD_LOW;
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <Btc_RxVal+0x32c>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
					Btc_NoRecirculation = STD_HIGH;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <Btc_RxVal+0x330>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_Recirculation(&Btc_Recirculation);
 8001072:	4813      	ldr	r0, [pc, #76]	; (80010c0 <Btc_RxVal+0x32c>)
 8001074:	f010 f8c8 	bl	8011208 <Rte_Write_Hvac_HvacPort_Hvac_Recirculation>
					Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation(&Btc_NoRecirculation);
 8001078:	4812      	ldr	r0, [pc, #72]	; (80010c4 <Btc_RxVal+0x330>)
 800107a:	f010 f8d5 	bl	8011228 <Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation>
				}
				else
				{
					/* do nothing */
				}
				break;
 800107e:	e170      	b.n	8001362 <Btc_RxVal+0x5ce>
			case BTC_RX_HVAC_AUTOMATICMODE_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <Btc_RxVal+0x304>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b01      	cmp	r3, #1
 8001086:	f040 816e 	bne.w	8001366 <Btc_RxVal+0x5d2>
				{
					Btc_AutomaticMode = STD_HIGH;
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <Btc_RxVal+0x334>)
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode(&Btc_AutomaticMode);
 8001090:	480d      	ldr	r0, [pc, #52]	; (80010c8 <Btc_RxVal+0x334>)
 8001092:	f010 f8d9 	bl	8011248 <Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001096:	e166      	b.n	8001366 <Btc_RxVal+0x5d2>
 8001098:	200000ae 	.word	0x200000ae
 800109c:	20000096 	.word	0x20000096
 80010a0:	200000a3 	.word	0x200000a3
 80010a4:	200000a4 	.word	0x200000a4
 80010a8:	200000a5 	.word	0x200000a5
 80010ac:	200000a6 	.word	0x200000a6
 80010b0:	200000a7 	.word	0x200000a7
 80010b4:	200000a8 	.word	0x200000a8
 80010b8:	200000a9 	.word	0x200000a9
 80010bc:	200000aa 	.word	0x200000aa
 80010c0:	200000ab 	.word	0x200000ab
 80010c4:	200000ac 	.word	0x200000ac
 80010c8:	200000ad 	.word	0x200000ad
			case BTC_RX_HVAC_AUTOMATICMODE_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80010cc:	4ba9      	ldr	r3, [pc, #676]	; (8001374 <Btc_RxVal+0x5e0>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	f040 814a 	bne.w	800136a <Btc_RxVal+0x5d6>
				{
					Btc_AutomaticMode = STD_LOW;
 80010d6:	4ba8      	ldr	r3, [pc, #672]	; (8001378 <Btc_RxVal+0x5e4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
					Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode(&Btc_AutomaticMode);
 80010dc:	48a6      	ldr	r0, [pc, #664]	; (8001378 <Btc_RxVal+0x5e4>)
 80010de:	f010 f8b3 	bl	8011248 <Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode>
				}
				else
				{
					/* do nothing */
				}
				break;
 80010e2:	e142      	b.n	800136a <Btc_RxVal+0x5d6>
			case BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80010e4:	4ba3      	ldr	r3, [pc, #652]	; (8001374 <Btc_RxVal+0x5e0>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	f040 8140 	bne.w	800136e <Btc_RxVal+0x5da>
				{
					Btc_ReverseLight = STD_HIGH;
 80010ee:	4ba3      	ldr	r3, [pc, #652]	; (800137c <Btc_RxVal+0x5e8>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 80010f4:	48a1      	ldr	r0, [pc, #644]	; (800137c <Btc_RxVal+0x5e8>)
 80010f6:	f010 fab3 	bl	8011660 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80010fa:	e138      	b.n	800136e <Btc_RxVal+0x5da>
			case BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80010fc:	4b9d      	ldr	r3, [pc, #628]	; (8001374 <Btc_RxVal+0x5e0>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b01      	cmp	r3, #1
 8001102:	f040 8153 	bne.w	80013ac <Btc_RxVal+0x618>
				{
					Btc_ReverseLight = STD_LOW;
 8001106:	4b9d      	ldr	r3, [pc, #628]	; (800137c <Btc_RxVal+0x5e8>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 800110c:	489b      	ldr	r0, [pc, #620]	; (800137c <Btc_RxVal+0x5e8>)
 800110e:	f010 faa7 	bl	8011660 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001112:	e14b      	b.n	80013ac <Btc_RxVal+0x618>
			case BTC_RX_EXTLIGHTS_POSITIONZERO:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001114:	4b97      	ldr	r3, [pc, #604]	; (8001374 <Btc_RxVal+0x5e0>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	f040 8149 	bne.w	80013b0 <Btc_RxVal+0x61c>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 800111e:	4b98      	ldr	r3, [pc, #608]	; (8001380 <Btc_RxVal+0x5ec>)
 8001120:	2217      	movs	r2, #23
 8001122:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8001124:	4896      	ldr	r0, [pc, #600]	; (8001380 <Btc_RxVal+0x5ec>)
 8001126:	f010 fabb 	bl	80116a0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800112a:	e141      	b.n	80013b0 <Btc_RxVal+0x61c>
			case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800112c:	4b91      	ldr	r3, [pc, #580]	; (8001374 <Btc_RxVal+0x5e0>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	f040 813f 	bne.w	80013b4 <Btc_RxVal+0x620>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 8001136:	4b92      	ldr	r3, [pc, #584]	; (8001380 <Btc_RxVal+0x5ec>)
 8001138:	2218      	movs	r2, #24
 800113a:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 800113c:	4890      	ldr	r0, [pc, #576]	; (8001380 <Btc_RxVal+0x5ec>)
 800113e:	f010 faaf 	bl	80116a0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001142:	e137      	b.n	80013b4 <Btc_RxVal+0x620>
			case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001144:	4b8b      	ldr	r3, [pc, #556]	; (8001374 <Btc_RxVal+0x5e0>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	f040 8135 	bne.w	80013b8 <Btc_RxVal+0x624>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 800114e:	4b8c      	ldr	r3, [pc, #560]	; (8001380 <Btc_RxVal+0x5ec>)
 8001150:	2219      	movs	r2, #25
 8001152:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8001154:	488a      	ldr	r0, [pc, #552]	; (8001380 <Btc_RxVal+0x5ec>)
 8001156:	f010 faa3 	bl	80116a0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800115a:	e12d      	b.n	80013b8 <Btc_RxVal+0x624>
			case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800115c:	4b85      	ldr	r3, [pc, #532]	; (8001374 <Btc_RxVal+0x5e0>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b01      	cmp	r3, #1
 8001162:	f040 812b 	bne.w	80013bc <Btc_RxVal+0x628>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 8001166:	4b86      	ldr	r3, [pc, #536]	; (8001380 <Btc_RxVal+0x5ec>)
 8001168:	221a      	movs	r2, #26
 800116a:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 800116c:	4884      	ldr	r0, [pc, #528]	; (8001380 <Btc_RxVal+0x5ec>)
 800116e:	f010 fa97 	bl	80116a0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001172:	e123      	b.n	80013bc <Btc_RxVal+0x628>
			case BTC_RX_CENLOC_ON:
				Btc_CenLoc = STD_HIGH;
 8001174:	4b83      	ldr	r3, [pc, #524]	; (8001384 <Btc_RxVal+0x5f0>)
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 800117a:	4882      	ldr	r0, [pc, #520]	; (8001384 <Btc_RxVal+0x5f0>)
 800117c:	f010 fa50 	bl	8011620 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>
				break;
 8001180:	e13d      	b.n	80013fe <Btc_RxVal+0x66a>
			case BTC_RX_CENLOC_OFF:
				Btc_CenLoc = STD_LOW;
 8001182:	4b80      	ldr	r3, [pc, #512]	; (8001384 <Btc_RxVal+0x5f0>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 8001188:	487e      	ldr	r0, [pc, #504]	; (8001384 <Btc_RxVal+0x5f0>)
 800118a:	f010 fa49 	bl	8011620 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>
				break;
 800118e:	e136      	b.n	80013fe <Btc_RxVal+0x66a>
			case BTC_RX_EXTLIGHTS_HIGHBEAM_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001190:	4b78      	ldr	r3, [pc, #480]	; (8001374 <Btc_RxVal+0x5e0>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b01      	cmp	r3, #1
 8001196:	f040 8113 	bne.w	80013c0 <Btc_RxVal+0x62c>
				{
					Btc_HighBeam = STD_HIGH;
 800119a:	4b7b      	ldr	r3, [pc, #492]	; (8001388 <Btc_RxVal+0x5f4>)
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
					Btc_FlashHighBeam = STD_LOW;
 80011a0:	4b7a      	ldr	r3, [pc, #488]	; (800138c <Btc_RxVal+0x5f8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 80011a6:	4878      	ldr	r0, [pc, #480]	; (8001388 <Btc_RxVal+0x5f4>)
 80011a8:	f010 fa8a 	bl	80116c0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80011ac:	e108      	b.n	80013c0 <Btc_RxVal+0x62c>
			case BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80011ae:	4b71      	ldr	r3, [pc, #452]	; (8001374 <Btc_RxVal+0x5e0>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	f040 8106 	bne.w	80013c4 <Btc_RxVal+0x630>
				{
					Btc_HighBeam = STD_LOW;
 80011b8:	4b73      	ldr	r3, [pc, #460]	; (8001388 <Btc_RxVal+0x5f4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 80011be:	4872      	ldr	r0, [pc, #456]	; (8001388 <Btc_RxVal+0x5f4>)
 80011c0:	f010 fa7e 	bl	80116c0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80011c4:	e0fe      	b.n	80013c4 <Btc_RxVal+0x630>
			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80011c6:	4b6b      	ldr	r3, [pc, #428]	; (8001374 <Btc_RxVal+0x5e0>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	f040 80fc 	bne.w	80013c8 <Btc_RxVal+0x634>
				{
					Btc_TurnSignalLeft = STD_HIGH;
 80011d0:	4b6f      	ldr	r3, [pc, #444]	; (8001390 <Btc_RxVal+0x5fc>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
					Btc_TurnSignalRight = STD_LOW;
 80011d6:	4b6f      	ldr	r3, [pc, #444]	; (8001394 <Btc_RxVal+0x600>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 80011dc:	486c      	ldr	r0, [pc, #432]	; (8001390 <Btc_RxVal+0x5fc>)
 80011de:	f010 fa8f 	bl	8011700 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 80011e2:	486c      	ldr	r0, [pc, #432]	; (8001394 <Btc_RxVal+0x600>)
 80011e4:	f010 fa9c 	bl	8011720 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80011e8:	e0ee      	b.n	80013c8 <Btc_RxVal+0x634>
			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80011ea:	4b62      	ldr	r3, [pc, #392]	; (8001374 <Btc_RxVal+0x5e0>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	f040 80ec 	bne.w	80013cc <Btc_RxVal+0x638>
				{
					Btc_TurnSignalLeft = STD_LOW;
 80011f4:	4b66      	ldr	r3, [pc, #408]	; (8001390 <Btc_RxVal+0x5fc>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 80011fa:	4865      	ldr	r0, [pc, #404]	; (8001390 <Btc_RxVal+0x5fc>)
 80011fc:	f010 fa80 	bl	8011700 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001200:	e0e4      	b.n	80013cc <Btc_RxVal+0x638>
			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001202:	4b5c      	ldr	r3, [pc, #368]	; (8001374 <Btc_RxVal+0x5e0>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b01      	cmp	r3, #1
 8001208:	f040 80e2 	bne.w	80013d0 <Btc_RxVal+0x63c>
				{
					Btc_TurnSignalRight = STD_HIGH;
 800120c:	4b61      	ldr	r3, [pc, #388]	; (8001394 <Btc_RxVal+0x600>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
					Btc_TurnSignalLeft = STD_LOW;
 8001212:	4b5f      	ldr	r3, [pc, #380]	; (8001390 <Btc_RxVal+0x5fc>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8001218:	485d      	ldr	r0, [pc, #372]	; (8001390 <Btc_RxVal+0x5fc>)
 800121a:	f010 fa71 	bl	8011700 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 800121e:	485d      	ldr	r0, [pc, #372]	; (8001394 <Btc_RxVal+0x600>)
 8001220:	f010 fa7e 	bl	8011720 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001224:	e0d4      	b.n	80013d0 <Btc_RxVal+0x63c>
			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001226:	4b53      	ldr	r3, [pc, #332]	; (8001374 <Btc_RxVal+0x5e0>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b01      	cmp	r3, #1
 800122c:	f040 80d2 	bne.w	80013d4 <Btc_RxVal+0x640>
				{
					Btc_TurnSignalRight = STD_LOW;
 8001230:	4b58      	ldr	r3, [pc, #352]	; (8001394 <Btc_RxVal+0x600>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8001236:	4857      	ldr	r0, [pc, #348]	; (8001394 <Btc_RxVal+0x600>)
 8001238:	f010 fa72 	bl	8011720 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800123c:	e0ca      	b.n	80013d4 <Btc_RxVal+0x640>
			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800123e:	4b4d      	ldr	r3, [pc, #308]	; (8001374 <Btc_RxVal+0x5e0>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b01      	cmp	r3, #1
 8001244:	f040 80c8 	bne.w	80013d8 <Btc_RxVal+0x644>
				{
					Btc_HazardLight = STD_HIGH;
 8001248:	4b53      	ldr	r3, [pc, #332]	; (8001398 <Btc_RxVal+0x604>)
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 800124e:	4852      	ldr	r0, [pc, #328]	; (8001398 <Btc_RxVal+0x604>)
 8001250:	f010 fa76 	bl	8011740 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001254:	e0c0      	b.n	80013d8 <Btc_RxVal+0x644>
			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001256:	4b47      	ldr	r3, [pc, #284]	; (8001374 <Btc_RxVal+0x5e0>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b01      	cmp	r3, #1
 800125c:	f040 80be 	bne.w	80013dc <Btc_RxVal+0x648>
				{
					Btc_HazardLight = STD_LOW;
 8001260:	4b4d      	ldr	r3, [pc, #308]	; (8001398 <Btc_RxVal+0x604>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 8001266:	484c      	ldr	r0, [pc, #304]	; (8001398 <Btc_RxVal+0x604>)
 8001268:	f010 fa6a 	bl	8011740 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800126c:	e0b6      	b.n	80013dc <Btc_RxVal+0x648>
			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800126e:	4b41      	ldr	r3, [pc, #260]	; (8001374 <Btc_RxVal+0x5e0>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b01      	cmp	r3, #1
 8001274:	f040 80b4 	bne.w	80013e0 <Btc_RxVal+0x64c>
				{
					Btc_FrontFogLight = STD_HIGH;
 8001278:	4b48      	ldr	r3, [pc, #288]	; (800139c <Btc_RxVal+0x608>)
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 800127e:	4847      	ldr	r0, [pc, #284]	; (800139c <Btc_RxVal+0x608>)
 8001280:	f010 fa2e 	bl	80116e0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001284:	e0ac      	b.n	80013e0 <Btc_RxVal+0x64c>
			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001286:	4b3b      	ldr	r3, [pc, #236]	; (8001374 <Btc_RxVal+0x5e0>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	f040 80aa 	bne.w	80013e4 <Btc_RxVal+0x650>
				{
					Btc_FrontFogLight = STD_LOW;
 8001290:	4b42      	ldr	r3, [pc, #264]	; (800139c <Btc_RxVal+0x608>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 8001296:	4841      	ldr	r0, [pc, #260]	; (800139c <Btc_RxVal+0x608>)
 8001298:	f010 fa22 	bl	80116e0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800129c:	e0a2      	b.n	80013e4 <Btc_RxVal+0x650>
			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800129e:	4b35      	ldr	r3, [pc, #212]	; (8001374 <Btc_RxVal+0x5e0>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	f040 80a0 	bne.w	80013e8 <Btc_RxVal+0x654>
				{
					Btc_RearFogLight = STD_HIGH;
 80012a8:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <Btc_RxVal+0x60c>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 80012ae:	483c      	ldr	r0, [pc, #240]	; (80013a0 <Btc_RxVal+0x60c>)
 80012b0:	f010 fa56 	bl	8011760 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80012b4:	e098      	b.n	80013e8 <Btc_RxVal+0x654>
			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80012b6:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <Btc_RxVal+0x5e0>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	f040 8096 	bne.w	80013ec <Btc_RxVal+0x658>
				{
					Btc_RearFogLight = STD_LOW;
 80012c0:	4b37      	ldr	r3, [pc, #220]	; (80013a0 <Btc_RxVal+0x60c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 80012c6:	4836      	ldr	r0, [pc, #216]	; (80013a0 <Btc_RxVal+0x60c>)
 80012c8:	f010 fa4a 	bl	8011760 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80012cc:	e08e      	b.n	80013ec <Btc_RxVal+0x658>
			case BTC_RX_EXTLIGHTS_BRAKELIGHTON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80012ce:	4b29      	ldr	r3, [pc, #164]	; (8001374 <Btc_RxVal+0x5e0>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	f040 808c 	bne.w	80013f0 <Btc_RxVal+0x65c>
				{
					Btc_BrakeLight = STD_HIGH;
 80012d8:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <Btc_RxVal+0x610>)
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 80012de:	4831      	ldr	r0, [pc, #196]	; (80013a4 <Btc_RxVal+0x610>)
 80012e0:	f010 f9ce 	bl	8011680 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80012e4:	e084      	b.n	80013f0 <Btc_RxVal+0x65c>
			case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80012e6:	4b23      	ldr	r3, [pc, #140]	; (8001374 <Btc_RxVal+0x5e0>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	f040 8082 	bne.w	80013f4 <Btc_RxVal+0x660>
				{
					Btc_BrakeLight = STD_LOW;
 80012f0:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <Btc_RxVal+0x610>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 80012f6:	482b      	ldr	r0, [pc, #172]	; (80013a4 <Btc_RxVal+0x610>)
 80012f8:	f010 f9c2 	bl	8011680 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80012fc:	e07a      	b.n	80013f4 <Btc_RxVal+0x660>
			case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <Btc_RxVal+0x5e0>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d178      	bne.n	80013f8 <Btc_RxVal+0x664>
				{
					Btc_IntLights = STD_HIGH;
 8001306:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <Btc_RxVal+0x614>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
					Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 800130c:	4826      	ldr	r0, [pc, #152]	; (80013a8 <Btc_RxVal+0x614>)
 800130e:	f010 fa67 	bl	80117e0 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001312:	e071      	b.n	80013f8 <Btc_RxVal+0x664>
			case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001314:	4b17      	ldr	r3, [pc, #92]	; (8001374 <Btc_RxVal+0x5e0>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d16f      	bne.n	80013fc <Btc_RxVal+0x668>
				{
					Btc_IntLights = STD_LOW;
 800131c:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <Btc_RxVal+0x614>)
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
					Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8001322:	4821      	ldr	r0, [pc, #132]	; (80013a8 <Btc_RxVal+0x614>)
 8001324:	f010 fa5c 	bl	80117e0 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001328:	e068      	b.n	80013fc <Btc_RxVal+0x668>
			default:
				break;
 800132a:	bf00      	nop
 800132c:	e067      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 800132e:	bf00      	nop
 8001330:	e065      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 8001332:	bf00      	nop
 8001334:	e063      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 8001336:	bf00      	nop
 8001338:	e061      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 800133a:	bf00      	nop
 800133c:	e05f      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 800133e:	bf00      	nop
 8001340:	e05d      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 8001342:	bf00      	nop
 8001344:	e05b      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 8001346:	bf00      	nop
 8001348:	e059      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 800134a:	bf00      	nop
 800134c:	e057      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 800134e:	bf00      	nop
 8001350:	e055      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 8001352:	bf00      	nop
 8001354:	e053      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 8001356:	bf00      	nop
 8001358:	e051      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 800135a:	bf00      	nop
 800135c:	e04f      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 800135e:	bf00      	nop
 8001360:	e04d      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 8001362:	bf00      	nop
 8001364:	e04b      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 8001366:	bf00      	nop
 8001368:	e049      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 800136a:	bf00      	nop
 800136c:	e047      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 800136e:	bf00      	nop
 8001370:	e045      	b.n	80013fe <Btc_RxVal+0x66a>
 8001372:	bf00      	nop
 8001374:	200000ae 	.word	0x200000ae
 8001378:	200000ad 	.word	0x200000ad
 800137c:	200000a1 	.word	0x200000a1
 8001380:	20000098 	.word	0x20000098
 8001384:	20000097 	.word	0x20000097
 8001388:	20000099 	.word	0x20000099
 800138c:	2000009a 	.word	0x2000009a
 8001390:	2000009c 	.word	0x2000009c
 8001394:	2000009d 	.word	0x2000009d
 8001398:	2000009e 	.word	0x2000009e
 800139c:	2000009b 	.word	0x2000009b
 80013a0:	200000a0 	.word	0x200000a0
 80013a4:	2000009f 	.word	0x2000009f
 80013a8:	200000a2 	.word	0x200000a2
				break;
 80013ac:	bf00      	nop
 80013ae:	e026      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 80013b0:	bf00      	nop
 80013b2:	e024      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 80013b4:	bf00      	nop
 80013b6:	e022      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 80013b8:	bf00      	nop
 80013ba:	e020      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 80013bc:	bf00      	nop
 80013be:	e01e      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 80013c0:	bf00      	nop
 80013c2:	e01c      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 80013c4:	bf00      	nop
 80013c6:	e01a      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 80013c8:	bf00      	nop
 80013ca:	e018      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 80013cc:	bf00      	nop
 80013ce:	e016      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 80013d0:	bf00      	nop
 80013d2:	e014      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 80013d4:	bf00      	nop
 80013d6:	e012      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 80013d8:	bf00      	nop
 80013da:	e010      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 80013dc:	bf00      	nop
 80013de:	e00e      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 80013e0:	bf00      	nop
 80013e2:	e00c      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 80013e4:	bf00      	nop
 80013e6:	e00a      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 80013e8:	bf00      	nop
 80013ea:	e008      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 80013ec:	bf00      	nop
 80013ee:	e006      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 80013f0:	bf00      	nop
 80013f2:	e004      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 80013f4:	bf00      	nop
 80013f6:	e002      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 80013f8:	bf00      	nop
 80013fa:	e000      	b.n	80013fe <Btc_RxVal+0x66a>
				break;
 80013fc:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop

08001404 <Btc_MainFunction>:
/***********************************************************************************
* Function: Btc_MainFunction											 		   *
* Description: Process bluetooth communication states.					           *
************************************************************************************/
VOID Btc_MainFunction()
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	Btc_RxVal();
 8001408:	f7ff fcc4 	bl	8000d94 <Btc_RxVal>
	Btc_RequestState();
 800140c:	f7ff fcb6 	bl	8000d7c <Btc_RequestState>
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <CenLoc_State>:
/***********************************************************************************
* Function: CenLoc_State													   	   *
* Description: Process the current and previous state of the central lock.		   *
************************************************************************************/
VOID CenLoc_State()
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	/* Every time the state of the central lock changes
	 * set the alarm to off. */
	CenLoc_SecAlmStateToOff();
 8001418:	f000 f852 	bl	80014c0 <CenLoc_SecAlmStateToOff>
	/* If the current state is different than the previous state
	 * update the variables respectively.
	 * Initialize the security alarm application.
	 * Calls for start of OS timer for lock unlock sequence.*/
	if(CenLoc_PreviousState != CenLoc_CurrentState)
 800141c:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <CenLoc_State+0x84>)
 800141e:	781a      	ldrb	r2, [r3, #0]
 8001420:	4b1e      	ldr	r3, [pc, #120]	; (800149c <CenLoc_State+0x88>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	429a      	cmp	r2, r3
 8001426:	d034      	beq.n	8001492 <CenLoc_State+0x7e>
	{
		CenLoc_PreviousStateFlag 	= CenLoc_PreviousState;
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <CenLoc_State+0x84>)
 800142a:	781a      	ldrb	r2, [r3, #0]
 800142c:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <CenLoc_State+0x8c>)
 800142e:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 		= CenLoc_CurrentState;
 8001430:	4b1a      	ldr	r3, [pc, #104]	; (800149c <CenLoc_State+0x88>)
 8001432:	781a      	ldrb	r2, [r3, #0]
 8001434:	4b18      	ldr	r3, [pc, #96]	; (8001498 <CenLoc_State+0x84>)
 8001436:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter 		= STD_LOW;
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <CenLoc_State+0x90>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
		CenLoc_FollowMeHomeCounter 	= STD_LOW;
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <CenLoc_State+0x94>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
		CenLoc_CyclicAlarmCounter	= STD_LOW;
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <CenLoc_State+0x98>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
		CenLoc_TurnOnLedCounter		= STD_LOW;
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <CenLoc_State+0x9c>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 8001450:	f001 fdea 	bl	8003028 <SecAlm_Init>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_CenLoc_LockUnlockSequence_TimerHandle, 250);
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <CenLoc_State+0xa0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	21fa      	movs	r1, #250	; 0xfa
 800145a:	4618      	mov	r0, r3
 800145c:	f010 fa41 	bl	80118e2 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(&CenLoc_BlinkCounter);
 8001460:	4810      	ldr	r0, [pc, #64]	; (80014a4 <CenLoc_State+0x90>)
 8001462:	f00f ffc1 	bl	80113e8 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>
		Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(&CenLoc_CyclicAlarmCounter);
 8001466:	4811      	ldr	r0, [pc, #68]	; (80014ac <CenLoc_State+0x98>)
 8001468:	f00f ffce 	bl	8011408 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>
		Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(&CenLoc_TurnOnLedCounter);
 800146c:	4810      	ldr	r0, [pc, #64]	; (80014b0 <CenLoc_State+0x9c>)
 800146e:	f00f ffdb 	bl	8011428 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 8001472:	480d      	ldr	r0, [pc, #52]	; (80014a8 <CenLoc_State+0x94>)
 8001474:	f00f ffe8 	bl	8011448 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLed_TurnOnCyclic_TimerHandle);
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <CenLoc_State+0xa4>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f010 fa3d 	bl	80118fc <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <CenLoc_State+0xa8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f010 fa38 	bl	80118fc <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 800148c:	2000      	movs	r0, #0
 800148e:	f001 fe09 	bl	80030a4 <SecAlm_ToggleAlarmLed>
	}
	else
	{
		/* do nothing */
	}
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200000af 	.word	0x200000af
 800149c:	200000ae 	.word	0x200000ae
 80014a0:	200000b6 	.word	0x200000b6
 80014a4:	200000b2 	.word	0x200000b2
 80014a8:	200000b4 	.word	0x200000b4
 80014ac:	200000b3 	.word	0x200000b3
 80014b0:	200000b5 	.word	0x200000b5
 80014b4:	200002e4 	.word	0x200002e4
 80014b8:	200002e8 	.word	0x200002e8
 80014bc:	200002ec 	.word	0x200002ec

080014c0 <CenLoc_SecAlmStateToOff>:
/***********************************************************************************
* Function: CenLoc_SecAlmStateToOff												   *
* Description: Turn off the security alarm.										   *
************************************************************************************/
VOID CenLoc_SecAlmStateToOff()
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	/* The central lock is on, the security alarm goes off. */
	if(CenLoc_CurrentState == STD_HIGH)
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <CenLoc_SecAlmStateToOff+0x14>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d101      	bne.n	80014d0 <CenLoc_SecAlmStateToOff+0x10>
	{
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 80014cc:	f001 fdac 	bl	8003028 <SecAlm_Init>
	}
	else
	{
		/* do nothing */
	}
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200000ae 	.word	0x200000ae

080014d8 <CenLoc_FollowMeHome>:
/***********************************************************************************
* Function: CenLoc_FollowMeHome												       *
* Description: Process the state of the follow me home.					 		   *
************************************************************************************/
VOID CenLoc_FollowMeHome()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	/* Follow me home is on as long as the timer is on. */
	if(CenLoc_FollowMeHomeCounter == 1)
 80014dc:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <CenLoc_FollowMeHome+0x3c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d103      	bne.n	80014ec <CenLoc_FollowMeHome+0x14>
	{
		CenLoc_FollowMeHomeState = STD_HIGH;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <CenLoc_FollowMeHome+0x40>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 80014ea:	e011      	b.n	8001510 <CenLoc_FollowMeHome+0x38>
	else if(CenLoc_FollowMeHomeCounter == 2)
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <CenLoc_FollowMeHome+0x3c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d10d      	bne.n	8001510 <CenLoc_FollowMeHome+0x38>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_FollowMeHome_TimerHandle);
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <CenLoc_FollowMeHome+0x44>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f010 f9ff 	bl	80118fc <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		CenLoc_FollowMeHomeState = STD_LOW;
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <CenLoc_FollowMeHome+0x40>)
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
		CenLoc_FollowMeHomeCounter = 2;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <CenLoc_FollowMeHome+0x3c>)
 8001506:	2202      	movs	r2, #2
 8001508:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 800150a:	4802      	ldr	r0, [pc, #8]	; (8001514 <CenLoc_FollowMeHome+0x3c>)
 800150c:	f00f ff9c 	bl	8011448 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200000b4 	.word	0x200000b4
 8001518:	200000b0 	.word	0x200000b0
 800151c:	200002f0 	.word	0x200002f0

08001520 <CenLoc_UnlockSequence>:
/***********************************************************************************
* Function: CenLoc_UnlockSequence												   *
* Description: Process the unlock sequence. 		   							   *
************************************************************************************/
VOID CenLoc_UnlockSequence()
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	/* Stop the timer used for the security alarm LED. */
	Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLed_TurnOnCyclic_TimerHandle);
 8001524:	4b48      	ldr	r3, [pc, #288]	; (8001648 <CenLoc_UnlockSequence+0x128>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f010 f9e7 	bl	80118fc <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
	/* Process follow me home state. */
	CenLoc_FollowMeHome();
 800152e:	f7ff ffd3 	bl	80014d8 <CenLoc_FollowMeHome>
	/* Sets previous state to high so that on locking it is taken into consideration. */
	localPreviousState = STD_HIGH;
 8001532:	4b46      	ldr	r3, [pc, #280]	; (800164c <CenLoc_UnlockSequence+0x12c>)
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
	/* Unlocking sequence consists of triggering the hazard lights twice on and twice off.*/
	if(CenLoc_BlinkCounter <= 3)
 8001538:	4b45      	ldr	r3, [pc, #276]	; (8001650 <CenLoc_UnlockSequence+0x130>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b03      	cmp	r3, #3
 800153e:	d86f      	bhi.n	8001620 <CenLoc_UnlockSequence+0x100>
	{
		/* On and off period for the hazard lights and buzzer is defined in the OS timer start call. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8001540:	4b44      	ldr	r3, [pc, #272]	; (8001654 <CenLoc_UnlockSequence+0x134>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001548:	4618      	mov	r0, r3
 800154a:	f010 f9ca 	bl	80118e2 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		/* Start the OS timer for the follow me home. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_FollowMeHome_TimerHandle) == STD_LOW)
 800154e:	4b42      	ldr	r3, [pc, #264]	; (8001658 <CenLoc_UnlockSequence+0x138>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f00c fed3 	bl	800e2fe <osTimerIsRunning>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d106      	bne.n	800156c <CenLoc_UnlockSequence+0x4c>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_FollowMeHome_TimerHandle, 20000);
 800155e:	4b3e      	ldr	r3, [pc, #248]	; (8001658 <CenLoc_UnlockSequence+0x138>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001566:	4618      	mov	r0, r3
 8001568:	f010 f9bb 	bl	80118e2 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		{
			/* do nothing */
		}
		/* Set the follow me home timer state variable to one to prevent activation of the follow me home
		 * when it is not requested. Upon expiration, the timer callback increments this variable. */
		CenLoc_FollowMeHomeCounter = STD_HIGH;
 800156c:	4b3b      	ldr	r3, [pc, #236]	; (800165c <CenLoc_UnlockSequence+0x13c>)
 800156e:	2201      	movs	r2, #1
 8001570:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 8001572:	483a      	ldr	r0, [pc, #232]	; (800165c <CenLoc_UnlockSequence+0x13c>)
 8001574:	f00f ff68 	bl	8011448 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		/* Process the on off states of the hazard lights and the buzzer. */
		switch(CenLoc_BlinkCounter)
 8001578:	4b35      	ldr	r3, [pc, #212]	; (8001650 <CenLoc_UnlockSequence+0x130>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b03      	cmp	r3, #3
 800157e:	d85f      	bhi.n	8001640 <CenLoc_UnlockSequence+0x120>
 8001580:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <CenLoc_UnlockSequence+0x68>)
 8001582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001586:	bf00      	nop
 8001588:	08001599 	.word	0x08001599
 800158c:	080015bb 	.word	0x080015bb
 8001590:	080015dd 	.word	0x080015dd
 8001594:	080015ff 	.word	0x080015ff
		{
			case 0:
				CenLoc_BlinkState = STD_HIGH;
 8001598:	4b31      	ldr	r3, [pc, #196]	; (8001660 <CenLoc_UnlockSequence+0x140>)
 800159a:	2201      	movs	r2, #1
 800159c:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 800159e:	2108      	movs	r1, #8
 80015a0:	4830      	ldr	r0, [pc, #192]	; (8001664 <CenLoc_UnlockSequence+0x144>)
 80015a2:	f00f ffcb 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80015a6:	210c      	movs	r1, #12
 80015a8:	482e      	ldr	r0, [pc, #184]	; (8001664 <CenLoc_UnlockSequence+0x144>)
 80015aa:	f00f ffc7 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 80015ae:	4b2c      	ldr	r3, [pc, #176]	; (8001660 <CenLoc_UnlockSequence+0x140>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f962 	bl	800187c <CenLoc_ToggleBuzzer>
				break;
 80015b8:	e043      	b.n	8001642 <CenLoc_UnlockSequence+0x122>
			case 1:
				CenLoc_BlinkState = STD_LOW;
 80015ba:	4b29      	ldr	r3, [pc, #164]	; (8001660 <CenLoc_UnlockSequence+0x140>)
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80015c0:	2108      	movs	r1, #8
 80015c2:	4828      	ldr	r0, [pc, #160]	; (8001664 <CenLoc_UnlockSequence+0x144>)
 80015c4:	f00f ffba 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80015c8:	210c      	movs	r1, #12
 80015ca:	4826      	ldr	r0, [pc, #152]	; (8001664 <CenLoc_UnlockSequence+0x144>)
 80015cc:	f00f ffb6 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 80015d0:	4b23      	ldr	r3, [pc, #140]	; (8001660 <CenLoc_UnlockSequence+0x140>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 f951 	bl	800187c <CenLoc_ToggleBuzzer>
				break;
 80015da:	e032      	b.n	8001642 <CenLoc_UnlockSequence+0x122>
			case 2:
				CenLoc_BlinkState = STD_HIGH;
 80015dc:	4b20      	ldr	r3, [pc, #128]	; (8001660 <CenLoc_UnlockSequence+0x140>)
 80015de:	2201      	movs	r2, #1
 80015e0:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80015e2:	2108      	movs	r1, #8
 80015e4:	481f      	ldr	r0, [pc, #124]	; (8001664 <CenLoc_UnlockSequence+0x144>)
 80015e6:	f00f ffa9 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80015ea:	210c      	movs	r1, #12
 80015ec:	481d      	ldr	r0, [pc, #116]	; (8001664 <CenLoc_UnlockSequence+0x144>)
 80015ee:	f00f ffa5 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <CenLoc_UnlockSequence+0x140>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 f940 	bl	800187c <CenLoc_ToggleBuzzer>
				break;
 80015fc:	e021      	b.n	8001642 <CenLoc_UnlockSequence+0x122>
			case 3:
				CenLoc_BlinkState = STD_LOW;
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <CenLoc_UnlockSequence+0x140>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001604:	2108      	movs	r1, #8
 8001606:	4817      	ldr	r0, [pc, #92]	; (8001664 <CenLoc_UnlockSequence+0x144>)
 8001608:	f00f ff98 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800160c:	210c      	movs	r1, #12
 800160e:	4815      	ldr	r0, [pc, #84]	; (8001664 <CenLoc_UnlockSequence+0x144>)
 8001610:	f00f ff94 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <CenLoc_UnlockSequence+0x140>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f000 f92f 	bl	800187c <CenLoc_ToggleBuzzer>
				break;
 800161e:	e010      	b.n	8001642 <CenLoc_UnlockSequence+0x122>
			default:
				break;
		}
	}/* After the sequence is completed, stop the timers and set the variables related to this sequence to out of bounds values to prevent triggering when not requested. */
	else if(CenLoc_BlinkCounter >= 3)
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <CenLoc_UnlockSequence+0x130>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d90c      	bls.n	8001642 <CenLoc_UnlockSequence+0x122>
	{
		CenLoc_BlinkState = 2;
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <CenLoc_UnlockSequence+0x140>)
 800162a:	2202      	movs	r2, #2
 800162c:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter = 6;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <CenLoc_UnlockSequence+0x130>)
 8001630:	2206      	movs	r2, #6
 8001632:	701a      	strb	r2, [r3, #0]
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <CenLoc_UnlockSequence+0x148>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f010 f95f 	bl	80118fc <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
	}
	else
	{
		/* do nothing */
	}
}
 800163e:	e000      	b.n	8001642 <CenLoc_UnlockSequence+0x122>
				break;
 8001640:	bf00      	nop
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200002e8 	.word	0x200002e8
 800164c:	200000b7 	.word	0x200000b7
 8001650:	200000b2 	.word	0x200000b2
 8001654:	200002f4 	.word	0x200002f4
 8001658:	200002f0 	.word	0x200002f0
 800165c:	200000b4 	.word	0x200000b4
 8001660:	200000b1 	.word	0x200000b1
 8001664:	20000638 	.word	0x20000638
 8001668:	200002e4 	.word	0x200002e4

0800166c <CenLoc_LockSequence>:
/***********************************************************************************
* Function: CenLoc_LockSequence													   *
* Description: Process the lock sequence.								 		   *
************************************************************************************/
VOID CenLoc_LockSequence()
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	/* Process follow me home state.*/
	CenLoc_FollowMeHome();
 8001670:	f7ff ff32 	bl	80014d8 <CenLoc_FollowMeHome>
	/* If the central lock has been on previously
	 * and the variable related to the state of the timer is less than the value of
	 * how many times the hazard lights should turn on on locking, proceed with the processing. */
	if(CenLoc_BlinkCounter <= STD_HIGH && localPreviousState == STD_HIGH)
 8001674:	4b32      	ldr	r3, [pc, #200]	; (8001740 <CenLoc_LockSequence+0xd4>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d84d      	bhi.n	8001718 <CenLoc_LockSequence+0xac>
 800167c:	4b31      	ldr	r3, [pc, #196]	; (8001744 <CenLoc_LockSequence+0xd8>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d149      	bne.n	8001718 <CenLoc_LockSequence+0xac>
	{
		/* On and off period for the hazard lights and buzzer is defined in the OS timer start call. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8001684:	4b30      	ldr	r3, [pc, #192]	; (8001748 <CenLoc_LockSequence+0xdc>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800168c:	4618      	mov	r0, r3
 800168e:	f010 f928 	bl	80118e2 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		/* Start the OS timer for the follow me home. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_FollowMeHome_TimerHandle) == STD_LOW)
 8001692:	4b2e      	ldr	r3, [pc, #184]	; (800174c <CenLoc_LockSequence+0xe0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f00c fe31 	bl	800e2fe <osTimerIsRunning>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d106      	bne.n	80016b0 <CenLoc_LockSequence+0x44>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_FollowMeHome_TimerHandle, 20000);
 80016a2:	4b2a      	ldr	r3, [pc, #168]	; (800174c <CenLoc_LockSequence+0xe0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f644 6120 	movw	r1, #20000	; 0x4e20
 80016aa:	4618      	mov	r0, r3
 80016ac:	f010 f919 	bl	80118e2 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		{
			/* do nothing */
		}
		/* Set the follow me home timer state variable to one to prevent activation of the follow me home
		 * when it is not requested. Upon expiration, the timer callback increments this variable. */
		CenLoc_FollowMeHomeCounter = STD_HIGH;
 80016b0:	4b27      	ldr	r3, [pc, #156]	; (8001750 <CenLoc_LockSequence+0xe4>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 80016b6:	4826      	ldr	r0, [pc, #152]	; (8001750 <CenLoc_LockSequence+0xe4>)
 80016b8:	f00f fec6 	bl	8011448 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		/* Process the on off states of the hazard lights and buzzer. */
		switch(CenLoc_BlinkCounter)
 80016bc:	4b20      	ldr	r3, [pc, #128]	; (8001740 <CenLoc_LockSequence+0xd4>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <CenLoc_LockSequence+0x5e>
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d011      	beq.n	80016ec <CenLoc_LockSequence+0x80>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
				localPreviousState = STD_LOW;
				break;
			default:
				break;
 80016c8:	e024      	b.n	8001714 <CenLoc_LockSequence+0xa8>
				CenLoc_BlinkState = STD_HIGH;
 80016ca:	4b22      	ldr	r3, [pc, #136]	; (8001754 <CenLoc_LockSequence+0xe8>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80016d0:	2108      	movs	r1, #8
 80016d2:	4821      	ldr	r0, [pc, #132]	; (8001758 <CenLoc_LockSequence+0xec>)
 80016d4:	f00f ff32 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80016d8:	210c      	movs	r1, #12
 80016da:	481f      	ldr	r0, [pc, #124]	; (8001758 <CenLoc_LockSequence+0xec>)
 80016dc:	f00f ff2e 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 80016e0:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <CenLoc_LockSequence+0xe8>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 f8c9 	bl	800187c <CenLoc_ToggleBuzzer>
				break;
 80016ea:	e013      	b.n	8001714 <CenLoc_LockSequence+0xa8>
				CenLoc_BlinkState = STD_LOW;
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <CenLoc_LockSequence+0xe8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80016f2:	2108      	movs	r1, #8
 80016f4:	4818      	ldr	r0, [pc, #96]	; (8001758 <CenLoc_LockSequence+0xec>)
 80016f6:	f00f ff21 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80016fa:	210c      	movs	r1, #12
 80016fc:	4816      	ldr	r0, [pc, #88]	; (8001758 <CenLoc_LockSequence+0xec>)
 80016fe:	f00f ff1d 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <CenLoc_LockSequence+0xe8>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f8b8 	bl	800187c <CenLoc_ToggleBuzzer>
				localPreviousState = STD_LOW;
 800170c:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <CenLoc_LockSequence+0xd8>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
				break;
 8001712:	bf00      	nop
		switch(CenLoc_BlinkCounter)
 8001714:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
}
 8001716:	e011      	b.n	800173c <CenLoc_LockSequence+0xd0>
	else if(CenLoc_BlinkCounter == 2)
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <CenLoc_LockSequence+0xd4>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d10d      	bne.n	800173c <CenLoc_LockSequence+0xd0>
		CenLoc_BlinkState = 2;
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <CenLoc_LockSequence+0xe8>)
 8001722:	2202      	movs	r2, #2
 8001724:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter = 4;
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <CenLoc_LockSequence+0xd4>)
 8001728:	2204      	movs	r2, #4
 800172a:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(&CenLoc_BlinkCounter);
 800172c:	4804      	ldr	r0, [pc, #16]	; (8001740 <CenLoc_LockSequence+0xd4>)
 800172e:	f00f fe5b 	bl	80113e8 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <CenLoc_LockSequence+0xf0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f010 f8e0 	bl	80118fc <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200000b2 	.word	0x200000b2
 8001744:	200000b7 	.word	0x200000b7
 8001748:	200002f4 	.word	0x200002f4
 800174c:	200002f0 	.word	0x200002f0
 8001750:	200000b4 	.word	0x200000b4
 8001754:	200000b1 	.word	0x200000b1
 8001758:	20000638 	.word	0x20000638
 800175c:	200002e4 	.word	0x200002e4

08001760 <CenLoc_ControlAlarmLed>:
/***********************************************************************************
* Function: CenLoc_ControlAlarmLed												   *
* Description: Controls the security alarm LED 		   							   *
************************************************************************************/
VOID CenLoc_ControlAlarmLed()
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	/* Check if the central lock state is set to high. */
	if(CenLoc_CurrentState == STD_HIGH)
 8001764:	4b2f      	ldr	r3, [pc, #188]	; (8001824 <CenLoc_ControlAlarmLed+0xc4>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d10b      	bne.n	8001784 <CenLoc_ControlAlarmLed+0x24>
	{
		/* Set the security alarm LED to off. */
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 800176c:	2000      	movs	r0, #0
 800176e:	f001 fc99 	bl	80030a4 <SecAlm_ToggleAlarmLed>
		/* Set the timer flag to 0. */
		CenLoc_TurnOnLedCounter = STD_LOW;
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <CenLoc_ControlAlarmLed+0xc8>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
		/* Stop the timer related to the LED cyclic trigger. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 8001778:	4b2c      	ldr	r3, [pc, #176]	; (800182c <CenLoc_ControlAlarmLed+0xcc>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f010 f8bd 	bl	80118fc <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		else
		{
			/* do nothing */
		}
	}
}
 8001782:	e04c      	b.n	800181e <CenLoc_ControlAlarmLed+0xbe>
	else if(CenLoc_CurrentState == STD_LOW)
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <CenLoc_ControlAlarmLed+0xc4>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d148      	bne.n	800181e <CenLoc_ControlAlarmLed+0xbe>
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLed_TurnOnCyclic_TimerHandle) == STD_LOW && Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLedTurnOn_TimerHandle) == STD_LOW)
 800178c:	4b28      	ldr	r3, [pc, #160]	; (8001830 <CenLoc_ControlAlarmLed+0xd0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f00c fdb4 	bl	800e2fe <osTimerIsRunning>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10e      	bne.n	80017ba <CenLoc_ControlAlarmLed+0x5a>
 800179c:	4b23      	ldr	r3, [pc, #140]	; (800182c <CenLoc_ControlAlarmLed+0xcc>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f00c fdac 	bl	800e2fe <osTimerIsRunning>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d106      	bne.n	80017ba <CenLoc_ControlAlarmLed+0x5a>
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmLed_TurnOnCyclic_TimerHandle, 3750);
 80017ac:	4b20      	ldr	r3, [pc, #128]	; (8001830 <CenLoc_ControlAlarmLed+0xd0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f640 61a6 	movw	r1, #3750	; 0xea6
 80017b4:	4618      	mov	r0, r3
 80017b6:	f010 f894 	bl	80118e2 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		if(CenLoc_CyclicAlarmCounter == STD_HIGH)
 80017ba:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <CenLoc_ControlAlarmLed+0xd4>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d12d      	bne.n	800181e <CenLoc_ControlAlarmLed+0xbe>
			if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLedTurnOn_TimerHandle) == STD_LOW)
 80017c2:	4b1a      	ldr	r3, [pc, #104]	; (800182c <CenLoc_ControlAlarmLed+0xcc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f00c fd99 	bl	800e2fe <osTimerIsRunning>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d105      	bne.n	80017de <CenLoc_ControlAlarmLed+0x7e>
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmLedTurnOn_TimerHandle, 250);
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <CenLoc_ControlAlarmLed+0xcc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	21fa      	movs	r1, #250	; 0xfa
 80017d8:	4618      	mov	r0, r3
 80017da:	f010 f882 	bl	80118e2 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
			if(CenLoc_TurnOnLedCounter < STD_HIGH)
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <CenLoc_ControlAlarmLed+0xc8>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d103      	bne.n	80017ee <CenLoc_ControlAlarmLed+0x8e>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_HIGH);
 80017e6:	2001      	movs	r0, #1
 80017e8:	f001 fc5c 	bl	80030a4 <SecAlm_ToggleAlarmLed>
}
 80017ec:	e017      	b.n	800181e <CenLoc_ControlAlarmLed+0xbe>
			else if(CenLoc_TurnOnLedCounter == STD_HIGH)
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <CenLoc_ControlAlarmLed+0xc8>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d113      	bne.n	800181e <CenLoc_ControlAlarmLed+0xbe>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f001 fc54 	bl	80030a4 <SecAlm_ToggleAlarmLed>
				CenLoc_TurnOnLedCounter = STD_LOW;
 80017fc:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <CenLoc_ControlAlarmLed+0xc8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
				CenLoc_CyclicAlarmCounter = STD_LOW;
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <CenLoc_ControlAlarmLed+0xd4>)
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
				Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(&CenLoc_CyclicAlarmCounter);
 8001808:	480a      	ldr	r0, [pc, #40]	; (8001834 <CenLoc_ControlAlarmLed+0xd4>)
 800180a:	f00f fdfd 	bl	8011408 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>
				Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(&CenLoc_TurnOnLedCounter);
 800180e:	4806      	ldr	r0, [pc, #24]	; (8001828 <CenLoc_ControlAlarmLed+0xc8>)
 8001810:	f00f fe0a 	bl	8011428 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <CenLoc_ControlAlarmLed+0xcc>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f010 f86f 	bl	80118fc <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200000ae 	.word	0x200000ae
 8001828:	200000b5 	.word	0x200000b5
 800182c:	200002ec 	.word	0x200002ec
 8001830:	200002e8 	.word	0x200002e8
 8001834:	200000b3 	.word	0x200000b3

08001838 <CenLoc_LockUnlockStates>:
/***********************************************************************************
* Function: CenLoc_LockUnlockStates												   *
* Description: Check for the state of the central lock.					 		   *
************************************************************************************/
VOID CenLoc_LockUnlockStates()
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	/* If the central lock state is set to high and the security alarm is set to off. */
	if(CenLoc_CurrentState == STD_HIGH && Rte_P_SecAlm_SecAlmPort_SecAlm_Trigger == STD_LOW)
 800183c:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <CenLoc_LockUnlockStates+0x3c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d108      	bne.n	8001856 <CenLoc_LockUnlockStates+0x1e>
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <CenLoc_LockUnlockStates+0x40>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d104      	bne.n	8001856 <CenLoc_LockUnlockStates+0x1e>
	{
		/* Perform the related activities. */
		CenLoc_UnlockSequence();
 800184c:	f7ff fe68 	bl	8001520 <CenLoc_UnlockSequence>
		CenLoc_ControlAlarmLed();
 8001850:	f7ff ff86 	bl	8001760 <CenLoc_ControlAlarmLed>
	}
	else
	{
		/* do nothing */
	}
}
 8001854:	e00b      	b.n	800186e <CenLoc_LockUnlockStates+0x36>
	else if(CenLoc_CurrentState == STD_LOW && Rte_P_SecAlm_SecAlmPort_SecAlm_Trigger == STD_LOW)
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <CenLoc_LockUnlockStates+0x3c>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d107      	bne.n	800186e <CenLoc_LockUnlockStates+0x36>
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <CenLoc_LockUnlockStates+0x40>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d103      	bne.n	800186e <CenLoc_LockUnlockStates+0x36>
		CenLoc_LockSequence();
 8001866:	f7ff ff01 	bl	800166c <CenLoc_LockSequence>
		CenLoc_ControlAlarmLed();
 800186a:	f7ff ff79 	bl	8001760 <CenLoc_ControlAlarmLed>
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200000ae 	.word	0x200000ae
 8001878:	20000134 	.word	0x20000134

0800187c <CenLoc_ToggleBuzzer>:
/***********************************************************************************
* Function: CenLoc_ToggleBuzzer													   *
* Description: Trigger central lock buzzer. 		   							   *
************************************************************************************/
VOID CenLoc_ToggleBuzzer(uint8 PinState)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(CENLOC_BUZZER_PORT, CENLOC_BUZZER_PIN, PinState);
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	461a      	mov	r2, r3
 800188a:	2104      	movs	r1, #4
 800188c:	4803      	ldr	r0, [pc, #12]	; (800189c <CenLoc_ToggleBuzzer+0x20>)
 800188e:	f010 f816 	bl	80118be <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40020400 	.word	0x40020400

080018a0 <CenLoc_MainFunction>:
/***********************************************************************************
* Function: CenLoc_MainFunction													   *
* Description: Central lock main function. Process the states of the application.  *
************************************************************************************/
VOID CenLoc_MainFunction()
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	CenLoc_State();
 80018a4:	f7ff fdb6 	bl	8001414 <CenLoc_State>
	CenLoc_LockUnlockStates();
 80018a8:	f7ff ffc6 	bl	8001838 <CenLoc_LockUnlockStates>
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <DiagCtrl_MainFunction>:
/***********************************************************************************
* Function: DiagCtrl_MainFunction										   		   *
* Description: Application main function.		 		   						   *
************************************************************************************/
VOID DiagCtrl_MainFunction()
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	DiagCtrl_ProcessRequestedData();
 80018b4:	f000 f802 	bl	80018bc <DiagCtrl_ProcessRequestedData>
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}

080018bc <DiagCtrl_ProcessRequestedData>:
/***********************************************************************************
* Function: DiagCtrl_ProcessRequestedData										   *
* Description: Process the measured requested data.		 		   				   *
************************************************************************************/
VOID DiagCtrl_ProcessRequestedData()
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	static uint8 SpiCanTransceiver_FaultValue_Seven = 0;
	static uint8 CanBusOff_FaultValue = 0;
	static uint8 CanRx_FaultValue = 0;
	static uint8 CanTx_FaultValue = 0;
#endif
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&LightSensor_RequestedValue, 0);
 80018c0:	2100      	movs	r1, #0
 80018c2:	48a5      	ldr	r0, [pc, #660]	; (8001b58 <DiagCtrl_ProcessRequestedData+0x29c>)
 80018c4:	f00f fe88 	bl	80115d8 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&VibrationSensor_RequestedValue, 1);
 80018c8:	2101      	movs	r1, #1
 80018ca:	48a4      	ldr	r0, [pc, #656]	; (8001b5c <DiagCtrl_ProcessRequestedData+0x2a0>)
 80018cc:	f00f fe84 	bl	80115d8 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&TemperatureSensor_RequestedValue, 3);
 80018d0:	2103      	movs	r1, #3
 80018d2:	48a3      	ldr	r0, [pc, #652]	; (8001b60 <DiagCtrl_ProcessRequestedData+0x2a4>)
 80018d4:	f00f fe80 	bl	80115d8 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_One, 17);
 80018d8:	2111      	movs	r1, #17
 80018da:	48a2      	ldr	r0, [pc, #648]	; (8001b64 <DiagCtrl_ProcessRequestedData+0x2a8>)
 80018dc:	f00f fbfa 	bl	80110d4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Two, 18);
 80018e0:	2112      	movs	r1, #18
 80018e2:	48a1      	ldr	r0, [pc, #644]	; (8001b68 <DiagCtrl_ProcessRequestedData+0x2ac>)
 80018e4:	f00f fbf6 	bl	80110d4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Three, 19);
 80018e8:	2113      	movs	r1, #19
 80018ea:	48a0      	ldr	r0, [pc, #640]	; (8001b6c <DiagCtrl_ProcessRequestedData+0x2b0>)
 80018ec:	f00f fbf2 	bl	80110d4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Four, 20);
 80018f0:	2114      	movs	r1, #20
 80018f2:	489f      	ldr	r0, [pc, #636]	; (8001b70 <DiagCtrl_ProcessRequestedData+0x2b4>)
 80018f4:	f00f fbee 	bl	80110d4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_One, 41);
 80018f8:	2129      	movs	r1, #41	; 0x29
 80018fa:	489e      	ldr	r0, [pc, #632]	; (8001b74 <DiagCtrl_ProcessRequestedData+0x2b8>)
 80018fc:	f00f fbea 	bl	80110d4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Two, 42);
 8001900:	212a      	movs	r1, #42	; 0x2a
 8001902:	489d      	ldr	r0, [pc, #628]	; (8001b78 <DiagCtrl_ProcessRequestedData+0x2bc>)
 8001904:	f00f fbe6 	bl	80110d4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Three, 43);
 8001908:	212b      	movs	r1, #43	; 0x2b
 800190a:	489c      	ldr	r0, [pc, #624]	; (8001b7c <DiagCtrl_ProcessRequestedData+0x2c0>)
 800190c:	f00f fbe2 	bl	80110d4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Four, 44);
 8001910:	212c      	movs	r1, #44	; 0x2c
 8001912:	489b      	ldr	r0, [pc, #620]	; (8001b80 <DiagCtrl_ProcessRequestedData+0x2c4>)
 8001914:	f00f fbde 	bl	80110d4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Five, 45);
 8001918:	212d      	movs	r1, #45	; 0x2d
 800191a:	489a      	ldr	r0, [pc, #616]	; (8001b84 <DiagCtrl_ProcessRequestedData+0x2c8>)
 800191c:	f00f fbda 	bl	80110d4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Six, 46);
 8001920:	212e      	movs	r1, #46	; 0x2e
 8001922:	4899      	ldr	r0, [pc, #612]	; (8001b88 <DiagCtrl_ProcessRequestedData+0x2cc>)
 8001924:	f00f fbd6 	bl	80110d4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Seven, 47);
 8001928:	212f      	movs	r1, #47	; 0x2f
 800192a:	4898      	ldr	r0, [pc, #608]	; (8001b8c <DiagCtrl_ProcessRequestedData+0x2d0>)
 800192c:	f00f fbd2 	bl	80110d4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Eight, 48);
 8001930:	2130      	movs	r1, #48	; 0x30
 8001932:	4897      	ldr	r0, [pc, #604]	; (8001b90 <DiagCtrl_ProcessRequestedData+0x2d4>)
 8001934:	f00f fbce 	bl	80110d4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_One, 33);
 8001938:	2121      	movs	r1, #33	; 0x21
 800193a:	4896      	ldr	r0, [pc, #600]	; (8001b94 <DiagCtrl_ProcessRequestedData+0x2d8>)
 800193c:	f00f fbca 	bl	80110d4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Two, 34);
 8001940:	2122      	movs	r1, #34	; 0x22
 8001942:	4895      	ldr	r0, [pc, #596]	; (8001b98 <DiagCtrl_ProcessRequestedData+0x2dc>)
 8001944:	f00f fbc6 	bl	80110d4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Three, 35);
 8001948:	2123      	movs	r1, #35	; 0x23
 800194a:	4894      	ldr	r0, [pc, #592]	; (8001b9c <DiagCtrl_ProcessRequestedData+0x2e0>)
 800194c:	f00f fbc2 	bl	80110d4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Four, 36);
 8001950:	2124      	movs	r1, #36	; 0x24
 8001952:	4893      	ldr	r0, [pc, #588]	; (8001ba0 <DiagCtrl_ProcessRequestedData+0x2e4>)
 8001954:	f00f fbbe 	bl	80110d4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Five, 37);
 8001958:	2125      	movs	r1, #37	; 0x25
 800195a:	4892      	ldr	r0, [pc, #584]	; (8001ba4 <DiagCtrl_ProcessRequestedData+0x2e8>)
 800195c:	f00f fbba 	bl	80110d4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Six, 38);
 8001960:	2126      	movs	r1, #38	; 0x26
 8001962:	4891      	ldr	r0, [pc, #580]	; (8001ba8 <DiagCtrl_ProcessRequestedData+0x2ec>)
 8001964:	f00f fbb6 	bl	80110d4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Seven, 39);
 8001968:	2127      	movs	r1, #39	; 0x27
 800196a:	4890      	ldr	r0, [pc, #576]	; (8001bac <DiagCtrl_ProcessRequestedData+0x2f0>)
 800196c:	f00f fbb2 	bl	80110d4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Eight, 40);
 8001970:	2128      	movs	r1, #40	; 0x28
 8001972:	488f      	ldr	r0, [pc, #572]	; (8001bb0 <DiagCtrl_ProcessRequestedData+0x2f4>)
 8001974:	f00f fbae 	bl	80110d4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	CanBusOff_FaultValue = Rte_Call_Can_P_CanPort_Can_BusState();
	CanRx_FaultValue = Rte_Call_Can_P_CanPort_CanOverSpi_isRxErrorPassive();
	CanTx_FaultValue = Rte_Call_Can_P_CanPort_CanOverSpi_isTxErrorPassive();
#endif

	if(BtcUart_FaultValue_One != 0 ||
 8001978:	4b7a      	ldr	r3, [pc, #488]	; (8001b64 <DiagCtrl_ProcessRequestedData+0x2a8>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10b      	bne.n	8001998 <DiagCtrl_ProcessRequestedData+0xdc>
			BtcUart_FaultValue_Two != 0 ||
 8001980:	4b79      	ldr	r3, [pc, #484]	; (8001b68 <DiagCtrl_ProcessRequestedData+0x2ac>)
 8001982:	781b      	ldrb	r3, [r3, #0]
	if(BtcUart_FaultValue_One != 0 ||
 8001984:	2b00      	cmp	r3, #0
 8001986:	d107      	bne.n	8001998 <DiagCtrl_ProcessRequestedData+0xdc>
			BtcUart_FaultValue_Three != 0 ||
 8001988:	4b78      	ldr	r3, [pc, #480]	; (8001b6c <DiagCtrl_ProcessRequestedData+0x2b0>)
 800198a:	781b      	ldrb	r3, [r3, #0]
			BtcUart_FaultValue_Two != 0 ||
 800198c:	2b00      	cmp	r3, #0
 800198e:	d103      	bne.n	8001998 <DiagCtrl_ProcessRequestedData+0xdc>
			BtcUart_FaultValue_Four != 0)
 8001990:	4b77      	ldr	r3, [pc, #476]	; (8001b70 <DiagCtrl_ProcessRequestedData+0x2b4>)
 8001992:	781b      	ldrb	r3, [r3, #0]
			BtcUart_FaultValue_Three != 0 ||
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <DiagCtrl_ProcessRequestedData+0xe2>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_BLUETOOTH_MODULE_MALFUNCTION);
 8001998:	2022      	movs	r0, #34	; 0x22
 800199a:	f003 fd25 	bl	80053e8 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(I2cThreeExternalEeeprom_FaultValue_One != 0 ||
 800199e:	4b75      	ldr	r3, [pc, #468]	; (8001b74 <DiagCtrl_ProcessRequestedData+0x2b8>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d11b      	bne.n	80019de <DiagCtrl_ProcessRequestedData+0x122>
			I2cThreeExternalEeeprom_FaultValue_Two != 0 ||
 80019a6:	4b74      	ldr	r3, [pc, #464]	; (8001b78 <DiagCtrl_ProcessRequestedData+0x2bc>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
	if(I2cThreeExternalEeeprom_FaultValue_One != 0 ||
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d117      	bne.n	80019de <DiagCtrl_ProcessRequestedData+0x122>
			I2cThreeExternalEeeprom_FaultValue_Three != 0 ||
 80019ae:	4b73      	ldr	r3, [pc, #460]	; (8001b7c <DiagCtrl_ProcessRequestedData+0x2c0>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Two != 0 ||
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d113      	bne.n	80019de <DiagCtrl_ProcessRequestedData+0x122>
			I2cThreeExternalEeeprom_FaultValue_Four != 0 ||
 80019b6:	4b72      	ldr	r3, [pc, #456]	; (8001b80 <DiagCtrl_ProcessRequestedData+0x2c4>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Three != 0 ||
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10f      	bne.n	80019de <DiagCtrl_ProcessRequestedData+0x122>
			I2cThreeExternalEeeprom_FaultValue_Five != 0 ||
 80019be:	4b71      	ldr	r3, [pc, #452]	; (8001b84 <DiagCtrl_ProcessRequestedData+0x2c8>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Four != 0 ||
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10b      	bne.n	80019de <DiagCtrl_ProcessRequestedData+0x122>
			I2cThreeExternalEeeprom_FaultValue_Six != 0 ||
 80019c6:	4b70      	ldr	r3, [pc, #448]	; (8001b88 <DiagCtrl_ProcessRequestedData+0x2cc>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Five != 0 ||
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d107      	bne.n	80019de <DiagCtrl_ProcessRequestedData+0x122>
			I2cThreeExternalEeeprom_FaultValue_Seven != 0 ||
 80019ce:	4b6f      	ldr	r3, [pc, #444]	; (8001b8c <DiagCtrl_ProcessRequestedData+0x2d0>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Six != 0 ||
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d103      	bne.n	80019de <DiagCtrl_ProcessRequestedData+0x122>
			I2cThreeExternalEeeprom_FaultValue_Eight != 0)
 80019d6:	4b6e      	ldr	r3, [pc, #440]	; (8001b90 <DiagCtrl_ProcessRequestedData+0x2d4>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
			I2cThreeExternalEeeprom_FaultValue_Seven != 0 ||
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <DiagCtrl_ProcessRequestedData+0x128>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_EXTERNAL_EEPROM_MODULE_MALFUNCTION);
 80019de:	2032      	movs	r0, #50	; 0x32
 80019e0:	f003 fd02 	bl	80053e8 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(I2cOneLcd_FaultValue_One != 0 ||
 80019e4:	4b6b      	ldr	r3, [pc, #428]	; (8001b94 <DiagCtrl_ProcessRequestedData+0x2d8>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d11b      	bne.n	8001a24 <DiagCtrl_ProcessRequestedData+0x168>
			I2cOneLcd_FaultValue_Two != 0 ||
 80019ec:	4b6a      	ldr	r3, [pc, #424]	; (8001b98 <DiagCtrl_ProcessRequestedData+0x2dc>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
	if(I2cOneLcd_FaultValue_One != 0 ||
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d117      	bne.n	8001a24 <DiagCtrl_ProcessRequestedData+0x168>
			I2cOneLcd_FaultValue_Three != 0 ||
 80019f4:	4b69      	ldr	r3, [pc, #420]	; (8001b9c <DiagCtrl_ProcessRequestedData+0x2e0>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Two != 0 ||
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d113      	bne.n	8001a24 <DiagCtrl_ProcessRequestedData+0x168>
			I2cOneLcd_FaultValue_Four != 0 ||
 80019fc:	4b68      	ldr	r3, [pc, #416]	; (8001ba0 <DiagCtrl_ProcessRequestedData+0x2e4>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Three != 0 ||
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10f      	bne.n	8001a24 <DiagCtrl_ProcessRequestedData+0x168>
			I2cOneLcd_FaultValue_Five != 0 ||
 8001a04:	4b67      	ldr	r3, [pc, #412]	; (8001ba4 <DiagCtrl_ProcessRequestedData+0x2e8>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Four != 0 ||
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10b      	bne.n	8001a24 <DiagCtrl_ProcessRequestedData+0x168>
			I2cOneLcd_FaultValue_Six != 0 ||
 8001a0c:	4b66      	ldr	r3, [pc, #408]	; (8001ba8 <DiagCtrl_ProcessRequestedData+0x2ec>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Five != 0 ||
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d107      	bne.n	8001a24 <DiagCtrl_ProcessRequestedData+0x168>
			I2cOneLcd_FaultValue_Seven != 0 ||
 8001a14:	4b65      	ldr	r3, [pc, #404]	; (8001bac <DiagCtrl_ProcessRequestedData+0x2f0>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Six != 0 ||
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d103      	bne.n	8001a24 <DiagCtrl_ProcessRequestedData+0x168>
			I2cOneLcd_FaultValue_Eight != 0)
 8001a1c:	4b64      	ldr	r3, [pc, #400]	; (8001bb0 <DiagCtrl_ProcessRequestedData+0x2f4>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Seven != 0 ||
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <DiagCtrl_ProcessRequestedData+0x16e>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_LCD_MODULE_MALFUNCTION);
 8001a24:	2062      	movs	r0, #98	; 0x62
 8001a26:	f003 fcdf 	bl	80053e8 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}
#endif
	if(LightSensor_RequestedValue < 100)
 8001a2a:	4b4b      	ldr	r3, [pc, #300]	; (8001b58 <DiagCtrl_ProcessRequestedData+0x29c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b63      	cmp	r3, #99	; 0x63
 8001a30:	d802      	bhi.n	8001a38 <DiagCtrl_ProcessRequestedData+0x17c>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_LIGHT_SENSOR_MALFUNCTION);
 8001a32:	2003      	movs	r0, #3
 8001a34:	f003 fcd8 	bl	80053e8 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(VibrationSensor_RequestedValue < 100)
 8001a38:	4b48      	ldr	r3, [pc, #288]	; (8001b5c <DiagCtrl_ProcessRequestedData+0x2a0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b63      	cmp	r3, #99	; 0x63
 8001a3e:	d802      	bhi.n	8001a46 <DiagCtrl_ProcessRequestedData+0x18a>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_VIBRATION_SENSOR_MALFUNCTION);
 8001a40:	2013      	movs	r0, #19
 8001a42:	f003 fcd1 	bl	80053e8 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(TemperatureSensor_RequestedValue < 100)
 8001a46:	4b46      	ldr	r3, [pc, #280]	; (8001b60 <DiagCtrl_ProcessRequestedData+0x2a4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b63      	cmp	r3, #99	; 0x63
 8001a4c:	d802      	bhi.n	8001a54 <DiagCtrl_ProcessRequestedData+0x198>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_TEMPERATURE_SENSOR_MALFUNCTION);
 8001a4e:	2033      	movs	r0, #51	; 0x33
 8001a50:	f003 fcca 	bl	80053e8 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree == 0)
 8001a54:	4b57      	ldr	r3, [pc, #348]	; (8001bb4 <DiagCtrl_ProcessRequestedData+0x2f8>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <DiagCtrl_ProcessRequestedData+0x1a6>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION);
 8001a5c:	2012      	movs	r0, #18
 8001a5e:	f003 fcc3 	bl	80053e8 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour == 0)
 8001a62:	4b55      	ldr	r3, [pc, #340]	; (8001bb8 <DiagCtrl_ProcessRequestedData+0x2fc>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d102      	bne.n	8001a70 <DiagCtrl_ProcessRequestedData+0x1b4>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION);
 8001a6a:	2002      	movs	r0, #2
 8001a6c:	f003 fcbc 	bl	80053e8 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_LB_L_REQUEST);
 8001a70:	2004      	movs	r0, #4
 8001a72:	f001 fb29 	bl	80030c8 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_LOW_BEAM_LEFT_MALFUNCTION)
 8001a76:	4b51      	ldr	r3, [pc, #324]	; (8001bbc <DiagCtrl_ProcessRequestedData+0x300>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d104      	bne.n	8001a88 <DiagCtrl_ProcessRequestedData+0x1cc>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8001a7e:	4b4f      	ldr	r3, [pc, #316]	; (8001bbc <DiagCtrl_ProcessRequestedData+0x300>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 fcb0 	bl	80053e8 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_LB_R_REQUEST);
 8001a88:	2005      	movs	r0, #5
 8001a8a:	f001 fb1d 	bl	80030c8 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_LOW_BEAM_RIGHT_MALFUNCTION)
 8001a8e:	4b4b      	ldr	r3, [pc, #300]	; (8001bbc <DiagCtrl_ProcessRequestedData+0x300>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b05      	cmp	r3, #5
 8001a94:	d104      	bne.n	8001aa0 <DiagCtrl_ProcessRequestedData+0x1e4>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8001a96:	4b49      	ldr	r3, [pc, #292]	; (8001bbc <DiagCtrl_ProcessRequestedData+0x300>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 fca4 	bl	80053e8 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_RPL_L_REQUEST);
 8001aa0:	2006      	movs	r0, #6
 8001aa2:	f001 fb11 	bl	80030c8 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_REAR_POSITION_LIGHT_LEFT_MALFUNCTION)
 8001aa6:	4b45      	ldr	r3, [pc, #276]	; (8001bbc <DiagCtrl_ProcessRequestedData+0x300>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b44      	cmp	r3, #68	; 0x44
 8001aac:	d104      	bne.n	8001ab8 <DiagCtrl_ProcessRequestedData+0x1fc>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8001aae:	4b43      	ldr	r3, [pc, #268]	; (8001bbc <DiagCtrl_ProcessRequestedData+0x300>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 fc98 	bl	80053e8 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_RPL_R_REQUEST);
 8001ab8:	2007      	movs	r0, #7
 8001aba:	f001 fb05 	bl	80030c8 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION)
 8001abe:	4b3f      	ldr	r3, [pc, #252]	; (8001bbc <DiagCtrl_ProcessRequestedData+0x300>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b45      	cmp	r3, #69	; 0x45
 8001ac4:	d104      	bne.n	8001ad0 <DiagCtrl_ProcessRequestedData+0x214>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8001ac6:	4b3d      	ldr	r3, [pc, #244]	; (8001bbc <DiagCtrl_ProcessRequestedData+0x300>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f003 fc8c 	bl	80053e8 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_BL_R_REQUEST);
 8001ad0:	2008      	movs	r0, #8
 8001ad2:	f001 faf9 	bl	80030c8 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_BRAKE_LIGHT_RIGHT_MALFUNCTION)
 8001ad6:	4b39      	ldr	r3, [pc, #228]	; (8001bbc <DiagCtrl_ProcessRequestedData+0x300>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b74      	cmp	r3, #116	; 0x74
 8001adc:	d104      	bne.n	8001ae8 <DiagCtrl_ProcessRequestedData+0x22c>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8001ade:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <DiagCtrl_ProcessRequestedData+0x300>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 fc80 	bl	80053e8 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_BL_L_REQUEST);
 8001ae8:	2009      	movs	r0, #9
 8001aea:	f001 faed 	bl	80030c8 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_BRAKE_LIGHT_LEFT_MALFUNCTION)
 8001aee:	4b33      	ldr	r3, [pc, #204]	; (8001bbc <DiagCtrl_ProcessRequestedData+0x300>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b74      	cmp	r3, #116	; 0x74
 8001af4:	d104      	bne.n	8001b00 <DiagCtrl_ProcessRequestedData+0x244>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8001af6:	4b31      	ldr	r3, [pc, #196]	; (8001bbc <DiagCtrl_ProcessRequestedData+0x300>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fc74 	bl	80053e8 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_LTS_F_REQUEST);
 8001b00:	200a      	movs	r0, #10
 8001b02:	f001 fae1 	bl	80030c8 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION)
 8001b06:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <DiagCtrl_ProcessRequestedData+0x300>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d104      	bne.n	8001b18 <DiagCtrl_ProcessRequestedData+0x25c>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8001b0e:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <DiagCtrl_ProcessRequestedData+0x300>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 fc68 	bl	80053e8 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_LTS_R_REQUEST);
 8001b18:	200b      	movs	r0, #11
 8001b1a:	f001 fad5 	bl	80030c8 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_LEFT_TURN_SIGNAL_REAR_MALFUNCTION)
 8001b1e:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <DiagCtrl_ProcessRequestedData+0x300>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b65      	cmp	r3, #101	; 0x65
 8001b24:	d104      	bne.n	8001b30 <DiagCtrl_ProcessRequestedData+0x274>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8001b26:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <DiagCtrl_ProcessRequestedData+0x300>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 fc5c 	bl	80053e8 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_RTS_R_REQUEST);
 8001b30:	200c      	movs	r0, #12
 8001b32:	f001 fac9 	bl	80030c8 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_RIGHT_TURN_SIGNAL_REAR_MALFUNCTION)
 8001b36:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <DiagCtrl_ProcessRequestedData+0x300>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b55      	cmp	r3, #85	; 0x55
 8001b3c:	d104      	bne.n	8001b48 <DiagCtrl_ProcessRequestedData+0x28c>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8001b3e:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <DiagCtrl_ProcessRequestedData+0x300>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 fc50 	bl	80053e8 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_RTS_F_REQUEST);
 8001b48:	200d      	movs	r0, #13
 8001b4a:	f001 fabd 	bl	80030c8 <SenCtrl_ProcessSensorValue>
	if(DiagCtrl_FaultValue == DIAGCTRL_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION)
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <DiagCtrl_ProcessRequestedData+0x300>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	e034      	b.n	8001bc0 <DiagCtrl_ProcessRequestedData+0x304>
 8001b56:	bf00      	nop
 8001b58:	200000bc 	.word	0x200000bc
 8001b5c:	200000c0 	.word	0x200000c0
 8001b60:	200000c4 	.word	0x200000c4
 8001b64:	200000c8 	.word	0x200000c8
 8001b68:	200000c9 	.word	0x200000c9
 8001b6c:	200000ca 	.word	0x200000ca
 8001b70:	200000cb 	.word	0x200000cb
 8001b74:	200000cc 	.word	0x200000cc
 8001b78:	200000cd 	.word	0x200000cd
 8001b7c:	200000ce 	.word	0x200000ce
 8001b80:	200000cf 	.word	0x200000cf
 8001b84:	200000d0 	.word	0x200000d0
 8001b88:	200000d1 	.word	0x200000d1
 8001b8c:	200000d2 	.word	0x200000d2
 8001b90:	200000d3 	.word	0x200000d3
 8001b94:	200000d4 	.word	0x200000d4
 8001b98:	200000d5 	.word	0x200000d5
 8001b9c:	200000d6 	.word	0x200000d6
 8001ba0:	200000d7 	.word	0x200000d7
 8001ba4:	200000d8 	.word	0x200000d8
 8001ba8:	200000d9 	.word	0x200000d9
 8001bac:	200000da 	.word	0x200000da
 8001bb0:	200000db 	.word	0x200000db
 8001bb4:	200008c5 	.word	0x200008c5
 8001bb8:	200008d5 	.word	0x200008d5
 8001bbc:	200000b8 	.word	0x200000b8
 8001bc0:	d104      	bne.n	8001bcc <DiagCtrl_ProcessRequestedData+0x310>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
 8001bc2:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <DiagCtrl_ProcessRequestedData+0x314>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 fc0e 	bl	80053e8 <Dem_ReceiveFault>
	}
	else
	{
		/* do nothing */
	}
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	200000b8 	.word	0x200000b8

08001bd4 <ExtLights_TurnSignalHazardLight>:
/***********************************************************************************
* Function: ExtLights_TurnSignalHazardLight										   *
* Description: Process the turn signals and hazard lights states. 		   		   *
************************************************************************************/
VOID ExtLights_TurnSignalHazardLight()
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	/* If the turn signal left is set on. */
	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8001bd8:	4b4c      	ldr	r3, [pc, #304]	; (8001d0c <ExtLights_TurnSignalHazardLight+0x138>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d123      	bne.n	8001c28 <ExtLights_TurnSignalHazardLight+0x54>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 8001be0:	4b4b      	ldr	r3, [pc, #300]	; (8001d10 <ExtLights_TurnSignalHazardLight+0x13c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f00c fb8a 	bl	800e2fe <osTimerIsRunning>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d106      	bne.n	8001bfe <ExtLights_TurnSignalHazardLight+0x2a>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8001bf0:	4b47      	ldr	r3, [pc, #284]	; (8001d10 <ExtLights_TurnSignalHazardLight+0x13c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f00f fe72 	bl	80118e2 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_LTSFlag % 2 == 1)
 8001bfe:	4b45      	ldr	r3, [pc, #276]	; (8001d14 <ExtLights_TurnSignalHazardLight+0x140>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d004      	beq.n	8001c14 <ExtLights_TurnSignalHazardLight+0x40>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001c0a:	2108      	movs	r1, #8
 8001c0c:	4842      	ldr	r0, [pc, #264]	; (8001d18 <ExtLights_TurnSignalHazardLight+0x144>)
 8001c0e:	f00f fc95 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001c12:	e009      	b.n	8001c28 <ExtLights_TurnSignalHazardLight+0x54>
		}
		else if(ExtLights_LTSFlag % 2 == 0)
 8001c14:	4b3f      	ldr	r3, [pc, #252]	; (8001d14 <ExtLights_TurnSignalHazardLight+0x140>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d103      	bne.n	8001c28 <ExtLights_TurnSignalHazardLight+0x54>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001c20:	2108      	movs	r1, #8
 8001c22:	483d      	ldr	r0, [pc, #244]	; (8001d18 <ExtLights_TurnSignalHazardLight+0x144>)
 8001c24:	f00f fc97 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* If the turn signal right is set on. */
	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8001c28:	4b3c      	ldr	r3, [pc, #240]	; (8001d1c <ExtLights_TurnSignalHazardLight+0x148>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d123      	bne.n	8001c78 <ExtLights_TurnSignalHazardLight+0xa4>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 8001c30:	4b37      	ldr	r3, [pc, #220]	; (8001d10 <ExtLights_TurnSignalHazardLight+0x13c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f00c fb62 	bl	800e2fe <osTimerIsRunning>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d106      	bne.n	8001c4e <ExtLights_TurnSignalHazardLight+0x7a>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8001c40:	4b33      	ldr	r3, [pc, #204]	; (8001d10 <ExtLights_TurnSignalHazardLight+0x13c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f00f fe4a 	bl	80118e2 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_RTSFlag % 2 == 1)
 8001c4e:	4b34      	ldr	r3, [pc, #208]	; (8001d20 <ExtLights_TurnSignalHazardLight+0x14c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d004      	beq.n	8001c64 <ExtLights_TurnSignalHazardLight+0x90>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001c5a:	210c      	movs	r1, #12
 8001c5c:	482e      	ldr	r0, [pc, #184]	; (8001d18 <ExtLights_TurnSignalHazardLight+0x144>)
 8001c5e:	f00f fc6d 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001c62:	e009      	b.n	8001c78 <ExtLights_TurnSignalHazardLight+0xa4>
		}
		else if(ExtLights_RTSFlag % 2 == 0)
 8001c64:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <ExtLights_TurnSignalHazardLight+0x14c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d103      	bne.n	8001c78 <ExtLights_TurnSignalHazardLight+0xa4>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001c70:	210c      	movs	r1, #12
 8001c72:	4829      	ldr	r0, [pc, #164]	; (8001d18 <ExtLights_TurnSignalHazardLight+0x144>)
 8001c74:	f00f fc6f 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* If the hazard light is set on. */
	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 8001c78:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <ExtLights_TurnSignalHazardLight+0x150>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d12b      	bne.n	8001cd8 <ExtLights_TurnSignalHazardLight+0x104>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 8001c80:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <ExtLights_TurnSignalHazardLight+0x13c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f00c fb3a 	bl	800e2fe <osTimerIsRunning>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d106      	bne.n	8001c9e <ExtLights_TurnSignalHazardLight+0xca>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8001c90:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <ExtLights_TurnSignalHazardLight+0x13c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f00f fe22 	bl	80118e2 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_HLFlag % 2 == 1)
 8001c9e:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <ExtLights_TurnSignalHazardLight+0x154>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d008      	beq.n	8001cbc <ExtLights_TurnSignalHazardLight+0xe8>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001caa:	2108      	movs	r1, #8
 8001cac:	481a      	ldr	r0, [pc, #104]	; (8001d18 <ExtLights_TurnSignalHazardLight+0x144>)
 8001cae:	f00f fc45 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001cb2:	210c      	movs	r1, #12
 8001cb4:	4818      	ldr	r0, [pc, #96]	; (8001d18 <ExtLights_TurnSignalHazardLight+0x144>)
 8001cb6:	f00f fc41 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001cba:	e00d      	b.n	8001cd8 <ExtLights_TurnSignalHazardLight+0x104>
		}
		else if(ExtLights_HLFlag % 2 == 0)
 8001cbc:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <ExtLights_TurnSignalHazardLight+0x154>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d107      	bne.n	8001cd8 <ExtLights_TurnSignalHazardLight+0x104>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001cc8:	2108      	movs	r1, #8
 8001cca:	4813      	ldr	r0, [pc, #76]	; (8001d18 <ExtLights_TurnSignalHazardLight+0x144>)
 8001ccc:	f00f fc43 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001cd0:	210c      	movs	r1, #12
 8001cd2:	4811      	ldr	r0, [pc, #68]	; (8001d18 <ExtLights_TurnSignalHazardLight+0x144>)
 8001cd4:	f00f fc3f 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Only one pair of turn signals can be on at a time. Set on one pair and the other off. */
	if(ExtLights_TurnSignalRight_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8001cd8:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <ExtLights_TurnSignalHazardLight+0x148>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d107      	bne.n	8001cf0 <ExtLights_TurnSignalHazardLight+0x11c>
 8001ce0:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <ExtLights_TurnSignalHazardLight+0x150>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d103      	bne.n	8001cf0 <ExtLights_TurnSignalHazardLight+0x11c>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001ce8:	210c      	movs	r1, #12
 8001cea:	480b      	ldr	r0, [pc, #44]	; (8001d18 <ExtLights_TurnSignalHazardLight+0x144>)
 8001cec:	f00f fc33 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Only one pair of turn signals can be on at a time. Set on one pair and the other off. */
	if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <ExtLights_TurnSignalHazardLight+0x138>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d107      	bne.n	8001d08 <ExtLights_TurnSignalHazardLight+0x134>
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <ExtLights_TurnSignalHazardLight+0x150>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d103      	bne.n	8001d08 <ExtLights_TurnSignalHazardLight+0x134>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001d00:	2108      	movs	r1, #8
 8001d02:	4805      	ldr	r0, [pc, #20]	; (8001d18 <ExtLights_TurnSignalHazardLight+0x144>)
 8001d04:	f00f fc27 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	}
	else
	{
		/* do nothing */
	}
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200000e2 	.word	0x200000e2
 8001d10:	200002f4 	.word	0x200002f4
 8001d14:	200000f0 	.word	0x200000f0
 8001d18:	20000638 	.word	0x20000638
 8001d1c:	200000e3 	.word	0x200000e3
 8001d20:	200000ec 	.word	0x200000ec
 8001d24:	200000e6 	.word	0x200000e6
 8001d28:	200000f4 	.word	0x200000f4

08001d2c <ExtLights_PrevStateTSHL>:
* Function: ExtLights_PrevStateTSHL										           *
* Description: Checks the current state and previous state of turn signals and     *
* 			   hazard lights. 		   											   *
************************************************************************************/
VOID ExtLights_PrevStateTSHL()
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	/* Change the variables related to states. */
	if(ExtLights_TurnSignalLeft_CurrentState != ExtLights_LTS_PrevState)
 8001d30:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <ExtLights_PrevStateTSHL+0x68>)
 8001d32:	781a      	ldrb	r2, [r3, #0]
 8001d34:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <ExtLights_PrevStateTSHL+0x6c>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d009      	beq.n	8001d50 <ExtLights_PrevStateTSHL+0x24>
	{
		ExtLights_LTS_PrevState = ExtLights_TurnSignalLeft_CurrentState;
 8001d3c:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <ExtLights_PrevStateTSHL+0x68>)
 8001d3e:	781a      	ldrb	r2, [r3, #0]
 8001d40:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <ExtLights_PrevStateTSHL+0x6c>)
 8001d42:	701a      	strb	r2, [r3, #0]
		ExtLights_LTSFlag = 0;
 8001d44:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <ExtLights_PrevStateTSHL+0x70>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_Lts_Counter(&ExtLights_LTSFlag);
 8001d4a:	4814      	ldr	r0, [pc, #80]	; (8001d9c <ExtLights_PrevStateTSHL+0x70>)
 8001d4c:	f00f fb8c 	bl	8011468 <Rte_Write_Os_R_OsPort_Os_Lts_Counter>
	else
	{
		/* do nothing */
	}
	/* Change the variables related to states. */
	if(ExtLights_TurnSignalRight_CurrentState != ExtLights_RTS_PrevState)
 8001d50:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <ExtLights_PrevStateTSHL+0x74>)
 8001d52:	781a      	ldrb	r2, [r3, #0]
 8001d54:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <ExtLights_PrevStateTSHL+0x78>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d009      	beq.n	8001d70 <ExtLights_PrevStateTSHL+0x44>
	{
		ExtLights_RTS_PrevState = ExtLights_TurnSignalRight_CurrentState;
 8001d5c:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <ExtLights_PrevStateTSHL+0x74>)
 8001d5e:	781a      	ldrb	r2, [r3, #0]
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <ExtLights_PrevStateTSHL+0x78>)
 8001d62:	701a      	strb	r2, [r3, #0]
		ExtLights_RTSFlag = 0;
 8001d64:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <ExtLights_PrevStateTSHL+0x7c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_Rts_Counter(&ExtLights_RTSFlag);
 8001d6a:	480f      	ldr	r0, [pc, #60]	; (8001da8 <ExtLights_PrevStateTSHL+0x7c>)
 8001d6c:	f00f fb8c 	bl	8011488 <Rte_Write_Os_R_OsPort_Os_Rts_Counter>
	else
	{
		/* do nothing */
	}
	/* Change the variables related to states. */
	if(ExtLights_HazardLight_CurrentState != ExtLights_HL_PrevState)
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <ExtLights_PrevStateTSHL+0x80>)
 8001d72:	781a      	ldrb	r2, [r3, #0]
 8001d74:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <ExtLights_PrevStateTSHL+0x84>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d009      	beq.n	8001d90 <ExtLights_PrevStateTSHL+0x64>
	{
		ExtLights_HL_PrevState = ExtLights_HazardLight_CurrentState;
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <ExtLights_PrevStateTSHL+0x80>)
 8001d7e:	781a      	ldrb	r2, [r3, #0]
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <ExtLights_PrevStateTSHL+0x84>)
 8001d82:	701a      	strb	r2, [r3, #0]
		ExtLights_HLFlag = 0;
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <ExtLights_PrevStateTSHL+0x88>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_HL_Counter(&ExtLights_HLFlag);
 8001d8a:	480a      	ldr	r0, [pc, #40]	; (8001db4 <ExtLights_PrevStateTSHL+0x88>)
 8001d8c:	f00f fb8c 	bl	80114a8 <Rte_Write_Os_R_OsPort_Os_HL_Counter>
	}
	else
	{
		/* do nothing */
	}
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	200000e2 	.word	0x200000e2
 8001d98:	200000e9 	.word	0x200000e9
 8001d9c:	200000f0 	.word	0x200000f0
 8001da0:	200000e3 	.word	0x200000e3
 8001da4:	200000e8 	.word	0x200000e8
 8001da8:	200000ec 	.word	0x200000ec
 8001dac:	200000e6 	.word	0x200000e6
 8001db0:	200000ea 	.word	0x200000ea
 8001db4:	200000f4 	.word	0x200000f4

08001db8 <ExtLights_LightState>:
/***********************************************************************************
* Function: ExtLights_LightState										   		   *
* Description: Controls the lights states.								 		   *
************************************************************************************/
VOID ExtLights_LightState()
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	/* Process turn signals state. */
	ExtLights_PrevStateTSHL();
 8001dbc:	f7ff ffb6 	bl	8001d2c <ExtLights_PrevStateTSHL>
	/* Follow me home is on, then turn on the respective lights. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 8001dc0:	4b88      	ldr	r3, [pc, #544]	; (8001fe4 <ExtLights_LightState+0x22c>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d110      	bne.n	8001dea <ExtLights_LightState+0x32>
	{
		ExtLights_LightSwitchMode();
 8001dc8:	f000 f9d8 	bl	800217c <ExtLights_LightSwitchMode>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4886      	ldr	r0, [pc, #536]	; (8001fe8 <ExtLights_LightState+0x230>)
 8001dd0:	f00f fbb4 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001dd4:	2104      	movs	r1, #4
 8001dd6:	4884      	ldr	r0, [pc, #528]	; (8001fe8 <ExtLights_LightState+0x230>)
 8001dd8:	f00f fbb0 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		ExtLights_LowBeam_CurrentState = STD_HIGH;
 8001ddc:	4b83      	ldr	r3, [pc, #524]	; (8001fec <ExtLights_LightState+0x234>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
		ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8001de2:	4b83      	ldr	r3, [pc, #524]	; (8001ff0 <ExtLights_LightState+0x238>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
 8001de8:	e017      	b.n	8001e1a <ExtLights_LightState+0x62>
	}/* Follow me home is off, turn off the lights.*/
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
 8001dea:	4b7e      	ldr	r3, [pc, #504]	; (8001fe4 <ExtLights_LightState+0x22c>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d113      	bne.n	8001e1a <ExtLights_LightState+0x62>
	{
		ExtLights_LightSwitchMode();
 8001df2:	f000 f9c3 	bl	800217c <ExtLights_LightSwitchMode>
		if(ExtLights_LightsSwitch_CurrentState == STD_LOW)
 8001df6:	4b7f      	ldr	r3, [pc, #508]	; (8001ff4 <ExtLights_LightState+0x23c>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10d      	bne.n	8001e1a <ExtLights_LightState+0x62>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4879      	ldr	r0, [pc, #484]	; (8001fe8 <ExtLights_LightState+0x230>)
 8001e02:	f00f fba8 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001e06:	2104      	movs	r1, #4
 8001e08:	4877      	ldr	r0, [pc, #476]	; (8001fe8 <ExtLights_LightState+0x230>)
 8001e0a:	f00f fba4 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8001e0e:	4b77      	ldr	r3, [pc, #476]	; (8001fec <ExtLights_LightState+0x234>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001e14:	4b76      	ldr	r3, [pc, #472]	; (8001ff0 <ExtLights_LightState+0x238>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If any light state is set to on, then stop the follow me home. */
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 8001e1a:	4b77      	ldr	r3, [pc, #476]	; (8001ff8 <ExtLights_LightState+0x240>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d017      	beq.n	8001e52 <ExtLights_LightState+0x9a>
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 8001e22:	4b76      	ldr	r3, [pc, #472]	; (8001ffc <ExtLights_LightState+0x244>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d013      	beq.n	8001e52 <ExtLights_LightState+0x9a>
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 8001e2a:	4b72      	ldr	r3, [pc, #456]	; (8001ff4 <ExtLights_LightState+0x23c>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10f      	bne.n	8001e52 <ExtLights_LightState+0x9a>
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 8001e32:	4b73      	ldr	r3, [pc, #460]	; (8002000 <ExtLights_LightState+0x248>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d00b      	beq.n	8001e52 <ExtLights_LightState+0x9a>
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 8001e3a:	4b72      	ldr	r3, [pc, #456]	; (8002004 <ExtLights_LightState+0x24c>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d007      	beq.n	8001e52 <ExtLights_LightState+0x9a>
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 8001e42:	4b71      	ldr	r3, [pc, #452]	; (8002008 <ExtLights_LightState+0x250>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d003      	beq.n	8001e52 <ExtLights_LightState+0x9a>
		ExtLights_HazardLight_CurrentState == STD_HIGH)
 8001e4a:	4b70      	ldr	r3, [pc, #448]	; (800200c <ExtLights_LightState+0x254>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d11a      	bne.n	8001e88 <ExtLights_LightState+0xd0>
	{
		if(ExtLights_LightsSwitch_CurrentState == STD_LOW)
 8001e52:	4b68      	ldr	r3, [pc, #416]	; (8001ff4 <ExtLights_LightState+0x23c>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d116      	bne.n	8001e88 <ExtLights_LightState+0xd0>
		{
			Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(STD_LOW);
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f00f fbf0 	bl	8011640 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>
			Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter((uint8*)2);
 8001e60:	2002      	movs	r0, #2
 8001e62:	f00f fa81 	bl	8011368 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>
			Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter((uint8*)2);
 8001e66:	2002      	movs	r0, #2
 8001e68:	f00f faee 	bl	8011448 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	485e      	ldr	r0, [pc, #376]	; (8001fe8 <ExtLights_LightState+0x230>)
 8001e70:	f00f fb71 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001e74:	2104      	movs	r1, #4
 8001e76:	485c      	ldr	r0, [pc, #368]	; (8001fe8 <ExtLights_LightState+0x230>)
 8001e78:	f00f fb6d 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8001e7c:	4b5b      	ldr	r3, [pc, #364]	; (8001fec <ExtLights_LightState+0x234>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001e82:	4b5b      	ldr	r3, [pc, #364]	; (8001ff0 <ExtLights_LightState+0x238>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* Control the turn signals for the central lock lock unlock sequence when requested. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_HIGH)
 8001e88:	4b61      	ldr	r3, [pc, #388]	; (8002010 <ExtLights_LightState+0x258>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d108      	bne.n	8001ea2 <ExtLights_LightState+0xea>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001e90:	2108      	movs	r1, #8
 8001e92:	4860      	ldr	r0, [pc, #384]	; (8002014 <ExtLights_LightState+0x25c>)
 8001e94:	f00f fb52 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001e98:	210c      	movs	r1, #12
 8001e9a:	485e      	ldr	r0, [pc, #376]	; (8002014 <ExtLights_LightState+0x25c>)
 8001e9c:	f00f fb4e 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001ea0:	e016      	b.n	8001ed0 <ExtLights_LightState+0x118>
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_LOW)
 8001ea2:	4b5b      	ldr	r3, [pc, #364]	; (8002010 <ExtLights_LightState+0x258>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d108      	bne.n	8001ebc <ExtLights_LightState+0x104>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001eaa:	2108      	movs	r1, #8
 8001eac:	4859      	ldr	r0, [pc, #356]	; (8002014 <ExtLights_LightState+0x25c>)
 8001eae:	f00f fb52 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001eb2:	210c      	movs	r1, #12
 8001eb4:	4857      	ldr	r0, [pc, #348]	; (8002014 <ExtLights_LightState+0x25c>)
 8001eb6:	f00f fb4e 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
 8001eba:	e009      	b.n	8001ed0 <ExtLights_LightState+0x118>
	}/* Allows for turning on the hazard lights or turn signals independently of other states in the system. */
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 2 || Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 4)
 8001ebc:	4b54      	ldr	r3, [pc, #336]	; (8002010 <ExtLights_LightState+0x258>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d003      	beq.n	8001ecc <ExtLights_LightState+0x114>
 8001ec4:	4b52      	ldr	r3, [pc, #328]	; (8002010 <ExtLights_LightState+0x258>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d101      	bne.n	8001ed0 <ExtLights_LightState+0x118>
	{
		ExtLights_TurnSignalHazardLight();
 8001ecc:	f7ff fe82 	bl	8001bd4 <ExtLights_TurnSignalHazardLight>
	else
	{
		/* do nothing */
	}
	/* Turn on/off high beam. */
	if(ExtLights_FlashHighBeam_CurrentState == STD_HIGH)
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <ExtLights_LightState+0x244>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d103      	bne.n	8001ee0 <ExtLights_LightState+0x128>
	{
		ExtLights_HighBeam(STD_HIGH);
 8001ed8:	2001      	movs	r0, #1
 8001eda:	f000 fa3d 	bl	8002358 <ExtLights_HighBeam>
 8001ede:	e006      	b.n	8001eee <ExtLights_LightState+0x136>
	}
	else if(ExtLights_FlashHighBeam_CurrentState == STD_LOW)
 8001ee0:	4b46      	ldr	r3, [pc, #280]	; (8001ffc <ExtLights_LightState+0x244>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <ExtLights_LightState+0x136>
	{
		ExtLights_HighBeam(STD_LOW);
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f000 fa35 	bl	8002358 <ExtLights_HighBeam>
	else
	{
		/* do nothing */
	}
	/* Turn on/off high beam. */
	if(ExtLights_HighBeam_CurrentState == STD_HIGH)
 8001eee:	4b44      	ldr	r3, [pc, #272]	; (8002000 <ExtLights_LightState+0x248>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d103      	bne.n	8001efe <ExtLights_LightState+0x146>
	{
		ExtLights_HighBeam(STD_HIGH);
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f000 fa2e 	bl	8002358 <ExtLights_HighBeam>
 8001efc:	e006      	b.n	8001f0c <ExtLights_LightState+0x154>
	}
	else if(ExtLights_HighBeam_CurrentState == STD_LOW)
 8001efe:	4b40      	ldr	r3, [pc, #256]	; (8002000 <ExtLights_LightState+0x248>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d102      	bne.n	8001f0c <ExtLights_LightState+0x154>
	{
		ExtLights_HighBeam(STD_LOW);
 8001f06:	2000      	movs	r0, #0
 8001f08:	f000 fa26 	bl	8002358 <ExtLights_HighBeam>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the brake lights. */
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH)
 8001f0c:	4b3a      	ldr	r3, [pc, #232]	; (8001ff8 <ExtLights_LightState+0x240>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d111      	bne.n	8001f38 <ExtLights_LightState+0x180>
	{
		if(ExtLights_BrakeLight_CurrentState != ExtLights_Previous_BrakeLight_CurrentState)
 8001f14:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <ExtLights_LightState+0x240>)
 8001f16:	781a      	ldrb	r2, [r3, #0]
 8001f18:	4b3f      	ldr	r3, [pc, #252]	; (8002018 <ExtLights_LightState+0x260>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d006      	beq.n	8001f2e <ExtLights_LightState+0x176>
		{
			ExtLights_Previous_BrakeLight_CurrentState = ExtLights_BrakeLight_CurrentState;
 8001f20:	4b35      	ldr	r3, [pc, #212]	; (8001ff8 <ExtLights_LightState+0x240>)
 8001f22:	781a      	ldrb	r2, [r3, #0]
 8001f24:	4b3c      	ldr	r3, [pc, #240]	; (8002018 <ExtLights_LightState+0x260>)
 8001f26:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr2(0);
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f00f f885 	bl	8011038 <Rte_Write_TimH_TimHPort_Tim3Ccr2>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel2);
 8001f2e:	2104      	movs	r1, #4
 8001f30:	483a      	ldr	r0, [pc, #232]	; (800201c <ExtLights_LightState+0x264>)
 8001f32:	f00f fb03 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001f36:	e014      	b.n	8001f62 <ExtLights_LightState+0x1aa>
	}
	else if(ExtLights_BrakeLight_CurrentState == STD_LOW)
 8001f38:	4b2f      	ldr	r3, [pc, #188]	; (8001ff8 <ExtLights_LightState+0x240>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d110      	bne.n	8001f62 <ExtLights_LightState+0x1aa>
	{
		if(ExtLights_BrakeLight_CurrentState != ExtLights_Previous_BrakeLight_CurrentState)
 8001f40:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <ExtLights_LightState+0x240>)
 8001f42:	781a      	ldrb	r2, [r3, #0]
 8001f44:	4b34      	ldr	r3, [pc, #208]	; (8002018 <ExtLights_LightState+0x260>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d006      	beq.n	8001f5a <ExtLights_LightState+0x1a2>
		{
			ExtLights_Previous_BrakeLight_CurrentState = ExtLights_BrakeLight_CurrentState;
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <ExtLights_LightState+0x240>)
 8001f4e:	781a      	ldrb	r2, [r3, #0]
 8001f50:	4b31      	ldr	r3, [pc, #196]	; (8002018 <ExtLights_LightState+0x260>)
 8001f52:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr2(0);
 8001f54:	2000      	movs	r0, #0
 8001f56:	f00f f86f 	bl	8011038 <Rte_Write_TimH_TimHPort_Tim3Ccr2>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel2);
 8001f5a:	2104      	movs	r1, #4
 8001f5c:	482f      	ldr	r0, [pc, #188]	; (800201c <ExtLights_LightState+0x264>)
 8001f5e:	f00f fafa 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the rear fog lights. */
	if(ExtLights_RearFogLight_CurrentState == STD_HIGH)
 8001f62:	4b2f      	ldr	r3, [pc, #188]	; (8002020 <ExtLights_LightState+0x268>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d111      	bne.n	8001f8e <ExtLights_LightState+0x1d6>
	{
		if(ExtLights_RearFogLight_CurrentState != ExtLights_Previous_RearFogLight_CurrentState)
 8001f6a:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <ExtLights_LightState+0x268>)
 8001f6c:	781a      	ldrb	r2, [r3, #0]
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <ExtLights_LightState+0x26c>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d006      	beq.n	8001f84 <ExtLights_LightState+0x1cc>
		{
			ExtLights_Previous_RearFogLight_CurrentState = ExtLights_RearFogLight_CurrentState;
 8001f76:	4b2a      	ldr	r3, [pc, #168]	; (8002020 <ExtLights_LightState+0x268>)
 8001f78:	781a      	ldrb	r2, [r3, #0]
 8001f7a:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <ExtLights_LightState+0x26c>)
 8001f7c:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr4(0);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f00f f87a 	bl	8011078 <Rte_Write_TimH_TimHPort_Tim3Ccr4>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 8001f84:	210c      	movs	r1, #12
 8001f86:	4825      	ldr	r0, [pc, #148]	; (800201c <ExtLights_LightState+0x264>)
 8001f88:	f00f fad8 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001f8c:	e014      	b.n	8001fb8 <ExtLights_LightState+0x200>
	}
	else if(ExtLights_RearFogLight_CurrentState == STD_LOW)
 8001f8e:	4b24      	ldr	r3, [pc, #144]	; (8002020 <ExtLights_LightState+0x268>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d110      	bne.n	8001fb8 <ExtLights_LightState+0x200>
	{
		if(ExtLights_RearFogLight_CurrentState != ExtLights_Previous_RearFogLight_CurrentState)
 8001f96:	4b22      	ldr	r3, [pc, #136]	; (8002020 <ExtLights_LightState+0x268>)
 8001f98:	781a      	ldrb	r2, [r3, #0]
 8001f9a:	4b22      	ldr	r3, [pc, #136]	; (8002024 <ExtLights_LightState+0x26c>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d006      	beq.n	8001fb0 <ExtLights_LightState+0x1f8>
		{
			ExtLights_Previous_RearFogLight_CurrentState = ExtLights_RearFogLight_CurrentState;
 8001fa2:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <ExtLights_LightState+0x268>)
 8001fa4:	781a      	ldrb	r2, [r3, #0]
 8001fa6:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <ExtLights_LightState+0x26c>)
 8001fa8:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr4(0);
 8001faa:	2000      	movs	r0, #0
 8001fac:	f00f f864 	bl	8011078 <Rte_Write_TimH_TimHPort_Tim3Ccr4>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 8001fb0:	210c      	movs	r1, #12
 8001fb2:	481a      	ldr	r0, [pc, #104]	; (800201c <ExtLights_LightState+0x264>)
 8001fb4:	f00f facf 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the front fog lights. */
	if(ExtLights_FrontFogLight_CurrentState == STD_HIGH)
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <ExtLights_LightState+0x270>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d137      	bne.n	8002030 <ExtLights_LightState+0x278>
	{
		if(ExtLights_FrontFogLight_CurrentState != ExtLights_Previous_FrontFogLight_CurrentState)
 8001fc0:	4b19      	ldr	r3, [pc, #100]	; (8002028 <ExtLights_LightState+0x270>)
 8001fc2:	781a      	ldrb	r2, [r3, #0]
 8001fc4:	4b19      	ldr	r3, [pc, #100]	; (800202c <ExtLights_LightState+0x274>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d006      	beq.n	8001fda <ExtLights_LightState+0x222>
		{
			ExtLights_Previous_FrontFogLight_CurrentState = ExtLights_FrontFogLight_CurrentState;
 8001fcc:	4b16      	ldr	r3, [pc, #88]	; (8002028 <ExtLights_LightState+0x270>)
 8001fce:	781a      	ldrb	r2, [r3, #0]
 8001fd0:	4b16      	ldr	r3, [pc, #88]	; (800202c <ExtLights_LightState+0x274>)
 8001fd2:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr3(0);
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f00f f83f 	bl	8011058 <Rte_Write_TimH_TimHPort_Tim3Ccr3>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 8001fda:	2108      	movs	r1, #8
 8001fdc:	480f      	ldr	r0, [pc, #60]	; (800201c <ExtLights_LightState+0x264>)
 8001fde:	f00f faad 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001fe2:	e03a      	b.n	800205a <ExtLights_LightState+0x2a2>
 8001fe4:	200000b0 	.word	0x200000b0
 8001fe8:	200004d0 	.word	0x200004d0
 8001fec:	200000e4 	.word	0x200000e4
 8001ff0:	200000e5 	.word	0x200000e5
 8001ff4:	200000df 	.word	0x200000df
 8001ff8:	200000de 	.word	0x200000de
 8001ffc:	200000dd 	.word	0x200000dd
 8002000:	200000e0 	.word	0x200000e0
 8002004:	200000e2 	.word	0x200000e2
 8002008:	200000e3 	.word	0x200000e3
 800200c:	200000e6 	.word	0x200000e6
 8002010:	200000b1 	.word	0x200000b1
 8002014:	20000638 	.word	0x20000638
 8002018:	200000fe 	.word	0x200000fe
 800201c:	20000584 	.word	0x20000584
 8002020:	200000e7 	.word	0x200000e7
 8002024:	200000fc 	.word	0x200000fc
 8002028:	200000e1 	.word	0x200000e1
 800202c:	200000fd 	.word	0x200000fd
	}
	else if(ExtLights_FrontFogLight_CurrentState == STD_LOW)
 8002030:	4b42      	ldr	r3, [pc, #264]	; (800213c <ExtLights_LightState+0x384>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d110      	bne.n	800205a <ExtLights_LightState+0x2a2>
	{
		if(ExtLights_FrontFogLight_CurrentState != ExtLights_Previous_FrontFogLight_CurrentState)
 8002038:	4b40      	ldr	r3, [pc, #256]	; (800213c <ExtLights_LightState+0x384>)
 800203a:	781a      	ldrb	r2, [r3, #0]
 800203c:	4b40      	ldr	r3, [pc, #256]	; (8002140 <ExtLights_LightState+0x388>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d006      	beq.n	8002052 <ExtLights_LightState+0x29a>
		{
			ExtLights_Previous_FrontFogLight_CurrentState = ExtLights_FrontFogLight_CurrentState;
 8002044:	4b3d      	ldr	r3, [pc, #244]	; (800213c <ExtLights_LightState+0x384>)
 8002046:	781a      	ldrb	r2, [r3, #0]
 8002048:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <ExtLights_LightState+0x388>)
 800204a:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr3(0);
 800204c:	2000      	movs	r0, #0
 800204e:	f00f f803 	bl	8011058 <Rte_Write_TimH_TimHPort_Tim3Ccr3>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 8002052:	2108      	movs	r1, #8
 8002054:	483b      	ldr	r0, [pc, #236]	; (8002144 <ExtLights_LightState+0x38c>)
 8002056:	f00f fa7e 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on the reverse light. */
	ExtLights_ReverseLight(ExtLights_ReverseLight_CurrentState);
 800205a:	4b3b      	ldr	r3, [pc, #236]	; (8002148 <ExtLights_LightState+0x390>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f98c 	bl	800237c <ExtLights_ReverseLight>

	if((ExtLights_DtcArray[0] != 0 || ExtLights_DtcArray[1] != 0) && ExtLights_LowBeam_CurrentState == STD_HIGH)
 8002064:	4b39      	ldr	r3, [pc, #228]	; (800214c <ExtLights_LightState+0x394>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d103      	bne.n	8002074 <ExtLights_LightState+0x2bc>
 800206c:	4b37      	ldr	r3, [pc, #220]	; (800214c <ExtLights_LightState+0x394>)
 800206e:	785b      	ldrb	r3, [r3, #1]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <ExtLights_LightState+0x2cc>
 8002074:	4b36      	ldr	r3, [pc, #216]	; (8002150 <ExtLights_LightState+0x398>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d103      	bne.n	8002084 <ExtLights_LightState+0x2cc>
	{
		ExtLights_FrontFogLight_CurrentState = STD_HIGH;
 800207c:	4b2f      	ldr	r3, [pc, #188]	; (800213c <ExtLights_LightState+0x384>)
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
 8002082:	e00e      	b.n	80020a2 <ExtLights_LightState+0x2ea>
	}
	else if((ExtLights_DtcArray[0] == 0 || ExtLights_DtcArray[1] == 0) && Rte_P_Btc_BtcPort_Btc_FrontFogLight == STD_LOW)
 8002084:	4b31      	ldr	r3, [pc, #196]	; (800214c <ExtLights_LightState+0x394>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <ExtLights_LightState+0x2dc>
 800208c:	4b2f      	ldr	r3, [pc, #188]	; (800214c <ExtLights_LightState+0x394>)
 800208e:	785b      	ldrb	r3, [r3, #1]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d106      	bne.n	80020a2 <ExtLights_LightState+0x2ea>
 8002094:	4b2f      	ldr	r3, [pc, #188]	; (8002154 <ExtLights_LightState+0x39c>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d102      	bne.n	80020a2 <ExtLights_LightState+0x2ea>
	{
		ExtLights_FrontFogLight_CurrentState = STD_LOW;
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <ExtLights_LightState+0x384>)
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if((ExtLights_DtcArray[2] != 0 || ExtLights_DtcArray[3] != 0) && ExtLights_RearPositionLights_CurrentState == STD_HIGH)
 80020a2:	4b2a      	ldr	r3, [pc, #168]	; (800214c <ExtLights_LightState+0x394>)
 80020a4:	789b      	ldrb	r3, [r3, #2]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d103      	bne.n	80020b2 <ExtLights_LightState+0x2fa>
 80020aa:	4b28      	ldr	r3, [pc, #160]	; (800214c <ExtLights_LightState+0x394>)
 80020ac:	78db      	ldrb	r3, [r3, #3]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d007      	beq.n	80020c2 <ExtLights_LightState+0x30a>
 80020b2:	4b29      	ldr	r3, [pc, #164]	; (8002158 <ExtLights_LightState+0x3a0>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d103      	bne.n	80020c2 <ExtLights_LightState+0x30a>
	{
		ExtLights_RearFogLight_CurrentState = STD_HIGH;
 80020ba:	4b28      	ldr	r3, [pc, #160]	; (800215c <ExtLights_LightState+0x3a4>)
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
 80020c0:	e00e      	b.n	80020e0 <ExtLights_LightState+0x328>
	}
	else if((ExtLights_DtcArray[2] == 0 || ExtLights_DtcArray[3] == 0) && Rte_P_Btc_BtcPort_Btc_RearFogLight == STD_LOW)
 80020c2:	4b22      	ldr	r3, [pc, #136]	; (800214c <ExtLights_LightState+0x394>)
 80020c4:	789b      	ldrb	r3, [r3, #2]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <ExtLights_LightState+0x31a>
 80020ca:	4b20      	ldr	r3, [pc, #128]	; (800214c <ExtLights_LightState+0x394>)
 80020cc:	78db      	ldrb	r3, [r3, #3]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d106      	bne.n	80020e0 <ExtLights_LightState+0x328>
 80020d2:	4b23      	ldr	r3, [pc, #140]	; (8002160 <ExtLights_LightState+0x3a8>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d102      	bne.n	80020e0 <ExtLights_LightState+0x328>
	{
		ExtLights_RearFogLight_CurrentState = STD_LOW;
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <ExtLights_LightState+0x3a4>)
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if((ExtLights_DtcArray[8] != 0 || ExtLights_DtcArray[9] != 0) && ExtLights_BrakeLight_CurrentState == STD_HIGH)
 80020e0:	4b1a      	ldr	r3, [pc, #104]	; (800214c <ExtLights_LightState+0x394>)
 80020e2:	7a1b      	ldrb	r3, [r3, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d103      	bne.n	80020f0 <ExtLights_LightState+0x338>
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <ExtLights_LightState+0x394>)
 80020ea:	7a5b      	ldrb	r3, [r3, #9]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <ExtLights_LightState+0x348>
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <ExtLights_LightState+0x3ac>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d103      	bne.n	8002100 <ExtLights_LightState+0x348>
	{
		ExtLights_ReverseLight_CurrentState = STD_HIGH;
 80020f8:	4b13      	ldr	r3, [pc, #76]	; (8002148 <ExtLights_LightState+0x390>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
 80020fe:	e00e      	b.n	800211e <ExtLights_LightState+0x366>
	}
	else if((ExtLights_DtcArray[8] == 0 || ExtLights_DtcArray[9] == 0) && Rte_P_Btc_BtcPort_Btc_ReverseLight == STD_LOW)
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <ExtLights_LightState+0x394>)
 8002102:	7a1b      	ldrb	r3, [r3, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <ExtLights_LightState+0x358>
 8002108:	4b10      	ldr	r3, [pc, #64]	; (800214c <ExtLights_LightState+0x394>)
 800210a:	7a5b      	ldrb	r3, [r3, #9]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d106      	bne.n	800211e <ExtLights_LightState+0x366>
 8002110:	4b15      	ldr	r3, [pc, #84]	; (8002168 <ExtLights_LightState+0x3b0>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d102      	bne.n	800211e <ExtLights_LightState+0x366>
	{
		ExtLights_ReverseLight_CurrentState = STD_LOW;
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <ExtLights_LightState+0x390>)
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW)
 800211e:	4b13      	ldr	r3, [pc, #76]	; (800216c <ExtLights_LightState+0x3b4>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d108      	bne.n	8002138 <ExtLights_LightState+0x380>
	{
		ExtLights_ReverseLight_CurrentState = STD_LOW;
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <ExtLights_LightState+0x390>)
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
		ExtLights_RearFogLight_CurrentState = STD_LOW;
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <ExtLights_LightState+0x3a4>)
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
		ExtLights_FrontFogLight_CurrentState = STD_LOW;
 8002132:	4b02      	ldr	r3, [pc, #8]	; (800213c <ExtLights_LightState+0x384>)
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}
 800213c:	200000e1 	.word	0x200000e1
 8002140:	200000fd 	.word	0x200000fd
 8002144:	20000584 	.word	0x20000584
 8002148:	200000dc 	.word	0x200000dc
 800214c:	20000100 	.word	0x20000100
 8002150:	200000e4 	.word	0x200000e4
 8002154:	2000009b 	.word	0x2000009b
 8002158:	200000e5 	.word	0x200000e5
 800215c:	200000e7 	.word	0x200000e7
 8002160:	200000a0 	.word	0x200000a0
 8002164:	200000de 	.word	0x200000de
 8002168:	200000a1 	.word	0x200000a1
 800216c:	200000ae 	.word	0x200000ae

08002170 <ExtLights_MainFunction>:
* Function: ExtLights_MainFunction										   		   *
* Description: Exterior lights application main function. Controls application	   *
* 			   states. 		   													   *
************************************************************************************/
VOID ExtLights_MainFunction()
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
	ExtLights_LightState();
 8002174:	f7ff fe20 	bl	8001db8 <ExtLights_LightState>
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}

0800217c <ExtLights_LightSwitchMode>:
/***********************************************************************************
* Function: ExtLights_LightSwitchMode										   	   *
* Description: Control the light switch.								 		   *
************************************************************************************/
VOID ExtLights_LightSwitchMode()
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
	/* Switch through the light switch states. */
	switch(ExtLights_LightsSwitch_CurrentState)
 8002180:	4b6d      	ldr	r3, [pc, #436]	; (8002338 <ExtLights_LightSwitchMode+0x1bc>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	3b17      	subs	r3, #23
 8002186:	2b03      	cmp	r3, #3
 8002188:	f200 80d1 	bhi.w	800232e <ExtLights_LightSwitchMode+0x1b2>
 800218c:	a201      	add	r2, pc, #4	; (adr r2, 8002194 <ExtLights_LightSwitchMode+0x18>)
 800218e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002192:	bf00      	nop
 8002194:	080021a5 	.word	0x080021a5
 8002198:	080021ef 	.word	0x080021ef
 800219c:	0800228f 	.word	0x0800228f
 80021a0:	080022e5 	.word	0x080022e5
	{
		/* Switch is on position zero, turn off the lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATEZERO:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 80021a4:	4b65      	ldr	r3, [pc, #404]	; (800233c <ExtLights_LightSwitchMode+0x1c0>)
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	4b63      	ldr	r3, [pc, #396]	; (8002338 <ExtLights_LightSwitchMode+0x1bc>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d00f      	beq.n	80021d0 <ExtLights_LightSwitchMode+0x54>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 80021b0:	4b61      	ldr	r3, [pc, #388]	; (8002338 <ExtLights_LightSwitchMode+0x1bc>)
 80021b2:	781a      	ldrb	r2, [r3, #0]
 80021b4:	4b61      	ldr	r3, [pc, #388]	; (800233c <ExtLights_LightSwitchMode+0x1c0>)
 80021b6:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 80021b8:	2000      	movs	r0, #0
 80021ba:	f00e ff6d 	bl	8011098 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 80021be:	2000      	movs	r0, #0
 80021c0:	f00e ff79 	bl	80110b6 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 80021c4:	4b5e      	ldr	r3, [pc, #376]	; (8002340 <ExtLights_LightSwitchMode+0x1c4>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 80021ca:	4b5e      	ldr	r3, [pc, #376]	; (8002344 <ExtLights_LightSwitchMode+0x1c8>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80021d0:	2100      	movs	r1, #0
 80021d2:	485d      	ldr	r0, [pc, #372]	; (8002348 <ExtLights_LightSwitchMode+0x1cc>)
 80021d4:	f00f f9bf 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 80021d8:	2104      	movs	r1, #4
 80021da:	485b      	ldr	r0, [pc, #364]	; (8002348 <ExtLights_LightSwitchMode+0x1cc>)
 80021dc:	f00f f9bb 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 80021e0:	4b57      	ldr	r3, [pc, #348]	; (8002340 <ExtLights_LightSwitchMode+0x1c4>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 80021e6:	4b57      	ldr	r3, [pc, #348]	; (8002344 <ExtLights_LightSwitchMode+0x1c8>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
			break;
 80021ec:	e0a2      	b.n	8002334 <ExtLights_LightSwitchMode+0x1b8>
		/* Switch is on position one, turn automatic lights controlled by sensor's input. */
		case EXTLIGHTS_LIGHTSWITCH_STATEONE:
			/* Read the sensor status. */
			if(Rte_P_Os_OsPort_Os_Counter % 39 == 0)
 80021ee:	4b57      	ldr	r3, [pc, #348]	; (800234c <ExtLights_LightSwitchMode+0x1d0>)
 80021f0:	6819      	ldr	r1, [r3, #0]
 80021f2:	4b57      	ldr	r3, [pc, #348]	; (8002350 <ExtLights_LightSwitchMode+0x1d4>)
 80021f4:	fba3 2301 	umull	r2, r3, r3, r1
 80021f8:	1aca      	subs	r2, r1, r3
 80021fa:	0852      	lsrs	r2, r2, #1
 80021fc:	4413      	add	r3, r2
 80021fe:	095a      	lsrs	r2, r3, #5
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	1aca      	subs	r2, r1, r3
 800220c:	2a00      	cmp	r2, #0
 800220e:	d102      	bne.n	8002216 <ExtLights_LightSwitchMode+0x9a>
			{
				Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(EXTLIGHTS_LS_REQUEST);
 8002210:	2000      	movs	r0, #0
 8002212:	f000 ff59 	bl	80030c8 <SenCtrl_ProcessSensorValue>
			}
			else
			{
				/* do nothing */
			}
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8002216:	4b49      	ldr	r3, [pc, #292]	; (800233c <ExtLights_LightSwitchMode+0x1c0>)
 8002218:	781a      	ldrb	r2, [r3, #0]
 800221a:	4b47      	ldr	r3, [pc, #284]	; (8002338 <ExtLights_LightSwitchMode+0x1bc>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d00f      	beq.n	8002242 <ExtLights_LightSwitchMode+0xc6>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8002222:	4b45      	ldr	r3, [pc, #276]	; (8002338 <ExtLights_LightSwitchMode+0x1bc>)
 8002224:	781a      	ldrb	r2, [r3, #0]
 8002226:	4b45      	ldr	r3, [pc, #276]	; (800233c <ExtLights_LightSwitchMode+0x1c0>)
 8002228:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 800222a:	2000      	movs	r0, #0
 800222c:	f00e ff34 	bl	8011098 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8002230:	2000      	movs	r0, #0
 8002232:	f00e ff40 	bl	80110b6 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8002236:	4b42      	ldr	r3, [pc, #264]	; (8002340 <ExtLights_LightSwitchMode+0x1c4>)
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 800223c:	4b41      	ldr	r3, [pc, #260]	; (8002344 <ExtLights_LightSwitchMode+0x1c8>)
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
			else
			{
				/* do nothing */
			}
			/* If the sensor status is on, turn on the lights to on. */
			if(ExtLights_LightSensorState == 1)
 8002242:	4b44      	ldr	r3, [pc, #272]	; (8002354 <ExtLights_LightSwitchMode+0x1d8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d10e      	bne.n	8002268 <ExtLights_LightSwitchMode+0xec>
			{
				ExtLights_LowBeam_CurrentState = STD_HIGH;
 800224a:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <ExtLights_LightSwitchMode+0x1c4>)
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8002250:	4b3c      	ldr	r3, [pc, #240]	; (8002344 <ExtLights_LightSwitchMode+0x1c8>)
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8002256:	2100      	movs	r1, #0
 8002258:	483b      	ldr	r0, [pc, #236]	; (8002348 <ExtLights_LightSwitchMode+0x1cc>)
 800225a:	f00f f96f 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 800225e:	2104      	movs	r1, #4
 8002260:	4839      	ldr	r0, [pc, #228]	; (8002348 <ExtLights_LightSwitchMode+0x1cc>)
 8002262:	f00f f96b 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				ExtLights_LowBeam_CurrentState = STD_LOW;
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
			}
			break;
 8002266:	e064      	b.n	8002332 <ExtLights_LightSwitchMode+0x1b6>
			else if(ExtLights_LightSensorState != 1)
 8002268:	4b3a      	ldr	r3, [pc, #232]	; (8002354 <ExtLights_LightSwitchMode+0x1d8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d060      	beq.n	8002332 <ExtLights_LightSwitchMode+0x1b6>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8002270:	4b33      	ldr	r3, [pc, #204]	; (8002340 <ExtLights_LightSwitchMode+0x1c4>)
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8002276:	4b33      	ldr	r3, [pc, #204]	; (8002344 <ExtLights_LightSwitchMode+0x1c8>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 800227c:	2100      	movs	r1, #0
 800227e:	4832      	ldr	r0, [pc, #200]	; (8002348 <ExtLights_LightSwitchMode+0x1cc>)
 8002280:	f00f f969 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002284:	2104      	movs	r1, #4
 8002286:	4830      	ldr	r0, [pc, #192]	; (8002348 <ExtLights_LightSwitchMode+0x1cc>)
 8002288:	f00f f965 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			break;
 800228c:	e051      	b.n	8002332 <ExtLights_LightSwitchMode+0x1b6>
		/* Switch is on position three, turn on position lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATETWO:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 800228e:	4b2b      	ldr	r3, [pc, #172]	; (800233c <ExtLights_LightSwitchMode+0x1c0>)
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	4b29      	ldr	r3, [pc, #164]	; (8002338 <ExtLights_LightSwitchMode+0x1bc>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d00f      	beq.n	80022ba <ExtLights_LightSwitchMode+0x13e>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 800229a:	4b27      	ldr	r3, [pc, #156]	; (8002338 <ExtLights_LightSwitchMode+0x1bc>)
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	4b27      	ldr	r3, [pc, #156]	; (800233c <ExtLights_LightSwitchMode+0x1c0>)
 80022a0:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 80022a2:	2000      	movs	r0, #0
 80022a4:	f00e fef8 	bl	8011098 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 80022a8:	2000      	movs	r0, #0
 80022aa:	f00e ff04 	bl	80110b6 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 80022ae:	4b24      	ldr	r3, [pc, #144]	; (8002340 <ExtLights_LightSwitchMode+0x1c4>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 80022b4:	4b23      	ldr	r3, [pc, #140]	; (8002344 <ExtLights_LightSwitchMode+0x1c8>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80022ba:	2100      	movs	r1, #0
 80022bc:	4822      	ldr	r0, [pc, #136]	; (8002348 <ExtLights_LightSwitchMode+0x1cc>)
 80022be:	f00f f93d 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 80022c2:	2104      	movs	r1, #4
 80022c4:	4820      	ldr	r0, [pc, #128]	; (8002348 <ExtLights_LightSwitchMode+0x1cc>)
 80022c6:	f00f f939 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f00e fee4 	bl	8011098 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
			Rte_Write_TimH_TimHPort_Tim2Ccr2(100);
 80022d0:	2064      	movs	r0, #100	; 0x64
 80022d2:	f00e fef0 	bl	80110b6 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 80022d6:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <ExtLights_LightSwitchMode+0x1c4>)
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <ExtLights_LightSwitchMode+0x1c8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	701a      	strb	r2, [r3, #0]
			break;
 80022e2:	e027      	b.n	8002334 <ExtLights_LightSwitchMode+0x1b8>
		/* Switch is on position four, turn on night time lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATETHREE:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 80022e4:	4b15      	ldr	r3, [pc, #84]	; (800233c <ExtLights_LightSwitchMode+0x1c0>)
 80022e6:	781a      	ldrb	r2, [r3, #0]
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <ExtLights_LightSwitchMode+0x1bc>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d00f      	beq.n	8002310 <ExtLights_LightSwitchMode+0x194>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <ExtLights_LightSwitchMode+0x1bc>)
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <ExtLights_LightSwitchMode+0x1c0>)
 80022f6:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 80022f8:	2000      	movs	r0, #0
 80022fa:	f00e fecd 	bl	8011098 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 80022fe:	2000      	movs	r0, #0
 8002300:	f00e fed9 	bl	80110b6 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8002304:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <ExtLights_LightSwitchMode+0x1c4>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <ExtLights_LightSwitchMode+0x1c8>)
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8002310:	2100      	movs	r1, #0
 8002312:	480d      	ldr	r0, [pc, #52]	; (8002348 <ExtLights_LightSwitchMode+0x1cc>)
 8002314:	f00f f912 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002318:	2104      	movs	r1, #4
 800231a:	480b      	ldr	r0, [pc, #44]	; (8002348 <ExtLights_LightSwitchMode+0x1cc>)
 800231c:	f00f f90e 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			ExtLights_LowBeam_CurrentState = STD_HIGH;
 8002320:	4b07      	ldr	r3, [pc, #28]	; (8002340 <ExtLights_LightSwitchMode+0x1c4>)
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8002326:	4b07      	ldr	r3, [pc, #28]	; (8002344 <ExtLights_LightSwitchMode+0x1c8>)
 8002328:	2201      	movs	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
			break;
 800232c:	e002      	b.n	8002334 <ExtLights_LightSwitchMode+0x1b8>
		default:
			break;
 800232e:	bf00      	nop
 8002330:	e000      	b.n	8002334 <ExtLights_LightSwitchMode+0x1b8>
			break;
 8002332:	bf00      	nop
	}
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}
 8002338:	200000df 	.word	0x200000df
 800233c:	200000ff 	.word	0x200000ff
 8002340:	200000e4 	.word	0x200000e4
 8002344:	200000e5 	.word	0x200000e5
 8002348:	200004d0 	.word	0x200004d0
 800234c:	20000268 	.word	0x20000268
 8002350:	a41a41a5 	.word	0xa41a41a5
 8002354:	200000f8 	.word	0x200000f8

08002358 <ExtLights_HighBeam>:
/***********************************************************************************
* Function: ExtLights_HighBeam										   			   *
* Description: High beam trigger. 		  										   *
************************************************************************************/
VOID ExtLights_HighBeam(uint8 PinState)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	461a      	mov	r2, r3
 8002366:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800236a:	4803      	ldr	r0, [pc, #12]	; (8002378 <ExtLights_HighBeam+0x20>)
 800236c:	f00f faa7 	bl	80118be <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40020000 	.word	0x40020000

0800237c <ExtLights_ReverseLight>:
/***********************************************************************************
* Function: ExtLights_ReverseLight										   		   *
* Description: Reverse light trigger. 		   									   *
************************************************************************************/
VOID ExtLights_ReverseLight(uint8 PinState)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	461a      	mov	r2, r3
 800238a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800238e:	4803      	ldr	r0, [pc, #12]	; (800239c <ExtLights_ReverseLight+0x20>)
 8002390:	f00f fa95 	bl	80118be <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40020400 	.word	0x40020400

080023a0 <Hvac_MainFunction>:
/***********************************************************************************
* Function: Hvac_MainFunction											 		   *
* Description: Application main function.					                       *
************************************************************************************/
VOID Hvac_MainFunction()
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	Hvac_MainCounter++;
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <Hvac_MainFunction+0x18>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	3301      	adds	r3, #1
 80023aa:	4a03      	ldr	r2, [pc, #12]	; (80023b8 <Hvac_MainFunction+0x18>)
 80023ac:	6013      	str	r3, [r2, #0]
	Hvac_ProcessCommand();
 80023ae:	f000 f805 	bl	80023bc <Hvac_ProcessCommand>
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	2000010c 	.word	0x2000010c

080023bc <Hvac_ProcessCommand>:
/***********************************************************************************
* Function: Hvac_ProcessCommand											 		   *
* Description: Process HVAC states.					                               *
************************************************************************************/
VOID Hvac_ProcessCommand()
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
	static uint8 sensorValueTs = 0;
	char buffer_T[3];
	char buffer_F[2];
	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(HVAC_TS_REQUEST);
 80023c2:	2003      	movs	r0, #3
 80023c4:	f000 fe80 	bl	80030c8 <SenCtrl_ProcessSensorValue>
	sensorValueTs = Hvac_TsState;
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <Hvac_ProcessCommand+0x54>)
 80023ca:	781a      	ldrb	r2, [r3, #0]
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <Hvac_ProcessCommand+0x58>)
 80023ce:	701a      	strb	r2, [r3, #0]
	if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <Hvac_ProcessCommand+0x5c>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	f040 81d1 	bne.w	800277c <Hvac_ProcessCommand+0x3c0>
	{
		if(Btc_FanValue == STD_LOW)
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <Hvac_ProcessCommand+0x60>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d102      	bne.n	80023e8 <Hvac_ProcessCommand+0x2c>
		{
			Hvac_FanValue = 1;
 80023e2:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <Hvac_ProcessCommand+0x64>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(Btc_TemperatureValue == STD_LOW)
 80023e8:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <Hvac_ProcessCommand+0x68>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d106      	bne.n	80023fe <Hvac_ProcessCommand+0x42>
		{
			Hvac_TemperatureValue = 22;
 80023f0:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <Hvac_ProcessCommand+0x6c>)
 80023f2:	2216      	movs	r2, #22
 80023f4:	701a      	strb	r2, [r3, #0]
			Hvac_prevTemperatureValue = Hvac_TemperatureValue;
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <Hvac_ProcessCommand+0x6c>)
 80023f8:	781a      	ldrb	r2, [r3, #0]
 80023fa:	4b0c      	ldr	r3, [pc, #48]	; (800242c <Hvac_ProcessCommand+0x70>)
 80023fc:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(Hvac_FanValue != STD_LOW)
 80023fe:	4b08      	ldr	r3, [pc, #32]	; (8002420 <Hvac_ProcessCommand+0x64>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d016      	beq.n	8002434 <Hvac_ProcessCommand+0x78>
		{
			Hvac_CurrentState = STD_HIGH;
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <Hvac_ProcessCommand+0x74>)
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
 800240c:	e019      	b.n	8002442 <Hvac_ProcessCommand+0x86>
 800240e:	bf00      	nop
 8002410:	20000110 	.word	0x20000110
 8002414:	20000128 	.word	0x20000128
 8002418:	200000ae 	.word	0x200000ae
 800241c:	200000a3 	.word	0x200000a3
 8002420:	20000112 	.word	0x20000112
 8002424:	200000a4 	.word	0x200000a4
 8002428:	20000113 	.word	0x20000113
 800242c:	20000127 	.word	0x20000127
 8002430:	20000111 	.word	0x20000111
		}
		else if(Hvac_FanValue == STD_LOW)
 8002434:	4b8f      	ldr	r3, [pc, #572]	; (8002674 <Hvac_ProcessCommand+0x2b8>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d102      	bne.n	8002442 <Hvac_ProcessCommand+0x86>
		{
			Hvac_CurrentState = STD_LOW;
 800243c:	4b8e      	ldr	r3, [pc, #568]	; (8002678 <Hvac_ProcessCommand+0x2bc>)
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(Hvac_TemperatureValue != Hvac_prevTemperatureValue)
 8002442:	4b8e      	ldr	r3, [pc, #568]	; (800267c <Hvac_ProcessCommand+0x2c0>)
 8002444:	781a      	ldrb	r2, [r3, #0]
 8002446:	4b8e      	ldr	r3, [pc, #568]	; (8002680 <Hvac_ProcessCommand+0x2c4>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d018      	beq.n	8002480 <Hvac_ProcessCommand+0xc4>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 800244e:	4b8d      	ldr	r3, [pc, #564]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b1f      	cmp	r3, #31
 8002454:	d007      	beq.n	8002466 <Hvac_ProcessCommand+0xaa>
 8002456:	4b8b      	ldr	r3, [pc, #556]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <Hvac_ProcessCommand+0xaa>
 800245e:	4b85      	ldr	r3, [pc, #532]	; (8002674 <Hvac_ProcessCommand+0x2b8>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <Hvac_ProcessCommand+0xb6>
			{
				Btc_FanValue = 31;
 8002466:	4b87      	ldr	r3, [pc, #540]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 8002468:	221f      	movs	r2, #31
 800246a:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 800246c:	4b81      	ldr	r3, [pc, #516]	; (8002674 <Hvac_ProcessCommand+0x2b8>)
 800246e:	2201      	movs	r2, #1
 8002470:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Hvac_prevTemperatureValue = Hvac_TemperatureValue;
 8002472:	4b82      	ldr	r3, [pc, #520]	; (800267c <Hvac_ProcessCommand+0x2c0>)
 8002474:	781a      	ldrb	r2, [r3, #0]
 8002476:	4b82      	ldr	r3, [pc, #520]	; (8002680 <Hvac_ProcessCommand+0x2c4>)
 8002478:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 800247a:	4b7f      	ldr	r3, [pc, #508]	; (8002678 <Hvac_ProcessCommand+0x2bc>)
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_Ac != Hvac_Ac)
 8002480:	4b81      	ldr	r3, [pc, #516]	; (8002688 <Hvac_ProcessCommand+0x2cc>)
 8002482:	781a      	ldrb	r2, [r3, #0]
 8002484:	4b81      	ldr	r3, [pc, #516]	; (800268c <Hvac_ProcessCommand+0x2d0>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d018      	beq.n	80024be <Hvac_ProcessCommand+0x102>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 800248c:	4b7d      	ldr	r3, [pc, #500]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b1f      	cmp	r3, #31
 8002492:	d007      	beq.n	80024a4 <Hvac_ProcessCommand+0xe8>
 8002494:	4b7b      	ldr	r3, [pc, #492]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <Hvac_ProcessCommand+0xe8>
 800249c:	4b75      	ldr	r3, [pc, #468]	; (8002674 <Hvac_ProcessCommand+0x2b8>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <Hvac_ProcessCommand+0xf4>
			{
				Btc_FanValue = 31;
 80024a4:	4b77      	ldr	r3, [pc, #476]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 80024a6:	221f      	movs	r2, #31
 80024a8:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 80024aa:	4b72      	ldr	r3, [pc, #456]	; (8002674 <Hvac_ProcessCommand+0x2b8>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_Ac = Hvac_Ac;
 80024b0:	4b76      	ldr	r3, [pc, #472]	; (800268c <Hvac_ProcessCommand+0x2d0>)
 80024b2:	781a      	ldrb	r2, [r3, #0]
 80024b4:	4b74      	ldr	r3, [pc, #464]	; (8002688 <Hvac_ProcessCommand+0x2cc>)
 80024b6:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 80024b8:	4b6f      	ldr	r3, [pc, #444]	; (8002678 <Hvac_ProcessCommand+0x2bc>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_AutomaticMode != Hvac_AutomaticMode)
 80024be:	4b74      	ldr	r3, [pc, #464]	; (8002690 <Hvac_ProcessCommand+0x2d4>)
 80024c0:	781a      	ldrb	r2, [r3, #0]
 80024c2:	4b74      	ldr	r3, [pc, #464]	; (8002694 <Hvac_ProcessCommand+0x2d8>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d018      	beq.n	80024fc <Hvac_ProcessCommand+0x140>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 80024ca:	4b6e      	ldr	r3, [pc, #440]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b1f      	cmp	r3, #31
 80024d0:	d007      	beq.n	80024e2 <Hvac_ProcessCommand+0x126>
 80024d2:	4b6c      	ldr	r3, [pc, #432]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <Hvac_ProcessCommand+0x126>
 80024da:	4b66      	ldr	r3, [pc, #408]	; (8002674 <Hvac_ProcessCommand+0x2b8>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d105      	bne.n	80024ee <Hvac_ProcessCommand+0x132>
			{
				Btc_FanValue = 31;
 80024e2:	4b68      	ldr	r3, [pc, #416]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 80024e4:	221f      	movs	r2, #31
 80024e6:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 80024e8:	4b62      	ldr	r3, [pc, #392]	; (8002674 <Hvac_ProcessCommand+0x2b8>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_AutomaticMode = Hvac_AutomaticMode;
 80024ee:	4b69      	ldr	r3, [pc, #420]	; (8002694 <Hvac_ProcessCommand+0x2d8>)
 80024f0:	781a      	ldrb	r2, [r3, #0]
 80024f2:	4b67      	ldr	r3, [pc, #412]	; (8002690 <Hvac_ProcessCommand+0x2d4>)
 80024f4:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 80024f6:	4b60      	ldr	r3, [pc, #384]	; (8002678 <Hvac_ProcessCommand+0x2bc>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_LegVent != Hvac_LegVent)
 80024fc:	4b66      	ldr	r3, [pc, #408]	; (8002698 <Hvac_ProcessCommand+0x2dc>)
 80024fe:	781a      	ldrb	r2, [r3, #0]
 8002500:	4b66      	ldr	r3, [pc, #408]	; (800269c <Hvac_ProcessCommand+0x2e0>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d018      	beq.n	800253a <Hvac_ProcessCommand+0x17e>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002508:	4b5e      	ldr	r3, [pc, #376]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b1f      	cmp	r3, #31
 800250e:	d007      	beq.n	8002520 <Hvac_ProcessCommand+0x164>
 8002510:	4b5c      	ldr	r3, [pc, #368]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <Hvac_ProcessCommand+0x164>
 8002518:	4b56      	ldr	r3, [pc, #344]	; (8002674 <Hvac_ProcessCommand+0x2b8>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d105      	bne.n	800252c <Hvac_ProcessCommand+0x170>
			{
				Btc_FanValue = 31;
 8002520:	4b58      	ldr	r3, [pc, #352]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 8002522:	221f      	movs	r2, #31
 8002524:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002526:	4b53      	ldr	r3, [pc, #332]	; (8002674 <Hvac_ProcessCommand+0x2b8>)
 8002528:	2201      	movs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_LegVent = Hvac_LegVent;
 800252c:	4b5b      	ldr	r3, [pc, #364]	; (800269c <Hvac_ProcessCommand+0x2e0>)
 800252e:	781a      	ldrb	r2, [r3, #0]
 8002530:	4b59      	ldr	r3, [pc, #356]	; (8002698 <Hvac_ProcessCommand+0x2dc>)
 8002532:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002534:	4b50      	ldr	r3, [pc, #320]	; (8002678 <Hvac_ProcessCommand+0x2bc>)
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_MidVent != Hvac_MidVent)
 800253a:	4b59      	ldr	r3, [pc, #356]	; (80026a0 <Hvac_ProcessCommand+0x2e4>)
 800253c:	781a      	ldrb	r2, [r3, #0]
 800253e:	4b59      	ldr	r3, [pc, #356]	; (80026a4 <Hvac_ProcessCommand+0x2e8>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d018      	beq.n	8002578 <Hvac_ProcessCommand+0x1bc>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002546:	4b4f      	ldr	r3, [pc, #316]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b1f      	cmp	r3, #31
 800254c:	d007      	beq.n	800255e <Hvac_ProcessCommand+0x1a2>
 800254e:	4b4d      	ldr	r3, [pc, #308]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <Hvac_ProcessCommand+0x1a2>
 8002556:	4b47      	ldr	r3, [pc, #284]	; (8002674 <Hvac_ProcessCommand+0x2b8>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d105      	bne.n	800256a <Hvac_ProcessCommand+0x1ae>
			{
				Btc_FanValue = 31;
 800255e:	4b49      	ldr	r3, [pc, #292]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 8002560:	221f      	movs	r2, #31
 8002562:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002564:	4b43      	ldr	r3, [pc, #268]	; (8002674 <Hvac_ProcessCommand+0x2b8>)
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_MidVent = Hvac_MidVent;
 800256a:	4b4e      	ldr	r3, [pc, #312]	; (80026a4 <Hvac_ProcessCommand+0x2e8>)
 800256c:	781a      	ldrb	r2, [r3, #0]
 800256e:	4b4c      	ldr	r3, [pc, #304]	; (80026a0 <Hvac_ProcessCommand+0x2e4>)
 8002570:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002572:	4b41      	ldr	r3, [pc, #260]	; (8002678 <Hvac_ProcessCommand+0x2bc>)
 8002574:	2201      	movs	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_WindshieldVent != Hvac_WindshieldVent)
 8002578:	4b4b      	ldr	r3, [pc, #300]	; (80026a8 <Hvac_ProcessCommand+0x2ec>)
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	4b4b      	ldr	r3, [pc, #300]	; (80026ac <Hvac_ProcessCommand+0x2f0>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d018      	beq.n	80025b6 <Hvac_ProcessCommand+0x1fa>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002584:	4b3f      	ldr	r3, [pc, #252]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b1f      	cmp	r3, #31
 800258a:	d007      	beq.n	800259c <Hvac_ProcessCommand+0x1e0>
 800258c:	4b3d      	ldr	r3, [pc, #244]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <Hvac_ProcessCommand+0x1e0>
 8002594:	4b37      	ldr	r3, [pc, #220]	; (8002674 <Hvac_ProcessCommand+0x2b8>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d105      	bne.n	80025a8 <Hvac_ProcessCommand+0x1ec>
			{
				Btc_FanValue = 31;
 800259c:	4b39      	ldr	r3, [pc, #228]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 800259e:	221f      	movs	r2, #31
 80025a0:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 80025a2:	4b34      	ldr	r3, [pc, #208]	; (8002674 <Hvac_ProcessCommand+0x2b8>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_WindshieldVent = Hvac_WindshieldVent;
 80025a8:	4b40      	ldr	r3, [pc, #256]	; (80026ac <Hvac_ProcessCommand+0x2f0>)
 80025aa:	781a      	ldrb	r2, [r3, #0]
 80025ac:	4b3e      	ldr	r3, [pc, #248]	; (80026a8 <Hvac_ProcessCommand+0x2ec>)
 80025ae:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 80025b0:	4b31      	ldr	r3, [pc, #196]	; (8002678 <Hvac_ProcessCommand+0x2bc>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_WindshieldVent != Hvac_WindshieldVent)
 80025b6:	4b3c      	ldr	r3, [pc, #240]	; (80026a8 <Hvac_ProcessCommand+0x2ec>)
 80025b8:	781a      	ldrb	r2, [r3, #0]
 80025ba:	4b3c      	ldr	r3, [pc, #240]	; (80026ac <Hvac_ProcessCommand+0x2f0>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d018      	beq.n	80025f4 <Hvac_ProcessCommand+0x238>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 80025c2:	4b30      	ldr	r3, [pc, #192]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b1f      	cmp	r3, #31
 80025c8:	d007      	beq.n	80025da <Hvac_ProcessCommand+0x21e>
 80025ca:	4b2e      	ldr	r3, [pc, #184]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <Hvac_ProcessCommand+0x21e>
 80025d2:	4b28      	ldr	r3, [pc, #160]	; (8002674 <Hvac_ProcessCommand+0x2b8>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <Hvac_ProcessCommand+0x22a>
			{
				Btc_FanValue = 31;
 80025da:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 80025dc:	221f      	movs	r2, #31
 80025de:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 80025e0:	4b24      	ldr	r3, [pc, #144]	; (8002674 <Hvac_ProcessCommand+0x2b8>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_WindshieldVent = Hvac_WindshieldVent;
 80025e6:	4b31      	ldr	r3, [pc, #196]	; (80026ac <Hvac_ProcessCommand+0x2f0>)
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	4b2f      	ldr	r3, [pc, #188]	; (80026a8 <Hvac_ProcessCommand+0x2ec>)
 80025ec:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 80025ee:	4b22      	ldr	r3, [pc, #136]	; (8002678 <Hvac_ProcessCommand+0x2bc>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_WindshieldDefrost != Hvac_WindshieldDefrost)
 80025f4:	4b2e      	ldr	r3, [pc, #184]	; (80026b0 <Hvac_ProcessCommand+0x2f4>)
 80025f6:	781a      	ldrb	r2, [r3, #0]
 80025f8:	4b2e      	ldr	r3, [pc, #184]	; (80026b4 <Hvac_ProcessCommand+0x2f8>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d018      	beq.n	8002632 <Hvac_ProcessCommand+0x276>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002600:	4b20      	ldr	r3, [pc, #128]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b1f      	cmp	r3, #31
 8002606:	d007      	beq.n	8002618 <Hvac_ProcessCommand+0x25c>
 8002608:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <Hvac_ProcessCommand+0x25c>
 8002610:	4b18      	ldr	r3, [pc, #96]	; (8002674 <Hvac_ProcessCommand+0x2b8>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d105      	bne.n	8002624 <Hvac_ProcessCommand+0x268>
			{
				Btc_FanValue = 31;
 8002618:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 800261a:	221f      	movs	r2, #31
 800261c:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 800261e:	4b15      	ldr	r3, [pc, #84]	; (8002674 <Hvac_ProcessCommand+0x2b8>)
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_WindshieldDefrost = Hvac_WindshieldDefrost;
 8002624:	4b23      	ldr	r3, [pc, #140]	; (80026b4 <Hvac_ProcessCommand+0x2f8>)
 8002626:	781a      	ldrb	r2, [r3, #0]
 8002628:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <Hvac_ProcessCommand+0x2f4>)
 800262a:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <Hvac_ProcessCommand+0x2bc>)
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_RearWindshieldDefrost != Hvac_RearWindshieldDefrost)
 8002632:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <Hvac_ProcessCommand+0x2fc>)
 8002634:	781a      	ldrb	r2, [r3, #0]
 8002636:	4b21      	ldr	r3, [pc, #132]	; (80026bc <Hvac_ProcessCommand+0x300>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d040      	beq.n	80026c0 <Hvac_ProcessCommand+0x304>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b1f      	cmp	r3, #31
 8002644:	d007      	beq.n	8002656 <Hvac_ProcessCommand+0x29a>
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <Hvac_ProcessCommand+0x29a>
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <Hvac_ProcessCommand+0x2b8>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d105      	bne.n	8002662 <Hvac_ProcessCommand+0x2a6>
			{
				Btc_FanValue = 31;
 8002656:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <Hvac_ProcessCommand+0x2c8>)
 8002658:	221f      	movs	r2, #31
 800265a:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <Hvac_ProcessCommand+0x2b8>)
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_RearWindshieldDefrost = Hvac_RearWindshieldDefrost;
 8002662:	4b16      	ldr	r3, [pc, #88]	; (80026bc <Hvac_ProcessCommand+0x300>)
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <Hvac_ProcessCommand+0x2fc>)
 8002668:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 800266a:	4b03      	ldr	r3, [pc, #12]	; (8002678 <Hvac_ProcessCommand+0x2bc>)
 800266c:	2201      	movs	r2, #1
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	e026      	b.n	80026c0 <Hvac_ProcessCommand+0x304>
 8002672:	bf00      	nop
 8002674:	20000112 	.word	0x20000112
 8002678:	20000111 	.word	0x20000111
 800267c:	20000113 	.word	0x20000113
 8002680:	20000127 	.word	0x20000127
 8002684:	200000a3 	.word	0x200000a3
 8002688:	20000123 	.word	0x20000123
 800268c:	20000119 	.word	0x20000119
 8002690:	20000126 	.word	0x20000126
 8002694:	2000011c 	.word	0x2000011c
 8002698:	2000011e 	.word	0x2000011e
 800269c:	20000114 	.word	0x20000114
 80026a0:	2000011f 	.word	0x2000011f
 80026a4:	20000115 	.word	0x20000115
 80026a8:	20000120 	.word	0x20000120
 80026ac:	20000116 	.word	0x20000116
 80026b0:	20000121 	.word	0x20000121
 80026b4:	20000117 	.word	0x20000117
 80026b8:	20000122 	.word	0x20000122
 80026bc:	20000118 	.word	0x20000118
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_Recirculation != Hvac_Recirculation)
 80026c0:	4ba3      	ldr	r3, [pc, #652]	; (8002950 <Hvac_ProcessCommand+0x594>)
 80026c2:	781a      	ldrb	r2, [r3, #0]
 80026c4:	4ba3      	ldr	r3, [pc, #652]	; (8002954 <Hvac_ProcessCommand+0x598>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d018      	beq.n	80026fe <Hvac_ProcessCommand+0x342>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 80026cc:	4ba2      	ldr	r3, [pc, #648]	; (8002958 <Hvac_ProcessCommand+0x59c>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b1f      	cmp	r3, #31
 80026d2:	d007      	beq.n	80026e4 <Hvac_ProcessCommand+0x328>
 80026d4:	4ba0      	ldr	r3, [pc, #640]	; (8002958 <Hvac_ProcessCommand+0x59c>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <Hvac_ProcessCommand+0x328>
 80026dc:	4b9f      	ldr	r3, [pc, #636]	; (800295c <Hvac_ProcessCommand+0x5a0>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d105      	bne.n	80026f0 <Hvac_ProcessCommand+0x334>
			{
				Btc_FanValue = 31;
 80026e4:	4b9c      	ldr	r3, [pc, #624]	; (8002958 <Hvac_ProcessCommand+0x59c>)
 80026e6:	221f      	movs	r2, #31
 80026e8:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 80026ea:	4b9c      	ldr	r3, [pc, #624]	; (800295c <Hvac_ProcessCommand+0x5a0>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_Recirculation = Hvac_Recirculation;
 80026f0:	4b98      	ldr	r3, [pc, #608]	; (8002954 <Hvac_ProcessCommand+0x598>)
 80026f2:	781a      	ldrb	r2, [r3, #0]
 80026f4:	4b96      	ldr	r3, [pc, #600]	; (8002950 <Hvac_ProcessCommand+0x594>)
 80026f6:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 80026f8:	4b99      	ldr	r3, [pc, #612]	; (8002960 <Hvac_ProcessCommand+0x5a4>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_Recirculation != Hvac_Recirculation)
 80026fe:	4b94      	ldr	r3, [pc, #592]	; (8002950 <Hvac_ProcessCommand+0x594>)
 8002700:	781a      	ldrb	r2, [r3, #0]
 8002702:	4b94      	ldr	r3, [pc, #592]	; (8002954 <Hvac_ProcessCommand+0x598>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d018      	beq.n	800273c <Hvac_ProcessCommand+0x380>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 800270a:	4b93      	ldr	r3, [pc, #588]	; (8002958 <Hvac_ProcessCommand+0x59c>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b1f      	cmp	r3, #31
 8002710:	d007      	beq.n	8002722 <Hvac_ProcessCommand+0x366>
 8002712:	4b91      	ldr	r3, [pc, #580]	; (8002958 <Hvac_ProcessCommand+0x59c>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <Hvac_ProcessCommand+0x366>
 800271a:	4b90      	ldr	r3, [pc, #576]	; (800295c <Hvac_ProcessCommand+0x5a0>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d105      	bne.n	800272e <Hvac_ProcessCommand+0x372>
			{
				Btc_FanValue = 31;
 8002722:	4b8d      	ldr	r3, [pc, #564]	; (8002958 <Hvac_ProcessCommand+0x59c>)
 8002724:	221f      	movs	r2, #31
 8002726:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002728:	4b8c      	ldr	r3, [pc, #560]	; (800295c <Hvac_ProcessCommand+0x5a0>)
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_Recirculation = Hvac_Recirculation;
 800272e:	4b89      	ldr	r3, [pc, #548]	; (8002954 <Hvac_ProcessCommand+0x598>)
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	4b87      	ldr	r3, [pc, #540]	; (8002950 <Hvac_ProcessCommand+0x594>)
 8002734:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002736:	4b8a      	ldr	r3, [pc, #552]	; (8002960 <Hvac_ProcessCommand+0x5a4>)
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* do nothing */
		}
		if(prevHvac_NoRecirculation != Hvac_NoRecirculation)
 800273c:	4b89      	ldr	r3, [pc, #548]	; (8002964 <Hvac_ProcessCommand+0x5a8>)
 800273e:	781a      	ldrb	r2, [r3, #0]
 8002740:	4b89      	ldr	r3, [pc, #548]	; (8002968 <Hvac_ProcessCommand+0x5ac>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d023      	beq.n	8002790 <Hvac_ProcessCommand+0x3d4>
		{
			if(Btc_FanValue == 31 || Btc_FanValue == 0 || Hvac_FanValue == 0)
 8002748:	4b83      	ldr	r3, [pc, #524]	; (8002958 <Hvac_ProcessCommand+0x59c>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b1f      	cmp	r3, #31
 800274e:	d007      	beq.n	8002760 <Hvac_ProcessCommand+0x3a4>
 8002750:	4b81      	ldr	r3, [pc, #516]	; (8002958 <Hvac_ProcessCommand+0x59c>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <Hvac_ProcessCommand+0x3a4>
 8002758:	4b80      	ldr	r3, [pc, #512]	; (800295c <Hvac_ProcessCommand+0x5a0>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d105      	bne.n	800276c <Hvac_ProcessCommand+0x3b0>
			{
				Btc_FanValue = 31;
 8002760:	4b7d      	ldr	r3, [pc, #500]	; (8002958 <Hvac_ProcessCommand+0x59c>)
 8002762:	221f      	movs	r2, #31
 8002764:	701a      	strb	r2, [r3, #0]
				Hvac_FanValue = 1;
 8002766:	4b7d      	ldr	r3, [pc, #500]	; (800295c <Hvac_ProcessCommand+0x5a0>)
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			prevHvac_NoRecirculation = Hvac_NoRecirculation;
 800276c:	4b7e      	ldr	r3, [pc, #504]	; (8002968 <Hvac_ProcessCommand+0x5ac>)
 800276e:	781a      	ldrb	r2, [r3, #0]
 8002770:	4b7c      	ldr	r3, [pc, #496]	; (8002964 <Hvac_ProcessCommand+0x5a8>)
 8002772:	701a      	strb	r2, [r3, #0]
			Hvac_CurrentState = STD_HIGH;
 8002774:	4b7a      	ldr	r3, [pc, #488]	; (8002960 <Hvac_ProcessCommand+0x5a4>)
 8002776:	2201      	movs	r2, #1
 8002778:	701a      	strb	r2, [r3, #0]
 800277a:	e009      	b.n	8002790 <Hvac_ProcessCommand+0x3d4>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW)
 800277c:	4b7b      	ldr	r3, [pc, #492]	; (800296c <Hvac_ProcessCommand+0x5b0>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d105      	bne.n	8002790 <Hvac_ProcessCommand+0x3d4>
	{
		Hvac_CurrentState = STD_LOW;
 8002784:	4b76      	ldr	r3, [pc, #472]	; (8002960 <Hvac_ProcessCommand+0x5a4>)
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
		Hvac_IsCleared = STD_LOW;
 800278a:	4b79      	ldr	r3, [pc, #484]	; (8002970 <Hvac_ProcessCommand+0x5b4>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	sprintf(buffer_T, "%u", (unsigned int) Hvac_TemperatureValue);
 8002790:	4b78      	ldr	r3, [pc, #480]	; (8002974 <Hvac_ProcessCommand+0x5b8>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	4977      	ldr	r1, [pc, #476]	; (8002978 <Hvac_ProcessCommand+0x5bc>)
 800279a:	4618      	mov	r0, r3
 800279c:	f010 fb82 	bl	8012ea4 <siprintf>
	sprintf(buffer_F, "%u", (unsigned int) Hvac_FanValue);
 80027a0:	4b6e      	ldr	r3, [pc, #440]	; (800295c <Hvac_ProcessCommand+0x5a0>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	463b      	mov	r3, r7
 80027a8:	4973      	ldr	r1, [pc, #460]	; (8002978 <Hvac_ProcessCommand+0x5bc>)
 80027aa:	4618      	mov	r0, r3
 80027ac:	f010 fb7a 	bl	8012ea4 <siprintf>
	if(Hvac_CurrentState == STD_LOW && Hvac_IsCleared == STD_LOW)
 80027b0:	4b6b      	ldr	r3, [pc, #428]	; (8002960 <Hvac_ProcessCommand+0x5a4>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d109      	bne.n	80027cc <Hvac_ProcessCommand+0x410>
 80027b8:	4b6d      	ldr	r3, [pc, #436]	; (8002970 <Hvac_ProcessCommand+0x5b4>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d105      	bne.n	80027cc <Hvac_ProcessCommand+0x410>
	{
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_Clear();
 80027c0:	f001 f884 	bl	80038cc <I2cLcd_Clear>
		Hvac_IsCleared = STD_HIGH;
 80027c4:	4b6a      	ldr	r3, [pc, #424]	; (8002970 <Hvac_ProcessCommand+0x5b4>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	701a      	strb	r2, [r3, #0]
 80027ca:	e16b      	b.n	8002aa4 <Hvac_ProcessCommand+0x6e8>
	}
	else if(Hvac_CurrentState == STD_HIGH)
 80027cc:	4b64      	ldr	r3, [pc, #400]	; (8002960 <Hvac_ProcessCommand+0x5a4>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	f040 8167 	bne.w	8002aa4 <Hvac_ProcessCommand+0x6e8>
	{
		if(Hvac_MainCounter % 10 == 0)
 80027d6:	4b69      	ldr	r3, [pc, #420]	; (800297c <Hvac_ProcessCommand+0x5c0>)
 80027d8:	6819      	ldr	r1, [r3, #0]
 80027da:	4b69      	ldr	r3, [pc, #420]	; (8002980 <Hvac_ProcessCommand+0x5c4>)
 80027dc:	fba3 2301 	umull	r2, r3, r3, r1
 80027e0:	08da      	lsrs	r2, r3, #3
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	1aca      	subs	r2, r1, r3
 80027ec:	2a00      	cmp	r2, #0
 80027ee:	d101      	bne.n	80027f4 <Hvac_ProcessCommand+0x438>
		{
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_Clear();
 80027f0:	f001 f86c 	bl	80038cc <I2cLcd_Clear>
		}
		else
		{
			/* do nothing */
		}
		Hvac_IsCleared = STD_LOW;
 80027f4:	4b5e      	ldr	r3, [pc, #376]	; (8002970 <Hvac_ProcessCommand+0x5b4>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 0);
 80027fa:	2100      	movs	r1, #0
 80027fc:	2000      	movs	r0, #0
 80027fe:	f001 f846 	bl	800388e <I2cLcd_SetCursor>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("F=");
 8002802:	4860      	ldr	r0, [pc, #384]	; (8002984 <Hvac_ProcessCommand+0x5c8>)
 8002804:	f001 f82e 	bl	8003864 <I2cLcd_SendString>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 2);
 8002808:	2102      	movs	r1, #2
 800280a:	2000      	movs	r0, #0
 800280c:	f001 f83f 	bl	800388e <I2cLcd_SetCursor>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(buffer_F);
 8002810:	463b      	mov	r3, r7
 8002812:	4618      	mov	r0, r3
 8002814:	f001 f826 	bl	8003864 <I2cLcd_SendString>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 0);
 8002818:	2100      	movs	r1, #0
 800281a:	2001      	movs	r0, #1
 800281c:	f001 f837 	bl	800388e <I2cLcd_SetCursor>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("T=");
 8002820:	4859      	ldr	r0, [pc, #356]	; (8002988 <Hvac_ProcessCommand+0x5cc>)
 8002822:	f001 f81f 	bl	8003864 <I2cLcd_SendString>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 2);
 8002826:	2102      	movs	r1, #2
 8002828:	2001      	movs	r0, #1
 800282a:	f001 f830 	bl	800388e <I2cLcd_SetCursor>
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(buffer_T);
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	4618      	mov	r0, r3
 8002832:	f001 f817 	bl	8003864 <I2cLcd_SendString>
		if(Hvac_AutomaticMode == STD_HIGH)
 8002836:	4b55      	ldr	r3, [pc, #340]	; (800298c <Hvac_ProcessCommand+0x5d0>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d142      	bne.n	80028c4 <Hvac_ProcessCommand+0x508>
		{
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 12);
 800283e:	210c      	movs	r1, #12
 8002840:	2001      	movs	r0, #1
 8002842:	f001 f824 	bl	800388e <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("AUTO");
 8002846:	4852      	ldr	r0, [pc, #328]	; (8002990 <Hvac_ProcessCommand+0x5d4>)
 8002848:	f001 f80c 	bl	8003864 <I2cLcd_SendString>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 4);
 800284c:	2104      	movs	r1, #4
 800284e:	2000      	movs	r0, #0
 8002850:	f001 f81d 	bl	800388e <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 8002854:	484f      	ldr	r0, [pc, #316]	; (8002994 <Hvac_ProcessCommand+0x5d8>)
 8002856:	f001 f805 	bl	8003864 <I2cLcd_SendString>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 6);
 800285a:	2106      	movs	r1, #6
 800285c:	2000      	movs	r0, #0
 800285e:	f001 f816 	bl	800388e <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 8002862:	484c      	ldr	r0, [pc, #304]	; (8002994 <Hvac_ProcessCommand+0x5d8>)
 8002864:	f000 fffe 	bl	8003864 <I2cLcd_SendString>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 8);
 8002868:	2108      	movs	r1, #8
 800286a:	2000      	movs	r0, #0
 800286c:	f001 f80f 	bl	800388e <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 8002870:	4848      	ldr	r0, [pc, #288]	; (8002994 <Hvac_ProcessCommand+0x5d8>)
 8002872:	f000 fff7 	bl	8003864 <I2cLcd_SendString>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 10);
 8002876:	210a      	movs	r1, #10
 8002878:	2000      	movs	r0, #0
 800287a:	f001 f808 	bl	800388e <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("  ");
 800287e:	4846      	ldr	r0, [pc, #280]	; (8002998 <Hvac_ProcessCommand+0x5dc>)
 8002880:	f000 fff0 	bl	8003864 <I2cLcd_SendString>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 13);
 8002884:	210d      	movs	r1, #13
 8002886:	2000      	movs	r0, #0
 8002888:	f001 f801 	bl	800388e <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("   ");
 800288c:	4843      	ldr	r0, [pc, #268]	; (800299c <Hvac_ProcessCommand+0x5e0>)
 800288e:	f000 ffe9 	bl	8003864 <I2cLcd_SendString>
			if(sensorValueTs == STD_HIGH)
 8002892:	4b43      	ldr	r3, [pc, #268]	; (80029a0 <Hvac_ProcessCommand+0x5e4>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d107      	bne.n	80028aa <Hvac_ProcessCommand+0x4ee>
			{
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 9);
 800289a:	2109      	movs	r1, #9
 800289c:	2001      	movs	r0, #1
 800289e:	f000 fff6 	bl	800388e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("AC");
 80028a2:	4840      	ldr	r0, [pc, #256]	; (80029a4 <Hvac_ProcessCommand+0x5e8>)
 80028a4:	f000 ffde 	bl	8003864 <I2cLcd_SendString>
			{
				/* do nothing */
			}
		}
	}
}
 80028a8:	e0fc      	b.n	8002aa4 <Hvac_ProcessCommand+0x6e8>
			else if(sensorValueTs == STD_LOW)
 80028aa:	4b3d      	ldr	r3, [pc, #244]	; (80029a0 <Hvac_ProcessCommand+0x5e4>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f040 80f8 	bne.w	8002aa4 <Hvac_ProcessCommand+0x6e8>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 9);
 80028b4:	2109      	movs	r1, #9
 80028b6:	2001      	movs	r0, #1
 80028b8:	f000 ffe9 	bl	800388e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("  ");
 80028bc:	4836      	ldr	r0, [pc, #216]	; (8002998 <Hvac_ProcessCommand+0x5dc>)
 80028be:	f000 ffd1 	bl	8003864 <I2cLcd_SendString>
}
 80028c2:	e0ef      	b.n	8002aa4 <Hvac_ProcessCommand+0x6e8>
		else if(Hvac_AutomaticMode == STD_LOW)
 80028c4:	4b31      	ldr	r3, [pc, #196]	; (800298c <Hvac_ProcessCommand+0x5d0>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f040 80eb 	bne.w	8002aa4 <Hvac_ProcessCommand+0x6e8>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 12);
 80028ce:	210c      	movs	r1, #12
 80028d0:	2001      	movs	r0, #1
 80028d2:	f000 ffdc 	bl	800388e <I2cLcd_SetCursor>
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("    ");
 80028d6:	4834      	ldr	r0, [pc, #208]	; (80029a8 <Hvac_ProcessCommand+0x5ec>)
 80028d8:	f000 ffc4 	bl	8003864 <I2cLcd_SendString>
			if(Hvac_LegVent == STD_HIGH)
 80028dc:	4b33      	ldr	r3, [pc, #204]	; (80029ac <Hvac_ProcessCommand+0x5f0>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d107      	bne.n	80028f4 <Hvac_ProcessCommand+0x538>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 4);
 80028e4:	2104      	movs	r1, #4
 80028e6:	2000      	movs	r0, #0
 80028e8:	f000 ffd1 	bl	800388e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("L");
 80028ec:	4830      	ldr	r0, [pc, #192]	; (80029b0 <Hvac_ProcessCommand+0x5f4>)
 80028ee:	f000 ffb9 	bl	8003864 <I2cLcd_SendString>
 80028f2:	e00a      	b.n	800290a <Hvac_ProcessCommand+0x54e>
			else if(Hvac_LegVent == STD_LOW)
 80028f4:	4b2d      	ldr	r3, [pc, #180]	; (80029ac <Hvac_ProcessCommand+0x5f0>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d106      	bne.n	800290a <Hvac_ProcessCommand+0x54e>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 4);
 80028fc:	2104      	movs	r1, #4
 80028fe:	2000      	movs	r0, #0
 8002900:	f000 ffc5 	bl	800388e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 8002904:	4823      	ldr	r0, [pc, #140]	; (8002994 <Hvac_ProcessCommand+0x5d8>)
 8002906:	f000 ffad 	bl	8003864 <I2cLcd_SendString>
			if(Hvac_MidVent == STD_HIGH)
 800290a:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <Hvac_ProcessCommand+0x5f8>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d107      	bne.n	8002922 <Hvac_ProcessCommand+0x566>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 6);
 8002912:	2106      	movs	r1, #6
 8002914:	2000      	movs	r0, #0
 8002916:	f000 ffba 	bl	800388e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("M");
 800291a:	4827      	ldr	r0, [pc, #156]	; (80029b8 <Hvac_ProcessCommand+0x5fc>)
 800291c:	f000 ffa2 	bl	8003864 <I2cLcd_SendString>
 8002920:	e00a      	b.n	8002938 <Hvac_ProcessCommand+0x57c>
			else if(Hvac_MidVent == STD_LOW)
 8002922:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <Hvac_ProcessCommand+0x5f8>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d106      	bne.n	8002938 <Hvac_ProcessCommand+0x57c>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 6);
 800292a:	2106      	movs	r1, #6
 800292c:	2000      	movs	r0, #0
 800292e:	f000 ffae 	bl	800388e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 8002932:	4818      	ldr	r0, [pc, #96]	; (8002994 <Hvac_ProcessCommand+0x5d8>)
 8002934:	f000 ff96 	bl	8003864 <I2cLcd_SendString>
			if(Hvac_WindshieldVent == STD_HIGH)
 8002938:	4b20      	ldr	r3, [pc, #128]	; (80029bc <Hvac_ProcessCommand+0x600>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d141      	bne.n	80029c4 <Hvac_ProcessCommand+0x608>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 8);
 8002940:	2108      	movs	r1, #8
 8002942:	2000      	movs	r0, #0
 8002944:	f000 ffa3 	bl	800388e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("W");
 8002948:	481d      	ldr	r0, [pc, #116]	; (80029c0 <Hvac_ProcessCommand+0x604>)
 800294a:	f000 ff8b 	bl	8003864 <I2cLcd_SendString>
 800294e:	e044      	b.n	80029da <Hvac_ProcessCommand+0x61e>
 8002950:	20000124 	.word	0x20000124
 8002954:	2000011a 	.word	0x2000011a
 8002958:	200000a3 	.word	0x200000a3
 800295c:	20000112 	.word	0x20000112
 8002960:	20000111 	.word	0x20000111
 8002964:	20000125 	.word	0x20000125
 8002968:	2000011b 	.word	0x2000011b
 800296c:	200000ae 	.word	0x200000ae
 8002970:	2000011d 	.word	0x2000011d
 8002974:	20000113 	.word	0x20000113
 8002978:	080136b0 	.word	0x080136b0
 800297c:	2000010c 	.word	0x2000010c
 8002980:	cccccccd 	.word	0xcccccccd
 8002984:	080136b4 	.word	0x080136b4
 8002988:	080136b8 	.word	0x080136b8
 800298c:	2000011c 	.word	0x2000011c
 8002990:	080136bc 	.word	0x080136bc
 8002994:	080136c4 	.word	0x080136c4
 8002998:	080136c8 	.word	0x080136c8
 800299c:	080136cc 	.word	0x080136cc
 80029a0:	20000128 	.word	0x20000128
 80029a4:	080136d0 	.word	0x080136d0
 80029a8:	080136d4 	.word	0x080136d4
 80029ac:	20000114 	.word	0x20000114
 80029b0:	080136dc 	.word	0x080136dc
 80029b4:	20000115 	.word	0x20000115
 80029b8:	080136e0 	.word	0x080136e0
 80029bc:	20000116 	.word	0x20000116
 80029c0:	080136e4 	.word	0x080136e4
			else if(Hvac_WindshieldVent == STD_LOW)
 80029c4:	4b39      	ldr	r3, [pc, #228]	; (8002aac <Hvac_ProcessCommand+0x6f0>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d106      	bne.n	80029da <Hvac_ProcessCommand+0x61e>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 8);
 80029cc:	2108      	movs	r1, #8
 80029ce:	2000      	movs	r0, #0
 80029d0:	f000 ff5d 	bl	800388e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
 80029d4:	4836      	ldr	r0, [pc, #216]	; (8002ab0 <Hvac_ProcessCommand+0x6f4>)
 80029d6:	f000 ff45 	bl	8003864 <I2cLcd_SendString>
			if(Hvac_WindshieldDefrost == STD_HIGH)
 80029da:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <Hvac_ProcessCommand+0x6f8>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d107      	bne.n	80029f2 <Hvac_ProcessCommand+0x636>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 10);
 80029e2:	210a      	movs	r1, #10
 80029e4:	2000      	movs	r0, #0
 80029e6:	f000 ff52 	bl	800388e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("WD");
 80029ea:	4833      	ldr	r0, [pc, #204]	; (8002ab8 <Hvac_ProcessCommand+0x6fc>)
 80029ec:	f000 ff3a 	bl	8003864 <I2cLcd_SendString>
 80029f0:	e00a      	b.n	8002a08 <Hvac_ProcessCommand+0x64c>
			else if(Hvac_WindshieldDefrost == STD_LOW)
 80029f2:	4b30      	ldr	r3, [pc, #192]	; (8002ab4 <Hvac_ProcessCommand+0x6f8>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <Hvac_ProcessCommand+0x64c>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 10);
 80029fa:	210a      	movs	r1, #10
 80029fc:	2000      	movs	r0, #0
 80029fe:	f000 ff46 	bl	800388e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("  ");
 8002a02:	482e      	ldr	r0, [pc, #184]	; (8002abc <Hvac_ProcessCommand+0x700>)
 8002a04:	f000 ff2e 	bl	8003864 <I2cLcd_SendString>
			if(Hvac_RearWindshieldDefrost == STD_HIGH)
 8002a08:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <Hvac_ProcessCommand+0x704>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d107      	bne.n	8002a20 <Hvac_ProcessCommand+0x664>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 13);
 8002a10:	210d      	movs	r1, #13
 8002a12:	2000      	movs	r0, #0
 8002a14:	f000 ff3b 	bl	800388e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("RWD");
 8002a18:	482a      	ldr	r0, [pc, #168]	; (8002ac4 <Hvac_ProcessCommand+0x708>)
 8002a1a:	f000 ff23 	bl	8003864 <I2cLcd_SendString>
 8002a1e:	e00a      	b.n	8002a36 <Hvac_ProcessCommand+0x67a>
			else if(Hvac_RearWindshieldDefrost == STD_LOW)
 8002a20:	4b27      	ldr	r3, [pc, #156]	; (8002ac0 <Hvac_ProcessCommand+0x704>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d106      	bne.n	8002a36 <Hvac_ProcessCommand+0x67a>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 13);
 8002a28:	210d      	movs	r1, #13
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f000 ff2f 	bl	800388e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("   ");
 8002a30:	4825      	ldr	r0, [pc, #148]	; (8002ac8 <Hvac_ProcessCommand+0x70c>)
 8002a32:	f000 ff17 	bl	8003864 <I2cLcd_SendString>
			if(Hvac_Ac == STD_HIGH)
 8002a36:	4b25      	ldr	r3, [pc, #148]	; (8002acc <Hvac_ProcessCommand+0x710>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d107      	bne.n	8002a4e <Hvac_ProcessCommand+0x692>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 9);
 8002a3e:	2109      	movs	r1, #9
 8002a40:	2001      	movs	r0, #1
 8002a42:	f000 ff24 	bl	800388e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("AC");
 8002a46:	4822      	ldr	r0, [pc, #136]	; (8002ad0 <Hvac_ProcessCommand+0x714>)
 8002a48:	f000 ff0c 	bl	8003864 <I2cLcd_SendString>
 8002a4c:	e00a      	b.n	8002a64 <Hvac_ProcessCommand+0x6a8>
			else if(Hvac_Ac == STD_LOW)
 8002a4e:	4b1f      	ldr	r3, [pc, #124]	; (8002acc <Hvac_ProcessCommand+0x710>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d106      	bne.n	8002a64 <Hvac_ProcessCommand+0x6a8>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 9);
 8002a56:	2109      	movs	r1, #9
 8002a58:	2001      	movs	r0, #1
 8002a5a:	f000 ff18 	bl	800388e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("  ");
 8002a5e:	4817      	ldr	r0, [pc, #92]	; (8002abc <Hvac_ProcessCommand+0x700>)
 8002a60:	f000 ff00 	bl	8003864 <I2cLcd_SendString>
			if(Hvac_NoRecirculation == STD_HIGH && Hvac_Recirculation == STD_LOW)
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <Hvac_ProcessCommand+0x718>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d10b      	bne.n	8002a84 <Hvac_ProcessCommand+0x6c8>
 8002a6c:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <Hvac_ProcessCommand+0x71c>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d107      	bne.n	8002a84 <Hvac_ProcessCommand+0x6c8>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 5);
 8002a74:	2105      	movs	r1, #5
 8002a76:	2001      	movs	r0, #1
 8002a78:	f000 ff09 	bl	800388e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("   ");
 8002a7c:	4812      	ldr	r0, [pc, #72]	; (8002ac8 <Hvac_ProcessCommand+0x70c>)
 8002a7e:	f000 fef1 	bl	8003864 <I2cLcd_SendString>
 8002a82:	e00f      	b.n	8002aa4 <Hvac_ProcessCommand+0x6e8>
			else if(Hvac_NoRecirculation == STD_LOW && Hvac_Recirculation == STD_HIGH)
 8002a84:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <Hvac_ProcessCommand+0x718>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10b      	bne.n	8002aa4 <Hvac_ProcessCommand+0x6e8>
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <Hvac_ProcessCommand+0x71c>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d107      	bne.n	8002aa4 <Hvac_ProcessCommand+0x6e8>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 5);
 8002a94:	2105      	movs	r1, #5
 8002a96:	2001      	movs	r0, #1
 8002a98:	f000 fef9 	bl	800388e <I2cLcd_SetCursor>
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("(C)");
 8002a9c:	480f      	ldr	r0, [pc, #60]	; (8002adc <Hvac_ProcessCommand+0x720>)
 8002a9e:	f000 fee1 	bl	8003864 <I2cLcd_SendString>
}
 8002aa2:	e7ff      	b.n	8002aa4 <Hvac_ProcessCommand+0x6e8>
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000116 	.word	0x20000116
 8002ab0:	080136c4 	.word	0x080136c4
 8002ab4:	20000117 	.word	0x20000117
 8002ab8:	080136e8 	.word	0x080136e8
 8002abc:	080136c8 	.word	0x080136c8
 8002ac0:	20000118 	.word	0x20000118
 8002ac4:	080136ec 	.word	0x080136ec
 8002ac8:	080136cc 	.word	0x080136cc
 8002acc:	20000119 	.word	0x20000119
 8002ad0:	080136d0 	.word	0x080136d0
 8002ad4:	2000011b 	.word	0x2000011b
 8002ad8:	2000011a 	.word	0x2000011a
 8002adc:	080136f0 	.word	0x080136f0

08002ae0 <IntLights_RxBtcState>:
/***********************************************************************************
* Function: IntLights_RxBtcState										   		   *
* Description: Process command. 		   		   						           *
************************************************************************************/
VOID IntLights_RxBtcState()
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
	/* Process the state of the interior lights according to system state. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 8002ae4:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <IntLights_RxBtcState+0x4c>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d102      	bne.n	8002af2 <IntLights_RxBtcState+0x12>
	{
		IntLights_CurrentState = STD_HIGH;
 8002aec:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <IntLights_RxBtcState+0x50>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW && Rte_P_Btc_BtcPort_Btc_IntLights == STD_LOW)
 8002af2:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <IntLights_RxBtcState+0x4c>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <IntLights_RxBtcState+0x28>
 8002afa:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <IntLights_RxBtcState+0x54>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d102      	bne.n	8002b08 <IntLights_RxBtcState+0x28>
	{
		IntLights_CurrentState = STD_LOW;
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <IntLights_RxBtcState+0x50>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW && Rte_P_Btc_BtcPort_Btc_IntLights == STD_HIGH)
 8002b08:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <IntLights_RxBtcState+0x4c>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d106      	bne.n	8002b1e <IntLights_RxBtcState+0x3e>
 8002b10:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <IntLights_RxBtcState+0x54>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d102      	bne.n	8002b1e <IntLights_RxBtcState+0x3e>
	{
		IntLights_CurrentState = STD_HIGH;
 8002b18:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <IntLights_RxBtcState+0x50>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel3);
 8002b1e:	2108      	movs	r1, #8
 8002b20:	4805      	ldr	r0, [pc, #20]	; (8002b38 <IntLights_RxBtcState+0x58>)
 8002b22:	f00e fd0b 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	200000b0 	.word	0x200000b0
 8002b30:	20000129 	.word	0x20000129
 8002b34:	200000a2 	.word	0x200000a2
 8002b38:	200004d0 	.word	0x200004d0

08002b3c <IntLights_MainFunction>:
/***********************************************************************************
* Function: IntLights_MainFunction										           *
* Description: Interior lights main function for the application and state process.*
************************************************************************************/
VOID IntLights_MainFunction()
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
	IntLights_RxBtcState();
 8002b40:	f7ff ffce 	bl	8002ae0 <IntLights_RxBtcState>
}
 8002b44:	bf00      	nop
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <Pdc_MainFunction>:
/***********************************************************************************
* Function: Pdc_MainFunction													   *
* Description: Main function application. 		   			                       *
************************************************************************************/
VOID Pdc_MainFunction()
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
	if(Btc_ReverseLight == STD_HIGH)
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <Pdc_MainFunction+0x18>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d103      	bne.n	8002b5c <Pdc_MainFunction+0x14>
	{
		Pdc_Front_ProcessData();
 8002b54:	f000 f830 	bl	8002bb8 <Pdc_Front_ProcessData>
		Pdc_Rear_ProcessData();
 8002b58:	f000 f804 	bl	8002b64 <Pdc_Rear_ProcessData>
	}
	else
	{
		/* do nothing */
	}
}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	200000a1 	.word	0x200000a1

08002b64 <Pdc_Rear_ProcessData>:
/***********************************************************************************
* Function: Pdc_Rear_ProcessData												   *
* Description: Process distance data.		   			                           *
************************************************************************************/
VOID Pdc_Rear_ProcessData()
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
	/* Store the distance measured. */
	Pdc_Rear_Distance = Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour;
 8002b68:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <Pdc_Rear_ProcessData+0x40>)
 8002b6a:	781a      	ldrb	r2, [r3, #0]
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <Pdc_Rear_ProcessData+0x44>)
 8002b6e:	701a      	strb	r2, [r3, #0]
	/* Trigger the buzzer according to the distance measured. */
	if(Pdc_Rear_Distance <= PDC_MAX_DISTANCE)
 8002b70:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <Pdc_Rear_ProcessData+0x44>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b28      	cmp	r3, #40	; 0x28
 8002b76:	d801      	bhi.n	8002b7c <Pdc_Rear_ProcessData+0x18>
	{
		Pdc_Rear_TriggerBuzzer();
 8002b78:	f000 f848 	bl	8002c0c <Pdc_Rear_TriggerBuzzer>
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance >= PDC_MAX_DISTANCE)
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <Pdc_Rear_ProcessData+0x44>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b27      	cmp	r3, #39	; 0x27
 8002b82:	d90c      	bls.n	8002b9e <Pdc_Rear_ProcessData+0x3a>
	{
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN, STD_LOW);
 8002b84:	2200      	movs	r2, #0
 8002b86:	2120      	movs	r1, #32
 8002b88:	4808      	ldr	r0, [pc, #32]	; (8002bac <Pdc_Rear_ProcessData+0x48>)
 8002b8a:	f00e fe98 	bl	80118be <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcR_Buzzer_TimerHandle);
 8002b8e:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <Pdc_Rear_ProcessData+0x4c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f00e feb2 	bl	80118fc <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcR_DistanceRange = 0;
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <Pdc_Rear_ProcessData+0x50>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200008d5 	.word	0x200008d5
 8002ba8:	2000012a 	.word	0x2000012a
 8002bac:	40020400 	.word	0x40020400
 8002bb0:	200002fc 	.word	0x200002fc
 8002bb4:	2000012c 	.word	0x2000012c

08002bb8 <Pdc_Front_ProcessData>:
/***********************************************************************************
* Function: Pdc_Front_ProcessData												   *
* Description: Process distance data. 		   			                           *
************************************************************************************/
VOID Pdc_Front_ProcessData()
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
	/* Store the distance measured. */
	Pdc_Front_Distance = Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree;
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <Pdc_Front_ProcessData+0x40>)
 8002bbe:	781a      	ldrb	r2, [r3, #0]
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <Pdc_Front_ProcessData+0x44>)
 8002bc2:	701a      	strb	r2, [r3, #0]
	/* Trigger the buzzer according to the distance measured. */
	if(Pdc_Front_Distance <= PDC_MAX_DISTANCE)
 8002bc4:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <Pdc_Front_ProcessData+0x44>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b28      	cmp	r3, #40	; 0x28
 8002bca:	d801      	bhi.n	8002bd0 <Pdc_Front_ProcessData+0x18>
	{
		Pdc_Front_TriggerBuzzer();
 8002bcc:	f000 f896 	bl	8002cfc <Pdc_Front_TriggerBuzzer>
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance >= PDC_MAX_DISTANCE)
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <Pdc_Front_ProcessData+0x44>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b27      	cmp	r3, #39	; 0x27
 8002bd6:	d90d      	bls.n	8002bf4 <Pdc_Front_ProcessData+0x3c>
	{
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCF_BUZZER_PORT, PDCF_BUZZER_PIN, STD_LOW);
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bde:	4808      	ldr	r0, [pc, #32]	; (8002c00 <Pdc_Front_ProcessData+0x48>)
 8002be0:	f00e fe6d 	bl	80118be <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcF_Buzzer_TimerHandle);
 8002be4:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <Pdc_Front_ProcessData+0x4c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f00e fe87 	bl	80118fc <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcF_DistanceRange = 0;
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <Pdc_Front_ProcessData+0x50>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8002bf4:	bf00      	nop
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	200008c5 	.word	0x200008c5
 8002bfc:	2000012b 	.word	0x2000012b
 8002c00:	40020800 	.word	0x40020800
 8002c04:	20000300 	.word	0x20000300
 8002c08:	20000130 	.word	0x20000130

08002c0c <Pdc_Rear_TriggerBuzzer>:
/***********************************************************************************
* Function: Pdc_Rear_TriggerBuzzer												   *
* Description: Control buzzer.		   			                                   *
************************************************************************************/
VOID Pdc_Rear_TriggerBuzzer()
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
	if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcR_Buzzer_TimerHandle) == 0)
 8002c10:	4b37      	ldr	r3, [pc, #220]	; (8002cf0 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f00b fb72 	bl	800e2fe <osTimerIsRunning>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d139      	bne.n	8002c94 <Pdc_Rear_TriggerBuzzer+0x88>
	{
		switch(PdcR_DistanceRange)
 8002c20:	4b34      	ldr	r3, [pc, #208]	; (8002cf4 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	3b01      	subs	r3, #1
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d833      	bhi.n	8002c92 <Pdc_Rear_TriggerBuzzer+0x86>
 8002c2a:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <Pdc_Rear_TriggerBuzzer+0x24>)
 8002c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c30:	08002c41 	.word	0x08002c41
 8002c34:	08002c57 	.word	0x08002c57
 8002c38:	08002c6b 	.word	0x08002c6b
 8002c3c:	08002c7f 	.word	0x08002c7f
		{
			case 1:
				PdcR_DistanceRange = 0;
 8002c40:	4b2c      	ldr	r3, [pc, #176]	; (8002cf4 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_ONE);
 8002c46:	4b2a      	ldr	r3, [pc, #168]	; (8002cf0 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f00e fe47 	bl	80118e2 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002c54:	e01e      	b.n	8002c94 <Pdc_Rear_TriggerBuzzer+0x88>
			case 2:
				PdcR_DistanceRange = 0;
 8002c56:	4b27      	ldr	r3, [pc, #156]	; (8002cf4 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_TWO);
 8002c5c:	4b24      	ldr	r3, [pc, #144]	; (8002cf0 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	21fa      	movs	r1, #250	; 0xfa
 8002c62:	4618      	mov	r0, r3
 8002c64:	f00e fe3d 	bl	80118e2 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002c68:	e014      	b.n	8002c94 <Pdc_Rear_TriggerBuzzer+0x88>
			case 3:
				PdcR_DistanceRange = 0;
 8002c6a:	4b22      	ldr	r3, [pc, #136]	; (8002cf4 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_THREE);
 8002c70:	4b1f      	ldr	r3, [pc, #124]	; (8002cf0 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	217d      	movs	r1, #125	; 0x7d
 8002c76:	4618      	mov	r0, r3
 8002c78:	f00e fe33 	bl	80118e2 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002c7c:	e00a      	b.n	8002c94 <Pdc_Rear_TriggerBuzzer+0x88>
			case 4:
				PdcR_DistanceRange = 0;
 8002c7e:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_FOUR);
 8002c84:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	214b      	movs	r1, #75	; 0x4b
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f00e fe29 	bl	80118e2 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002c90:	e000      	b.n	8002c94 <Pdc_Rear_TriggerBuzzer+0x88>
			default:
				break;
 8002c92:	bf00      	nop
	else
	{
		/* do nothing */
	}
	/* Trigger the buzzer for each case and type of safety distance. */
	if(Pdc_Rear_Distance <= PDC_MAX_DISTANCE && Pdc_Rear_Distance >= PDC_FIRST_SAFE_DISTANCE)
 8002c94:	4b18      	ldr	r3, [pc, #96]	; (8002cf8 <Pdc_Rear_TriggerBuzzer+0xec>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b28      	cmp	r3, #40	; 0x28
 8002c9a:	d806      	bhi.n	8002caa <Pdc_Rear_TriggerBuzzer+0x9e>
 8002c9c:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <Pdc_Rear_TriggerBuzzer+0xec>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b1d      	cmp	r3, #29
 8002ca2:	d902      	bls.n	8002caa <Pdc_Rear_TriggerBuzzer+0x9e>
	{
		PdcR_DistanceRange = 1;
 8002ca4:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_FIRST_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_SECOND_SAFE_DISTANCE)
 8002caa:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <Pdc_Rear_TriggerBuzzer+0xec>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b1e      	cmp	r3, #30
 8002cb0:	d806      	bhi.n	8002cc0 <Pdc_Rear_TriggerBuzzer+0xb4>
 8002cb2:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <Pdc_Rear_TriggerBuzzer+0xec>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b13      	cmp	r3, #19
 8002cb8:	d902      	bls.n	8002cc0 <Pdc_Rear_TriggerBuzzer+0xb4>
	{
		PdcR_DistanceRange = 2;
 8002cba:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_SECOND_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_THIRD_SAFE_DISTANCE)
 8002cc0:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <Pdc_Rear_TriggerBuzzer+0xec>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b14      	cmp	r3, #20
 8002cc6:	d806      	bhi.n	8002cd6 <Pdc_Rear_TriggerBuzzer+0xca>
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <Pdc_Rear_TriggerBuzzer+0xec>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b09      	cmp	r3, #9
 8002cce:	d902      	bls.n	8002cd6 <Pdc_Rear_TriggerBuzzer+0xca>
	{
		PdcR_DistanceRange = 3;
 8002cd0:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_THIRD_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_FOURTH_SAFE_DISTANCE)
 8002cd6:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <Pdc_Rear_TriggerBuzzer+0xec>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b0a      	cmp	r3, #10
 8002cdc:	d806      	bhi.n	8002cec <Pdc_Rear_TriggerBuzzer+0xe0>
 8002cde:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <Pdc_Rear_TriggerBuzzer+0xec>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d902      	bls.n	8002cec <Pdc_Rear_TriggerBuzzer+0xe0>
	{
		PdcR_DistanceRange = 4;
 8002ce6:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8002ce8:	2204      	movs	r2, #4
 8002cea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8002cec:	bf00      	nop
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	200002fc 	.word	0x200002fc
 8002cf4:	2000012c 	.word	0x2000012c
 8002cf8:	2000012a 	.word	0x2000012a

08002cfc <Pdc_Front_TriggerBuzzer>:
/***********************************************************************************
* Function: Pdc_Front_TriggerBuzzer												   *
* Description: Control buzzer		   			   								   *
************************************************************************************/
VOID Pdc_Front_TriggerBuzzer()
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
	if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcF_Buzzer_TimerHandle) == 0)
 8002d00:	4b37      	ldr	r3, [pc, #220]	; (8002de0 <Pdc_Front_TriggerBuzzer+0xe4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f00b fafa 	bl	800e2fe <osTimerIsRunning>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d139      	bne.n	8002d84 <Pdc_Front_TriggerBuzzer+0x88>
	{
		switch(PdcF_DistanceRange)
 8002d10:	4b34      	ldr	r3, [pc, #208]	; (8002de4 <Pdc_Front_TriggerBuzzer+0xe8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d833      	bhi.n	8002d82 <Pdc_Front_TriggerBuzzer+0x86>
 8002d1a:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <Pdc_Front_TriggerBuzzer+0x24>)
 8002d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d20:	08002d31 	.word	0x08002d31
 8002d24:	08002d47 	.word	0x08002d47
 8002d28:	08002d5b 	.word	0x08002d5b
 8002d2c:	08002d6f 	.word	0x08002d6f
		{
			case 1:
				PdcF_DistanceRange = 0;
 8002d30:	4b2c      	ldr	r3, [pc, #176]	; (8002de4 <Pdc_Front_TriggerBuzzer+0xe8>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_ONE);
 8002d36:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <Pdc_Front_TriggerBuzzer+0xe4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f00e fdcf 	bl	80118e2 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002d44:	e01e      	b.n	8002d84 <Pdc_Front_TriggerBuzzer+0x88>
			case 2:
				PdcF_DistanceRange = 0;
 8002d46:	4b27      	ldr	r3, [pc, #156]	; (8002de4 <Pdc_Front_TriggerBuzzer+0xe8>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_TWO);
 8002d4c:	4b24      	ldr	r3, [pc, #144]	; (8002de0 <Pdc_Front_TriggerBuzzer+0xe4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	21fa      	movs	r1, #250	; 0xfa
 8002d52:	4618      	mov	r0, r3
 8002d54:	f00e fdc5 	bl	80118e2 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002d58:	e014      	b.n	8002d84 <Pdc_Front_TriggerBuzzer+0x88>
			case 3:
				PdcF_DistanceRange = 0;
 8002d5a:	4b22      	ldr	r3, [pc, #136]	; (8002de4 <Pdc_Front_TriggerBuzzer+0xe8>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_THREE);
 8002d60:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <Pdc_Front_TriggerBuzzer+0xe4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	217d      	movs	r1, #125	; 0x7d
 8002d66:	4618      	mov	r0, r3
 8002d68:	f00e fdbb 	bl	80118e2 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002d6c:	e00a      	b.n	8002d84 <Pdc_Front_TriggerBuzzer+0x88>
			case 4:
				PdcF_DistanceRange = 0;
 8002d6e:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <Pdc_Front_TriggerBuzzer+0xe8>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_FOUR);
 8002d74:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <Pdc_Front_TriggerBuzzer+0xe4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	214b      	movs	r1, #75	; 0x4b
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f00e fdb1 	bl	80118e2 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002d80:	e000      	b.n	8002d84 <Pdc_Front_TriggerBuzzer+0x88>
			default:
				break;
 8002d82:	bf00      	nop
	else
	{
		/* do nothing */
	}
	/* Trigger the buzzer for each case and type of safety distance. */
	if(Pdc_Front_Distance <= PDC_MAX_DISTANCE && Pdc_Front_Distance >= PDC_FIRST_SAFE_DISTANCE)
 8002d84:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <Pdc_Front_TriggerBuzzer+0xec>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b28      	cmp	r3, #40	; 0x28
 8002d8a:	d806      	bhi.n	8002d9a <Pdc_Front_TriggerBuzzer+0x9e>
 8002d8c:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <Pdc_Front_TriggerBuzzer+0xec>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b1d      	cmp	r3, #29
 8002d92:	d902      	bls.n	8002d9a <Pdc_Front_TriggerBuzzer+0x9e>
	{
		PdcF_DistanceRange = 1;
 8002d94:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <Pdc_Front_TriggerBuzzer+0xe8>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_FIRST_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_SECOND_SAFE_DISTANCE)
 8002d9a:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <Pdc_Front_TriggerBuzzer+0xec>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b1e      	cmp	r3, #30
 8002da0:	d806      	bhi.n	8002db0 <Pdc_Front_TriggerBuzzer+0xb4>
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <Pdc_Front_TriggerBuzzer+0xec>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b13      	cmp	r3, #19
 8002da8:	d902      	bls.n	8002db0 <Pdc_Front_TriggerBuzzer+0xb4>
	{
		PdcF_DistanceRange = 2;
 8002daa:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <Pdc_Front_TriggerBuzzer+0xe8>)
 8002dac:	2202      	movs	r2, #2
 8002dae:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_SECOND_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_THIRD_SAFE_DISTANCE)
 8002db0:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <Pdc_Front_TriggerBuzzer+0xec>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b14      	cmp	r3, #20
 8002db6:	d806      	bhi.n	8002dc6 <Pdc_Front_TriggerBuzzer+0xca>
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <Pdc_Front_TriggerBuzzer+0xec>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b09      	cmp	r3, #9
 8002dbe:	d902      	bls.n	8002dc6 <Pdc_Front_TriggerBuzzer+0xca>
	{
		PdcF_DistanceRange = 3;
 8002dc0:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <Pdc_Front_TriggerBuzzer+0xe8>)
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_THIRD_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_FOURTH_SAFE_DISTANCE)
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <Pdc_Front_TriggerBuzzer+0xec>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b0a      	cmp	r3, #10
 8002dcc:	d806      	bhi.n	8002ddc <Pdc_Front_TriggerBuzzer+0xe0>
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <Pdc_Front_TriggerBuzzer+0xec>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d902      	bls.n	8002ddc <Pdc_Front_TriggerBuzzer+0xe0>
	{
		PdcF_DistanceRange = 4;
 8002dd6:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <Pdc_Front_TriggerBuzzer+0xe8>)
 8002dd8:	2204      	movs	r2, #4
 8002dda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8002ddc:	bf00      	nop
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20000300 	.word	0x20000300
 8002de4:	20000130 	.word	0x20000130
 8002de8:	2000012b 	.word	0x2000012b

08002dec <SecAlm_LightsBuzzerControl>:
/***********************************************************************************
* Function: SecAlm_LightsBuzzerControl										       *
* Description: Controls the lights and buzzer in case of alarm trigger. 		   *
************************************************************************************/
VOID SecAlm_LightsBuzzerControl()
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
	/* Local variable for sensor status. */
	uint32 sensorStatus = STD_LOW;
 8002df2:	2300      	movs	r3, #0
 8002df4:	607b      	str	r3, [r7, #4]
	/* Get the sensor status. */
	sensorStatus = SecAlm_VibSenStatus();
 8002df6:	f000 f893 	bl	8002f20 <SecAlm_VibSenStatus>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	607b      	str	r3, [r7, #4]
	/* If the trigger was previously on and now it is off. */
	if(SecAlm_TriggerPreviousState != SecAlm_Trigger && !SecAlm_Trigger)
 8002dfe:	4b3f      	ldr	r3, [pc, #252]	; (8002efc <SecAlm_LightsBuzzerControl+0x110>)
 8002e00:	781a      	ldrb	r2, [r3, #0]
 8002e02:	4b3f      	ldr	r3, [pc, #252]	; (8002f00 <SecAlm_LightsBuzzerControl+0x114>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d006      	beq.n	8002e18 <SecAlm_LightsBuzzerControl+0x2c>
 8002e0a:	4b3d      	ldr	r3, [pc, #244]	; (8002f00 <SecAlm_LightsBuzzerControl+0x114>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d102      	bne.n	8002e18 <SecAlm_LightsBuzzerControl+0x2c>
	{
		/* Reset the counter. */
		SecAlm_TriggerIRQCounterForTimer4 = STD_LOW;
 8002e12:	4b3c      	ldr	r3, [pc, #240]	; (8002f04 <SecAlm_LightsBuzzerControl+0x118>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the counter exceeded the maximum value, reset the variables. */
	if(SecAlm_TriggerIRQCounterForTimer4 >= 20)
 8002e18:	4b3a      	ldr	r3, [pc, #232]	; (8002f04 <SecAlm_LightsBuzzerControl+0x118>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b13      	cmp	r3, #19
 8002e1e:	d922      	bls.n	8002e66 <SecAlm_LightsBuzzerControl+0x7a>
	{
		SecAlm_TriggerPreviousState 						= SecAlm_Trigger;
 8002e20:	4b37      	ldr	r3, [pc, #220]	; (8002f00 <SecAlm_LightsBuzzerControl+0x114>)
 8002e22:	781a      	ldrb	r2, [r3, #0]
 8002e24:	4b35      	ldr	r3, [pc, #212]	; (8002efc <SecAlm_LightsBuzzerControl+0x110>)
 8002e26:	701a      	strb	r2, [r3, #0]
		Rte_P_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter	= STD_HIGH;
 8002e28:	4b37      	ldr	r3, [pc, #220]	; (8002f08 <SecAlm_LightsBuzzerControl+0x11c>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]
		Rte_P_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter 	= STD_LOW;
 8002e2e:	4b37      	ldr	r3, [pc, #220]	; (8002f0c <SecAlm_LightsBuzzerControl+0x120>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
		SecAlm_Trigger 										= STD_LOW;
 8002e34:	4b32      	ldr	r3, [pc, #200]	; (8002f00 <SecAlm_LightsBuzzerControl+0x114>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange 								= STD_LOW;
 8002e3a:	4b35      	ldr	r3, [pc, #212]	; (8002f10 <SecAlm_LightsBuzzerControl+0x124>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
		SecAlm_TriggerIRQCounterForTimer4 					= STD_LOW;
 8002e40:	4b30      	ldr	r3, [pc, #192]	; (8002f04 <SecAlm_LightsBuzzerControl+0x118>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]
		SecAlm_SensorStatusCounter 							= STD_LOW;
 8002e46:	4b33      	ldr	r3, [pc, #204]	; (8002f14 <SecAlm_LightsBuzzerControl+0x128>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatus 								= STD_LOW;
 8002e4c:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <SecAlm_LightsBuzzerControl+0x12c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatusCounter 							= STD_LOW;
 8002e52:	4b30      	ldr	r3, [pc, #192]	; (8002f14 <SecAlm_LightsBuzzerControl+0x128>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	801a      	strh	r2, [r3, #0]
		/* Stop the os timer assigned to security alarm trigger. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmAlarm_TimerHandle);
 8002e58:	4b30      	ldr	r3, [pc, #192]	; (8002f1c <SecAlm_LightsBuzzerControl+0x130>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f00e fd4d 	bl	80118fc <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		/* Turn off the lights to make sure their state is off before any other action. */
		SecAlm_TurnOnExtLights();
 8002e62:	f000 f891 	bl	8002f88 <SecAlm_TurnOnExtLights>
		/* do nothing */
	}
	/* The counter resets every 10 seconds, if a reset of the timer
	 * occurs, then reset the variables related to the security
	 * alarm trigger. */
	if(SecAlm_SensorStatusCounter == STD_LOW)
 8002e66:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <SecAlm_LightsBuzzerControl+0x128>)
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d107      	bne.n	8002e7e <SecAlm_LightsBuzzerControl+0x92>
	{
		sensorStatus 	= STD_LOW;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	607b      	str	r3, [r7, #4]
		SecAlm_Trigger 	= STD_LOW;
 8002e72:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <SecAlm_LightsBuzzerControl+0x114>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange = STD_LOW;
 8002e78:	4b25      	ldr	r3, [pc, #148]	; (8002f10 <SecAlm_LightsBuzzerControl+0x124>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the sensor status is high, trigger the alarm. */
	if(sensorStatus == STD_HIGH)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d102      	bne.n	8002e8a <SecAlm_LightsBuzzerControl+0x9e>
	{
		SecAlm_Trigger = STD_HIGH;
 8002e84:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <SecAlm_LightsBuzzerControl+0x114>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the trigger is set to high, perform alarm triggering. */
	if(SecAlm_Trigger == STD_HIGH)
 8002e8a:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <SecAlm_LightsBuzzerControl+0x114>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d128      	bne.n	8002ee4 <SecAlm_LightsBuzzerControl+0xf8>
	{
		/* One alarm cycle is performed consisting of 10 seconds. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmAlarm_TimerHandle) == 0)
 8002e92:	4b22      	ldr	r3, [pc, #136]	; (8002f1c <SecAlm_LightsBuzzerControl+0x130>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f00b fa31 	bl	800e2fe <osTimerIsRunning>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <SecAlm_LightsBuzzerControl+0xc4>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmAlarm_TimerHandle, 500);
 8002ea2:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <SecAlm_LightsBuzzerControl+0x130>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f00e fd19 	bl	80118e2 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Cycle between on and off states of buzzer and lights. */
		if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 1)
 8002eb0:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <SecAlm_LightsBuzzerControl+0x118>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <SecAlm_LightsBuzzerControl+0xde>
		{
			SecAlm_PinStateChange = STD_HIGH;
 8002ebe:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <SecAlm_LightsBuzzerControl+0x124>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 8002ec4:	f000 f860 	bl	8002f88 <SecAlm_TurnOnExtLights>
	}
	else
	{
		/* do nothing */
	}
}
 8002ec8:	e013      	b.n	8002ef2 <SecAlm_LightsBuzzerControl+0x106>
		else if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 0)
 8002eca:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <SecAlm_LightsBuzzerControl+0x118>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10c      	bne.n	8002ef2 <SecAlm_LightsBuzzerControl+0x106>
			SecAlm_PinStateChange = STD_LOW;
 8002ed8:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <SecAlm_LightsBuzzerControl+0x124>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 8002ede:	f000 f853 	bl	8002f88 <SecAlm_TurnOnExtLights>
}
 8002ee2:	e006      	b.n	8002ef2 <SecAlm_LightsBuzzerControl+0x106>
	else if(SecAlm_Trigger == STD_LOW)
 8002ee4:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <SecAlm_LightsBuzzerControl+0x114>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d102      	bne.n	8002ef2 <SecAlm_LightsBuzzerControl+0x106>
		SecAlm_ToggleAlarmBuzzer(STD_LOW);
 8002eec:	2000      	movs	r0, #0
 8002eee:	f000 f8c7 	bl	8003080 <SecAlm_ToggleAlarmBuzzer>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	2000013d 	.word	0x2000013d
 8002f00:	20000134 	.word	0x20000134
 8002f04:	20000136 	.word	0x20000136
 8002f08:	200000b3 	.word	0x200000b3
 8002f0c:	200000b5 	.word	0x200000b5
 8002f10:	20000135 	.word	0x20000135
 8002f14:	20000138 	.word	0x20000138
 8002f18:	2000013a 	.word	0x2000013a
 8002f1c:	200002f8 	.word	0x200002f8

08002f20 <SecAlm_VibSenStatus>:
/***********************************************************************************
* Function: SecAlm_VibSenStatus										               *
* Description: Updates the vibration sensor status based on measurements.		   *
************************************************************************************/
StdReturnType SecAlm_VibSenStatus()
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
	/* Local variable for sensor status. */
	uint16 sensorStatus = STD_LOW;
 8002f26:	2300      	movs	r3, #0
 8002f28:	80fb      	strh	r3, [r7, #6]
	/* Read the sensor value. */
	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(SECALM_VS_REQUEST);
 8002f2a:	2002      	movs	r0, #2
 8002f2c:	f000 f8cc 	bl	80030c8 <SenCtrl_ProcessSensorValue>
	/* If the sensor was triggered. */
	if(SecAlm_SensorState == STD_HIGH)
 8002f30:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <SecAlm_VibSenStatus+0x5c>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d10c      	bne.n	8002f52 <SecAlm_VibSenStatus+0x32>
	{
		/* Count for how long it has been triggered. */
		SecAlm_SensorStatusCounter = SecAlm_SensorStatusCounter + 1;
 8002f38:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <SecAlm_VibSenStatus+0x60>)
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <SecAlm_VibSenStatus+0x60>)
 8002f42:	801a      	strh	r2, [r3, #0]
		/* Start the reset timer for the counter variable. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlm_AlarmResetHandle, 10000);
 8002f44:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <SecAlm_VibSenStatus+0x64>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f242 7110 	movw	r1, #10000	; 0x2710
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f00e fcc8 	bl	80118e2 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
	else
	{
		/* do nothing */
	}
	/* If the sensor was triggered enough times. */
	if(SecAlm_SensorStatusCounter >= 1000)
 8002f52:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <SecAlm_VibSenStatus+0x60>)
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f5a:	d302      	bcc.n	8002f62 <SecAlm_VibSenStatus+0x42>
	{
		/* Set the sensor status to high. */
		sensorStatus = STD_HIGH;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	80fb      	strh	r3, [r7, #6]
 8002f60:	e006      	b.n	8002f70 <SecAlm_VibSenStatus+0x50>
	}
	else if(SecAlm_SensorStatusCounter < 1000)
 8002f62:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <SecAlm_VibSenStatus+0x60>)
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f6a:	d201      	bcs.n	8002f70 <SecAlm_VibSenStatus+0x50>
	{
		/* Set the sensor status to low. */
		sensorStatus = STD_LOW;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	80fb      	strh	r3, [r7, #6]
	else
	{
		/* do nothing */
	}
	/* Return sensor status. */
	return sensorStatus;
 8002f70:	88fb      	ldrh	r3, [r7, #6]
 8002f72:	b2db      	uxtb	r3, r3
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	2000013c 	.word	0x2000013c
 8002f80:	20000138 	.word	0x20000138
 8002f84:	200002e0 	.word	0x200002e0

08002f88 <SecAlm_TurnOnExtLights>:
/***********************************************************************************
* Function: SecAlm_TurnOnExtLights										           *
* Description: Trigger the exterior lights and buzzer.							   *
************************************************************************************/
VOID SecAlm_TurnOnExtLights()
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
	/* Turn on the lights and the buzzer. */
	if(SecAlm_PinStateChange == STD_HIGH)
 8002f8c:	4b1f      	ldr	r3, [pc, #124]	; (800300c <SecAlm_TurnOnExtLights+0x84>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d118      	bne.n	8002fc6 <SecAlm_TurnOnExtLights+0x3e>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8002f94:	2100      	movs	r1, #0
 8002f96:	481e      	ldr	r0, [pc, #120]	; (8003010 <SecAlm_TurnOnExtLights+0x88>)
 8002f98:	f00e fad0 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002f9c:	2104      	movs	r1, #4
 8002f9e:	481c      	ldr	r0, [pc, #112]	; (8003010 <SecAlm_TurnOnExtLights+0x88>)
 8002fa0:	f00e facc 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 8002fa4:	2108      	movs	r1, #8
 8002fa6:	481b      	ldr	r0, [pc, #108]	; (8003014 <SecAlm_TurnOnExtLights+0x8c>)
 8002fa8:	f00e fac8 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 8002fac:	210c      	movs	r1, #12
 8002fae:	4819      	ldr	r0, [pc, #100]	; (8003014 <SecAlm_TurnOnExtLights+0x8c>)
 8002fb0:	f00e fac4 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8002fb4:	2108      	movs	r1, #8
 8002fb6:	4818      	ldr	r0, [pc, #96]	; (8003018 <SecAlm_TurnOnExtLights+0x90>)
 8002fb8:	f00e fac0 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8002fbc:	210c      	movs	r1, #12
 8002fbe:	4816      	ldr	r0, [pc, #88]	; (8003018 <SecAlm_TurnOnExtLights+0x90>)
 8002fc0:	f00e fabc 	bl	801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8002fc4:	e01b      	b.n	8002ffe <SecAlm_TurnOnExtLights+0x76>
	}
	else if(SecAlm_PinStateChange == STD_LOW)
 8002fc6:	4b11      	ldr	r3, [pc, #68]	; (800300c <SecAlm_TurnOnExtLights+0x84>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d117      	bne.n	8002ffe <SecAlm_TurnOnExtLights+0x76>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8002fce:	2100      	movs	r1, #0
 8002fd0:	480f      	ldr	r0, [pc, #60]	; (8003010 <SecAlm_TurnOnExtLights+0x88>)
 8002fd2:	f00e fac0 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002fd6:	2104      	movs	r1, #4
 8002fd8:	480d      	ldr	r0, [pc, #52]	; (8003010 <SecAlm_TurnOnExtLights+0x88>)
 8002fda:	f00e fabc 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 8002fde:	2108      	movs	r1, #8
 8002fe0:	480c      	ldr	r0, [pc, #48]	; (8003014 <SecAlm_TurnOnExtLights+0x8c>)
 8002fe2:	f00e fab8 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 8002fe6:	210c      	movs	r1, #12
 8002fe8:	480a      	ldr	r0, [pc, #40]	; (8003014 <SecAlm_TurnOnExtLights+0x8c>)
 8002fea:	f00e fab4 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8002fee:	2108      	movs	r1, #8
 8002ff0:	4809      	ldr	r0, [pc, #36]	; (8003018 <SecAlm_TurnOnExtLights+0x90>)
 8002ff2:	f00e fab0 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8002ff6:	210c      	movs	r1, #12
 8002ff8:	4807      	ldr	r0, [pc, #28]	; (8003018 <SecAlm_TurnOnExtLights+0x90>)
 8002ffa:	f00e faac 	bl	8011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	}
	SecAlm_ToggleAlarmBuzzer(SecAlm_PinStateChange);
 8002ffe:	4b03      	ldr	r3, [pc, #12]	; (800300c <SecAlm_TurnOnExtLights+0x84>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f000 f83c 	bl	8003080 <SecAlm_ToggleAlarmBuzzer>
}
 8003008:	bf00      	nop
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20000135 	.word	0x20000135
 8003010:	200004d0 	.word	0x200004d0
 8003014:	20000584 	.word	0x20000584
 8003018:	20000638 	.word	0x20000638

0800301c <SecAlm_MainFunction>:
/***********************************************************************************
* Function: SecAlm_MainFunction										           	   *
* Description: Process application states.										   *
************************************************************************************/
VOID SecAlm_MainFunction()
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
	SecAlm_LightsBuzzerControl();
 8003020:	f7ff fee4 	bl	8002dec <SecAlm_LightsBuzzerControl>
}
 8003024:	bf00      	nop
 8003026:	bd80      	pop	{r7, pc}

08003028 <SecAlm_Init>:
/***********************************************************************************
* Function: SecAlm_Init										                       *
* Description: Initialize the application.										   *
************************************************************************************/
StdReturnType SecAlm_Init()
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
	/* Set the variables to 0. */
	SecAlm_Trigger 						= STD_LOW;
 800302c:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <SecAlm_Init+0x3c>)
 800302e:	2200      	movs	r2, #0
 8003030:	701a      	strb	r2, [r3, #0]
	SecAlm_PinStateChange 				= STD_LOW;
 8003032:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <SecAlm_Init+0x40>)
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
	SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <SecAlm_Init+0x44>)
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
	SecAlm_SensorStatusCounter 			= STD_LOW;
 800303e:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <SecAlm_Init+0x48>)
 8003040:	2200      	movs	r2, #0
 8003042:	801a      	strh	r2, [r3, #0]
	SecAlm_SensorStatus					= STD_LOW;
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <SecAlm_Init+0x4c>)
 8003046:	2200      	movs	r2, #0
 8003048:	801a      	strh	r2, [r3, #0]
	SecAlm_SensorState 					= STD_LOW;
 800304a:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <SecAlm_Init+0x50>)
 800304c:	2200      	movs	r2, #0
 800304e:	701a      	strb	r2, [r3, #0]
	SecAlm_TriggerPreviousState 		= STD_LOW;
 8003050:	4b0a      	ldr	r3, [pc, #40]	; (800307c <SecAlm_Init+0x54>)
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
	Rte_Write_Os_R_OsPort_Os_Alarm_Counter(&SecAlm_TriggerIRQCounterForTimer4);
 8003056:	4805      	ldr	r0, [pc, #20]	; (800306c <SecAlm_Init+0x44>)
 8003058:	f00e fa36 	bl	80114c8 <Rte_Write_Os_R_OsPort_Os_Alarm_Counter>
	return E_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000134 	.word	0x20000134
 8003068:	20000135 	.word	0x20000135
 800306c:	20000136 	.word	0x20000136
 8003070:	20000138 	.word	0x20000138
 8003074:	2000013a 	.word	0x2000013a
 8003078:	2000013c 	.word	0x2000013c
 800307c:	2000013d 	.word	0x2000013d

08003080 <SecAlm_ToggleAlarmBuzzer>:
/***********************************************************************************
* Function: SecAlm_ToggleAlarmBuzzer										       *
* Description: Alarm buzzer trigger.                                               *
************************************************************************************/
VOID SecAlm_ToggleAlarmBuzzer(uint8 PinState)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	461a      	mov	r2, r3
 800308e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003092:	4803      	ldr	r0, [pc, #12]	; (80030a0 <SecAlm_ToggleAlarmBuzzer+0x20>)
 8003094:	f00e fc13 	bl	80118be <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40020400 	.word	0x40020400

080030a4 <SecAlm_ToggleAlarmLed>:
/***********************************************************************************
* Function: SecAlm_ToggleAlarmLed										           *
* Description: Alarm LED trigger.												   *
************************************************************************************/
VOID SecAlm_ToggleAlarmLed(uint8 PinState)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	461a      	mov	r2, r3
 80030b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030b6:	4803      	ldr	r0, [pc, #12]	; (80030c4 <SecAlm_ToggleAlarmLed+0x20>)
 80030b8:	f00e fc01 	bl	80118be <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40020400 	.word	0x40020400

080030c8 <SenCtrl_ProcessSensorValue>:
/***********************************************************************************
* Function: SenCtrl_ProcessSensorValue									   	       *
* Description: Process the request for the sensor value. 	                       *
************************************************************************************/
VOID SenCtrl_ProcessSensorValue(uint8 request)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	71fb      	strb	r3, [r7, #7]
	/* Store request into local variable. */
	uint8 localRequest = request;
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	77fb      	strb	r3, [r7, #31]
	/* Process sensor request. */
	switch(localRequest)
 80030d6:	7ffb      	ldrb	r3, [r7, #31]
 80030d8:	2b0d      	cmp	r3, #13
 80030da:	f200 80c0 	bhi.w	800325e <SenCtrl_ProcessSensorValue+0x196>
 80030de:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <SenCtrl_ProcessSensorValue+0x1c>)
 80030e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e4:	0800311d 	.word	0x0800311d
 80030e8:	0800325f 	.word	0x0800325f
 80030ec:	08003153 	.word	0x08003153
 80030f0:	0800318b 	.word	0x0800318b
 80030f4:	080031bf 	.word	0x080031bf
 80030f8:	080031cf 	.word	0x080031cf
 80030fc:	080031df 	.word	0x080031df
 8003100:	080031ef 	.word	0x080031ef
 8003104:	080031ff 	.word	0x080031ff
 8003108:	0800320f 	.word	0x0800320f
 800310c:	0800321f 	.word	0x0800321f
 8003110:	0800322f 	.word	0x0800322f
 8003114:	0800323f 	.word	0x0800323f
 8003118:	0800324f 	.word	0x0800324f
	{
		case SENCTRL_EXTLIGHTS_LS_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_EXTLIGHTS_LS_POSITION] >= 4000)
 800311c:	4b5f      	ldr	r3, [pc, #380]	; (800329c <SenCtrl_ProcessSensorValue+0x1d4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003124:	d307      	bcc.n	8003136 <SenCtrl_ProcessSensorValue+0x6e>
			{
				uint32 localls = 1;
 8003126:	2301      	movs	r3, #1
 8003128:	61bb      	str	r3, [r7, #24]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(&localls);
 800312a:	f107 0318 	add.w	r3, r7, #24
 800312e:	4618      	mov	r0, r3
 8003130:	f00e f8cc 	bl	80112cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>
			}
			else
			{
				/* do nothing */
			}
			break;
 8003134:	e095      	b.n	8003262 <SenCtrl_ProcessSensorValue+0x19a>
			else if(SenCtrl_MeasuredValues[SENCTRL_EXTLIGHTS_LS_POSITION] < 4000)
 8003136:	4b59      	ldr	r3, [pc, #356]	; (800329c <SenCtrl_ProcessSensorValue+0x1d4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800313e:	f080 8090 	bcs.w	8003262 <SenCtrl_ProcessSensorValue+0x19a>
				uint32 localls = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(&localls);
 8003146:	f107 0314 	add.w	r3, r7, #20
 800314a:	4618      	mov	r0, r3
 800314c:	f00e f8be 	bl	80112cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>
			break;
 8003150:	e087      	b.n	8003262 <SenCtrl_ProcessSensorValue+0x19a>
		case SENCTRL_SECALM_VS_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_SECALM_VS_REQUEST] == 4095)
 8003152:	4b52      	ldr	r3, [pc, #328]	; (800329c <SenCtrl_ProcessSensorValue+0x1d4>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f640 72ff 	movw	r2, #4095	; 0xfff
 800315a:	4293      	cmp	r3, r2
 800315c:	d107      	bne.n	800316e <SenCtrl_ProcessSensorValue+0xa6>
			{
				uint32 localvs = STD_HIGH;
 800315e:	2301      	movs	r3, #1
 8003160:	613b      	str	r3, [r7, #16]
				Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(&localvs);
 8003162:	f107 0310 	add.w	r3, r7, #16
 8003166:	4618      	mov	r0, r3
 8003168:	f00e f89e 	bl	80112a8 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>
			}
			else
			{
				/* do nothing */
			}
			break;
 800316c:	e07b      	b.n	8003266 <SenCtrl_ProcessSensorValue+0x19e>
			else if(SenCtrl_MeasuredValues[SENCTRL_SECALM_VS_REQUEST] < 4095)
 800316e:	4b4b      	ldr	r3, [pc, #300]	; (800329c <SenCtrl_ProcessSensorValue+0x1d4>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003176:	4293      	cmp	r3, r2
 8003178:	d875      	bhi.n	8003266 <SenCtrl_ProcessSensorValue+0x19e>
				uint32 localvs = STD_LOW;
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
				Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(&localvs);
 800317e:	f107 030c 	add.w	r3, r7, #12
 8003182:	4618      	mov	r0, r3
 8003184:	f00e f890 	bl	80112a8 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>
			break;
 8003188:	e06d      	b.n	8003266 <SenCtrl_ProcessSensorValue+0x19e>
		case SENCTRL_HVAC_TS_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_HVAC_TS_POSITION] >= 4000)
 800318a:	4b44      	ldr	r3, [pc, #272]	; (800329c <SenCtrl_ProcessSensorValue+0x1d4>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003192:	d307      	bcc.n	80031a4 <SenCtrl_ProcessSensorValue+0xdc>
			{
				uint8 localts = STD_HIGH;
 8003194:	2301      	movs	r3, #1
 8003196:	72fb      	strb	r3, [r7, #11]
				Rte_Write_Hvac_HvacPort_Hvac_TsState(&localts);
 8003198:	f107 030b 	add.w	r3, r7, #11
 800319c:	4618      	mov	r0, r3
 800319e:	f00e f863 	bl	8011268 <Rte_Write_Hvac_HvacPort_Hvac_TsState>
			}
			else
			{
				/* do nothing */
			}
			break;
 80031a2:	e062      	b.n	800326a <SenCtrl_ProcessSensorValue+0x1a2>
			else if(SenCtrl_MeasuredValues[SENCTRL_HVAC_TS_POSITION] < 4000)
 80031a4:	4b3d      	ldr	r3, [pc, #244]	; (800329c <SenCtrl_ProcessSensorValue+0x1d4>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80031ac:	d25d      	bcs.n	800326a <SenCtrl_ProcessSensorValue+0x1a2>
				uint8 localts = STD_LOW;
 80031ae:	2300      	movs	r3, #0
 80031b0:	72bb      	strb	r3, [r7, #10]
				Rte_Write_Hvac_HvacPort_Hvac_TsState(&localts);
 80031b2:	f107 030a 	add.w	r3, r7, #10
 80031b6:	4618      	mov	r0, r3
 80031b8:	f00e f856 	bl	8011268 <Rte_Write_Hvac_HvacPort_Hvac_TsState>
			break;
 80031bc:	e055      	b.n	800326a <SenCtrl_ProcessSensorValue+0x1a2>
		case SENCTRL_DIAGCTRL_LB_L_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LB_L_POSITION] < SENCTRL_THRESHOLD_SH)
 80031be:	4b37      	ldr	r3, [pc, #220]	; (800329c <SenCtrl_ProcessSensorValue+0x1d4>)
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	2b59      	cmp	r3, #89	; 0x59
 80031c4:	d853      	bhi.n	800326e <SenCtrl_ProcessSensorValue+0x1a6>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_LOW_BEAM_LEFT_MALFUNCTION);
 80031c6:	2004      	movs	r0, #4
 80031c8:	f00e f85e 	bl	8011288 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 80031cc:	e04f      	b.n	800326e <SenCtrl_ProcessSensorValue+0x1a6>
		case SENCTRL_DIAGCTRL_LB_R_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LB_R_POSITION] < SENCTRL_THRESHOLD_SH)
 80031ce:	4b33      	ldr	r3, [pc, #204]	; (800329c <SenCtrl_ProcessSensorValue+0x1d4>)
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	2b59      	cmp	r3, #89	; 0x59
 80031d4:	d84d      	bhi.n	8003272 <SenCtrl_ProcessSensorValue+0x1aa>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_LOW_BEAM_RIGHT_MALFUNCTION);
 80031d6:	2005      	movs	r0, #5
 80031d8:	f00e f856 	bl	8011288 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 80031dc:	e049      	b.n	8003272 <SenCtrl_ProcessSensorValue+0x1aa>
		case SENCTRL_DIAGCTRL_RPL_L_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RPL_L_POSITION] < SENCTRL_THRESHOLD_SH)
 80031de:	4b2f      	ldr	r3, [pc, #188]	; (800329c <SenCtrl_ProcessSensorValue+0x1d4>)
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b59      	cmp	r3, #89	; 0x59
 80031e4:	d847      	bhi.n	8003276 <SenCtrl_ProcessSensorValue+0x1ae>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_REAR_POSITION_LIGHT_LEFT_MALFUNCTION);
 80031e6:	2044      	movs	r0, #68	; 0x44
 80031e8:	f00e f84e 	bl	8011288 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 80031ec:	e043      	b.n	8003276 <SenCtrl_ProcessSensorValue+0x1ae>
		case SENCTRL_DIAGCTRL_RPL_R_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RPL_R_POSITION] < SENCTRL_THRESHOLD_SH)
 80031ee:	4b2b      	ldr	r3, [pc, #172]	; (800329c <SenCtrl_ProcessSensorValue+0x1d4>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	2b59      	cmp	r3, #89	; 0x59
 80031f4:	d841      	bhi.n	800327a <SenCtrl_ProcessSensorValue+0x1b2>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION);
 80031f6:	2045      	movs	r0, #69	; 0x45
 80031f8:	f00e f846 	bl	8011288 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 80031fc:	e03d      	b.n	800327a <SenCtrl_ProcessSensorValue+0x1b2>
		case SENCTRL_DIAGCTRL_BL_R_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_BL_R_POSITION] < SENCTRL_THRESHOLD_SH)
 80031fe:	4b27      	ldr	r3, [pc, #156]	; (800329c <SenCtrl_ProcessSensorValue+0x1d4>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	2b59      	cmp	r3, #89	; 0x59
 8003204:	d83b      	bhi.n	800327e <SenCtrl_ProcessSensorValue+0x1b6>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_BRAKE_LIGHT_RIGHT_MALFUNCTION);
 8003206:	2074      	movs	r0, #116	; 0x74
 8003208:	f00e f83e 	bl	8011288 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 800320c:	e037      	b.n	800327e <SenCtrl_ProcessSensorValue+0x1b6>
		case SENCTRL_DIAGCTRL_BL_L_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_BL_L_POSITION] < SENCTRL_THRESHOLD_SH)
 800320e:	4b23      	ldr	r3, [pc, #140]	; (800329c <SenCtrl_ProcessSensorValue+0x1d4>)
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	2b59      	cmp	r3, #89	; 0x59
 8003214:	d835      	bhi.n	8003282 <SenCtrl_ProcessSensorValue+0x1ba>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_BRAKE_LIGHT_LEFT_MALFUNCTION);
 8003216:	2074      	movs	r0, #116	; 0x74
 8003218:	f00e f836 	bl	8011288 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 800321c:	e031      	b.n	8003282 <SenCtrl_ProcessSensorValue+0x1ba>
		case SENCTRL_DIAGCTRL_LTS_F_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LTS_F_POSITION] < SENCTRL_THRESHOLD_SH)
 800321e:	4b1f      	ldr	r3, [pc, #124]	; (800329c <SenCtrl_ProcessSensorValue+0x1d4>)
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	2b59      	cmp	r3, #89	; 0x59
 8003224:	d82f      	bhi.n	8003286 <SenCtrl_ProcessSensorValue+0x1be>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION);
 8003226:	2064      	movs	r0, #100	; 0x64
 8003228:	f00e f82e 	bl	8011288 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 800322c:	e02b      	b.n	8003286 <SenCtrl_ProcessSensorValue+0x1be>
		case SENCTRL_DIAGCTRL_LTS_R_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_LTS_R_POSITION] < SENCTRL_THRESHOLD_SH)
 800322e:	4b1b      	ldr	r3, [pc, #108]	; (800329c <SenCtrl_ProcessSensorValue+0x1d4>)
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	2b59      	cmp	r3, #89	; 0x59
 8003234:	d829      	bhi.n	800328a <SenCtrl_ProcessSensorValue+0x1c2>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_LEFT_TURN_SIGNAL_REAR_MALFUNCTION);
 8003236:	2065      	movs	r0, #101	; 0x65
 8003238:	f00e f826 	bl	8011288 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 800323c:	e025      	b.n	800328a <SenCtrl_ProcessSensorValue+0x1c2>
		case SENCTRL_DIAGCTRL_RTS_R_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RTS_R_POSITION] < SENCTRL_THRESHOLD_SH)
 800323e:	4b17      	ldr	r3, [pc, #92]	; (800329c <SenCtrl_ProcessSensorValue+0x1d4>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	2b59      	cmp	r3, #89	; 0x59
 8003244:	d823      	bhi.n	800328e <SenCtrl_ProcessSensorValue+0x1c6>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_RIGHT_TURN_SIGNAL_REAR_MALFUNCTION);
 8003246:	2055      	movs	r0, #85	; 0x55
 8003248:	f00e f81e 	bl	8011288 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 800324c:	e01f      	b.n	800328e <SenCtrl_ProcessSensorValue+0x1c6>
		case SENCTRL_DIAGCTRL_RTS_F_REQUEST:
			if(SenCtrl_MeasuredValues[SENCTRL_DIAGCTRL_RTS_F_POSITION] < SENCTRL_THRESHOLD_SH)
 800324e:	4b13      	ldr	r3, [pc, #76]	; (800329c <SenCtrl_ProcessSensorValue+0x1d4>)
 8003250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003252:	2b59      	cmp	r3, #89	; 0x59
 8003254:	d81d      	bhi.n	8003292 <SenCtrl_ProcessSensorValue+0x1ca>
			{
				Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(SENCTRL_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION);
 8003256:	2054      	movs	r0, #84	; 0x54
 8003258:	f00e f816 	bl	8011288 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>
			}
			else
			{
				/* do nothing */
			}
			break;
 800325c:	e019      	b.n	8003292 <SenCtrl_ProcessSensorValue+0x1ca>
		default:
			break;
 800325e:	bf00      	nop
 8003260:	e018      	b.n	8003294 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 8003262:	bf00      	nop
 8003264:	e016      	b.n	8003294 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 8003266:	bf00      	nop
 8003268:	e014      	b.n	8003294 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 800326a:	bf00      	nop
 800326c:	e012      	b.n	8003294 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 800326e:	bf00      	nop
 8003270:	e010      	b.n	8003294 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 8003272:	bf00      	nop
 8003274:	e00e      	b.n	8003294 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 8003276:	bf00      	nop
 8003278:	e00c      	b.n	8003294 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 800327a:	bf00      	nop
 800327c:	e00a      	b.n	8003294 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 800327e:	bf00      	nop
 8003280:	e008      	b.n	8003294 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 8003282:	bf00      	nop
 8003284:	e006      	b.n	8003294 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 8003286:	bf00      	nop
 8003288:	e004      	b.n	8003294 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 800328a:	bf00      	nop
 800328c:	e002      	b.n	8003294 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 800328e:	bf00      	nop
 8003290:	e000      	b.n	8003294 <SenCtrl_ProcessSensorValue+0x1cc>
			break;
 8003292:	bf00      	nop
	}
}
 8003294:	bf00      	nop
 8003296:	3720      	adds	r7, #32
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20000140 	.word	0x20000140

080032a0 <Can_Init>:
/***********************************************************************************
* Function: Can_Init													   		   *
* Description: Driver initialization.		 	   								   *
************************************************************************************/
VOID Can_Init()
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
	Can_BswState = CAN_INIT_STATE;
 80032a4:	4b03      	ldr	r3, [pc, #12]	; (80032b4 <Can_Init+0x14>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	701a      	strb	r2, [r3, #0]
	CanOverSpi_Init();
 80032aa:	f009 ff74 	bl	800d196 <CanOverSpi_Init>
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000180 	.word	0x20000180

080032b8 <HAL_I2C_MasterTxCpltCallback>:
/***********************************************************************************
* Function: HAL_I2C_MasterTxCpltCallback										   *
* Description: Handler master transmission complete.							   *
************************************************************************************/
VOID HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a05      	ldr	r2, [pc, #20]	; (80032dc <HAL_I2C_MasterTxCpltCallback+0x24>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d104      	bne.n	80032d4 <HAL_I2C_MasterTxCpltCallback+0x1c>
	{
		xTaskResumeFromISR(I2C_ISRHandle);
 80032ca:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <HAL_I2C_MasterTxCpltCallback+0x28>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f00c fc08 	bl	800fae4 <xTaskResumeFromISR>
	}
	else
	{
		/* do nothing */
	}
}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40005400 	.word	0x40005400
 80032e0:	200002dc 	.word	0x200002dc

080032e4 <HAL_I2C_ErrorCallback>:
/***********************************************************************************
* Function: HAL_I2C_ErrorCallback										   		   *
* Description: Handler error callback.									           *
************************************************************************************/
VOID HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a52      	ldr	r2, [pc, #328]	; (800343c <HAL_I2C_ErrorCallback+0x158>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	f040 809d 	bne.w	8003432 <HAL_I2C_ErrorCallback+0x14e>
	{
		/* Store the fault. */
		uint32 receivedValue = HAL_I2C_GetError(hi2c);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f005 f817 	bl	800832c <HAL_I2C_GetError>
 80032fe:	60f8      	str	r0, [r7, #12]
		/* Process the fault. */
		switch(receivedValue)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b80      	cmp	r3, #128	; 0x80
 8003304:	f000 808c 	beq.w	8003420 <HAL_I2C_ErrorCallback+0x13c>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b80      	cmp	r3, #128	; 0x80
 800330c:	f200 8090 	bhi.w	8003430 <HAL_I2C_ErrorCallback+0x14c>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b20      	cmp	r3, #32
 8003314:	d848      	bhi.n	80033a8 <HAL_I2C_ErrorCallback+0xc4>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b20      	cmp	r3, #32
 800331a:	f200 8089 	bhi.w	8003430 <HAL_I2C_ErrorCallback+0x14c>
 800331e:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <HAL_I2C_ErrorCallback+0x40>)
 8003320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003324:	08003431 	.word	0x08003431
 8003328:	080033b1 	.word	0x080033b1
 800332c:	080033c1 	.word	0x080033c1
 8003330:	08003431 	.word	0x08003431
 8003334:	080033d1 	.word	0x080033d1
 8003338:	08003431 	.word	0x08003431
 800333c:	08003431 	.word	0x08003431
 8003340:	08003431 	.word	0x08003431
 8003344:	080033e1 	.word	0x080033e1
 8003348:	08003431 	.word	0x08003431
 800334c:	08003431 	.word	0x08003431
 8003350:	08003431 	.word	0x08003431
 8003354:	08003431 	.word	0x08003431
 8003358:	08003431 	.word	0x08003431
 800335c:	08003431 	.word	0x08003431
 8003360:	08003431 	.word	0x08003431
 8003364:	080033f1 	.word	0x080033f1
 8003368:	08003431 	.word	0x08003431
 800336c:	08003431 	.word	0x08003431
 8003370:	08003431 	.word	0x08003431
 8003374:	08003431 	.word	0x08003431
 8003378:	08003431 	.word	0x08003431
 800337c:	08003431 	.word	0x08003431
 8003380:	08003431 	.word	0x08003431
 8003384:	08003431 	.word	0x08003431
 8003388:	08003431 	.word	0x08003431
 800338c:	08003431 	.word	0x08003431
 8003390:	08003431 	.word	0x08003431
 8003394:	08003431 	.word	0x08003431
 8003398:	08003431 	.word	0x08003431
 800339c:	08003431 	.word	0x08003431
 80033a0:	08003431 	.word	0x08003431
 80033a4:	08003401 	.word	0x08003401
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b40      	cmp	r3, #64	; 0x40
 80033ac:	d030      	beq.n	8003410 <HAL_I2C_ErrorCallback+0x12c>
				break;
			case HAL_I2C_ERROR_DMA_PARAM:
				SystemManager_Fault[I2C_ERROR_DMA_PARAM_ONE]++;
				break;
			default:
				break;
 80033ae:	e03f      	b.n	8003430 <HAL_I2C_ErrorCallback+0x14c>
				SystemManager_Fault[I2C_ERROR_BERR_ONE]++;
 80033b0:	4b23      	ldr	r3, [pc, #140]	; (8003440 <HAL_I2C_ErrorCallback+0x15c>)
 80033b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b6:	3301      	adds	r3, #1
 80033b8:	4a21      	ldr	r2, [pc, #132]	; (8003440 <HAL_I2C_ErrorCallback+0x15c>)
 80033ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
				break;
 80033be:	e038      	b.n	8003432 <HAL_I2C_ErrorCallback+0x14e>
				SystemManager_Fault[I2C_ERROR_ARLO_ONE]++;;
 80033c0:	4b1f      	ldr	r3, [pc, #124]	; (8003440 <HAL_I2C_ErrorCallback+0x15c>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	3301      	adds	r3, #1
 80033c8:	4a1d      	ldr	r2, [pc, #116]	; (8003440 <HAL_I2C_ErrorCallback+0x15c>)
 80033ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				break;
 80033ce:	e030      	b.n	8003432 <HAL_I2C_ErrorCallback+0x14e>
				SystemManager_Fault[I2C_ERROR_AF_ONE]++;
 80033d0:	4b1b      	ldr	r3, [pc, #108]	; (8003440 <HAL_I2C_ErrorCallback+0x15c>)
 80033d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d6:	3301      	adds	r3, #1
 80033d8:	4a19      	ldr	r2, [pc, #100]	; (8003440 <HAL_I2C_ErrorCallback+0x15c>)
 80033da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
				break;
 80033de:	e028      	b.n	8003432 <HAL_I2C_ErrorCallback+0x14e>
				SystemManager_Fault[I2C_ERROR_OVR_ONE]++;
 80033e0:	4b17      	ldr	r3, [pc, #92]	; (8003440 <HAL_I2C_ErrorCallback+0x15c>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e6:	3301      	adds	r3, #1
 80033e8:	4a15      	ldr	r2, [pc, #84]	; (8003440 <HAL_I2C_ErrorCallback+0x15c>)
 80033ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
				break;
 80033ee:	e020      	b.n	8003432 <HAL_I2C_ErrorCallback+0x14e>
				SystemManager_Fault[I2C_ERROR_DMA_ONE]++;
 80033f0:	4b13      	ldr	r3, [pc, #76]	; (8003440 <HAL_I2C_ErrorCallback+0x15c>)
 80033f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f6:	3301      	adds	r3, #1
 80033f8:	4a11      	ldr	r2, [pc, #68]	; (8003440 <HAL_I2C_ErrorCallback+0x15c>)
 80033fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
				break;
 80033fe:	e018      	b.n	8003432 <HAL_I2C_ErrorCallback+0x14e>
				SystemManager_Fault[I2C_ERROR_TIMEOUT_ONE]++;
 8003400:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <HAL_I2C_ErrorCallback+0x15c>)
 8003402:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003406:	3301      	adds	r3, #1
 8003408:	4a0d      	ldr	r2, [pc, #52]	; (8003440 <HAL_I2C_ErrorCallback+0x15c>)
 800340a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
				break;
 800340e:	e010      	b.n	8003432 <HAL_I2C_ErrorCallback+0x14e>
				SystemManager_Fault[I2C_ERROR_SIZE_ONE]++;
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_I2C_ErrorCallback+0x15c>)
 8003412:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003416:	3301      	adds	r3, #1
 8003418:	4a09      	ldr	r2, [pc, #36]	; (8003440 <HAL_I2C_ErrorCallback+0x15c>)
 800341a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
				break;
 800341e:	e008      	b.n	8003432 <HAL_I2C_ErrorCallback+0x14e>
				SystemManager_Fault[I2C_ERROR_DMA_PARAM_ONE]++;
 8003420:	4b07      	ldr	r3, [pc, #28]	; (8003440 <HAL_I2C_ErrorCallback+0x15c>)
 8003422:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003426:	3301      	adds	r3, #1
 8003428:	4a05      	ldr	r2, [pc, #20]	; (8003440 <HAL_I2C_ErrorCallback+0x15c>)
 800342a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
				break;
 800342e:	e000      	b.n	8003432 <HAL_I2C_ErrorCallback+0x14e>
				break;
 8003430:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
}
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40005400 	.word	0x40005400
 8003440:	200093ac 	.word	0x200093ac

08003444 <I2c_Init>:
/***********************************************************************************
* Function: I2c_Init										   			           *
* Description: Handler initialization.									           *
************************************************************************************/
StdReturnType I2c_Init(uint8 I2c_Channel)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	71fb      	strb	r3, [r7, #7]
	/* Initialize the protocol on the respective channel. */
	if(I2c_Channel == I2C_CHANNEL_ONE)
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d124      	bne.n	800349e <I2c_Init+0x5a>
	{
		hi2c1.Instance = I2C1;
 8003454:	4b14      	ldr	r3, [pc, #80]	; (80034a8 <I2c_Init+0x64>)
 8003456:	4a15      	ldr	r2, [pc, #84]	; (80034ac <I2c_Init+0x68>)
 8003458:	601a      	str	r2, [r3, #0]
		hi2c1.Init.ClockSpeed = 100000;
 800345a:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <I2c_Init+0x64>)
 800345c:	4a14      	ldr	r2, [pc, #80]	; (80034b0 <I2c_Init+0x6c>)
 800345e:	605a      	str	r2, [r3, #4]
		hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003460:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <I2c_Init+0x64>)
 8003462:	2200      	movs	r2, #0
 8003464:	609a      	str	r2, [r3, #8]
		hi2c1.Init.OwnAddress1 = 0;
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <I2c_Init+0x64>)
 8003468:	2200      	movs	r2, #0
 800346a:	60da      	str	r2, [r3, #12]
		hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800346c:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <I2c_Init+0x64>)
 800346e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003472:	611a      	str	r2, [r3, #16]
		hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003474:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <I2c_Init+0x64>)
 8003476:	2200      	movs	r2, #0
 8003478:	615a      	str	r2, [r3, #20]
		hi2c1.Init.OwnAddress2 = 0;
 800347a:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <I2c_Init+0x64>)
 800347c:	2200      	movs	r2, #0
 800347e:	619a      	str	r2, [r3, #24]
		hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003480:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <I2c_Init+0x64>)
 8003482:	2200      	movs	r2, #0
 8003484:	61da      	str	r2, [r3, #28]
		hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003486:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <I2c_Init+0x64>)
 8003488:	2200      	movs	r2, #0
 800348a:	621a      	str	r2, [r3, #32]
		if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800348c:	4806      	ldr	r0, [pc, #24]	; (80034a8 <I2c_Init+0x64>)
 800348e:	f004 fa71 	bl	8007974 <HAL_I2C_Init>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <I2c_Init+0x5a>
		{
			HAL_I2C_ErrorCallback(&hi2c1);
 8003498:	4803      	ldr	r0, [pc, #12]	; (80034a8 <I2c_Init+0x64>)
 800349a:	f7ff ff23 	bl	80032e4 <HAL_I2C_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	20000304 	.word	0x20000304
 80034ac:	40005400 	.word	0x40005400
 80034b0:	000186a0 	.word	0x000186a0

080034b4 <I2c_DeInit>:
/***********************************************************************************
* Function: I2c_DeInit										   			           *
* Description: Handler de-initialization.									       *
************************************************************************************/
StdReturnType I2c_DeInit(uint8 I2c_Channel)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	71fb      	strb	r3, [r7, #7]
	/* De-initialize the protocol on the respective channel. */
	if(I2c_Channel == I2C_CHANNEL_ONE)
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d102      	bne.n	80034ca <I2c_DeInit+0x16>
	{
		HAL_I2C_DeInit(&hi2c1);
 80034c4:	4803      	ldr	r0, [pc, #12]	; (80034d4 <I2c_DeInit+0x20>)
 80034c6:	f004 fbd5 	bl	8007c74 <HAL_I2C_DeInit>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	20000304 	.word	0x20000304

080034d8 <I2c_MainFunction>:
/***********************************************************************************
* Function: I2c_MainFunction										   			   *
* Description: Handler main function.									           *
************************************************************************************/
VOID I2c_MainFunction()
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
	uint32 localStatusOne = HAL_I2C_GetState(&hi2c1);
 80034de:	4846      	ldr	r0, [pc, #280]	; (80035f8 <I2c_MainFunction+0x120>)
 80034e0:	f004 ff16 	bl	8008310 <HAL_I2C_GetState>
 80034e4:	4603      	mov	r3, r0
 80034e6:	607b      	str	r3, [r7, #4]
	/* Process channel one. */
	switch(localStatusOne)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2be0      	cmp	r3, #224	; 0xe0
 80034ec:	d078      	beq.n	80035e0 <I2c_MainFunction+0x108>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2be0      	cmp	r3, #224	; 0xe0
 80034f2:	d87c      	bhi.n	80035ee <I2c_MainFunction+0x116>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b24      	cmp	r3, #36	; 0x24
 80034f8:	d850      	bhi.n	800359c <I2c_MainFunction+0xc4>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b24      	cmp	r3, #36	; 0x24
 80034fe:	d876      	bhi.n	80035ee <I2c_MainFunction+0x116>
 8003500:	a201      	add	r2, pc, #4	; (adr r2, 8003508 <I2c_MainFunction+0x30>)
 8003502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003506:	bf00      	nop
 8003508:	080035a5 	.word	0x080035a5
 800350c:	080035ef 	.word	0x080035ef
 8003510:	080035ef 	.word	0x080035ef
 8003514:	080035ef 	.word	0x080035ef
 8003518:	080035ef 	.word	0x080035ef
 800351c:	080035ef 	.word	0x080035ef
 8003520:	080035ef 	.word	0x080035ef
 8003524:	080035ef 	.word	0x080035ef
 8003528:	080035ef 	.word	0x080035ef
 800352c:	080035ef 	.word	0x080035ef
 8003530:	080035ef 	.word	0x080035ef
 8003534:	080035ef 	.word	0x080035ef
 8003538:	080035ef 	.word	0x080035ef
 800353c:	080035ef 	.word	0x080035ef
 8003540:	080035ef 	.word	0x080035ef
 8003544:	080035ef 	.word	0x080035ef
 8003548:	080035ef 	.word	0x080035ef
 800354c:	080035ef 	.word	0x080035ef
 8003550:	080035ef 	.word	0x080035ef
 8003554:	080035ef 	.word	0x080035ef
 8003558:	080035ef 	.word	0x080035ef
 800355c:	080035ef 	.word	0x080035ef
 8003560:	080035ef 	.word	0x080035ef
 8003564:	080035ef 	.word	0x080035ef
 8003568:	080035ef 	.word	0x080035ef
 800356c:	080035ef 	.word	0x080035ef
 8003570:	080035ef 	.word	0x080035ef
 8003574:	080035ef 	.word	0x080035ef
 8003578:	080035ef 	.word	0x080035ef
 800357c:	080035ef 	.word	0x080035ef
 8003580:	080035ef 	.word	0x080035ef
 8003584:	080035ef 	.word	0x080035ef
 8003588:	080035b3 	.word	0x080035b3
 800358c:	080035c3 	.word	0x080035c3
 8003590:	080035cb 	.word	0x080035cb
 8003594:	080035ef 	.word	0x080035ef
 8003598:	080035bb 	.word	0x080035bb
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2ba0      	cmp	r3, #160	; 0xa0
 80035a0:	d017      	beq.n	80035d2 <I2c_MainFunction+0xfa>
		case HAL_I2C_STATE_ERROR:
			I2c_BswState_ChannelOne = localStatusOne;
			HAL_I2C_ErrorCallback(&hi2c1);
			break;
		default:
			break;
 80035a2:	e024      	b.n	80035ee <I2c_MainFunction+0x116>
			I2c_BswState_ChannelOne = localStatusOne;
 80035a4:	4a15      	ldr	r2, [pc, #84]	; (80035fc <I2c_MainFunction+0x124>)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6013      	str	r3, [r2, #0]
			I2c_Init(I2C_CHANNEL_ONE);
 80035aa:	2001      	movs	r0, #1
 80035ac:	f7ff ff4a 	bl	8003444 <I2c_Init>
			break;
 80035b0:	e01e      	b.n	80035f0 <I2c_MainFunction+0x118>
			I2c_BswState_ChannelOne = localStatusOne;
 80035b2:	4a12      	ldr	r2, [pc, #72]	; (80035fc <I2c_MainFunction+0x124>)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6013      	str	r3, [r2, #0]
			break;
 80035b8:	e01a      	b.n	80035f0 <I2c_MainFunction+0x118>
			I2c_BswState_ChannelOne = localStatusOne;
 80035ba:	4a10      	ldr	r2, [pc, #64]	; (80035fc <I2c_MainFunction+0x124>)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6013      	str	r3, [r2, #0]
			break;
 80035c0:	e016      	b.n	80035f0 <I2c_MainFunction+0x118>
			I2c_BswState_ChannelOne = localStatusOne;
 80035c2:	4a0e      	ldr	r2, [pc, #56]	; (80035fc <I2c_MainFunction+0x124>)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6013      	str	r3, [r2, #0]
			break;
 80035c8:	e012      	b.n	80035f0 <I2c_MainFunction+0x118>
			I2c_BswState_ChannelOne = localStatusOne;
 80035ca:	4a0c      	ldr	r2, [pc, #48]	; (80035fc <I2c_MainFunction+0x124>)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6013      	str	r3, [r2, #0]
			break;
 80035d0:	e00e      	b.n	80035f0 <I2c_MainFunction+0x118>
			I2c_BswState_ChannelOne = localStatusOne;
 80035d2:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <I2c_MainFunction+0x124>)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6013      	str	r3, [r2, #0]
			HAL_I2C_ErrorCallback(&hi2c1);
 80035d8:	4807      	ldr	r0, [pc, #28]	; (80035f8 <I2c_MainFunction+0x120>)
 80035da:	f7ff fe83 	bl	80032e4 <HAL_I2C_ErrorCallback>
			break;
 80035de:	e007      	b.n	80035f0 <I2c_MainFunction+0x118>
			I2c_BswState_ChannelOne = localStatusOne;
 80035e0:	4a06      	ldr	r2, [pc, #24]	; (80035fc <I2c_MainFunction+0x124>)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6013      	str	r3, [r2, #0]
			HAL_I2C_ErrorCallback(&hi2c1);
 80035e6:	4804      	ldr	r0, [pc, #16]	; (80035f8 <I2c_MainFunction+0x120>)
 80035e8:	f7ff fe7c 	bl	80032e4 <HAL_I2C_ErrorCallback>
			break;
 80035ec:	e000      	b.n	80035f0 <I2c_MainFunction+0x118>
			break;
 80035ee:	bf00      	nop
	}
}
 80035f0:	bf00      	nop
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	20000304 	.word	0x20000304
 80035fc:	20000184 	.word	0x20000184

08003600 <I2cLcd_Init>:
/***********************************************************************************
* Function: I2cLcd_Init										   			           *
* Description: Driver initialization.									           *
************************************************************************************/
StdReturnType I2cLcd_Init()
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
	if(Rte_P_Btc_BtcPort_Btc_ReceivedDataOnBluetooth == 92)
 8003606:	4b58      	ldr	r3, [pc, #352]	; (8003768 <I2cLcd_Init+0x168>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b5c      	cmp	r3, #92	; 0x5c
 800360c:	d123      	bne.n	8003656 <I2cLcd_Init+0x56>
	{
		uint8 local = 93;
 800360e:	235d      	movs	r3, #93	; 0x5d
 8003610:	71fb      	strb	r3, [r7, #7]
		Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&local);
 8003612:	1dfb      	adds	r3, r7, #7
 8003614:	4618      	mov	r0, r3
 8003616:	f00d fff3 	bl	8011600 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
		init1 = STD_LOW;
 800361a:	4b54      	ldr	r3, [pc, #336]	; (800376c <I2cLcd_Init+0x16c>)
 800361c:	2200      	movs	r2, #0
 800361e:	701a      	strb	r2, [r3, #0]
		init2 = STD_LOW;
 8003620:	4b53      	ldr	r3, [pc, #332]	; (8003770 <I2cLcd_Init+0x170>)
 8003622:	2200      	movs	r2, #0
 8003624:	701a      	strb	r2, [r3, #0]
		init3 = STD_LOW;
 8003626:	4b53      	ldr	r3, [pc, #332]	; (8003774 <I2cLcd_Init+0x174>)
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
		init4 = STD_LOW;
 800362c:	4b52      	ldr	r3, [pc, #328]	; (8003778 <I2cLcd_Init+0x178>)
 800362e:	2200      	movs	r2, #0
 8003630:	701a      	strb	r2, [r3, #0]
		init5 = STD_LOW;
 8003632:	4b52      	ldr	r3, [pc, #328]	; (800377c <I2cLcd_Init+0x17c>)
 8003634:	2200      	movs	r2, #0
 8003636:	701a      	strb	r2, [r3, #0]
		init6 = STD_LOW;
 8003638:	4b51      	ldr	r3, [pc, #324]	; (8003780 <I2cLcd_Init+0x180>)
 800363a:	2200      	movs	r2, #0
 800363c:	701a      	strb	r2, [r3, #0]
		init7 = STD_LOW;
 800363e:	4b51      	ldr	r3, [pc, #324]	; (8003784 <I2cLcd_Init+0x184>)
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]
		init8 = STD_LOW;
 8003644:	4b50      	ldr	r3, [pc, #320]	; (8003788 <I2cLcd_Init+0x188>)
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
		init9 = STD_LOW;
 800364a:	4b50      	ldr	r3, [pc, #320]	; (800378c <I2cLcd_Init+0x18c>)
 800364c:	2200      	movs	r2, #0
 800364e:	701a      	strb	r2, [r3, #0]
		I2c_Lcd_Init_Flag = STD_LOW;
 8003650:	4b4f      	ldr	r3, [pc, #316]	; (8003790 <I2cLcd_Init+0x190>)
 8003652:	2200      	movs	r2, #0
 8003654:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	if(init1 == STD_LOW)
 8003656:	4b45      	ldr	r3, [pc, #276]	; (800376c <I2cLcd_Init+0x16c>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d105      	bne.n	800366a <I2cLcd_Init+0x6a>
	{
		init1 = STD_HIGH;
 800365e:	4b43      	ldr	r3, [pc, #268]	; (800376c <I2cLcd_Init+0x16c>)
 8003660:	2201      	movs	r2, #1
 8003662:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x30);
 8003664:	2030      	movs	r0, #48	; 0x30
 8003666:	f000 f895 	bl	8003794 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init2 == STD_LOW)
 800366a:	4b41      	ldr	r3, [pc, #260]	; (8003770 <I2cLcd_Init+0x170>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d105      	bne.n	800367e <I2cLcd_Init+0x7e>
	{
		init2 = STD_HIGH;
 8003672:	4b3f      	ldr	r3, [pc, #252]	; (8003770 <I2cLcd_Init+0x170>)
 8003674:	2201      	movs	r2, #1
 8003676:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x30);
 8003678:	2030      	movs	r0, #48	; 0x30
 800367a:	f000 f88b 	bl	8003794 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init3 == STD_LOW)
 800367e:	4b3d      	ldr	r3, [pc, #244]	; (8003774 <I2cLcd_Init+0x174>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d105      	bne.n	8003692 <I2cLcd_Init+0x92>
	{
		init3 = STD_HIGH;
 8003686:	4b3b      	ldr	r3, [pc, #236]	; (8003774 <I2cLcd_Init+0x174>)
 8003688:	2201      	movs	r2, #1
 800368a:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x30);
 800368c:	2030      	movs	r0, #48	; 0x30
 800368e:	f000 f881 	bl	8003794 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init4 == STD_LOW)
 8003692:	4b39      	ldr	r3, [pc, #228]	; (8003778 <I2cLcd_Init+0x178>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d105      	bne.n	80036a6 <I2cLcd_Init+0xa6>
	{
		init4 = STD_HIGH;
 800369a:	4b37      	ldr	r3, [pc, #220]	; (8003778 <I2cLcd_Init+0x178>)
 800369c:	2201      	movs	r2, #1
 800369e:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x20);
 80036a0:	2020      	movs	r0, #32
 80036a2:	f000 f877 	bl	8003794 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init5 == STD_LOW)
 80036a6:	4b35      	ldr	r3, [pc, #212]	; (800377c <I2cLcd_Init+0x17c>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d105      	bne.n	80036ba <I2cLcd_Init+0xba>
	{
		init5 = STD_HIGH;
 80036ae:	4b33      	ldr	r3, [pc, #204]	; (800377c <I2cLcd_Init+0x17c>)
 80036b0:	2201      	movs	r2, #1
 80036b2:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x28);
 80036b4:	2028      	movs	r0, #40	; 0x28
 80036b6:	f000 f86d 	bl	8003794 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init6 == STD_LOW)
 80036ba:	4b31      	ldr	r3, [pc, #196]	; (8003780 <I2cLcd_Init+0x180>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d105      	bne.n	80036ce <I2cLcd_Init+0xce>
	{
		init6 = STD_HIGH;
 80036c2:	4b2f      	ldr	r3, [pc, #188]	; (8003780 <I2cLcd_Init+0x180>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x08);
 80036c8:	2008      	movs	r0, #8
 80036ca:	f000 f863 	bl	8003794 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init7 == STD_LOW)
 80036ce:	4b2d      	ldr	r3, [pc, #180]	; (8003784 <I2cLcd_Init+0x184>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d105      	bne.n	80036e2 <I2cLcd_Init+0xe2>
	{
		init7 = STD_HIGH;
 80036d6:	4b2b      	ldr	r3, [pc, #172]	; (8003784 <I2cLcd_Init+0x184>)
 80036d8:	2201      	movs	r2, #1
 80036da:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x01);
 80036dc:	2001      	movs	r0, #1
 80036de:	f000 f859 	bl	8003794 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init8 == STD_LOW)
 80036e2:	4b29      	ldr	r3, [pc, #164]	; (8003788 <I2cLcd_Init+0x188>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d105      	bne.n	80036f6 <I2cLcd_Init+0xf6>
	{
		init8 = STD_HIGH;
 80036ea:	4b27      	ldr	r3, [pc, #156]	; (8003788 <I2cLcd_Init+0x188>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x06);
 80036f0:	2006      	movs	r0, #6
 80036f2:	f000 f84f 	bl	8003794 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init9 == STD_LOW)
 80036f6:	4b25      	ldr	r3, [pc, #148]	; (800378c <I2cLcd_Init+0x18c>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d105      	bne.n	800370a <I2cLcd_Init+0x10a>
	{
		init9 = STD_HIGH;
 80036fe:	4b23      	ldr	r3, [pc, #140]	; (800378c <I2cLcd_Init+0x18c>)
 8003700:	2201      	movs	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
		I2cLcd_SendCommand(0x0C);
 8003704:	200c      	movs	r0, #12
 8003706:	f000 f845 	bl	8003794 <I2cLcd_SendCommand>
	}
	else
	{
		/* do nothing */
	}
	if(init1 == STD_HIGH && init2 == STD_HIGH && init3 == STD_HIGH
 800370a:	4b18      	ldr	r3, [pc, #96]	; (800376c <I2cLcd_Init+0x16c>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d124      	bne.n	800375c <I2cLcd_Init+0x15c>
 8003712:	4b17      	ldr	r3, [pc, #92]	; (8003770 <I2cLcd_Init+0x170>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d120      	bne.n	800375c <I2cLcd_Init+0x15c>
 800371a:	4b16      	ldr	r3, [pc, #88]	; (8003774 <I2cLcd_Init+0x174>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d11c      	bne.n	800375c <I2cLcd_Init+0x15c>
			&& init4 == STD_HIGH && init5 == STD_HIGH && init6 == STD_HIGH
 8003722:	4b15      	ldr	r3, [pc, #84]	; (8003778 <I2cLcd_Init+0x178>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d118      	bne.n	800375c <I2cLcd_Init+0x15c>
 800372a:	4b14      	ldr	r3, [pc, #80]	; (800377c <I2cLcd_Init+0x17c>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d114      	bne.n	800375c <I2cLcd_Init+0x15c>
 8003732:	4b13      	ldr	r3, [pc, #76]	; (8003780 <I2cLcd_Init+0x180>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d110      	bne.n	800375c <I2cLcd_Init+0x15c>
			&& init7 == STD_HIGH && init8 == STD_HIGH && init9 == STD_HIGH)
 800373a:	4b12      	ldr	r3, [pc, #72]	; (8003784 <I2cLcd_Init+0x184>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d10c      	bne.n	800375c <I2cLcd_Init+0x15c>
 8003742:	4b11      	ldr	r3, [pc, #68]	; (8003788 <I2cLcd_Init+0x188>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d108      	bne.n	800375c <I2cLcd_Init+0x15c>
 800374a:	4b10      	ldr	r3, [pc, #64]	; (800378c <I2cLcd_Init+0x18c>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d104      	bne.n	800375c <I2cLcd_Init+0x15c>
	{
		I2cLcd_Clear();
 8003752:	f000 f8bb 	bl	80038cc <I2cLcd_Clear>
		I2c_Lcd_Init_Flag = STD_HIGH;
 8003756:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <I2cLcd_Init+0x190>)
 8003758:	2201      	movs	r2, #1
 800375a:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000096 	.word	0x20000096
 800376c:	20000188 	.word	0x20000188
 8003770:	20000189 	.word	0x20000189
 8003774:	2000018a 	.word	0x2000018a
 8003778:	2000018b 	.word	0x2000018b
 800377c:	2000018c 	.word	0x2000018c
 8003780:	2000018d 	.word	0x2000018d
 8003784:	2000018e 	.word	0x2000018e
 8003788:	2000018f 	.word	0x2000018f
 800378c:	20000190 	.word	0x20000190
 8003790:	2000027d 	.word	0x2000027d

08003794 <I2cLcd_SendCommand>:
/***********************************************************************************
* Function: I2cLcd_SendCommand										   			   *
* Description: Driver command transmitting.									       *
************************************************************************************/
VOID I2cLcd_SendCommand(char cmd)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8 data_t[4];
	data_u = (cmd & 0xf0);
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	f023 030f 	bic.w	r3, r3, #15
 80037a4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	f043 030c 	orr.w	r3, r3, #12
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	f043 0308 	orr.w	r3, r3, #8
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;
 80037c0:	7bbb      	ldrb	r3, [r7, #14]
 80037c2:	f043 030c 	orr.w	r3, r3, #12
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;
 80037ca:	7bbb      	ldrb	r3, [r7, #14]
 80037cc:	f043 0308 	orr.w	r3, r3, #8
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit_IT(&hi2c1, I2CLCD_SLAVE_ADDRESS, (uint8 *) data_t, 4);
 80037d4:	f107 0208 	add.w	r2, r7, #8
 80037d8:	2304      	movs	r3, #4
 80037da:	214e      	movs	r1, #78	; 0x4e
 80037dc:	4805      	ldr	r0, [pc, #20]	; (80037f4 <I2cLcd_SendCommand+0x60>)
 80037de:	f004 fa85 	bl	8007cec <HAL_I2C_Master_Transmit_IT>
	vTaskSuspend(I2C_ISRHandle);
 80037e2:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <I2cLcd_SendCommand+0x64>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f00c f876 	bl	800f8d8 <vTaskSuspend>
}
 80037ec:	bf00      	nop
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20000304 	.word	0x20000304
 80037f8:	200002dc 	.word	0x200002dc

080037fc <I2cLcd_SendData>:
/***********************************************************************************
* Function: I2cLcd_SendData										   			       *
* Description: Driver data transmitting.									       *
************************************************************************************/
VOID I2cLcd_SendData(char data)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8 data_t[4];
	data_u = (data & 0xf0);
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	f023 030f 	bic.w	r3, r3, #15
 800380c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	f043 030d 	orr.w	r3, r3, #13
 800381a:	b2db      	uxtb	r3, r3
 800381c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	f043 0309 	orr.w	r3, r3, #9
 8003824:	b2db      	uxtb	r3, r3
 8003826:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 8003828:	7bbb      	ldrb	r3, [r7, #14]
 800382a:	f043 030d 	orr.w	r3, r3, #13
 800382e:	b2db      	uxtb	r3, r3
 8003830:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 8003832:	7bbb      	ldrb	r3, [r7, #14]
 8003834:	f043 0309 	orr.w	r3, r3, #9
 8003838:	b2db      	uxtb	r3, r3
 800383a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit_IT(&hi2c1, I2CLCD_SLAVE_ADDRESS, (uint8 *) data_t, 4);
 800383c:	f107 0208 	add.w	r2, r7, #8
 8003840:	2304      	movs	r3, #4
 8003842:	214e      	movs	r1, #78	; 0x4e
 8003844:	4805      	ldr	r0, [pc, #20]	; (800385c <I2cLcd_SendData+0x60>)
 8003846:	f004 fa51 	bl	8007cec <HAL_I2C_Master_Transmit_IT>
	vTaskSuspend(I2C_ISRHandle);
 800384a:	4b05      	ldr	r3, [pc, #20]	; (8003860 <I2cLcd_SendData+0x64>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f00c f842 	bl	800f8d8 <vTaskSuspend>
}
 8003854:	bf00      	nop
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20000304 	.word	0x20000304
 8003860:	200002dc 	.word	0x200002dc

08003864 <I2cLcd_SendString>:
/***********************************************************************************
* Function: I2cLcd_SendString										   			   *
* Description: Driver string transmitting.									       *
************************************************************************************/
VOID I2cLcd_SendString(char *str)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
	while (*str)
 800386c:	e006      	b.n	800387c <I2cLcd_SendString+0x18>
	{
		I2cLcd_SendData(*str++);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff ffc0 	bl	80037fc <I2cLcd_SendData>
	while (*str)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1f4      	bne.n	800386e <I2cLcd_SendString+0xa>
	}
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <I2cLcd_SetCursor>:
/***********************************************************************************
* Function: I2cLcd_SetCursor										   			   *
* Description: Driver cursor setting.									           *
************************************************************************************/
VOID I2cLcd_SetCursor(int row, int col)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b082      	sub	sp, #8
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]
	switch (row)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <I2cLcd_SetCursor+0x18>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d005      	beq.n	80038b0 <I2cLcd_SetCursor+0x22>
 80038a4:	e009      	b.n	80038ba <I2cLcd_SetCursor+0x2c>
	{
		case 0:
			col |= 0x80;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ac:	603b      	str	r3, [r7, #0]
			break;
 80038ae:	e004      	b.n	80038ba <I2cLcd_SetCursor+0x2c>
		case 1:
			col |= 0xC0;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038b6:	603b      	str	r3, [r7, #0]
			break;
 80038b8:	bf00      	nop
	}
	I2cLcd_SendCommand(col);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff ff68 	bl	8003794 <I2cLcd_SendCommand>
}
 80038c4:	bf00      	nop
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <I2cLcd_Clear>:
/***********************************************************************************
* Function: I2cLcd_Clear										   			       *
* Description: Driver LCD clearing.									               *
************************************************************************************/
VOID I2cLcd_Clear()
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
	I2cLcd_SendCommand(0x80);
 80038d2:	2080      	movs	r0, #128	; 0x80
 80038d4:	f7ff ff5e 	bl	8003794 <I2cLcd_SendCommand>
	for (uint8 i=0; i < 70; i++)
 80038d8:	2300      	movs	r3, #0
 80038da:	71fb      	strb	r3, [r7, #7]
 80038dc:	e005      	b.n	80038ea <I2cLcd_Clear+0x1e>
	{
		I2cLcd_SendData(' ');
 80038de:	2020      	movs	r0, #32
 80038e0:	f7ff ff8c 	bl	80037fc <I2cLcd_SendData>
	for (uint8 i=0; i < 70; i++)
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	3301      	adds	r3, #1
 80038e8:	71fb      	strb	r3, [r7, #7]
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	2b45      	cmp	r3, #69	; 0x45
 80038ee:	d9f6      	bls.n	80038de <I2cLcd_Clear+0x12>
	}
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <Uart_Init>:
/***********************************************************************************
* Function: Uart_Init										       				   *
* Description: Initialize the protocol.									 		   *
************************************************************************************/
StdReturnType Uart_Init()
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
	/* Set the instance. */
	huart1.Instance = USART1;
 8003900:	4b12      	ldr	r3, [pc, #72]	; (800394c <Uart_Init+0x50>)
 8003902:	4a13      	ldr	r2, [pc, #76]	; (8003950 <Uart_Init+0x54>)
 8003904:	601a      	str	r2, [r3, #0]
	/* Set the baud rate for the protocol. */
	huart1.Init.BaudRate = 9600;
 8003906:	4b11      	ldr	r3, [pc, #68]	; (800394c <Uart_Init+0x50>)
 8003908:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800390c:	605a      	str	r2, [r3, #4]
	/* Set the number of data bits transmitted or received. */
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800390e:	4b0f      	ldr	r3, [pc, #60]	; (800394c <Uart_Init+0x50>)
 8003910:	2200      	movs	r2, #0
 8003912:	609a      	str	r2, [r3, #8]
	/* Set the number of stop bits transmitted. */
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003914:	4b0d      	ldr	r3, [pc, #52]	; (800394c <Uart_Init+0x50>)
 8003916:	2200      	movs	r2, #0
 8003918:	60da      	str	r2, [r3, #12]
	/* Set the parity mode. */
	huart1.Init.Parity = UART_PARITY_NONE;
 800391a:	4b0c      	ldr	r3, [pc, #48]	; (800394c <Uart_Init+0x50>)
 800391c:	2200      	movs	r2, #0
 800391e:	611a      	str	r2, [r3, #16]
	/* Set the protocol mode. */
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003920:	4b0a      	ldr	r3, [pc, #40]	; (800394c <Uart_Init+0x50>)
 8003922:	220c      	movs	r2, #12
 8003924:	615a      	str	r2, [r3, #20]
	/* Set the hardware flow control. */
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <Uart_Init+0x50>)
 8003928:	2200      	movs	r2, #0
 800392a:	619a      	str	r2, [r3, #24]
	/* Set the over sampling value. */
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800392c:	4b07      	ldr	r3, [pc, #28]	; (800394c <Uart_Init+0x50>)
 800392e:	2200      	movs	r2, #0
 8003930:	61da      	str	r2, [r3, #28]
	/* Call for error callback if the initialization is not performed accordingly. */
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8003932:	4806      	ldr	r0, [pc, #24]	; (800394c <Uart_Init+0x50>)
 8003934:	f008 f9ba 	bl	800bcac <HAL_UART_Init>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <Uart_Init+0x48>
	{
		HAL_UART_ErrorCallback(&huart1);
 800393e:	4803      	ldr	r0, [pc, #12]	; (800394c <Uart_Init+0x50>)
 8003940:	f000 f8b2 	bl	8003aa8 <HAL_UART_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	200007a0 	.word	0x200007a0
 8003950:	40011000 	.word	0x40011000

08003954 <Uart_DeInit>:
/***********************************************************************************
* Function: Uart_DeInit										   					   *
* Description: De-initialize the protocol.									       *
************************************************************************************/
StdReturnType Uart_DeInit()
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
	/* Call for protocol de-init function. */
	HAL_UART_DeInit(&huart1);
 8003958:	4802      	ldr	r0, [pc, #8]	; (8003964 <Uart_DeInit+0x10>)
 800395a:	f008 fa01 	bl	800bd60 <HAL_UART_DeInit>
	return E_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	bd80      	pop	{r7, pc}
 8003964:	200007a0 	.word	0x200007a0

08003968 <Uart_MainFunction>:
/***********************************************************************************
* Function: Uart_MainFunction										   			   *
* Description: Protocol main function.									           *
************************************************************************************/
VOID Uart_MainFunction()
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
	/* Get the error status in local variable. */
	uint32 localState = HAL_UART_GetState(&huart1);
 800396e:	484b      	ldr	r0, [pc, #300]	; (8003a9c <Uart_MainFunction+0x134>)
 8003970:	f008 fd3a 	bl	800c3e8 <HAL_UART_GetState>
 8003974:	4603      	mov	r3, r0
 8003976:	607b      	str	r3, [r7, #4]
	switch(localState)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2be0      	cmp	r3, #224	; 0xe0
 800397c:	f000 8082 	beq.w	8003a84 <Uart_MainFunction+0x11c>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2be0      	cmp	r3, #224	; 0xe0
 8003984:	f200 8085 	bhi.w	8003a92 <Uart_MainFunction+0x12a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b24      	cmp	r3, #36	; 0x24
 800398c:	d850      	bhi.n	8003a30 <Uart_MainFunction+0xc8>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b24      	cmp	r3, #36	; 0x24
 8003992:	d87e      	bhi.n	8003a92 <Uart_MainFunction+0x12a>
 8003994:	a201      	add	r2, pc, #4	; (adr r2, 800399c <Uart_MainFunction+0x34>)
 8003996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399a:	bf00      	nop
 800399c:	08003a39 	.word	0x08003a39
 80039a0:	08003a93 	.word	0x08003a93
 80039a4:	08003a93 	.word	0x08003a93
 80039a8:	08003a93 	.word	0x08003a93
 80039ac:	08003a93 	.word	0x08003a93
 80039b0:	08003a93 	.word	0x08003a93
 80039b4:	08003a93 	.word	0x08003a93
 80039b8:	08003a93 	.word	0x08003a93
 80039bc:	08003a93 	.word	0x08003a93
 80039c0:	08003a93 	.word	0x08003a93
 80039c4:	08003a93 	.word	0x08003a93
 80039c8:	08003a93 	.word	0x08003a93
 80039cc:	08003a93 	.word	0x08003a93
 80039d0:	08003a93 	.word	0x08003a93
 80039d4:	08003a93 	.word	0x08003a93
 80039d8:	08003a93 	.word	0x08003a93
 80039dc:	08003a93 	.word	0x08003a93
 80039e0:	08003a93 	.word	0x08003a93
 80039e4:	08003a93 	.word	0x08003a93
 80039e8:	08003a93 	.word	0x08003a93
 80039ec:	08003a93 	.word	0x08003a93
 80039f0:	08003a93 	.word	0x08003a93
 80039f4:	08003a93 	.word	0x08003a93
 80039f8:	08003a93 	.word	0x08003a93
 80039fc:	08003a93 	.word	0x08003a93
 8003a00:	08003a93 	.word	0x08003a93
 8003a04:	08003a93 	.word	0x08003a93
 8003a08:	08003a93 	.word	0x08003a93
 8003a0c:	08003a93 	.word	0x08003a93
 8003a10:	08003a93 	.word	0x08003a93
 8003a14:	08003a93 	.word	0x08003a93
 8003a18:	08003a93 	.word	0x08003a93
 8003a1c:	08003a45 	.word	0x08003a45
 8003a20:	08003a5f 	.word	0x08003a5f
 8003a24:	08003a67 	.word	0x08003a67
 8003a28:	08003a6f 	.word	0x08003a6f
 8003a2c:	08003a57 	.word	0x08003a57
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2ba0      	cmp	r3, #160	; 0xa0
 8003a34:	d01f      	beq.n	8003a76 <Uart_MainFunction+0x10e>
		case HAL_UART_STATE_ERROR:
			Uart_BswState = localState;
			HAL_UART_ErrorCallback(&huart1);
			break;
		default:
			break;
 8003a36:	e02c      	b.n	8003a92 <Uart_MainFunction+0x12a>
			Uart_BswState = localState;
 8003a38:	4a19      	ldr	r2, [pc, #100]	; (8003aa0 <Uart_MainFunction+0x138>)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6013      	str	r3, [r2, #0]
			Uart_Init();
 8003a3e:	f7ff ff5d 	bl	80038fc <Uart_Init>
			break;
 8003a42:	e027      	b.n	8003a94 <Uart_MainFunction+0x12c>
			HAL_UART_Receive_IT(&huart1, &Rte_P_Btc_BtcPort_Btc_RxData, 1);
 8003a44:	2201      	movs	r2, #1
 8003a46:	4917      	ldr	r1, [pc, #92]	; (8003aa4 <Uart_MainFunction+0x13c>)
 8003a48:	4814      	ldr	r0, [pc, #80]	; (8003a9c <Uart_MainFunction+0x134>)
 8003a4a:	f008 f9c3 	bl	800bdd4 <HAL_UART_Receive_IT>
			Uart_BswState = localState;
 8003a4e:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <Uart_MainFunction+0x138>)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6013      	str	r3, [r2, #0]
			break;
 8003a54:	e01e      	b.n	8003a94 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 8003a56:	4a12      	ldr	r2, [pc, #72]	; (8003aa0 <Uart_MainFunction+0x138>)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6013      	str	r3, [r2, #0]
			break;
 8003a5c:	e01a      	b.n	8003a94 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 8003a5e:	4a10      	ldr	r2, [pc, #64]	; (8003aa0 <Uart_MainFunction+0x138>)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6013      	str	r3, [r2, #0]
			break;
 8003a64:	e016      	b.n	8003a94 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 8003a66:	4a0e      	ldr	r2, [pc, #56]	; (8003aa0 <Uart_MainFunction+0x138>)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6013      	str	r3, [r2, #0]
			break;
 8003a6c:	e012      	b.n	8003a94 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 8003a6e:	4a0c      	ldr	r2, [pc, #48]	; (8003aa0 <Uart_MainFunction+0x138>)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6013      	str	r3, [r2, #0]
			break;
 8003a74:	e00e      	b.n	8003a94 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 8003a76:	4a0a      	ldr	r2, [pc, #40]	; (8003aa0 <Uart_MainFunction+0x138>)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6013      	str	r3, [r2, #0]
			HAL_UART_ErrorCallback(&huart1);
 8003a7c:	4807      	ldr	r0, [pc, #28]	; (8003a9c <Uart_MainFunction+0x134>)
 8003a7e:	f000 f813 	bl	8003aa8 <HAL_UART_ErrorCallback>
			break;
 8003a82:	e007      	b.n	8003a94 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 8003a84:	4a06      	ldr	r2, [pc, #24]	; (8003aa0 <Uart_MainFunction+0x138>)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6013      	str	r3, [r2, #0]
			HAL_UART_ErrorCallback(&huart1);
 8003a8a:	4804      	ldr	r0, [pc, #16]	; (8003a9c <Uart_MainFunction+0x134>)
 8003a8c:	f000 f80c 	bl	8003aa8 <HAL_UART_ErrorCallback>
			break;
 8003a90:	e000      	b.n	8003a94 <Uart_MainFunction+0x12c>
			break;
 8003a92:	bf00      	nop
	}
}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	200007a0 	.word	0x200007a0
 8003aa0:	20000194 	.word	0x20000194
 8003aa4:	20000094 	.word	0x20000094

08003aa8 <HAL_UART_ErrorCallback>:
/***********************************************************************************
* Function: HAL_UART_ErrorCallback										   		   *
* Description: Process error callback.								               *
************************************************************************************/
VOID HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	/* Get error status in local variable. */
	uint32 receivedValue = HAL_UART_GetError(huart);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f008 fcb7 	bl	800c424 <HAL_UART_GetError>
 8003ab6:	60f8      	str	r0, [r7, #12]
	/* Process each error.
	 * Store each in error in the system manager fault array.
	 * In case of DMA error re-initialize the protocol. */
	switch(receivedValue)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b10      	cmp	r3, #16
 8003abc:	d846      	bhi.n	8003b4c <HAL_UART_ErrorCallback+0xa4>
 8003abe:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <HAL_UART_ErrorCallback+0x1c>)
 8003ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac4:	08003b4d 	.word	0x08003b4d
 8003ac8:	08003b09 	.word	0x08003b09
 8003acc:	08003b15 	.word	0x08003b15
 8003ad0:	08003b4d 	.word	0x08003b4d
 8003ad4:	08003b21 	.word	0x08003b21
 8003ad8:	08003b4d 	.word	0x08003b4d
 8003adc:	08003b4d 	.word	0x08003b4d
 8003ae0:	08003b4d 	.word	0x08003b4d
 8003ae4:	08003b2d 	.word	0x08003b2d
 8003ae8:	08003b4d 	.word	0x08003b4d
 8003aec:	08003b4d 	.word	0x08003b4d
 8003af0:	08003b4d 	.word	0x08003b4d
 8003af4:	08003b4d 	.word	0x08003b4d
 8003af8:	08003b4d 	.word	0x08003b4d
 8003afc:	08003b4d 	.word	0x08003b4d
 8003b00:	08003b4d 	.word	0x08003b4d
 8003b04:	08003b39 	.word	0x08003b39
	{
		case HAL_UART_ERROR_NONE:
			/* do nothing */
			break;
		case HAL_UART_ERROR_PE:
			SystemManager_Fault[UART_ERROR_PE]++;
 8003b08:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <HAL_UART_ErrorCallback+0xb0>)
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	4a12      	ldr	r2, [pc, #72]	; (8003b58 <HAL_UART_ErrorCallback+0xb0>)
 8003b10:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 8003b12:	e01c      	b.n	8003b4e <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_NE:
			SystemManager_Fault[UART_ERROR_NE]++;
 8003b14:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <HAL_UART_ErrorCallback+0xb0>)
 8003b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b18:	3301      	adds	r3, #1
 8003b1a:	4a0f      	ldr	r2, [pc, #60]	; (8003b58 <HAL_UART_ErrorCallback+0xb0>)
 8003b1c:	6493      	str	r3, [r2, #72]	; 0x48
			break;
 8003b1e:	e016      	b.n	8003b4e <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_FE:
			SystemManager_Fault[UART_ERROR_FE]++;
 8003b20:	4b0d      	ldr	r3, [pc, #52]	; (8003b58 <HAL_UART_ErrorCallback+0xb0>)
 8003b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b24:	3301      	adds	r3, #1
 8003b26:	4a0c      	ldr	r2, [pc, #48]	; (8003b58 <HAL_UART_ErrorCallback+0xb0>)
 8003b28:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 8003b2a:	e010      	b.n	8003b4e <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_ORE:
			SystemManager_Fault[UART_ERROR_ORE]++;
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <HAL_UART_ErrorCallback+0xb0>)
 8003b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b30:	3301      	adds	r3, #1
 8003b32:	4a09      	ldr	r2, [pc, #36]	; (8003b58 <HAL_UART_ErrorCallback+0xb0>)
 8003b34:	6513      	str	r3, [r2, #80]	; 0x50
			break;
 8003b36:	e00a      	b.n	8003b4e <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_DMA:
			SystemManager_Fault[UART_ERROR_ORE]++;
 8003b38:	4b07      	ldr	r3, [pc, #28]	; (8003b58 <HAL_UART_ErrorCallback+0xb0>)
 8003b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	4a06      	ldr	r2, [pc, #24]	; (8003b58 <HAL_UART_ErrorCallback+0xb0>)
 8003b40:	6513      	str	r3, [r2, #80]	; 0x50
			Uart_Init();
 8003b42:	f7ff fedb 	bl	80038fc <Uart_Init>
			Uart_DeInit();
 8003b46:	f7ff ff05 	bl	8003954 <Uart_DeInit>
			break;
 8003b4a:	e000      	b.n	8003b4e <HAL_UART_ErrorCallback+0xa6>
		default:
			break;
 8003b4c:	bf00      	nop
	}
}
 8003b4e:	bf00      	nop
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	200093ac 	.word	0x200093ac

08003b5c <HAL_UART_RxCpltCallback>:
/***********************************************************************************
* Function: HAL_UART_RxCpltCallback										           *
* Description: Process received data.									   		   *
************************************************************************************/
VOID HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
	/* If the UART 1 is calling the callback. */
	if(huart->Instance == USART1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a20      	ldr	r2, [pc, #128]	; (8003bec <HAL_UART_RxCpltCallback+0x90>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d13a      	bne.n	8003be4 <HAL_UART_RxCpltCallback+0x88>
	{
		/* If the data received is not nullptr. */
		if(Rte_P_Btc_BtcPort_Btc_RxData == '\n')
 8003b6e:	4b20      	ldr	r3, [pc, #128]	; (8003bf0 <HAL_UART_RxCpltCallback+0x94>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b0a      	cmp	r3, #10
 8003b74:	d11a      	bne.n	8003bac <HAL_UART_RxCpltCallback+0x50>
		{
			/* If the buffer length counter is less than maximum value. */
			if(Rte_P_Btc_BtcPort_Btc_RxCount <= 3)
 8003b76:	4b1f      	ldr	r3, [pc, #124]	; (8003bf4 <HAL_UART_RxCpltCallback+0x98>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d80f      	bhi.n	8003b9e <HAL_UART_RxCpltCallback+0x42>
			{
				/* Convert the data received to uint8.*/
				uint8 asciiToUint = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]
				asciiToUint = atoi((char*)Rte_P_Btc_BtcPort_Btc_DataBuffer);
 8003b82:	481d      	ldr	r0, [pc, #116]	; (8003bf8 <HAL_UART_RxCpltCallback+0x9c>)
 8003b84:	f00e fff0 	bl	8012b68 <atoi>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	73fb      	strb	r3, [r7, #15]
				Rte_Write_Btc_BtcPort_Btc_RxData(&asciiToUint);
 8003b8e:	f107 030f 	add.w	r3, r7, #15
 8003b92:	4618      	mov	r0, r3
 8003b94:	f00d fcec 	bl	8011570 <Rte_Write_Btc_BtcPort_Btc_RxData>
				Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&Rte_P_Btc_BtcPort_Btc_RxData);
 8003b98:	4815      	ldr	r0, [pc, #84]	; (8003bf0 <HAL_UART_RxCpltCallback+0x94>)
 8003b9a:	f00d fd31 	bl	8011600 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
			else
			{
				/* do nothing */
			}
			/* Set the counter to 0 if it is more than maximum value. */
			UartCounter_Btc_RxCount = 0;
 8003b9e:	4b17      	ldr	r3, [pc, #92]	; (8003bfc <HAL_UART_RxCpltCallback+0xa0>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(&UartCounter_Btc_RxCount);
 8003ba4:	4815      	ldr	r0, [pc, #84]	; (8003bfc <HAL_UART_RxCpltCallback+0xa0>)
 8003ba6:	f00d fcf3 	bl	8011590 <Rte_Write_Btc_BtcPort_Btc_RxCount>
 8003baa:	e016      	b.n	8003bda <HAL_UART_RxCpltCallback+0x7e>
		}/* If the message was not fully processed, continue with the processing into the buffer. */
		else if(Rte_P_Btc_BtcPort_Btc_RxCount < 3)
 8003bac:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <HAL_UART_RxCpltCallback+0x98>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d80c      	bhi.n	8003bce <HAL_UART_RxCpltCallback+0x72>
		{
			Rte_Write_Btc_BtcPort_Btc_DataBuffer(&Rte_P_Btc_BtcPort_Btc_RxData, UartCounter_Btc_RxCount);
 8003bb4:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <HAL_UART_RxCpltCallback+0xa0>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	480d      	ldr	r0, [pc, #52]	; (8003bf0 <HAL_UART_RxCpltCallback+0x94>)
 8003bbc:	f00d fcf8 	bl	80115b0 <Rte_Write_Btc_BtcPort_Btc_DataBuffer>
			UartCounter_Btc_RxCount++;
 8003bc0:	4b0e      	ldr	r3, [pc, #56]	; (8003bfc <HAL_UART_RxCpltCallback+0xa0>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <HAL_UART_RxCpltCallback+0xa0>)
 8003bca:	701a      	strb	r2, [r3, #0]
 8003bcc:	e005      	b.n	8003bda <HAL_UART_RxCpltCallback+0x7e>
		}
		else
		{
			/* Set the counter to 0 otherwise. */
			UartCounter_Btc_RxCount = 0;
 8003bce:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <HAL_UART_RxCpltCallback+0xa0>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(&UartCounter_Btc_RxCount);
 8003bd4:	4809      	ldr	r0, [pc, #36]	; (8003bfc <HAL_UART_RxCpltCallback+0xa0>)
 8003bd6:	f00d fcdb 	bl	8011590 <Rte_Write_Btc_BtcPort_Btc_RxCount>
		}
		/* Re-enable data transmission throuhg the protocol in interrupt mode. */
		Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(&huart1, &Btc_RxData, 1);
 8003bda:	2201      	movs	r2, #1
 8003bdc:	4904      	ldr	r1, [pc, #16]	; (8003bf0 <HAL_UART_RxCpltCallback+0x94>)
 8003bde:	4808      	ldr	r0, [pc, #32]	; (8003c00 <HAL_UART_RxCpltCallback+0xa4>)
 8003be0:	f00d fe5c 	bl	801189c <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>
	}
	else
	{
		/* do nothing */
	}
}
 8003be4:	bf00      	nop
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40011000 	.word	0x40011000
 8003bf0:	20000094 	.word	0x20000094
 8003bf4:	20000095 	.word	0x20000095
 8003bf8:	20000090 	.word	0x20000090
 8003bfc:	20000198 	.word	0x20000198
 8003c00:	200007a0 	.word	0x200007a0

08003c04 <HAL_ADC_MspInit>:
  /* USER CODE END ADC1_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08c      	sub	sp, #48	; 0x30
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c0c:	f107 031c 	add.w	r3, r7, #28
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	60da      	str	r2, [r3, #12]
 8003c1a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a4e      	ldr	r2, [pc, #312]	; (8003d5c <HAL_ADC_MspInit+0x158>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	f040 8096 	bne.w	8003d54 <HAL_ADC_MspInit+0x150>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61bb      	str	r3, [r7, #24]
 8003c2c:	4b4c      	ldr	r3, [pc, #304]	; (8003d60 <HAL_ADC_MspInit+0x15c>)
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c30:	4a4b      	ldr	r2, [pc, #300]	; (8003d60 <HAL_ADC_MspInit+0x15c>)
 8003c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c36:	6453      	str	r3, [r2, #68]	; 0x44
 8003c38:	4b49      	ldr	r3, [pc, #292]	; (8003d60 <HAL_ADC_MspInit+0x15c>)
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	4b45      	ldr	r3, [pc, #276]	; (8003d60 <HAL_ADC_MspInit+0x15c>)
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	4a44      	ldr	r2, [pc, #272]	; (8003d60 <HAL_ADC_MspInit+0x15c>)
 8003c4e:	f043 0304 	orr.w	r3, r3, #4
 8003c52:	6313      	str	r3, [r2, #48]	; 0x30
 8003c54:	4b42      	ldr	r3, [pc, #264]	; (8003d60 <HAL_ADC_MspInit+0x15c>)
 8003c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c60:	2300      	movs	r3, #0
 8003c62:	613b      	str	r3, [r7, #16]
 8003c64:	4b3e      	ldr	r3, [pc, #248]	; (8003d60 <HAL_ADC_MspInit+0x15c>)
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	4a3d      	ldr	r2, [pc, #244]	; (8003d60 <HAL_ADC_MspInit+0x15c>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8003c70:	4b3b      	ldr	r3, [pc, #236]	; (8003d60 <HAL_ADC_MspInit+0x15c>)
 8003c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	4b37      	ldr	r3, [pc, #220]	; (8003d60 <HAL_ADC_MspInit+0x15c>)
 8003c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c84:	4a36      	ldr	r2, [pc, #216]	; (8003d60 <HAL_ADC_MspInit+0x15c>)
 8003c86:	f043 0302 	orr.w	r3, r3, #2
 8003c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c8c:	4b34      	ldr	r3, [pc, #208]	; (8003d60 <HAL_ADC_MspInit+0x15c>)
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = TS_Pin|RTS_F_Pin|AQS_Pin|LS_Pin
 8003c98:	233f      	movs	r3, #63	; 0x3f
 8003c9a:	61fb      	str	r3, [r7, #28]
                          |LTS_R_Pin|LTS_F_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ca4:	f107 031c 	add.w	r3, r7, #28
 8003ca8:	4619      	mov	r1, r3
 8003caa:	482e      	ldr	r0, [pc, #184]	; (8003d64 <HAL_ADC_MspInit+0x160>)
 8003cac:	f003 fbc6 	bl	800743c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VS_Pin|RTS_R_Pin|LB_L_Pin|LB_R_Pin
 8003cb0:	23fc      	movs	r3, #252	; 0xfc
 8003cb2:	61fb      	str	r3, [r7, #28]
                          |RPL_L_Pin|RPL_R_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cbc:	f107 031c 	add.w	r3, r7, #28
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4829      	ldr	r0, [pc, #164]	; (8003d68 <HAL_ADC_MspInit+0x164>)
 8003cc4:	f003 fbba 	bl	800743c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BL_R_Pin|BL_L_Pin;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd4:	f107 031c 	add.w	r3, r7, #28
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4824      	ldr	r0, [pc, #144]	; (8003d6c <HAL_ADC_MspInit+0x168>)
 8003cdc:	f003 fbae 	bl	800743c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003ce0:	4b23      	ldr	r3, [pc, #140]	; (8003d70 <HAL_ADC_MspInit+0x16c>)
 8003ce2:	4a24      	ldr	r2, [pc, #144]	; (8003d74 <HAL_ADC_MspInit+0x170>)
 8003ce4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003ce6:	4b22      	ldr	r3, [pc, #136]	; (8003d70 <HAL_ADC_MspInit+0x16c>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cec:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <HAL_ADC_MspInit+0x16c>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cf2:	4b1f      	ldr	r3, [pc, #124]	; (8003d70 <HAL_ADC_MspInit+0x16c>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003cf8:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <HAL_ADC_MspInit+0x16c>)
 8003cfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cfe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d00:	4b1b      	ldr	r3, [pc, #108]	; (8003d70 <HAL_ADC_MspInit+0x16c>)
 8003d02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d06:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d08:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <HAL_ADC_MspInit+0x16c>)
 8003d0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d0e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003d10:	4b17      	ldr	r3, [pc, #92]	; (8003d70 <HAL_ADC_MspInit+0x16c>)
 8003d12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d16:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003d18:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <HAL_ADC_MspInit+0x16c>)
 8003d1a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003d1e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003d20:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <HAL_ADC_MspInit+0x16c>)
 8003d22:	2204      	movs	r2, #4
 8003d24:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d26:	4b12      	ldr	r3, [pc, #72]	; (8003d70 <HAL_ADC_MspInit+0x16c>)
 8003d28:	2203      	movs	r2, #3
 8003d2a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8003d2c:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <HAL_ADC_MspInit+0x16c>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003d32:	4b0f      	ldr	r3, [pc, #60]	; (8003d70 <HAL_ADC_MspInit+0x16c>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003d38:	480d      	ldr	r0, [pc, #52]	; (8003d70 <HAL_ADC_MspInit+0x16c>)
 8003d3a:	f002 fd69 	bl	8006810 <HAL_DMA_Init>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_ADC_MspInit+0x144>
    {
      Error_Handler();
 8003d44:	f00e fee4 	bl	8012b10 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a09      	ldr	r2, [pc, #36]	; (8003d70 <HAL_ADC_MspInit+0x16c>)
 8003d4c:	639a      	str	r2, [r3, #56]	; 0x38
 8003d4e:	4a08      	ldr	r2, [pc, #32]	; (8003d70 <HAL_ADC_MspInit+0x16c>)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003d54:	bf00      	nop
 8003d56:	3730      	adds	r7, #48	; 0x30
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40012000 	.word	0x40012000
 8003d60:	40023800 	.word	0x40023800
 8003d64:	40020800 	.word	0x40020800
 8003d68:	40020000 	.word	0x40020000
 8003d6c:	40020400 	.word	0x40020400
 8003d70:	20000200 	.word	0x20000200
 8003d74:	40026410 	.word	0x40026410

08003d78 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a10      	ldr	r2, [pc, #64]	; (8003dc8 <HAL_ADC_MspDeInit+0x50>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d119      	bne.n	8003dbe <HAL_ADC_MspDeInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8003d8a:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <HAL_ADC_MspDeInit+0x54>)
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8e:	4a0f      	ldr	r2, [pc, #60]	; (8003dcc <HAL_ADC_MspDeInit+0x54>)
 8003d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d94:	6453      	str	r3, [r2, #68]	; 0x44
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    HAL_GPIO_DeInit(GPIOC, TS_Pin|RTS_F_Pin|AQS_Pin|LS_Pin
 8003d96:	213f      	movs	r1, #63	; 0x3f
 8003d98:	480d      	ldr	r0, [pc, #52]	; (8003dd0 <HAL_ADC_MspDeInit+0x58>)
 8003d9a:	f003 fcd3 	bl	8007744 <HAL_GPIO_DeInit>
                          |LTS_R_Pin|LTS_F_Pin);

    HAL_GPIO_DeInit(GPIOA, VS_Pin|RTS_R_Pin|LB_L_Pin|LB_R_Pin
 8003d9e:	21fc      	movs	r1, #252	; 0xfc
 8003da0:	480c      	ldr	r0, [pc, #48]	; (8003dd4 <HAL_ADC_MspDeInit+0x5c>)
 8003da2:	f003 fccf 	bl	8007744 <HAL_GPIO_DeInit>
                          |RPL_L_Pin|RPL_R_Pin);

    HAL_GPIO_DeInit(GPIOB, BL_R_Pin|BL_L_Pin);
 8003da6:	2103      	movs	r1, #3
 8003da8:	480b      	ldr	r0, [pc, #44]	; (8003dd8 <HAL_ADC_MspDeInit+0x60>)
 8003daa:	f003 fccb 	bl	8007744 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	4618      	mov	r0, r3
 8003db4:	f002 fdda 	bl	800696c <HAL_DMA_DeInit>

    /* ADC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC_IRQn);
 8003db8:	2012      	movs	r0, #18
 8003dba:	f002 fc0e 	bl	80065da <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40012000 	.word	0x40012000
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40020800 	.word	0x40020800
 8003dd4:	40020000 	.word	0x40020000
 8003dd8:	40020400 	.word	0x40020400

08003ddc <HAL_CRC_MspInit>:
  /* USER CODE END CRC_Init 2 */

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a0b      	ldr	r2, [pc, #44]	; (8003e18 <HAL_CRC_MspInit+0x3c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d10d      	bne.n	8003e0a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <HAL_CRC_MspInit+0x40>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	4a09      	ldr	r2, [pc, #36]	; (8003e1c <HAL_CRC_MspInit+0x40>)
 8003df8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dfe:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <HAL_CRC_MspInit+0x40>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40023000 	.word	0x40023000
 8003e1c:	40023800 	.word	0x40023800

08003e20 <HAL_CRC_MspDeInit>:

void HAL_CRC_MspDeInit(CRC_HandleTypeDef* crcHandle)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a07      	ldr	r2, [pc, #28]	; (8003e4c <HAL_CRC_MspDeInit+0x2c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d105      	bne.n	8003e3e <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 8003e32:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <HAL_CRC_MspDeInit+0x30>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	4a06      	ldr	r2, [pc, #24]	; (8003e50 <HAL_CRC_MspDeInit+0x30>)
 8003e38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e3c:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40023000 	.word	0x40023000
 8003e50:	40023800 	.word	0x40023800

08003e54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <MX_DMA_Init+0x30>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	4a08      	ldr	r2, [pc, #32]	; (8003e84 <MX_DMA_Init+0x30>)
 8003e64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e68:	6313      	str	r3, [r2, #48]	; 0x30
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <MX_DMA_Init+0x30>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e72:	607b      	str	r3, [r7, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]

}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40023800 	.word	0x40023800

08003e88 <vApplicationTickHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
	Os_Counter++;
 8003e8c:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <vApplicationTickHook+0x18>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3301      	adds	r3, #1
 8003e92:	4a03      	ldr	r2, [pc, #12]	; (8003ea0 <vApplicationTickHook+0x18>)
 8003e94:	6013      	str	r3, [r2, #0]
}
 8003e96:	bf00      	nop
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	20000268 	.word	0x20000268

08003ea4 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
   SystemManager_SetFault(STACK_OVERFLOW_RESET);
 8003eae:	200c      	movs	r0, #12
 8003eb0:	f00e fcf0 	bl	8012894 <SystemManager_SetFault>
   SystemManager_PerformReset();
 8003eb4:	f00e fd18 	bl	80128e8 <SystemManager_PerformReset>
}
 8003eb8:	bf00      	nop
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
	SystemManager_SetFault(MALLOC_FAILED_RESET);
 8003ec4:	200d      	movs	r0, #13
 8003ec6:	f00e fce5 	bl	8012894 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8003eca:	f00e fd0d 	bl	80128e8 <SystemManager_PerformReset>
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Os_SecAlm_AlarmReset */
  Os_SecAlm_AlarmResetHandle = osTimerNew(Os_SecAlm_AlarmReset_Callback, osTimerPeriodic, NULL, &Os_SecAlm_AlarmReset_attributes);
 8003ed8:	4b5d      	ldr	r3, [pc, #372]	; (8004050 <MX_FREERTOS_Init+0x17c>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	2101      	movs	r1, #1
 8003ede:	485d      	ldr	r0, [pc, #372]	; (8004054 <MX_FREERTOS_Init+0x180>)
 8003ee0:	f00a f92c 	bl	800e13c <osTimerNew>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	4a5c      	ldr	r2, [pc, #368]	; (8004058 <MX_FREERTOS_Init+0x184>)
 8003ee8:	6013      	str	r3, [r2, #0]

  /* creation of Os_CenLoc_LockUnlockSequence_Timer */
  Os_CenLoc_LockUnlockSequence_TimerHandle = osTimerNew(Os_CenLoc_LockUnlockSequence_Timer_Callback, osTimerPeriodic, NULL, &Os_CenLoc_LockUnlockSequence_Timer_attributes);
 8003eea:	4b5c      	ldr	r3, [pc, #368]	; (800405c <MX_FREERTOS_Init+0x188>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	2101      	movs	r1, #1
 8003ef0:	485b      	ldr	r0, [pc, #364]	; (8004060 <MX_FREERTOS_Init+0x18c>)
 8003ef2:	f00a f923 	bl	800e13c <osTimerNew>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	4a5a      	ldr	r2, [pc, #360]	; (8004064 <MX_FREERTOS_Init+0x190>)
 8003efa:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmLed_TurnOnCyclic_Timer */
  Os_SecAlmLed_TurnOnCyclic_TimerHandle = osTimerNew(Os_SecAlmLed_TurnOnCyclic_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLed_TurnOnCyclic_Timer_attributes);
 8003efc:	4b5a      	ldr	r3, [pc, #360]	; (8004068 <MX_FREERTOS_Init+0x194>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	2101      	movs	r1, #1
 8003f02:	485a      	ldr	r0, [pc, #360]	; (800406c <MX_FREERTOS_Init+0x198>)
 8003f04:	f00a f91a 	bl	800e13c <osTimerNew>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	4a59      	ldr	r2, [pc, #356]	; (8004070 <MX_FREERTOS_Init+0x19c>)
 8003f0c:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmLedTurnOn_Timer */
  Os_SecAlmLedTurnOn_TimerHandle = osTimerNew(Os_SecAlmLedTurnOn_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLedTurnOn_Timer_attributes);
 8003f0e:	4b59      	ldr	r3, [pc, #356]	; (8004074 <MX_FREERTOS_Init+0x1a0>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	2101      	movs	r1, #1
 8003f14:	4858      	ldr	r0, [pc, #352]	; (8004078 <MX_FREERTOS_Init+0x1a4>)
 8003f16:	f00a f911 	bl	800e13c <osTimerNew>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	4a57      	ldr	r2, [pc, #348]	; (800407c <MX_FREERTOS_Init+0x1a8>)
 8003f1e:	6013      	str	r3, [r2, #0]

  /* creation of Os_FollowMeHome_Timer */
  Os_FollowMeHome_TimerHandle = osTimerNew(Os_FollowMeHome_Timer_Callback, osTimerPeriodic, NULL, &Os_FollowMeHome_Timer_attributes);
 8003f20:	4b57      	ldr	r3, [pc, #348]	; (8004080 <MX_FREERTOS_Init+0x1ac>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	2101      	movs	r1, #1
 8003f26:	4857      	ldr	r0, [pc, #348]	; (8004084 <MX_FREERTOS_Init+0x1b0>)
 8003f28:	f00a f908 	bl	800e13c <osTimerNew>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	4a56      	ldr	r2, [pc, #344]	; (8004088 <MX_FREERTOS_Init+0x1b4>)
 8003f30:	6013      	str	r3, [r2, #0]

  /* creation of Os_TurnSignals_Timer */
  Os_TurnSignals_TimerHandle = osTimerNew(Os_TurnSignals_Timer_Callback, osTimerPeriodic, NULL, &Os_TurnSignals_Timer_attributes);
 8003f32:	4b56      	ldr	r3, [pc, #344]	; (800408c <MX_FREERTOS_Init+0x1b8>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	2101      	movs	r1, #1
 8003f38:	4855      	ldr	r0, [pc, #340]	; (8004090 <MX_FREERTOS_Init+0x1bc>)
 8003f3a:	f00a f8ff 	bl	800e13c <osTimerNew>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4a54      	ldr	r2, [pc, #336]	; (8004094 <MX_FREERTOS_Init+0x1c0>)
 8003f42:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmAlarm_Timer */
  Os_SecAlmAlarm_TimerHandle = osTimerNew(Os_SecAlmAlarm_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmAlarm_Timer_attributes);
 8003f44:	4b54      	ldr	r3, [pc, #336]	; (8004098 <MX_FREERTOS_Init+0x1c4>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	2101      	movs	r1, #1
 8003f4a:	4854      	ldr	r0, [pc, #336]	; (800409c <MX_FREERTOS_Init+0x1c8>)
 8003f4c:	f00a f8f6 	bl	800e13c <osTimerNew>
 8003f50:	4603      	mov	r3, r0
 8003f52:	4a53      	ldr	r2, [pc, #332]	; (80040a0 <MX_FREERTOS_Init+0x1cc>)
 8003f54:	6013      	str	r3, [r2, #0]

  /* creation of Os_PdcR_Buzzer_Timer */
  Os_PdcR_Buzzer_TimerHandle = osTimerNew(Os_PdcR_Buzzer_Timer_Callback, osTimerOnce, NULL, &Os_PdcR_Buzzer_Timer_attributes);
 8003f56:	4b53      	ldr	r3, [pc, #332]	; (80040a4 <MX_FREERTOS_Init+0x1d0>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	4852      	ldr	r0, [pc, #328]	; (80040a8 <MX_FREERTOS_Init+0x1d4>)
 8003f5e:	f00a f8ed 	bl	800e13c <osTimerNew>
 8003f62:	4603      	mov	r3, r0
 8003f64:	4a51      	ldr	r2, [pc, #324]	; (80040ac <MX_FREERTOS_Init+0x1d8>)
 8003f66:	6013      	str	r3, [r2, #0]

  /* creation of Os_PdcF_Buzzer_Timer */
  Os_PdcF_Buzzer_TimerHandle = osTimerNew(Os_PdcF_Buzzer_Timer_Callback, osTimerOnce, NULL, &Os_PdcF_Buzzer_Timer_attributes);
 8003f68:	4b51      	ldr	r3, [pc, #324]	; (80040b0 <MX_FREERTOS_Init+0x1dc>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	4851      	ldr	r0, [pc, #324]	; (80040b4 <MX_FREERTOS_Init+0x1e0>)
 8003f70:	f00a f8e4 	bl	800e13c <osTimerNew>
 8003f74:	4603      	mov	r3, r0
 8003f76:	4a50      	ldr	r2, [pc, #320]	; (80040b8 <MX_FREERTOS_Init+0x1e4>)
 8003f78:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OS_Init */
  OS_InitHandle = osThreadNew(OS_TASK_OS_INIT, NULL, &OS_Init_attributes);
 8003f7a:	4a50      	ldr	r2, [pc, #320]	; (80040bc <MX_FREERTOS_Init+0x1e8>)
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4850      	ldr	r0, [pc, #320]	; (80040c0 <MX_FREERTOS_Init+0x1ec>)
 8003f80:	f00a f834 	bl	800dfec <osThreadNew>
 8003f84:	4603      	mov	r3, r0
 8003f86:	4a4f      	ldr	r2, [pc, #316]	; (80040c4 <MX_FREERTOS_Init+0x1f0>)
 8003f88:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_Main */
  ASIL_APPL_MainHandle = osThreadNew(OS_TASK_ASIL_APPL_Main, NULL, &ASIL_APPL_Main_attributes);
 8003f8a:	4a4f      	ldr	r2, [pc, #316]	; (80040c8 <MX_FREERTOS_Init+0x1f4>)
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	484f      	ldr	r0, [pc, #316]	; (80040cc <MX_FREERTOS_Init+0x1f8>)
 8003f90:	f00a f82c 	bl	800dfec <osThreadNew>
 8003f94:	4603      	mov	r3, r0
 8003f96:	4a4e      	ldr	r2, [pc, #312]	; (80040d0 <MX_FREERTOS_Init+0x1fc>)
 8003f98:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_PostMain */
  ASIL_APPL_PostMainHandle = osThreadNew(OS_TASK_ASIL_APPL_PostMain, NULL, &ASIL_APPL_PostMain_attributes);
 8003f9a:	4a4e      	ldr	r2, [pc, #312]	; (80040d4 <MX_FREERTOS_Init+0x200>)
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	484e      	ldr	r0, [pc, #312]	; (80040d8 <MX_FREERTOS_Init+0x204>)
 8003fa0:	f00a f824 	bl	800dfec <osThreadNew>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	4a4d      	ldr	r2, [pc, #308]	; (80040dc <MX_FREERTOS_Init+0x208>)
 8003fa8:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_PreMain */
  QM_APPL_PreMainHandle = osThreadNew(OS_TASK_QM_APPL_PreMain, NULL, &QM_APPL_PreMain_attributes);
 8003faa:	4a4d      	ldr	r2, [pc, #308]	; (80040e0 <MX_FREERTOS_Init+0x20c>)
 8003fac:	2100      	movs	r1, #0
 8003fae:	484d      	ldr	r0, [pc, #308]	; (80040e4 <MX_FREERTOS_Init+0x210>)
 8003fb0:	f00a f81c 	bl	800dfec <osThreadNew>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	4a4c      	ldr	r2, [pc, #304]	; (80040e8 <MX_FREERTOS_Init+0x214>)
 8003fb8:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_Main */
  QM_APPL_MainHandle = osThreadNew(OS_TASK_QM_APPL_Main, NULL, &QM_APPL_Main_attributes);
 8003fba:	4a4c      	ldr	r2, [pc, #304]	; (80040ec <MX_FREERTOS_Init+0x218>)
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	484c      	ldr	r0, [pc, #304]	; (80040f0 <MX_FREERTOS_Init+0x21c>)
 8003fc0:	f00a f814 	bl	800dfec <osThreadNew>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	4a4b      	ldr	r2, [pc, #300]	; (80040f4 <MX_FREERTOS_Init+0x220>)
 8003fc8:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_PostMain */
  QM_APPL_PostMainHandle = osThreadNew(OS_TASK_QM_APPL_PostMain, NULL, &QM_APPL_PostMain_attributes);
 8003fca:	4a4b      	ldr	r2, [pc, #300]	; (80040f8 <MX_FREERTOS_Init+0x224>)
 8003fcc:	2100      	movs	r1, #0
 8003fce:	484b      	ldr	r0, [pc, #300]	; (80040fc <MX_FREERTOS_Init+0x228>)
 8003fd0:	f00a f80c 	bl	800dfec <osThreadNew>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	4a4a      	ldr	r2, [pc, #296]	; (8004100 <MX_FREERTOS_Init+0x22c>)
 8003fd8:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_PreMain */
  ASIL_BSW_PreMainHandle = osThreadNew(OS_TASK_ASIL_BSW_PreMain, NULL, &ASIL_BSW_PreMain_attributes);
 8003fda:	4a4a      	ldr	r2, [pc, #296]	; (8004104 <MX_FREERTOS_Init+0x230>)
 8003fdc:	2100      	movs	r1, #0
 8003fde:	484a      	ldr	r0, [pc, #296]	; (8004108 <MX_FREERTOS_Init+0x234>)
 8003fe0:	f00a f804 	bl	800dfec <osThreadNew>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	4a49      	ldr	r2, [pc, #292]	; (800410c <MX_FREERTOS_Init+0x238>)
 8003fe8:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_Main */
  ASIL_BSW_MainHandle = osThreadNew(OS_TASK_ASIL_BSW_Main, NULL, &ASIL_BSW_Main_attributes);
 8003fea:	4a49      	ldr	r2, [pc, #292]	; (8004110 <MX_FREERTOS_Init+0x23c>)
 8003fec:	2100      	movs	r1, #0
 8003fee:	4849      	ldr	r0, [pc, #292]	; (8004114 <MX_FREERTOS_Init+0x240>)
 8003ff0:	f009 fffc 	bl	800dfec <osThreadNew>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	4a48      	ldr	r2, [pc, #288]	; (8004118 <MX_FREERTOS_Init+0x244>)
 8003ff8:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_PostMain */
  ASIL_BSW_PostMainHandle = osThreadNew(OS_TASK_ASIL_BSW_PostMain, NULL, &ASIL_BSW_PostMain_attributes);
 8003ffa:	4a48      	ldr	r2, [pc, #288]	; (800411c <MX_FREERTOS_Init+0x248>)
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	4848      	ldr	r0, [pc, #288]	; (8004120 <MX_FREERTOS_Init+0x24c>)
 8004000:	f009 fff4 	bl	800dfec <osThreadNew>
 8004004:	4603      	mov	r3, r0
 8004006:	4a47      	ldr	r2, [pc, #284]	; (8004124 <MX_FREERTOS_Init+0x250>)
 8004008:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_PreMain */
  QM_BSW_PreMainHandle = osThreadNew(OS_TASK_QM_BSW_PreMain, NULL, &QM_BSW_PreMain_attributes);
 800400a:	4a47      	ldr	r2, [pc, #284]	; (8004128 <MX_FREERTOS_Init+0x254>)
 800400c:	2100      	movs	r1, #0
 800400e:	4847      	ldr	r0, [pc, #284]	; (800412c <MX_FREERTOS_Init+0x258>)
 8004010:	f009 ffec 	bl	800dfec <osThreadNew>
 8004014:	4603      	mov	r3, r0
 8004016:	4a46      	ldr	r2, [pc, #280]	; (8004130 <MX_FREERTOS_Init+0x25c>)
 8004018:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_Main */
  QM_BSW_MainHandle = osThreadNew(OS_TASK_QM_BSW_Main, NULL, &QM_BSW_Main_attributes);
 800401a:	4a46      	ldr	r2, [pc, #280]	; (8004134 <MX_FREERTOS_Init+0x260>)
 800401c:	2100      	movs	r1, #0
 800401e:	4846      	ldr	r0, [pc, #280]	; (8004138 <MX_FREERTOS_Init+0x264>)
 8004020:	f009 ffe4 	bl	800dfec <osThreadNew>
 8004024:	4603      	mov	r3, r0
 8004026:	4a45      	ldr	r2, [pc, #276]	; (800413c <MX_FREERTOS_Init+0x268>)
 8004028:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_PostMain */
  QM_BSW_PostMainHandle = osThreadNew(OS_TASK_QM_BSW_PostMain, NULL, &QM_BSW_PostMain_attributes);
 800402a:	4a45      	ldr	r2, [pc, #276]	; (8004140 <MX_FREERTOS_Init+0x26c>)
 800402c:	2100      	movs	r1, #0
 800402e:	4845      	ldr	r0, [pc, #276]	; (8004144 <MX_FREERTOS_Init+0x270>)
 8004030:	f009 ffdc 	bl	800dfec <osThreadNew>
 8004034:	4603      	mov	r3, r0
 8004036:	4a44      	ldr	r2, [pc, #272]	; (8004148 <MX_FREERTOS_Init+0x274>)
 8004038:	6013      	str	r3, [r2, #0]

  /* creation of I2C_ISR */
  I2C_ISRHandle = osThreadNew(OS_TASK_I2C_ISR, NULL, &I2C_ISR_attributes);
 800403a:	4a44      	ldr	r2, [pc, #272]	; (800414c <MX_FREERTOS_Init+0x278>)
 800403c:	2100      	movs	r1, #0
 800403e:	4844      	ldr	r0, [pc, #272]	; (8004150 <MX_FREERTOS_Init+0x27c>)
 8004040:	f009 ffd4 	bl	800dfec <osThreadNew>
 8004044:	4603      	mov	r3, r0
 8004046:	4a43      	ldr	r2, [pc, #268]	; (8004154 <MX_FREERTOS_Init+0x280>)
 8004048:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

}
 800404a:	bf00      	nop
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	08013a9c 	.word	0x08013a9c
 8004054:	080042f1 	.word	0x080042f1
 8004058:	200002e0 	.word	0x200002e0
 800405c:	08013aac 	.word	0x08013aac
 8004060:	08004309 	.word	0x08004309
 8004064:	200002e4 	.word	0x200002e4
 8004068:	08013abc 	.word	0x08013abc
 800406c:	08004371 	.word	0x08004371
 8004070:	200002e8 	.word	0x200002e8
 8004074:	08013acc 	.word	0x08013acc
 8004078:	08004399 	.word	0x08004399
 800407c:	200002ec 	.word	0x200002ec
 8004080:	08013adc 	.word	0x08013adc
 8004084:	080043c1 	.word	0x080043c1
 8004088:	200002f0 	.word	0x200002f0
 800408c:	08013aec 	.word	0x08013aec
 8004090:	080043e9 	.word	0x080043e9
 8004094:	200002f4 	.word	0x200002f4
 8004098:	08013afc 	.word	0x08013afc
 800409c:	08004459 	.word	0x08004459
 80040a0:	200002f8 	.word	0x200002f8
 80040a4:	08013b0c 	.word	0x08013b0c
 80040a8:	08004481 	.word	0x08004481
 80040ac:	200002fc 	.word	0x200002fc
 80040b0:	08013b1c 	.word	0x08013b1c
 80040b4:	0800449d 	.word	0x0800449d
 80040b8:	20000300 	.word	0x20000300
 80040bc:	080138c8 	.word	0x080138c8
 80040c0:	08004159 	.word	0x08004159
 80040c4:	200002ac 	.word	0x200002ac
 80040c8:	080138ec 	.word	0x080138ec
 80040cc:	0800416d 	.word	0x0800416d
 80040d0:	200002b0 	.word	0x200002b0
 80040d4:	08013910 	.word	0x08013910
 80040d8:	08004195 	.word	0x08004195
 80040dc:	200002b4 	.word	0x200002b4
 80040e0:	08013934 	.word	0x08013934
 80040e4:	080041b1 	.word	0x080041b1
 80040e8:	200002b8 	.word	0x200002b8
 80040ec:	08013958 	.word	0x08013958
 80040f0:	080041cd 	.word	0x080041cd
 80040f4:	200002bc 	.word	0x200002bc
 80040f8:	0801397c 	.word	0x0801397c
 80040fc:	080041e9 	.word	0x080041e9
 8004100:	200002c0 	.word	0x200002c0
 8004104:	080139a0 	.word	0x080139a0
 8004108:	0800420d 	.word	0x0800420d
 800410c:	200002c4 	.word	0x200002c4
 8004110:	080139c4 	.word	0x080139c4
 8004114:	08004229 	.word	0x08004229
 8004118:	200002c8 	.word	0x200002c8
 800411c:	080139e8 	.word	0x080139e8
 8004120:	08004249 	.word	0x08004249
 8004124:	200002cc 	.word	0x200002cc
 8004128:	08013a0c 	.word	0x08013a0c
 800412c:	08004265 	.word	0x08004265
 8004130:	200002d0 	.word	0x200002d0
 8004134:	08013a30 	.word	0x08013a30
 8004138:	08004289 	.word	0x08004289
 800413c:	200002d4 	.word	0x200002d4
 8004140:	08013a54 	.word	0x08013a54
 8004144:	080042a5 	.word	0x080042a5
 8004148:	200002d8 	.word	0x200002d8
 800414c:	08013a78 	.word	0x08013a78
 8004150:	080042c1 	.word	0x080042c1
 8004154:	200002dc 	.word	0x200002dc

08004158 <OS_TASK_OS_INIT>:

/* USER CODE BEGIN Header_OS_TASK_OS_INIT */
/* USER CODE END Header_OS_TASK_OS_INIT */
void OS_TASK_OS_INIT(void *argument)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_OS_INIT */
	for(;;)
	{
		EcuM_DriverInit();
 8004160:	f00e fa0e 	bl	8012580 <EcuM_DriverInit>
		vTaskSuspend(NULL);
 8004164:	2000      	movs	r0, #0
 8004166:	f00b fbb7 	bl	800f8d8 <vTaskSuspend>
		EcuM_DriverInit();
 800416a:	e7f9      	b.n	8004160 <OS_TASK_OS_INIT+0x8>

0800416c <OS_TASK_ASIL_APPL_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_APPL_Main */
/* USER CODE END Header_OS_TASK_ASIL_APPL_Main */
void OS_TASK_ASIL_APPL_Main(void *argument)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_Main */
	for(;;)
	{
		Rte_Runnable_Btc_MainFunction();
 8004174:	f00d fb64 	bl	8011840 <Rte_Runnable_Btc_MainFunction>
		Rte_Runnable_CenLoc_MainFunction();
 8004178:	f00d fb68 	bl	801184c <Rte_Runnable_CenLoc_MainFunction>
		Rte_Runnable_ExtLights_MainFunction();
 800417c:	f00d fb6c 	bl	8011858 <Rte_Runnable_ExtLights_MainFunction>
		Rte_Runnable_IntLights_MainFunction();
 8004180:	f00d fb70 	bl	8011864 <Rte_Runnable_IntLights_MainFunction>
		vTaskDelayUntil(&ASIL_APPL_Main, pdMS_TO_TICKS(5));
 8004184:	2105      	movs	r1, #5
 8004186:	4802      	ldr	r0, [pc, #8]	; (8004190 <OS_TASK_ASIL_APPL_Main+0x24>)
 8004188:	f00b fb28 	bl	800f7dc <vTaskDelayUntil>
		Rte_Runnable_Btc_MainFunction();
 800418c:	e7f2      	b.n	8004174 <OS_TASK_ASIL_APPL_Main+0x8>
 800418e:	bf00      	nop
 8004190:	20000280 	.word	0x20000280

08004194 <OS_TASK_ASIL_APPL_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_APPL_PostMain */
/* USER CODE END Header_OS_TASK_ASIL_APPL_PostMain */
void OS_TASK_ASIL_APPL_PostMain(void *argument)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_PostMain */
	for(;;)
	{
		Rte_Runnable_DiagCtrl_MainFunction();
 800419c:	f00d fbb9 	bl	8011912 <Rte_Runnable_DiagCtrl_MainFunction>
		vTaskDelayUntil(&ASIL_APPL_PostMain, pdMS_TO_TICKS(1000));
 80041a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80041a4:	4801      	ldr	r0, [pc, #4]	; (80041ac <OS_TASK_ASIL_APPL_PostMain+0x18>)
 80041a6:	f00b fb19 	bl	800f7dc <vTaskDelayUntil>
		Rte_Runnable_DiagCtrl_MainFunction();
 80041aa:	e7f7      	b.n	800419c <OS_TASK_ASIL_APPL_PostMain+0x8>
 80041ac:	20000284 	.word	0x20000284

080041b0 <OS_TASK_QM_APPL_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_PreMain */
/* USER CODE END Header_OS_TASK_QM_APPL_PreMain */
void OS_TASK_QM_APPL_PreMain(void *argument)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_PreMain */
	for(;;)
	{
		Rte_Runnable_SecAlm_MainFunction();
 80041b8:	f00d fb5a 	bl	8011870 <Rte_Runnable_SecAlm_MainFunction>
		vTaskDelayUntil(&QM_APPL_PreMain, pdMS_TO_TICKS(5));
 80041bc:	2105      	movs	r1, #5
 80041be:	4802      	ldr	r0, [pc, #8]	; (80041c8 <OS_TASK_QM_APPL_PreMain+0x18>)
 80041c0:	f00b fb0c 	bl	800f7dc <vTaskDelayUntil>
		Rte_Runnable_SecAlm_MainFunction();
 80041c4:	e7f8      	b.n	80041b8 <OS_TASK_QM_APPL_PreMain+0x8>
 80041c6:	bf00      	nop
 80041c8:	20000288 	.word	0x20000288

080041cc <OS_TASK_QM_APPL_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_Main */
/* USER CODE END Header_OS_TASK_QM_APPL_Main */
void OS_TASK_QM_APPL_Main(void *argument)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_Main */
	for(;;)
	{
		Rte_Runnable_Pdc_MainFunction();
 80041d4:	f00d fba9 	bl	801192a <Rte_Runnable_Pdc_MainFunction>
		vTaskDelayUntil(&QM_APPL_Main, pdMS_TO_TICKS(100));
 80041d8:	2164      	movs	r1, #100	; 0x64
 80041da:	4802      	ldr	r0, [pc, #8]	; (80041e4 <OS_TASK_QM_APPL_Main+0x18>)
 80041dc:	f00b fafe 	bl	800f7dc <vTaskDelayUntil>
		Rte_Runnable_Pdc_MainFunction();
 80041e0:	e7f8      	b.n	80041d4 <OS_TASK_QM_APPL_Main+0x8>
 80041e2:	bf00      	nop
 80041e4:	2000028c 	.word	0x2000028c

080041e8 <OS_TASK_QM_APPL_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_PostMain */
/* USER CODE END Header_OS_TASK_QM_APPL_PostMain */
void OS_TASK_QM_APPL_PostMain(void *argument)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_PostMain */
	for(;;)
	{
		vTaskResume(I2C_ISRHandle);
 80041f0:	4b04      	ldr	r3, [pc, #16]	; (8004204 <OS_TASK_QM_APPL_PostMain+0x1c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f00b fc17 	bl	800fa28 <vTaskResume>
		vTaskDelayUntil(&QM_APPL_PostMain, pdMS_TO_TICKS(250));
 80041fa:	21fa      	movs	r1, #250	; 0xfa
 80041fc:	4802      	ldr	r0, [pc, #8]	; (8004208 <OS_TASK_QM_APPL_PostMain+0x20>)
 80041fe:	f00b faed 	bl	800f7dc <vTaskDelayUntil>
		vTaskResume(I2C_ISRHandle);
 8004202:	e7f5      	b.n	80041f0 <OS_TASK_QM_APPL_PostMain+0x8>
 8004204:	200002dc 	.word	0x200002dc
 8004208:	20000290 	.word	0x20000290

0800420c <OS_TASK_ASIL_BSW_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_PreMain */
/* USER CODE END Header_OS_TASK_ASIL_BSW_PreMain */
void OS_TASK_ASIL_BSW_PreMain(void *argument)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_PreMain */
	for(;;)
	{
		Rte_Runnable_Wdg_MainFunction();
 8004214:	f00d f97a 	bl	801150c <Rte_Runnable_Wdg_MainFunction>
		vTaskDelayUntil(&ASIL_BSW_PreMain, pdMS_TO_TICKS(5));
 8004218:	2105      	movs	r1, #5
 800421a:	4802      	ldr	r0, [pc, #8]	; (8004224 <OS_TASK_ASIL_BSW_PreMain+0x18>)
 800421c:	f00b fade 	bl	800f7dc <vTaskDelayUntil>
		Rte_Runnable_Wdg_MainFunction();
 8004220:	e7f8      	b.n	8004214 <OS_TASK_ASIL_BSW_PreMain+0x8>
 8004222:	bf00      	nop
 8004224:	20000294 	.word	0x20000294

08004228 <OS_TASK_ASIL_BSW_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_Main */
/* USER CODE END Header_OS_TASK_ASIL_BSW_Main */
void OS_TASK_ASIL_BSW_Main(void *argument)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_Main */
	for(;;)
	{
		Rte_Runnable_Uart_MainFunction();
 8004230:	f00d f97e 	bl	8011530 <Rte_Runnable_Uart_MainFunction>
		Rte_Runnable_Crc_MainFunction();
 8004234:	f00d f964 	bl	8011500 <Rte_Runnable_Crc_MainFunction>
#if(CAN_SPI_COMMUNICATION_ENABLE == STD_ON)
		Rte_Runnable_Spi_MainFunction();
		Rte_Runnable_Can_MainFunction();
#endif
		vTaskDelayUntil(&ASIL_BSW_Main, pdMS_TO_TICKS(5));
 8004238:	2105      	movs	r1, #5
 800423a:	4802      	ldr	r0, [pc, #8]	; (8004244 <OS_TASK_ASIL_BSW_Main+0x1c>)
 800423c:	f00b face 	bl	800f7dc <vTaskDelayUntil>
		Rte_Runnable_Uart_MainFunction();
 8004240:	e7f6      	b.n	8004230 <OS_TASK_ASIL_BSW_Main+0x8>
 8004242:	bf00      	nop
 8004244:	20000298 	.word	0x20000298

08004248 <OS_TASK_ASIL_BSW_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_PostMain */
/* USER CODE END Header_OS_TASK_ASIL_BSW_PostMain */
void OS_TASK_ASIL_BSW_PostMain(void *argument)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_PostMain */
	for(;;)
	{
		Rte_Runnable_Tim_MainFunction();
 8004250:	f00d f968 	bl	8011524 <Rte_Runnable_Tim_MainFunction>
		vTaskDelayUntil(&ASIL_BSW_PostMain, pdMS_TO_TICKS(5));
 8004254:	2105      	movs	r1, #5
 8004256:	4802      	ldr	r0, [pc, #8]	; (8004260 <OS_TASK_ASIL_BSW_PostMain+0x18>)
 8004258:	f00b fac0 	bl	800f7dc <vTaskDelayUntil>
		Rte_Runnable_Tim_MainFunction();
 800425c:	e7f8      	b.n	8004250 <OS_TASK_ASIL_BSW_PostMain+0x8>
 800425e:	bf00      	nop
 8004260:	2000029c 	.word	0x2000029c

08004264 <OS_TASK_QM_BSW_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_PreMain */
/* USER CODE END Header_OS_TASK_QM_BSW_PreMain */
void OS_TASK_QM_BSW_PreMain(void *argument)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_PreMain */
	for(;;)
	{
		Rte_Runnable_EcuM_MainFunction();
 800426c:	f00d f93c 	bl	80114e8 <Rte_Runnable_EcuM_MainFunction>
		Rte_Runnable_SystemManager_MainFunction();
 8004270:	f00d f940 	bl	80114f4 <Rte_Runnable_SystemManager_MainFunction>
		Rte_Runnable_Adc_MainFunction();
 8004274:	f00d f950 	bl	8011518 <Rte_Runnable_Adc_MainFunction>
		vTaskDelayUntil(&QM_BSW_PreMain, pdMS_TO_TICKS(5));
 8004278:	2105      	movs	r1, #5
 800427a:	4802      	ldr	r0, [pc, #8]	; (8004284 <OS_TASK_QM_BSW_PreMain+0x20>)
 800427c:	f00b faae 	bl	800f7dc <vTaskDelayUntil>
		Rte_Runnable_EcuM_MainFunction();
 8004280:	e7f4      	b.n	800426c <OS_TASK_QM_BSW_PreMain+0x8>
 8004282:	bf00      	nop
 8004284:	200002a0 	.word	0x200002a0

08004288 <OS_TASK_QM_BSW_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_Main */
/* USER CODE END Header_OS_TASK_QM_BSW_Main */
void OS_TASK_QM_BSW_Main(void *argument)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_Main */
	for(;;)
	{
		Rte_Runnable_I2c_MainFunction();
 8004290:	f00d fb51 	bl	8011936 <Rte_Runnable_I2c_MainFunction>
		vTaskDelayUntil(&QM_BSW_Main, pdMS_TO_TICKS(5));
 8004294:	2105      	movs	r1, #5
 8004296:	4802      	ldr	r0, [pc, #8]	; (80042a0 <OS_TASK_QM_BSW_Main+0x18>)
 8004298:	f00b faa0 	bl	800f7dc <vTaskDelayUntil>
		Rte_Runnable_I2c_MainFunction();
 800429c:	e7f8      	b.n	8004290 <OS_TASK_QM_BSW_Main+0x8>
 800429e:	bf00      	nop
 80042a0:	200002a4 	.word	0x200002a4

080042a4 <OS_TASK_QM_BSW_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_PostMain */
/* USER CODE END Header_OS_TASK_QM_BSW_PostMain */
void OS_TASK_QM_BSW_PostMain(void *argument)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_PostMain */
  for(;;)
  {
	  Rte_Runnable_Dem_MainFunction();
 80042ac:	f00d fb49 	bl	8011942 <Rte_Runnable_Dem_MainFunction>
	  vTaskDelayUntil(&QM_BSW_PostMain, pdMS_TO_TICKS(1000));
 80042b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80042b4:	4801      	ldr	r0, [pc, #4]	; (80042bc <OS_TASK_QM_BSW_PostMain+0x18>)
 80042b6:	f00b fa91 	bl	800f7dc <vTaskDelayUntil>
	  Rte_Runnable_Dem_MainFunction();
 80042ba:	e7f7      	b.n	80042ac <OS_TASK_QM_BSW_PostMain+0x8>
 80042bc:	200002a8 	.word	0x200002a8

080042c0 <OS_TASK_I2C_ISR>:
}

/* USER CODE BEGIN Header_OS_TASK_I2C_ISR */
/* USER CODE END Header_OS_TASK_I2C_ISR */
void OS_TASK_I2C_ISR(void *argument)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_I2C_ISR */
	for(;;)
	{
		if(I2c_Lcd_Init_Flag == STD_LOW)
 80042c8:	4b08      	ldr	r3, [pc, #32]	; (80042ec <OS_TASK_I2C_ISR+0x2c>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d102      	bne.n	80042d6 <OS_TASK_I2C_ISR+0x16>
		{
			I2cLcd_Init();
 80042d0:	f7ff f996 	bl	8003600 <I2cLcd_Init>
 80042d4:	e005      	b.n	80042e2 <OS_TASK_I2C_ISR+0x22>
		}
		else if(I2c_Lcd_Init_Flag == STD_HIGH)
 80042d6:	4b05      	ldr	r3, [pc, #20]	; (80042ec <OS_TASK_I2C_ISR+0x2c>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <OS_TASK_I2C_ISR+0x22>
		{
			Rte_Runnable_Hvac_MainFunction();
 80042de:	f00d fb1e 	bl	801191e <Rte_Runnable_Hvac_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		vTaskSuspend(NULL);
 80042e2:	2000      	movs	r0, #0
 80042e4:	f00b faf8 	bl	800f8d8 <vTaskSuspend>
		if(I2c_Lcd_Init_Flag == STD_LOW)
 80042e8:	e7ee      	b.n	80042c8 <OS_TASK_I2C_ISR+0x8>
 80042ea:	bf00      	nop
 80042ec:	2000027d 	.word	0x2000027d

080042f0 <Os_SecAlm_AlarmReset_Callback>:
  /* USER CODE END OS_TASK_I2C_ISR */
}

/* Os_SecAlm_AlarmReset_Callback function */
void Os_SecAlm_AlarmReset_Callback(void *argument)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlm_AlarmReset_Callback */
	/* Reset the security alarm counter trigger. */
	Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter((uint16*)0);
 80042f8:	2000      	movs	r0, #0
 80042fa:	f00d fa91 	bl	8011820 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>
  /* USER CODE END Os_SecAlm_AlarmReset_Callback */
}
 80042fe:	bf00      	nop
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
	...

08004308 <Os_CenLoc_LockUnlockSequence_Timer_Callback>:

/* Os_CenLoc_LockUnlockSequence_Timer_Callback function */
void Os_CenLoc_LockUnlockSequence_Timer_Callback(void *argument)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_CenLoc_LockUnlockSequence_Timer_Callback */
	/* If the counter variable for the lock unlock turn signals sequence is less than or equal to 6
	 * Then if there is either a lock or an unlock sequence increase the counter to process the states
	 * in the application. */
	if(Os_LockUnlockSequence_Counter <= 6
 8004310:	4b14      	ldr	r3, [pc, #80]	; (8004364 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b06      	cmp	r3, #6
 8004316:	d819      	bhi.n	800434c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
		&& ((Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_HIGH)
 8004318:	4b13      	ldr	r3, [pc, #76]	; (8004368 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d103      	bne.n	8004328 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x20>
 8004320:	4b12      	ldr	r3, [pc, #72]	; (800436c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d007      	beq.n	8004338 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x30>
		|| (Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_LOW)))
 8004328:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d10d      	bne.n	800434c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
 8004330:	4b0e      	ldr	r3, [pc, #56]	; (800436c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d109      	bne.n	800434c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
	{
		Os_LockUnlockSequence_Counter = Os_LockUnlockSequence_Counter + 1;
 8004338:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	3301      	adds	r3, #1
 800433e:	b2da      	uxtb	r2, r3
 8004340:	4b08      	ldr	r3, [pc, #32]	; (8004364 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8004342:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(&Os_LockUnlockSequence_Counter);
 8004344:	4807      	ldr	r0, [pc, #28]	; (8004364 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8004346:	f00d f83f 	bl	80113c8 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>
 800434a:	e006      	b.n	800435a <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x52>
	}
	else
	{
		/* Update the counter with out of bounds value to prevent unexpected triggering. */
		Os_LockUnlockSequence_Counter = 7;
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 800434e:	2207      	movs	r2, #7
 8004350:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(&Os_LockUnlockSequence_Counter);
 8004352:	4804      	ldr	r0, [pc, #16]	; (8004364 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8004354:	f00d f838 	bl	80113c8 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>
	}

  /* USER CODE END Os_CenLoc_LockUnlockSequence_Timer_Callback */
}
 8004358:	bf00      	nop
 800435a:	bf00      	nop
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	2000026c 	.word	0x2000026c
 8004368:	200000ae 	.word	0x200000ae
 800436c:	200000b6 	.word	0x200000b6

08004370 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback>:

/* Os_SecAlmLed_TurnOnCyclic_Timer_Callback function */
void Os_SecAlmLed_TurnOnCyclic_Timer_Callback(void *argument)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmLed_TurnOnCyclic_Timer_Callback */
	/* Increase the counter variable used in the timer for the alarm LED
	 * that expires every 3,75 seconds. */
	Os_TurnOnCyclic_Counter = Os_TurnOnCyclic_Counter + 1;
 8004378:	4b06      	ldr	r3, [pc, #24]	; (8004394 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	3301      	adds	r3, #1
 800437e:	b2da      	uxtb	r2, r3
 8004380:	4b04      	ldr	r3, [pc, #16]	; (8004394 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8004382:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter(&Os_TurnOnCyclic_Counter);
 8004384:	4803      	ldr	r0, [pc, #12]	; (8004394 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8004386:	f00d f80f 	bl	80113a8 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter>
  /* USER CODE END Os_SecAlmLed_TurnOnCyclic_Timer_Callback */
}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	2000026d 	.word	0x2000026d

08004398 <Os_SecAlmLedTurnOn_Timer_Callback>:

/* Os_SecAlmLedTurnOn_Timer_Callback function */
void Os_SecAlmLedTurnOn_Timer_Callback(void *argument)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmLedTurnOn_Timer_Callback */
	/* Increase the counter variable used in the turning on the alarm LED for 0,25 seconds. */
	Os_TurnOnLed_Counter = Os_TurnOnLed_Counter + 1;
 80043a0:	4b06      	ldr	r3, [pc, #24]	; (80043bc <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	3301      	adds	r3, #1
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	4b04      	ldr	r3, [pc, #16]	; (80043bc <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 80043aa:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter(&Os_TurnOnLed_Counter);
 80043ac:	4803      	ldr	r0, [pc, #12]	; (80043bc <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 80043ae:	f00c ffeb 	bl	8011388 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter>
  /* USER CODE END Os_SecAlmLedTurnOn_Timer_Callback */
}
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	2000026e 	.word	0x2000026e

080043c0 <Os_FollowMeHome_Timer_Callback>:

/* Os_FollowMeHome_Timer_Callback function */
void Os_FollowMeHome_Timer_Callback(void *argument)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_FollowMeHome_Timer_Callback */
	/* Increase the counter variable used in the follow me home concept when the timer
	 * period expires for the lights to go off. */
	Os_FollowMeHome_Counter = Os_FollowMeHome_Counter + 1;
 80043c8:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <Os_FollowMeHome_Timer_Callback+0x24>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	3301      	adds	r3, #1
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	4b04      	ldr	r3, [pc, #16]	; (80043e4 <Os_FollowMeHome_Timer_Callback+0x24>)
 80043d2:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter(&Os_FollowMeHome_Counter);
 80043d4:	4803      	ldr	r0, [pc, #12]	; (80043e4 <Os_FollowMeHome_Timer_Callback+0x24>)
 80043d6:	f00c ffc7 	bl	8011368 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>
  /* USER CODE END Os_FollowMeHome_Timer_Callback */
}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	2000026f 	.word	0x2000026f

080043e8 <Os_TurnSignals_Timer_Callback>:

/* Os_TurnSignals_Timer_Callback function */
void Os_TurnSignals_Timer_Callback(void *argument)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_TurnSignals_Timer_Callback */
	/* Increase the respective counter on request from the specific light in turn signals. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 80043f0:	4b13      	ldr	r3, [pc, #76]	; (8004440 <Os_TurnSignals_Timer_Callback+0x58>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d107      	bne.n	8004408 <Os_TurnSignals_Timer_Callback+0x20>
	{
		Os_Lts_Counter = Os_Lts_Counter + 1;
 80043f8:	4b12      	ldr	r3, [pc, #72]	; (8004444 <Os_TurnSignals_Timer_Callback+0x5c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3301      	adds	r3, #1
 80043fe:	4a11      	ldr	r2, [pc, #68]	; (8004444 <Os_TurnSignals_Timer_Callback+0x5c>)
 8004400:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(&Os_Lts_Counter);
 8004402:	4810      	ldr	r0, [pc, #64]	; (8004444 <Os_TurnSignals_Timer_Callback+0x5c>)
 8004404:	f00d f9cc 	bl	80117a0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8004408:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <Os_TurnSignals_Timer_Callback+0x60>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d107      	bne.n	8004420 <Os_TurnSignals_Timer_Callback+0x38>
	{
		Os_Rts_Counter = Os_Rts_Counter + 1;
 8004410:	4b0e      	ldr	r3, [pc, #56]	; (800444c <Os_TurnSignals_Timer_Callback+0x64>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3301      	adds	r3, #1
 8004416:	4a0d      	ldr	r2, [pc, #52]	; (800444c <Os_TurnSignals_Timer_Callback+0x64>)
 8004418:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(&Os_Rts_Counter);
 800441a:	480c      	ldr	r0, [pc, #48]	; (800444c <Os_TurnSignals_Timer_Callback+0x64>)
 800441c:	f00d f9b0 	bl	8011780 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState == STD_HIGH)
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <Os_TurnSignals_Timer_Callback+0x68>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d107      	bne.n	8004438 <Os_TurnSignals_Timer_Callback+0x50>
	{
		Os_HL_Counter = Os_HL_Counter + 1;
 8004428:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <Os_TurnSignals_Timer_Callback+0x6c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3301      	adds	r3, #1
 800442e:	4a09      	ldr	r2, [pc, #36]	; (8004454 <Os_TurnSignals_Timer_Callback+0x6c>)
 8004430:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(&Os_HL_Counter);
 8004432:	4808      	ldr	r0, [pc, #32]	; (8004454 <Os_TurnSignals_Timer_Callback+0x6c>)
 8004434:	f00d f9c4 	bl	80117c0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>
	else
	{
		/* do nothing */
	}
  /* USER CODE END Os_TurnSignals_Timer_Callback */
}
 8004438:	bf00      	nop
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	200000e2 	.word	0x200000e2
 8004444:	20000270 	.word	0x20000270
 8004448:	200000e3 	.word	0x200000e3
 800444c:	20000274 	.word	0x20000274
 8004450:	200000e6 	.word	0x200000e6
 8004454:	20000278 	.word	0x20000278

08004458 <Os_SecAlmAlarm_Timer_Callback>:

/* Os_SecAlmAlarm_Timer_Callback function */
void Os_SecAlmAlarm_Timer_Callback(void *argument)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmAlarm_Timer_Callback */
	/* Increase the security alarm trigger counter when the alarm is on. */
	Os_Alarm_Counter = Os_Alarm_Counter + 1;
 8004460:	4b06      	ldr	r3, [pc, #24]	; (800447c <Os_SecAlmAlarm_Timer_Callback+0x24>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	3301      	adds	r3, #1
 8004466:	b2da      	uxtb	r2, r3
 8004468:	4b04      	ldr	r3, [pc, #16]	; (800447c <Os_SecAlmAlarm_Timer_Callback+0x24>)
 800446a:	701a      	strb	r2, [r3, #0]
	Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(&Os_Alarm_Counter);
 800446c:	4803      	ldr	r0, [pc, #12]	; (800447c <Os_SecAlmAlarm_Timer_Callback+0x24>)
 800446e:	f00d f9c7 	bl	8011800 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>
  /* USER CODE END Os_SecAlmAlarm_Timer_Callback */
}
 8004472:	bf00      	nop
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	2000027c 	.word	0x2000027c

08004480 <Os_PdcR_Buzzer_Timer_Callback>:

/* Os_PdcR_Buzzer_Timer_Callback function */
void Os_PdcR_Buzzer_Timer_Callback(void *argument)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_PdcR_Buzzer_Timer_Callback */
	HAL_GPIO_TogglePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN);
 8004488:	2120      	movs	r1, #32
 800448a:	4803      	ldr	r0, [pc, #12]	; (8004498 <Os_PdcR_Buzzer_Timer_Callback+0x18>)
 800448c:	f003 fa57 	bl	800793e <HAL_GPIO_TogglePin>
  /* USER CODE END Os_PdcR_Buzzer_Timer_Callback */
}
 8004490:	bf00      	nop
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40020400 	.word	0x40020400

0800449c <Os_PdcF_Buzzer_Timer_Callback>:

/* Os_PdcF_Buzzer_Timer_Callback function */
void Os_PdcF_Buzzer_Timer_Callback(void *argument)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_PdcF_Buzzer_Timer_Callback */
	HAL_GPIO_TogglePin(PDCF_BUZZER_PORT, PDCF_BUZZER_PIN);
 80044a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044a8:	4803      	ldr	r0, [pc, #12]	; (80044b8 <Os_PdcF_Buzzer_Timer_Callback+0x1c>)
 80044aa:	f003 fa48 	bl	800793e <HAL_GPIO_TogglePin>
  /* USER CODE END Os_PdcF_Buzzer_Timer_Callback */
}
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40020800 	.word	0x40020800

080044bc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08a      	sub	sp, #40	; 0x28
 80044c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044c2:	f107 0314 	add.w	r3, r7, #20
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	605a      	str	r2, [r3, #4]
 80044cc:	609a      	str	r2, [r3, #8]
 80044ce:	60da      	str	r2, [r3, #12]
 80044d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044d2:	2300      	movs	r3, #0
 80044d4:	613b      	str	r3, [r7, #16]
 80044d6:	4b4d      	ldr	r3, [pc, #308]	; (800460c <MX_GPIO_Init+0x150>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	4a4c      	ldr	r2, [pc, #304]	; (800460c <MX_GPIO_Init+0x150>)
 80044dc:	f043 0304 	orr.w	r3, r3, #4
 80044e0:	6313      	str	r3, [r2, #48]	; 0x30
 80044e2:	4b4a      	ldr	r3, [pc, #296]	; (800460c <MX_GPIO_Init+0x150>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	4b46      	ldr	r3, [pc, #280]	; (800460c <MX_GPIO_Init+0x150>)
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	4a45      	ldr	r2, [pc, #276]	; (800460c <MX_GPIO_Init+0x150>)
 80044f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044fc:	6313      	str	r3, [r2, #48]	; 0x30
 80044fe:	4b43      	ldr	r3, [pc, #268]	; (800460c <MX_GPIO_Init+0x150>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800450a:	2300      	movs	r3, #0
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	4b3f      	ldr	r3, [pc, #252]	; (800460c <MX_GPIO_Init+0x150>)
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	4a3e      	ldr	r2, [pc, #248]	; (800460c <MX_GPIO_Init+0x150>)
 8004514:	f043 0301 	orr.w	r3, r3, #1
 8004518:	6313      	str	r3, [r2, #48]	; 0x30
 800451a:	4b3c      	ldr	r3, [pc, #240]	; (800460c <MX_GPIO_Init+0x150>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	60bb      	str	r3, [r7, #8]
 8004524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004526:	2300      	movs	r3, #0
 8004528:	607b      	str	r3, [r7, #4]
 800452a:	4b38      	ldr	r3, [pc, #224]	; (800460c <MX_GPIO_Init+0x150>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452e:	4a37      	ldr	r2, [pc, #220]	; (800460c <MX_GPIO_Init+0x150>)
 8004530:	f043 0302 	orr.w	r3, r3, #2
 8004534:	6313      	str	r3, [r2, #48]	; 0x30
 8004536:	4b35      	ldr	r3, [pc, #212]	; (800460c <MX_GPIO_Init+0x150>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	607b      	str	r3, [r7, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	603b      	str	r3, [r7, #0]
 8004546:	4b31      	ldr	r3, [pc, #196]	; (800460c <MX_GPIO_Init+0x150>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	4a30      	ldr	r2, [pc, #192]	; (800460c <MX_GPIO_Init+0x150>)
 800454c:	f043 0308 	orr.w	r3, r3, #8
 8004550:	6313      	str	r3, [r2, #48]	; 0x30
 8004552:	4b2e      	ldr	r3, [pc, #184]	; (800460c <MX_GPIO_Init+0x150>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PDCF_BUZZER_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_10
 800455e:	2200      	movs	r2, #0
 8004560:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8004564:	482a      	ldr	r0, [pc, #168]	; (8004610 <MX_GPIO_Init+0x154>)
 8004566:	f003 f9d1 	bl	800790c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CENLOC_BUZZER_Pin|SECALM_BUZZER_Pin|PDCR_TRIG_Pin|AL_Pin
 800456a:	2200      	movs	r2, #0
 800456c:	f24f 0124 	movw	r1, #61476	; 0xf024
 8004570:	4828      	ldr	r0, [pc, #160]	; (8004614 <MX_GPIO_Init+0x158>)
 8004572:	f003 f9cb 	bl	800790c <HAL_GPIO_WritePin>
                          |RL_Pin|PDCR_BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PDCF_TRIG_Pin|HB_Pin, GPIO_PIN_RESET);
 8004576:	2200      	movs	r2, #0
 8004578:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800457c:	4826      	ldr	r0, [pc, #152]	; (8004618 <MX_GPIO_Init+0x15c>)
 800457e:	f003 f9c5 	bl	800790c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8004582:	2200      	movs	r2, #0
 8004584:	2104      	movs	r1, #4
 8004586:	4825      	ldr	r0, [pc, #148]	; (800461c <MX_GPIO_Init+0x160>)
 8004588:	f003 f9c0 	bl	800790c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC14 PC15 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = PDCF_BUZZER_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_10
 800458c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8004590:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004592:	2301      	movs	r3, #1
 8004594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800459a:	2300      	movs	r3, #0
 800459c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800459e:	f107 0314 	add.w	r3, r7, #20
 80045a2:	4619      	mov	r1, r3
 80045a4:	481a      	ldr	r0, [pc, #104]	; (8004610 <MX_GPIO_Init+0x154>)
 80045a6:	f002 ff49 	bl	800743c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = CENLOC_BUZZER_Pin|SECALM_BUZZER_Pin|PDCR_TRIG_Pin|AL_Pin
 80045aa:	f24f 0324 	movw	r3, #61476	; 0xf024
 80045ae:	617b      	str	r3, [r7, #20]
                          |RL_Pin|PDCR_BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045b0:	2301      	movs	r3, #1
 80045b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b4:	2300      	movs	r3, #0
 80045b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b8:	2300      	movs	r3, #0
 80045ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045bc:	f107 0314 	add.w	r3, r7, #20
 80045c0:	4619      	mov	r1, r3
 80045c2:	4814      	ldr	r0, [pc, #80]	; (8004614 <MX_GPIO_Init+0x158>)
 80045c4:	f002 ff3a 	bl	800743c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = PDCF_TRIG_Pin|HB_Pin;
 80045c8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80045cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045ce:	2301      	movs	r3, #1
 80045d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d6:	2300      	movs	r3, #0
 80045d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045da:	f107 0314 	add.w	r3, r7, #20
 80045de:	4619      	mov	r1, r3
 80045e0:	480d      	ldr	r0, [pc, #52]	; (8004618 <MX_GPIO_Init+0x15c>)
 80045e2:	f002 ff2b 	bl	800743c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045e6:	2304      	movs	r3, #4
 80045e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045ea:	2301      	movs	r3, #1
 80045ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f2:	2300      	movs	r3, #0
 80045f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045f6:	f107 0314 	add.w	r3, r7, #20
 80045fa:	4619      	mov	r1, r3
 80045fc:	4807      	ldr	r0, [pc, #28]	; (800461c <MX_GPIO_Init+0x160>)
 80045fe:	f002 ff1d 	bl	800743c <HAL_GPIO_Init>

}
 8004602:	bf00      	nop
 8004604:	3728      	adds	r7, #40	; 0x28
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40023800 	.word	0x40023800
 8004610:	40020800 	.word	0x40020800
 8004614:	40020400 	.word	0x40020400
 8004618:	40020000 	.word	0x40020000
 800461c:	40020c00 	.word	0x40020c00

08004620 <HAL_I2C_MspInit>:
  /* USER CODE END I2C3_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08c      	sub	sp, #48	; 0x30
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004628:	f107 031c 	add.w	r3, r7, #28
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	605a      	str	r2, [r3, #4]
 8004632:	609a      	str	r2, [r3, #8]
 8004634:	60da      	str	r2, [r3, #12]
 8004636:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a41      	ldr	r2, [pc, #260]	; (8004744 <HAL_I2C_MspInit+0x124>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d12c      	bne.n	800469c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004642:	2300      	movs	r3, #0
 8004644:	61bb      	str	r3, [r7, #24]
 8004646:	4b40      	ldr	r3, [pc, #256]	; (8004748 <HAL_I2C_MspInit+0x128>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	4a3f      	ldr	r2, [pc, #252]	; (8004748 <HAL_I2C_MspInit+0x128>)
 800464c:	f043 0302 	orr.w	r3, r3, #2
 8004650:	6313      	str	r3, [r2, #48]	; 0x30
 8004652:	4b3d      	ldr	r3, [pc, #244]	; (8004748 <HAL_I2C_MspInit+0x128>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	61bb      	str	r3, [r7, #24]
 800465c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800465e:	23c0      	movs	r3, #192	; 0xc0
 8004660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004662:	2312      	movs	r3, #18
 8004664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004666:	2300      	movs	r3, #0
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800466a:	2303      	movs	r3, #3
 800466c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800466e:	2304      	movs	r3, #4
 8004670:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004672:	f107 031c 	add.w	r3, r7, #28
 8004676:	4619      	mov	r1, r3
 8004678:	4834      	ldr	r0, [pc, #208]	; (800474c <HAL_I2C_MspInit+0x12c>)
 800467a:	f002 fedf 	bl	800743c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800467e:	2300      	movs	r3, #0
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	4b31      	ldr	r3, [pc, #196]	; (8004748 <HAL_I2C_MspInit+0x128>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	4a30      	ldr	r2, [pc, #192]	; (8004748 <HAL_I2C_MspInit+0x128>)
 8004688:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800468c:	6413      	str	r3, [r2, #64]	; 0x40
 800468e:	4b2e      	ldr	r3, [pc, #184]	; (8004748 <HAL_I2C_MspInit+0x128>)
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800469a:	e04f      	b.n	800473c <HAL_I2C_MspInit+0x11c>
  else if(i2cHandle->Instance==I2C3)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a2b      	ldr	r2, [pc, #172]	; (8004750 <HAL_I2C_MspInit+0x130>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d14a      	bne.n	800473c <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046a6:	2300      	movs	r3, #0
 80046a8:	613b      	str	r3, [r7, #16]
 80046aa:	4b27      	ldr	r3, [pc, #156]	; (8004748 <HAL_I2C_MspInit+0x128>)
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	4a26      	ldr	r2, [pc, #152]	; (8004748 <HAL_I2C_MspInit+0x128>)
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	6313      	str	r3, [r2, #48]	; 0x30
 80046b6:	4b24      	ldr	r3, [pc, #144]	; (8004748 <HAL_I2C_MspInit+0x128>)
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	613b      	str	r3, [r7, #16]
 80046c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	4b20      	ldr	r3, [pc, #128]	; (8004748 <HAL_I2C_MspInit+0x128>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	4a1f      	ldr	r2, [pc, #124]	; (8004748 <HAL_I2C_MspInit+0x128>)
 80046cc:	f043 0302 	orr.w	r3, r3, #2
 80046d0:	6313      	str	r3, [r2, #48]	; 0x30
 80046d2:	4b1d      	ldr	r3, [pc, #116]	; (8004748 <HAL_I2C_MspInit+0x128>)
 80046d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80046de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046e4:	2312      	movs	r3, #18
 80046e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ec:	2303      	movs	r3, #3
 80046ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80046f0:	2304      	movs	r3, #4
 80046f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046f4:	f107 031c 	add.w	r3, r7, #28
 80046f8:	4619      	mov	r1, r3
 80046fa:	4816      	ldr	r0, [pc, #88]	; (8004754 <HAL_I2C_MspInit+0x134>)
 80046fc:	f002 fe9e 	bl	800743c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004700:	2310      	movs	r3, #16
 8004702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004704:	2312      	movs	r3, #18
 8004706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004708:	2300      	movs	r3, #0
 800470a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800470c:	2303      	movs	r3, #3
 800470e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8004710:	2309      	movs	r3, #9
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004714:	f107 031c 	add.w	r3, r7, #28
 8004718:	4619      	mov	r1, r3
 800471a:	480c      	ldr	r0, [pc, #48]	; (800474c <HAL_I2C_MspInit+0x12c>)
 800471c:	f002 fe8e 	bl	800743c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004720:	2300      	movs	r3, #0
 8004722:	60bb      	str	r3, [r7, #8]
 8004724:	4b08      	ldr	r3, [pc, #32]	; (8004748 <HAL_I2C_MspInit+0x128>)
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	4a07      	ldr	r2, [pc, #28]	; (8004748 <HAL_I2C_MspInit+0x128>)
 800472a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800472e:	6413      	str	r3, [r2, #64]	; 0x40
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <HAL_I2C_MspInit+0x128>)
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	68bb      	ldr	r3, [r7, #8]
}
 800473c:	bf00      	nop
 800473e:	3730      	adds	r7, #48	; 0x30
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40005400 	.word	0x40005400
 8004748:	40023800 	.word	0x40023800
 800474c:	40020400 	.word	0x40020400
 8004750:	40005c00 	.word	0x40005c00
 8004754:	40020000 	.word	0x40020000

08004758 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1a      	ldr	r2, [pc, #104]	; (80047d0 <HAL_I2C_MspDeInit+0x78>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d114      	bne.n	8004794 <HAL_I2C_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800476a:	4b1a      	ldr	r3, [pc, #104]	; (80047d4 <HAL_I2C_MspDeInit+0x7c>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	4a19      	ldr	r2, [pc, #100]	; (80047d4 <HAL_I2C_MspDeInit+0x7c>)
 8004770:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004774:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8004776:	2140      	movs	r1, #64	; 0x40
 8004778:	4817      	ldr	r0, [pc, #92]	; (80047d8 <HAL_I2C_MspDeInit+0x80>)
 800477a:	f002 ffe3 	bl	8007744 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800477e:	2180      	movs	r1, #128	; 0x80
 8004780:	4815      	ldr	r0, [pc, #84]	; (80047d8 <HAL_I2C_MspDeInit+0x80>)
 8004782:	f002 ffdf 	bl	8007744 <HAL_GPIO_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8004786:	201f      	movs	r0, #31
 8004788:	f001 ff27 	bl	80065da <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800478c:	2020      	movs	r0, #32
 800478e:	f001 ff24 	bl	80065da <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8004792:	e019      	b.n	80047c8 <HAL_I2C_MspDeInit+0x70>
  else if(i2cHandle->Instance==I2C3)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a10      	ldr	r2, [pc, #64]	; (80047dc <HAL_I2C_MspDeInit+0x84>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d114      	bne.n	80047c8 <HAL_I2C_MspDeInit+0x70>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800479e:	4b0d      	ldr	r3, [pc, #52]	; (80047d4 <HAL_I2C_MspDeInit+0x7c>)
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	4a0c      	ldr	r2, [pc, #48]	; (80047d4 <HAL_I2C_MspDeInit+0x7c>)
 80047a4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80047a8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80047aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047ae:	480c      	ldr	r0, [pc, #48]	; (80047e0 <HAL_I2C_MspDeInit+0x88>)
 80047b0:	f002 ffc8 	bl	8007744 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 80047b4:	2110      	movs	r1, #16
 80047b6:	4808      	ldr	r0, [pc, #32]	; (80047d8 <HAL_I2C_MspDeInit+0x80>)
 80047b8:	f002 ffc4 	bl	8007744 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80047bc:	2048      	movs	r0, #72	; 0x48
 80047be:	f001 ff0c 	bl	80065da <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80047c2:	2049      	movs	r0, #73	; 0x49
 80047c4:	f001 ff09 	bl	80065da <HAL_NVIC_DisableIRQ>
}
 80047c8:	bf00      	nop
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40005400 	.word	0x40005400
 80047d4:	40023800 	.word	0x40023800
 80047d8:	40020400 	.word	0x40020400
 80047dc:	40005c00 	.word	0x40005c00
 80047e0:	40020000 	.word	0x40020000

080047e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ea:	2300      	movs	r3, #0
 80047ec:	607b      	str	r3, [r7, #4]
 80047ee:	4b21      	ldr	r3, [pc, #132]	; (8004874 <HAL_MspInit+0x90>)
 80047f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f2:	4a20      	ldr	r2, [pc, #128]	; (8004874 <HAL_MspInit+0x90>)
 80047f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047f8:	6453      	str	r3, [r2, #68]	; 0x44
 80047fa:	4b1e      	ldr	r3, [pc, #120]	; (8004874 <HAL_MspInit+0x90>)
 80047fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004802:	607b      	str	r3, [r7, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004806:	2300      	movs	r3, #0
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <HAL_MspInit+0x90>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	4a19      	ldr	r2, [pc, #100]	; (8004874 <HAL_MspInit+0x90>)
 8004810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004814:	6413      	str	r3, [r2, #64]	; 0x40
 8004816:	4b17      	ldr	r3, [pc, #92]	; (8004874 <HAL_MspInit+0x90>)
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 15, 0);
 8004822:	2200      	movs	r2, #0
 8004824:	210f      	movs	r1, #15
 8004826:	f06f 000b 	mvn.w	r0, #11
 800482a:	f001 feac 	bl	8006586 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 15, 0);
 800482e:	2200      	movs	r2, #0
 8004830:	210f      	movs	r1, #15
 8004832:	f06f 000a 	mvn.w	r0, #10
 8004836:	f001 fea6 	bl	8006586 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 15, 0);
 800483a:	2200      	movs	r2, #0
 800483c:	210f      	movs	r1, #15
 800483e:	f06f 0009 	mvn.w	r0, #9
 8004842:	f001 fea0 	bl	8006586 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 8004846:	2200      	movs	r2, #0
 8004848:	210f      	movs	r1, #15
 800484a:	f06f 0004 	mvn.w	r0, #4
 800484e:	f001 fe9a 	bl	8006586 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8004852:	2200      	movs	r2, #0
 8004854:	210f      	movs	r1, #15
 8004856:	f06f 0003 	mvn.w	r0, #3
 800485a:	f001 fe94 	bl	8006586 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800485e:	2200      	movs	r2, #0
 8004860:	210f      	movs	r1, #15
 8004862:	f06f 0001 	mvn.w	r0, #1
 8004866:	f001 fe8e 	bl	8006586 <HAL_NVIC_SetPriority>
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800486a:	bf00      	nop
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800

08004878 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08c      	sub	sp, #48	; 0x30
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004888:	2300      	movs	r3, #0
 800488a:	60bb      	str	r3, [r7, #8]
 800488c:	4b2e      	ldr	r3, [pc, #184]	; (8004948 <HAL_InitTick+0xd0>)
 800488e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004890:	4a2d      	ldr	r2, [pc, #180]	; (8004948 <HAL_InitTick+0xd0>)
 8004892:	f043 0301 	orr.w	r3, r3, #1
 8004896:	6453      	str	r3, [r2, #68]	; 0x44
 8004898:	4b2b      	ldr	r3, [pc, #172]	; (8004948 <HAL_InitTick+0xd0>)
 800489a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	60bb      	str	r3, [r7, #8]
 80048a2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80048a4:	f107 020c 	add.w	r2, r7, #12
 80048a8:	f107 0310 	add.w	r3, r7, #16
 80048ac:	4611      	mov	r1, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f005 fcc2 	bl	800a238 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80048b4:	f005 fcac 	bl	800a210 <HAL_RCC_GetPCLK2Freq>
 80048b8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048bc:	4a23      	ldr	r2, [pc, #140]	; (800494c <HAL_InitTick+0xd4>)
 80048be:	fba2 2303 	umull	r2, r3, r2, r3
 80048c2:	0c9b      	lsrs	r3, r3, #18
 80048c4:	3b01      	subs	r3, #1
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80048c8:	4b21      	ldr	r3, [pc, #132]	; (8004950 <HAL_InitTick+0xd8>)
 80048ca:	4a22      	ldr	r2, [pc, #136]	; (8004954 <HAL_InitTick+0xdc>)
 80048cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80048ce:	4b20      	ldr	r3, [pc, #128]	; (8004950 <HAL_InitTick+0xd8>)
 80048d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80048d4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80048d6:	4a1e      	ldr	r2, [pc, #120]	; (8004950 <HAL_InitTick+0xd8>)
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80048dc:	4b1c      	ldr	r3, [pc, #112]	; (8004950 <HAL_InitTick+0xd8>)
 80048de:	2200      	movs	r2, #0
 80048e0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048e2:	4b1b      	ldr	r3, [pc, #108]	; (8004950 <HAL_InitTick+0xd8>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048e8:	4b19      	ldr	r3, [pc, #100]	; (8004950 <HAL_InitTick+0xd8>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80048ee:	4818      	ldr	r0, [pc, #96]	; (8004950 <HAL_InitTick+0xd8>)
 80048f0:	f005 fcd4 	bl	800a29c <HAL_TIM_Base_Init>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80048fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d11b      	bne.n	800493a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8004902:	4813      	ldr	r0, [pc, #76]	; (8004950 <HAL_InitTick+0xd8>)
 8004904:	f005 fd26 	bl	800a354 <HAL_TIM_Base_Start_IT>
 8004908:	4603      	mov	r3, r0
 800490a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800490e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004912:	2b00      	cmp	r3, #0
 8004914:	d111      	bne.n	800493a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004916:	2019      	movs	r0, #25
 8004918:	f001 fe51 	bl	80065be <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b0f      	cmp	r3, #15
 8004920:	d808      	bhi.n	8004934 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8004922:	2200      	movs	r2, #0
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	2019      	movs	r0, #25
 8004928:	f001 fe2d 	bl	8006586 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800492c:	4a0a      	ldr	r2, [pc, #40]	; (8004958 <HAL_InitTick+0xe0>)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e002      	b.n	800493a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800493a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800493e:	4618      	mov	r0, r3
 8004940:	3730      	adds	r7, #48	; 0x30
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800
 800494c:	431bde83 	.word	0x431bde83
 8004950:	20000418 	.word	0x20000418
 8004954:	40010000 	.word	0x40010000
 8004958:	20000004 	.word	0x20000004

0800495c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	SystemManager_SetFault(NMI_RESET);
 8004960:	2008      	movs	r0, #8
 8004962:	f00d ff97 	bl	8012894 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8004966:	f00d ffbf 	bl	80128e8 <SystemManager_PerformReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800496a:	e7fe      	b.n	800496a <NMI_Handler+0xe>

0800496c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	SystemManager_SetFault(HARDWARE_RESET);
 8004970:	2006      	movs	r0, #6
 8004972:	f00d ff8f 	bl	8012894 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8004976:	f00d ffb7 	bl	80128e8 <SystemManager_PerformReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800497a:	e7fe      	b.n	800497a <HardFault_Handler+0xe>

0800497c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	SystemManager_SetFault(MEMORY_FAULT_RESET);
 8004980:	2009      	movs	r0, #9
 8004982:	f00d ff87 	bl	8012894 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8004986:	f00d ffaf 	bl	80128e8 <SystemManager_PerformReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800498a:	e7fe      	b.n	800498a <MemManage_Handler+0xe>

0800498c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	SystemManager_SetFault(BUS_FAULT_RESET);
 8004990:	200b      	movs	r0, #11
 8004992:	f00d ff7f 	bl	8012894 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8004996:	f00d ffa7 	bl	80128e8 <SystemManager_PerformReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800499a:	e7fe      	b.n	800499a <BusFault_Handler+0xe>

0800499c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	SystemManager_SetFault(USAGE_FAULT_RESET);
 80049a0:	200a      	movs	r0, #10
 80049a2:	f00d ff77 	bl	8012894 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80049a6:	f00d ff9f 	bl	80128e8 <SystemManager_PerformReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049aa:	e7fe      	b.n	80049aa <UsageFault_Handler+0xe>

080049ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049b0:	bf00      	nop
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */
	SystemManager_PerformReset();
 80049be:	f00d ff93 	bl	80128e8 <SystemManager_PerformReset>
  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80049c2:	f004 ff87 	bl	80098d4 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */
  /* USER CODE END PVD_IRQn 1 */
}
 80049c6:	bf00      	nop
 80049c8:	bd80      	pop	{r7, pc}

080049ca <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */
	SystemManager_SetFault(FLASH_FAULT_RESET);
 80049ce:	2007      	movs	r0, #7
 80049d0:	f00d ff60 	bl	8012894 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80049d4:	f00d ff88 	bl	80128e8 <SystemManager_PerformReset>
  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80049d8:	f002 fb88 	bl	80070ec <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */
  /* USER CODE END FLASH_IRQn 1 */
}
 80049dc:	bf00      	nop
 80049de:	bd80      	pop	{r7, pc}

080049e0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_IRQn 0 */
  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */
  /* USER CODE END RCC_IRQn 1 */
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
	...

080049f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80049f4:	4802      	ldr	r0, [pc, #8]	; (8004a00 <ADC_IRQHandler+0x10>)
 80049f6:	f000 ffe5 	bl	80059c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */
  /* USER CODE END ADC_IRQn 1 */
}
 80049fa:	bf00      	nop
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	2000019c 	.word	0x2000019c

08004a04 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a08:	4802      	ldr	r0, [pc, #8]	; (8004a14 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004a0a:	f006 f89b 	bl	800ab44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004a0e:	bf00      	nop
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000418 	.word	0x20000418

08004a18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	/* When alarm is on turn on the LEDs at full duty cycle for the designated time. */
	if(Rte_P_SecAlm_SecAlmPort_SecAlm_PinStateChange == STD_HIGH)
 8004a1c:	4b44      	ldr	r3, [pc, #272]	; (8004b30 <TIM2_IRQHandler+0x118>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d10b      	bne.n	8004a3c <TIM2_IRQHandler+0x24>
	{
		TIM2->CCR1 = TIM2->ARR;
 8004a24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2e:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->CCR2 = TIM2->ARR;
 8004a30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3a:	6393      	str	r3, [r2, #56]	; 0x38
		/* do nothing */
	}
	/* Upon timer interrupt generation
	 * proceed to increase the PWM duty cycle
	 * for the low beam light until 75%. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LowBeam_CurrentState == STD_HIGH)
 8004a3c:	4b3d      	ldr	r3, [pc, #244]	; (8004b34 <TIM2_IRQHandler+0x11c>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d119      	bne.n	8004a78 <TIM2_IRQHandler+0x60>
	{
		if(TIM2->CCR1 < 1250)
 8004a44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d807      	bhi.n	8004a62 <TIM2_IRQHandler+0x4a>
		{
			TIM2->CCR1 = TIM2->CCR1 + 20;
 8004a52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a5c:	3314      	adds	r3, #20
 8004a5e:	6353      	str	r3, [r2, #52]	; 0x34
 8004a60:	e00a      	b.n	8004a78 <TIM2_IRQHandler+0x60>
		}
		else if(TIM2->CCR1 >= 1000)
 8004a62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a6c:	d304      	bcc.n	8004a78 <TIM2_IRQHandler+0x60>
		{
			TIM2->CCR1 = 1250;
 8004a6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a72:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8004a76:	635a      	str	r2, [r3, #52]	; 0x34
		/* do nothing */
	}
	/* Upon timer interrupt generation
	 * proceed to increase the PWM duty cycle
	 * for the rear position light until 75%. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearPositionLights_CurrentState == STD_HIGH)
 8004a78:	4b2f      	ldr	r3, [pc, #188]	; (8004b38 <TIM2_IRQHandler+0x120>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d118      	bne.n	8004ab2 <TIM2_IRQHandler+0x9a>
	{
		if(TIM2->CCR2 < 1000)
 8004a80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a8a:	d207      	bcs.n	8004a9c <TIM2_IRQHandler+0x84>
		{
			TIM2->CCR2 = TIM2->CCR2 + 1;
 8004a8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a96:	3301      	adds	r3, #1
 8004a98:	6393      	str	r3, [r2, #56]	; 0x38
 8004a9a:	e00a      	b.n	8004ab2 <TIM2_IRQHandler+0x9a>
		}
		else if(TIM2->CCR2 >= 1000)
 8004a9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aa6:	d304      	bcc.n	8004ab2 <TIM2_IRQHandler+0x9a>
		{
			TIM2->CCR2 = 1000;
 8004aa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ab0:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_IntLights_IntLightsPort_IntLights_CurrentState == STD_HIGH)
 8004ab2:	4b22      	ldr	r3, [pc, #136]	; (8004b3c <TIM2_IRQHandler+0x124>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d11b      	bne.n	8004af2 <TIM2_IRQHandler+0xda>
	{
		if(TIM2->CCR3 < 1999)
 8004aba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac0:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d807      	bhi.n	8004ad8 <TIM2_IRQHandler+0xc0>
		{
			TIM2->CCR3 = TIM2->CCR3 + 20;
 8004ac8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ace:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004ad2:	3314      	adds	r3, #20
 8004ad4:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004ad6:	e026      	b.n	8004b26 <TIM2_IRQHandler+0x10e>
		}
		else if(TIM2->CCR3 >= 1999)
 8004ad8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ade:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d91f      	bls.n	8004b26 <TIM2_IRQHandler+0x10e>
		{
			TIM2->CCR3 = 1999;
 8004ae6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004aea:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8004aee:	63da      	str	r2, [r3, #60]	; 0x3c
 8004af0:	e019      	b.n	8004b26 <TIM2_IRQHandler+0x10e>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_IntLights_IntLightsPort_IntLights_CurrentState == STD_LOW)
 8004af2:	4b12      	ldr	r3, [pc, #72]	; (8004b3c <TIM2_IRQHandler+0x124>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d115      	bne.n	8004b26 <TIM2_IRQHandler+0x10e>
	{
		if(TIM2->CCR3 > 20)
 8004afa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b00:	2b14      	cmp	r3, #20
 8004b02:	d907      	bls.n	8004b14 <TIM2_IRQHandler+0xfc>
		{
			TIM2->CCR3 = TIM2->CCR3 - 20;
 8004b04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b0e:	3b14      	subs	r3, #20
 8004b10:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004b12:	e008      	b.n	8004b26 <TIM2_IRQHandler+0x10e>
		}
		else if(TIM2->CCR3 <= 20)
 8004b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1a:	2b14      	cmp	r3, #20
 8004b1c:	d803      	bhi.n	8004b26 <TIM2_IRQHandler+0x10e>
		{
			TIM2->CCR3 = 0;
 8004b1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b22:	2200      	movs	r2, #0
 8004b24:	63da      	str	r2, [r3, #60]	; 0x3c
	else
	{
		/* do nothing */
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004b26:	4806      	ldr	r0, [pc, #24]	; (8004b40 <TIM2_IRQHandler+0x128>)
 8004b28:	f006 f80c 	bl	800ab44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 8004b2c:	bf00      	nop
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	20000135 	.word	0x20000135
 8004b34:	200000e4 	.word	0x200000e4
 8004b38:	200000e5 	.word	0x200000e5
 8004b3c:	20000129 	.word	0x20000129
 8004b40:	200004d0 	.word	0x200004d0

08004b44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
	/* On central lock set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the central lock is set to low, set duty cycle to 0. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8004b48:	4b32      	ldr	r3, [pc, #200]	; (8004c14 <TIM3_IRQHandler+0xd0>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d104      	bne.n	8004b5a <TIM3_IRQHandler+0x16>
	{
		TIM3->CCR1 = TIM3->ARR;
 8004b50:	4b31      	ldr	r3, [pc, #196]	; (8004c18 <TIM3_IRQHandler+0xd4>)
 8004b52:	4a31      	ldr	r2, [pc, #196]	; (8004c18 <TIM3_IRQHandler+0xd4>)
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	6353      	str	r3, [r2, #52]	; 0x34
 8004b58:	e006      	b.n	8004b68 <TIM3_IRQHandler+0x24>
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW)
 8004b5a:	4b2e      	ldr	r3, [pc, #184]	; (8004c14 <TIM3_IRQHandler+0xd0>)
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d102      	bne.n	8004b68 <TIM3_IRQHandler+0x24>
	{
		TIM3->CCR1 = 0;
 8004b62:	4b2d      	ldr	r3, [pc, #180]	; (8004c18 <TIM3_IRQHandler+0xd4>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	635a      	str	r2, [r3, #52]	; 0x34
	/* On brake lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the brake lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_HIGH)
 8004b68:	4b2c      	ldr	r3, [pc, #176]	; (8004c1c <TIM3_IRQHandler+0xd8>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d104      	bne.n	8004b7a <TIM3_IRQHandler+0x36>
	{
		TIM3->CCR2 = TIM3->ARR;
 8004b70:	4b29      	ldr	r3, [pc, #164]	; (8004c18 <TIM3_IRQHandler+0xd4>)
 8004b72:	4a29      	ldr	r2, [pc, #164]	; (8004c18 <TIM3_IRQHandler+0xd4>)
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	6393      	str	r3, [r2, #56]	; 0x38
 8004b78:	e006      	b.n	8004b88 <TIM3_IRQHandler+0x44>
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_LOW)
 8004b7a:	4b28      	ldr	r3, [pc, #160]	; (8004c1c <TIM3_IRQHandler+0xd8>)
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d102      	bne.n	8004b88 <TIM3_IRQHandler+0x44>
	{
		TIM3->CCR2 = 0;
 8004b82:	4b25      	ldr	r3, [pc, #148]	; (8004c18 <TIM3_IRQHandler+0xd4>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38
	/* On front fog lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the front fog lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState == STD_HIGH)
 8004b88:	4b25      	ldr	r3, [pc, #148]	; (8004c20 <TIM3_IRQHandler+0xdc>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d114      	bne.n	8004bba <TIM3_IRQHandler+0x76>
	{
		if(TIM3->CCR3 < 1000)
 8004b90:	4b21      	ldr	r3, [pc, #132]	; (8004c18 <TIM3_IRQHandler+0xd4>)
 8004b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b98:	d205      	bcs.n	8004ba6 <TIM3_IRQHandler+0x62>
		{
			TIM3->CCR3 = TIM3->CCR3 + 20;
 8004b9a:	4b1f      	ldr	r3, [pc, #124]	; (8004c18 <TIM3_IRQHandler+0xd4>)
 8004b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9e:	4a1e      	ldr	r2, [pc, #120]	; (8004c18 <TIM3_IRQHandler+0xd4>)
 8004ba0:	3314      	adds	r3, #20
 8004ba2:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004ba4:	e010      	b.n	8004bc8 <TIM3_IRQHandler+0x84>
		}
		else if(TIM3->CCR3 >= 1000)
 8004ba6:	4b1c      	ldr	r3, [pc, #112]	; (8004c18 <TIM3_IRQHandler+0xd4>)
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004baa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bae:	d30b      	bcc.n	8004bc8 <TIM3_IRQHandler+0x84>
		{
			TIM3->CCR3 = 1000;
 8004bb0:	4b19      	ldr	r3, [pc, #100]	; (8004c18 <TIM3_IRQHandler+0xd4>)
 8004bb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bb6:	63da      	str	r2, [r3, #60]	; 0x3c
 8004bb8:	e006      	b.n	8004bc8 <TIM3_IRQHandler+0x84>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState == STD_LOW)
 8004bba:	4b19      	ldr	r3, [pc, #100]	; (8004c20 <TIM3_IRQHandler+0xdc>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d102      	bne.n	8004bc8 <TIM3_IRQHandler+0x84>
	{
		TIM3->CCR3 = 0;
 8004bc2:	4b15      	ldr	r3, [pc, #84]	; (8004c18 <TIM3_IRQHandler+0xd4>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	63da      	str	r2, [r3, #60]	; 0x3c
	/* On rear fog lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the rear fog lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_HIGH)
 8004bc8:	4b16      	ldr	r3, [pc, #88]	; (8004c24 <TIM3_IRQHandler+0xe0>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d114      	bne.n	8004bfa <TIM3_IRQHandler+0xb6>
	{
		if(TIM3->CCR4 < 1000)
 8004bd0:	4b11      	ldr	r3, [pc, #68]	; (8004c18 <TIM3_IRQHandler+0xd4>)
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bd8:	d205      	bcs.n	8004be6 <TIM3_IRQHandler+0xa2>
		{
			TIM3->CCR4 = TIM3->CCR4 + 20;
 8004bda:	4b0f      	ldr	r3, [pc, #60]	; (8004c18 <TIM3_IRQHandler+0xd4>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	4a0e      	ldr	r2, [pc, #56]	; (8004c18 <TIM3_IRQHandler+0xd4>)
 8004be0:	3314      	adds	r3, #20
 8004be2:	6413      	str	r3, [r2, #64]	; 0x40
 8004be4:	e010      	b.n	8004c08 <TIM3_IRQHandler+0xc4>
		}
		else if(TIM3->CCR4 >= 1000)
 8004be6:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <TIM3_IRQHandler+0xd4>)
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bee:	d30b      	bcc.n	8004c08 <TIM3_IRQHandler+0xc4>
		{
			TIM3->CCR4 = 1000;
 8004bf0:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <TIM3_IRQHandler+0xd4>)
 8004bf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bf6:	641a      	str	r2, [r3, #64]	; 0x40
 8004bf8:	e006      	b.n	8004c08 <TIM3_IRQHandler+0xc4>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_LOW)
 8004bfa:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <TIM3_IRQHandler+0xe0>)
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d102      	bne.n	8004c08 <TIM3_IRQHandler+0xc4>
	{
		TIM3->CCR4 = 0;
 8004c02:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <TIM3_IRQHandler+0xd4>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		/* do nothing */
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004c08:	4807      	ldr	r0, [pc, #28]	; (8004c28 <TIM3_IRQHandler+0xe4>)
 8004c0a:	f005 ff9b 	bl	800ab44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 8004c0e:	bf00      	nop
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	200000ae 	.word	0x200000ae
 8004c18:	40000400 	.word	0x40000400
 8004c1c:	200000de 	.word	0x200000de
 8004c20:	200000e1 	.word	0x200000e1
 8004c24:	200000e7 	.word	0x200000e7
 8004c28:	20000584 	.word	0x20000584

08004c2c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004c30:	4802      	ldr	r0, [pc, #8]	; (8004c3c <TIM4_IRQHandler+0x10>)
 8004c32:	f005 ff87 	bl	800ab44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  /* USER CODE END TIM4_IRQn 1 */
}
 8004c36:	bf00      	nop
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000638 	.word	0x20000638

08004c40 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004c44:	4802      	ldr	r0, [pc, #8]	; (8004c50 <I2C1_EV_IRQHandler+0x10>)
 8004c46:	f003 f8f7 	bl	8007e38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004c4a:	bf00      	nop
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000304 	.word	0x20000304

08004c54 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004c58:	4802      	ldr	r0, [pc, #8]	; (8004c64 <I2C1_ER_IRQHandler+0x10>)
 8004c5a:	f003 fa5e 	bl	800811a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004c5e:	bf00      	nop
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	20000304 	.word	0x20000304

08004c68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004c6c:	4802      	ldr	r0, [pc, #8]	; (8004c78 <USART1_IRQHandler+0x10>)
 8004c6e:	f007 f8e1 	bl	800be34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  /* USER CODE END USART1_IRQn 1 */
}
 8004c72:	bf00      	nop
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	200007a0 	.word	0x200007a0

08004c7c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004c80:	4802      	ldr	r0, [pc, #8]	; (8004c8c <TIM5_IRQHandler+0x10>)
 8004c82:	f005 ff5f 	bl	800ab44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  /* USER CODE END TIM5_IRQn 1 */
}
 8004c86:	bf00      	nop
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	200006ec 	.word	0x200006ec

08004c90 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004c94:	4802      	ldr	r0, [pc, #8]	; (8004ca0 <DMA2_Stream0_IRQHandler+0x10>)
 8004c96:	f001 ffb1 	bl	8006bfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004c9a:	bf00      	nop
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000200 	.word	0x20000200

08004ca4 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8004ca8:	4802      	ldr	r0, [pc, #8]	; (8004cb4 <I2C3_EV_IRQHandler+0x10>)
 8004caa:	f003 f8c5 	bl	8007e38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8004cae:	bf00      	nop
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20000388 	.word	0x20000388

08004cb8 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8004cbc:	4802      	ldr	r0, [pc, #8]	; (8004cc8 <I2C3_ER_IRQHandler+0x10>)
 8004cbe:	f003 fa2c 	bl	800811a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8004cc2:	bf00      	nop
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20000388 	.word	0x20000388

08004ccc <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FPU_IRQn 0 */
  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */
  /* USER CODE END FPU_IRQn 1 */
}
 8004cd0:	bf00      	nop
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
	...

08004cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ce4:	4a14      	ldr	r2, [pc, #80]	; (8004d38 <_sbrk+0x5c>)
 8004ce6:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <_sbrk+0x60>)
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004cf0:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <_sbrk+0x64>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d102      	bne.n	8004cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004cf8:	4b11      	ldr	r3, [pc, #68]	; (8004d40 <_sbrk+0x64>)
 8004cfa:	4a12      	ldr	r2, [pc, #72]	; (8004d44 <_sbrk+0x68>)
 8004cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004cfe:	4b10      	ldr	r3, [pc, #64]	; (8004d40 <_sbrk+0x64>)
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4413      	add	r3, r2
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d207      	bcs.n	8004d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d0c:	f00d ff30 	bl	8012b70 <__errno>
 8004d10:	4603      	mov	r3, r0
 8004d12:	220c      	movs	r2, #12
 8004d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d16:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1a:	e009      	b.n	8004d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d1c:	4b08      	ldr	r3, [pc, #32]	; (8004d40 <_sbrk+0x64>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d22:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <_sbrk+0x64>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4413      	add	r3, r2
 8004d2a:	4a05      	ldr	r2, [pc, #20]	; (8004d40 <_sbrk+0x64>)
 8004d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	20020000 	.word	0x20020000
 8004d3c:	00000400 	.word	0x00000400
 8004d40:	200004cc 	.word	0x200004cc
 8004d44:	20009480 	.word	0x20009480

08004d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d4c:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <SystemInit+0x20>)
 8004d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d52:	4a05      	ldr	r2, [pc, #20]	; (8004d68 <SystemInit+0x20>)
 8004d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d5c:	bf00      	nop
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	e000ed00 	.word	0xe000ed00

08004d6c <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM5_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08c      	sub	sp, #48	; 0x30
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d74:	f107 031c 	add.w	r3, r7, #28
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	609a      	str	r2, [r3, #8]
 8004d80:	60da      	str	r2, [r3, #12]
 8004d82:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d8c:	d10e      	bne.n	8004dac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	4b35      	ldr	r3, [pc, #212]	; (8004e68 <HAL_TIM_Base_MspInit+0xfc>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	4a34      	ldr	r2, [pc, #208]	; (8004e68 <HAL_TIM_Base_MspInit+0xfc>)
 8004d98:	f043 0301 	orr.w	r3, r3, #1
 8004d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d9e:	4b32      	ldr	r3, [pc, #200]	; (8004e68 <HAL_TIM_Base_MspInit+0xfc>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	61bb      	str	r3, [r7, #24]
 8004da8:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004daa:	e058      	b.n	8004e5e <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM3)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a2e      	ldr	r2, [pc, #184]	; (8004e6c <HAL_TIM_Base_MspInit+0x100>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d10e      	bne.n	8004dd4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	4b2b      	ldr	r3, [pc, #172]	; (8004e68 <HAL_TIM_Base_MspInit+0xfc>)
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	4a2a      	ldr	r2, [pc, #168]	; (8004e68 <HAL_TIM_Base_MspInit+0xfc>)
 8004dc0:	f043 0302 	orr.w	r3, r3, #2
 8004dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004dc6:	4b28      	ldr	r3, [pc, #160]	; (8004e68 <HAL_TIM_Base_MspInit+0xfc>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	697b      	ldr	r3, [r7, #20]
}
 8004dd2:	e044      	b.n	8004e5e <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM4)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a25      	ldr	r2, [pc, #148]	; (8004e70 <HAL_TIM_Base_MspInit+0x104>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d10e      	bne.n	8004dfc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	4b21      	ldr	r3, [pc, #132]	; (8004e68 <HAL_TIM_Base_MspInit+0xfc>)
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	4a20      	ldr	r2, [pc, #128]	; (8004e68 <HAL_TIM_Base_MspInit+0xfc>)
 8004de8:	f043 0304 	orr.w	r3, r3, #4
 8004dec:	6413      	str	r3, [r2, #64]	; 0x40
 8004dee:	4b1e      	ldr	r3, [pc, #120]	; (8004e68 <HAL_TIM_Base_MspInit+0xfc>)
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	693b      	ldr	r3, [r7, #16]
}
 8004dfa:	e030      	b.n	8004e5e <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM5)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1c      	ldr	r2, [pc, #112]	; (8004e74 <HAL_TIM_Base_MspInit+0x108>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d12b      	bne.n	8004e5e <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	4b17      	ldr	r3, [pc, #92]	; (8004e68 <HAL_TIM_Base_MspInit+0xfc>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	4a16      	ldr	r2, [pc, #88]	; (8004e68 <HAL_TIM_Base_MspInit+0xfc>)
 8004e10:	f043 0308 	orr.w	r3, r3, #8
 8004e14:	6413      	str	r3, [r2, #64]	; 0x40
 8004e16:	4b14      	ldr	r3, [pc, #80]	; (8004e68 <HAL_TIM_Base_MspInit+0xfc>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e22:	2300      	movs	r3, #0
 8004e24:	60bb      	str	r3, [r7, #8]
 8004e26:	4b10      	ldr	r3, [pc, #64]	; (8004e68 <HAL_TIM_Base_MspInit+0xfc>)
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	4a0f      	ldr	r2, [pc, #60]	; (8004e68 <HAL_TIM_Base_MspInit+0xfc>)
 8004e2c:	f043 0301 	orr.w	r3, r3, #1
 8004e30:	6313      	str	r3, [r2, #48]	; 0x30
 8004e32:	4b0d      	ldr	r3, [pc, #52]	; (8004e68 <HAL_TIM_Base_MspInit+0xfc>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	60bb      	str	r3, [r7, #8]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PDCF_IC_Pin|PDCR_IC_Pin;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e42:	2302      	movs	r3, #2
 8004e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004e4e:	2302      	movs	r3, #2
 8004e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e52:	f107 031c 	add.w	r3, r7, #28
 8004e56:	4619      	mov	r1, r3
 8004e58:	4807      	ldr	r0, [pc, #28]	; (8004e78 <HAL_TIM_Base_MspInit+0x10c>)
 8004e5a:	f002 faef 	bl	800743c <HAL_GPIO_Init>
}
 8004e5e:	bf00      	nop
 8004e60:	3730      	adds	r7, #48	; 0x30
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800
 8004e74:	40000c00 	.word	0x40000c00
 8004e78:	40020000 	.word	0x40020000

08004e7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08c      	sub	sp, #48	; 0x30
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e84:	f107 031c 	add.w	r3, r7, #28
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	605a      	str	r2, [r3, #4]
 8004e8e:	609a      	str	r2, [r3, #8]
 8004e90:	60da      	str	r2, [r3, #12]
 8004e92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e9c:	d13e      	bne.n	8004f1c <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61bb      	str	r3, [r7, #24]
 8004ea2:	4b45      	ldr	r3, [pc, #276]	; (8004fb8 <HAL_TIM_MspPostInit+0x13c>)
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	4a44      	ldr	r2, [pc, #272]	; (8004fb8 <HAL_TIM_MspPostInit+0x13c>)
 8004ea8:	f043 0302 	orr.w	r3, r3, #2
 8004eac:	6313      	str	r3, [r2, #48]	; 0x30
 8004eae:	4b42      	ldr	r3, [pc, #264]	; (8004fb8 <HAL_TIM_MspPostInit+0x13c>)
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	61bb      	str	r3, [r7, #24]
 8004eb8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	4b3e      	ldr	r3, [pc, #248]	; (8004fb8 <HAL_TIM_MspPostInit+0x13c>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	4a3d      	ldr	r2, [pc, #244]	; (8004fb8 <HAL_TIM_MspPostInit+0x13c>)
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eca:	4b3b      	ldr	r3, [pc, #236]	; (8004fb8 <HAL_TIM_MspPostInit+0x13c>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = IL_PWM_Pin|RPL_PWM_Pin;
 8004ed6:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8004eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004edc:	2302      	movs	r3, #2
 8004ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eec:	f107 031c 	add.w	r3, r7, #28
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4832      	ldr	r0, [pc, #200]	; (8004fbc <HAL_TIM_MspPostInit+0x140>)
 8004ef4:	f002 faa2 	bl	800743c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LB_PWM_Pin;
 8004ef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004efe:	2302      	movs	r3, #2
 8004f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f06:	2300      	movs	r3, #0
 8004f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LB_PWM_GPIO_Port, &GPIO_InitStruct);
 8004f0e:	f107 031c 	add.w	r3, r7, #28
 8004f12:	4619      	mov	r1, r3
 8004f14:	482a      	ldr	r0, [pc, #168]	; (8004fc0 <HAL_TIM_MspPostInit+0x144>)
 8004f16:	f002 fa91 	bl	800743c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004f1a:	e048      	b.n	8004fae <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM3)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a28      	ldr	r2, [pc, #160]	; (8004fc4 <HAL_TIM_MspPostInit+0x148>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d11f      	bne.n	8004f66 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f26:	2300      	movs	r3, #0
 8004f28:	613b      	str	r3, [r7, #16]
 8004f2a:	4b23      	ldr	r3, [pc, #140]	; (8004fb8 <HAL_TIM_MspPostInit+0x13c>)
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	4a22      	ldr	r2, [pc, #136]	; (8004fb8 <HAL_TIM_MspPostInit+0x13c>)
 8004f30:	f043 0304 	orr.w	r3, r3, #4
 8004f34:	6313      	str	r3, [r2, #48]	; 0x30
 8004f36:	4b20      	ldr	r3, [pc, #128]	; (8004fb8 <HAL_TIM_MspPostInit+0x13c>)
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DL_PWM_Pin|BL_PWM_Pin|FFL_PWM_Pin|RFL_PWM_Pin;
 8004f42:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f50:	2300      	movs	r3, #0
 8004f52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f54:	2302      	movs	r3, #2
 8004f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f58:	f107 031c 	add.w	r3, r7, #28
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	481a      	ldr	r0, [pc, #104]	; (8004fc8 <HAL_TIM_MspPostInit+0x14c>)
 8004f60:	f002 fa6c 	bl	800743c <HAL_GPIO_Init>
}
 8004f64:	e023      	b.n	8004fae <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM4)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a18      	ldr	r2, [pc, #96]	; (8004fcc <HAL_TIM_MspPostInit+0x150>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d11e      	bne.n	8004fae <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	4b10      	ldr	r3, [pc, #64]	; (8004fb8 <HAL_TIM_MspPostInit+0x13c>)
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	4a0f      	ldr	r2, [pc, #60]	; (8004fb8 <HAL_TIM_MspPostInit+0x13c>)
 8004f7a:	f043 0302 	orr.w	r3, r3, #2
 8004f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8004f80:	4b0d      	ldr	r3, [pc, #52]	; (8004fb8 <HAL_TIM_MspPostInit+0x13c>)
 8004f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LTS_PWM_Pin|RTS_PWM_Pin;
 8004f8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f92:	2302      	movs	r3, #2
 8004f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fa2:	f107 031c 	add.w	r3, r7, #28
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4804      	ldr	r0, [pc, #16]	; (8004fbc <HAL_TIM_MspPostInit+0x140>)
 8004faa:	f002 fa47 	bl	800743c <HAL_GPIO_Init>
}
 8004fae:	bf00      	nop
 8004fb0:	3730      	adds	r7, #48	; 0x30
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	40020400 	.word	0x40020400
 8004fc0:	40020000 	.word	0x40020000
 8004fc4:	40000400 	.word	0x40000400
 8004fc8:	40020800 	.word	0x40020800
 8004fcc:	40000800 	.word	0x40000800

08004fd0 <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe0:	d109      	bne.n	8004ff6 <HAL_TIM_Base_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 8004fe2:	4b1f      	ldr	r3, [pc, #124]	; (8005060 <HAL_TIM_Base_MspDeInit+0x90>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	4a1e      	ldr	r2, [pc, #120]	; (8005060 <HAL_TIM_Base_MspDeInit+0x90>)
 8004fe8:	f023 0301 	bic.w	r3, r3, #1
 8004fec:	6413      	str	r3, [r2, #64]	; 0x40

    /* TIM2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8004fee:	201c      	movs	r0, #28
 8004ff0:	f001 faf3 	bl	80065da <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspDeInit 1 */

  /* USER CODE END TIM5_MspDeInit 1 */
  }
}
 8004ff4:	e02f      	b.n	8005056 <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM3)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1a      	ldr	r2, [pc, #104]	; (8005064 <HAL_TIM_Base_MspDeInit+0x94>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d109      	bne.n	8005014 <HAL_TIM_Base_MspDeInit+0x44>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8005000:	4b17      	ldr	r3, [pc, #92]	; (8005060 <HAL_TIM_Base_MspDeInit+0x90>)
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	4a16      	ldr	r2, [pc, #88]	; (8005060 <HAL_TIM_Base_MspDeInit+0x90>)
 8005006:	f023 0302 	bic.w	r3, r3, #2
 800500a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 800500c:	201d      	movs	r0, #29
 800500e:	f001 fae4 	bl	80065da <HAL_NVIC_DisableIRQ>
}
 8005012:	e020      	b.n	8005056 <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM4)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a13      	ldr	r2, [pc, #76]	; (8005068 <HAL_TIM_Base_MspDeInit+0x98>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d109      	bne.n	8005032 <HAL_TIM_Base_MspDeInit+0x62>
    __HAL_RCC_TIM4_CLK_DISABLE();
 800501e:	4b10      	ldr	r3, [pc, #64]	; (8005060 <HAL_TIM_Base_MspDeInit+0x90>)
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	4a0f      	ldr	r2, [pc, #60]	; (8005060 <HAL_TIM_Base_MspDeInit+0x90>)
 8005024:	f023 0304 	bic.w	r3, r3, #4
 8005028:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 800502a:	201e      	movs	r0, #30
 800502c:	f001 fad5 	bl	80065da <HAL_NVIC_DisableIRQ>
}
 8005030:	e011      	b.n	8005056 <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM5)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a0d      	ldr	r2, [pc, #52]	; (800506c <HAL_TIM_Base_MspDeInit+0x9c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d10c      	bne.n	8005056 <HAL_TIM_Base_MspDeInit+0x86>
    __HAL_RCC_TIM5_CLK_DISABLE();
 800503c:	4b08      	ldr	r3, [pc, #32]	; (8005060 <HAL_TIM_Base_MspDeInit+0x90>)
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	4a07      	ldr	r2, [pc, #28]	; (8005060 <HAL_TIM_Base_MspDeInit+0x90>)
 8005042:	f023 0308 	bic.w	r3, r3, #8
 8005046:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PDCF_IC_Pin|PDCR_IC_Pin);
 8005048:	2103      	movs	r1, #3
 800504a:	4809      	ldr	r0, [pc, #36]	; (8005070 <HAL_TIM_Base_MspDeInit+0xa0>)
 800504c:	f002 fb7a 	bl	8007744 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
 8005050:	2032      	movs	r0, #50	; 0x32
 8005052:	f001 fac2 	bl	80065da <HAL_NVIC_DisableIRQ>
}
 8005056:	bf00      	nop
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40023800 	.word	0x40023800
 8005064:	40000400 	.word	0x40000400
 8005068:	40000800 	.word	0x40000800
 800506c:	40000c00 	.word	0x40000c00
 8005070:	40020000 	.word	0x40020000

08005074 <HAL_UART_MspInit>:
  /* USER CODE END USART1_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	; 0x28
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800507c:	f107 0314 	add.w	r3, r7, #20
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	605a      	str	r2, [r3, #4]
 8005086:	609a      	str	r2, [r3, #8]
 8005088:	60da      	str	r2, [r3, #12]
 800508a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a19      	ldr	r2, [pc, #100]	; (80050f8 <HAL_UART_MspInit+0x84>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d12c      	bne.n	80050f0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005096:	2300      	movs	r3, #0
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	4b18      	ldr	r3, [pc, #96]	; (80050fc <HAL_UART_MspInit+0x88>)
 800509c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509e:	4a17      	ldr	r2, [pc, #92]	; (80050fc <HAL_UART_MspInit+0x88>)
 80050a0:	f043 0310 	orr.w	r3, r3, #16
 80050a4:	6453      	str	r3, [r2, #68]	; 0x44
 80050a6:	4b15      	ldr	r3, [pc, #84]	; (80050fc <HAL_UART_MspInit+0x88>)
 80050a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050aa:	f003 0310 	and.w	r3, r3, #16
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	4b11      	ldr	r3, [pc, #68]	; (80050fc <HAL_UART_MspInit+0x88>)
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	4a10      	ldr	r2, [pc, #64]	; (80050fc <HAL_UART_MspInit+0x88>)
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	6313      	str	r3, [r2, #48]	; 0x30
 80050c2:	4b0e      	ldr	r3, [pc, #56]	; (80050fc <HAL_UART_MspInit+0x88>)
 80050c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80050ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80050d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d4:	2302      	movs	r3, #2
 80050d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050dc:	2303      	movs	r3, #3
 80050de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050e0:	2307      	movs	r3, #7
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050e4:	f107 0314 	add.w	r3, r7, #20
 80050e8:	4619      	mov	r1, r3
 80050ea:	4805      	ldr	r0, [pc, #20]	; (8005100 <HAL_UART_MspInit+0x8c>)
 80050ec:	f002 f9a6 	bl	800743c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80050f0:	bf00      	nop
 80050f2:	3728      	adds	r7, #40	; 0x28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	40011000 	.word	0x40011000
 80050fc:	40023800 	.word	0x40023800
 8005100:	40020000 	.word	0x40020000

08005104 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a0a      	ldr	r2, [pc, #40]	; (800513c <HAL_UART_MspDeInit+0x38>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d10d      	bne.n	8005132 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005116:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <HAL_UART_MspDeInit+0x3c>)
 8005118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511a:	4a09      	ldr	r2, [pc, #36]	; (8005140 <HAL_UART_MspDeInit+0x3c>)
 800511c:	f023 0310 	bic.w	r3, r3, #16
 8005120:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005122:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005126:	4807      	ldr	r0, [pc, #28]	; (8005144 <HAL_UART_MspDeInit+0x40>)
 8005128:	f002 fb0c 	bl	8007744 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800512c:	2025      	movs	r0, #37	; 0x25
 800512e:	f001 fa54 	bl	80065da <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8005132:	bf00      	nop
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	40011000 	.word	0x40011000
 8005140:	40023800 	.word	0x40023800
 8005144:	40020000 	.word	0x40020000

08005148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005180 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800514c:	480d      	ldr	r0, [pc, #52]	; (8005184 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800514e:	490e      	ldr	r1, [pc, #56]	; (8005188 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005150:	4a0e      	ldr	r2, [pc, #56]	; (800518c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005154:	e002      	b.n	800515c <LoopCopyDataInit>

08005156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800515a:	3304      	adds	r3, #4

0800515c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800515c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800515e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005160:	d3f9      	bcc.n	8005156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005162:	4a0b      	ldr	r2, [pc, #44]	; (8005190 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005164:	4c0b      	ldr	r4, [pc, #44]	; (8005194 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005168:	e001      	b.n	800516e <LoopFillZerobss>

0800516a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800516a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800516c:	3204      	adds	r2, #4

0800516e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800516e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005170:	d3fb      	bcc.n	800516a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005172:	f7ff fde9 	bl	8004d48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005176:	f00d fd01 	bl	8012b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800517a:	f7fb fdf1 	bl	8000d60 <main>
  bx  lr    
 800517e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005180:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005188:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800518c:	08013cf0 	.word	0x08013cf0
  ldr r2, =_sbss
 8005190:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8005194:	2000947c 	.word	0x2000947c

08005198 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005198:	e7fe      	b.n	8005198 <DMA1_Stream0_IRQHandler>

0800519a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b084      	sub	sp, #16
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d104      	bne.n	80051b2 <stm32_lock_acquire+0x18>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80051a8:	b672      	cpsid	i
}
 80051aa:	bf00      	nop
 80051ac:	f00d fcb0 	bl	8012b10 <Error_Handler>
 80051b0:	e7fe      	b.n	80051b0 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	7a1b      	ldrb	r3, [r3, #8]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d904      	bls.n	80051c4 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80051ba:	b672      	cpsid	i
}
 80051bc:	bf00      	nop
 80051be:	f00d fca7 	bl	8012b10 <Error_Handler>
 80051c2:	e7fe      	b.n	80051c2 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	7a1b      	ldrb	r3, [r3, #8]
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	b2d1      	uxtb	r1, r2
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	7211      	strb	r1, [r2, #8]
 80051d0:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051d2:	f3ef 8211 	mrs	r2, BASEPRI
 80051d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	60fa      	str	r2, [r7, #12]
 80051e8:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80051f2:	bf00      	nop
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b084      	sub	sp, #16
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d104      	bne.n	8005212 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005208:	b672      	cpsid	i
}
 800520a:	bf00      	nop
 800520c:	f00d fc80 	bl	8012b10 <Error_Handler>
 8005210:	e7fe      	b.n	8005210 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	7a1b      	ldrb	r3, [r3, #8]
 8005216:	3b01      	subs	r3, #1
 8005218:	b2da      	uxtb	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	7a1b      	ldrb	r3, [r3, #8]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d904      	bls.n	8005230 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8005226:	b672      	cpsid	i
}
 8005228:	bf00      	nop
 800522a:	f00d fc71 	bl	8012b10 <Error_Handler>
 800522e:	e7fe      	b.n	800522e <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	7a1b      	ldrb	r3, [r3, #8]
 8005234:	461a      	mov	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800523c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005244:	bf00      	nop
}
 8005246:	bf00      	nop
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d104      	bne.n	8005266 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800525c:	b672      	cpsid	i
}
 800525e:	bf00      	nop
 8005260:	f00d fc56 	bl	8012b10 <Error_Handler>
 8005264:	e7fe      	b.n	8005264 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4618      	mov	r0, r3
 800526a:	f7ff ff96 	bl	800519a <stm32_lock_acquire>
}
 800526e:	bf00      	nop
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b082      	sub	sp, #8
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d104      	bne.n	800528e <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005284:	b672      	cpsid	i
}
 8005286:	bf00      	nop
 8005288:	f00d fc42 	bl	8012b10 <Error_Handler>
 800528c:	e7fe      	b.n	800528c <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff ffb2 	bl	80051fa <stm32_lock_release>
}
 8005296:	bf00      	nop
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <Dem_MainFunction>:
/***********************************************************************************
* Function: Dem_MainFunction													   *
* Description: Module main function.									 		   *
************************************************************************************/
VOID Dem_MainFunction()
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	af00      	add	r7, sp, #0
	Dem_ProcessFault();
 80052a2:	f000 f803 	bl	80052ac <Dem_ProcessFault>
}
 80052a6:	bf00      	nop
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <Dem_ProcessFault>:
/***********************************************************************************
* Function: Dem_ProcessFault													   *
* Description: Process fault from application.							 		   *
************************************************************************************/
VOID Dem_ProcessFault()
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
	if(firstRun == STD_LOW)
 80052b2:	4b42      	ldr	r3, [pc, #264]	; (80053bc <Dem_ProcessFault+0x110>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d114      	bne.n	80052e4 <Dem_ProcessFault+0x38>
	{
		firstRun = STD_HIGH;
 80052ba:	4b40      	ldr	r3, [pc, #256]	; (80053bc <Dem_ProcessFault+0x110>)
 80052bc:	2201      	movs	r2, #1
 80052be:	701a      	strb	r2, [r3, #0]
		for(uint8 idx = STD_LOW; idx < 24; idx++)
 80052c0:	2300      	movs	r3, #0
 80052c2:	71fb      	strb	r3, [r7, #7]
 80052c4:	e00b      	b.n	80052de <Dem_ProcessFault+0x32>
		{
			if(Dem_MemDtcArray[idx] >= 254)
 80052c6:	79fb      	ldrb	r3, [r7, #7]
 80052c8:	4a3d      	ldr	r2, [pc, #244]	; (80053c0 <Dem_ProcessFault+0x114>)
 80052ca:	5cd3      	ldrb	r3, [r2, r3]
 80052cc:	2bfd      	cmp	r3, #253	; 0xfd
 80052ce:	d903      	bls.n	80052d8 <Dem_ProcessFault+0x2c>
			{
				Dem_MemDtcArray[idx] = STD_LOW;
 80052d0:	79fb      	ldrb	r3, [r7, #7]
 80052d2:	4a3b      	ldr	r2, [pc, #236]	; (80053c0 <Dem_ProcessFault+0x114>)
 80052d4:	2100      	movs	r1, #0
 80052d6:	54d1      	strb	r1, [r2, r3]
		for(uint8 idx = STD_LOW; idx < 24; idx++)
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	3301      	adds	r3, #1
 80052dc:	71fb      	strb	r3, [r7, #7]
 80052de:	79fb      	ldrb	r3, [r7, #7]
 80052e0:	2b17      	cmp	r3, #23
 80052e2:	d9f0      	bls.n	80052c6 <Dem_ProcessFault+0x1a>
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LowBeam_CurrentState == STD_LOW)
 80052e4:	4b37      	ldr	r3, [pc, #220]	; (80053c4 <Dem_ProcessFault+0x118>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d105      	bne.n	80052f8 <Dem_ProcessFault+0x4c>
	{
		Dem_DtcArray[POSITION_DTC_LOW_BEAM_LEFT_MALFUNCTION] = STD_LOW;
 80052ec:	4b36      	ldr	r3, [pc, #216]	; (80053c8 <Dem_ProcessFault+0x11c>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	701a      	strb	r2, [r3, #0]
		Dem_DtcArray[POSITION_DTC_LOW_BEAM_RIGHT_MALFUNCTION] = STD_LOW;
 80052f2:	4b35      	ldr	r3, [pc, #212]	; (80053c8 <Dem_ProcessFault+0x11c>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	705a      	strb	r2, [r3, #1]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_LOW)
 80052f8:	4b34      	ldr	r3, [pc, #208]	; (80053cc <Dem_ProcessFault+0x120>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d105      	bne.n	800530c <Dem_ProcessFault+0x60>
	{
		Dem_DtcArray[POSITION_DTC_BRAKE_LIGHT_LEFT_MALFUNCTION] = STD_LOW;
 8005300:	4b31      	ldr	r3, [pc, #196]	; (80053c8 <Dem_ProcessFault+0x11c>)
 8005302:	2200      	movs	r2, #0
 8005304:	721a      	strb	r2, [r3, #8]
		Dem_DtcArray[POSITION_DTC_BRAKE_LIGHT_RIGHT_MALFUNCTION] = STD_LOW;
 8005306:	4b30      	ldr	r3, [pc, #192]	; (80053c8 <Dem_ProcessFault+0x11c>)
 8005308:	2200      	movs	r2, #0
 800530a:	725a      	strb	r2, [r3, #9]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearPositionLights_CurrentState == STD_LOW)
 800530c:	4b30      	ldr	r3, [pc, #192]	; (80053d0 <Dem_ProcessFault+0x124>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d105      	bne.n	8005320 <Dem_ProcessFault+0x74>
	{
		Dem_DtcArray[POSITION_DTC_REAR_POSITION_LIGHT_LEFT_MALFUNCTION] = STD_LOW;
 8005314:	4b2c      	ldr	r3, [pc, #176]	; (80053c8 <Dem_ProcessFault+0x11c>)
 8005316:	2200      	movs	r2, #0
 8005318:	709a      	strb	r2, [r3, #2]
		Dem_DtcArray[POSITION_DTC_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION] = STD_LOW;
 800531a:	4b2b      	ldr	r3, [pc, #172]	; (80053c8 <Dem_ProcessFault+0x11c>)
 800531c:	2200      	movs	r2, #0
 800531e:	70da      	strb	r2, [r3, #3]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_LOW)
 8005320:	4b2c      	ldr	r3, [pc, #176]	; (80053d4 <Dem_ProcessFault+0x128>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d105      	bne.n	8005334 <Dem_ProcessFault+0x88>
	{
		Dem_DtcArray[POSITION_DTC_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION] = STD_LOW;
 8005328:	4b27      	ldr	r3, [pc, #156]	; (80053c8 <Dem_ProcessFault+0x11c>)
 800532a:	2200      	movs	r2, #0
 800532c:	719a      	strb	r2, [r3, #6]
		Dem_DtcArray[POSITION_DTC_LEFT_TURN_SIGNAL_REAR_MALFUNCTION] = STD_LOW;
 800532e:	4b26      	ldr	r3, [pc, #152]	; (80053c8 <Dem_ProcessFault+0x11c>)
 8005330:	2200      	movs	r2, #0
 8005332:	71da      	strb	r2, [r3, #7]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_LOW)
 8005334:	4b28      	ldr	r3, [pc, #160]	; (80053d8 <Dem_ProcessFault+0x12c>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d105      	bne.n	8005348 <Dem_ProcessFault+0x9c>
	{
		Dem_DtcArray[POSITION_DTC_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION] = STD_LOW;
 800533c:	4b22      	ldr	r3, [pc, #136]	; (80053c8 <Dem_ProcessFault+0x11c>)
 800533e:	2200      	movs	r2, #0
 8005340:	711a      	strb	r2, [r3, #4]
		Dem_DtcArray[POSITION_DTC_RIGHT_TURN_SIGNAL_REAR_MALFUNCTION] = STD_LOW;
 8005342:	4b21      	ldr	r3, [pc, #132]	; (80053c8 <Dem_ProcessFault+0x11c>)
 8005344:	2200      	movs	r2, #0
 8005346:	715a      	strb	r2, [r3, #5]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour != STD_LOW || Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState == STD_LOW)
 8005348:	4b24      	ldr	r3, [pc, #144]	; (80053dc <Dem_ProcessFault+0x130>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d103      	bne.n	8005358 <Dem_ProcessFault+0xac>
 8005350:	4b23      	ldr	r3, [pc, #140]	; (80053e0 <Dem_ProcessFault+0x134>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d102      	bne.n	800535e <Dem_ProcessFault+0xb2>
	{
		Dem_DtcArray[POSITION_DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION] = STD_LOW;
 8005358:	4b1b      	ldr	r3, [pc, #108]	; (80053c8 <Dem_ProcessFault+0x11c>)
 800535a:	2200      	movs	r2, #0
 800535c:	739a      	strb	r2, [r3, #14]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree != STD_LOW || Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState == STD_LOW)
 800535e:	4b21      	ldr	r3, [pc, #132]	; (80053e4 <Dem_ProcessFault+0x138>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d103      	bne.n	800536e <Dem_ProcessFault+0xc2>
 8005366:	4b1e      	ldr	r3, [pc, #120]	; (80053e0 <Dem_ProcessFault+0x134>)
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d102      	bne.n	8005374 <Dem_ProcessFault+0xc8>
	{
		Dem_DtcArray[POSITION_DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION] = STD_LOW;
 800536e:	4b16      	ldr	r3, [pc, #88]	; (80053c8 <Dem_ProcessFault+0x11c>)
 8005370:	2200      	movs	r2, #0
 8005372:	73da      	strb	r2, [r3, #15]
	}
	else
	{
		/* do nothing */
	}
	for(uint8 index = POSITION_DTC_LOW_BEAM_LEFT_MALFUNCTION; index <= POSITION_DTC_PERIPHERAL_ERROR; index++)
 8005374:	2300      	movs	r3, #0
 8005376:	71bb      	strb	r3, [r7, #6]
 8005378:	e015      	b.n	80053a6 <Dem_ProcessFault+0xfa>
	{
		if(Dem_MemDtcArray[index] != Dem_DtcArray[index] && Dem_DtcArray[index] >= 2)
 800537a:	79bb      	ldrb	r3, [r7, #6]
 800537c:	4a10      	ldr	r2, [pc, #64]	; (80053c0 <Dem_ProcessFault+0x114>)
 800537e:	5cd2      	ldrb	r2, [r2, r3]
 8005380:	79bb      	ldrb	r3, [r7, #6]
 8005382:	4911      	ldr	r1, [pc, #68]	; (80053c8 <Dem_ProcessFault+0x11c>)
 8005384:	5ccb      	ldrb	r3, [r1, r3]
 8005386:	429a      	cmp	r2, r3
 8005388:	d00a      	beq.n	80053a0 <Dem_ProcessFault+0xf4>
 800538a:	79bb      	ldrb	r3, [r7, #6]
 800538c:	4a0e      	ldr	r2, [pc, #56]	; (80053c8 <Dem_ProcessFault+0x11c>)
 800538e:	5cd3      	ldrb	r3, [r2, r3]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d905      	bls.n	80053a0 <Dem_ProcessFault+0xf4>
		{
			Dem_MemDtcArray[index] = Dem_DtcArray[index];
 8005394:	79ba      	ldrb	r2, [r7, #6]
 8005396:	79bb      	ldrb	r3, [r7, #6]
 8005398:	490b      	ldr	r1, [pc, #44]	; (80053c8 <Dem_ProcessFault+0x11c>)
 800539a:	5c89      	ldrb	r1, [r1, r2]
 800539c:	4a08      	ldr	r2, [pc, #32]	; (80053c0 <Dem_ProcessFault+0x114>)
 800539e:	54d1      	strb	r1, [r2, r3]
	for(uint8 index = POSITION_DTC_LOW_BEAM_LEFT_MALFUNCTION; index <= POSITION_DTC_PERIPHERAL_ERROR; index++)
 80053a0:	79bb      	ldrb	r3, [r7, #6]
 80053a2:	3301      	adds	r3, #1
 80053a4:	71bb      	strb	r3, [r7, #6]
 80053a6:	79bb      	ldrb	r3, [r7, #6]
 80053a8:	2b17      	cmp	r3, #23
 80053aa:	d9e6      	bls.n	800537a <Dem_ProcessFault+0xce>
		else
		{
			/* do nothing */
		}
	}
	Rte_Read_Dem_DemPort_Dem_DtcArray(0, 0);
 80053ac:	2100      	movs	r1, #0
 80053ae:	2000      	movs	r0, #0
 80053b0:	f00b fdc2 	bl	8010f38 <Rte_Read_Dem_DemPort_Dem_DtcArray>
}
 80053b4:	bf00      	nop
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	20000850 	.word	0x20000850
 80053c0:	20000838 	.word	0x20000838
 80053c4:	200000e4 	.word	0x200000e4
 80053c8:	20000820 	.word	0x20000820
 80053cc:	200000de 	.word	0x200000de
 80053d0:	200000e5 	.word	0x200000e5
 80053d4:	200000e2 	.word	0x200000e2
 80053d8:	200000e3 	.word	0x200000e3
 80053dc:	200008d5 	.word	0x200008d5
 80053e0:	200000dc 	.word	0x200000dc
 80053e4:	200008c5 	.word	0x200008c5

080053e8 <Dem_ReceiveFault>:
/***********************************************************************************
* Function: Dem_ReceiveFault													   *
* Description: Receives fault from application.							 		   *
************************************************************************************/
VOID Dem_ReceiveFault(uint8 faultValue)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	4603      	mov	r3, r0
 80053f0:	71fb      	strb	r3, [r7, #7]
	switch(faultValue)
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	3b02      	subs	r3, #2
 80053f6:	2b97      	cmp	r3, #151	; 0x97
 80053f8:	f200 819f 	bhi.w	800573a <Dem_ReceiveFault+0x352>
 80053fc:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <Dem_ReceiveFault+0x1c>)
 80053fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005402:	bf00      	nop
 8005404:	080056fb 	.word	0x080056fb
 8005408:	080056e3 	.word	0x080056e3
 800540c:	08005665 	.word	0x08005665
 8005410:	08005673 	.word	0x08005673
 8005414:	0800573b 	.word	0x0800573b
 8005418:	0800573b 	.word	0x0800573b
 800541c:	0800573b 	.word	0x0800573b
 8005420:	0800573b 	.word	0x0800573b
 8005424:	0800573b 	.word	0x0800573b
 8005428:	0800573b 	.word	0x0800573b
 800542c:	0800573b 	.word	0x0800573b
 8005430:	0800573b 	.word	0x0800573b
 8005434:	0800573b 	.word	0x0800573b
 8005438:	0800573b 	.word	0x0800573b
 800543c:	0800573b 	.word	0x0800573b
 8005440:	0800573b 	.word	0x0800573b
 8005444:	08005703 	.word	0x08005703
 8005448:	080056eb 	.word	0x080056eb
 800544c:	0800573b 	.word	0x0800573b
 8005450:	0800573b 	.word	0x0800573b
 8005454:	0800573b 	.word	0x0800573b
 8005458:	0800573b 	.word	0x0800573b
 800545c:	0800573b 	.word	0x0800573b
 8005460:	0800573b 	.word	0x0800573b
 8005464:	0800573b 	.word	0x0800573b
 8005468:	0800573b 	.word	0x0800573b
 800546c:	0800573b 	.word	0x0800573b
 8005470:	0800573b 	.word	0x0800573b
 8005474:	0800573b 	.word	0x0800573b
 8005478:	0800573b 	.word	0x0800573b
 800547c:	0800573b 	.word	0x0800573b
 8005480:	0800573b 	.word	0x0800573b
 8005484:	0800570b 	.word	0x0800570b
 8005488:	0800573b 	.word	0x0800573b
 800548c:	0800573b 	.word	0x0800573b
 8005490:	0800573b 	.word	0x0800573b
 8005494:	0800573b 	.word	0x0800573b
 8005498:	0800573b 	.word	0x0800573b
 800549c:	0800573b 	.word	0x0800573b
 80054a0:	0800573b 	.word	0x0800573b
 80054a4:	0800573b 	.word	0x0800573b
 80054a8:	0800573b 	.word	0x0800573b
 80054ac:	0800573b 	.word	0x0800573b
 80054b0:	0800573b 	.word	0x0800573b
 80054b4:	0800573b 	.word	0x0800573b
 80054b8:	0800573b 	.word	0x0800573b
 80054bc:	0800573b 	.word	0x0800573b
 80054c0:	0800573b 	.word	0x0800573b
 80054c4:	08005713 	.word	0x08005713
 80054c8:	080056f3 	.word	0x080056f3
 80054cc:	0800573b 	.word	0x0800573b
 80054d0:	08005723 	.word	0x08005723
 80054d4:	0800573b 	.word	0x0800573b
 80054d8:	0800573b 	.word	0x0800573b
 80054dc:	0800573b 	.word	0x0800573b
 80054e0:	0800573b 	.word	0x0800573b
 80054e4:	0800573b 	.word	0x0800573b
 80054e8:	0800573b 	.word	0x0800573b
 80054ec:	0800573b 	.word	0x0800573b
 80054f0:	0800573b 	.word	0x0800573b
 80054f4:	0800573b 	.word	0x0800573b
 80054f8:	0800573b 	.word	0x0800573b
 80054fc:	0800573b 	.word	0x0800573b
 8005500:	0800573b 	.word	0x0800573b
 8005504:	0800573b 	.word	0x0800573b
 8005508:	0800573b 	.word	0x0800573b
 800550c:	08005681 	.word	0x08005681
 8005510:	0800568f 	.word	0x0800568f
 8005514:	0800573b 	.word	0x0800573b
 8005518:	0800573b 	.word	0x0800573b
 800551c:	0800573b 	.word	0x0800573b
 8005520:	0800573b 	.word	0x0800573b
 8005524:	0800573b 	.word	0x0800573b
 8005528:	0800573b 	.word	0x0800573b
 800552c:	0800573b 	.word	0x0800573b
 8005530:	0800573b 	.word	0x0800573b
 8005534:	0800573b 	.word	0x0800573b
 8005538:	0800573b 	.word	0x0800573b
 800553c:	0800573b 	.word	0x0800573b
 8005540:	0800573b 	.word	0x0800573b
 8005544:	0800573b 	.word	0x0800573b
 8005548:	0800573b 	.word	0x0800573b
 800554c:	0800569d 	.word	0x0800569d
 8005550:	0800573b 	.word	0x0800573b
 8005554:	0800572b 	.word	0x0800572b
 8005558:	0800573b 	.word	0x0800573b
 800555c:	0800573b 	.word	0x0800573b
 8005560:	0800573b 	.word	0x0800573b
 8005564:	0800573b 	.word	0x0800573b
 8005568:	0800573b 	.word	0x0800573b
 800556c:	0800573b 	.word	0x0800573b
 8005570:	0800573b 	.word	0x0800573b
 8005574:	0800573b 	.word	0x0800573b
 8005578:	0800573b 	.word	0x0800573b
 800557c:	0800573b 	.word	0x0800573b
 8005580:	0800573b 	.word	0x0800573b
 8005584:	0800571b 	.word	0x0800571b
 8005588:	0800573b 	.word	0x0800573b
 800558c:	080056ab 	.word	0x080056ab
 8005590:	080056b9 	.word	0x080056b9
 8005594:	0800573b 	.word	0x0800573b
 8005598:	0800573b 	.word	0x0800573b
 800559c:	0800573b 	.word	0x0800573b
 80055a0:	0800573b 	.word	0x0800573b
 80055a4:	0800573b 	.word	0x0800573b
 80055a8:	0800573b 	.word	0x0800573b
 80055ac:	0800573b 	.word	0x0800573b
 80055b0:	0800573b 	.word	0x0800573b
 80055b4:	0800573b 	.word	0x0800573b
 80055b8:	0800573b 	.word	0x0800573b
 80055bc:	0800573b 	.word	0x0800573b
 80055c0:	0800573b 	.word	0x0800573b
 80055c4:	0800573b 	.word	0x0800573b
 80055c8:	0800573b 	.word	0x0800573b
 80055cc:	080056c7 	.word	0x080056c7
 80055d0:	080056d5 	.word	0x080056d5
 80055d4:	0800573b 	.word	0x0800573b
 80055d8:	0800573b 	.word	0x0800573b
 80055dc:	0800573b 	.word	0x0800573b
 80055e0:	0800573b 	.word	0x0800573b
 80055e4:	0800573b 	.word	0x0800573b
 80055e8:	0800573b 	.word	0x0800573b
 80055ec:	0800573b 	.word	0x0800573b
 80055f0:	0800573b 	.word	0x0800573b
 80055f4:	0800573b 	.word	0x0800573b
 80055f8:	0800573b 	.word	0x0800573b
 80055fc:	0800573b 	.word	0x0800573b
 8005600:	0800573b 	.word	0x0800573b
 8005604:	0800573b 	.word	0x0800573b
 8005608:	0800573b 	.word	0x0800573b
 800560c:	0800573b 	.word	0x0800573b
 8005610:	0800573b 	.word	0x0800573b
 8005614:	0800573b 	.word	0x0800573b
 8005618:	0800573b 	.word	0x0800573b
 800561c:	0800573b 	.word	0x0800573b
 8005620:	0800573b 	.word	0x0800573b
 8005624:	0800573b 	.word	0x0800573b
 8005628:	0800573b 	.word	0x0800573b
 800562c:	0800573b 	.word	0x0800573b
 8005630:	0800573b 	.word	0x0800573b
 8005634:	0800573b 	.word	0x0800573b
 8005638:	0800573b 	.word	0x0800573b
 800563c:	0800573b 	.word	0x0800573b
 8005640:	0800573b 	.word	0x0800573b
 8005644:	0800573b 	.word	0x0800573b
 8005648:	0800573b 	.word	0x0800573b
 800564c:	0800573b 	.word	0x0800573b
 8005650:	0800573b 	.word	0x0800573b
 8005654:	0800573b 	.word	0x0800573b
 8005658:	0800573b 	.word	0x0800573b
 800565c:	0800573b 	.word	0x0800573b
 8005660:	08005733 	.word	0x08005733
	{
		case DTC_LOW_BEAM_LEFT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LOW_BEAM_LEFT_MALFUNCTION]++;
 8005664:	4b38      	ldr	r3, [pc, #224]	; (8005748 <Dem_ReceiveFault+0x360>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	3301      	adds	r3, #1
 800566a:	b2da      	uxtb	r2, r3
 800566c:	4b36      	ldr	r3, [pc, #216]	; (8005748 <Dem_ReceiveFault+0x360>)
 800566e:	701a      	strb	r2, [r3, #0]
			break;
 8005670:	e064      	b.n	800573c <Dem_ReceiveFault+0x354>
		case DTC_LOW_BEAM_RIGHT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LOW_BEAM_RIGHT_MALFUNCTION]++;
 8005672:	4b35      	ldr	r3, [pc, #212]	; (8005748 <Dem_ReceiveFault+0x360>)
 8005674:	785b      	ldrb	r3, [r3, #1]
 8005676:	3301      	adds	r3, #1
 8005678:	b2da      	uxtb	r2, r3
 800567a:	4b33      	ldr	r3, [pc, #204]	; (8005748 <Dem_ReceiveFault+0x360>)
 800567c:	705a      	strb	r2, [r3, #1]
			break;
 800567e:	e05d      	b.n	800573c <Dem_ReceiveFault+0x354>
		case DTC_REAR_POSITION_LIGHT_LEFT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_REAR_POSITION_LIGHT_LEFT_MALFUNCTION]++;
 8005680:	4b31      	ldr	r3, [pc, #196]	; (8005748 <Dem_ReceiveFault+0x360>)
 8005682:	789b      	ldrb	r3, [r3, #2]
 8005684:	3301      	adds	r3, #1
 8005686:	b2da      	uxtb	r2, r3
 8005688:	4b2f      	ldr	r3, [pc, #188]	; (8005748 <Dem_ReceiveFault+0x360>)
 800568a:	709a      	strb	r2, [r3, #2]
			break;
 800568c:	e056      	b.n	800573c <Dem_ReceiveFault+0x354>
		case DTC_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION]++;
 800568e:	4b2e      	ldr	r3, [pc, #184]	; (8005748 <Dem_ReceiveFault+0x360>)
 8005690:	78db      	ldrb	r3, [r3, #3]
 8005692:	3301      	adds	r3, #1
 8005694:	b2da      	uxtb	r2, r3
 8005696:	4b2c      	ldr	r3, [pc, #176]	; (8005748 <Dem_ReceiveFault+0x360>)
 8005698:	70da      	strb	r2, [r3, #3]
			break;
 800569a:	e04f      	b.n	800573c <Dem_ReceiveFault+0x354>
		case DTC_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION]++;
 800569c:	4b2a      	ldr	r3, [pc, #168]	; (8005748 <Dem_ReceiveFault+0x360>)
 800569e:	791b      	ldrb	r3, [r3, #4]
 80056a0:	3301      	adds	r3, #1
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	4b28      	ldr	r3, [pc, #160]	; (8005748 <Dem_ReceiveFault+0x360>)
 80056a6:	711a      	strb	r2, [r3, #4]
			break;
 80056a8:	e048      	b.n	800573c <Dem_ReceiveFault+0x354>
		case DTC_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION]++;
 80056aa:	4b27      	ldr	r3, [pc, #156]	; (8005748 <Dem_ReceiveFault+0x360>)
 80056ac:	799b      	ldrb	r3, [r3, #6]
 80056ae:	3301      	adds	r3, #1
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	4b25      	ldr	r3, [pc, #148]	; (8005748 <Dem_ReceiveFault+0x360>)
 80056b4:	719a      	strb	r2, [r3, #6]
			break;
 80056b6:	e041      	b.n	800573c <Dem_ReceiveFault+0x354>
		case DTC_LEFT_TURN_SIGNAL_REAR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LEFT_TURN_SIGNAL_REAR_MALFUNCTION]++;
 80056b8:	4b23      	ldr	r3, [pc, #140]	; (8005748 <Dem_ReceiveFault+0x360>)
 80056ba:	79db      	ldrb	r3, [r3, #7]
 80056bc:	3301      	adds	r3, #1
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	4b21      	ldr	r3, [pc, #132]	; (8005748 <Dem_ReceiveFault+0x360>)
 80056c2:	71da      	strb	r2, [r3, #7]
			break;
 80056c4:	e03a      	b.n	800573c <Dem_ReceiveFault+0x354>
		case DTC_BRAKE_LIGHT_LEFT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_BRAKE_LIGHT_LEFT_MALFUNCTION]++;
 80056c6:	4b20      	ldr	r3, [pc, #128]	; (8005748 <Dem_ReceiveFault+0x360>)
 80056c8:	7a1b      	ldrb	r3, [r3, #8]
 80056ca:	3301      	adds	r3, #1
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	4b1e      	ldr	r3, [pc, #120]	; (8005748 <Dem_ReceiveFault+0x360>)
 80056d0:	721a      	strb	r2, [r3, #8]
			break;
 80056d2:	e033      	b.n	800573c <Dem_ReceiveFault+0x354>
		case DTC_BRAKE_LIGHT_RIGHT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_BRAKE_LIGHT_RIGHT_MALFUNCTION]++;
 80056d4:	4b1c      	ldr	r3, [pc, #112]	; (8005748 <Dem_ReceiveFault+0x360>)
 80056d6:	7a5b      	ldrb	r3, [r3, #9]
 80056d8:	3301      	adds	r3, #1
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	4b1a      	ldr	r3, [pc, #104]	; (8005748 <Dem_ReceiveFault+0x360>)
 80056de:	725a      	strb	r2, [r3, #9]
			break;
 80056e0:	e02c      	b.n	800573c <Dem_ReceiveFault+0x354>
		case DTC_LIGHT_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LIGHT_SENSOR_MALFUNCTION] = DTC_LIGHT_SENSOR_MALFUNCTION;
 80056e2:	4b19      	ldr	r3, [pc, #100]	; (8005748 <Dem_ReceiveFault+0x360>)
 80056e4:	2203      	movs	r2, #3
 80056e6:	729a      	strb	r2, [r3, #10]
			break;
 80056e8:	e028      	b.n	800573c <Dem_ReceiveFault+0x354>
		case DTC_VIBRATION_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_VIBRATION_SENSOR_MALFUNCTION] = DTC_VIBRATION_SENSOR_MALFUNCTION;
 80056ea:	4b17      	ldr	r3, [pc, #92]	; (8005748 <Dem_ReceiveFault+0x360>)
 80056ec:	2213      	movs	r2, #19
 80056ee:	72da      	strb	r2, [r3, #11]
			break;
 80056f0:	e024      	b.n	800573c <Dem_ReceiveFault+0x354>
		case DTC_TEMPERATURE_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_POSITION_DTC_TEMPERATURE_SENSOR_MALFUNCTION] = DTC_TEMPERATURE_SENSOR_MALFUNCTION;
 80056f2:	4b15      	ldr	r3, [pc, #84]	; (8005748 <Dem_ReceiveFault+0x360>)
 80056f4:	2233      	movs	r2, #51	; 0x33
 80056f6:	735a      	strb	r2, [r3, #13]
			break;
 80056f8:	e020      	b.n	800573c <Dem_ReceiveFault+0x354>
		case DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION] = DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION;
 80056fa:	4b13      	ldr	r3, [pc, #76]	; (8005748 <Dem_ReceiveFault+0x360>)
 80056fc:	2202      	movs	r2, #2
 80056fe:	739a      	strb	r2, [r3, #14]
			break;
 8005700:	e01c      	b.n	800573c <Dem_ReceiveFault+0x354>
		case DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION] = DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION;
 8005702:	4b11      	ldr	r3, [pc, #68]	; (8005748 <Dem_ReceiveFault+0x360>)
 8005704:	2212      	movs	r2, #18
 8005706:	73da      	strb	r2, [r3, #15]
			break;
 8005708:	e018      	b.n	800573c <Dem_ReceiveFault+0x354>
		case DTC_BLUETOOTH_MODULE_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_BLUETOOTH_MODULE_MALFUNCTION] = DTC_BLUETOOTH_MODULE_MALFUNCTION;
 800570a:	4b0f      	ldr	r3, [pc, #60]	; (8005748 <Dem_ReceiveFault+0x360>)
 800570c:	2222      	movs	r2, #34	; 0x22
 800570e:	741a      	strb	r2, [r3, #16]
			break;
 8005710:	e014      	b.n	800573c <Dem_ReceiveFault+0x354>
		case DTC_EXTERNAL_EEPROM_MODULE_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_EXTERNAL_EEPROM_MODULE_MALFUNCTION] = DTC_EXTERNAL_EEPROM_MODULE_MALFUNCTION;
 8005712:	4b0d      	ldr	r3, [pc, #52]	; (8005748 <Dem_ReceiveFault+0x360>)
 8005714:	2232      	movs	r2, #50	; 0x32
 8005716:	745a      	strb	r2, [r3, #17]
			break;
 8005718:	e010      	b.n	800573c <Dem_ReceiveFault+0x354>
#if(CAN_SPI_COMMUNICATION_ENABLE == STD_ON)
			Dem_DtcArray[POSITION_DTC_CAN_BUS_OFF]++;
#endif
			break;
		case DTC_LCD_MODULE_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LCD_MODULE_MALFUNCTION] = DTC_LCD_MODULE_MALFUNCTION;
 800571a:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <Dem_ReceiveFault+0x360>)
 800571c:	2262      	movs	r2, #98	; 0x62
 800571e:	751a      	strb	r2, [r3, #20]
			break;
 8005720:	e00c      	b.n	800573c <Dem_ReceiveFault+0x354>
		case DTC_SOFTWARE_RESET:
			Dem_DtcArray[POSITION_DTC_SOFTWARE_RESET] = DTC_SOFTWARE_RESET;
 8005722:	4b09      	ldr	r3, [pc, #36]	; (8005748 <Dem_ReceiveFault+0x360>)
 8005724:	2235      	movs	r2, #53	; 0x35
 8005726:	755a      	strb	r2, [r3, #21]
			break;
 8005728:	e008      	b.n	800573c <Dem_ReceiveFault+0x354>
		case DTC_HARDWARE_RESET:
			Dem_DtcArray[POSITION_DTC_HARDWARE_RESET] = DTC_HARDWARE_RESET;
 800572a:	4b07      	ldr	r3, [pc, #28]	; (8005748 <Dem_ReceiveFault+0x360>)
 800572c:	2256      	movs	r2, #86	; 0x56
 800572e:	759a      	strb	r2, [r3, #22]
			break;
 8005730:	e004      	b.n	800573c <Dem_ReceiveFault+0x354>
		case DTC_PERIPHERAL_ERROR:
			Dem_DtcArray[POSITION_DTC_PERIPHERAL_ERROR] = DTC_PERIPHERAL_ERROR;
 8005732:	4b05      	ldr	r3, [pc, #20]	; (8005748 <Dem_ReceiveFault+0x360>)
 8005734:	2299      	movs	r2, #153	; 0x99
 8005736:	75da      	strb	r2, [r3, #23]
			break;
 8005738:	e000      	b.n	800573c <Dem_ReceiveFault+0x354>
		default:
			break;
 800573a:	bf00      	nop
	}
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	20000820 	.word	0x20000820

0800574c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005750:	4b0e      	ldr	r3, [pc, #56]	; (800578c <HAL_Init+0x40>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a0d      	ldr	r2, [pc, #52]	; (800578c <HAL_Init+0x40>)
 8005756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800575a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800575c:	4b0b      	ldr	r3, [pc, #44]	; (800578c <HAL_Init+0x40>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a0a      	ldr	r2, [pc, #40]	; (800578c <HAL_Init+0x40>)
 8005762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005766:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005768:	4b08      	ldr	r3, [pc, #32]	; (800578c <HAL_Init+0x40>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a07      	ldr	r2, [pc, #28]	; (800578c <HAL_Init+0x40>)
 800576e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005774:	2003      	movs	r0, #3
 8005776:	f000 fefb 	bl	8006570 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800577a:	200f      	movs	r0, #15
 800577c:	f7ff f87c 	bl	8004878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005780:	f7ff f830 	bl	80047e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	40023c00 	.word	0x40023c00

08005790 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8005794:	4b13      	ldr	r3, [pc, #76]	; (80057e4 <HAL_DeInit+0x54>)
 8005796:	f04f 32ff 	mov.w	r2, #4294967295
 800579a:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800579c:	4b11      	ldr	r3, [pc, #68]	; (80057e4 <HAL_DeInit+0x54>)
 800579e:	2200      	movs	r2, #0
 80057a0:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80057a2:	4b10      	ldr	r3, [pc, #64]	; (80057e4 <HAL_DeInit+0x54>)
 80057a4:	f04f 32ff 	mov.w	r2, #4294967295
 80057a8:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80057aa:	4b0e      	ldr	r3, [pc, #56]	; (80057e4 <HAL_DeInit+0x54>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80057b0:	4b0c      	ldr	r3, [pc, #48]	; (80057e4 <HAL_DeInit+0x54>)
 80057b2:	f04f 32ff 	mov.w	r2, #4294967295
 80057b6:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80057b8:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <HAL_DeInit+0x54>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80057be:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <HAL_DeInit+0x54>)
 80057c0:	f04f 32ff 	mov.w	r2, #4294967295
 80057c4:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80057c6:	4b07      	ldr	r3, [pc, #28]	; (80057e4 <HAL_DeInit+0x54>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80057cc:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <HAL_DeInit+0x54>)
 80057ce:	f04f 32ff 	mov.w	r2, #4294967295
 80057d2:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80057d4:	4b03      	ldr	r3, [pc, #12]	; (80057e4 <HAL_DeInit+0x54>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80057da:	f000 f805 	bl	80057e8 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	40023800 	.word	0x40023800

080057e8 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80057ec:	bf00      	nop
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
	...

080057f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057fc:	4b06      	ldr	r3, [pc, #24]	; (8005818 <HAL_IncTick+0x20>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	4b06      	ldr	r3, [pc, #24]	; (800581c <HAL_IncTick+0x24>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4413      	add	r3, r2
 8005808:	4a04      	ldr	r2, [pc, #16]	; (800581c <HAL_IncTick+0x24>)
 800580a:	6013      	str	r3, [r2, #0]
}
 800580c:	bf00      	nop
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	20000008 	.word	0x20000008
 800581c:	20000854 	.word	0x20000854

08005820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  return uwTick;
 8005824:	4b03      	ldr	r3, [pc, #12]	; (8005834 <HAL_GetTick+0x14>)
 8005826:	681b      	ldr	r3, [r3, #0]
}
 8005828:	4618      	mov	r0, r3
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	20000854 	.word	0x20000854

08005838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005840:	f7ff ffee 	bl	8005820 <HAL_GetTick>
 8005844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005850:	d005      	beq.n	800585e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005852:	4b0a      	ldr	r3, [pc, #40]	; (800587c <HAL_Delay+0x44>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4413      	add	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800585e:	bf00      	nop
 8005860:	f7ff ffde 	bl	8005820 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	429a      	cmp	r2, r3
 800586e:	d8f7      	bhi.n	8005860 <HAL_Delay+0x28>
  {
  }
}
 8005870:	bf00      	nop
 8005872:	bf00      	nop
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20000008 	.word	0x20000008

08005880 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e04a      	b.n	800592c <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	2b00      	cmp	r3, #0
 800589c:	d120      	bne.n	80058e0 <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a24      	ldr	r2, [pc, #144]	; (8005934 <HAL_ADC_Init+0xb4>)
 80058a2:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a24      	ldr	r2, [pc, #144]	; (8005938 <HAL_ADC_Init+0xb8>)
 80058a8:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a23      	ldr	r2, [pc, #140]	; (800593c <HAL_ADC_Init+0xbc>)
 80058ae:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a23      	ldr	r2, [pc, #140]	; (8005940 <HAL_ADC_Init+0xc0>)
 80058b4:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a22      	ldr	r2, [pc, #136]	; (8005944 <HAL_ADC_Init+0xc4>)
 80058ba:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d102      	bne.n	80058ca <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a20      	ldr	r2, [pc, #128]	; (8005948 <HAL_ADC_Init+0xc8>)
 80058c8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e4:	f003 0310 	and.w	r3, r3, #16
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d118      	bne.n	800591e <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80058f4:	f023 0302 	bic.w	r3, r3, #2
 80058f8:	f043 0202 	orr.w	r2, r3, #2
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fbc1 	bl	8006088 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	f023 0303 	bic.w	r3, r3, #3
 8005914:	f043 0201 	orr.w	r2, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	641a      	str	r2, [r3, #64]	; 0x40
 800591c:	e001      	b.n	8005922 <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800592a:	7bfb      	ldrb	r3, [r7, #15]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	0800cd4d 	.word	0x0800cd4d
 8005938:	08005dcd 	.word	0x08005dcd
 800593c:	08005de1 	.word	0x08005de1
 8005940:	0800cd89 	.word	0x0800cd89
 8005944:	0800638d 	.word	0x0800638d
 8005948:	08003c05 	.word	0x08003c05

0800594c <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e02a      	b.n	80059b8 <HAL_ADC_DeInit+0x6c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	f043 0202 	orr.w	r2, r3, #2
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0201 	bic.w	r2, r2, #1
 800597c:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	d110      	bne.n	80059ae <HAL_ADC_DeInit+0x62>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  if (hadc->MspDeInitCallback == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005990:	2b00      	cmp	r3, #0
 8005992:	d102      	bne.n	800599a <HAL_ADC_DeInit+0x4e>
  {
    hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a0a      	ldr	r2, [pc, #40]	; (80059c0 <HAL_ADC_DeInit+0x74>)
 8005998:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	4798      	blx	r3
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	08003d79 	.word	0x08003d79

080059c4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	2300      	movs	r3, #0
 80059d2:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f003 0320 	and.w	r3, r3, #32
 80059f2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d04a      	beq.n	8005a90 <HAL_ADC_IRQHandler+0xcc>
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d047      	beq.n	8005a90 <HAL_ADC_IRQHandler+0xcc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d105      	bne.n	8005a18 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d12b      	bne.n	8005a7e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d127      	bne.n	8005a7e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d006      	beq.n	8005a4a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d119      	bne.n	8005a7e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0220 	bic.w	r2, r2, #32
 8005a58:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d105      	bne.n	8005a7e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	f043 0201 	orr.w	r2, r3, #1
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f06f 0212 	mvn.w	r2, #18
 8005a8e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f003 0304 	and.w	r3, r3, #4
 8005a96:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d058      	beq.n	8005b58 <HAL_ADC_IRQHandler+0x194>
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d055      	beq.n	8005b58 <HAL_ADC_IRQHandler+0x194>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab0:	f003 0310 	and.w	r3, r3, #16
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d105      	bne.n	8005ac4 <HAL_ADC_IRQHandler+0x100>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d139      	bne.n	8005b46 <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d006      	beq.n	8005aee <HAL_ADC_IRQHandler+0x12a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d12b      	bne.n	8005b46 <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d124      	bne.n	8005b46 <HAL_ADC_IRQHandler+0x182>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d11d      	bne.n	8005b46 <HAL_ADC_IRQHandler+0x182>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d119      	bne.n	8005b46 <HAL_ADC_IRQHandler+0x182>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b20:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d105      	bne.n	8005b46 <HAL_ADC_IRQHandler+0x182>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	f043 0201 	orr.w	r2, r3, #1
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f06f 020c 	mvn.w	r2, #12
 8005b56:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b66:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d018      	beq.n	8005ba0 <HAL_ADC_IRQHandler+0x1dc>
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d015      	beq.n	8005ba0 <HAL_ADC_IRQHandler+0x1dc>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d10e      	bne.n	8005ba0 <HAL_ADC_IRQHandler+0x1dc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f06f 0201 	mvn.w	r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bae:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d016      	beq.n	8005be4 <HAL_ADC_IRQHandler+0x220>
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d013      	beq.n	8005be4 <HAL_ADC_IRQHandler+0x220>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc0:	f043 0202 	orr.w	r2, r3, #2
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f06f 0220 	mvn.w	r2, #32
 8005bd0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f06f 0220 	mvn.w	r2, #32
 8005be2:	601a      	str	r2, [r3, #0]
  }
}
 8005be4:	bf00      	nop
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <HAL_ADC_Start_DMA+0x1e>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e0ce      	b.n	8005da8 <HAL_ADC_Start_DMA+0x1bc>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d018      	beq.n	8005c52 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0201 	orr.w	r2, r2, #1
 8005c2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005c30:	4b5f      	ldr	r3, [pc, #380]	; (8005db0 <HAL_ADC_Start_DMA+0x1c4>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a5f      	ldr	r2, [pc, #380]	; (8005db4 <HAL_ADC_Start_DMA+0x1c8>)
 8005c36:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3a:	0c9a      	lsrs	r2, r3, #18
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	4413      	add	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005c44:	e002      	b.n	8005c4c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1f9      	bne.n	8005c46 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c60:	d107      	bne.n	8005c72 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c70:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	f040 8086 	bne.w	8005d8e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005c8a:	f023 0301 	bic.w	r3, r3, #1
 8005c8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d007      	beq.n	8005cb4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005cac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc0:	d106      	bne.n	8005cd0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc6:	f023 0206 	bic.w	r2, r3, #6
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	645a      	str	r2, [r3, #68]	; 0x44
 8005cce:	e002      	b.n	8005cd6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005cde:	4b36      	ldr	r3, [pc, #216]	; (8005db8 <HAL_ADC_Start_DMA+0x1cc>)
 8005ce0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	4a35      	ldr	r2, [pc, #212]	; (8005dbc <HAL_ADC_Start_DMA+0x1d0>)
 8005ce8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cee:	4a34      	ldr	r2, [pc, #208]	; (8005dc0 <HAL_ADC_Start_DMA+0x1d4>)
 8005cf0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	4a33      	ldr	r2, [pc, #204]	; (8005dc4 <HAL_ADC_Start_DMA+0x1d8>)
 8005cf8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005d02:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005d12:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d22:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	334c      	adds	r3, #76	; 0x4c
 8005d2e:	4619      	mov	r1, r3
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f000 fe78 	bl	8006a28 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f003 031f 	and.w	r3, r3, #31
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10f      	bne.n	8005d64 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d129      	bne.n	8005da6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005d60:	609a      	str	r2, [r3, #8]
 8005d62:	e020      	b.n	8005da6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a17      	ldr	r2, [pc, #92]	; (8005dc8 <HAL_ADC_Start_DMA+0x1dc>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d11b      	bne.n	8005da6 <HAL_ADC_Start_DMA+0x1ba>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d114      	bne.n	8005da6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005d8a:	609a      	str	r2, [r3, #8]
 8005d8c:	e00b      	b.n	8005da6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	f043 0210 	orr.w	r2, r3, #16
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9e:	f043 0201 	orr.w	r2, r3, #1
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20000000 	.word	0x20000000
 8005db4:	431bde83 	.word	0x431bde83
 8005db8:	40012300 	.word	0x40012300
 8005dbc:	08006281 	.word	0x08006281
 8005dc0:	0800633f 	.word	0x0800633f
 8005dc4:	0800635d 	.word	0x0800635d
 8005dc8:	40012000 	.word	0x40012000

08005dcc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d101      	bne.n	8005e10 <HAL_ADC_ConfigChannel+0x1c>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e113      	b.n	8006038 <HAL_ADC_ConfigChannel+0x244>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b09      	cmp	r3, #9
 8005e1e:	d925      	bls.n	8005e6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68d9      	ldr	r1, [r3, #12]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	4613      	mov	r3, r2
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	4413      	add	r3, r2
 8005e34:	3b1e      	subs	r3, #30
 8005e36:	2207      	movs	r2, #7
 8005e38:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3c:	43da      	mvns	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	400a      	ands	r2, r1
 8005e44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68d9      	ldr	r1, [r3, #12]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	4618      	mov	r0, r3
 8005e58:	4603      	mov	r3, r0
 8005e5a:	005b      	lsls	r3, r3, #1
 8005e5c:	4403      	add	r3, r0
 8005e5e:	3b1e      	subs	r3, #30
 8005e60:	409a      	lsls	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	60da      	str	r2, [r3, #12]
 8005e6a:	e022      	b.n	8005eb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6919      	ldr	r1, [r3, #16]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	461a      	mov	r2, r3
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	4413      	add	r3, r2
 8005e80:	2207      	movs	r2, #7
 8005e82:	fa02 f303 	lsl.w	r3, r2, r3
 8005e86:	43da      	mvns	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	400a      	ands	r2, r1
 8005e8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6919      	ldr	r1, [r3, #16]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	689a      	ldr	r2, [r3, #8]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	005b      	lsls	r3, r3, #1
 8005ea6:	4403      	add	r3, r0
 8005ea8:	409a      	lsls	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b06      	cmp	r3, #6
 8005eb8:	d824      	bhi.n	8005f04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	3b05      	subs	r3, #5
 8005ecc:	221f      	movs	r2, #31
 8005ece:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed2:	43da      	mvns	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	400a      	ands	r2, r1
 8005eda:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	4618      	mov	r0, r3
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	3b05      	subs	r3, #5
 8005ef6:	fa00 f203 	lsl.w	r2, r0, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	635a      	str	r2, [r3, #52]	; 0x34
 8005f02:	e04c      	b.n	8005f9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2b0c      	cmp	r3, #12
 8005f0a:	d824      	bhi.n	8005f56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	4613      	mov	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	3b23      	subs	r3, #35	; 0x23
 8005f1e:	221f      	movs	r2, #31
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	43da      	mvns	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	400a      	ands	r2, r1
 8005f2c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	4613      	mov	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	3b23      	subs	r3, #35	; 0x23
 8005f48:	fa00 f203 	lsl.w	r2, r0, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	631a      	str	r2, [r3, #48]	; 0x30
 8005f54:	e023      	b.n	8005f9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	3b41      	subs	r3, #65	; 0x41
 8005f68:	221f      	movs	r2, #31
 8005f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6e:	43da      	mvns	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	400a      	ands	r2, r1
 8005f76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	4618      	mov	r0, r3
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	3b41      	subs	r3, #65	; 0x41
 8005f92:	fa00 f203 	lsl.w	r2, r0, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f9e:	4b29      	ldr	r3, [pc, #164]	; (8006044 <HAL_ADC_ConfigChannel+0x250>)
 8005fa0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a28      	ldr	r2, [pc, #160]	; (8006048 <HAL_ADC_ConfigChannel+0x254>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d10f      	bne.n	8005fcc <HAL_ADC_ConfigChannel+0x1d8>
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b12      	cmp	r3, #18
 8005fb2:	d10b      	bne.n	8005fcc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1d      	ldr	r2, [pc, #116]	; (8006048 <HAL_ADC_ConfigChannel+0x254>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d12b      	bne.n	800602e <HAL_ADC_ConfigChannel+0x23a>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1c      	ldr	r2, [pc, #112]	; (800604c <HAL_ADC_ConfigChannel+0x258>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d003      	beq.n	8005fe8 <HAL_ADC_ConfigChannel+0x1f4>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b11      	cmp	r3, #17
 8005fe6:	d122      	bne.n	800602e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a11      	ldr	r2, [pc, #68]	; (800604c <HAL_ADC_ConfigChannel+0x258>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d111      	bne.n	800602e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800600a:	4b11      	ldr	r3, [pc, #68]	; (8006050 <HAL_ADC_ConfigChannel+0x25c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a11      	ldr	r2, [pc, #68]	; (8006054 <HAL_ADC_ConfigChannel+0x260>)
 8006010:	fba2 2303 	umull	r2, r3, r2, r3
 8006014:	0c9a      	lsrs	r2, r3, #18
 8006016:	4613      	mov	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006020:	e002      	b.n	8006028 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	3b01      	subs	r3, #1
 8006026:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1f9      	bne.n	8006022 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	40012300 	.word	0x40012300
 8006048:	40012000 	.word	0x40012000
 800604c:	10000012 	.word	0x10000012
 8006050:	20000000 	.word	0x20000000
 8006054:	431bde83 	.word	0x431bde83

08006058 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006064:	4618      	mov	r0, r3
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_ADC_GetError>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval ADC Error Code
  */
uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  return hadc->ErrorCode;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800607c:	4618      	mov	r0, r3
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006090:	4b79      	ldr	r3, [pc, #484]	; (8006278 <ADC_Init+0x1f0>)
 8006092:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	431a      	orrs	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6859      	ldr	r1, [r3, #4]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	021a      	lsls	r2, r3, #8
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80060e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6859      	ldr	r1, [r3, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689a      	ldr	r2, [r3, #8]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006102:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6899      	ldr	r1, [r3, #8]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611a:	4a58      	ldr	r2, [pc, #352]	; (800627c <ADC_Init+0x1f4>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d022      	beq.n	8006166 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689a      	ldr	r2, [r3, #8]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800612e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6899      	ldr	r1, [r3, #8]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006150:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6899      	ldr	r1, [r3, #8]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	609a      	str	r2, [r3, #8]
 8006164:	e00f      	b.n	8006186 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006174:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006184:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0202 	bic.w	r2, r2, #2
 8006194:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6899      	ldr	r1, [r3, #8]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	7e1b      	ldrb	r3, [r3, #24]
 80061a0:	005a      	lsls	r2, r3, #1
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d01b      	beq.n	80061ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80061d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6859      	ldr	r1, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	3b01      	subs	r3, #1
 80061e0:	035a      	lsls	r2, r3, #13
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	605a      	str	r2, [r3, #4]
 80061ea:	e007      	b.n	80061fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800620a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	3b01      	subs	r3, #1
 8006218:	051a      	lsls	r2, r3, #20
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006230:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6899      	ldr	r1, [r3, #8]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800623e:	025a      	lsls	r2, r3, #9
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689a      	ldr	r2, [r3, #8]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006256:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6899      	ldr	r1, [r3, #8]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	029a      	lsls	r2, r3, #10
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	609a      	str	r2, [r3, #8]
}
 800626c:	bf00      	nop
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	40012300 	.word	0x40012300
 800627c:	0f000001 	.word	0x0f000001

08006280 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006296:	2b00      	cmp	r3, #0
 8006298:	d13d      	bne.n	8006316 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d12b      	bne.n	800630c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d127      	bne.n	800630c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d006      	beq.n	80062d8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d119      	bne.n	800630c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0220 	bic.w	r2, r2, #32
 80062e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d105      	bne.n	800630c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006304:	f043 0201 	orr.w	r2, r3, #1
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006314:	e00f      	b.n	8006336 <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	f003 0310 	and.w	r3, r3, #16
 800631e:	2b00      	cmp	r3, #0
 8006320:	d004      	beq.n	800632c <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	4798      	blx	r3
}
 800632a:	e004      	b.n	8006336 <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	4798      	blx	r3
}
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006354:	bf00      	nop
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2240      	movs	r2, #64	; 0x40
 800636e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006374:	f043 0204 	orr.w	r2, r3, #4
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006384:	bf00      	nop
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f003 0307 	and.w	r3, r3, #7
 80063ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063b0:	4b0c      	ldr	r3, [pc, #48]	; (80063e4 <__NVIC_SetPriorityGrouping+0x44>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80063bc:	4013      	ands	r3, r2
 80063be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80063c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80063cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063d2:	4a04      	ldr	r2, [pc, #16]	; (80063e4 <__NVIC_SetPriorityGrouping+0x44>)
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	60d3      	str	r3, [r2, #12]
}
 80063d8:	bf00      	nop
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	e000ed00 	.word	0xe000ed00

080063e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063e8:	b480      	push	{r7}
 80063ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063ec:	4b04      	ldr	r3, [pc, #16]	; (8006400 <__NVIC_GetPriorityGrouping+0x18>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	0a1b      	lsrs	r3, r3, #8
 80063f2:	f003 0307 	and.w	r3, r3, #7
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	e000ed00 	.word	0xe000ed00

08006404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	4603      	mov	r3, r0
 800640c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800640e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006412:	2b00      	cmp	r3, #0
 8006414:	db0b      	blt.n	800642e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006416:	79fb      	ldrb	r3, [r7, #7]
 8006418:	f003 021f 	and.w	r2, r3, #31
 800641c:	4907      	ldr	r1, [pc, #28]	; (800643c <__NVIC_EnableIRQ+0x38>)
 800641e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006422:	095b      	lsrs	r3, r3, #5
 8006424:	2001      	movs	r0, #1
 8006426:	fa00 f202 	lsl.w	r2, r0, r2
 800642a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	e000e100 	.word	0xe000e100

08006440 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	4603      	mov	r3, r0
 8006448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800644a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800644e:	2b00      	cmp	r3, #0
 8006450:	db12      	blt.n	8006478 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006452:	79fb      	ldrb	r3, [r7, #7]
 8006454:	f003 021f 	and.w	r2, r3, #31
 8006458:	490a      	ldr	r1, [pc, #40]	; (8006484 <__NVIC_DisableIRQ+0x44>)
 800645a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800645e:	095b      	lsrs	r3, r3, #5
 8006460:	2001      	movs	r0, #1
 8006462:	fa00 f202 	lsl.w	r2, r0, r2
 8006466:	3320      	adds	r3, #32
 8006468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800646c:	f3bf 8f4f 	dsb	sy
}
 8006470:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006472:	f3bf 8f6f 	isb	sy
}
 8006476:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	e000e100 	.word	0xe000e100

08006488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	4603      	mov	r3, r0
 8006490:	6039      	str	r1, [r7, #0]
 8006492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006498:	2b00      	cmp	r3, #0
 800649a:	db0a      	blt.n	80064b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	490c      	ldr	r1, [pc, #48]	; (80064d4 <__NVIC_SetPriority+0x4c>)
 80064a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064a6:	0112      	lsls	r2, r2, #4
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	440b      	add	r3, r1
 80064ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80064b0:	e00a      	b.n	80064c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	4908      	ldr	r1, [pc, #32]	; (80064d8 <__NVIC_SetPriority+0x50>)
 80064b8:	79fb      	ldrb	r3, [r7, #7]
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	3b04      	subs	r3, #4
 80064c0:	0112      	lsls	r2, r2, #4
 80064c2:	b2d2      	uxtb	r2, r2
 80064c4:	440b      	add	r3, r1
 80064c6:	761a      	strb	r2, [r3, #24]
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	e000e100 	.word	0xe000e100
 80064d8:	e000ed00 	.word	0xe000ed00

080064dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064dc:	b480      	push	{r7}
 80064de:	b089      	sub	sp, #36	; 0x24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f1c3 0307 	rsb	r3, r3, #7
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	bf28      	it	cs
 80064fa:	2304      	movcs	r3, #4
 80064fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	3304      	adds	r3, #4
 8006502:	2b06      	cmp	r3, #6
 8006504:	d902      	bls.n	800650c <NVIC_EncodePriority+0x30>
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	3b03      	subs	r3, #3
 800650a:	e000      	b.n	800650e <NVIC_EncodePriority+0x32>
 800650c:	2300      	movs	r3, #0
 800650e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006510:	f04f 32ff 	mov.w	r2, #4294967295
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	fa02 f303 	lsl.w	r3, r2, r3
 800651a:	43da      	mvns	r2, r3
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	401a      	ands	r2, r3
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006524:	f04f 31ff 	mov.w	r1, #4294967295
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	fa01 f303 	lsl.w	r3, r1, r3
 800652e:	43d9      	mvns	r1, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006534:	4313      	orrs	r3, r2
         );
}
 8006536:	4618      	mov	r0, r3
 8006538:	3724      	adds	r7, #36	; 0x24
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
	...

08006544 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006544:	b480      	push	{r7}
 8006546:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006548:	f3bf 8f4f 	dsb	sy
}
 800654c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800654e:	4b06      	ldr	r3, [pc, #24]	; (8006568 <__NVIC_SystemReset+0x24>)
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006556:	4904      	ldr	r1, [pc, #16]	; (8006568 <__NVIC_SystemReset+0x24>)
 8006558:	4b04      	ldr	r3, [pc, #16]	; (800656c <__NVIC_SystemReset+0x28>)
 800655a:	4313      	orrs	r3, r2
 800655c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800655e:	f3bf 8f4f 	dsb	sy
}
 8006562:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006564:	bf00      	nop
 8006566:	e7fd      	b.n	8006564 <__NVIC_SystemReset+0x20>
 8006568:	e000ed00 	.word	0xe000ed00
 800656c:	05fa0004 	.word	0x05fa0004

08006570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff ff11 	bl	80063a0 <__NVIC_SetPriorityGrouping>
}
 800657e:	bf00      	nop
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006586:	b580      	push	{r7, lr}
 8006588:	b086      	sub	sp, #24
 800658a:	af00      	add	r7, sp, #0
 800658c:	4603      	mov	r3, r0
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	607a      	str	r2, [r7, #4]
 8006592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006594:	2300      	movs	r3, #0
 8006596:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006598:	f7ff ff26 	bl	80063e8 <__NVIC_GetPriorityGrouping>
 800659c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	68b9      	ldr	r1, [r7, #8]
 80065a2:	6978      	ldr	r0, [r7, #20]
 80065a4:	f7ff ff9a 	bl	80064dc <NVIC_EncodePriority>
 80065a8:	4602      	mov	r2, r0
 80065aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ae:	4611      	mov	r1, r2
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff ff69 	bl	8006488 <__NVIC_SetPriority>
}
 80065b6:	bf00      	nop
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	4603      	mov	r3, r0
 80065c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff ff19 	bl	8006404 <__NVIC_EnableIRQ>
}
 80065d2:	bf00      	nop
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b082      	sub	sp, #8
 80065de:	af00      	add	r7, sp, #0
 80065e0:	4603      	mov	r3, r0
 80065e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80065e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7ff ff29 	bl	8006440 <__NVIC_DisableIRQ>
}
 80065ee:	bf00      	nop
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80065fa:	f7ff ffa3 	bl	8006544 <__NVIC_SystemReset>
	...

08006600 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006600:	b480      	push	{r7}
 8006602:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006604:	f3bf 8f5f 	dmb	sy
}
 8006608:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800660a:	4b07      	ldr	r3, [pc, #28]	; (8006628 <HAL_MPU_Disable+0x28>)
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	4a06      	ldr	r2, [pc, #24]	; (8006628 <HAL_MPU_Disable+0x28>)
 8006610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006614:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8006616:	4b05      	ldr	r3, [pc, #20]	; (800662c <HAL_MPU_Disable+0x2c>)
 8006618:	2200      	movs	r2, #0
 800661a:	605a      	str	r2, [r3, #4]
}
 800661c:	bf00      	nop
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	e000ed00 	.word	0xe000ed00
 800662c:	e000ed90 	.word	0xe000ed90

08006630 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006638:	4a0b      	ldr	r2, [pc, #44]	; (8006668 <HAL_MPU_Enable+0x38>)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f043 0301 	orr.w	r3, r3, #1
 8006640:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006642:	4b0a      	ldr	r3, [pc, #40]	; (800666c <HAL_MPU_Enable+0x3c>)
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	4a09      	ldr	r2, [pc, #36]	; (800666c <HAL_MPU_Enable+0x3c>)
 8006648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800664c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800664e:	f3bf 8f4f 	dsb	sy
}
 8006652:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006654:	f3bf 8f6f 	isb	sy
}
 8006658:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800665a:	bf00      	nop
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	e000ed90 	.word	0xe000ed90
 800666c:	e000ed00 	.word	0xe000ed00

08006670 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	785a      	ldrb	r2, [r3, #1]
 800667c:	4b1d      	ldr	r3, [pc, #116]	; (80066f4 <HAL_MPU_ConfigRegion+0x84>)
 800667e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d029      	beq.n	80066dc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8006688:	4a1a      	ldr	r2, [pc, #104]	; (80066f4 <HAL_MPU_ConfigRegion+0x84>)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	7b1b      	ldrb	r3, [r3, #12]
 8006694:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	7adb      	ldrb	r3, [r3, #11]
 800669a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800669c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	7a9b      	ldrb	r3, [r3, #10]
 80066a2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80066a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	7b5b      	ldrb	r3, [r3, #13]
 80066aa:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80066ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	7b9b      	ldrb	r3, [r3, #14]
 80066b2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80066b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	7bdb      	ldrb	r3, [r3, #15]
 80066ba:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80066bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	7a5b      	ldrb	r3, [r3, #9]
 80066c2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80066c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	7a1b      	ldrb	r3, [r3, #8]
 80066ca:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80066cc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	7812      	ldrb	r2, [r2, #0]
 80066d2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80066d4:	4a07      	ldr	r2, [pc, #28]	; (80066f4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80066d6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80066d8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 80066da:	e005      	b.n	80066e8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
 80066dc:	4b05      	ldr	r3, [pc, #20]	; (80066f4 <HAL_MPU_ConfigRegion+0x84>)
 80066de:	2200      	movs	r2, #0
 80066e0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 80066e2:	4b04      	ldr	r3, [pc, #16]	; (80066f4 <HAL_MPU_ConfigRegion+0x84>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	611a      	str	r2, [r3, #16]
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	e000ed90 	.word	0xe000ed90

080066f8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e00e      	b.n	8006728 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	795b      	ldrb	r3, [r3, #5]
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	d105      	bne.n	8006720 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7fd fb5e 	bl	8003ddc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e022      	b.n	8006788 <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	795b      	ldrb	r3, [r3, #5]
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b02      	cmp	r3, #2
 800674a:	d101      	bne.n	8006750 <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 800674c:	2302      	movs	r3, #2
 800674e:	e01b      	b.n	8006788 <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	715a      	strb	r2, [r3, #5]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f042 0201 	orr.w	r2, r2, #1
 8006764:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	791b      	ldrb	r3, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2200      	movs	r2, #0
 8006772:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7fd fb53 	bl	8003e20 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	715a      	strb	r2, [r3, #5]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800679c:	2300      	movs	r3, #0
 800679e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2202      	movs	r2, #2
 80067a4:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f042 0201 	orr.w	r2, r2, #1
 80067b4:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80067b6:	2300      	movs	r3, #0
 80067b8:	617b      	str	r3, [r7, #20]
 80067ba:	e00a      	b.n	80067d2 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	441a      	add	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6812      	ldr	r2, [r2, #0]
 80067ca:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	3301      	adds	r3, #1
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d3f0      	bcc.n	80067bc <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2201      	movs	r2, #1
 80067e6:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80067e8:	693b      	ldr	r3, [r7, #16]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	371c      	adds	r7, #28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <HAL_CRC_GetState>:
  * @brief  Return the CRC handle state.
  * @param  hcrc CRC handle
  * @retval HAL state
  */
HAL_CRC_StateTypeDef HAL_CRC_GetState(CRC_HandleTypeDef *hcrc)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b083      	sub	sp, #12
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  /* Return CRC handle state */
  return hcrc->State;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	795b      	ldrb	r3, [r3, #5]
 8006802:	b2db      	uxtb	r3, r3
}
 8006804:	4618      	mov	r0, r3
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800681c:	f7ff f800 	bl	8005820 <HAL_GetTick>
 8006820:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d101      	bne.n	800682c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e099      	b.n	8006960 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 0201 	bic.w	r2, r2, #1
 800684a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800684c:	e00f      	b.n	800686e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800684e:	f7fe ffe7 	bl	8005820 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	2b05      	cmp	r3, #5
 800685a:	d908      	bls.n	800686e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2220      	movs	r2, #32
 8006860:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2203      	movs	r2, #3
 8006866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e078      	b.n	8006960 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1e8      	bne.n	800684e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	4b38      	ldr	r3, [pc, #224]	; (8006968 <HAL_DMA_Init+0x158>)
 8006888:	4013      	ands	r3, r2
 800688a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800689a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	4313      	orrs	r3, r2
 80068be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c4:	2b04      	cmp	r3, #4
 80068c6:	d107      	bne.n	80068d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d0:	4313      	orrs	r3, r2
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	f023 0307 	bic.w	r3, r3, #7
 80068ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	2b04      	cmp	r3, #4
 8006900:	d117      	bne.n	8006932 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	4313      	orrs	r3, r2
 800690a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00e      	beq.n	8006932 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fb6d 	bl	8006ff4 <DMA_CheckFifoParam>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d008      	beq.n	8006932 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2240      	movs	r2, #64	; 0x40
 8006924:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800692e:	2301      	movs	r3, #1
 8006930:	e016      	b.n	8006960 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fb24 	bl	8006f88 <DMA_CalcBaseAndBitshift>
 8006940:	4603      	mov	r3, r0
 8006942:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006948:	223f      	movs	r2, #63	; 0x3f
 800694a:	409a      	lsls	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3718      	adds	r7, #24
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	f010803f 	.word	0xf010803f

0800696c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e050      	b.n	8006a20 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b02      	cmp	r3, #2
 8006988:	d101      	bne.n	800698e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800698a:	2302      	movs	r3, #2
 800698c:	e048      	b.n	8006a20 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0201 	bic.w	r2, r2, #1
 800699c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2200      	movs	r2, #0
 80069ac:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2200      	movs	r2, #0
 80069b4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2200      	movs	r2, #0
 80069bc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2200      	movs	r2, #0
 80069c4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2221      	movs	r2, #33	; 0x21
 80069cc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fada 	bl	8006f88 <DMA_CalcBaseAndBitshift>
 80069d4:	4603      	mov	r3, r0
 80069d6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a00:	223f      	movs	r2, #63	; 0x3f
 8006a02:	409a      	lsls	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d101      	bne.n	8006a4e <HAL_DMA_Start_IT+0x26>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e040      	b.n	8006ad0 <HAL_DMA_Start_IT+0xa8>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d12f      	bne.n	8006ac2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2202      	movs	r2, #2
 8006a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	68b9      	ldr	r1, [r7, #8]
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 fa58 	bl	8006f2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a80:	223f      	movs	r2, #63	; 0x3f
 8006a82:	409a      	lsls	r2, r3
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0216 	orr.w	r2, r2, #22
 8006a96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d007      	beq.n	8006ab0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f042 0208 	orr.w	r2, r2, #8
 8006aae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0201 	orr.w	r2, r2, #1
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	e005      	b.n	8006ace <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006aca:	2302      	movs	r3, #2
 8006acc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3718      	adds	r7, #24
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006ae6:	f7fe fe9b 	bl	8005820 <HAL_GetTick>
 8006aea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d008      	beq.n	8006b0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2280      	movs	r2, #128	; 0x80
 8006afc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e052      	b.n	8006bb0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f022 0216 	bic.w	r2, r2, #22
 8006b18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	695a      	ldr	r2, [r3, #20]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d103      	bne.n	8006b3a <HAL_DMA_Abort+0x62>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d007      	beq.n	8006b4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 0208 	bic.w	r2, r2, #8
 8006b48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f022 0201 	bic.w	r2, r2, #1
 8006b58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b5a:	e013      	b.n	8006b84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b5c:	f7fe fe60 	bl	8005820 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	2b05      	cmp	r3, #5
 8006b68:	d90c      	bls.n	8006b84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2203      	movs	r2, #3
 8006b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e015      	b.n	8006bb0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e4      	bne.n	8006b5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b96:	223f      	movs	r2, #63	; 0x3f
 8006b98:	409a      	lsls	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d004      	beq.n	8006bd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2280      	movs	r2, #128	; 0x80
 8006bd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e00c      	b.n	8006bf0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2205      	movs	r2, #5
 8006bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0201 	bic.w	r2, r2, #1
 8006bec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006c08:	4b8e      	ldr	r3, [pc, #568]	; (8006e44 <HAL_DMA_IRQHandler+0x248>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a8e      	ldr	r2, [pc, #568]	; (8006e48 <HAL_DMA_IRQHandler+0x24c>)
 8006c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c12:	0a9b      	lsrs	r3, r3, #10
 8006c14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c26:	2208      	movs	r2, #8
 8006c28:	409a      	lsls	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d01a      	beq.n	8006c68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0304 	and.w	r3, r3, #4
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d013      	beq.n	8006c68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f022 0204 	bic.w	r2, r2, #4
 8006c4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c54:	2208      	movs	r2, #8
 8006c56:	409a      	lsls	r2, r3
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c60:	f043 0201 	orr.w	r2, r3, #1
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	409a      	lsls	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4013      	ands	r3, r2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d012      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00b      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	409a      	lsls	r2, r3
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c96:	f043 0202 	orr.w	r2, r3, #2
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca2:	2204      	movs	r2, #4
 8006ca4:	409a      	lsls	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d012      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00b      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc0:	2204      	movs	r2, #4
 8006cc2:	409a      	lsls	r2, r3
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ccc:	f043 0204 	orr.w	r2, r3, #4
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd8:	2210      	movs	r2, #16
 8006cda:	409a      	lsls	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d043      	beq.n	8006d6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0308 	and.w	r3, r3, #8
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d03c      	beq.n	8006d6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cf6:	2210      	movs	r2, #16
 8006cf8:	409a      	lsls	r2, r3
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d018      	beq.n	8006d3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d108      	bne.n	8006d2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d024      	beq.n	8006d6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	4798      	blx	r3
 8006d2a:	e01f      	b.n	8006d6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d01b      	beq.n	8006d6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	4798      	blx	r3
 8006d3c:	e016      	b.n	8006d6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d107      	bne.n	8006d5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0208 	bic.w	r2, r2, #8
 8006d5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d003      	beq.n	8006d6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d70:	2220      	movs	r2, #32
 8006d72:	409a      	lsls	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	4013      	ands	r3, r2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 808f 	beq.w	8006e9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0310 	and.w	r3, r3, #16
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 8087 	beq.w	8006e9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d92:	2220      	movs	r2, #32
 8006d94:	409a      	lsls	r2, r3
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b05      	cmp	r3, #5
 8006da4:	d136      	bne.n	8006e14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0216 	bic.w	r2, r2, #22
 8006db4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	695a      	ldr	r2, [r3, #20]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d103      	bne.n	8006dd6 <HAL_DMA_IRQHandler+0x1da>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d007      	beq.n	8006de6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 0208 	bic.w	r2, r2, #8
 8006de4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dea:	223f      	movs	r2, #63	; 0x3f
 8006dec:	409a      	lsls	r2, r3
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d07e      	beq.n	8006f08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	4798      	blx	r3
        }
        return;
 8006e12:	e079      	b.n	8006f08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d01d      	beq.n	8006e5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10d      	bne.n	8006e4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d031      	beq.n	8006e9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	4798      	blx	r3
 8006e40:	e02c      	b.n	8006e9c <HAL_DMA_IRQHandler+0x2a0>
 8006e42:	bf00      	nop
 8006e44:	20000000 	.word	0x20000000
 8006e48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d023      	beq.n	8006e9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	4798      	blx	r3
 8006e5c:	e01e      	b.n	8006e9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10f      	bne.n	8006e8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f022 0210 	bic.w	r2, r2, #16
 8006e7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d003      	beq.n	8006e9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d032      	beq.n	8006f0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d022      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2205      	movs	r2, #5
 8006eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 0201 	bic.w	r2, r2, #1
 8006ec6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	60bb      	str	r3, [r7, #8]
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d307      	bcc.n	8006ee4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1f2      	bne.n	8006ec8 <HAL_DMA_IRQHandler+0x2cc>
 8006ee2:	e000      	b.n	8006ee6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006ee4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d005      	beq.n	8006f0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	4798      	blx	r3
 8006f06:	e000      	b.n	8006f0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006f08:	bf00      	nop
    }
  }
}
 8006f0a:	3718      	adds	r7, #24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f1e:	b2db      	uxtb	r3, r3
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	2b40      	cmp	r3, #64	; 0x40
 8006f58:	d108      	bne.n	8006f6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006f6a:	e007      	b.n	8006f7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	60da      	str	r2, [r3, #12]
}
 8006f7c:	bf00      	nop
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	3b10      	subs	r3, #16
 8006f98:	4a14      	ldr	r2, [pc, #80]	; (8006fec <DMA_CalcBaseAndBitshift+0x64>)
 8006f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9e:	091b      	lsrs	r3, r3, #4
 8006fa0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006fa2:	4a13      	ldr	r2, [pc, #76]	; (8006ff0 <DMA_CalcBaseAndBitshift+0x68>)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d909      	bls.n	8006fca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006fbe:	f023 0303 	bic.w	r3, r3, #3
 8006fc2:	1d1a      	adds	r2, r3, #4
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	659a      	str	r2, [r3, #88]	; 0x58
 8006fc8:	e007      	b.n	8006fda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006fd2:	f023 0303 	bic.w	r3, r3, #3
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	aaaaaaab 	.word	0xaaaaaaab
 8006ff0:	08013b44 	.word	0x08013b44

08006ff4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007004:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d11f      	bne.n	800704e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b03      	cmp	r3, #3
 8007012:	d856      	bhi.n	80070c2 <DMA_CheckFifoParam+0xce>
 8007014:	a201      	add	r2, pc, #4	; (adr r2, 800701c <DMA_CheckFifoParam+0x28>)
 8007016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701a:	bf00      	nop
 800701c:	0800702d 	.word	0x0800702d
 8007020:	0800703f 	.word	0x0800703f
 8007024:	0800702d 	.word	0x0800702d
 8007028:	080070c3 	.word	0x080070c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d046      	beq.n	80070c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800703c:	e043      	b.n	80070c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007042:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007046:	d140      	bne.n	80070ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800704c:	e03d      	b.n	80070ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007056:	d121      	bne.n	800709c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2b03      	cmp	r3, #3
 800705c:	d837      	bhi.n	80070ce <DMA_CheckFifoParam+0xda>
 800705e:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <DMA_CheckFifoParam+0x70>)
 8007060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007064:	08007075 	.word	0x08007075
 8007068:	0800707b 	.word	0x0800707b
 800706c:	08007075 	.word	0x08007075
 8007070:	0800708d 	.word	0x0800708d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	73fb      	strb	r3, [r7, #15]
      break;
 8007078:	e030      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d025      	beq.n	80070d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800708a:	e022      	b.n	80070d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007094:	d11f      	bne.n	80070d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800709a:	e01c      	b.n	80070d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d903      	bls.n	80070aa <DMA_CheckFifoParam+0xb6>
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2b03      	cmp	r3, #3
 80070a6:	d003      	beq.n	80070b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80070a8:	e018      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	73fb      	strb	r3, [r7, #15]
      break;
 80070ae:	e015      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00e      	beq.n	80070da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	73fb      	strb	r3, [r7, #15]
      break;
 80070c0:	e00b      	b.n	80070da <DMA_CheckFifoParam+0xe6>
      break;
 80070c2:	bf00      	nop
 80070c4:	e00a      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
      break;
 80070c6:	bf00      	nop
 80070c8:	e008      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
      break;
 80070ca:	bf00      	nop
 80070cc:	e006      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
      break;
 80070ce:	bf00      	nop
 80070d0:	e004      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
      break;
 80070d2:	bf00      	nop
 80070d4:	e002      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
      break;   
 80070d6:	bf00      	nop
 80070d8:	e000      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
      break;
 80070da:	bf00      	nop
    }
  } 
  
  return status; 
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop

080070ec <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80070f6:	4b4b      	ldr	r3, [pc, #300]	; (8007224 <HAL_FLASH_IRQHandler+0x138>)
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d020      	beq.n	8007144 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8007102:	4b49      	ldr	r3, [pc, #292]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b01      	cmp	r3, #1
 800710a:	d107      	bne.n	800711c <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 800710c:	4b46      	ldr	r3, [pc, #280]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8007112:	4b45      	ldr	r3, [pc, #276]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 8007114:	f04f 32ff 	mov.w	r2, #4294967295
 8007118:	60da      	str	r2, [r3, #12]
 800711a:	e00b      	b.n	8007134 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800711c:	4b42      	ldr	r3, [pc, #264]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b02      	cmp	r3, #2
 8007124:	d103      	bne.n	800712e <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8007126:	4b40      	ldr	r3, [pc, #256]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	607b      	str	r3, [r7, #4]
 800712c:	e002      	b.n	8007134 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800712e:	4b3e      	ldr	r3, [pc, #248]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8007134:	f000 f88e 	bl	8007254 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f881 	bl	8007240 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800713e:	4b3a      	ldr	r3, [pc, #232]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 8007140:	2200      	movs	r2, #0
 8007142:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007144:	4b37      	ldr	r3, [pc, #220]	; (8007224 <HAL_FLASH_IRQHandler+0x138>)
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	2b00      	cmp	r3, #0
 800714e:	d04a      	beq.n	80071e6 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007150:	4b34      	ldr	r3, [pc, #208]	; (8007224 <HAL_FLASH_IRQHandler+0x138>)
 8007152:	2201      	movs	r2, #1
 8007154:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8007156:	4b34      	ldr	r3, [pc, #208]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b01      	cmp	r3, #1
 800715e:	d12d      	bne.n	80071bc <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8007160:	4b31      	ldr	r3, [pc, #196]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	3b01      	subs	r3, #1
 8007166:	4a30      	ldr	r2, [pc, #192]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 8007168:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800716a:	4b2f      	ldr	r3, [pc, #188]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d015      	beq.n	800719e <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8007172:	4b2d      	ldr	r3, [pc, #180]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f857 	bl	800722c <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800717e:	4b2a      	ldr	r3, [pc, #168]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	3301      	adds	r3, #1
 8007184:	4a28      	ldr	r2, [pc, #160]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 8007186:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8007188:	4b27      	ldr	r3, [pc, #156]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800718e:	4b26      	ldr	r3, [pc, #152]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 8007190:	7a1b      	ldrb	r3, [r3, #8]
 8007192:	b2db      	uxtb	r3, r3
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f8c2 	bl	8007320 <FLASH_Erase_Sector>
 800719c:	e023      	b.n	80071e6 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800719e:	f04f 33ff 	mov.w	r3, #4294967295
 80071a2:	607b      	str	r3, [r7, #4]
 80071a4:	4a20      	ldr	r2, [pc, #128]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80071aa:	4b1f      	ldr	r3, [pc, #124]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80071b0:	f000 f8fe 	bl	80073b0 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f839 	bl	800722c <HAL_FLASH_EndOfOperationCallback>
 80071ba:	e014      	b.n	80071e6 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 80071bc:	4b1a      	ldr	r3, [pc, #104]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d107      	bne.n	80071d6 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80071c6:	f000 f8f3 	bl	80073b0 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80071ca:	4b17      	ldr	r3, [pc, #92]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 f82c 	bl	800722c <HAL_FLASH_EndOfOperationCallback>
 80071d4:	e004      	b.n	80071e0 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80071d6:	4b14      	ldr	r3, [pc, #80]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 f826 	bl	800722c <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80071e0:	4b11      	ldr	r3, [pc, #68]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80071e6:	4b10      	ldr	r3, [pc, #64]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d114      	bne.n	800721a <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 80071f0:	4b0c      	ldr	r3, [pc, #48]	; (8007224 <HAL_FLASH_IRQHandler+0x138>)
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	4a0b      	ldr	r2, [pc, #44]	; (8007224 <HAL_FLASH_IRQHandler+0x138>)
 80071f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80071fa:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 80071fc:	4b09      	ldr	r3, [pc, #36]	; (8007224 <HAL_FLASH_IRQHandler+0x138>)
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	4a08      	ldr	r2, [pc, #32]	; (8007224 <HAL_FLASH_IRQHandler+0x138>)
 8007202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007206:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8007208:	4b06      	ldr	r3, [pc, #24]	; (8007224 <HAL_FLASH_IRQHandler+0x138>)
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	4a05      	ldr	r2, [pc, #20]	; (8007224 <HAL_FLASH_IRQHandler+0x138>)
 800720e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007212:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8007214:	4b04      	ldr	r3, [pc, #16]	; (8007228 <HAL_FLASH_IRQHandler+0x13c>)
 8007216:	2200      	movs	r2, #0
 8007218:	761a      	strb	r2, [r3, #24]
  }
}
 800721a:	bf00      	nop
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	40023c00 	.word	0x40023c00
 8007228:	20000858 	.word	0x20000858

0800722c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007254:	b480      	push	{r7}
 8007256:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007258:	4b2f      	ldr	r3, [pc, #188]	; (8007318 <FLASH_SetErrorCode+0xc4>)
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	f003 0310 	and.w	r3, r3, #16
 8007260:	2b00      	cmp	r3, #0
 8007262:	d008      	beq.n	8007276 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007264:	4b2d      	ldr	r3, [pc, #180]	; (800731c <FLASH_SetErrorCode+0xc8>)
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	f043 0310 	orr.w	r3, r3, #16
 800726c:	4a2b      	ldr	r2, [pc, #172]	; (800731c <FLASH_SetErrorCode+0xc8>)
 800726e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007270:	4b29      	ldr	r3, [pc, #164]	; (8007318 <FLASH_SetErrorCode+0xc4>)
 8007272:	2210      	movs	r2, #16
 8007274:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007276:	4b28      	ldr	r3, [pc, #160]	; (8007318 <FLASH_SetErrorCode+0xc4>)
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	f003 0320 	and.w	r3, r3, #32
 800727e:	2b00      	cmp	r3, #0
 8007280:	d008      	beq.n	8007294 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007282:	4b26      	ldr	r3, [pc, #152]	; (800731c <FLASH_SetErrorCode+0xc8>)
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	f043 0308 	orr.w	r3, r3, #8
 800728a:	4a24      	ldr	r2, [pc, #144]	; (800731c <FLASH_SetErrorCode+0xc8>)
 800728c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800728e:	4b22      	ldr	r3, [pc, #136]	; (8007318 <FLASH_SetErrorCode+0xc4>)
 8007290:	2220      	movs	r2, #32
 8007292:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007294:	4b20      	ldr	r3, [pc, #128]	; (8007318 <FLASH_SetErrorCode+0xc4>)
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729c:	2b00      	cmp	r3, #0
 800729e:	d008      	beq.n	80072b2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80072a0:	4b1e      	ldr	r3, [pc, #120]	; (800731c <FLASH_SetErrorCode+0xc8>)
 80072a2:	69db      	ldr	r3, [r3, #28]
 80072a4:	f043 0304 	orr.w	r3, r3, #4
 80072a8:	4a1c      	ldr	r2, [pc, #112]	; (800731c <FLASH_SetErrorCode+0xc8>)
 80072aa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80072ac:	4b1a      	ldr	r3, [pc, #104]	; (8007318 <FLASH_SetErrorCode+0xc4>)
 80072ae:	2240      	movs	r2, #64	; 0x40
 80072b0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80072b2:	4b19      	ldr	r3, [pc, #100]	; (8007318 <FLASH_SetErrorCode+0xc4>)
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d008      	beq.n	80072d0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80072be:	4b17      	ldr	r3, [pc, #92]	; (800731c <FLASH_SetErrorCode+0xc8>)
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	f043 0302 	orr.w	r3, r3, #2
 80072c6:	4a15      	ldr	r2, [pc, #84]	; (800731c <FLASH_SetErrorCode+0xc8>)
 80072c8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80072ca:	4b13      	ldr	r3, [pc, #76]	; (8007318 <FLASH_SetErrorCode+0xc4>)
 80072cc:	2280      	movs	r2, #128	; 0x80
 80072ce:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80072d0:	4b11      	ldr	r3, [pc, #68]	; (8007318 <FLASH_SetErrorCode+0xc4>)
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d009      	beq.n	80072f0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80072dc:	4b0f      	ldr	r3, [pc, #60]	; (800731c <FLASH_SetErrorCode+0xc8>)
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	f043 0301 	orr.w	r3, r3, #1
 80072e4:	4a0d      	ldr	r2, [pc, #52]	; (800731c <FLASH_SetErrorCode+0xc8>)
 80072e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80072e8:	4b0b      	ldr	r3, [pc, #44]	; (8007318 <FLASH_SetErrorCode+0xc4>)
 80072ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072ee:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80072f0:	4b09      	ldr	r3, [pc, #36]	; (8007318 <FLASH_SetErrorCode+0xc4>)
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d008      	beq.n	800730e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80072fc:	4b07      	ldr	r3, [pc, #28]	; (800731c <FLASH_SetErrorCode+0xc8>)
 80072fe:	69db      	ldr	r3, [r3, #28]
 8007300:	f043 0320 	orr.w	r3, r3, #32
 8007304:	4a05      	ldr	r2, [pc, #20]	; (800731c <FLASH_SetErrorCode+0xc8>)
 8007306:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007308:	4b03      	ldr	r3, [pc, #12]	; (8007318 <FLASH_SetErrorCode+0xc4>)
 800730a:	2202      	movs	r2, #2
 800730c:	60da      	str	r2, [r3, #12]
  }
}
 800730e:	bf00      	nop
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	40023c00 	.word	0x40023c00
 800731c:	20000858 	.word	0x20000858

08007320 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	460b      	mov	r3, r1
 800732a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007330:	78fb      	ldrb	r3, [r7, #3]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d102      	bne.n	800733c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8007336:	2300      	movs	r3, #0
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	e010      	b.n	800735e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800733c:	78fb      	ldrb	r3, [r7, #3]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d103      	bne.n	800734a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007342:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007346:	60fb      	str	r3, [r7, #12]
 8007348:	e009      	b.n	800735e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800734a:	78fb      	ldrb	r3, [r7, #3]
 800734c:	2b02      	cmp	r3, #2
 800734e:	d103      	bne.n	8007358 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007354:	60fb      	str	r3, [r7, #12]
 8007356:	e002      	b.n	800735e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007358:	f44f 7340 	mov.w	r3, #768	; 0x300
 800735c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800735e:	4b13      	ldr	r3, [pc, #76]	; (80073ac <FLASH_Erase_Sector+0x8c>)
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	4a12      	ldr	r2, [pc, #72]	; (80073ac <FLASH_Erase_Sector+0x8c>)
 8007364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007368:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800736a:	4b10      	ldr	r3, [pc, #64]	; (80073ac <FLASH_Erase_Sector+0x8c>)
 800736c:	691a      	ldr	r2, [r3, #16]
 800736e:	490f      	ldr	r1, [pc, #60]	; (80073ac <FLASH_Erase_Sector+0x8c>)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4313      	orrs	r3, r2
 8007374:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007376:	4b0d      	ldr	r3, [pc, #52]	; (80073ac <FLASH_Erase_Sector+0x8c>)
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	4a0c      	ldr	r2, [pc, #48]	; (80073ac <FLASH_Erase_Sector+0x8c>)
 800737c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007380:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007382:	4b0a      	ldr	r3, [pc, #40]	; (80073ac <FLASH_Erase_Sector+0x8c>)
 8007384:	691a      	ldr	r2, [r3, #16]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	00db      	lsls	r3, r3, #3
 800738a:	4313      	orrs	r3, r2
 800738c:	4a07      	ldr	r2, [pc, #28]	; (80073ac <FLASH_Erase_Sector+0x8c>)
 800738e:	f043 0302 	orr.w	r3, r3, #2
 8007392:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007394:	4b05      	ldr	r3, [pc, #20]	; (80073ac <FLASH_Erase_Sector+0x8c>)
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	4a04      	ldr	r2, [pc, #16]	; (80073ac <FLASH_Erase_Sector+0x8c>)
 800739a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800739e:	6113      	str	r3, [r2, #16]
}
 80073a0:	bf00      	nop
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	40023c00 	.word	0x40023c00

080073b0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80073b4:	4b20      	ldr	r3, [pc, #128]	; (8007438 <FLASH_FlushCaches+0x88>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d017      	beq.n	80073f0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80073c0:	4b1d      	ldr	r3, [pc, #116]	; (8007438 <FLASH_FlushCaches+0x88>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a1c      	ldr	r2, [pc, #112]	; (8007438 <FLASH_FlushCaches+0x88>)
 80073c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073ca:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80073cc:	4b1a      	ldr	r3, [pc, #104]	; (8007438 <FLASH_FlushCaches+0x88>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a19      	ldr	r2, [pc, #100]	; (8007438 <FLASH_FlushCaches+0x88>)
 80073d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80073d6:	6013      	str	r3, [r2, #0]
 80073d8:	4b17      	ldr	r3, [pc, #92]	; (8007438 <FLASH_FlushCaches+0x88>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a16      	ldr	r2, [pc, #88]	; (8007438 <FLASH_FlushCaches+0x88>)
 80073de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073e2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80073e4:	4b14      	ldr	r3, [pc, #80]	; (8007438 <FLASH_FlushCaches+0x88>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a13      	ldr	r2, [pc, #76]	; (8007438 <FLASH_FlushCaches+0x88>)
 80073ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80073ee:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80073f0:	4b11      	ldr	r3, [pc, #68]	; (8007438 <FLASH_FlushCaches+0x88>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d017      	beq.n	800742c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80073fc:	4b0e      	ldr	r3, [pc, #56]	; (8007438 <FLASH_FlushCaches+0x88>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a0d      	ldr	r2, [pc, #52]	; (8007438 <FLASH_FlushCaches+0x88>)
 8007402:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007406:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007408:	4b0b      	ldr	r3, [pc, #44]	; (8007438 <FLASH_FlushCaches+0x88>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a0a      	ldr	r2, [pc, #40]	; (8007438 <FLASH_FlushCaches+0x88>)
 800740e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	4b08      	ldr	r3, [pc, #32]	; (8007438 <FLASH_FlushCaches+0x88>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a07      	ldr	r2, [pc, #28]	; (8007438 <FLASH_FlushCaches+0x88>)
 800741a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800741e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007420:	4b05      	ldr	r3, [pc, #20]	; (8007438 <FLASH_FlushCaches+0x88>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a04      	ldr	r2, [pc, #16]	; (8007438 <FLASH_FlushCaches+0x88>)
 8007426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800742a:	6013      	str	r3, [r2, #0]
  }
}
 800742c:	bf00      	nop
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	40023c00 	.word	0x40023c00

0800743c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800743c:	b480      	push	{r7}
 800743e:	b089      	sub	sp, #36	; 0x24
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007446:	2300      	movs	r3, #0
 8007448:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800744a:	2300      	movs	r3, #0
 800744c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800744e:	2300      	movs	r3, #0
 8007450:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007452:	2300      	movs	r3, #0
 8007454:	61fb      	str	r3, [r7, #28]
 8007456:	e159      	b.n	800770c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007458:	2201      	movs	r2, #1
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	fa02 f303 	lsl.w	r3, r2, r3
 8007460:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	4013      	ands	r3, r2
 800746a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	429a      	cmp	r2, r3
 8007472:	f040 8148 	bne.w	8007706 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f003 0303 	and.w	r3, r3, #3
 800747e:	2b01      	cmp	r3, #1
 8007480:	d005      	beq.n	800748e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800748a:	2b02      	cmp	r3, #2
 800748c:	d130      	bne.n	80074f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	2203      	movs	r2, #3
 800749a:	fa02 f303 	lsl.w	r3, r2, r3
 800749e:	43db      	mvns	r3, r3
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	4013      	ands	r3, r2
 80074a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68da      	ldr	r2, [r3, #12]
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	fa02 f303 	lsl.w	r3, r2, r3
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	69ba      	ldr	r2, [r7, #24]
 80074bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80074c4:	2201      	movs	r2, #1
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	fa02 f303 	lsl.w	r3, r2, r3
 80074cc:	43db      	mvns	r3, r3
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	4013      	ands	r3, r2
 80074d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	091b      	lsrs	r3, r3, #4
 80074da:	f003 0201 	and.w	r2, r3, #1
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	fa02 f303 	lsl.w	r3, r2, r3
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f003 0303 	and.w	r3, r3, #3
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d017      	beq.n	800752c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	2203      	movs	r2, #3
 8007508:	fa02 f303 	lsl.w	r3, r2, r3
 800750c:	43db      	mvns	r3, r3
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	4013      	ands	r3, r2
 8007512:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	005b      	lsls	r3, r3, #1
 800751c:	fa02 f303 	lsl.w	r3, r2, r3
 8007520:	69ba      	ldr	r2, [r7, #24]
 8007522:	4313      	orrs	r3, r2
 8007524:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	f003 0303 	and.w	r3, r3, #3
 8007534:	2b02      	cmp	r3, #2
 8007536:	d123      	bne.n	8007580 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	08da      	lsrs	r2, r3, #3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3208      	adds	r2, #8
 8007540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007544:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	f003 0307 	and.w	r3, r3, #7
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	220f      	movs	r2, #15
 8007550:	fa02 f303 	lsl.w	r3, r2, r3
 8007554:	43db      	mvns	r3, r3
 8007556:	69ba      	ldr	r2, [r7, #24]
 8007558:	4013      	ands	r3, r2
 800755a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	691a      	ldr	r2, [r3, #16]
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	f003 0307 	and.w	r3, r3, #7
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	fa02 f303 	lsl.w	r3, r2, r3
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	4313      	orrs	r3, r2
 8007570:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	08da      	lsrs	r2, r3, #3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	3208      	adds	r2, #8
 800757a:	69b9      	ldr	r1, [r7, #24]
 800757c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	2203      	movs	r2, #3
 800758c:	fa02 f303 	lsl.w	r3, r2, r3
 8007590:	43db      	mvns	r3, r3
 8007592:	69ba      	ldr	r2, [r7, #24]
 8007594:	4013      	ands	r3, r2
 8007596:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f003 0203 	and.w	r2, r3, #3
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	005b      	lsls	r3, r3, #1
 80075a4:	fa02 f303 	lsl.w	r3, r2, r3
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 80a2 	beq.w	8007706 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075c2:	2300      	movs	r3, #0
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	4b57      	ldr	r3, [pc, #348]	; (8007724 <HAL_GPIO_Init+0x2e8>)
 80075c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ca:	4a56      	ldr	r2, [pc, #344]	; (8007724 <HAL_GPIO_Init+0x2e8>)
 80075cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075d0:	6453      	str	r3, [r2, #68]	; 0x44
 80075d2:	4b54      	ldr	r3, [pc, #336]	; (8007724 <HAL_GPIO_Init+0x2e8>)
 80075d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075da:	60fb      	str	r3, [r7, #12]
 80075dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80075de:	4a52      	ldr	r2, [pc, #328]	; (8007728 <HAL_GPIO_Init+0x2ec>)
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	089b      	lsrs	r3, r3, #2
 80075e4:	3302      	adds	r3, #2
 80075e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	f003 0303 	and.w	r3, r3, #3
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	220f      	movs	r2, #15
 80075f6:	fa02 f303 	lsl.w	r3, r2, r3
 80075fa:	43db      	mvns	r3, r3
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	4013      	ands	r3, r2
 8007600:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a49      	ldr	r2, [pc, #292]	; (800772c <HAL_GPIO_Init+0x2f0>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d019      	beq.n	800763e <HAL_GPIO_Init+0x202>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a48      	ldr	r2, [pc, #288]	; (8007730 <HAL_GPIO_Init+0x2f4>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d013      	beq.n	800763a <HAL_GPIO_Init+0x1fe>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a47      	ldr	r2, [pc, #284]	; (8007734 <HAL_GPIO_Init+0x2f8>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d00d      	beq.n	8007636 <HAL_GPIO_Init+0x1fa>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a46      	ldr	r2, [pc, #280]	; (8007738 <HAL_GPIO_Init+0x2fc>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d007      	beq.n	8007632 <HAL_GPIO_Init+0x1f6>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a45      	ldr	r2, [pc, #276]	; (800773c <HAL_GPIO_Init+0x300>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d101      	bne.n	800762e <HAL_GPIO_Init+0x1f2>
 800762a:	2304      	movs	r3, #4
 800762c:	e008      	b.n	8007640 <HAL_GPIO_Init+0x204>
 800762e:	2307      	movs	r3, #7
 8007630:	e006      	b.n	8007640 <HAL_GPIO_Init+0x204>
 8007632:	2303      	movs	r3, #3
 8007634:	e004      	b.n	8007640 <HAL_GPIO_Init+0x204>
 8007636:	2302      	movs	r3, #2
 8007638:	e002      	b.n	8007640 <HAL_GPIO_Init+0x204>
 800763a:	2301      	movs	r3, #1
 800763c:	e000      	b.n	8007640 <HAL_GPIO_Init+0x204>
 800763e:	2300      	movs	r3, #0
 8007640:	69fa      	ldr	r2, [r7, #28]
 8007642:	f002 0203 	and.w	r2, r2, #3
 8007646:	0092      	lsls	r2, r2, #2
 8007648:	4093      	lsls	r3, r2
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	4313      	orrs	r3, r2
 800764e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007650:	4935      	ldr	r1, [pc, #212]	; (8007728 <HAL_GPIO_Init+0x2ec>)
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	089b      	lsrs	r3, r3, #2
 8007656:	3302      	adds	r3, #2
 8007658:	69ba      	ldr	r2, [r7, #24]
 800765a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800765e:	4b38      	ldr	r3, [pc, #224]	; (8007740 <HAL_GPIO_Init+0x304>)
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	43db      	mvns	r3, r3
 8007668:	69ba      	ldr	r2, [r7, #24]
 800766a:	4013      	ands	r3, r2
 800766c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	4313      	orrs	r3, r2
 8007680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007682:	4a2f      	ldr	r2, [pc, #188]	; (8007740 <HAL_GPIO_Init+0x304>)
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007688:	4b2d      	ldr	r3, [pc, #180]	; (8007740 <HAL_GPIO_Init+0x304>)
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	43db      	mvns	r3, r3
 8007692:	69ba      	ldr	r2, [r7, #24]
 8007694:	4013      	ands	r3, r2
 8007696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d003      	beq.n	80076ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80076ac:	4a24      	ldr	r2, [pc, #144]	; (8007740 <HAL_GPIO_Init+0x304>)
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80076b2:	4b23      	ldr	r3, [pc, #140]	; (8007740 <HAL_GPIO_Init+0x304>)
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	43db      	mvns	r3, r3
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	4013      	ands	r3, r2
 80076c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80076ce:	69ba      	ldr	r2, [r7, #24]
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80076d6:	4a1a      	ldr	r2, [pc, #104]	; (8007740 <HAL_GPIO_Init+0x304>)
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80076dc:	4b18      	ldr	r3, [pc, #96]	; (8007740 <HAL_GPIO_Init+0x304>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	43db      	mvns	r3, r3
 80076e6:	69ba      	ldr	r2, [r7, #24]
 80076e8:	4013      	ands	r3, r2
 80076ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d003      	beq.n	8007700 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80076f8:	69ba      	ldr	r2, [r7, #24]
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007700:	4a0f      	ldr	r2, [pc, #60]	; (8007740 <HAL_GPIO_Init+0x304>)
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	3301      	adds	r3, #1
 800770a:	61fb      	str	r3, [r7, #28]
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	2b0f      	cmp	r3, #15
 8007710:	f67f aea2 	bls.w	8007458 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007714:	bf00      	nop
 8007716:	bf00      	nop
 8007718:	3724      	adds	r7, #36	; 0x24
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	40023800 	.word	0x40023800
 8007728:	40013800 	.word	0x40013800
 800772c:	40020000 	.word	0x40020000
 8007730:	40020400 	.word	0x40020400
 8007734:	40020800 	.word	0x40020800
 8007738:	40020c00 	.word	0x40020c00
 800773c:	40021000 	.word	0x40021000
 8007740:	40013c00 	.word	0x40013c00

08007744 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007744:	b480      	push	{r7}
 8007746:	b087      	sub	sp, #28
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800774e:	2300      	movs	r3, #0
 8007750:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007752:	2300      	movs	r3, #0
 8007754:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007756:	2300      	movs	r3, #0
 8007758:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800775a:	2300      	movs	r3, #0
 800775c:	617b      	str	r3, [r7, #20]
 800775e:	e0bb      	b.n	80078d8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007760:	2201      	movs	r2, #1
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	fa02 f303 	lsl.w	r3, r2, r3
 8007768:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	4013      	ands	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	429a      	cmp	r2, r3
 8007778:	f040 80ab 	bne.w	80078d2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800777c:	4a5c      	ldr	r2, [pc, #368]	; (80078f0 <HAL_GPIO_DeInit+0x1ac>)
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	089b      	lsrs	r3, r3, #2
 8007782:	3302      	adds	r3, #2
 8007784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007788:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f003 0303 	and.w	r3, r3, #3
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	220f      	movs	r2, #15
 8007794:	fa02 f303 	lsl.w	r3, r2, r3
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	4013      	ands	r3, r2
 800779c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a54      	ldr	r2, [pc, #336]	; (80078f4 <HAL_GPIO_DeInit+0x1b0>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d019      	beq.n	80077da <HAL_GPIO_DeInit+0x96>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a53      	ldr	r2, [pc, #332]	; (80078f8 <HAL_GPIO_DeInit+0x1b4>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d013      	beq.n	80077d6 <HAL_GPIO_DeInit+0x92>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a52      	ldr	r2, [pc, #328]	; (80078fc <HAL_GPIO_DeInit+0x1b8>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d00d      	beq.n	80077d2 <HAL_GPIO_DeInit+0x8e>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a51      	ldr	r2, [pc, #324]	; (8007900 <HAL_GPIO_DeInit+0x1bc>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d007      	beq.n	80077ce <HAL_GPIO_DeInit+0x8a>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a50      	ldr	r2, [pc, #320]	; (8007904 <HAL_GPIO_DeInit+0x1c0>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d101      	bne.n	80077ca <HAL_GPIO_DeInit+0x86>
 80077c6:	2304      	movs	r3, #4
 80077c8:	e008      	b.n	80077dc <HAL_GPIO_DeInit+0x98>
 80077ca:	2307      	movs	r3, #7
 80077cc:	e006      	b.n	80077dc <HAL_GPIO_DeInit+0x98>
 80077ce:	2303      	movs	r3, #3
 80077d0:	e004      	b.n	80077dc <HAL_GPIO_DeInit+0x98>
 80077d2:	2302      	movs	r3, #2
 80077d4:	e002      	b.n	80077dc <HAL_GPIO_DeInit+0x98>
 80077d6:	2301      	movs	r3, #1
 80077d8:	e000      	b.n	80077dc <HAL_GPIO_DeInit+0x98>
 80077da:	2300      	movs	r3, #0
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	f002 0203 	and.w	r2, r2, #3
 80077e2:	0092      	lsls	r2, r2, #2
 80077e4:	4093      	lsls	r3, r2
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d132      	bne.n	8007852 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80077ec:	4b46      	ldr	r3, [pc, #280]	; (8007908 <HAL_GPIO_DeInit+0x1c4>)
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	43db      	mvns	r3, r3
 80077f4:	4944      	ldr	r1, [pc, #272]	; (8007908 <HAL_GPIO_DeInit+0x1c4>)
 80077f6:	4013      	ands	r3, r2
 80077f8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80077fa:	4b43      	ldr	r3, [pc, #268]	; (8007908 <HAL_GPIO_DeInit+0x1c4>)
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	43db      	mvns	r3, r3
 8007802:	4941      	ldr	r1, [pc, #260]	; (8007908 <HAL_GPIO_DeInit+0x1c4>)
 8007804:	4013      	ands	r3, r2
 8007806:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007808:	4b3f      	ldr	r3, [pc, #252]	; (8007908 <HAL_GPIO_DeInit+0x1c4>)
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	43db      	mvns	r3, r3
 8007810:	493d      	ldr	r1, [pc, #244]	; (8007908 <HAL_GPIO_DeInit+0x1c4>)
 8007812:	4013      	ands	r3, r2
 8007814:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007816:	4b3c      	ldr	r3, [pc, #240]	; (8007908 <HAL_GPIO_DeInit+0x1c4>)
 8007818:	689a      	ldr	r2, [r3, #8]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	43db      	mvns	r3, r3
 800781e:	493a      	ldr	r1, [pc, #232]	; (8007908 <HAL_GPIO_DeInit+0x1c4>)
 8007820:	4013      	ands	r3, r2
 8007822:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f003 0303 	and.w	r3, r3, #3
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	220f      	movs	r2, #15
 800782e:	fa02 f303 	lsl.w	r3, r2, r3
 8007832:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007834:	4a2e      	ldr	r2, [pc, #184]	; (80078f0 <HAL_GPIO_DeInit+0x1ac>)
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	089b      	lsrs	r3, r3, #2
 800783a:	3302      	adds	r3, #2
 800783c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	43da      	mvns	r2, r3
 8007844:	482a      	ldr	r0, [pc, #168]	; (80078f0 <HAL_GPIO_DeInit+0x1ac>)
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	089b      	lsrs	r3, r3, #2
 800784a:	400a      	ands	r2, r1
 800784c:	3302      	adds	r3, #2
 800784e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	2103      	movs	r1, #3
 800785c:	fa01 f303 	lsl.w	r3, r1, r3
 8007860:	43db      	mvns	r3, r3
 8007862:	401a      	ands	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	08da      	lsrs	r2, r3, #3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3208      	adds	r2, #8
 8007870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f003 0307 	and.w	r3, r3, #7
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	220f      	movs	r2, #15
 800787e:	fa02 f303 	lsl.w	r3, r2, r3
 8007882:	43db      	mvns	r3, r3
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	08d2      	lsrs	r2, r2, #3
 8007888:	4019      	ands	r1, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	3208      	adds	r2, #8
 800788e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68da      	ldr	r2, [r3, #12]
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	005b      	lsls	r3, r3, #1
 800789a:	2103      	movs	r1, #3
 800789c:	fa01 f303 	lsl.w	r3, r1, r3
 80078a0:	43db      	mvns	r3, r3
 80078a2:	401a      	ands	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	2101      	movs	r1, #1
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	fa01 f303 	lsl.w	r3, r1, r3
 80078b4:	43db      	mvns	r3, r3
 80078b6:	401a      	ands	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	005b      	lsls	r3, r3, #1
 80078c4:	2103      	movs	r1, #3
 80078c6:	fa01 f303 	lsl.w	r3, r1, r3
 80078ca:	43db      	mvns	r3, r3
 80078cc:	401a      	ands	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	3301      	adds	r3, #1
 80078d6:	617b      	str	r3, [r7, #20]
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	2b0f      	cmp	r3, #15
 80078dc:	f67f af40 	bls.w	8007760 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80078e0:	bf00      	nop
 80078e2:	bf00      	nop
 80078e4:	371c      	adds	r7, #28
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	40013800 	.word	0x40013800
 80078f4:	40020000 	.word	0x40020000
 80078f8:	40020400 	.word	0x40020400
 80078fc:	40020800 	.word	0x40020800
 8007900:	40020c00 	.word	0x40020c00
 8007904:	40021000 	.word	0x40021000
 8007908:	40013c00 	.word	0x40013c00

0800790c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	460b      	mov	r3, r1
 8007916:	807b      	strh	r3, [r7, #2]
 8007918:	4613      	mov	r3, r2
 800791a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800791c:	787b      	ldrb	r3, [r7, #1]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d003      	beq.n	800792a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007922:	887a      	ldrh	r2, [r7, #2]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007928:	e003      	b.n	8007932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800792a:	887b      	ldrh	r3, [r7, #2]
 800792c:	041a      	lsls	r2, r3, #16
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	619a      	str	r2, [r3, #24]
}
 8007932:	bf00      	nop
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800793e:	b480      	push	{r7}
 8007940:	b085      	sub	sp, #20
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	460b      	mov	r3, r1
 8007948:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007950:	887a      	ldrh	r2, [r7, #2]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	4013      	ands	r3, r2
 8007956:	041a      	lsls	r2, r3, #16
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	43d9      	mvns	r1, r3
 800795c:	887b      	ldrh	r3, [r7, #2]
 800795e:	400b      	ands	r3, r1
 8007960:	431a      	orrs	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	619a      	str	r2, [r3, #24]
}
 8007966:	bf00      	nop
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
	...

08007974 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e171      	b.n	8007c6a <HAL_I2C_Init+0x2f6>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d12c      	bne.n	80079ec <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a77      	ldr	r2, [pc, #476]	; (8007b7c <HAL_I2C_Init+0x208>)
 800799e:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a77      	ldr	r2, [pc, #476]	; (8007b80 <HAL_I2C_Init+0x20c>)
 80079a4:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a76      	ldr	r2, [pc, #472]	; (8007b84 <HAL_I2C_Init+0x210>)
 80079aa:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a76      	ldr	r2, [pc, #472]	; (8007b88 <HAL_I2C_Init+0x214>)
 80079b0:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a75      	ldr	r2, [pc, #468]	; (8007b8c <HAL_I2C_Init+0x218>)
 80079b6:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a75      	ldr	r2, [pc, #468]	; (8007b90 <HAL_I2C_Init+0x21c>)
 80079bc:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a74      	ldr	r2, [pc, #464]	; (8007b94 <HAL_I2C_Init+0x220>)
 80079c2:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a74      	ldr	r2, [pc, #464]	; (8007b98 <HAL_I2C_Init+0x224>)
 80079c8:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a73      	ldr	r2, [pc, #460]	; (8007b9c <HAL_I2C_Init+0x228>)
 80079ce:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a73      	ldr	r2, [pc, #460]	; (8007ba0 <HAL_I2C_Init+0x22c>)
 80079d4:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d102      	bne.n	80079e4 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a70      	ldr	r2, [pc, #448]	; (8007ba4 <HAL_I2C_Init+0x230>)
 80079e2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2224      	movs	r2, #36	; 0x24
 80079f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f022 0201 	bic.w	r2, r2, #1
 8007a02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007a24:	f002 fbe0 	bl	800a1e8 <HAL_RCC_GetPCLK1Freq>
 8007a28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	4a5e      	ldr	r2, [pc, #376]	; (8007ba8 <HAL_I2C_Init+0x234>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d807      	bhi.n	8007a44 <HAL_I2C_Init+0xd0>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4a5d      	ldr	r2, [pc, #372]	; (8007bac <HAL_I2C_Init+0x238>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	bf94      	ite	ls
 8007a3c:	2301      	movls	r3, #1
 8007a3e:	2300      	movhi	r3, #0
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	e006      	b.n	8007a52 <HAL_I2C_Init+0xde>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4a5a      	ldr	r2, [pc, #360]	; (8007bb0 <HAL_I2C_Init+0x23c>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	bf94      	ite	ls
 8007a4c:	2301      	movls	r3, #1
 8007a4e:	2300      	movhi	r3, #0
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <HAL_I2C_Init+0xe6>
  {
    return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e107      	b.n	8007c6a <HAL_I2C_Init+0x2f6>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4a55      	ldr	r2, [pc, #340]	; (8007bb4 <HAL_I2C_Init+0x240>)
 8007a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a62:	0c9b      	lsrs	r3, r3, #18
 8007a64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6a1b      	ldr	r3, [r3, #32]
 8007a80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	4a47      	ldr	r2, [pc, #284]	; (8007ba8 <HAL_I2C_Init+0x234>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d802      	bhi.n	8007a94 <HAL_I2C_Init+0x120>
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	3301      	adds	r3, #1
 8007a92:	e009      	b.n	8007aa8 <HAL_I2C_Init+0x134>
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007a9a:	fb02 f303 	mul.w	r3, r2, r3
 8007a9e:	4a46      	ldr	r2, [pc, #280]	; (8007bb8 <HAL_I2C_Init+0x244>)
 8007aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa4:	099b      	lsrs	r3, r3, #6
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	6812      	ldr	r2, [r2, #0]
 8007aac:	430b      	orrs	r3, r1
 8007aae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007aba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	4939      	ldr	r1, [pc, #228]	; (8007ba8 <HAL_I2C_Init+0x234>)
 8007ac4:	428b      	cmp	r3, r1
 8007ac6:	d819      	bhi.n	8007afc <HAL_I2C_Init+0x188>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	1e59      	subs	r1, r3, #1
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ad6:	1c59      	adds	r1, r3, #1
 8007ad8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007adc:	400b      	ands	r3, r1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <HAL_I2C_Init+0x184>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	1e59      	subs	r1, r3, #1
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	005b      	lsls	r3, r3, #1
 8007aec:	fbb1 f3f3 	udiv	r3, r1, r3
 8007af0:	3301      	adds	r3, #1
 8007af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007af6:	e071      	b.n	8007bdc <HAL_I2C_Init+0x268>
 8007af8:	2304      	movs	r3, #4
 8007afa:	e06f      	b.n	8007bdc <HAL_I2C_Init+0x268>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d111      	bne.n	8007b28 <HAL_I2C_Init+0x1b4>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	1e58      	subs	r0, r3, #1
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6859      	ldr	r1, [r3, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	005b      	lsls	r3, r3, #1
 8007b10:	440b      	add	r3, r1
 8007b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b16:	3301      	adds	r3, #1
 8007b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	bf0c      	ite	eq
 8007b20:	2301      	moveq	r3, #1
 8007b22:	2300      	movne	r3, #0
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	e012      	b.n	8007b4e <HAL_I2C_Init+0x1da>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	1e58      	subs	r0, r3, #1
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6859      	ldr	r1, [r3, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	440b      	add	r3, r1
 8007b36:	0099      	lsls	r1, r3, #2
 8007b38:	440b      	add	r3, r1
 8007b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b3e:	3301      	adds	r3, #1
 8007b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	bf0c      	ite	eq
 8007b48:	2301      	moveq	r3, #1
 8007b4a:	2300      	movne	r3, #0
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <HAL_I2C_Init+0x1e2>
 8007b52:	2301      	movs	r3, #1
 8007b54:	e042      	b.n	8007bdc <HAL_I2C_Init+0x268>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d12e      	bne.n	8007bbc <HAL_I2C_Init+0x248>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	1e58      	subs	r0, r3, #1
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6859      	ldr	r1, [r3, #4]
 8007b66:	460b      	mov	r3, r1
 8007b68:	005b      	lsls	r3, r3, #1
 8007b6a:	440b      	add	r3, r1
 8007b6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b70:	3301      	adds	r3, #1
 8007b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b7a:	e02f      	b.n	8007bdc <HAL_I2C_Init+0x268>
 8007b7c:	080032b9 	.word	0x080032b9
 8007b80:	08008269 	.word	0x08008269
 8007b84:	0800827d 	.word	0x0800827d
 8007b88:	08008291 	.word	0x08008291
 8007b8c:	080082c1 	.word	0x080082c1
 8007b90:	080082d5 	.word	0x080082d5
 8007b94:	080082e9 	.word	0x080082e9
 8007b98:	080032e5 	.word	0x080032e5
 8007b9c:	080082fd 	.word	0x080082fd
 8007ba0:	080082a5 	.word	0x080082a5
 8007ba4:	08004621 	.word	0x08004621
 8007ba8:	000186a0 	.word	0x000186a0
 8007bac:	001e847f 	.word	0x001e847f
 8007bb0:	003d08ff 	.word	0x003d08ff
 8007bb4:	431bde83 	.word	0x431bde83
 8007bb8:	10624dd3 	.word	0x10624dd3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	1e58      	subs	r0, r3, #1
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6859      	ldr	r1, [r3, #4]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	440b      	add	r3, r1
 8007bca:	0099      	lsls	r1, r3, #2
 8007bcc:	440b      	add	r3, r1
 8007bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007bdc:	6879      	ldr	r1, [r7, #4]
 8007bde:	6809      	ldr	r1, [r1, #0]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	69da      	ldr	r2, [r3, #28]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	431a      	orrs	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007c0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	6911      	ldr	r1, [r2, #16]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	68d2      	ldr	r2, [r2, #12]
 8007c16:	4311      	orrs	r1, r2
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	6812      	ldr	r2, [r2, #0]
 8007c1c:	430b      	orrs	r3, r1
 8007c1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	695a      	ldr	r2, [r3, #20]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	431a      	orrs	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f042 0201 	orr.w	r2, r2, #1
 8007c4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2220      	movs	r2, #32
 8007c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop

08007c74 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e02c      	b.n	8007ce0 <HAL_I2C_DeInit+0x6c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2224      	movs	r2, #36	; 0x24
 8007c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0201 	bic.w	r2, r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  if (hi2c->MspDeInitCallback == NULL)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d103      	bne.n	8007cb0 <HAL_I2C_DeInit+0x3c>
  {
    hi2c->MspDeInitCallback = HAL_I2C_MspDeInit; /* Legacy weak MspDeInit  */
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a0f      	ldr	r2, [pc, #60]	; (8007ce8 <HAL_I2C_DeInit+0x74>)
 8007cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	4798      	blx	r3
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	08004759 	.word	0x08004759

08007cec <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b087      	sub	sp, #28
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	607a      	str	r2, [r7, #4]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	817b      	strh	r3, [r7, #10]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007d00:	2300      	movs	r3, #0
 8007d02:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	2b20      	cmp	r3, #32
 8007d0e:	f040 8085 	bne.w	8007e1c <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007d12:	4b46      	ldr	r3, [pc, #280]	; (8007e2c <HAL_I2C_Master_Transmit_IT+0x140>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	08db      	lsrs	r3, r3, #3
 8007d18:	4a45      	ldr	r2, [pc, #276]	; (8007e30 <HAL_I2C_Master_Transmit_IT+0x144>)
 8007d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1e:	0a1a      	lsrs	r2, r3, #8
 8007d20:	4613      	mov	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	009a      	lsls	r2, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d116      	bne.n	8007d66 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2220      	movs	r2, #32
 8007d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d52:	f043 0220 	orr.w	r2, r3, #32
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e05b      	b.n	8007e1e <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	f003 0302 	and.w	r3, r3, #2
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d0db      	beq.n	8007d2c <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d101      	bne.n	8007d82 <HAL_I2C_Master_Transmit_IT+0x96>
 8007d7e:	2302      	movs	r3, #2
 8007d80:	e04d      	b.n	8007e1e <HAL_I2C_Master_Transmit_IT+0x132>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d007      	beq.n	8007da8 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f042 0201 	orr.w	r2, r2, #1
 8007da6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007db6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2221      	movs	r2, #33	; 0x21
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2210      	movs	r2, #16
 8007dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	893a      	ldrh	r2, [r7, #8]
 8007dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	4a13      	ldr	r2, [pc, #76]	; (8007e34 <HAL_I2C_Master_Transmit_IT+0x148>)
 8007de8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8007dea:	897a      	ldrh	r2, [r7, #10]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	685a      	ldr	r2, [r3, #4]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007e06:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e16:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	e000      	b.n	8007e1e <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8007e1c:	2302      	movs	r3, #2
  }
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	371c      	adds	r7, #28
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	20000000 	.word	0x20000000
 8007e30:	14f8b589 	.word	0x14f8b589
 8007e34:	ffff0000 	.word	0xffff0000

08007e38 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b088      	sub	sp, #32
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e50:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e58:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e60:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
 8007e64:	2b10      	cmp	r3, #16
 8007e66:	d003      	beq.n	8007e70 <HAL_I2C_EV_IRQHandler+0x38>
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
 8007e6a:	2b40      	cmp	r3, #64	; 0x40
 8007e6c:	f040 80c1 	bne.w	8007ff2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	695b      	ldr	r3, [r3, #20]
 8007e7e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10d      	bne.n	8007ea6 <HAL_I2C_EV_IRQHandler+0x6e>
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007e90:	d003      	beq.n	8007e9a <HAL_I2C_EV_IRQHandler+0x62>
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007e98:	d101      	bne.n	8007e9e <HAL_I2C_EV_IRQHandler+0x66>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e000      	b.n	8007ea0 <HAL_I2C_EV_IRQHandler+0x68>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	f000 8132 	beq.w	800810a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00c      	beq.n	8007eca <HAL_I2C_EV_IRQHandler+0x92>
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	0a5b      	lsrs	r3, r3, #9
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d006      	beq.n	8007eca <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f001 fc9b 	bl	80097f8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fd95 	bl	80089f2 <I2C_Master_SB>
 8007ec8:	e092      	b.n	8007ff0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	08db      	lsrs	r3, r3, #3
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d009      	beq.n	8007eea <HAL_I2C_EV_IRQHandler+0xb2>
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	0a5b      	lsrs	r3, r3, #9
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fe0b 	bl	8008afe <I2C_Master_ADD10>
 8007ee8:	e082      	b.n	8007ff0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	085b      	lsrs	r3, r3, #1
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d009      	beq.n	8007f0a <HAL_I2C_EV_IRQHandler+0xd2>
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	0a5b      	lsrs	r3, r3, #9
 8007efa:	f003 0301 	and.w	r3, r3, #1
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fe25 	bl	8008b52 <I2C_Master_ADDR>
 8007f08:	e072      	b.n	8007ff0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	089b      	lsrs	r3, r3, #2
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d03b      	beq.n	8007f8e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f24:	f000 80f3 	beq.w	800810e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	09db      	lsrs	r3, r3, #7
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00f      	beq.n	8007f54 <HAL_I2C_EV_IRQHandler+0x11c>
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	0a9b      	lsrs	r3, r3, #10
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d009      	beq.n	8007f54 <HAL_I2C_EV_IRQHandler+0x11c>
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	089b      	lsrs	r3, r3, #2
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d103      	bne.n	8007f54 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f9f9 	bl	8008344 <I2C_MasterTransmit_TXE>
 8007f52:	e04d      	b.n	8007ff0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	089b      	lsrs	r3, r3, #2
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f000 80d6 	beq.w	800810e <HAL_I2C_EV_IRQHandler+0x2d6>
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	0a5b      	lsrs	r3, r3, #9
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f000 80cf 	beq.w	800810e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
 8007f72:	2b21      	cmp	r3, #33	; 0x21
 8007f74:	d103      	bne.n	8007f7e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fa83 	bl	8008482 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f7c:	e0c7      	b.n	800810e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
 8007f80:	2b40      	cmp	r3, #64	; 0x40
 8007f82:	f040 80c4 	bne.w	800810e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 faf4 	bl	8008574 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f8c:	e0bf      	b.n	800810e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f9c:	f000 80b7 	beq.w	800810e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	099b      	lsrs	r3, r3, #6
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00f      	beq.n	8007fcc <HAL_I2C_EV_IRQHandler+0x194>
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	0a9b      	lsrs	r3, r3, #10
 8007fb0:	f003 0301 	and.w	r3, r3, #1
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d009      	beq.n	8007fcc <HAL_I2C_EV_IRQHandler+0x194>
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	089b      	lsrs	r3, r3, #2
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d103      	bne.n	8007fcc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fb6a 	bl	800869e <I2C_MasterReceive_RXNE>
 8007fca:	e011      	b.n	8007ff0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	089b      	lsrs	r3, r3, #2
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f000 809a 	beq.w	800810e <HAL_I2C_EV_IRQHandler+0x2d6>
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	0a5b      	lsrs	r3, r3, #9
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f000 8093 	beq.w	800810e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fc16 	bl	800881a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007fee:	e08e      	b.n	800810e <HAL_I2C_EV_IRQHandler+0x2d6>
 8007ff0:	e08d      	b.n	800810e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d004      	beq.n	8008004 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	61fb      	str	r3, [r7, #28]
 8008002:	e007      	b.n	8008014 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	085b      	lsrs	r3, r3, #1
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	2b00      	cmp	r3, #0
 800801e:	d012      	beq.n	8008046 <HAL_I2C_EV_IRQHandler+0x20e>
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	0a5b      	lsrs	r3, r3, #9
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00c      	beq.n	8008046 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008030:	2b00      	cmp	r3, #0
 8008032:	d003      	beq.n	800803c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800803c:	69b9      	ldr	r1, [r7, #24]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 ffd8 	bl	8008ff4 <I2C_Slave_ADDR>
 8008044:	e066      	b.n	8008114 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	091b      	lsrs	r3, r3, #4
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	2b00      	cmp	r3, #0
 8008050:	d009      	beq.n	8008066 <HAL_I2C_EV_IRQHandler+0x22e>
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	0a5b      	lsrs	r3, r3, #9
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f001 f812 	bl	8009088 <I2C_Slave_STOPF>
 8008064:	e056      	b.n	8008114 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008066:	7bbb      	ldrb	r3, [r7, #14]
 8008068:	2b21      	cmp	r3, #33	; 0x21
 800806a:	d002      	beq.n	8008072 <HAL_I2C_EV_IRQHandler+0x23a>
 800806c:	7bbb      	ldrb	r3, [r7, #14]
 800806e:	2b29      	cmp	r3, #41	; 0x29
 8008070:	d125      	bne.n	80080be <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	09db      	lsrs	r3, r3, #7
 8008076:	f003 0301 	and.w	r3, r3, #1
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00f      	beq.n	800809e <HAL_I2C_EV_IRQHandler+0x266>
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	0a9b      	lsrs	r3, r3, #10
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	2b00      	cmp	r3, #0
 8008088:	d009      	beq.n	800809e <HAL_I2C_EV_IRQHandler+0x266>
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	089b      	lsrs	r3, r3, #2
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	2b00      	cmp	r3, #0
 8008094:	d103      	bne.n	800809e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 feec 	bl	8008e74 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800809c:	e039      	b.n	8008112 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	089b      	lsrs	r3, r3, #2
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d033      	beq.n	8008112 <HAL_I2C_EV_IRQHandler+0x2da>
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	0a5b      	lsrs	r3, r3, #9
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d02d      	beq.n	8008112 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 ff1a 	bl	8008ef0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80080bc:	e029      	b.n	8008112 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	099b      	lsrs	r3, r3, #6
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00f      	beq.n	80080ea <HAL_I2C_EV_IRQHandler+0x2b2>
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	0a9b      	lsrs	r3, r3, #10
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d009      	beq.n	80080ea <HAL_I2C_EV_IRQHandler+0x2b2>
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	089b      	lsrs	r3, r3, #2
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d103      	bne.n	80080ea <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 ff25 	bl	8008f32 <I2C_SlaveReceive_RXNE>
 80080e8:	e014      	b.n	8008114 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	089b      	lsrs	r3, r3, #2
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00e      	beq.n	8008114 <HAL_I2C_EV_IRQHandler+0x2dc>
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	0a5b      	lsrs	r3, r3, #9
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d008      	beq.n	8008114 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 ff54 	bl	8008fb0 <I2C_SlaveReceive_BTF>
 8008108:	e004      	b.n	8008114 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800810a:	bf00      	nop
 800810c:	e002      	b.n	8008114 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800810e:	bf00      	nop
 8008110:	e000      	b.n	8008114 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008112:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008114:	3720      	adds	r7, #32
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b08a      	sub	sp, #40	; 0x28
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008132:	2300      	movs	r3, #0
 8008134:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800813c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	0a1b      	lsrs	r3, r3, #8
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00e      	beq.n	8008168 <HAL_I2C_ER_IRQHandler+0x4e>
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	0a1b      	lsrs	r3, r3, #8
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	d008      	beq.n	8008168 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	f043 0301 	orr.w	r3, r3, #1
 800815c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008166:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008168:	6a3b      	ldr	r3, [r7, #32]
 800816a:	0a5b      	lsrs	r3, r3, #9
 800816c:	f003 0301 	and.w	r3, r3, #1
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00e      	beq.n	8008192 <HAL_I2C_ER_IRQHandler+0x78>
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	0a1b      	lsrs	r3, r3, #8
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b00      	cmp	r3, #0
 800817e:	d008      	beq.n	8008192 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	f043 0302 	orr.w	r3, r3, #2
 8008186:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8008190:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	0a9b      	lsrs	r3, r3, #10
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	2b00      	cmp	r3, #0
 800819c:	d03f      	beq.n	800821e <HAL_I2C_ER_IRQHandler+0x104>
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	0a1b      	lsrs	r3, r3, #8
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d039      	beq.n	800821e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80081aa:	7efb      	ldrb	r3, [r7, #27]
 80081ac:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081bc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80081c4:	7ebb      	ldrb	r3, [r7, #26]
 80081c6:	2b20      	cmp	r3, #32
 80081c8:	d112      	bne.n	80081f0 <HAL_I2C_ER_IRQHandler+0xd6>
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10f      	bne.n	80081f0 <HAL_I2C_ER_IRQHandler+0xd6>
 80081d0:	7cfb      	ldrb	r3, [r7, #19]
 80081d2:	2b21      	cmp	r3, #33	; 0x21
 80081d4:	d008      	beq.n	80081e8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80081d6:	7cfb      	ldrb	r3, [r7, #19]
 80081d8:	2b29      	cmp	r3, #41	; 0x29
 80081da:	d005      	beq.n	80081e8 <HAL_I2C_ER_IRQHandler+0xce>
 80081dc:	7cfb      	ldrb	r3, [r7, #19]
 80081de:	2b28      	cmp	r3, #40	; 0x28
 80081e0:	d106      	bne.n	80081f0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2b21      	cmp	r3, #33	; 0x21
 80081e6:	d103      	bne.n	80081f0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f001 f881 	bl	80092f0 <I2C_Slave_AF>
 80081ee:	e016      	b.n	800821e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80081f8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	f043 0304 	orr.w	r3, r3, #4
 8008200:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008202:	7efb      	ldrb	r3, [r7, #27]
 8008204:	2b10      	cmp	r3, #16
 8008206:	d002      	beq.n	800820e <HAL_I2C_ER_IRQHandler+0xf4>
 8008208:	7efb      	ldrb	r3, [r7, #27]
 800820a:	2b40      	cmp	r3, #64	; 0x40
 800820c:	d107      	bne.n	800821e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800821c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	0adb      	lsrs	r3, r3, #11
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00e      	beq.n	8008248 <HAL_I2C_ER_IRQHandler+0x12e>
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	0a1b      	lsrs	r3, r3, #8
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	2b00      	cmp	r3, #0
 8008234:	d008      	beq.n	8008248 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008238:	f043 0308 	orr.w	r3, r3, #8
 800823c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8008246:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824a:	2b00      	cmp	r3, #0
 800824c:	d008      	beq.n	8008260 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008254:	431a      	orrs	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f001 f8ba 	bl	80093d4 <I2C_ITError>
  }
}
 8008260:	bf00      	nop
 8008262:	3728      	adds	r7, #40	; 0x28
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	460b      	mov	r3, r1
 80082ae:	70fb      	strb	r3, [r7, #3]
 80082b0:	4613      	mov	r3, r2
 80082b2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80082b4:	bf00      	nop
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800831e:	b2db      	uxtb	r3, r3
}
 8008320:	4618      	mov	r0, r3
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8008338:	4618      	mov	r0, r3
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008352:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800835a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008360:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008366:	2b00      	cmp	r3, #0
 8008368:	d153      	bne.n	8008412 <I2C_MasterTransmit_TXE+0xce>
 800836a:	7bfb      	ldrb	r3, [r7, #15]
 800836c:	2b21      	cmp	r3, #33	; 0x21
 800836e:	d150      	bne.n	8008412 <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	2b08      	cmp	r3, #8
 8008374:	d01e      	beq.n	80083b4 <I2C_MasterTransmit_TXE+0x70>
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2b20      	cmp	r3, #32
 800837a:	d01b      	beq.n	80083b4 <I2C_MasterTransmit_TXE+0x70>
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008382:	d017      	beq.n	80083b4 <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	685a      	ldr	r2, [r3, #4]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008392:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2211      	movs	r2, #17
 8008398:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2220      	movs	r2, #32
 80083a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80083b2:	e062      	b.n	800847a <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	685a      	ldr	r2, [r3, #4]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80083c2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083d2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2220      	movs	r2, #32
 80083de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b40      	cmp	r3, #64	; 0x40
 80083ec:	d108      	bne.n	8008400 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80083fe:	e03c      	b.n	800847a <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008410:	e033      	b.n	800847a <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008412:	7bfb      	ldrb	r3, [r7, #15]
 8008414:	2b21      	cmp	r3, #33	; 0x21
 8008416:	d005      	beq.n	8008424 <I2C_MasterTransmit_TXE+0xe0>
 8008418:	7bbb      	ldrb	r3, [r7, #14]
 800841a:	2b40      	cmp	r3, #64	; 0x40
 800841c:	d12d      	bne.n	800847a <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800841e:	7bfb      	ldrb	r3, [r7, #15]
 8008420:	2b22      	cmp	r3, #34	; 0x22
 8008422:	d12a      	bne.n	800847a <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008428:	b29b      	uxth	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d108      	bne.n	8008440 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	685a      	ldr	r2, [r3, #4]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800843c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800843e:	e01c      	b.n	800847a <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b40      	cmp	r3, #64	; 0x40
 800844a:	d103      	bne.n	8008454 <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f891 	bl	8008574 <I2C_MemoryTransmit_TXE_BTF>
}
 8008452:	e012      	b.n	800847a <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008458:	781a      	ldrb	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008464:	1c5a      	adds	r2, r3, #1
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800846e:	b29b      	uxth	r3, r3
 8008470:	3b01      	subs	r3, #1
 8008472:	b29a      	uxth	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008478:	e7ff      	b.n	800847a <I2C_MasterTransmit_TXE+0x136>
 800847a:	bf00      	nop
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b21      	cmp	r3, #33	; 0x21
 800849a:	d167      	bne.n	800856c <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d012      	beq.n	80084cc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084aa:	781a      	ldrb	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	3b01      	subs	r3, #1
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80084ca:	e04f      	b.n	800856c <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2b08      	cmp	r3, #8
 80084d0:	d01e      	beq.n	8008510 <I2C_MasterTransmit_BTF+0x8e>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2b20      	cmp	r3, #32
 80084d6:	d01b      	beq.n	8008510 <I2C_MasterTransmit_BTF+0x8e>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80084de:	d017      	beq.n	8008510 <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	685a      	ldr	r2, [r3, #4]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80084ee:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2211      	movs	r2, #17
 80084f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2220      	movs	r2, #32
 8008502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	4798      	blx	r3
}
 800850e:	e02d      	b.n	800856c <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800851e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800852e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2220      	movs	r2, #32
 800853a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b40      	cmp	r3, #64	; 0x40
 8008548:	d108      	bne.n	800855c <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	4798      	blx	r3
}
 800855a:	e007      	b.n	800856c <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	4798      	blx	r3
}
 800856c:	bf00      	nop
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008582:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008588:	2b00      	cmp	r3, #0
 800858a:	d11d      	bne.n	80085c8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008590:	2b01      	cmp	r3, #1
 8008592:	d10b      	bne.n	80085ac <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008598:	b2da      	uxtb	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085a4:	1c9a      	adds	r2, r3, #2
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80085aa:	e074      	b.n	8008696 <I2C_MemoryTransmit_TXE_BTF+0x122>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	121b      	asrs	r3, r3, #8
 80085b4:	b2da      	uxtb	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c0:	1c5a      	adds	r2, r3, #1
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80085c6:	e066      	b.n	8008696 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 1U)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d10b      	bne.n	80085e8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085e0:	1c5a      	adds	r2, r3, #1
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80085e6:	e056      	b.n	8008696 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 2U)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d152      	bne.n	8008696 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
 80085f2:	2b22      	cmp	r3, #34	; 0x22
 80085f4:	d10d      	bne.n	8008612 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008604:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800860a:	1c5a      	adds	r2, r3, #1
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008610:	e041      	b.n	8008696 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008616:	b29b      	uxth	r3, r3
 8008618:	2b00      	cmp	r3, #0
 800861a:	d015      	beq.n	8008648 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800861c:	7bfb      	ldrb	r3, [r7, #15]
 800861e:	2b21      	cmp	r3, #33	; 0x21
 8008620:	d112      	bne.n	8008648 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008626:	781a      	ldrb	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008632:	1c5a      	adds	r2, r3, #1
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800863c:	b29b      	uxth	r3, r3
 800863e:	3b01      	subs	r3, #1
 8008640:	b29a      	uxth	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008646:	e026      	b.n	8008696 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800864c:	b29b      	uxth	r3, r3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d121      	bne.n	8008696 <I2C_MemoryTransmit_TXE_BTF+0x122>
 8008652:	7bfb      	ldrb	r3, [r7, #15]
 8008654:	2b21      	cmp	r3, #33	; 0x21
 8008656:	d11e      	bne.n	8008696 <I2C_MemoryTransmit_TXE_BTF+0x122>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	685a      	ldr	r2, [r3, #4]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008666:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008676:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2220      	movs	r2, #32
 8008682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	4798      	blx	r3
}
 8008696:	bf00      	nop
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b22      	cmp	r3, #34	; 0x22
 80086b0:	f040 80af 	bne.w	8008812 <I2C_MasterReceive_RXNE+0x174>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d921      	bls.n	8008706 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	691a      	ldr	r2, [r3, #16]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086cc:	b2d2      	uxtb	r2, r2
 80086ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	1c5a      	adds	r2, r3, #1
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086de:	b29b      	uxth	r3, r3
 80086e0:	3b01      	subs	r3, #1
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	f040 808f 	bne.w	8008812 <I2C_MasterReceive_RXNE+0x174>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008702:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008704:	e085      	b.n	8008812 <I2C_MasterReceive_RXNE+0x174>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870a:	2b02      	cmp	r3, #2
 800870c:	d078      	beq.n	8008800 <I2C_MasterReceive_RXNE+0x162>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d002      	beq.n	800871a <I2C_MasterReceive_RXNE+0x7c>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d172      	bne.n	8008800 <I2C_MasterReceive_RXNE+0x162>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f001 f83a 	bl	8009794 <I2C_WaitOnSTOPRequestThroughIT>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d144      	bne.n	80087b0 <I2C_MasterReceive_RXNE+0x112>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008734:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008744:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	691a      	ldr	r2, [r3, #16]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008750:	b2d2      	uxtb	r2, r2
 8008752:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008758:	1c5a      	adds	r2, r3, #1
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008762:	b29b      	uxth	r3, r3
 8008764:	3b01      	subs	r3, #1
 8008766:	b29a      	uxth	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2220      	movs	r2, #32
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b40      	cmp	r3, #64	; 0x40
 800877e:	d10b      	bne.n	8008798 <I2C_MasterReceive_RXNE+0xfa>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MemRxCpltCallback(hi2c);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008796:	e03c      	b.n	8008812 <I2C_MasterReceive_RXNE+0x174>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2212      	movs	r2, #18
 80087a4:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80087ae:	e030      	b.n	8008812 <I2C_MasterReceive_RXNE+0x174>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80087be:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	691a      	ldr	r2, [r3, #16]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ca:	b2d2      	uxtb	r2, r2
 80087cc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	1c5a      	adds	r2, r3, #1
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087dc:	b29b      	uxth	r3, r3
 80087de:	3b01      	subs	r3, #1
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2220      	movs	r2, #32
 80087ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCallback(hi2c);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80087fe:	e008      	b.n	8008812 <I2C_MasterReceive_RXNE+0x174>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800880e:	605a      	str	r2, [r3, #4]
}
 8008810:	e7ff      	b.n	8008812 <I2C_MasterReceive_RXNE+0x174>
 8008812:	bf00      	nop
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b084      	sub	sp, #16
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008826:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800882c:	b29b      	uxth	r3, r3
 800882e:	2b04      	cmp	r3, #4
 8008830:	d11b      	bne.n	800886a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008840:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	691a      	ldr	r2, [r3, #16]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884c:	b2d2      	uxtb	r2, r2
 800884e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008854:	1c5a      	adds	r2, r3, #1
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800885e:	b29b      	uxth	r3, r3
 8008860:	3b01      	subs	r3, #1
 8008862:	b29a      	uxth	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008868:	e0bf      	b.n	80089ea <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 3U)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800886e:	b29b      	uxth	r3, r3
 8008870:	2b03      	cmp	r3, #3
 8008872:	d129      	bne.n	80088c8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	685a      	ldr	r2, [r3, #4]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008882:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2b04      	cmp	r3, #4
 8008888:	d00a      	beq.n	80088a0 <I2C_MasterReceive_BTF+0x86>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2b02      	cmp	r3, #2
 800888e:	d007      	beq.n	80088a0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800889e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	691a      	ldr	r2, [r3, #16]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088aa:	b2d2      	uxtb	r2, r2
 80088ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088bc:	b29b      	uxth	r3, r3
 80088be:	3b01      	subs	r3, #1
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80088c6:	e090      	b.n	80089ea <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 2U)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d178      	bne.n	80089c4 <I2C_MasterReceive_BTF+0x1aa>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d002      	beq.n	80088de <I2C_MasterReceive_BTF+0xc4>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2b10      	cmp	r3, #16
 80088dc:	d108      	bne.n	80088f0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	e019      	b.n	8008924 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2b04      	cmp	r3, #4
 80088f4:	d002      	beq.n	80088fc <I2C_MasterReceive_BTF+0xe2>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d108      	bne.n	800890e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800890a:	601a      	str	r2, [r3, #0]
 800890c:	e00a      	b.n	8008924 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2b10      	cmp	r3, #16
 8008912:	d007      	beq.n	8008924 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008922:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	691a      	ldr	r2, [r3, #16]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892e:	b2d2      	uxtb	r2, r2
 8008930:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008936:	1c5a      	adds	r2, r3, #1
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008940:	b29b      	uxth	r3, r3
 8008942:	3b01      	subs	r3, #1
 8008944:	b29a      	uxth	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	691a      	ldr	r2, [r3, #16]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008954:	b2d2      	uxtb	r2, r2
 8008956:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895c:	1c5a      	adds	r2, r3, #1
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008966:	b29b      	uxth	r3, r3
 8008968:	3b01      	subs	r3, #1
 800896a:	b29a      	uxth	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	685a      	ldr	r2, [r3, #4]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800897e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2220      	movs	r2, #32
 8008984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800898e:	b2db      	uxtb	r3, r3
 8008990:	2b40      	cmp	r3, #64	; 0x40
 8008992:	d10b      	bne.n	80089ac <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MemRxCpltCallback(hi2c);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	4798      	blx	r3
}
 80089aa:	e01e      	b.n	80089ea <I2C_MasterReceive_BTF+0x1d0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2212      	movs	r2, #18
 80089b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	4798      	blx	r3
}
 80089c2:	e012      	b.n	80089ea <I2C_MasterReceive_BTF+0x1d0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	691a      	ldr	r2, [r3, #16]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	b2d2      	uxtb	r2, r2
 80089d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d6:	1c5a      	adds	r2, r3, #1
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	3b01      	subs	r3, #1
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80089ea:	bf00      	nop
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b083      	sub	sp, #12
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b40      	cmp	r3, #64	; 0x40
 8008a04:	d117      	bne.n	8008a36 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d109      	bne.n	8008a22 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	461a      	mov	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008a1e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008a20:	e067      	b.n	8008af2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	f043 0301 	orr.w	r3, r3, #1
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	611a      	str	r2, [r3, #16]
}
 8008a34:	e05d      	b.n	8008af2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a3e:	d133      	bne.n	8008aa8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b21      	cmp	r3, #33	; 0x21
 8008a4a:	d109      	bne.n	8008a60 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	461a      	mov	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008a5c:	611a      	str	r2, [r3, #16]
 8008a5e:	e008      	b.n	8008a72 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	f043 0301 	orr.w	r3, r3, #1
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d004      	beq.n	8008a84 <I2C_Master_SB+0x92>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d108      	bne.n	8008a96 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d032      	beq.n	8008af2 <I2C_Master_SB+0x100>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d02d      	beq.n	8008af2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008aa4:	605a      	str	r2, [r3, #4]
}
 8008aa6:	e024      	b.n	8008af2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10e      	bne.n	8008ace <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	11db      	asrs	r3, r3, #7
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	f003 0306 	and.w	r3, r3, #6
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	f063 030f 	orn	r3, r3, #15
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	611a      	str	r2, [r3, #16]
}
 8008acc:	e011      	b.n	8008af2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d10d      	bne.n	8008af2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	11db      	asrs	r3, r3, #7
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	f003 0306 	and.w	r3, r3, #6
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	f063 030e 	orn	r3, r3, #14
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	611a      	str	r2, [r3, #16]
}
 8008af2:	bf00      	nop
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b083      	sub	sp, #12
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b0a:	b2da      	uxtb	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d004      	beq.n	8008b24 <I2C_Master_ADD10+0x26>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d108      	bne.n	8008b36 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00c      	beq.n	8008b46 <I2C_Master_ADD10+0x48>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d007      	beq.n	8008b46 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	685a      	ldr	r2, [r3, #4]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b44:	605a      	str	r2, [r3, #4]
  }
}
 8008b46:	bf00      	nop
 8008b48:	370c      	adds	r7, #12
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr

08008b52 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b091      	sub	sp, #68	; 0x44
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b68:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	2b22      	cmp	r3, #34	; 0x22
 8008b7a:	f040 8169 	bne.w	8008e50 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10f      	bne.n	8008ba6 <I2C_Master_ADDR+0x54>
 8008b86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b8a:	2b40      	cmp	r3, #64	; 0x40
 8008b8c:	d10b      	bne.n	8008ba6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b8e:	2300      	movs	r3, #0
 8008b90:	633b      	str	r3, [r7, #48]	; 0x30
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	695b      	ldr	r3, [r3, #20]
 8008b98:	633b      	str	r3, [r7, #48]	; 0x30
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8008ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba4:	e160      	b.n	8008e68 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d11d      	bne.n	8008bea <I2C_Master_ADDR+0x98>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008bb6:	d118      	bne.n	8008bea <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bb8:	2300      	movs	r3, #0
 8008bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bdc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008be2:	1c5a      	adds	r2, r3, #1
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	651a      	str	r2, [r3, #80]	; 0x50
 8008be8:	e13e      	b.n	8008e68 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d113      	bne.n	8008c1c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	695b      	ldr	r3, [r3, #20]
 8008bfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c08:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c18:	601a      	str	r2, [r3, #0]
 8008c1a:	e115      	b.n	8008e48 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	f040 808a 	bne.w	8008d3c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008c2e:	d137      	bne.n	8008ca0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c3e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c4e:	d113      	bne.n	8008c78 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c5e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c60:	2300      	movs	r3, #0
 8008c62:	627b      	str	r3, [r7, #36]	; 0x24
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	695b      	ldr	r3, [r3, #20]
 8008c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	627b      	str	r3, [r7, #36]	; 0x24
 8008c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c76:	e0e7      	b.n	8008e48 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c78:	2300      	movs	r3, #0
 8008c7a:	623b      	str	r3, [r7, #32]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	623b      	str	r3, [r7, #32]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	623b      	str	r3, [r7, #32]
 8008c8c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	e0d3      	b.n	8008e48 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca2:	2b08      	cmp	r3, #8
 8008ca4:	d02e      	beq.n	8008d04 <I2C_Master_ADDR+0x1b2>
 8008ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca8:	2b20      	cmp	r3, #32
 8008caa:	d02b      	beq.n	8008d04 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cae:	2b12      	cmp	r3, #18
 8008cb0:	d102      	bne.n	8008cb8 <I2C_Master_ADDR+0x166>
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d125      	bne.n	8008d04 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cba:	2b04      	cmp	r3, #4
 8008cbc:	d00e      	beq.n	8008cdc <I2C_Master_ADDR+0x18a>
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d00b      	beq.n	8008cdc <I2C_Master_ADDR+0x18a>
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc6:	2b10      	cmp	r3, #16
 8008cc8:	d008      	beq.n	8008cdc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cd8:	601a      	str	r2, [r3, #0]
 8008cda:	e007      	b.n	8008cec <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008cea:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cec:	2300      	movs	r3, #0
 8008cee:	61fb      	str	r3, [r7, #28]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	61fb      	str	r3, [r7, #28]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	61fb      	str	r3, [r7, #28]
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	e0a1      	b.n	8008e48 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d12:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d14:	2300      	movs	r3, #0
 8008d16:	61bb      	str	r3, [r7, #24]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	695b      	ldr	r3, [r3, #20]
 8008d1e:	61bb      	str	r3, [r7, #24]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	61bb      	str	r3, [r7, #24]
 8008d28:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d38:	601a      	str	r2, [r3, #0]
 8008d3a:	e085      	b.n	8008e48 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d14d      	bne.n	8008de2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d48:	2b04      	cmp	r3, #4
 8008d4a:	d016      	beq.n	8008d7a <I2C_Master_ADDR+0x228>
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d013      	beq.n	8008d7a <I2C_Master_ADDR+0x228>
 8008d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d54:	2b10      	cmp	r3, #16
 8008d56:	d010      	beq.n	8008d7a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d66:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d76:	601a      	str	r2, [r3, #0]
 8008d78:	e007      	b.n	8008d8a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d88:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d98:	d117      	bne.n	8008dca <I2C_Master_ADDR+0x278>
 8008d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008da0:	d00b      	beq.n	8008dba <I2C_Master_ADDR+0x268>
 8008da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d008      	beq.n	8008dba <I2C_Master_ADDR+0x268>
 8008da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008daa:	2b08      	cmp	r3, #8
 8008dac:	d005      	beq.n	8008dba <I2C_Master_ADDR+0x268>
 8008dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db0:	2b10      	cmp	r3, #16
 8008db2:	d002      	beq.n	8008dba <I2C_Master_ADDR+0x268>
 8008db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db6:	2b20      	cmp	r3, #32
 8008db8:	d107      	bne.n	8008dca <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008dc8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dca:	2300      	movs	r3, #0
 8008dcc:	617b      	str	r3, [r7, #20]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	695b      	ldr	r3, [r3, #20]
 8008dd4:	617b      	str	r3, [r7, #20]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	617b      	str	r3, [r7, #20]
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	e032      	b.n	8008e48 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008df0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e00:	d117      	bne.n	8008e32 <I2C_Master_ADDR+0x2e0>
 8008e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e08:	d00b      	beq.n	8008e22 <I2C_Master_ADDR+0x2d0>
 8008e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d008      	beq.n	8008e22 <I2C_Master_ADDR+0x2d0>
 8008e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e12:	2b08      	cmp	r3, #8
 8008e14:	d005      	beq.n	8008e22 <I2C_Master_ADDR+0x2d0>
 8008e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e18:	2b10      	cmp	r3, #16
 8008e1a:	d002      	beq.n	8008e22 <I2C_Master_ADDR+0x2d0>
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1e:	2b20      	cmp	r3, #32
 8008e20:	d107      	bne.n	8008e32 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	685a      	ldr	r2, [r3, #4]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e30:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e32:	2300      	movs	r3, #0
 8008e34:	613b      	str	r3, [r7, #16]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	695b      	ldr	r3, [r3, #20]
 8008e3c:	613b      	str	r3, [r7, #16]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	613b      	str	r3, [r7, #16]
 8008e46:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008e4e:	e00b      	b.n	8008e68 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e50:	2300      	movs	r3, #0
 8008e52:	60fb      	str	r3, [r7, #12]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	60fb      	str	r3, [r7, #12]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	699b      	ldr	r3, [r3, #24]
 8008e62:	60fb      	str	r3, [r7, #12]
 8008e64:	68fb      	ldr	r3, [r7, #12]
}
 8008e66:	e7ff      	b.n	8008e68 <I2C_Master_ADDR+0x316>
 8008e68:	bf00      	nop
 8008e6a:	3744      	adds	r7, #68	; 0x44
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e82:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d02c      	beq.n	8008ee8 <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e92:	781a      	ldrb	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9e:	1c5a      	adds	r2, r3, #1
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d115      	bne.n	8008ee8 <I2C_SlaveTransmit_TXE+0x74>
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
 8008ebe:	2b29      	cmp	r3, #41	; 0x29
 8008ec0:	d112      	bne.n	8008ee8 <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ed0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2221      	movs	r2, #33	; 0x21
 8008ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2228      	movs	r2, #40	; 0x28
 8008edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008ee8:	bf00      	nop
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d011      	beq.n	8008f26 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f06:	781a      	ldrb	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008f26:	bf00      	nop
 8008f28:	370c      	adds	r7, #12
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b084      	sub	sp, #16
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f40:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d02d      	beq.n	8008fa8 <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	691a      	ldr	r2, [r3, #16]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f56:	b2d2      	uxtb	r2, r2
 8008f58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5e:	1c5a      	adds	r2, r3, #1
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d115      	bne.n	8008fa8 <I2C_SlaveReceive_RXNE+0x76>
 8008f7c:	7bfb      	ldrb	r3, [r7, #15]
 8008f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f80:	d112      	bne.n	8008fa8 <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f90:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2222      	movs	r2, #34	; 0x22
 8008f96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2228      	movs	r2, #40	; 0x28
 8008f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008fa8:	bf00      	nop
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d012      	beq.n	8008fe8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	691a      	ldr	r2, [r3, #16]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fcc:	b2d2      	uxtb	r2, r2
 8008fce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd4:	1c5a      	adds	r2, r3, #1
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008ffe:	2300      	movs	r3, #0
 8009000:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009008:	b2db      	uxtb	r3, r3
 800900a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800900e:	2b28      	cmp	r3, #40	; 0x28
 8009010:	d127      	bne.n	8009062 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	685a      	ldr	r2, [r3, #4]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009020:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	089b      	lsrs	r3, r3, #2
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b00      	cmp	r3, #0
 800902c:	d101      	bne.n	8009032 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800902e:	2301      	movs	r3, #1
 8009030:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	09db      	lsrs	r3, r3, #7
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b00      	cmp	r3, #0
 800903c:	d103      	bne.n	8009046 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	81bb      	strh	r3, [r7, #12]
 8009044:	e002      	b.n	800904c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009058:	89ba      	ldrh	r2, [r7, #12]
 800905a:	7bf9      	ldrb	r1, [r7, #15]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009060:	e00e      	b.n	8009080 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009062:	2300      	movs	r3, #0
 8009064:	60bb      	str	r3, [r7, #8]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	695b      	ldr	r3, [r3, #20]
 800906c:	60bb      	str	r3, [r7, #8]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	60bb      	str	r3, [r7, #8]
 8009076:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009080:	bf00      	nop
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009096:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80090a6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80090a8:	2300      	movs	r3, #0
 80090aa:	60bb      	str	r3, [r7, #8]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	60bb      	str	r3, [r7, #8]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f042 0201 	orr.w	r2, r2, #1
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090d4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090e4:	d172      	bne.n	80091cc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80090e6:	7bfb      	ldrb	r3, [r7, #15]
 80090e8:	2b22      	cmp	r3, #34	; 0x22
 80090ea:	d002      	beq.n	80090f2 <I2C_Slave_STOPF+0x6a>
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
 80090ee:	2b2a      	cmp	r3, #42	; 0x2a
 80090f0:	d135      	bne.n	800915e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009104:	b29b      	uxth	r3, r3
 8009106:	2b00      	cmp	r3, #0
 8009108:	d005      	beq.n	8009116 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910e:	f043 0204 	orr.w	r2, r3, #4
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009124:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912a:	4618      	mov	r0, r3
 800912c:	f7fd fef0 	bl	8006f10 <HAL_DMA_GetState>
 8009130:	4603      	mov	r3, r0
 8009132:	2b01      	cmp	r3, #1
 8009134:	d049      	beq.n	80091ca <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913a:	4a6b      	ldr	r2, [pc, #428]	; (80092e8 <I2C_Slave_STOPF+0x260>)
 800913c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009142:	4618      	mov	r0, r3
 8009144:	f7fd fd38 	bl	8006bb8 <HAL_DMA_Abort_IT>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d03d      	beq.n	80091ca <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009158:	4610      	mov	r0, r2
 800915a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800915c:	e035      	b.n	80091ca <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	b29a      	uxth	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009170:	b29b      	uxth	r3, r3
 8009172:	2b00      	cmp	r3, #0
 8009174:	d005      	beq.n	8009182 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917a:	f043 0204 	orr.w	r2, r3, #4
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009190:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009196:	4618      	mov	r0, r3
 8009198:	f7fd feba 	bl	8006f10 <HAL_DMA_GetState>
 800919c:	4603      	mov	r3, r0
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d014      	beq.n	80091cc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a6:	4a50      	ldr	r2, [pc, #320]	; (80092e8 <I2C_Slave_STOPF+0x260>)
 80091a8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7fd fd02 	bl	8006bb8 <HAL_DMA_Abort_IT>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d008      	beq.n	80091cc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80091c4:	4610      	mov	r0, r2
 80091c6:	4798      	blx	r3
 80091c8:	e000      	b.n	80091cc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80091ca:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d03e      	beq.n	8009254 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	695b      	ldr	r3, [r3, #20]
 80091dc:	f003 0304 	and.w	r3, r3, #4
 80091e0:	2b04      	cmp	r3, #4
 80091e2:	d112      	bne.n	800920a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	691a      	ldr	r2, [r3, #16]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ee:	b2d2      	uxtb	r2, r2
 80091f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f6:	1c5a      	adds	r2, r3, #1
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009200:	b29b      	uxth	r3, r3
 8009202:	3b01      	subs	r3, #1
 8009204:	b29a      	uxth	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009214:	2b40      	cmp	r3, #64	; 0x40
 8009216:	d112      	bne.n	800923e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	691a      	ldr	r2, [r3, #16]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009222:	b2d2      	uxtb	r2, r2
 8009224:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922a:	1c5a      	adds	r2, r3, #1
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009234:	b29b      	uxth	r3, r3
 8009236:	3b01      	subs	r3, #1
 8009238:	b29a      	uxth	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009242:	b29b      	uxth	r3, r3
 8009244:	2b00      	cmp	r3, #0
 8009246:	d005      	beq.n	8009254 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924c:	f043 0204 	orr.w	r2, r3, #4
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009258:	2b00      	cmp	r3, #0
 800925a:	d003      	beq.n	8009264 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f8b9 	bl	80093d4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8009262:	e03c      	b.n	80092de <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009264:	7bfb      	ldrb	r3, [r7, #15]
 8009266:	2b2a      	cmp	r3, #42	; 0x2a
 8009268:	d10a      	bne.n	8009280 <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2228      	movs	r2, #40	; 0x28
 8009274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b28      	cmp	r3, #40	; 0x28
 800928a:	d112      	bne.n	80092b2 <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a17      	ldr	r2, [pc, #92]	; (80092ec <I2C_Slave_STOPF+0x264>)
 8009290:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2220      	movs	r2, #32
 800929c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ListenCpltCallback(hi2c);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	4798      	blx	r3
}
 80092b0:	e015      	b.n	80092de <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b6:	2b22      	cmp	r3, #34	; 0x22
 80092b8:	d002      	beq.n	80092c0 <I2C_Slave_STOPF+0x238>
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
 80092bc:	2b22      	cmp	r3, #34	; 0x22
 80092be:	d10e      	bne.n	80092de <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2220      	movs	r2, #32
 80092ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	4798      	blx	r3
}
 80092de:	bf00      	nop
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	08009641 	.word	0x08009641
 80092ec:	ffff0000 	.word	0xffff0000

080092f0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092fe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009304:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2b08      	cmp	r3, #8
 800930a:	d002      	beq.n	8009312 <I2C_Slave_AF+0x22>
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	2b20      	cmp	r3, #32
 8009310:	d12a      	bne.n	8009368 <I2C_Slave_AF+0x78>
 8009312:	7bfb      	ldrb	r3, [r7, #15]
 8009314:	2b28      	cmp	r3, #40	; 0x28
 8009316:	d127      	bne.n	8009368 <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a2d      	ldr	r2, [pc, #180]	; (80093d0 <I2C_Slave_AF+0xe0>)
 800931c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	685a      	ldr	r2, [r3, #4]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800932c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009336:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009346:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2220      	movs	r2, #32
 8009352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009366:	e02f      	b.n	80093c8 <I2C_Slave_AF+0xd8>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009368:	7bfb      	ldrb	r3, [r7, #15]
 800936a:	2b21      	cmp	r3, #33	; 0x21
 800936c:	d127      	bne.n	80093be <I2C_Slave_AF+0xce>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a17      	ldr	r2, [pc, #92]	; (80093d0 <I2C_Slave_AF+0xe0>)
 8009372:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2221      	movs	r2, #33	; 0x21
 8009378:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2220      	movs	r2, #32
 800937e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009398:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80093a2:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093b2:	601a      	str	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	4798      	blx	r3
}
 80093bc:	e004      	b.n	80093c8 <I2C_Slave_AF+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80093c6:	615a      	str	r2, [r3, #20]
}
 80093c8:	bf00      	nop
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	ffff0000 	.word	0xffff0000

080093d4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80093ec:	7bbb      	ldrb	r3, [r7, #14]
 80093ee:	2b10      	cmp	r3, #16
 80093f0:	d002      	beq.n	80093f8 <I2C_ITError+0x24>
 80093f2:	7bbb      	ldrb	r3, [r7, #14]
 80093f4:	2b40      	cmp	r3, #64	; 0x40
 80093f6:	d10a      	bne.n	800940e <I2C_ITError+0x3a>
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
 80093fa:	2b22      	cmp	r3, #34	; 0x22
 80093fc:	d107      	bne.n	800940e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800940c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800940e:	7bfb      	ldrb	r3, [r7, #15]
 8009410:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009414:	2b28      	cmp	r3, #40	; 0x28
 8009416:	d107      	bne.n	8009428 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2228      	movs	r2, #40	; 0x28
 8009422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009426:	e015      	b.n	8009454 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009436:	d00a      	beq.n	800944e <I2C_ITError+0x7a>
 8009438:	7bfb      	ldrb	r3, [r7, #15]
 800943a:	2b60      	cmp	r3, #96	; 0x60
 800943c:	d007      	beq.n	800944e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2220      	movs	r2, #32
 8009442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800945e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009462:	d162      	bne.n	800952a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	685a      	ldr	r2, [r3, #4]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009472:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800947c:	b2db      	uxtb	r3, r3
 800947e:	2b01      	cmp	r3, #1
 8009480:	d020      	beq.n	80094c4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009486:	4a6c      	ldr	r2, [pc, #432]	; (8009638 <I2C_ITError+0x264>)
 8009488:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800948e:	4618      	mov	r0, r3
 8009490:	f7fd fb92 	bl	8006bb8 <HAL_DMA_Abort_IT>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	f000 808b 	beq.w	80095b2 <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f022 0201 	bic.w	r2, r2, #1
 80094aa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2220      	movs	r2, #32
 80094b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80094be:	4610      	mov	r0, r2
 80094c0:	4798      	blx	r3
 80094c2:	e076      	b.n	80095b2 <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c8:	4a5b      	ldr	r2, [pc, #364]	; (8009638 <I2C_ITError+0x264>)
 80094ca:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7fd fb71 	bl	8006bb8 <HAL_DMA_Abort_IT>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d06a      	beq.n	80095b2 <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	695b      	ldr	r3, [r3, #20]
 80094e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e6:	2b40      	cmp	r3, #64	; 0x40
 80094e8:	d10b      	bne.n	8009502 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	691a      	ldr	r2, [r3, #16]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f4:	b2d2      	uxtb	r2, r2
 80094f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fc:	1c5a      	adds	r2, r3, #1
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f022 0201 	bic.w	r2, r2, #1
 8009510:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2220      	movs	r2, #32
 8009516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009524:	4610      	mov	r0, r2
 8009526:	4798      	blx	r3
 8009528:	e043      	b.n	80095b2 <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009530:	b2db      	uxtb	r3, r3
 8009532:	2b60      	cmp	r3, #96	; 0x60
 8009534:	d126      	bne.n	8009584 <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2220      	movs	r2, #32
 800953a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800954e:	2b40      	cmp	r3, #64	; 0x40
 8009550:	d10b      	bne.n	800956a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	691a      	ldr	r2, [r3, #16]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955c:	b2d2      	uxtb	r2, r2
 800955e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009564:	1c5a      	adds	r2, r3, #1
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f022 0201 	bic.w	r2, r2, #1
 8009578:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	4798      	blx	r3
 8009582:	e016      	b.n	80095b2 <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800958e:	2b40      	cmp	r3, #64	; 0x40
 8009590:	d10b      	bne.n	80095aa <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	691a      	ldr	r2, [r3, #16]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959c:	b2d2      	uxtb	r2, r2
 800959e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a4:	1c5a      	adds	r2, r3, #1
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	f003 0301 	and.w	r3, r3, #1
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10e      	bne.n	80095e0 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d109      	bne.n	80095e0 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d104      	bne.n	80095e0 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d007      	beq.n	80095f0 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80095ee:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095f6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fc:	f003 0304 	and.w	r3, r3, #4
 8009600:	2b04      	cmp	r3, #4
 8009602:	d114      	bne.n	800962e <I2C_ITError+0x25a>
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	2b28      	cmp	r3, #40	; 0x28
 8009608:	d111      	bne.n	800962e <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a0b      	ldr	r2, [pc, #44]	; (800963c <I2C_ITError+0x268>)
 800960e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2220      	movs	r2, #32
 800961a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800962e:	bf00      	nop
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	08009641 	.word	0x08009641
 800963c:	ffff0000 	.word	0xffff0000

08009640 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009648:	2300      	movs	r3, #0
 800964a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009650:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009658:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800965a:	4b4c      	ldr	r3, [pc, #304]	; (800978c <I2C_DMAAbort+0x14c>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	08db      	lsrs	r3, r3, #3
 8009660:	4a4b      	ldr	r2, [pc, #300]	; (8009790 <I2C_DMAAbort+0x150>)
 8009662:	fba2 2303 	umull	r2, r3, r2, r3
 8009666:	0a1a      	lsrs	r2, r3, #8
 8009668:	4613      	mov	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4413      	add	r3, r2
 800966e:	00da      	lsls	r2, r3, #3
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d106      	bne.n	8009688 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967e:	f043 0220 	orr.w	r2, r3, #32
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009686:	e00a      	b.n	800969e <I2C_DMAAbort+0x5e>
    }
    count--;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	3b01      	subs	r3, #1
 800968c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800969c:	d0ea      	beq.n	8009674 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d003      	beq.n	80096ae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096aa:	2200      	movs	r2, #0
 80096ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d003      	beq.n	80096be <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ba:	2200      	movs	r2, #0
 80096bc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096cc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2200      	movs	r2, #0
 80096d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d003      	beq.n	80096e4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e0:	2200      	movs	r2, #0
 80096e2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d003      	beq.n	80096f4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f0:	2200      	movs	r2, #0
 80096f2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f022 0201 	bic.w	r2, r2, #1
 8009702:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800970a:	b2db      	uxtb	r3, r3
 800970c:	2b60      	cmp	r3, #96	; 0x60
 800970e:	d10f      	bne.n	8009730 <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	2220      	movs	r2, #32
 8009714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	2200      	movs	r2, #0
 800971c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	2200      	movs	r2, #0
 8009724:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800972a:	6978      	ldr	r0, [r7, #20]
 800972c:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800972e:	e028      	b.n	8009782 <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009730:	7cfb      	ldrb	r3, [r7, #19]
 8009732:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009736:	2b28      	cmp	r3, #40	; 0x28
 8009738:	d117      	bne.n	800976a <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f042 0201 	orr.w	r2, r2, #1
 8009748:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009758:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2200      	movs	r2, #0
 800975e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	2228      	movs	r2, #40	; 0x28
 8009764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009768:	e007      	b.n	800977a <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	2220      	movs	r2, #32
 800976e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCallback(hi2c);
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800977e:	6978      	ldr	r0, [r7, #20]
 8009780:	4798      	blx	r3
}
 8009782:	bf00      	nop
 8009784:	3718      	adds	r7, #24
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	20000000 	.word	0x20000000
 8009790:	14f8b589 	.word	0x14f8b589

08009794 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800979c:	2300      	movs	r3, #0
 800979e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80097a0:	4b13      	ldr	r3, [pc, #76]	; (80097f0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	08db      	lsrs	r3, r3, #3
 80097a6:	4a13      	ldr	r2, [pc, #76]	; (80097f4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80097a8:	fba2 2303 	umull	r2, r3, r2, r3
 80097ac:	0a1a      	lsrs	r2, r3, #8
 80097ae:	4613      	mov	r3, r2
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3b01      	subs	r3, #1
 80097ba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d107      	bne.n	80097d2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c6:	f043 0220 	orr.w	r2, r3, #32
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e008      	b.n	80097e4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097e0:	d0e9      	beq.n	80097b6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3714      	adds	r7, #20
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	20000000 	.word	0x20000000
 80097f4:	14f8b589 	.word	0x14f8b589

080097f8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009804:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009808:	d103      	bne.n	8009812 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2201      	movs	r2, #1
 800980e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009810:	e007      	b.n	8009822 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009816:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800981a:	d102      	bne.n	8009822 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2208      	movs	r2, #8
 8009820:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009822:	bf00      	nop
 8009824:	370c      	adds	r7, #12
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr

0800982e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b084      	sub	sp, #16
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d101      	bne.n	8009840 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	e034      	b.n	80098aa <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009848:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f245 5255 	movw	r2, #21845	; 0x5555
 8009852:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	6852      	ldr	r2, [r2, #4]
 800985c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	6892      	ldr	r2, [r2, #8]
 8009866:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009868:	f7fb ffda 	bl	8005820 <HAL_GetTick>
 800986c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800986e:	e00f      	b.n	8009890 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009870:	f7fb ffd6 	bl	8005820 <HAL_GetTick>
 8009874:	4602      	mov	r2, r0
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	2b31      	cmp	r3, #49	; 0x31
 800987c:	d908      	bls.n	8009890 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	f003 0303 	and.w	r3, r3, #3
 8009888:	2b00      	cmp	r3, #0
 800988a:	d001      	beq.n	8009890 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800988c:	2303      	movs	r3, #3
 800988e:	e00c      	b.n	80098aa <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	f003 0303 	and.w	r3, r3, #3
 800989a:	2b00      	cmp	r3, #0
 800989c:	d1e8      	bne.n	8009870 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80098a6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b083      	sub	sp, #12
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80098c2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
	...

080098d4 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80098d8:	4b06      	ldr	r3, [pc, #24]	; (80098f4 <HAL_PWR_PVD_IRQHandler+0x20>)
 80098da:	695b      	ldr	r3, [r3, #20]
 80098dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d005      	beq.n	80098f0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80098e4:	f000 f808 	bl	80098f8 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80098e8:	4b02      	ldr	r3, [pc, #8]	; (80098f4 <HAL_PWR_PVD_IRQHandler+0x20>)
 80098ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80098ee:	615a      	str	r2, [r3, #20]
  }
}
 80098f0:	bf00      	nop
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	40013c00 	.word	0x40013c00

080098f8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80098f8:	b480      	push	{r7}
 80098fa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80098fc:	bf00      	nop
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
	...

08009908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d101      	bne.n	800991a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	e267      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f003 0301 	and.w	r3, r3, #1
 8009922:	2b00      	cmp	r3, #0
 8009924:	d075      	beq.n	8009a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009926:	4b88      	ldr	r3, [pc, #544]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f003 030c 	and.w	r3, r3, #12
 800992e:	2b04      	cmp	r3, #4
 8009930:	d00c      	beq.n	800994c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009932:	4b85      	ldr	r3, [pc, #532]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800993a:	2b08      	cmp	r3, #8
 800993c:	d112      	bne.n	8009964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800993e:	4b82      	ldr	r3, [pc, #520]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800994a:	d10b      	bne.n	8009964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800994c:	4b7e      	ldr	r3, [pc, #504]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009954:	2b00      	cmp	r3, #0
 8009956:	d05b      	beq.n	8009a10 <HAL_RCC_OscConfig+0x108>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d157      	bne.n	8009a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	e242      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800996c:	d106      	bne.n	800997c <HAL_RCC_OscConfig+0x74>
 800996e:	4b76      	ldr	r3, [pc, #472]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a75      	ldr	r2, [pc, #468]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009978:	6013      	str	r3, [r2, #0]
 800997a:	e01d      	b.n	80099b8 <HAL_RCC_OscConfig+0xb0>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009984:	d10c      	bne.n	80099a0 <HAL_RCC_OscConfig+0x98>
 8009986:	4b70      	ldr	r3, [pc, #448]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a6f      	ldr	r2, [pc, #444]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 800998c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009990:	6013      	str	r3, [r2, #0]
 8009992:	4b6d      	ldr	r3, [pc, #436]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a6c      	ldr	r2, [pc, #432]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800999c:	6013      	str	r3, [r2, #0]
 800999e:	e00b      	b.n	80099b8 <HAL_RCC_OscConfig+0xb0>
 80099a0:	4b69      	ldr	r3, [pc, #420]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a68      	ldr	r2, [pc, #416]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 80099a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099aa:	6013      	str	r3, [r2, #0]
 80099ac:	4b66      	ldr	r3, [pc, #408]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a65      	ldr	r2, [pc, #404]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 80099b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d013      	beq.n	80099e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099c0:	f7fb ff2e 	bl	8005820 <HAL_GetTick>
 80099c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099c6:	e008      	b.n	80099da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80099c8:	f7fb ff2a 	bl	8005820 <HAL_GetTick>
 80099cc:	4602      	mov	r2, r0
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	2b64      	cmp	r3, #100	; 0x64
 80099d4:	d901      	bls.n	80099da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80099d6:	2303      	movs	r3, #3
 80099d8:	e207      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099da:	4b5b      	ldr	r3, [pc, #364]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0f0      	beq.n	80099c8 <HAL_RCC_OscConfig+0xc0>
 80099e6:	e014      	b.n	8009a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099e8:	f7fb ff1a 	bl	8005820 <HAL_GetTick>
 80099ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80099ee:	e008      	b.n	8009a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80099f0:	f7fb ff16 	bl	8005820 <HAL_GetTick>
 80099f4:	4602      	mov	r2, r0
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	2b64      	cmp	r3, #100	; 0x64
 80099fc:	d901      	bls.n	8009a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	e1f3      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a02:	4b51      	ldr	r3, [pc, #324]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1f0      	bne.n	80099f0 <HAL_RCC_OscConfig+0xe8>
 8009a0e:	e000      	b.n	8009a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 0302 	and.w	r3, r3, #2
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d063      	beq.n	8009ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009a1e:	4b4a      	ldr	r3, [pc, #296]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	f003 030c 	and.w	r3, r3, #12
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00b      	beq.n	8009a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a2a:	4b47      	ldr	r3, [pc, #284]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009a32:	2b08      	cmp	r3, #8
 8009a34:	d11c      	bne.n	8009a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a36:	4b44      	ldr	r3, [pc, #272]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d116      	bne.n	8009a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a42:	4b41      	ldr	r3, [pc, #260]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 0302 	and.w	r3, r3, #2
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d005      	beq.n	8009a5a <HAL_RCC_OscConfig+0x152>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d001      	beq.n	8009a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e1c7      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a5a:	4b3b      	ldr	r3, [pc, #236]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	00db      	lsls	r3, r3, #3
 8009a68:	4937      	ldr	r1, [pc, #220]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a6e:	e03a      	b.n	8009ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d020      	beq.n	8009aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009a78:	4b34      	ldr	r3, [pc, #208]	; (8009b4c <HAL_RCC_OscConfig+0x244>)
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a7e:	f7fb fecf 	bl	8005820 <HAL_GetTick>
 8009a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a84:	e008      	b.n	8009a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a86:	f7fb fecb 	bl	8005820 <HAL_GetTick>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d901      	bls.n	8009a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009a94:	2303      	movs	r3, #3
 8009a96:	e1a8      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a98:	4b2b      	ldr	r3, [pc, #172]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 0302 	and.w	r3, r3, #2
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d0f0      	beq.n	8009a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009aa4:	4b28      	ldr	r3, [pc, #160]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	00db      	lsls	r3, r3, #3
 8009ab2:	4925      	ldr	r1, [pc, #148]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	600b      	str	r3, [r1, #0]
 8009ab8:	e015      	b.n	8009ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009aba:	4b24      	ldr	r3, [pc, #144]	; (8009b4c <HAL_RCC_OscConfig+0x244>)
 8009abc:	2200      	movs	r2, #0
 8009abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ac0:	f7fb feae 	bl	8005820 <HAL_GetTick>
 8009ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ac6:	e008      	b.n	8009ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ac8:	f7fb feaa 	bl	8005820 <HAL_GetTick>
 8009acc:	4602      	mov	r2, r0
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d901      	bls.n	8009ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	e187      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ada:	4b1b      	ldr	r3, [pc, #108]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 0302 	and.w	r3, r3, #2
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1f0      	bne.n	8009ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 0308 	and.w	r3, r3, #8
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d036      	beq.n	8009b60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	695b      	ldr	r3, [r3, #20]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d016      	beq.n	8009b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009afa:	4b15      	ldr	r3, [pc, #84]	; (8009b50 <HAL_RCC_OscConfig+0x248>)
 8009afc:	2201      	movs	r2, #1
 8009afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b00:	f7fb fe8e 	bl	8005820 <HAL_GetTick>
 8009b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b06:	e008      	b.n	8009b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b08:	f7fb fe8a 	bl	8005820 <HAL_GetTick>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	1ad3      	subs	r3, r2, r3
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d901      	bls.n	8009b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009b16:	2303      	movs	r3, #3
 8009b18:	e167      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b1a:	4b0b      	ldr	r3, [pc, #44]	; (8009b48 <HAL_RCC_OscConfig+0x240>)
 8009b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b1e:	f003 0302 	and.w	r3, r3, #2
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d0f0      	beq.n	8009b08 <HAL_RCC_OscConfig+0x200>
 8009b26:	e01b      	b.n	8009b60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b28:	4b09      	ldr	r3, [pc, #36]	; (8009b50 <HAL_RCC_OscConfig+0x248>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b2e:	f7fb fe77 	bl	8005820 <HAL_GetTick>
 8009b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b34:	e00e      	b.n	8009b54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b36:	f7fb fe73 	bl	8005820 <HAL_GetTick>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d907      	bls.n	8009b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	e150      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
 8009b48:	40023800 	.word	0x40023800
 8009b4c:	42470000 	.word	0x42470000
 8009b50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b54:	4b88      	ldr	r3, [pc, #544]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b58:	f003 0302 	and.w	r3, r3, #2
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1ea      	bne.n	8009b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 0304 	and.w	r3, r3, #4
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f000 8097 	beq.w	8009c9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b72:	4b81      	ldr	r3, [pc, #516]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10f      	bne.n	8009b9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b7e:	2300      	movs	r3, #0
 8009b80:	60bb      	str	r3, [r7, #8]
 8009b82:	4b7d      	ldr	r3, [pc, #500]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b86:	4a7c      	ldr	r2, [pc, #496]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8009b8e:	4b7a      	ldr	r3, [pc, #488]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b96:	60bb      	str	r3, [r7, #8]
 8009b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b9e:	4b77      	ldr	r3, [pc, #476]	; (8009d7c <HAL_RCC_OscConfig+0x474>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d118      	bne.n	8009bdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009baa:	4b74      	ldr	r3, [pc, #464]	; (8009d7c <HAL_RCC_OscConfig+0x474>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a73      	ldr	r2, [pc, #460]	; (8009d7c <HAL_RCC_OscConfig+0x474>)
 8009bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009bb6:	f7fb fe33 	bl	8005820 <HAL_GetTick>
 8009bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bbc:	e008      	b.n	8009bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bbe:	f7fb fe2f 	bl	8005820 <HAL_GetTick>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	1ad3      	subs	r3, r2, r3
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d901      	bls.n	8009bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	e10c      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bd0:	4b6a      	ldr	r3, [pc, #424]	; (8009d7c <HAL_RCC_OscConfig+0x474>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d0f0      	beq.n	8009bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d106      	bne.n	8009bf2 <HAL_RCC_OscConfig+0x2ea>
 8009be4:	4b64      	ldr	r3, [pc, #400]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009be8:	4a63      	ldr	r2, [pc, #396]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009bea:	f043 0301 	orr.w	r3, r3, #1
 8009bee:	6713      	str	r3, [r2, #112]	; 0x70
 8009bf0:	e01c      	b.n	8009c2c <HAL_RCC_OscConfig+0x324>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	2b05      	cmp	r3, #5
 8009bf8:	d10c      	bne.n	8009c14 <HAL_RCC_OscConfig+0x30c>
 8009bfa:	4b5f      	ldr	r3, [pc, #380]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bfe:	4a5e      	ldr	r2, [pc, #376]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c00:	f043 0304 	orr.w	r3, r3, #4
 8009c04:	6713      	str	r3, [r2, #112]	; 0x70
 8009c06:	4b5c      	ldr	r3, [pc, #368]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c0a:	4a5b      	ldr	r2, [pc, #364]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c0c:	f043 0301 	orr.w	r3, r3, #1
 8009c10:	6713      	str	r3, [r2, #112]	; 0x70
 8009c12:	e00b      	b.n	8009c2c <HAL_RCC_OscConfig+0x324>
 8009c14:	4b58      	ldr	r3, [pc, #352]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c18:	4a57      	ldr	r2, [pc, #348]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c1a:	f023 0301 	bic.w	r3, r3, #1
 8009c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c20:	4b55      	ldr	r3, [pc, #340]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c24:	4a54      	ldr	r2, [pc, #336]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c26:	f023 0304 	bic.w	r3, r3, #4
 8009c2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d015      	beq.n	8009c60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c34:	f7fb fdf4 	bl	8005820 <HAL_GetTick>
 8009c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c3a:	e00a      	b.n	8009c52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c3c:	f7fb fdf0 	bl	8005820 <HAL_GetTick>
 8009c40:	4602      	mov	r2, r0
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d901      	bls.n	8009c52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	e0cb      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c52:	4b49      	ldr	r3, [pc, #292]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c56:	f003 0302 	and.w	r3, r3, #2
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d0ee      	beq.n	8009c3c <HAL_RCC_OscConfig+0x334>
 8009c5e:	e014      	b.n	8009c8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c60:	f7fb fdde 	bl	8005820 <HAL_GetTick>
 8009c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c66:	e00a      	b.n	8009c7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c68:	f7fb fdda 	bl	8005820 <HAL_GetTick>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d901      	bls.n	8009c7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e0b5      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c7e:	4b3e      	ldr	r3, [pc, #248]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c82:	f003 0302 	and.w	r3, r3, #2
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1ee      	bne.n	8009c68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009c8a:	7dfb      	ldrb	r3, [r7, #23]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d105      	bne.n	8009c9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c90:	4b39      	ldr	r3, [pc, #228]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c94:	4a38      	ldr	r2, [pc, #224]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 80a1 	beq.w	8009de8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009ca6:	4b34      	ldr	r3, [pc, #208]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	f003 030c 	and.w	r3, r3, #12
 8009cae:	2b08      	cmp	r3, #8
 8009cb0:	d05c      	beq.n	8009d6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	699b      	ldr	r3, [r3, #24]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d141      	bne.n	8009d3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cba:	4b31      	ldr	r3, [pc, #196]	; (8009d80 <HAL_RCC_OscConfig+0x478>)
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cc0:	f7fb fdae 	bl	8005820 <HAL_GetTick>
 8009cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cc6:	e008      	b.n	8009cda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009cc8:	f7fb fdaa 	bl	8005820 <HAL_GetTick>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d901      	bls.n	8009cda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	e087      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cda:	4b27      	ldr	r3, [pc, #156]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1f0      	bne.n	8009cc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	69da      	ldr	r2, [r3, #28]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a1b      	ldr	r3, [r3, #32]
 8009cee:	431a      	orrs	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf4:	019b      	lsls	r3, r3, #6
 8009cf6:	431a      	orrs	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cfc:	085b      	lsrs	r3, r3, #1
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	041b      	lsls	r3, r3, #16
 8009d02:	431a      	orrs	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d08:	061b      	lsls	r3, r3, #24
 8009d0a:	491b      	ldr	r1, [pc, #108]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d10:	4b1b      	ldr	r3, [pc, #108]	; (8009d80 <HAL_RCC_OscConfig+0x478>)
 8009d12:	2201      	movs	r2, #1
 8009d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d16:	f7fb fd83 	bl	8005820 <HAL_GetTick>
 8009d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d1c:	e008      	b.n	8009d30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d1e:	f7fb fd7f 	bl	8005820 <HAL_GetTick>
 8009d22:	4602      	mov	r2, r0
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d901      	bls.n	8009d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e05c      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d30:	4b11      	ldr	r3, [pc, #68]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d0f0      	beq.n	8009d1e <HAL_RCC_OscConfig+0x416>
 8009d3c:	e054      	b.n	8009de8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d3e:	4b10      	ldr	r3, [pc, #64]	; (8009d80 <HAL_RCC_OscConfig+0x478>)
 8009d40:	2200      	movs	r2, #0
 8009d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d44:	f7fb fd6c 	bl	8005820 <HAL_GetTick>
 8009d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d4a:	e008      	b.n	8009d5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d4c:	f7fb fd68 	bl	8005820 <HAL_GetTick>
 8009d50:	4602      	mov	r2, r0
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	2b02      	cmp	r3, #2
 8009d58:	d901      	bls.n	8009d5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	e045      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d5e:	4b06      	ldr	r3, [pc, #24]	; (8009d78 <HAL_RCC_OscConfig+0x470>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1f0      	bne.n	8009d4c <HAL_RCC_OscConfig+0x444>
 8009d6a:	e03d      	b.n	8009de8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d107      	bne.n	8009d84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	e038      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
 8009d78:	40023800 	.word	0x40023800
 8009d7c:	40007000 	.word	0x40007000
 8009d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009d84:	4b1b      	ldr	r3, [pc, #108]	; (8009df4 <HAL_RCC_OscConfig+0x4ec>)
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	699b      	ldr	r3, [r3, #24]
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d028      	beq.n	8009de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d121      	bne.n	8009de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d11a      	bne.n	8009de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009db4:	4013      	ands	r3, r2
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d111      	bne.n	8009de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dca:	085b      	lsrs	r3, r3, #1
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d107      	bne.n	8009de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d001      	beq.n	8009de8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	e000      	b.n	8009dea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3718      	adds	r7, #24
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	40023800 	.word	0x40023800

08009df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d101      	bne.n	8009e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e0cc      	b.n	8009fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009e0c:	4b68      	ldr	r3, [pc, #416]	; (8009fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 0307 	and.w	r3, r3, #7
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d90c      	bls.n	8009e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e1a:	4b65      	ldr	r3, [pc, #404]	; (8009fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	b2d2      	uxtb	r2, r2
 8009e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e22:	4b63      	ldr	r3, [pc, #396]	; (8009fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f003 0307 	and.w	r3, r3, #7
 8009e2a:	683a      	ldr	r2, [r7, #0]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d001      	beq.n	8009e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e0b8      	b.n	8009fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 0302 	and.w	r3, r3, #2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d020      	beq.n	8009e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 0304 	and.w	r3, r3, #4
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d005      	beq.n	8009e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009e4c:	4b59      	ldr	r3, [pc, #356]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	4a58      	ldr	r2, [pc, #352]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009e56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 0308 	and.w	r3, r3, #8
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d005      	beq.n	8009e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009e64:	4b53      	ldr	r3, [pc, #332]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	4a52      	ldr	r2, [pc, #328]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e70:	4b50      	ldr	r3, [pc, #320]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	494d      	ldr	r1, [pc, #308]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f003 0301 	and.w	r3, r3, #1
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d044      	beq.n	8009f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d107      	bne.n	8009ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e96:	4b47      	ldr	r3, [pc, #284]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d119      	bne.n	8009ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e07f      	b.n	8009fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	d003      	beq.n	8009eb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009eb2:	2b03      	cmp	r3, #3
 8009eb4:	d107      	bne.n	8009ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009eb6:	4b3f      	ldr	r3, [pc, #252]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d109      	bne.n	8009ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e06f      	b.n	8009fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ec6:	4b3b      	ldr	r3, [pc, #236]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f003 0302 	and.w	r3, r3, #2
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d101      	bne.n	8009ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e067      	b.n	8009fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009ed6:	4b37      	ldr	r3, [pc, #220]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	f023 0203 	bic.w	r2, r3, #3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	4934      	ldr	r1, [pc, #208]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009ee8:	f7fb fc9a 	bl	8005820 <HAL_GetTick>
 8009eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009eee:	e00a      	b.n	8009f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ef0:	f7fb fc96 	bl	8005820 <HAL_GetTick>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	1ad3      	subs	r3, r2, r3
 8009efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d901      	bls.n	8009f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009f02:	2303      	movs	r3, #3
 8009f04:	e04f      	b.n	8009fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f06:	4b2b      	ldr	r3, [pc, #172]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	f003 020c 	and.w	r2, r3, #12
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d1eb      	bne.n	8009ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009f18:	4b25      	ldr	r3, [pc, #148]	; (8009fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0307 	and.w	r3, r3, #7
 8009f20:	683a      	ldr	r2, [r7, #0]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d20c      	bcs.n	8009f40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f26:	4b22      	ldr	r3, [pc, #136]	; (8009fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8009f28:	683a      	ldr	r2, [r7, #0]
 8009f2a:	b2d2      	uxtb	r2, r2
 8009f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f2e:	4b20      	ldr	r3, [pc, #128]	; (8009fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f003 0307 	and.w	r3, r3, #7
 8009f36:	683a      	ldr	r2, [r7, #0]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d001      	beq.n	8009f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e032      	b.n	8009fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f003 0304 	and.w	r3, r3, #4
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d008      	beq.n	8009f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009f4c:	4b19      	ldr	r3, [pc, #100]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	4916      	ldr	r1, [pc, #88]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f003 0308 	and.w	r3, r3, #8
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d009      	beq.n	8009f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009f6a:	4b12      	ldr	r3, [pc, #72]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	00db      	lsls	r3, r3, #3
 8009f78:	490e      	ldr	r1, [pc, #56]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009f7e:	f000 f821 	bl	8009fc4 <HAL_RCC_GetSysClockFreq>
 8009f82:	4602      	mov	r2, r0
 8009f84:	4b0b      	ldr	r3, [pc, #44]	; (8009fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	091b      	lsrs	r3, r3, #4
 8009f8a:	f003 030f 	and.w	r3, r3, #15
 8009f8e:	490a      	ldr	r1, [pc, #40]	; (8009fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8009f90:	5ccb      	ldrb	r3, [r1, r3]
 8009f92:	fa22 f303 	lsr.w	r3, r2, r3
 8009f96:	4a09      	ldr	r2, [pc, #36]	; (8009fbc <HAL_RCC_ClockConfig+0x1c4>)
 8009f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009f9a:	4b09      	ldr	r3, [pc, #36]	; (8009fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fa fc6a 	bl	8004878 <HAL_InitTick>

  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	40023c00 	.word	0x40023c00
 8009fb4:	40023800 	.word	0x40023800
 8009fb8:	08013b2c 	.word	0x08013b2c
 8009fbc:	20000000 	.word	0x20000000
 8009fc0:	20000004 	.word	0x20000004

08009fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fc8:	b094      	sub	sp, #80	; 0x50
 8009fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	647b      	str	r3, [r7, #68]	; 0x44
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009fdc:	4b79      	ldr	r3, [pc, #484]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	f003 030c 	and.w	r3, r3, #12
 8009fe4:	2b08      	cmp	r3, #8
 8009fe6:	d00d      	beq.n	800a004 <HAL_RCC_GetSysClockFreq+0x40>
 8009fe8:	2b08      	cmp	r3, #8
 8009fea:	f200 80e1 	bhi.w	800a1b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d002      	beq.n	8009ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8009ff2:	2b04      	cmp	r3, #4
 8009ff4:	d003      	beq.n	8009ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8009ff6:	e0db      	b.n	800a1b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009ff8:	4b73      	ldr	r3, [pc, #460]	; (800a1c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8009ffa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009ffc:	e0db      	b.n	800a1b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009ffe:	4b73      	ldr	r3, [pc, #460]	; (800a1cc <HAL_RCC_GetSysClockFreq+0x208>)
 800a000:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a002:	e0d8      	b.n	800a1b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a004:	4b6f      	ldr	r3, [pc, #444]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a00c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a00e:	4b6d      	ldr	r3, [pc, #436]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a016:	2b00      	cmp	r3, #0
 800a018:	d063      	beq.n	800a0e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a01a:	4b6a      	ldr	r3, [pc, #424]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	099b      	lsrs	r3, r3, #6
 800a020:	2200      	movs	r2, #0
 800a022:	63bb      	str	r3, [r7, #56]	; 0x38
 800a024:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a02c:	633b      	str	r3, [r7, #48]	; 0x30
 800a02e:	2300      	movs	r3, #0
 800a030:	637b      	str	r3, [r7, #52]	; 0x34
 800a032:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a036:	4622      	mov	r2, r4
 800a038:	462b      	mov	r3, r5
 800a03a:	f04f 0000 	mov.w	r0, #0
 800a03e:	f04f 0100 	mov.w	r1, #0
 800a042:	0159      	lsls	r1, r3, #5
 800a044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a048:	0150      	lsls	r0, r2, #5
 800a04a:	4602      	mov	r2, r0
 800a04c:	460b      	mov	r3, r1
 800a04e:	4621      	mov	r1, r4
 800a050:	1a51      	subs	r1, r2, r1
 800a052:	6139      	str	r1, [r7, #16]
 800a054:	4629      	mov	r1, r5
 800a056:	eb63 0301 	sbc.w	r3, r3, r1
 800a05a:	617b      	str	r3, [r7, #20]
 800a05c:	f04f 0200 	mov.w	r2, #0
 800a060:	f04f 0300 	mov.w	r3, #0
 800a064:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a068:	4659      	mov	r1, fp
 800a06a:	018b      	lsls	r3, r1, #6
 800a06c:	4651      	mov	r1, sl
 800a06e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a072:	4651      	mov	r1, sl
 800a074:	018a      	lsls	r2, r1, #6
 800a076:	4651      	mov	r1, sl
 800a078:	ebb2 0801 	subs.w	r8, r2, r1
 800a07c:	4659      	mov	r1, fp
 800a07e:	eb63 0901 	sbc.w	r9, r3, r1
 800a082:	f04f 0200 	mov.w	r2, #0
 800a086:	f04f 0300 	mov.w	r3, #0
 800a08a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a08e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a096:	4690      	mov	r8, r2
 800a098:	4699      	mov	r9, r3
 800a09a:	4623      	mov	r3, r4
 800a09c:	eb18 0303 	adds.w	r3, r8, r3
 800a0a0:	60bb      	str	r3, [r7, #8]
 800a0a2:	462b      	mov	r3, r5
 800a0a4:	eb49 0303 	adc.w	r3, r9, r3
 800a0a8:	60fb      	str	r3, [r7, #12]
 800a0aa:	f04f 0200 	mov.w	r2, #0
 800a0ae:	f04f 0300 	mov.w	r3, #0
 800a0b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a0b6:	4629      	mov	r1, r5
 800a0b8:	024b      	lsls	r3, r1, #9
 800a0ba:	4621      	mov	r1, r4
 800a0bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	024a      	lsls	r2, r1, #9
 800a0c4:	4610      	mov	r0, r2
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a0d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a0d4:	f7f6 fcc2 	bl	8000a5c <__aeabi_uldivmod>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	4613      	mov	r3, r2
 800a0de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0e0:	e058      	b.n	800a194 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0e2:	4b38      	ldr	r3, [pc, #224]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	099b      	lsrs	r3, r3, #6
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	4611      	mov	r1, r2
 800a0ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a0f2:	623b      	str	r3, [r7, #32]
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	627b      	str	r3, [r7, #36]	; 0x24
 800a0f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a0fc:	4642      	mov	r2, r8
 800a0fe:	464b      	mov	r3, r9
 800a100:	f04f 0000 	mov.w	r0, #0
 800a104:	f04f 0100 	mov.w	r1, #0
 800a108:	0159      	lsls	r1, r3, #5
 800a10a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a10e:	0150      	lsls	r0, r2, #5
 800a110:	4602      	mov	r2, r0
 800a112:	460b      	mov	r3, r1
 800a114:	4641      	mov	r1, r8
 800a116:	ebb2 0a01 	subs.w	sl, r2, r1
 800a11a:	4649      	mov	r1, r9
 800a11c:	eb63 0b01 	sbc.w	fp, r3, r1
 800a120:	f04f 0200 	mov.w	r2, #0
 800a124:	f04f 0300 	mov.w	r3, #0
 800a128:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a12c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a130:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a134:	ebb2 040a 	subs.w	r4, r2, sl
 800a138:	eb63 050b 	sbc.w	r5, r3, fp
 800a13c:	f04f 0200 	mov.w	r2, #0
 800a140:	f04f 0300 	mov.w	r3, #0
 800a144:	00eb      	lsls	r3, r5, #3
 800a146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a14a:	00e2      	lsls	r2, r4, #3
 800a14c:	4614      	mov	r4, r2
 800a14e:	461d      	mov	r5, r3
 800a150:	4643      	mov	r3, r8
 800a152:	18e3      	adds	r3, r4, r3
 800a154:	603b      	str	r3, [r7, #0]
 800a156:	464b      	mov	r3, r9
 800a158:	eb45 0303 	adc.w	r3, r5, r3
 800a15c:	607b      	str	r3, [r7, #4]
 800a15e:	f04f 0200 	mov.w	r2, #0
 800a162:	f04f 0300 	mov.w	r3, #0
 800a166:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a16a:	4629      	mov	r1, r5
 800a16c:	028b      	lsls	r3, r1, #10
 800a16e:	4621      	mov	r1, r4
 800a170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a174:	4621      	mov	r1, r4
 800a176:	028a      	lsls	r2, r1, #10
 800a178:	4610      	mov	r0, r2
 800a17a:	4619      	mov	r1, r3
 800a17c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a17e:	2200      	movs	r2, #0
 800a180:	61bb      	str	r3, [r7, #24]
 800a182:	61fa      	str	r2, [r7, #28]
 800a184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a188:	f7f6 fc68 	bl	8000a5c <__aeabi_uldivmod>
 800a18c:	4602      	mov	r2, r0
 800a18e:	460b      	mov	r3, r1
 800a190:	4613      	mov	r3, r2
 800a192:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a194:	4b0b      	ldr	r3, [pc, #44]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	0c1b      	lsrs	r3, r3, #16
 800a19a:	f003 0303 	and.w	r3, r3, #3
 800a19e:	3301      	adds	r3, #1
 800a1a0:	005b      	lsls	r3, r3, #1
 800a1a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a1a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a1a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a1ae:	e002      	b.n	800a1b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a1b0:	4b05      	ldr	r3, [pc, #20]	; (800a1c8 <HAL_RCC_GetSysClockFreq+0x204>)
 800a1b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a1b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a1b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3750      	adds	r7, #80	; 0x50
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1c2:	bf00      	nop
 800a1c4:	40023800 	.word	0x40023800
 800a1c8:	00f42400 	.word	0x00f42400
 800a1cc:	007a1200 	.word	0x007a1200

0800a1d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a1d4:	4b03      	ldr	r3, [pc, #12]	; (800a1e4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	20000000 	.word	0x20000000

0800a1e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a1ec:	f7ff fff0 	bl	800a1d0 <HAL_RCC_GetHCLKFreq>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	4b05      	ldr	r3, [pc, #20]	; (800a208 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	0a9b      	lsrs	r3, r3, #10
 800a1f8:	f003 0307 	and.w	r3, r3, #7
 800a1fc:	4903      	ldr	r1, [pc, #12]	; (800a20c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1fe:	5ccb      	ldrb	r3, [r1, r3]
 800a200:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a204:	4618      	mov	r0, r3
 800a206:	bd80      	pop	{r7, pc}
 800a208:	40023800 	.word	0x40023800
 800a20c:	08013b3c 	.word	0x08013b3c

0800a210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a214:	f7ff ffdc 	bl	800a1d0 <HAL_RCC_GetHCLKFreq>
 800a218:	4602      	mov	r2, r0
 800a21a:	4b05      	ldr	r3, [pc, #20]	; (800a230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	0b5b      	lsrs	r3, r3, #13
 800a220:	f003 0307 	and.w	r3, r3, #7
 800a224:	4903      	ldr	r1, [pc, #12]	; (800a234 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a226:	5ccb      	ldrb	r3, [r1, r3]
 800a228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	40023800 	.word	0x40023800
 800a234:	08013b3c 	.word	0x08013b3c

0800a238 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	220f      	movs	r2, #15
 800a246:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a248:	4b12      	ldr	r3, [pc, #72]	; (800a294 <HAL_RCC_GetClockConfig+0x5c>)
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	f003 0203 	and.w	r2, r3, #3
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a254:	4b0f      	ldr	r3, [pc, #60]	; (800a294 <HAL_RCC_GetClockConfig+0x5c>)
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a260:	4b0c      	ldr	r3, [pc, #48]	; (800a294 <HAL_RCC_GetClockConfig+0x5c>)
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a26c:	4b09      	ldr	r3, [pc, #36]	; (800a294 <HAL_RCC_GetClockConfig+0x5c>)
 800a26e:	689b      	ldr	r3, [r3, #8]
 800a270:	08db      	lsrs	r3, r3, #3
 800a272:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a27a:	4b07      	ldr	r3, [pc, #28]	; (800a298 <HAL_RCC_GetClockConfig+0x60>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f003 0207 	and.w	r2, r3, #7
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	601a      	str	r2, [r3, #0]
}
 800a286:	bf00      	nop
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	40023800 	.word	0x40023800
 800a298:	40023c00 	.word	0x40023c00

0800a29c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d101      	bne.n	800a2ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e04c      	b.n	800a348 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d111      	bne.n	800a2de <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f001 fc0e 	bl	800bae4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d102      	bne.n	800a2d6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a1f      	ldr	r2, [pc, #124]	; (800a350 <HAL_TIM_Base_Init+0xb4>)
 800a2d4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2202      	movs	r2, #2
 800a2e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	3304      	adds	r3, #4
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	4610      	mov	r0, r2
 800a2f2:	f001 f80d 	bl	800b310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2201      	movs	r2, #1
 800a302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2201      	movs	r2, #1
 800a30a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2201      	movs	r2, #1
 800a312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2201      	movs	r2, #1
 800a31a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2201      	movs	r2, #1
 800a322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2201      	movs	r2, #1
 800a32a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2201      	movs	r2, #1
 800a33a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2201      	movs	r2, #1
 800a342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a346:	2300      	movs	r3, #0
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	08004d6d 	.word	0x08004d6d

0800a354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b01      	cmp	r3, #1
 800a366:	d001      	beq.n	800a36c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a368:	2301      	movs	r3, #1
 800a36a:	e044      	b.n	800a3f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2202      	movs	r2, #2
 800a370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68da      	ldr	r2, [r3, #12]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f042 0201 	orr.w	r2, r2, #1
 800a382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a1e      	ldr	r2, [pc, #120]	; (800a404 <HAL_TIM_Base_Start_IT+0xb0>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d018      	beq.n	800a3c0 <HAL_TIM_Base_Start_IT+0x6c>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a396:	d013      	beq.n	800a3c0 <HAL_TIM_Base_Start_IT+0x6c>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a1a      	ldr	r2, [pc, #104]	; (800a408 <HAL_TIM_Base_Start_IT+0xb4>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d00e      	beq.n	800a3c0 <HAL_TIM_Base_Start_IT+0x6c>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a19      	ldr	r2, [pc, #100]	; (800a40c <HAL_TIM_Base_Start_IT+0xb8>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d009      	beq.n	800a3c0 <HAL_TIM_Base_Start_IT+0x6c>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a17      	ldr	r2, [pc, #92]	; (800a410 <HAL_TIM_Base_Start_IT+0xbc>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d004      	beq.n	800a3c0 <HAL_TIM_Base_Start_IT+0x6c>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a16      	ldr	r2, [pc, #88]	; (800a414 <HAL_TIM_Base_Start_IT+0xc0>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d111      	bne.n	800a3e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	f003 0307 	and.w	r3, r3, #7
 800a3ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2b06      	cmp	r3, #6
 800a3d0:	d010      	beq.n	800a3f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f042 0201 	orr.w	r2, r2, #1
 800a3e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3e2:	e007      	b.n	800a3f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f042 0201 	orr.w	r2, r2, #1
 800a3f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	40010000 	.word	0x40010000
 800a408:	40000400 	.word	0x40000400
 800a40c:	40000800 	.word	0x40000800
 800a410:	40000c00 	.word	0x40000c00
 800a414:	40014000 	.word	0x40014000

0800a418 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d101      	bne.n	800a42a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a426:	2301      	movs	r3, #1
 800a428:	e04c      	b.n	800a4c4 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a430:	b2db      	uxtb	r3, r3
 800a432:	2b00      	cmp	r3, #0
 800a434:	d111      	bne.n	800a45a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f001 fb50 	bl	800bae4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d102      	bne.n	800a452 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a1f      	ldr	r2, [pc, #124]	; (800a4cc <HAL_TIM_PWM_Init+0xb4>)
 800a450:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2202      	movs	r2, #2
 800a45e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	3304      	adds	r3, #4
 800a46a:	4619      	mov	r1, r3
 800a46c:	4610      	mov	r0, r2
 800a46e:	f000 ff4f 	bl	800b310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2201      	movs	r2, #1
 800a476:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2201      	movs	r2, #1
 800a47e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2201      	movs	r2, #1
 800a486:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2201      	movs	r2, #1
 800a48e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2201      	movs	r2, #1
 800a496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2201      	movs	r2, #1
 800a49e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	0800a4d1 	.word	0x0800a4d1

0800a4d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a4d8:	bf00      	nop
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d109      	bne.n	800a50c <HAL_TIM_PWM_Start_IT+0x28>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	2b01      	cmp	r3, #1
 800a502:	bf14      	ite	ne
 800a504:	2301      	movne	r3, #1
 800a506:	2300      	moveq	r3, #0
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	e022      	b.n	800a552 <HAL_TIM_PWM_Start_IT+0x6e>
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	2b04      	cmp	r3, #4
 800a510:	d109      	bne.n	800a526 <HAL_TIM_PWM_Start_IT+0x42>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	bf14      	ite	ne
 800a51e:	2301      	movne	r3, #1
 800a520:	2300      	moveq	r3, #0
 800a522:	b2db      	uxtb	r3, r3
 800a524:	e015      	b.n	800a552 <HAL_TIM_PWM_Start_IT+0x6e>
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	2b08      	cmp	r3, #8
 800a52a:	d109      	bne.n	800a540 <HAL_TIM_PWM_Start_IT+0x5c>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a532:	b2db      	uxtb	r3, r3
 800a534:	2b01      	cmp	r3, #1
 800a536:	bf14      	ite	ne
 800a538:	2301      	movne	r3, #1
 800a53a:	2300      	moveq	r3, #0
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	e008      	b.n	800a552 <HAL_TIM_PWM_Start_IT+0x6e>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a546:	b2db      	uxtb	r3, r3
 800a548:	2b01      	cmp	r3, #1
 800a54a:	bf14      	ite	ne
 800a54c:	2301      	movne	r3, #1
 800a54e:	2300      	moveq	r3, #0
 800a550:	b2db      	uxtb	r3, r3
 800a552:	2b00      	cmp	r3, #0
 800a554:	d001      	beq.n	800a55a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	e0b3      	b.n	800a6c2 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d104      	bne.n	800a56a <HAL_TIM_PWM_Start_IT+0x86>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2202      	movs	r2, #2
 800a564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a568:	e013      	b.n	800a592 <HAL_TIM_PWM_Start_IT+0xae>
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	2b04      	cmp	r3, #4
 800a56e:	d104      	bne.n	800a57a <HAL_TIM_PWM_Start_IT+0x96>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2202      	movs	r2, #2
 800a574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a578:	e00b      	b.n	800a592 <HAL_TIM_PWM_Start_IT+0xae>
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	2b08      	cmp	r3, #8
 800a57e:	d104      	bne.n	800a58a <HAL_TIM_PWM_Start_IT+0xa6>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2202      	movs	r2, #2
 800a584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a588:	e003      	b.n	800a592 <HAL_TIM_PWM_Start_IT+0xae>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2202      	movs	r2, #2
 800a58e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	2b0c      	cmp	r3, #12
 800a596:	d841      	bhi.n	800a61c <HAL_TIM_PWM_Start_IT+0x138>
 800a598:	a201      	add	r2, pc, #4	; (adr r2, 800a5a0 <HAL_TIM_PWM_Start_IT+0xbc>)
 800a59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a59e:	bf00      	nop
 800a5a0:	0800a5d5 	.word	0x0800a5d5
 800a5a4:	0800a61d 	.word	0x0800a61d
 800a5a8:	0800a61d 	.word	0x0800a61d
 800a5ac:	0800a61d 	.word	0x0800a61d
 800a5b0:	0800a5e7 	.word	0x0800a5e7
 800a5b4:	0800a61d 	.word	0x0800a61d
 800a5b8:	0800a61d 	.word	0x0800a61d
 800a5bc:	0800a61d 	.word	0x0800a61d
 800a5c0:	0800a5f9 	.word	0x0800a5f9
 800a5c4:	0800a61d 	.word	0x0800a61d
 800a5c8:	0800a61d 	.word	0x0800a61d
 800a5cc:	0800a61d 	.word	0x0800a61d
 800a5d0:	0800a60b 	.word	0x0800a60b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	68da      	ldr	r2, [r3, #12]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f042 0202 	orr.w	r2, r2, #2
 800a5e2:	60da      	str	r2, [r3, #12]
      break;
 800a5e4:	e01d      	b.n	800a622 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	68da      	ldr	r2, [r3, #12]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f042 0204 	orr.w	r2, r2, #4
 800a5f4:	60da      	str	r2, [r3, #12]
      break;
 800a5f6:	e014      	b.n	800a622 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68da      	ldr	r2, [r3, #12]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f042 0208 	orr.w	r2, r2, #8
 800a606:	60da      	str	r2, [r3, #12]
      break;
 800a608:	e00b      	b.n	800a622 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68da      	ldr	r2, [r3, #12]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f042 0210 	orr.w	r2, r2, #16
 800a618:	60da      	str	r2, [r3, #12]
      break;
 800a61a:	e002      	b.n	800a622 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	73fb      	strb	r3, [r7, #15]
      break;
 800a620:	bf00      	nop
  }

  if (status == HAL_OK)
 800a622:	7bfb      	ldrb	r3, [r7, #15]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d14b      	bne.n	800a6c0 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2201      	movs	r2, #1
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	4618      	mov	r0, r3
 800a632:	f001 fa31 	bl	800ba98 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a24      	ldr	r2, [pc, #144]	; (800a6cc <HAL_TIM_PWM_Start_IT+0x1e8>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d107      	bne.n	800a650 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a64e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a1d      	ldr	r2, [pc, #116]	; (800a6cc <HAL_TIM_PWM_Start_IT+0x1e8>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d018      	beq.n	800a68c <HAL_TIM_PWM_Start_IT+0x1a8>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a662:	d013      	beq.n	800a68c <HAL_TIM_PWM_Start_IT+0x1a8>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a19      	ldr	r2, [pc, #100]	; (800a6d0 <HAL_TIM_PWM_Start_IT+0x1ec>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d00e      	beq.n	800a68c <HAL_TIM_PWM_Start_IT+0x1a8>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4a18      	ldr	r2, [pc, #96]	; (800a6d4 <HAL_TIM_PWM_Start_IT+0x1f0>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d009      	beq.n	800a68c <HAL_TIM_PWM_Start_IT+0x1a8>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a16      	ldr	r2, [pc, #88]	; (800a6d8 <HAL_TIM_PWM_Start_IT+0x1f4>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d004      	beq.n	800a68c <HAL_TIM_PWM_Start_IT+0x1a8>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a15      	ldr	r2, [pc, #84]	; (800a6dc <HAL_TIM_PWM_Start_IT+0x1f8>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d111      	bne.n	800a6b0 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	f003 0307 	and.w	r3, r3, #7
 800a696:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	2b06      	cmp	r3, #6
 800a69c:	d010      	beq.n	800a6c0 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f042 0201 	orr.w	r2, r2, #1
 800a6ac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6ae:	e007      	b.n	800a6c0 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f042 0201 	orr.w	r2, r2, #1
 800a6be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800a6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	40010000 	.word	0x40010000
 800a6d0:	40000400 	.word	0x40000400
 800a6d4:	40000800 	.word	0x40000800
 800a6d8:	40000c00 	.word	0x40000c00
 800a6dc:	40014000 	.word	0x40014000

0800a6e0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	2b0c      	cmp	r3, #12
 800a6f2:	d841      	bhi.n	800a778 <HAL_TIM_PWM_Stop_IT+0x98>
 800a6f4:	a201      	add	r2, pc, #4	; (adr r2, 800a6fc <HAL_TIM_PWM_Stop_IT+0x1c>)
 800a6f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6fa:	bf00      	nop
 800a6fc:	0800a731 	.word	0x0800a731
 800a700:	0800a779 	.word	0x0800a779
 800a704:	0800a779 	.word	0x0800a779
 800a708:	0800a779 	.word	0x0800a779
 800a70c:	0800a743 	.word	0x0800a743
 800a710:	0800a779 	.word	0x0800a779
 800a714:	0800a779 	.word	0x0800a779
 800a718:	0800a779 	.word	0x0800a779
 800a71c:	0800a755 	.word	0x0800a755
 800a720:	0800a779 	.word	0x0800a779
 800a724:	0800a779 	.word	0x0800a779
 800a728:	0800a779 	.word	0x0800a779
 800a72c:	0800a767 	.word	0x0800a767
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	68da      	ldr	r2, [r3, #12]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f022 0202 	bic.w	r2, r2, #2
 800a73e:	60da      	str	r2, [r3, #12]
      break;
 800a740:	e01d      	b.n	800a77e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	68da      	ldr	r2, [r3, #12]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f022 0204 	bic.w	r2, r2, #4
 800a750:	60da      	str	r2, [r3, #12]
      break;
 800a752:	e014      	b.n	800a77e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	68da      	ldr	r2, [r3, #12]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f022 0208 	bic.w	r2, r2, #8
 800a762:	60da      	str	r2, [r3, #12]
      break;
 800a764:	e00b      	b.n	800a77e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68da      	ldr	r2, [r3, #12]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f022 0210 	bic.w	r2, r2, #16
 800a774:	60da      	str	r2, [r3, #12]
      break;
 800a776:	e002      	b.n	800a77e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	73fb      	strb	r3, [r7, #15]
      break;
 800a77c:	bf00      	nop
  }

  if (status == HAL_OK)
 800a77e:	7bfb      	ldrb	r3, [r7, #15]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d157      	bne.n	800a834 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2200      	movs	r2, #0
 800a78a:	6839      	ldr	r1, [r7, #0]
 800a78c:	4618      	mov	r0, r3
 800a78e:	f001 f983 	bl	800ba98 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a2a      	ldr	r2, [pc, #168]	; (800a840 <HAL_TIM_PWM_Stop_IT+0x160>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d117      	bne.n	800a7cc <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	6a1a      	ldr	r2, [r3, #32]
 800a7a2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10f      	bne.n	800a7cc <HAL_TIM_PWM_Stop_IT+0xec>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6a1a      	ldr	r2, [r3, #32]
 800a7b2:	f240 4344 	movw	r3, #1092	; 0x444
 800a7b6:	4013      	ands	r3, r2
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d107      	bne.n	800a7cc <HAL_TIM_PWM_Stop_IT+0xec>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a7ca:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	6a1a      	ldr	r2, [r3, #32]
 800a7d2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a7d6:	4013      	ands	r3, r2
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d10f      	bne.n	800a7fc <HAL_TIM_PWM_Stop_IT+0x11c>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	6a1a      	ldr	r2, [r3, #32]
 800a7e2:	f240 4344 	movw	r3, #1092	; 0x444
 800a7e6:	4013      	ands	r3, r2
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d107      	bne.n	800a7fc <HAL_TIM_PWM_Stop_IT+0x11c>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f022 0201 	bic.w	r2, r2, #1
 800a7fa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d104      	bne.n	800a80c <HAL_TIM_PWM_Stop_IT+0x12c>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a80a:	e013      	b.n	800a834 <HAL_TIM_PWM_Stop_IT+0x154>
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	2b04      	cmp	r3, #4
 800a810:	d104      	bne.n	800a81c <HAL_TIM_PWM_Stop_IT+0x13c>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2201      	movs	r2, #1
 800a816:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a81a:	e00b      	b.n	800a834 <HAL_TIM_PWM_Stop_IT+0x154>
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	2b08      	cmp	r3, #8
 800a820:	d104      	bne.n	800a82c <HAL_TIM_PWM_Stop_IT+0x14c>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2201      	movs	r2, #1
 800a826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a82a:	e003      	b.n	800a834 <HAL_TIM_PWM_Stop_IT+0x154>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800a834:	7bfb      	ldrb	r3, [r7, #15]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	40010000 	.word	0x40010000

0800a844 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d101      	bne.n	800a856 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a852:	2301      	movs	r3, #1
 800a854:	e04c      	b.n	800a8f0 <HAL_TIM_IC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d111      	bne.n	800a886 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f001 f93a 	bl	800bae4 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a874:	2b00      	cmp	r3, #0
 800a876:	d102      	bne.n	800a87e <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a1f      	ldr	r2, [pc, #124]	; (800a8f8 <HAL_TIM_IC_Init+0xb4>)
 800a87c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2202      	movs	r2, #2
 800a88a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	3304      	adds	r3, #4
 800a896:	4619      	mov	r1, r3
 800a898:	4610      	mov	r0, r2
 800a89a:	f000 fd39 	bl	800b310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	0800a8fd 	.word	0x0800a8fd

0800a8fc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a904:	bf00      	nop
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d104      	bne.n	800a92e <HAL_TIM_IC_Start_IT+0x1e>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	e013      	b.n	800a956 <HAL_TIM_IC_Start_IT+0x46>
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	2b04      	cmp	r3, #4
 800a932:	d104      	bne.n	800a93e <HAL_TIM_IC_Start_IT+0x2e>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	e00b      	b.n	800a956 <HAL_TIM_IC_Start_IT+0x46>
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	2b08      	cmp	r3, #8
 800a942:	d104      	bne.n	800a94e <HAL_TIM_IC_Start_IT+0x3e>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	e003      	b.n	800a956 <HAL_TIM_IC_Start_IT+0x46>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a954:	b2db      	uxtb	r3, r3
 800a956:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d104      	bne.n	800a968 <HAL_TIM_IC_Start_IT+0x58>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a964:	b2db      	uxtb	r3, r3
 800a966:	e013      	b.n	800a990 <HAL_TIM_IC_Start_IT+0x80>
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	2b04      	cmp	r3, #4
 800a96c:	d104      	bne.n	800a978 <HAL_TIM_IC_Start_IT+0x68>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a974:	b2db      	uxtb	r3, r3
 800a976:	e00b      	b.n	800a990 <HAL_TIM_IC_Start_IT+0x80>
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	2b08      	cmp	r3, #8
 800a97c:	d104      	bne.n	800a988 <HAL_TIM_IC_Start_IT+0x78>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a984:	b2db      	uxtb	r3, r3
 800a986:	e003      	b.n	800a990 <HAL_TIM_IC_Start_IT+0x80>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a992:	7bbb      	ldrb	r3, [r7, #14]
 800a994:	2b01      	cmp	r3, #1
 800a996:	d102      	bne.n	800a99e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a998:	7b7b      	ldrb	r3, [r7, #13]
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d001      	beq.n	800a9a2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e0c2      	b.n	800ab28 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d104      	bne.n	800a9b2 <HAL_TIM_IC_Start_IT+0xa2>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2202      	movs	r2, #2
 800a9ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9b0:	e013      	b.n	800a9da <HAL_TIM_IC_Start_IT+0xca>
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	2b04      	cmp	r3, #4
 800a9b6:	d104      	bne.n	800a9c2 <HAL_TIM_IC_Start_IT+0xb2>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2202      	movs	r2, #2
 800a9bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9c0:	e00b      	b.n	800a9da <HAL_TIM_IC_Start_IT+0xca>
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	2b08      	cmp	r3, #8
 800a9c6:	d104      	bne.n	800a9d2 <HAL_TIM_IC_Start_IT+0xc2>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2202      	movs	r2, #2
 800a9cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9d0:	e003      	b.n	800a9da <HAL_TIM_IC_Start_IT+0xca>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2202      	movs	r2, #2
 800a9d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d104      	bne.n	800a9ea <HAL_TIM_IC_Start_IT+0xda>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2202      	movs	r2, #2
 800a9e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9e8:	e013      	b.n	800aa12 <HAL_TIM_IC_Start_IT+0x102>
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	2b04      	cmp	r3, #4
 800a9ee:	d104      	bne.n	800a9fa <HAL_TIM_IC_Start_IT+0xea>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2202      	movs	r2, #2
 800a9f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a9f8:	e00b      	b.n	800aa12 <HAL_TIM_IC_Start_IT+0x102>
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	2b08      	cmp	r3, #8
 800a9fe:	d104      	bne.n	800aa0a <HAL_TIM_IC_Start_IT+0xfa>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2202      	movs	r2, #2
 800aa04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa08:	e003      	b.n	800aa12 <HAL_TIM_IC_Start_IT+0x102>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2202      	movs	r2, #2
 800aa0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	2b0c      	cmp	r3, #12
 800aa16:	d841      	bhi.n	800aa9c <HAL_TIM_IC_Start_IT+0x18c>
 800aa18:	a201      	add	r2, pc, #4	; (adr r2, 800aa20 <HAL_TIM_IC_Start_IT+0x110>)
 800aa1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa1e:	bf00      	nop
 800aa20:	0800aa55 	.word	0x0800aa55
 800aa24:	0800aa9d 	.word	0x0800aa9d
 800aa28:	0800aa9d 	.word	0x0800aa9d
 800aa2c:	0800aa9d 	.word	0x0800aa9d
 800aa30:	0800aa67 	.word	0x0800aa67
 800aa34:	0800aa9d 	.word	0x0800aa9d
 800aa38:	0800aa9d 	.word	0x0800aa9d
 800aa3c:	0800aa9d 	.word	0x0800aa9d
 800aa40:	0800aa79 	.word	0x0800aa79
 800aa44:	0800aa9d 	.word	0x0800aa9d
 800aa48:	0800aa9d 	.word	0x0800aa9d
 800aa4c:	0800aa9d 	.word	0x0800aa9d
 800aa50:	0800aa8b 	.word	0x0800aa8b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	68da      	ldr	r2, [r3, #12]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f042 0202 	orr.w	r2, r2, #2
 800aa62:	60da      	str	r2, [r3, #12]
      break;
 800aa64:	e01d      	b.n	800aaa2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68da      	ldr	r2, [r3, #12]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f042 0204 	orr.w	r2, r2, #4
 800aa74:	60da      	str	r2, [r3, #12]
      break;
 800aa76:	e014      	b.n	800aaa2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68da      	ldr	r2, [r3, #12]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f042 0208 	orr.w	r2, r2, #8
 800aa86:	60da      	str	r2, [r3, #12]
      break;
 800aa88:	e00b      	b.n	800aaa2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68da      	ldr	r2, [r3, #12]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f042 0210 	orr.w	r2, r2, #16
 800aa98:	60da      	str	r2, [r3, #12]
      break;
 800aa9a:	e002      	b.n	800aaa2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	73fb      	strb	r3, [r7, #15]
      break;
 800aaa0:	bf00      	nop
  }

  if (status == HAL_OK)
 800aaa2:	7bfb      	ldrb	r3, [r7, #15]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d13e      	bne.n	800ab26 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2201      	movs	r2, #1
 800aaae:	6839      	ldr	r1, [r7, #0]
 800aab0:	4618      	mov	r0, r3
 800aab2:	f000 fff1 	bl	800ba98 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a1d      	ldr	r2, [pc, #116]	; (800ab30 <HAL_TIM_IC_Start_IT+0x220>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d018      	beq.n	800aaf2 <HAL_TIM_IC_Start_IT+0x1e2>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aac8:	d013      	beq.n	800aaf2 <HAL_TIM_IC_Start_IT+0x1e2>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a19      	ldr	r2, [pc, #100]	; (800ab34 <HAL_TIM_IC_Start_IT+0x224>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d00e      	beq.n	800aaf2 <HAL_TIM_IC_Start_IT+0x1e2>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a17      	ldr	r2, [pc, #92]	; (800ab38 <HAL_TIM_IC_Start_IT+0x228>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d009      	beq.n	800aaf2 <HAL_TIM_IC_Start_IT+0x1e2>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a16      	ldr	r2, [pc, #88]	; (800ab3c <HAL_TIM_IC_Start_IT+0x22c>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d004      	beq.n	800aaf2 <HAL_TIM_IC_Start_IT+0x1e2>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a14      	ldr	r2, [pc, #80]	; (800ab40 <HAL_TIM_IC_Start_IT+0x230>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d111      	bne.n	800ab16 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	f003 0307 	and.w	r3, r3, #7
 800aafc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	2b06      	cmp	r3, #6
 800ab02:	d010      	beq.n	800ab26 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f042 0201 	orr.w	r2, r2, #1
 800ab12:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab14:	e007      	b.n	800ab26 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f042 0201 	orr.w	r2, r2, #1
 800ab24:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800ab26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	40010000 	.word	0x40010000
 800ab34:	40000400 	.word	0x40000400
 800ab38:	40000800 	.word	0x40000800
 800ab3c:	40000c00 	.word	0x40000c00
 800ab40:	40014000 	.word	0x40014000

0800ab44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	f003 0302 	and.w	r3, r3, #2
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	d128      	bne.n	800abac <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	f003 0302 	and.w	r3, r3, #2
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d121      	bne.n	800abac <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f06f 0202 	mvn.w	r2, #2
 800ab70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2201      	movs	r2, #1
 800ab76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	699b      	ldr	r3, [r3, #24]
 800ab7e:	f003 0303 	and.w	r3, r3, #3
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d005      	beq.n	800ab92 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	4798      	blx	r3
 800ab90:	e009      	b.n	800aba6 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2200      	movs	r2, #0
 800abaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	f003 0304 	and.w	r3, r3, #4
 800abb6:	2b04      	cmp	r3, #4
 800abb8:	d128      	bne.n	800ac0c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	f003 0304 	and.w	r3, r3, #4
 800abc4:	2b04      	cmp	r3, #4
 800abc6:	d121      	bne.n	800ac0c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f06f 0204 	mvn.w	r2, #4
 800abd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2202      	movs	r2, #2
 800abd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	699b      	ldr	r3, [r3, #24]
 800abde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d005      	beq.n	800abf2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	4798      	blx	r3
 800abf0:	e009      	b.n	800ac06 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	691b      	ldr	r3, [r3, #16]
 800ac12:	f003 0308 	and.w	r3, r3, #8
 800ac16:	2b08      	cmp	r3, #8
 800ac18:	d128      	bne.n	800ac6c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	f003 0308 	and.w	r3, r3, #8
 800ac24:	2b08      	cmp	r3, #8
 800ac26:	d121      	bne.n	800ac6c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f06f 0208 	mvn.w	r2, #8
 800ac30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2204      	movs	r2, #4
 800ac36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	69db      	ldr	r3, [r3, #28]
 800ac3e:	f003 0303 	and.w	r3, r3, #3
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d005      	beq.n	800ac52 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	4798      	blx	r3
 800ac50:	e009      	b.n	800ac66 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	f003 0310 	and.w	r3, r3, #16
 800ac76:	2b10      	cmp	r3, #16
 800ac78:	d128      	bne.n	800accc <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	f003 0310 	and.w	r3, r3, #16
 800ac84:	2b10      	cmp	r3, #16
 800ac86:	d121      	bne.n	800accc <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f06f 0210 	mvn.w	r2, #16
 800ac90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2208      	movs	r2, #8
 800ac96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	69db      	ldr	r3, [r3, #28]
 800ac9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d005      	beq.n	800acb2 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	4798      	blx	r3
 800acb0:	e009      	b.n	800acc6 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	691b      	ldr	r3, [r3, #16]
 800acd2:	f003 0301 	and.w	r3, r3, #1
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d110      	bne.n	800acfc <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	f003 0301 	and.w	r3, r3, #1
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d109      	bne.n	800acfc <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f06f 0201 	mvn.w	r2, #1
 800acf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	691b      	ldr	r3, [r3, #16]
 800ad02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad06:	2b80      	cmp	r3, #128	; 0x80
 800ad08:	d110      	bne.n	800ad2c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad14:	2b80      	cmp	r3, #128	; 0x80
 800ad16:	d109      	bne.n	800ad2c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad36:	2b40      	cmp	r3, #64	; 0x40
 800ad38:	d110      	bne.n	800ad5c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad44:	2b40      	cmp	r3, #64	; 0x40
 800ad46:	d109      	bne.n	800ad5c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ad50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	f003 0320 	and.w	r3, r3, #32
 800ad66:	2b20      	cmp	r3, #32
 800ad68:	d110      	bne.n	800ad8c <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	f003 0320 	and.w	r3, r3, #32
 800ad74:	2b20      	cmp	r3, #32
 800ad76:	d109      	bne.n	800ad8c <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f06f 0220 	mvn.w	r2, #32
 800ad80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad8c:	bf00      	nop
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b086      	sub	sp, #24
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ada0:	2300      	movs	r3, #0
 800ada2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d101      	bne.n	800adb2 <HAL_TIM_IC_ConfigChannel+0x1e>
 800adae:	2302      	movs	r3, #2
 800adb0:	e088      	b.n	800aec4 <HAL_TIM_IC_ConfigChannel+0x130>
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2201      	movs	r2, #1
 800adb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d11b      	bne.n	800adf8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6818      	ldr	r0, [r3, #0]
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	6819      	ldr	r1, [r3, #0]
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	685a      	ldr	r2, [r3, #4]
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	f000 fcaa 	bl	800b728 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	699a      	ldr	r2, [r3, #24]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f022 020c 	bic.w	r2, r2, #12
 800ade2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	6999      	ldr	r1, [r3, #24]
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	689a      	ldr	r2, [r3, #8]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	430a      	orrs	r2, r1
 800adf4:	619a      	str	r2, [r3, #24]
 800adf6:	e060      	b.n	800aeba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b04      	cmp	r3, #4
 800adfc:	d11c      	bne.n	800ae38 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6818      	ldr	r0, [r3, #0]
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	6819      	ldr	r1, [r3, #0]
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	685a      	ldr	r2, [r3, #4]
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	f000 fd22 	bl	800b856 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	699a      	ldr	r2, [r3, #24]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ae20:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	6999      	ldr	r1, [r3, #24]
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	021a      	lsls	r2, r3, #8
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	430a      	orrs	r2, r1
 800ae34:	619a      	str	r2, [r3, #24]
 800ae36:	e040      	b.n	800aeba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2b08      	cmp	r3, #8
 800ae3c:	d11b      	bne.n	800ae76 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6818      	ldr	r0, [r3, #0]
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	6819      	ldr	r1, [r3, #0]
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	685a      	ldr	r2, [r3, #4]
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	f000 fd6f 	bl	800b930 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	69da      	ldr	r2, [r3, #28]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f022 020c 	bic.w	r2, r2, #12
 800ae60:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	69d9      	ldr	r1, [r3, #28]
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	689a      	ldr	r2, [r3, #8]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	430a      	orrs	r2, r1
 800ae72:	61da      	str	r2, [r3, #28]
 800ae74:	e021      	b.n	800aeba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2b0c      	cmp	r3, #12
 800ae7a:	d11c      	bne.n	800aeb6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6818      	ldr	r0, [r3, #0]
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	6819      	ldr	r1, [r3, #0]
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	685a      	ldr	r2, [r3, #4]
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	f000 fd8c 	bl	800b9a8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	69da      	ldr	r2, [r3, #28]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ae9e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	69d9      	ldr	r1, [r3, #28]
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	021a      	lsls	r2, r3, #8
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	430a      	orrs	r2, r1
 800aeb2:	61da      	str	r2, [r3, #28]
 800aeb4:	e001      	b.n	800aeba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aec2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3718      	adds	r7, #24
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b086      	sub	sp, #24
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aed8:	2300      	movs	r3, #0
 800aeda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d101      	bne.n	800aeea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aee6:	2302      	movs	r3, #2
 800aee8:	e0ae      	b.n	800b048 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2201      	movs	r2, #1
 800aeee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2b0c      	cmp	r3, #12
 800aef6:	f200 809f 	bhi.w	800b038 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800aefa:	a201      	add	r2, pc, #4	; (adr r2, 800af00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af00:	0800af35 	.word	0x0800af35
 800af04:	0800b039 	.word	0x0800b039
 800af08:	0800b039 	.word	0x0800b039
 800af0c:	0800b039 	.word	0x0800b039
 800af10:	0800af75 	.word	0x0800af75
 800af14:	0800b039 	.word	0x0800b039
 800af18:	0800b039 	.word	0x0800b039
 800af1c:	0800b039 	.word	0x0800b039
 800af20:	0800afb7 	.word	0x0800afb7
 800af24:	0800b039 	.word	0x0800b039
 800af28:	0800b039 	.word	0x0800b039
 800af2c:	0800b039 	.word	0x0800b039
 800af30:	0800aff7 	.word	0x0800aff7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	68b9      	ldr	r1, [r7, #8]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f000 fa68 	bl	800b410 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	699a      	ldr	r2, [r3, #24]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f042 0208 	orr.w	r2, r2, #8
 800af4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	699a      	ldr	r2, [r3, #24]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f022 0204 	bic.w	r2, r2, #4
 800af5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	6999      	ldr	r1, [r3, #24]
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	691a      	ldr	r2, [r3, #16]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	430a      	orrs	r2, r1
 800af70:	619a      	str	r2, [r3, #24]
      break;
 800af72:	e064      	b.n	800b03e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	68b9      	ldr	r1, [r7, #8]
 800af7a:	4618      	mov	r0, r3
 800af7c:	f000 faae 	bl	800b4dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	699a      	ldr	r2, [r3, #24]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	699a      	ldr	r2, [r3, #24]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	6999      	ldr	r1, [r3, #24]
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	691b      	ldr	r3, [r3, #16]
 800afaa:	021a      	lsls	r2, r3, #8
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	430a      	orrs	r2, r1
 800afb2:	619a      	str	r2, [r3, #24]
      break;
 800afb4:	e043      	b.n	800b03e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	68b9      	ldr	r1, [r7, #8]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f000 faf9 	bl	800b5b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	69da      	ldr	r2, [r3, #28]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f042 0208 	orr.w	r2, r2, #8
 800afd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	69da      	ldr	r2, [r3, #28]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f022 0204 	bic.w	r2, r2, #4
 800afe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	69d9      	ldr	r1, [r3, #28]
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	691a      	ldr	r2, [r3, #16]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	430a      	orrs	r2, r1
 800aff2:	61da      	str	r2, [r3, #28]
      break;
 800aff4:	e023      	b.n	800b03e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68b9      	ldr	r1, [r7, #8]
 800affc:	4618      	mov	r0, r3
 800affe:	f000 fb43 	bl	800b688 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	69da      	ldr	r2, [r3, #28]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	69da      	ldr	r2, [r3, #28]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	69d9      	ldr	r1, [r3, #28]
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	021a      	lsls	r2, r3, #8
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	430a      	orrs	r2, r1
 800b034:	61da      	str	r2, [r3, #28]
      break;
 800b036:	e002      	b.n	800b03e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	75fb      	strb	r3, [r7, #23]
      break;
 800b03c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2200      	movs	r2, #0
 800b042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b046:	7dfb      	ldrb	r3, [r7, #23]
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3718      	adds	r7, #24
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b05a:	2300      	movs	r3, #0
 800b05c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b064:	2b01      	cmp	r3, #1
 800b066:	d101      	bne.n	800b06c <HAL_TIM_ConfigClockSource+0x1c>
 800b068:	2302      	movs	r3, #2
 800b06a:	e0b4      	b.n	800b1d6 <HAL_TIM_ConfigClockSource+0x186>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2202      	movs	r2, #2
 800b078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	689b      	ldr	r3, [r3, #8]
 800b082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b08a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b092:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	68ba      	ldr	r2, [r7, #8]
 800b09a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0a4:	d03e      	beq.n	800b124 <HAL_TIM_ConfigClockSource+0xd4>
 800b0a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0aa:	f200 8087 	bhi.w	800b1bc <HAL_TIM_ConfigClockSource+0x16c>
 800b0ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0b2:	f000 8086 	beq.w	800b1c2 <HAL_TIM_ConfigClockSource+0x172>
 800b0b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0ba:	d87f      	bhi.n	800b1bc <HAL_TIM_ConfigClockSource+0x16c>
 800b0bc:	2b70      	cmp	r3, #112	; 0x70
 800b0be:	d01a      	beq.n	800b0f6 <HAL_TIM_ConfigClockSource+0xa6>
 800b0c0:	2b70      	cmp	r3, #112	; 0x70
 800b0c2:	d87b      	bhi.n	800b1bc <HAL_TIM_ConfigClockSource+0x16c>
 800b0c4:	2b60      	cmp	r3, #96	; 0x60
 800b0c6:	d050      	beq.n	800b16a <HAL_TIM_ConfigClockSource+0x11a>
 800b0c8:	2b60      	cmp	r3, #96	; 0x60
 800b0ca:	d877      	bhi.n	800b1bc <HAL_TIM_ConfigClockSource+0x16c>
 800b0cc:	2b50      	cmp	r3, #80	; 0x50
 800b0ce:	d03c      	beq.n	800b14a <HAL_TIM_ConfigClockSource+0xfa>
 800b0d0:	2b50      	cmp	r3, #80	; 0x50
 800b0d2:	d873      	bhi.n	800b1bc <HAL_TIM_ConfigClockSource+0x16c>
 800b0d4:	2b40      	cmp	r3, #64	; 0x40
 800b0d6:	d058      	beq.n	800b18a <HAL_TIM_ConfigClockSource+0x13a>
 800b0d8:	2b40      	cmp	r3, #64	; 0x40
 800b0da:	d86f      	bhi.n	800b1bc <HAL_TIM_ConfigClockSource+0x16c>
 800b0dc:	2b30      	cmp	r3, #48	; 0x30
 800b0de:	d064      	beq.n	800b1aa <HAL_TIM_ConfigClockSource+0x15a>
 800b0e0:	2b30      	cmp	r3, #48	; 0x30
 800b0e2:	d86b      	bhi.n	800b1bc <HAL_TIM_ConfigClockSource+0x16c>
 800b0e4:	2b20      	cmp	r3, #32
 800b0e6:	d060      	beq.n	800b1aa <HAL_TIM_ConfigClockSource+0x15a>
 800b0e8:	2b20      	cmp	r3, #32
 800b0ea:	d867      	bhi.n	800b1bc <HAL_TIM_ConfigClockSource+0x16c>
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d05c      	beq.n	800b1aa <HAL_TIM_ConfigClockSource+0x15a>
 800b0f0:	2b10      	cmp	r3, #16
 800b0f2:	d05a      	beq.n	800b1aa <HAL_TIM_ConfigClockSource+0x15a>
 800b0f4:	e062      	b.n	800b1bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6818      	ldr	r0, [r3, #0]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	6899      	ldr	r1, [r3, #8]
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	685a      	ldr	r2, [r3, #4]
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	68db      	ldr	r3, [r3, #12]
 800b106:	f000 fca7 	bl	800ba58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	689b      	ldr	r3, [r3, #8]
 800b110:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b118:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	68ba      	ldr	r2, [r7, #8]
 800b120:	609a      	str	r2, [r3, #8]
      break;
 800b122:	e04f      	b.n	800b1c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6818      	ldr	r0, [r3, #0]
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	6899      	ldr	r1, [r3, #8]
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	685a      	ldr	r2, [r3, #4]
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	f000 fc90 	bl	800ba58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	689a      	ldr	r2, [r3, #8]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b146:	609a      	str	r2, [r3, #8]
      break;
 800b148:	e03c      	b.n	800b1c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6818      	ldr	r0, [r3, #0]
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	6859      	ldr	r1, [r3, #4]
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	461a      	mov	r2, r3
 800b158:	f000 fb4e 	bl	800b7f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2150      	movs	r1, #80	; 0x50
 800b162:	4618      	mov	r0, r3
 800b164:	f000 fc5d 	bl	800ba22 <TIM_ITRx_SetConfig>
      break;
 800b168:	e02c      	b.n	800b1c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6818      	ldr	r0, [r3, #0]
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	6859      	ldr	r1, [r3, #4]
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	461a      	mov	r2, r3
 800b178:	f000 fbaa 	bl	800b8d0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2160      	movs	r1, #96	; 0x60
 800b182:	4618      	mov	r0, r3
 800b184:	f000 fc4d 	bl	800ba22 <TIM_ITRx_SetConfig>
      break;
 800b188:	e01c      	b.n	800b1c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6818      	ldr	r0, [r3, #0]
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	6859      	ldr	r1, [r3, #4]
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	461a      	mov	r2, r3
 800b198:	f000 fb2e 	bl	800b7f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2140      	movs	r1, #64	; 0x40
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 fc3d 	bl	800ba22 <TIM_ITRx_SetConfig>
      break;
 800b1a8:	e00c      	b.n	800b1c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	4610      	mov	r0, r2
 800b1b6:	f000 fc34 	bl	800ba22 <TIM_ITRx_SetConfig>
      break;
 800b1ba:	e003      	b.n	800b1c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	73fb      	strb	r3, [r7, #15]
      break;
 800b1c0:	e000      	b.n	800b1c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b1c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
	...

0800b1e0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b085      	sub	sp, #20
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	2b0c      	cmp	r3, #12
 800b1f2:	d831      	bhi.n	800b258 <HAL_TIM_ReadCapturedValue+0x78>
 800b1f4:	a201      	add	r2, pc, #4	; (adr r2, 800b1fc <HAL_TIM_ReadCapturedValue+0x1c>)
 800b1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fa:	bf00      	nop
 800b1fc:	0800b231 	.word	0x0800b231
 800b200:	0800b259 	.word	0x0800b259
 800b204:	0800b259 	.word	0x0800b259
 800b208:	0800b259 	.word	0x0800b259
 800b20c:	0800b23b 	.word	0x0800b23b
 800b210:	0800b259 	.word	0x0800b259
 800b214:	0800b259 	.word	0x0800b259
 800b218:	0800b259 	.word	0x0800b259
 800b21c:	0800b245 	.word	0x0800b245
 800b220:	0800b259 	.word	0x0800b259
 800b224:	0800b259 	.word	0x0800b259
 800b228:	0800b259 	.word	0x0800b259
 800b22c:	0800b24f 	.word	0x0800b24f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b236:	60fb      	str	r3, [r7, #12]

      break;
 800b238:	e00f      	b.n	800b25a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b240:	60fb      	str	r3, [r7, #12]

      break;
 800b242:	e00a      	b.n	800b25a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b24a:	60fb      	str	r3, [r7, #12]

      break;
 800b24c:	e005      	b.n	800b25a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b254:	60fb      	str	r3, [r7, #12]

      break;
 800b256:	e000      	b.n	800b25a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800b258:	bf00      	nop
  }

  return tmpreg;
 800b25a:	68fb      	ldr	r3, [r7, #12]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3714      	adds	r7, #20
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800b270:	bf00      	nop
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b284:	bf00      	nop
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b298:	bf00      	nop
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2ac:	bf00      	nop
 800b2ae:	370c      	adds	r7, #12
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b2c0:	bf00      	nop
 800b2c2:	370c      	adds	r7, #12
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b2d4:	bf00      	nop
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr

0800b2e0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800b2e8:	bf00      	nop
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  return htim->State;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b302:	b2db      	uxtb	r3, r3
}
 800b304:	4618      	mov	r0, r3
 800b306:	370c      	adds	r7, #12
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b310:	b480      	push	{r7}
 800b312:	b085      	sub	sp, #20
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4a34      	ldr	r2, [pc, #208]	; (800b3f4 <TIM_Base_SetConfig+0xe4>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d00f      	beq.n	800b348 <TIM_Base_SetConfig+0x38>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b32e:	d00b      	beq.n	800b348 <TIM_Base_SetConfig+0x38>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	4a31      	ldr	r2, [pc, #196]	; (800b3f8 <TIM_Base_SetConfig+0xe8>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d007      	beq.n	800b348 <TIM_Base_SetConfig+0x38>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	4a30      	ldr	r2, [pc, #192]	; (800b3fc <TIM_Base_SetConfig+0xec>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d003      	beq.n	800b348 <TIM_Base_SetConfig+0x38>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	4a2f      	ldr	r2, [pc, #188]	; (800b400 <TIM_Base_SetConfig+0xf0>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d108      	bne.n	800b35a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b34e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	4313      	orrs	r3, r2
 800b358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4a25      	ldr	r2, [pc, #148]	; (800b3f4 <TIM_Base_SetConfig+0xe4>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d01b      	beq.n	800b39a <TIM_Base_SetConfig+0x8a>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b368:	d017      	beq.n	800b39a <TIM_Base_SetConfig+0x8a>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4a22      	ldr	r2, [pc, #136]	; (800b3f8 <TIM_Base_SetConfig+0xe8>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d013      	beq.n	800b39a <TIM_Base_SetConfig+0x8a>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4a21      	ldr	r2, [pc, #132]	; (800b3fc <TIM_Base_SetConfig+0xec>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d00f      	beq.n	800b39a <TIM_Base_SetConfig+0x8a>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4a20      	ldr	r2, [pc, #128]	; (800b400 <TIM_Base_SetConfig+0xf0>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d00b      	beq.n	800b39a <TIM_Base_SetConfig+0x8a>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	4a1f      	ldr	r2, [pc, #124]	; (800b404 <TIM_Base_SetConfig+0xf4>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d007      	beq.n	800b39a <TIM_Base_SetConfig+0x8a>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	4a1e      	ldr	r2, [pc, #120]	; (800b408 <TIM_Base_SetConfig+0xf8>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d003      	beq.n	800b39a <TIM_Base_SetConfig+0x8a>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4a1d      	ldr	r2, [pc, #116]	; (800b40c <TIM_Base_SetConfig+0xfc>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d108      	bne.n	800b3ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	68fa      	ldr	r2, [r7, #12]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	695b      	ldr	r3, [r3, #20]
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	689a      	ldr	r2, [r3, #8]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4a08      	ldr	r2, [pc, #32]	; (800b3f4 <TIM_Base_SetConfig+0xe4>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d103      	bne.n	800b3e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	691a      	ldr	r2, [r3, #16]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	615a      	str	r2, [r3, #20]
}
 800b3e6:	bf00      	nop
 800b3e8:	3714      	adds	r7, #20
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	40010000 	.word	0x40010000
 800b3f8:	40000400 	.word	0x40000400
 800b3fc:	40000800 	.word	0x40000800
 800b400:	40000c00 	.word	0x40000c00
 800b404:	40014000 	.word	0x40014000
 800b408:	40014400 	.word	0x40014400
 800b40c:	40014800 	.word	0x40014800

0800b410 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b410:	b480      	push	{r7}
 800b412:	b087      	sub	sp, #28
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	f023 0201 	bic.w	r2, r3, #1
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6a1b      	ldr	r3, [r3, #32]
 800b42a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	699b      	ldr	r3, [r3, #24]
 800b436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b43e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f023 0303 	bic.w	r3, r3, #3
 800b446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	4313      	orrs	r3, r2
 800b450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	f023 0302 	bic.w	r3, r3, #2
 800b458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	4313      	orrs	r3, r2
 800b462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	4a1c      	ldr	r2, [pc, #112]	; (800b4d8 <TIM_OC1_SetConfig+0xc8>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d10c      	bne.n	800b486 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	f023 0308 	bic.w	r3, r3, #8
 800b472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	697a      	ldr	r2, [r7, #20]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f023 0304 	bic.w	r3, r3, #4
 800b484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4a13      	ldr	r2, [pc, #76]	; (800b4d8 <TIM_OC1_SetConfig+0xc8>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d111      	bne.n	800b4b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b49c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	695b      	ldr	r3, [r3, #20]
 800b4a2:	693a      	ldr	r2, [r7, #16]
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	699b      	ldr	r3, [r3, #24]
 800b4ac:	693a      	ldr	r2, [r7, #16]
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	693a      	ldr	r2, [r7, #16]
 800b4b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	685a      	ldr	r2, [r3, #4]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	697a      	ldr	r2, [r7, #20]
 800b4ca:	621a      	str	r2, [r3, #32]
}
 800b4cc:	bf00      	nop
 800b4ce:	371c      	adds	r7, #28
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr
 800b4d8:	40010000 	.word	0x40010000

0800b4dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b087      	sub	sp, #28
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6a1b      	ldr	r3, [r3, #32]
 800b4ea:	f023 0210 	bic.w	r2, r3, #16
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6a1b      	ldr	r3, [r3, #32]
 800b4f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	699b      	ldr	r3, [r3, #24]
 800b502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b50a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	021b      	lsls	r3, r3, #8
 800b51a:	68fa      	ldr	r2, [r7, #12]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	f023 0320 	bic.w	r3, r3, #32
 800b526:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	011b      	lsls	r3, r3, #4
 800b52e:	697a      	ldr	r2, [r7, #20]
 800b530:	4313      	orrs	r3, r2
 800b532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	4a1e      	ldr	r2, [pc, #120]	; (800b5b0 <TIM_OC2_SetConfig+0xd4>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d10d      	bne.n	800b558 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	011b      	lsls	r3, r3, #4
 800b54a:	697a      	ldr	r2, [r7, #20]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b556:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a15      	ldr	r2, [pc, #84]	; (800b5b0 <TIM_OC2_SetConfig+0xd4>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d113      	bne.n	800b588 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b566:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b56e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	695b      	ldr	r3, [r3, #20]
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	693a      	ldr	r2, [r7, #16]
 800b578:	4313      	orrs	r3, r2
 800b57a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	699b      	ldr	r3, [r3, #24]
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	693a      	ldr	r2, [r7, #16]
 800b584:	4313      	orrs	r3, r2
 800b586:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	693a      	ldr	r2, [r7, #16]
 800b58c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	685a      	ldr	r2, [r3, #4]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	697a      	ldr	r2, [r7, #20]
 800b5a0:	621a      	str	r2, [r3, #32]
}
 800b5a2:	bf00      	nop
 800b5a4:	371c      	adds	r7, #28
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	40010000 	.word	0x40010000

0800b5b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b087      	sub	sp, #28
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6a1b      	ldr	r3, [r3, #32]
 800b5c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a1b      	ldr	r3, [r3, #32]
 800b5ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	69db      	ldr	r3, [r3, #28]
 800b5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f023 0303 	bic.w	r3, r3, #3
 800b5ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b5fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	021b      	lsls	r3, r3, #8
 800b604:	697a      	ldr	r2, [r7, #20]
 800b606:	4313      	orrs	r3, r2
 800b608:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	4a1d      	ldr	r2, [pc, #116]	; (800b684 <TIM_OC3_SetConfig+0xd0>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d10d      	bne.n	800b62e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	021b      	lsls	r3, r3, #8
 800b620:	697a      	ldr	r2, [r7, #20]
 800b622:	4313      	orrs	r3, r2
 800b624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b62c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4a14      	ldr	r2, [pc, #80]	; (800b684 <TIM_OC3_SetConfig+0xd0>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d113      	bne.n	800b65e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b63c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	695b      	ldr	r3, [r3, #20]
 800b64a:	011b      	lsls	r3, r3, #4
 800b64c:	693a      	ldr	r2, [r7, #16]
 800b64e:	4313      	orrs	r3, r2
 800b650:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	699b      	ldr	r3, [r3, #24]
 800b656:	011b      	lsls	r3, r3, #4
 800b658:	693a      	ldr	r2, [r7, #16]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	693a      	ldr	r2, [r7, #16]
 800b662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	68fa      	ldr	r2, [r7, #12]
 800b668:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	685a      	ldr	r2, [r3, #4]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	697a      	ldr	r2, [r7, #20]
 800b676:	621a      	str	r2, [r3, #32]
}
 800b678:	bf00      	nop
 800b67a:	371c      	adds	r7, #28
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr
 800b684:	40010000 	.word	0x40010000

0800b688 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b688:	b480      	push	{r7}
 800b68a:	b087      	sub	sp, #28
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6a1b      	ldr	r3, [r3, #32]
 800b696:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6a1b      	ldr	r3, [r3, #32]
 800b6a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	69db      	ldr	r3, [r3, #28]
 800b6ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	021b      	lsls	r3, r3, #8
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	031b      	lsls	r3, r3, #12
 800b6da:	693a      	ldr	r2, [r7, #16]
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	4a10      	ldr	r2, [pc, #64]	; (800b724 <TIM_OC4_SetConfig+0x9c>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d109      	bne.n	800b6fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	695b      	ldr	r3, [r3, #20]
 800b6f4:	019b      	lsls	r3, r3, #6
 800b6f6:	697a      	ldr	r2, [r7, #20]
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	697a      	ldr	r2, [r7, #20]
 800b700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	68fa      	ldr	r2, [r7, #12]
 800b706:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	685a      	ldr	r2, [r3, #4]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	693a      	ldr	r2, [r7, #16]
 800b714:	621a      	str	r2, [r3, #32]
}
 800b716:	bf00      	nop
 800b718:	371c      	adds	r7, #28
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop
 800b724:	40010000 	.word	0x40010000

0800b728 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b728:	b480      	push	{r7}
 800b72a:	b087      	sub	sp, #28
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	60b9      	str	r1, [r7, #8]
 800b732:	607a      	str	r2, [r7, #4]
 800b734:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6a1b      	ldr	r3, [r3, #32]
 800b73a:	f023 0201 	bic.w	r2, r3, #1
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	699b      	ldr	r3, [r3, #24]
 800b746:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6a1b      	ldr	r3, [r3, #32]
 800b74c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	4a24      	ldr	r2, [pc, #144]	; (800b7e4 <TIM_TI1_SetConfig+0xbc>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d013      	beq.n	800b77e <TIM_TI1_SetConfig+0x56>
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b75c:	d00f      	beq.n	800b77e <TIM_TI1_SetConfig+0x56>
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	4a21      	ldr	r2, [pc, #132]	; (800b7e8 <TIM_TI1_SetConfig+0xc0>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d00b      	beq.n	800b77e <TIM_TI1_SetConfig+0x56>
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	4a20      	ldr	r2, [pc, #128]	; (800b7ec <TIM_TI1_SetConfig+0xc4>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d007      	beq.n	800b77e <TIM_TI1_SetConfig+0x56>
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	4a1f      	ldr	r2, [pc, #124]	; (800b7f0 <TIM_TI1_SetConfig+0xc8>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d003      	beq.n	800b77e <TIM_TI1_SetConfig+0x56>
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	4a1e      	ldr	r2, [pc, #120]	; (800b7f4 <TIM_TI1_SetConfig+0xcc>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d101      	bne.n	800b782 <TIM_TI1_SetConfig+0x5a>
 800b77e:	2301      	movs	r3, #1
 800b780:	e000      	b.n	800b784 <TIM_TI1_SetConfig+0x5c>
 800b782:	2300      	movs	r3, #0
 800b784:	2b00      	cmp	r3, #0
 800b786:	d008      	beq.n	800b79a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	f023 0303 	bic.w	r3, r3, #3
 800b78e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b790:	697a      	ldr	r2, [r7, #20]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	4313      	orrs	r3, r2
 800b796:	617b      	str	r3, [r7, #20]
 800b798:	e003      	b.n	800b7a2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	f043 0301 	orr.w	r3, r3, #1
 800b7a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b7a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	011b      	lsls	r3, r3, #4
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	697a      	ldr	r2, [r7, #20]
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	f023 030a 	bic.w	r3, r3, #10
 800b7bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	f003 030a 	and.w	r3, r3, #10
 800b7c4:	693a      	ldr	r2, [r7, #16]
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	697a      	ldr	r2, [r7, #20]
 800b7ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	693a      	ldr	r2, [r7, #16]
 800b7d4:	621a      	str	r2, [r3, #32]
}
 800b7d6:	bf00      	nop
 800b7d8:	371c      	adds	r7, #28
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop
 800b7e4:	40010000 	.word	0x40010000
 800b7e8:	40000400 	.word	0x40000400
 800b7ec:	40000800 	.word	0x40000800
 800b7f0:	40000c00 	.word	0x40000c00
 800b7f4:	40014000 	.word	0x40014000

0800b7f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b087      	sub	sp, #28
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6a1b      	ldr	r3, [r3, #32]
 800b808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	6a1b      	ldr	r3, [r3, #32]
 800b80e:	f023 0201 	bic.w	r2, r3, #1
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	011b      	lsls	r3, r3, #4
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	f023 030a 	bic.w	r3, r3, #10
 800b834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b836:	697a      	ldr	r2, [r7, #20]
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	693a      	ldr	r2, [r7, #16]
 800b842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	697a      	ldr	r2, [r7, #20]
 800b848:	621a      	str	r2, [r3, #32]
}
 800b84a:	bf00      	nop
 800b84c:	371c      	adds	r7, #28
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b856:	b480      	push	{r7}
 800b858:	b087      	sub	sp, #28
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	60f8      	str	r0, [r7, #12]
 800b85e:	60b9      	str	r1, [r7, #8]
 800b860:	607a      	str	r2, [r7, #4]
 800b862:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	6a1b      	ldr	r3, [r3, #32]
 800b868:	f023 0210 	bic.w	r2, r3, #16
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	6a1b      	ldr	r3, [r3, #32]
 800b87a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b882:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	021b      	lsls	r3, r3, #8
 800b888:	697a      	ldr	r2, [r7, #20]
 800b88a:	4313      	orrs	r3, r2
 800b88c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b894:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	031b      	lsls	r3, r3, #12
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	697a      	ldr	r2, [r7, #20]
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b8a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	011b      	lsls	r3, r3, #4
 800b8ae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b8b2:	693a      	ldr	r2, [r7, #16]
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	697a      	ldr	r2, [r7, #20]
 800b8bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	621a      	str	r2, [r3, #32]
}
 800b8c4:	bf00      	nop
 800b8c6:	371c      	adds	r7, #28
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b087      	sub	sp, #28
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6a1b      	ldr	r3, [r3, #32]
 800b8e0:	f023 0210 	bic.w	r2, r3, #16
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	699b      	ldr	r3, [r3, #24]
 800b8ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6a1b      	ldr	r3, [r3, #32]
 800b8f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b8fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	031b      	lsls	r3, r3, #12
 800b900:	697a      	ldr	r2, [r7, #20]
 800b902:	4313      	orrs	r3, r2
 800b904:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b90c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	011b      	lsls	r3, r3, #4
 800b912:	693a      	ldr	r2, [r7, #16]
 800b914:	4313      	orrs	r3, r2
 800b916:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	621a      	str	r2, [r3, #32]
}
 800b924:	bf00      	nop
 800b926:	371c      	adds	r7, #28
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b930:	b480      	push	{r7}
 800b932:	b087      	sub	sp, #28
 800b934:	af00      	add	r7, sp, #0
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	60b9      	str	r1, [r7, #8]
 800b93a:	607a      	str	r2, [r7, #4]
 800b93c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	6a1b      	ldr	r3, [r3, #32]
 800b942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	69db      	ldr	r3, [r3, #28]
 800b94e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	6a1b      	ldr	r3, [r3, #32]
 800b954:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	f023 0303 	bic.w	r3, r3, #3
 800b95c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b95e:	697a      	ldr	r2, [r7, #20]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	4313      	orrs	r3, r2
 800b964:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b96c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	011b      	lsls	r3, r3, #4
 800b972:	b2db      	uxtb	r3, r3
 800b974:	697a      	ldr	r2, [r7, #20]
 800b976:	4313      	orrs	r3, r2
 800b978:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800b980:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	021b      	lsls	r3, r3, #8
 800b986:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800b98a:	693a      	ldr	r2, [r7, #16]
 800b98c:	4313      	orrs	r3, r2
 800b98e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	697a      	ldr	r2, [r7, #20]
 800b994:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	693a      	ldr	r2, [r7, #16]
 800b99a:	621a      	str	r2, [r3, #32]
}
 800b99c:	bf00      	nop
 800b99e:	371c      	adds	r7, #28
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr

0800b9a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b087      	sub	sp, #28
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	607a      	str	r2, [r7, #4]
 800b9b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	6a1b      	ldr	r3, [r3, #32]
 800b9ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	69db      	ldr	r3, [r3, #28]
 800b9c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	6a1b      	ldr	r3, [r3, #32]
 800b9cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	021b      	lsls	r3, r3, #8
 800b9da:	697a      	ldr	r2, [r7, #20]
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b9e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	031b      	lsls	r3, r3, #12
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	697a      	ldr	r2, [r7, #20]
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800b9fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	031b      	lsls	r3, r3, #12
 800ba00:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ba04:	693a      	ldr	r2, [r7, #16]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	697a      	ldr	r2, [r7, #20]
 800ba0e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	693a      	ldr	r2, [r7, #16]
 800ba14:	621a      	str	r2, [r3, #32]
}
 800ba16:	bf00      	nop
 800ba18:	371c      	adds	r7, #28
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ba22:	b480      	push	{r7}
 800ba24:	b085      	sub	sp, #20
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
 800ba2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba3a:	683a      	ldr	r2, [r7, #0]
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	f043 0307 	orr.w	r3, r3, #7
 800ba44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	609a      	str	r2, [r3, #8]
}
 800ba4c:	bf00      	nop
 800ba4e:	3714      	adds	r7, #20
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b087      	sub	sp, #28
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	60b9      	str	r1, [r7, #8]
 800ba62:	607a      	str	r2, [r7, #4]
 800ba64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	021a      	lsls	r2, r3, #8
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	431a      	orrs	r2, r3
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	697a      	ldr	r2, [r7, #20]
 800ba82:	4313      	orrs	r3, r2
 800ba84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	697a      	ldr	r2, [r7, #20]
 800ba8a:	609a      	str	r2, [r3, #8]
}
 800ba8c:	bf00      	nop
 800ba8e:	371c      	adds	r7, #28
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b087      	sub	sp, #28
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	f003 031f 	and.w	r3, r3, #31
 800baaa:	2201      	movs	r2, #1
 800baac:	fa02 f303 	lsl.w	r3, r2, r3
 800bab0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6a1a      	ldr	r2, [r3, #32]
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	43db      	mvns	r3, r3
 800baba:	401a      	ands	r2, r3
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6a1a      	ldr	r2, [r3, #32]
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	f003 031f 	and.w	r3, r3, #31
 800baca:	6879      	ldr	r1, [r7, #4]
 800bacc:	fa01 f303 	lsl.w	r3, r1, r3
 800bad0:	431a      	orrs	r2, r3
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	621a      	str	r2, [r3, #32]
}
 800bad6:	bf00      	nop
 800bad8:	371c      	adds	r7, #28
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr
	...

0800bae4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	4a1c      	ldr	r2, [pc, #112]	; (800bb60 <TIM_ResetCallback+0x7c>)
 800baf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	4a1b      	ldr	r2, [pc, #108]	; (800bb64 <TIM_ResetCallback+0x80>)
 800baf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4a1a      	ldr	r2, [pc, #104]	; (800bb68 <TIM_ResetCallback+0x84>)
 800bb00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	4a19      	ldr	r2, [pc, #100]	; (800bb6c <TIM_ResetCallback+0x88>)
 800bb08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	4a18      	ldr	r2, [pc, #96]	; (800bb70 <TIM_ResetCallback+0x8c>)
 800bb10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	4a17      	ldr	r2, [pc, #92]	; (800bb74 <TIM_ResetCallback+0x90>)
 800bb18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	4a16      	ldr	r2, [pc, #88]	; (800bb78 <TIM_ResetCallback+0x94>)
 800bb20:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	4a15      	ldr	r2, [pc, #84]	; (800bb7c <TIM_ResetCallback+0x98>)
 800bb28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	4a14      	ldr	r2, [pc, #80]	; (800bb80 <TIM_ResetCallback+0x9c>)
 800bb30:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	4a13      	ldr	r2, [pc, #76]	; (800bb84 <TIM_ResetCallback+0xa0>)
 800bb38:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4a12      	ldr	r2, [pc, #72]	; (800bb88 <TIM_ResetCallback+0xa4>)
 800bb40:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	4a11      	ldr	r2, [pc, #68]	; (800bb8c <TIM_ResetCallback+0xa8>)
 800bb48:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4a10      	ldr	r2, [pc, #64]	; (800bb90 <TIM_ResetCallback+0xac>)
 800bb50:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800bb54:	bf00      	nop
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr
 800bb60:	0800dead 	.word	0x0800dead
 800bb64:	0800b269 	.word	0x0800b269
 800bb68:	0800b2cd 	.word	0x0800b2cd
 800bb6c:	0800b2e1 	.word	0x0800b2e1
 800bb70:	0800d489 	.word	0x0800d489
 800bb74:	0800b291 	.word	0x0800b291
 800bb78:	0800b27d 	.word	0x0800b27d
 800bb7c:	0800b2a5 	.word	0x0800b2a5
 800bb80:	0800b2b9 	.word	0x0800b2b9
 800bb84:	0800db89 	.word	0x0800db89
 800bb88:	0800bc71 	.word	0x0800bc71
 800bb8c:	0800bc85 	.word	0x0800bc85
 800bb90:	0800bc99 	.word	0x0800bc99

0800bb94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d101      	bne.n	800bbac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bba8:	2302      	movs	r3, #2
 800bbaa:	e050      	b.n	800bc4e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2202      	movs	r2, #2
 800bbb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	689b      	ldr	r3, [r3, #8]
 800bbca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	68fa      	ldr	r2, [r7, #12]
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	68fa      	ldr	r2, [r7, #12]
 800bbe4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a1c      	ldr	r2, [pc, #112]	; (800bc5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d018      	beq.n	800bc22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbf8:	d013      	beq.n	800bc22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4a18      	ldr	r2, [pc, #96]	; (800bc60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d00e      	beq.n	800bc22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4a16      	ldr	r2, [pc, #88]	; (800bc64 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d009      	beq.n	800bc22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4a15      	ldr	r2, [pc, #84]	; (800bc68 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d004      	beq.n	800bc22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a13      	ldr	r2, [pc, #76]	; (800bc6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d10c      	bne.n	800bc3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	68ba      	ldr	r2, [r7, #8]
 800bc30:	4313      	orrs	r3, r2
 800bc32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	68ba      	ldr	r2, [r7, #8]
 800bc3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc4c:	2300      	movs	r3, #0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3714      	adds	r7, #20
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop
 800bc5c:	40010000 	.word	0x40010000
 800bc60:	40000400 	.word	0x40000400
 800bc64:	40000800 	.word	0x40000800
 800bc68:	40000c00 	.word	0x40000c00
 800bc6c:	40014000 	.word	0x40014000

0800bc70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b083      	sub	sp, #12
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc78:	bf00      	nop
 800bc7a:	370c      	adds	r7, #12
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800bc8c:	bf00      	nop
 800bc8e:	370c      	adds	r7, #12
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bca0:	bf00      	nop
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d101      	bne.n	800bcbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e04a      	b.n	800bd54 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d111      	bne.n	800bcee <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2200      	movs	r2, #0
 800bcce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 fbb2 	bl	800c43c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d102      	bne.n	800bce6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a1e      	ldr	r2, [pc, #120]	; (800bd5c <HAL_UART_Init+0xb0>)
 800bce4:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2224      	movs	r2, #36	; 0x24
 800bcf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	68da      	ldr	r2, [r3, #12]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bd04:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 fdac 	bl	800c864 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	691a      	ldr	r2, [r3, #16]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bd1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	695a      	ldr	r2, [r3, #20]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	68da      	ldr	r2, [r3, #12]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bd3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2220      	movs	r2, #32
 800bd46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2220      	movs	r2, #32
 800bd4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bd52:	2300      	movs	r3, #0
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3708      	adds	r7, #8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	08005075 	.word	0x08005075

0800bd60 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d101      	bne.n	800bd72 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e029      	b.n	800bdc6 <HAL_UART_DeInit+0x66>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2224      	movs	r2, #36	; 0x24
 800bd76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	68da      	ldr	r2, [r3, #12]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bd88:	60da      	str	r2, [r3, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  if (huart->MspDeInitCallback == NULL)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d102      	bne.n	800bd98 <HAL_UART_DeInit+0x38>
  {
    huart->MspDeInitCallback = HAL_UART_MspDeInit;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	4a0e      	ldr	r2, [pc, #56]	; (800bdd0 <HAL_UART_DeInit+0x70>)
 800bd96:	671a      	str	r2, [r3, #112]	; 0x70
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	4798      	blx	r3
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	08005105 	.word	0x08005105

0800bdd4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	4613      	mov	r3, r2
 800bde0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	2b20      	cmp	r3, #32
 800bdec:	d11d      	bne.n	800be2a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d002      	beq.n	800bdfa <HAL_UART_Receive_IT+0x26>
 800bdf4:	88fb      	ldrh	r3, [r7, #6]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d101      	bne.n	800bdfe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e016      	b.n	800be2c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be04:	2b01      	cmp	r3, #1
 800be06:	d101      	bne.n	800be0c <HAL_UART_Receive_IT+0x38>
 800be08:	2302      	movs	r3, #2
 800be0a:	e00f      	b.n	800be2c <HAL_UART_Receive_IT+0x58>
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2201      	movs	r2, #1
 800be10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2200      	movs	r2, #0
 800be18:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800be1a:	88fb      	ldrh	r3, [r7, #6]
 800be1c:	461a      	mov	r2, r3
 800be1e:	68b9      	ldr	r1, [r7, #8]
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f000 fb43 	bl	800c4ac <UART_Start_Receive_IT>
 800be26:	4603      	mov	r3, r0
 800be28:	e000      	b.n	800be2c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800be2a:	2302      	movs	r3, #2
  }
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3710      	adds	r7, #16
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b0ba      	sub	sp, #232	; 0xe8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	68db      	ldr	r3, [r3, #12]
 800be4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	695b      	ldr	r3, [r3, #20]
 800be56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800be5a:	2300      	movs	r3, #0
 800be5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800be60:	2300      	movs	r3, #0
 800be62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800be66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be6a:	f003 030f 	and.w	r3, r3, #15
 800be6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800be72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be76:	2b00      	cmp	r3, #0
 800be78:	d10f      	bne.n	800be9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be7e:	f003 0320 	and.w	r3, r3, #32
 800be82:	2b00      	cmp	r3, #0
 800be84:	d009      	beq.n	800be9a <HAL_UART_IRQHandler+0x66>
 800be86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be8a:	f003 0320 	and.w	r3, r3, #32
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d003      	beq.n	800be9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 fc29 	bl	800c6ea <UART_Receive_IT>
      return;
 800be98:	e25b      	b.n	800c352 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800be9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	f000 80e1 	beq.w	800c066 <HAL_UART_IRQHandler+0x232>
 800bea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bea8:	f003 0301 	and.w	r3, r3, #1
 800beac:	2b00      	cmp	r3, #0
 800beae:	d106      	bne.n	800bebe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800beb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800beb4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f000 80d4 	beq.w	800c066 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bec2:	f003 0301 	and.w	r3, r3, #1
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d00b      	beq.n	800bee2 <HAL_UART_IRQHandler+0xae>
 800beca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d005      	beq.n	800bee2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beda:	f043 0201 	orr.w	r2, r3, #1
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bee6:	f003 0304 	and.w	r3, r3, #4
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00b      	beq.n	800bf06 <HAL_UART_IRQHandler+0xd2>
 800beee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bef2:	f003 0301 	and.w	r3, r3, #1
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d005      	beq.n	800bf06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800befe:	f043 0202 	orr.w	r2, r3, #2
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf0a:	f003 0302 	and.w	r3, r3, #2
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d00b      	beq.n	800bf2a <HAL_UART_IRQHandler+0xf6>
 800bf12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf16:	f003 0301 	and.w	r3, r3, #1
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d005      	beq.n	800bf2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf22:	f043 0204 	orr.w	r2, r3, #4
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bf2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf2e:	f003 0308 	and.w	r3, r3, #8
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d011      	beq.n	800bf5a <HAL_UART_IRQHandler+0x126>
 800bf36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf3a:	f003 0320 	and.w	r3, r3, #32
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d105      	bne.n	800bf4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bf42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf46:	f003 0301 	and.w	r3, r3, #1
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d005      	beq.n	800bf5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf52:	f043 0208 	orr.w	r2, r3, #8
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	f000 81f2 	beq.w	800c348 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bf64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf68:	f003 0320 	and.w	r3, r3, #32
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d008      	beq.n	800bf82 <HAL_UART_IRQHandler+0x14e>
 800bf70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf74:	f003 0320 	and.w	r3, r3, #32
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d002      	beq.n	800bf82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 fbb4 	bl	800c6ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	695b      	ldr	r3, [r3, #20]
 800bf88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf8c:	2b40      	cmp	r3, #64	; 0x40
 800bf8e:	bf0c      	ite	eq
 800bf90:	2301      	moveq	r3, #1
 800bf92:	2300      	movne	r3, #0
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf9e:	f003 0308 	and.w	r3, r3, #8
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d103      	bne.n	800bfae <HAL_UART_IRQHandler+0x17a>
 800bfa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d051      	beq.n	800c052 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 faba 	bl	800c528 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	695b      	ldr	r3, [r3, #20]
 800bfba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfbe:	2b40      	cmp	r3, #64	; 0x40
 800bfc0:	d142      	bne.n	800c048 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	3314      	adds	r3, #20
 800bfc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bfd0:	e853 3f00 	ldrex	r3, [r3]
 800bfd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bfd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfe0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	3314      	adds	r3, #20
 800bfea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bfee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bff2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bffa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bffe:	e841 2300 	strex	r3, r2, [r1]
 800c002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d1d9      	bne.n	800bfc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c012:	2b00      	cmp	r3, #0
 800c014:	d013      	beq.n	800c03e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c01a:	4a7f      	ldr	r2, [pc, #508]	; (800c218 <HAL_UART_IRQHandler+0x3e4>)
 800c01c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c022:	4618      	mov	r0, r3
 800c024:	f7fa fdc8 	bl	8006bb8 <HAL_DMA_Abort_IT>
 800c028:	4603      	mov	r3, r0
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d019      	beq.n	800c062 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c038:	4610      	mov	r0, r2
 800c03a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c03c:	e011      	b.n	800c062 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c046:	e00c      	b.n	800c062 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c050:	e007      	b.n	800c062 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2200      	movs	r2, #0
 800c05e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c060:	e172      	b.n	800c348 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c062:	bf00      	nop
    return;
 800c064:	e170      	b.n	800c348 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	f040 814c 	bne.w	800c308 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c074:	f003 0310 	and.w	r3, r3, #16
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f000 8145 	beq.w	800c308 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c07e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c082:	f003 0310 	and.w	r3, r3, #16
 800c086:	2b00      	cmp	r3, #0
 800c088:	f000 813e 	beq.w	800c308 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c08c:	2300      	movs	r3, #0
 800c08e:	60bb      	str	r3, [r7, #8]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	60bb      	str	r3, [r7, #8]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	60bb      	str	r3, [r7, #8]
 800c0a0:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	695b      	ldr	r3, [r3, #20]
 800c0a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0ac:	2b40      	cmp	r3, #64	; 0x40
 800c0ae:	f040 80b5 	bne.w	800c21c <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c0be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	f000 8142 	beq.w	800c34c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c0cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	f080 813b 	bcs.w	800c34c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c0dc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e2:	69db      	ldr	r3, [r3, #28]
 800c0e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0e8:	f000 8088 	beq.w	800c1fc <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	330c      	adds	r3, #12
 800c0f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c0fa:	e853 3f00 	ldrex	r3, [r3]
 800c0fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c102:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c106:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c10a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	330c      	adds	r3, #12
 800c114:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c118:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c11c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c120:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c124:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c128:	e841 2300 	strex	r3, r2, [r1]
 800c12c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c130:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c134:	2b00      	cmp	r3, #0
 800c136:	d1d9      	bne.n	800c0ec <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	3314      	adds	r3, #20
 800c13e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c142:	e853 3f00 	ldrex	r3, [r3]
 800c146:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c148:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c14a:	f023 0301 	bic.w	r3, r3, #1
 800c14e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	3314      	adds	r3, #20
 800c158:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c15c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c160:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c162:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c164:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c168:	e841 2300 	strex	r3, r2, [r1]
 800c16c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c16e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c170:	2b00      	cmp	r3, #0
 800c172:	d1e1      	bne.n	800c138 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	3314      	adds	r3, #20
 800c17a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c17c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c17e:	e853 3f00 	ldrex	r3, [r3]
 800c182:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c18a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	3314      	adds	r3, #20
 800c194:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c198:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c19a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c19c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c19e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c1a0:	e841 2300 	strex	r3, r2, [r1]
 800c1a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c1a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d1e3      	bne.n	800c174 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2220      	movs	r2, #32
 800c1b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	330c      	adds	r3, #12
 800c1c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1c4:	e853 3f00 	ldrex	r3, [r3]
 800c1c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c1ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1cc:	f023 0310 	bic.w	r3, r3, #16
 800c1d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	330c      	adds	r3, #12
 800c1da:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c1de:	65ba      	str	r2, [r7, #88]	; 0x58
 800c1e0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c1e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1e6:	e841 2300 	strex	r3, r2, [r1]
 800c1ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c1ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d1e3      	bne.n	800c1ba <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fa fc6e 	bl	8006ad8 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800c208:	b292      	uxth	r2, r2
 800c20a:	1a8a      	subs	r2, r1, r2
 800c20c:	b292      	uxth	r2, r2
 800c20e:	4611      	mov	r1, r2
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c214:	e09a      	b.n	800c34c <HAL_UART_IRQHandler+0x518>
 800c216:	bf00      	nop
 800c218:	0800c5ef 	.word	0x0800c5ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c224:	b29b      	uxth	r3, r3
 800c226:	1ad3      	subs	r3, r2, r3
 800c228:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c230:	b29b      	uxth	r3, r3
 800c232:	2b00      	cmp	r3, #0
 800c234:	f000 808c 	beq.w	800c350 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c238:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f000 8087 	beq.w	800c350 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	330c      	adds	r3, #12
 800c248:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24c:	e853 3f00 	ldrex	r3, [r3]
 800c250:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c254:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c258:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	330c      	adds	r3, #12
 800c262:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c266:	647a      	str	r2, [r7, #68]	; 0x44
 800c268:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c26a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c26c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c26e:	e841 2300 	strex	r3, r2, [r1]
 800c272:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c276:	2b00      	cmp	r3, #0
 800c278:	d1e3      	bne.n	800c242 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	3314      	adds	r3, #20
 800c280:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c284:	e853 3f00 	ldrex	r3, [r3]
 800c288:	623b      	str	r3, [r7, #32]
   return(result);
 800c28a:	6a3b      	ldr	r3, [r7, #32]
 800c28c:	f023 0301 	bic.w	r3, r3, #1
 800c290:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	3314      	adds	r3, #20
 800c29a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c29e:	633a      	str	r2, [r7, #48]	; 0x30
 800c2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2a6:	e841 2300 	strex	r3, r2, [r1]
 800c2aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d1e3      	bne.n	800c27a <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2220      	movs	r2, #32
 800c2b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	330c      	adds	r3, #12
 800c2c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	e853 3f00 	ldrex	r3, [r3]
 800c2ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f023 0310 	bic.w	r3, r3, #16
 800c2d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	330c      	adds	r3, #12
 800c2e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c2e4:	61fa      	str	r2, [r7, #28]
 800c2e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e8:	69b9      	ldr	r1, [r7, #24]
 800c2ea:	69fa      	ldr	r2, [r7, #28]
 800c2ec:	e841 2300 	strex	r3, r2, [r1]
 800c2f0:	617b      	str	r3, [r7, #20]
   return(result);
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d1e3      	bne.n	800c2c0 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2fc:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800c300:	4611      	mov	r1, r2
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c306:	e023      	b.n	800c350 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c30c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c310:	2b00      	cmp	r3, #0
 800c312:	d009      	beq.n	800c328 <HAL_UART_IRQHandler+0x4f4>
 800c314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d003      	beq.n	800c328 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f000 f979 	bl	800c618 <UART_Transmit_IT>
    return;
 800c326:	e014      	b.n	800c352 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c32c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00e      	beq.n	800c352 <HAL_UART_IRQHandler+0x51e>
 800c334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d008      	beq.n	800c352 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 f9b9 	bl	800c6b8 <UART_EndTransmit_IT>
    return;
 800c346:	e004      	b.n	800c352 <HAL_UART_IRQHandler+0x51e>
    return;
 800c348:	bf00      	nop
 800c34a:	e002      	b.n	800c352 <HAL_UART_IRQHandler+0x51e>
      return;
 800c34c:	bf00      	nop
 800c34e:	e000      	b.n	800c352 <HAL_UART_IRQHandler+0x51e>
      return;
 800c350:	bf00      	nop
  }
}
 800c352:	37e8      	adds	r7, #232	; 0xe8
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c358:	b480      	push	{r7}
 800c35a:	b083      	sub	sp, #12
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c360:	bf00      	nop
 800c362:	370c      	adds	r7, #12
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr

0800c36c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c374:	bf00      	nop
 800c376:	370c      	adds	r7, #12
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr

0800c380 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c39c:	bf00      	nop
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800c3b0:	bf00      	nop
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c3c4:	bf00      	nop
 800c3c6:	370c      	adds	r7, #12
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	460b      	mov	r3, r1
 800c3da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c3dc:	bf00      	nop
 800c3de:	370c      	adds	r7, #12
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr

0800c3e8 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b085      	sub	sp, #20
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	60fb      	str	r3, [r7, #12]
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	b2da      	uxtb	r2, r3
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	b2db      	uxtb	r3, r3
 800c414:	4313      	orrs	r3, r2
 800c416:	b2db      	uxtb	r3, r3
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3714      	adds	r7, #20
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800c430:	4618      	mov	r0, r3
 800c432:	370c      	adds	r7, #12
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr

0800c43c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	4a10      	ldr	r2, [pc, #64]	; (800c488 <UART_InitCallbacksToDefault+0x4c>)
 800c448:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	4a0f      	ldr	r2, [pc, #60]	; (800c48c <UART_InitCallbacksToDefault+0x50>)
 800c44e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	4a0f      	ldr	r2, [pc, #60]	; (800c490 <UART_InitCallbacksToDefault+0x54>)
 800c454:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	4a0e      	ldr	r2, [pc, #56]	; (800c494 <UART_InitCallbacksToDefault+0x58>)
 800c45a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	4a0e      	ldr	r2, [pc, #56]	; (800c498 <UART_InitCallbacksToDefault+0x5c>)
 800c460:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	4a0d      	ldr	r2, [pc, #52]	; (800c49c <UART_InitCallbacksToDefault+0x60>)
 800c466:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	4a0d      	ldr	r2, [pc, #52]	; (800c4a0 <UART_InitCallbacksToDefault+0x64>)
 800c46c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4a0c      	ldr	r2, [pc, #48]	; (800c4a4 <UART_InitCallbacksToDefault+0x68>)
 800c472:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	4a0c      	ldr	r2, [pc, #48]	; (800c4a8 <UART_InitCallbacksToDefault+0x6c>)
 800c478:	669a      	str	r2, [r3, #104]	; 0x68

}
 800c47a:	bf00      	nop
 800c47c:	370c      	adds	r7, #12
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr
 800c486:	bf00      	nop
 800c488:	0800c36d 	.word	0x0800c36d
 800c48c:	0800c359 	.word	0x0800c359
 800c490:	0800c381 	.word	0x0800c381
 800c494:	08003b5d 	.word	0x08003b5d
 800c498:	08003aa9 	.word	0x08003aa9
 800c49c:	0800c395 	.word	0x0800c395
 800c4a0:	0800c3a9 	.word	0x0800c3a9
 800c4a4:	0800c3bd 	.word	0x0800c3bd
 800c4a8:	0800c3d1 	.word	0x0800c3d1

0800c4ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b085      	sub	sp, #20
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	68ba      	ldr	r2, [r7, #8]
 800c4be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	88fa      	ldrh	r2, [r7, #6]
 800c4c4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	88fa      	ldrh	r2, [r7, #6]
 800c4ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2222      	movs	r2, #34	; 0x22
 800c4d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d007      	beq.n	800c4fa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	68da      	ldr	r2, [r3, #12]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c4f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	695a      	ldr	r2, [r3, #20]
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f042 0201 	orr.w	r2, r2, #1
 800c508:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	68da      	ldr	r2, [r3, #12]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f042 0220 	orr.w	r2, r2, #32
 800c518:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3714      	adds	r7, #20
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr

0800c528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c528:	b480      	push	{r7}
 800c52a:	b095      	sub	sp, #84	; 0x54
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	330c      	adds	r3, #12
 800c536:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c53a:	e853 3f00 	ldrex	r3, [r3]
 800c53e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c542:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c546:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	330c      	adds	r3, #12
 800c54e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c550:	643a      	str	r2, [r7, #64]	; 0x40
 800c552:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c554:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c556:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c558:	e841 2300 	strex	r3, r2, [r1]
 800c55c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c560:	2b00      	cmp	r3, #0
 800c562:	d1e5      	bne.n	800c530 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	3314      	adds	r3, #20
 800c56a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c56c:	6a3b      	ldr	r3, [r7, #32]
 800c56e:	e853 3f00 	ldrex	r3, [r3]
 800c572:	61fb      	str	r3, [r7, #28]
   return(result);
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	f023 0301 	bic.w	r3, r3, #1
 800c57a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	3314      	adds	r3, #20
 800c582:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c584:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c586:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c588:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c58a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c58c:	e841 2300 	strex	r3, r2, [r1]
 800c590:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c594:	2b00      	cmp	r3, #0
 800c596:	d1e5      	bne.n	800c564 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d119      	bne.n	800c5d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	330c      	adds	r3, #12
 800c5a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	e853 3f00 	ldrex	r3, [r3]
 800c5ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	f023 0310 	bic.w	r3, r3, #16
 800c5b6:	647b      	str	r3, [r7, #68]	; 0x44
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	330c      	adds	r3, #12
 800c5be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5c0:	61ba      	str	r2, [r7, #24]
 800c5c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c4:	6979      	ldr	r1, [r7, #20]
 800c5c6:	69ba      	ldr	r2, [r7, #24]
 800c5c8:	e841 2300 	strex	r3, r2, [r1]
 800c5cc:	613b      	str	r3, [r7, #16]
   return(result);
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d1e5      	bne.n	800c5a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2220      	movs	r2, #32
 800c5d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c5e2:	bf00      	nop
 800c5e4:	3754      	adds	r7, #84	; 0x54
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr

0800c5ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b084      	sub	sp, #16
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2200      	movs	r2, #0
 800c600:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2200      	movs	r2, #0
 800c606:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c60c:	68f8      	ldr	r0, [r7, #12]
 800c60e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c610:	bf00      	nop
 800c612:	3710      	adds	r7, #16
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c618:	b480      	push	{r7}
 800c61a:	b085      	sub	sp, #20
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c626:	b2db      	uxtb	r3, r3
 800c628:	2b21      	cmp	r3, #33	; 0x21
 800c62a:	d13e      	bne.n	800c6aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c634:	d114      	bne.n	800c660 <UART_Transmit_IT+0x48>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	691b      	ldr	r3, [r3, #16]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d110      	bne.n	800c660 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6a1b      	ldr	r3, [r3, #32]
 800c642:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	881b      	ldrh	r3, [r3, #0]
 800c648:	461a      	mov	r2, r3
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c652:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6a1b      	ldr	r3, [r3, #32]
 800c658:	1c9a      	adds	r2, r3, #2
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	621a      	str	r2, [r3, #32]
 800c65e:	e008      	b.n	800c672 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6a1b      	ldr	r3, [r3, #32]
 800c664:	1c59      	adds	r1, r3, #1
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	6211      	str	r1, [r2, #32]
 800c66a:	781a      	ldrb	r2, [r3, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c676:	b29b      	uxth	r3, r3
 800c678:	3b01      	subs	r3, #1
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	4619      	mov	r1, r3
 800c680:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c682:	2b00      	cmp	r3, #0
 800c684:	d10f      	bne.n	800c6a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	68da      	ldr	r2, [r3, #12]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c694:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	68da      	ldr	r2, [r3, #12]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c6a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	e000      	b.n	800c6ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c6aa:	2302      	movs	r3, #2
  }
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3714      	adds	r7, #20
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr

0800c6b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	68da      	ldr	r2, [r3, #12]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c6ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2220      	movs	r2, #32
 800c6d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c6e0:	2300      	movs	r3, #0
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b08c      	sub	sp, #48	; 0x30
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c6f8:	b2db      	uxtb	r3, r3
 800c6fa:	2b22      	cmp	r3, #34	; 0x22
 800c6fc:	f040 80ad 	bne.w	800c85a <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	689b      	ldr	r3, [r3, #8]
 800c704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c708:	d117      	bne.n	800c73a <UART_Receive_IT+0x50>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	691b      	ldr	r3, [r3, #16]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d113      	bne.n	800c73a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c712:	2300      	movs	r3, #0
 800c714:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c71a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	b29b      	uxth	r3, r3
 800c724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c728:	b29a      	uxth	r2, r3
 800c72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c732:	1c9a      	adds	r2, r3, #2
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	629a      	str	r2, [r3, #40]	; 0x28
 800c738:	e026      	b.n	800c788 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c73e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c740:	2300      	movs	r3, #0
 800c742:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	689b      	ldr	r3, [r3, #8]
 800c748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c74c:	d007      	beq.n	800c75e <UART_Receive_IT+0x74>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	689b      	ldr	r3, [r3, #8]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d10a      	bne.n	800c76c <UART_Receive_IT+0x82>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	691b      	ldr	r3, [r3, #16]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d106      	bne.n	800c76c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	b2da      	uxtb	r2, r3
 800c766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c768:	701a      	strb	r2, [r3, #0]
 800c76a:	e008      	b.n	800c77e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	b2db      	uxtb	r3, r3
 800c774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c778:	b2da      	uxtb	r2, r3
 800c77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c782:	1c5a      	adds	r2, r3, #1
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	3b01      	subs	r3, #1
 800c790:	b29b      	uxth	r3, r3
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	4619      	mov	r1, r3
 800c796:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d15c      	bne.n	800c856 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	68da      	ldr	r2, [r3, #12]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f022 0220 	bic.w	r2, r2, #32
 800c7aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	68da      	ldr	r2, [r3, #12]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c7ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	695a      	ldr	r2, [r3, #20]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f022 0201 	bic.w	r2, r2, #1
 800c7ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2220      	movs	r2, #32
 800c7d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d136      	bne.n	800c84a <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	330c      	adds	r3, #12
 800c7e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	e853 3f00 	ldrex	r3, [r3]
 800c7f0:	613b      	str	r3, [r7, #16]
   return(result);
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	f023 0310 	bic.w	r3, r3, #16
 800c7f8:	627b      	str	r3, [r7, #36]	; 0x24
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	330c      	adds	r3, #12
 800c800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c802:	623a      	str	r2, [r7, #32]
 800c804:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c806:	69f9      	ldr	r1, [r7, #28]
 800c808:	6a3a      	ldr	r2, [r7, #32]
 800c80a:	e841 2300 	strex	r3, r2, [r1]
 800c80e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c810:	69bb      	ldr	r3, [r7, #24]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d1e5      	bne.n	800c7e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f003 0310 	and.w	r3, r3, #16
 800c820:	2b10      	cmp	r3, #16
 800c822:	d10a      	bne.n	800c83a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c824:	2300      	movs	r3, #0
 800c826:	60fb      	str	r3, [r7, #12]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	60fb      	str	r3, [r7, #12]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	60fb      	str	r3, [r7, #12]
 800c838:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800c842:	4611      	mov	r1, r2
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	4798      	blx	r3
 800c848:	e003      	b.n	800c852 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c852:	2300      	movs	r3, #0
 800c854:	e002      	b.n	800c85c <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800c856:	2300      	movs	r3, #0
 800c858:	e000      	b.n	800c85c <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800c85a:	2302      	movs	r3, #2
  }
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3730      	adds	r7, #48	; 0x30
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c868:	b0c0      	sub	sp, #256	; 0x100
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	691b      	ldr	r3, [r3, #16]
 800c878:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c87c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c880:	68d9      	ldr	r1, [r3, #12]
 800c882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	ea40 0301 	orr.w	r3, r0, r1
 800c88c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c88e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c892:	689a      	ldr	r2, [r3, #8]
 800c894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c898:	691b      	ldr	r3, [r3, #16]
 800c89a:	431a      	orrs	r2, r3
 800c89c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8a0:	695b      	ldr	r3, [r3, #20]
 800c8a2:	431a      	orrs	r2, r3
 800c8a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8a8:	69db      	ldr	r3, [r3, #28]
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c8b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c8bc:	f021 010c 	bic.w	r1, r1, #12
 800c8c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8c4:	681a      	ldr	r2, [r3, #0]
 800c8c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c8ca:	430b      	orrs	r3, r1
 800c8cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c8ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	695b      	ldr	r3, [r3, #20]
 800c8d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c8da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8de:	6999      	ldr	r1, [r3, #24]
 800c8e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	ea40 0301 	orr.w	r3, r0, r1
 800c8ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c8ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	4b8f      	ldr	r3, [pc, #572]	; (800cb30 <UART_SetConfig+0x2cc>)
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d005      	beq.n	800c904 <UART_SetConfig+0xa0>
 800c8f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	4b8d      	ldr	r3, [pc, #564]	; (800cb34 <UART_SetConfig+0x2d0>)
 800c900:	429a      	cmp	r2, r3
 800c902:	d104      	bne.n	800c90e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c904:	f7fd fc84 	bl	800a210 <HAL_RCC_GetPCLK2Freq>
 800c908:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c90c:	e003      	b.n	800c916 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c90e:	f7fd fc6b 	bl	800a1e8 <HAL_RCC_GetPCLK1Freq>
 800c912:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c91a:	69db      	ldr	r3, [r3, #28]
 800c91c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c920:	f040 810c 	bne.w	800cb3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c928:	2200      	movs	r2, #0
 800c92a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c92e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c932:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c936:	4622      	mov	r2, r4
 800c938:	462b      	mov	r3, r5
 800c93a:	1891      	adds	r1, r2, r2
 800c93c:	65b9      	str	r1, [r7, #88]	; 0x58
 800c93e:	415b      	adcs	r3, r3
 800c940:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c942:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c946:	4621      	mov	r1, r4
 800c948:	eb12 0801 	adds.w	r8, r2, r1
 800c94c:	4629      	mov	r1, r5
 800c94e:	eb43 0901 	adc.w	r9, r3, r1
 800c952:	f04f 0200 	mov.w	r2, #0
 800c956:	f04f 0300 	mov.w	r3, #0
 800c95a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c95e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c966:	4690      	mov	r8, r2
 800c968:	4699      	mov	r9, r3
 800c96a:	4623      	mov	r3, r4
 800c96c:	eb18 0303 	adds.w	r3, r8, r3
 800c970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c974:	462b      	mov	r3, r5
 800c976:	eb49 0303 	adc.w	r3, r9, r3
 800c97a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c97e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	2200      	movs	r2, #0
 800c986:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c98a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c98e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c992:	460b      	mov	r3, r1
 800c994:	18db      	adds	r3, r3, r3
 800c996:	653b      	str	r3, [r7, #80]	; 0x50
 800c998:	4613      	mov	r3, r2
 800c99a:	eb42 0303 	adc.w	r3, r2, r3
 800c99e:	657b      	str	r3, [r7, #84]	; 0x54
 800c9a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c9a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c9a8:	f7f4 f858 	bl	8000a5c <__aeabi_uldivmod>
 800c9ac:	4602      	mov	r2, r0
 800c9ae:	460b      	mov	r3, r1
 800c9b0:	4b61      	ldr	r3, [pc, #388]	; (800cb38 <UART_SetConfig+0x2d4>)
 800c9b2:	fba3 2302 	umull	r2, r3, r3, r2
 800c9b6:	095b      	lsrs	r3, r3, #5
 800c9b8:	011c      	lsls	r4, r3, #4
 800c9ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c9c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c9c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c9cc:	4642      	mov	r2, r8
 800c9ce:	464b      	mov	r3, r9
 800c9d0:	1891      	adds	r1, r2, r2
 800c9d2:	64b9      	str	r1, [r7, #72]	; 0x48
 800c9d4:	415b      	adcs	r3, r3
 800c9d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c9d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c9dc:	4641      	mov	r1, r8
 800c9de:	eb12 0a01 	adds.w	sl, r2, r1
 800c9e2:	4649      	mov	r1, r9
 800c9e4:	eb43 0b01 	adc.w	fp, r3, r1
 800c9e8:	f04f 0200 	mov.w	r2, #0
 800c9ec:	f04f 0300 	mov.w	r3, #0
 800c9f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c9f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c9f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c9fc:	4692      	mov	sl, r2
 800c9fe:	469b      	mov	fp, r3
 800ca00:	4643      	mov	r3, r8
 800ca02:	eb1a 0303 	adds.w	r3, sl, r3
 800ca06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ca0a:	464b      	mov	r3, r9
 800ca0c:	eb4b 0303 	adc.w	r3, fp, r3
 800ca10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ca14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ca20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ca24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ca28:	460b      	mov	r3, r1
 800ca2a:	18db      	adds	r3, r3, r3
 800ca2c:	643b      	str	r3, [r7, #64]	; 0x40
 800ca2e:	4613      	mov	r3, r2
 800ca30:	eb42 0303 	adc.w	r3, r2, r3
 800ca34:	647b      	str	r3, [r7, #68]	; 0x44
 800ca36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ca3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ca3e:	f7f4 f80d 	bl	8000a5c <__aeabi_uldivmod>
 800ca42:	4602      	mov	r2, r0
 800ca44:	460b      	mov	r3, r1
 800ca46:	4611      	mov	r1, r2
 800ca48:	4b3b      	ldr	r3, [pc, #236]	; (800cb38 <UART_SetConfig+0x2d4>)
 800ca4a:	fba3 2301 	umull	r2, r3, r3, r1
 800ca4e:	095b      	lsrs	r3, r3, #5
 800ca50:	2264      	movs	r2, #100	; 0x64
 800ca52:	fb02 f303 	mul.w	r3, r2, r3
 800ca56:	1acb      	subs	r3, r1, r3
 800ca58:	00db      	lsls	r3, r3, #3
 800ca5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ca5e:	4b36      	ldr	r3, [pc, #216]	; (800cb38 <UART_SetConfig+0x2d4>)
 800ca60:	fba3 2302 	umull	r2, r3, r3, r2
 800ca64:	095b      	lsrs	r3, r3, #5
 800ca66:	005b      	lsls	r3, r3, #1
 800ca68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ca6c:	441c      	add	r4, r3
 800ca6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca72:	2200      	movs	r2, #0
 800ca74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ca78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ca7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ca80:	4642      	mov	r2, r8
 800ca82:	464b      	mov	r3, r9
 800ca84:	1891      	adds	r1, r2, r2
 800ca86:	63b9      	str	r1, [r7, #56]	; 0x38
 800ca88:	415b      	adcs	r3, r3
 800ca8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ca90:	4641      	mov	r1, r8
 800ca92:	1851      	adds	r1, r2, r1
 800ca94:	6339      	str	r1, [r7, #48]	; 0x30
 800ca96:	4649      	mov	r1, r9
 800ca98:	414b      	adcs	r3, r1
 800ca9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ca9c:	f04f 0200 	mov.w	r2, #0
 800caa0:	f04f 0300 	mov.w	r3, #0
 800caa4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800caa8:	4659      	mov	r1, fp
 800caaa:	00cb      	lsls	r3, r1, #3
 800caac:	4651      	mov	r1, sl
 800caae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cab2:	4651      	mov	r1, sl
 800cab4:	00ca      	lsls	r2, r1, #3
 800cab6:	4610      	mov	r0, r2
 800cab8:	4619      	mov	r1, r3
 800caba:	4603      	mov	r3, r0
 800cabc:	4642      	mov	r2, r8
 800cabe:	189b      	adds	r3, r3, r2
 800cac0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cac4:	464b      	mov	r3, r9
 800cac6:	460a      	mov	r2, r1
 800cac8:	eb42 0303 	adc.w	r3, r2, r3
 800cacc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cadc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cae0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cae4:	460b      	mov	r3, r1
 800cae6:	18db      	adds	r3, r3, r3
 800cae8:	62bb      	str	r3, [r7, #40]	; 0x28
 800caea:	4613      	mov	r3, r2
 800caec:	eb42 0303 	adc.w	r3, r2, r3
 800caf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800caf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800caf6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cafa:	f7f3 ffaf 	bl	8000a5c <__aeabi_uldivmod>
 800cafe:	4602      	mov	r2, r0
 800cb00:	460b      	mov	r3, r1
 800cb02:	4b0d      	ldr	r3, [pc, #52]	; (800cb38 <UART_SetConfig+0x2d4>)
 800cb04:	fba3 1302 	umull	r1, r3, r3, r2
 800cb08:	095b      	lsrs	r3, r3, #5
 800cb0a:	2164      	movs	r1, #100	; 0x64
 800cb0c:	fb01 f303 	mul.w	r3, r1, r3
 800cb10:	1ad3      	subs	r3, r2, r3
 800cb12:	00db      	lsls	r3, r3, #3
 800cb14:	3332      	adds	r3, #50	; 0x32
 800cb16:	4a08      	ldr	r2, [pc, #32]	; (800cb38 <UART_SetConfig+0x2d4>)
 800cb18:	fba2 2303 	umull	r2, r3, r2, r3
 800cb1c:	095b      	lsrs	r3, r3, #5
 800cb1e:	f003 0207 	and.w	r2, r3, #7
 800cb22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4422      	add	r2, r4
 800cb2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cb2c:	e105      	b.n	800cd3a <UART_SetConfig+0x4d6>
 800cb2e:	bf00      	nop
 800cb30:	40011000 	.word	0x40011000
 800cb34:	40011400 	.word	0x40011400
 800cb38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cb3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb40:	2200      	movs	r2, #0
 800cb42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cb46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800cb4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800cb4e:	4642      	mov	r2, r8
 800cb50:	464b      	mov	r3, r9
 800cb52:	1891      	adds	r1, r2, r2
 800cb54:	6239      	str	r1, [r7, #32]
 800cb56:	415b      	adcs	r3, r3
 800cb58:	627b      	str	r3, [r7, #36]	; 0x24
 800cb5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cb5e:	4641      	mov	r1, r8
 800cb60:	1854      	adds	r4, r2, r1
 800cb62:	4649      	mov	r1, r9
 800cb64:	eb43 0501 	adc.w	r5, r3, r1
 800cb68:	f04f 0200 	mov.w	r2, #0
 800cb6c:	f04f 0300 	mov.w	r3, #0
 800cb70:	00eb      	lsls	r3, r5, #3
 800cb72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cb76:	00e2      	lsls	r2, r4, #3
 800cb78:	4614      	mov	r4, r2
 800cb7a:	461d      	mov	r5, r3
 800cb7c:	4643      	mov	r3, r8
 800cb7e:	18e3      	adds	r3, r4, r3
 800cb80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cb84:	464b      	mov	r3, r9
 800cb86:	eb45 0303 	adc.w	r3, r5, r3
 800cb8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cb8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cb9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cb9e:	f04f 0200 	mov.w	r2, #0
 800cba2:	f04f 0300 	mov.w	r3, #0
 800cba6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cbaa:	4629      	mov	r1, r5
 800cbac:	008b      	lsls	r3, r1, #2
 800cbae:	4621      	mov	r1, r4
 800cbb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cbb4:	4621      	mov	r1, r4
 800cbb6:	008a      	lsls	r2, r1, #2
 800cbb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cbbc:	f7f3 ff4e 	bl	8000a5c <__aeabi_uldivmod>
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	4b60      	ldr	r3, [pc, #384]	; (800cd48 <UART_SetConfig+0x4e4>)
 800cbc6:	fba3 2302 	umull	r2, r3, r3, r2
 800cbca:	095b      	lsrs	r3, r3, #5
 800cbcc:	011c      	lsls	r4, r3, #4
 800cbce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cbd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cbdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cbe0:	4642      	mov	r2, r8
 800cbe2:	464b      	mov	r3, r9
 800cbe4:	1891      	adds	r1, r2, r2
 800cbe6:	61b9      	str	r1, [r7, #24]
 800cbe8:	415b      	adcs	r3, r3
 800cbea:	61fb      	str	r3, [r7, #28]
 800cbec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cbf0:	4641      	mov	r1, r8
 800cbf2:	1851      	adds	r1, r2, r1
 800cbf4:	6139      	str	r1, [r7, #16]
 800cbf6:	4649      	mov	r1, r9
 800cbf8:	414b      	adcs	r3, r1
 800cbfa:	617b      	str	r3, [r7, #20]
 800cbfc:	f04f 0200 	mov.w	r2, #0
 800cc00:	f04f 0300 	mov.w	r3, #0
 800cc04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cc08:	4659      	mov	r1, fp
 800cc0a:	00cb      	lsls	r3, r1, #3
 800cc0c:	4651      	mov	r1, sl
 800cc0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cc12:	4651      	mov	r1, sl
 800cc14:	00ca      	lsls	r2, r1, #3
 800cc16:	4610      	mov	r0, r2
 800cc18:	4619      	mov	r1, r3
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	4642      	mov	r2, r8
 800cc1e:	189b      	adds	r3, r3, r2
 800cc20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cc24:	464b      	mov	r3, r9
 800cc26:	460a      	mov	r2, r1
 800cc28:	eb42 0303 	adc.w	r3, r2, r3
 800cc2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cc30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	67bb      	str	r3, [r7, #120]	; 0x78
 800cc3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cc3c:	f04f 0200 	mov.w	r2, #0
 800cc40:	f04f 0300 	mov.w	r3, #0
 800cc44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cc48:	4649      	mov	r1, r9
 800cc4a:	008b      	lsls	r3, r1, #2
 800cc4c:	4641      	mov	r1, r8
 800cc4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cc52:	4641      	mov	r1, r8
 800cc54:	008a      	lsls	r2, r1, #2
 800cc56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cc5a:	f7f3 feff 	bl	8000a5c <__aeabi_uldivmod>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	460b      	mov	r3, r1
 800cc62:	4b39      	ldr	r3, [pc, #228]	; (800cd48 <UART_SetConfig+0x4e4>)
 800cc64:	fba3 1302 	umull	r1, r3, r3, r2
 800cc68:	095b      	lsrs	r3, r3, #5
 800cc6a:	2164      	movs	r1, #100	; 0x64
 800cc6c:	fb01 f303 	mul.w	r3, r1, r3
 800cc70:	1ad3      	subs	r3, r2, r3
 800cc72:	011b      	lsls	r3, r3, #4
 800cc74:	3332      	adds	r3, #50	; 0x32
 800cc76:	4a34      	ldr	r2, [pc, #208]	; (800cd48 <UART_SetConfig+0x4e4>)
 800cc78:	fba2 2303 	umull	r2, r3, r2, r3
 800cc7c:	095b      	lsrs	r3, r3, #5
 800cc7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc82:	441c      	add	r4, r3
 800cc84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc88:	2200      	movs	r2, #0
 800cc8a:	673b      	str	r3, [r7, #112]	; 0x70
 800cc8c:	677a      	str	r2, [r7, #116]	; 0x74
 800cc8e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cc92:	4642      	mov	r2, r8
 800cc94:	464b      	mov	r3, r9
 800cc96:	1891      	adds	r1, r2, r2
 800cc98:	60b9      	str	r1, [r7, #8]
 800cc9a:	415b      	adcs	r3, r3
 800cc9c:	60fb      	str	r3, [r7, #12]
 800cc9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cca2:	4641      	mov	r1, r8
 800cca4:	1851      	adds	r1, r2, r1
 800cca6:	6039      	str	r1, [r7, #0]
 800cca8:	4649      	mov	r1, r9
 800ccaa:	414b      	adcs	r3, r1
 800ccac:	607b      	str	r3, [r7, #4]
 800ccae:	f04f 0200 	mov.w	r2, #0
 800ccb2:	f04f 0300 	mov.w	r3, #0
 800ccb6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ccba:	4659      	mov	r1, fp
 800ccbc:	00cb      	lsls	r3, r1, #3
 800ccbe:	4651      	mov	r1, sl
 800ccc0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ccc4:	4651      	mov	r1, sl
 800ccc6:	00ca      	lsls	r2, r1, #3
 800ccc8:	4610      	mov	r0, r2
 800ccca:	4619      	mov	r1, r3
 800cccc:	4603      	mov	r3, r0
 800ccce:	4642      	mov	r2, r8
 800ccd0:	189b      	adds	r3, r3, r2
 800ccd2:	66bb      	str	r3, [r7, #104]	; 0x68
 800ccd4:	464b      	mov	r3, r9
 800ccd6:	460a      	mov	r2, r1
 800ccd8:	eb42 0303 	adc.w	r3, r2, r3
 800ccdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ccde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	2200      	movs	r2, #0
 800cce6:	663b      	str	r3, [r7, #96]	; 0x60
 800cce8:	667a      	str	r2, [r7, #100]	; 0x64
 800ccea:	f04f 0200 	mov.w	r2, #0
 800ccee:	f04f 0300 	mov.w	r3, #0
 800ccf2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ccf6:	4649      	mov	r1, r9
 800ccf8:	008b      	lsls	r3, r1, #2
 800ccfa:	4641      	mov	r1, r8
 800ccfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cd00:	4641      	mov	r1, r8
 800cd02:	008a      	lsls	r2, r1, #2
 800cd04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cd08:	f7f3 fea8 	bl	8000a5c <__aeabi_uldivmod>
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	460b      	mov	r3, r1
 800cd10:	4b0d      	ldr	r3, [pc, #52]	; (800cd48 <UART_SetConfig+0x4e4>)
 800cd12:	fba3 1302 	umull	r1, r3, r3, r2
 800cd16:	095b      	lsrs	r3, r3, #5
 800cd18:	2164      	movs	r1, #100	; 0x64
 800cd1a:	fb01 f303 	mul.w	r3, r1, r3
 800cd1e:	1ad3      	subs	r3, r2, r3
 800cd20:	011b      	lsls	r3, r3, #4
 800cd22:	3332      	adds	r3, #50	; 0x32
 800cd24:	4a08      	ldr	r2, [pc, #32]	; (800cd48 <UART_SetConfig+0x4e4>)
 800cd26:	fba2 2303 	umull	r2, r3, r2, r3
 800cd2a:	095b      	lsrs	r3, r3, #5
 800cd2c:	f003 020f 	and.w	r2, r3, #15
 800cd30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4422      	add	r2, r4
 800cd38:	609a      	str	r2, [r3, #8]
}
 800cd3a:	bf00      	nop
 800cd3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cd40:	46bd      	mov	sp, r7
 800cd42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cd46:	bf00      	nop
 800cd48:	51eb851f 	.word	0x51eb851f

0800cd4c <HAL_ADC_ConvCpltCallback>:
* Function: HAL_ADC_ConvCpltCallback										   	   *
* Description: Conversion callback to process conversion complete in the 		   *
* 			   peripheral.														   *
************************************************************************************/
VOID HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
	if(Rte_P_Os_OsPort_Os_Counter % 200 == 0)
 800cd54:	4b09      	ldr	r3, [pc, #36]	; (800cd7c <HAL_ADC_ConvCpltCallback+0x30>)
 800cd56:	681a      	ldr	r2, [r3, #0]
 800cd58:	4b09      	ldr	r3, [pc, #36]	; (800cd80 <HAL_ADC_ConvCpltCallback+0x34>)
 800cd5a:	fba3 1302 	umull	r1, r3, r3, r2
 800cd5e:	099b      	lsrs	r3, r3, #6
 800cd60:	21c8      	movs	r1, #200	; 0xc8
 800cd62:	fb01 f303 	mul.w	r3, r1, r3
 800cd66:	1ad3      	subs	r3, r2, r3
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d102      	bne.n	800cd72 <HAL_ADC_ConvCpltCallback+0x26>
	{
		Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues(Adc_ChannelOne_Buffer);
 800cd6c:	4805      	ldr	r0, [pc, #20]	; (800cd84 <HAL_ADC_ConvCpltCallback+0x38>)
 800cd6e:	f004 fabd 	bl	80112ec <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues>
	}
	else
	{
		/* do nothing */
	}
}
 800cd72:	bf00      	nop
 800cd74:	3708      	adds	r7, #8
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	20000268 	.word	0x20000268
 800cd80:	51eb851f 	.word	0x51eb851f
 800cd84:	2000087c 	.word	0x2000087c

0800cd88 <HAL_ADC_ErrorCallback>:
/***********************************************************************************
* Function: HAL_ADC_ErrorCallback										   		   *
* Description: Error callback to process fault in the peripheral.		 		   *
************************************************************************************/
VOID HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b084      	sub	sp, #16
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
	/* Local variable to store error status. */
	uint32 receivedStatus = HAL_ADC_GetError(&hadc1);
 800cd90:	481b      	ldr	r0, [pc, #108]	; (800ce00 <HAL_ADC_ErrorCallback+0x78>)
 800cd92:	f7f9 f96d 	bl	8006070 <HAL_ADC_GetError>
 800cd96:	60f8      	str	r0, [r7, #12]
	/* Process error status.
	 * Perform re-initialization on each error to prevent faults in the peripheral. */
	switch(receivedStatus)
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2b04      	cmp	r3, #4
 800cd9c:	d82a      	bhi.n	800cdf4 <HAL_ADC_ErrorCallback+0x6c>
 800cd9e:	a201      	add	r2, pc, #4	; (adr r2, 800cda4 <HAL_ADC_ErrorCallback+0x1c>)
 800cda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cda4:	0800cdf5 	.word	0x0800cdf5
 800cda8:	0800cdb9 	.word	0x0800cdb9
 800cdac:	0800cdcd 	.word	0x0800cdcd
 800cdb0:	0800cdf5 	.word	0x0800cdf5
 800cdb4:	0800cde1 	.word	0x0800cde1
	{
		case HAL_ADC_ERROR_NONE:
			/* do nothing */
			break;
		case HAL_ADC_ERROR_INTERNAL:
			SystemManager_Fault[ADC_ERROR_INTERNAL]++;
 800cdb8:	4b12      	ldr	r3, [pc, #72]	; (800ce04 <HAL_ADC_ErrorCallback+0x7c>)
 800cdba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	4a11      	ldr	r2, [pc, #68]	; (800ce04 <HAL_ADC_ErrorCallback+0x7c>)
 800cdc0:	6393      	str	r3, [r2, #56]	; 0x38
			Adc_DeInit();
 800cdc2:	f000 f897 	bl	800cef4 <Adc_DeInit>
			Adc_Init();
 800cdc6:	f000 f89f 	bl	800cf08 <Adc_Init>
			break;
 800cdca:	e014      	b.n	800cdf6 <HAL_ADC_ErrorCallback+0x6e>
		case HAL_ADC_ERROR_OVR:
			SystemManager_Fault[ADC_ERROR_OVR]++;
 800cdcc:	4b0d      	ldr	r3, [pc, #52]	; (800ce04 <HAL_ADC_ErrorCallback+0x7c>)
 800cdce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	4a0c      	ldr	r2, [pc, #48]	; (800ce04 <HAL_ADC_ErrorCallback+0x7c>)
 800cdd4:	63d3      	str	r3, [r2, #60]	; 0x3c
			Adc_DeInit();
 800cdd6:	f000 f88d 	bl	800cef4 <Adc_DeInit>
			Adc_Init();
 800cdda:	f000 f895 	bl	800cf08 <Adc_Init>
			break;
 800cdde:	e00a      	b.n	800cdf6 <HAL_ADC_ErrorCallback+0x6e>
		case HAL_ADC_ERROR_DMA:
			SystemManager_Fault[ADC_ERROR_DMA]++;
 800cde0:	4b08      	ldr	r3, [pc, #32]	; (800ce04 <HAL_ADC_ErrorCallback+0x7c>)
 800cde2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cde4:	3301      	adds	r3, #1
 800cde6:	4a07      	ldr	r2, [pc, #28]	; (800ce04 <HAL_ADC_ErrorCallback+0x7c>)
 800cde8:	6413      	str	r3, [r2, #64]	; 0x40
			Adc_DeInit();
 800cdea:	f000 f883 	bl	800cef4 <Adc_DeInit>
			Adc_Init();
 800cdee:	f000 f88b 	bl	800cf08 <Adc_Init>
			break;
 800cdf2:	e000      	b.n	800cdf6 <HAL_ADC_ErrorCallback+0x6e>
		default:
			break;
 800cdf4:	bf00      	nop
	}
}
 800cdf6:	bf00      	nop
 800cdf8:	3710      	adds	r7, #16
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	2000019c 	.word	0x2000019c
 800ce04:	200093ac 	.word	0x200093ac

0800ce08 <Adc_MainFunction>:
/***********************************************************************************
* Function: Adc_MainFunction										   			   *
* Description: Peripheral main function.									       *
************************************************************************************/
VOID Adc_MainFunction()
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
	/* Local variable to store the error status. */
	uint32 statusValue = STD_LOW;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	607b      	str	r3, [r7, #4]
	/* Get error status. */
	statusValue = HAL_ADC_GetState(&hadc1);
 800ce12:	4836      	ldr	r0, [pc, #216]	; (800ceec <Adc_MainFunction+0xe4>)
 800ce14:	f7f9 f920 	bl	8006058 <HAL_ADC_GetState>
 800ce18:	6078      	str	r0, [r7, #4]

	/* Process module states. */
	switch(statusValue)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce20:	d049      	beq.n	800ceb6 <Adc_MainFunction+0xae>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce28:	d85a      	bhi.n	800cee0 <Adc_MainFunction+0xd8>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2b10      	cmp	r3, #16
 800ce2e:	d827      	bhi.n	800ce80 <Adc_MainFunction+0x78>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2b10      	cmp	r3, #16
 800ce34:	d854      	bhi.n	800cee0 <Adc_MainFunction+0xd8>
 800ce36:	a201      	add	r2, pc, #4	; (adr r2, 800ce3c <Adc_MainFunction+0x34>)
 800ce38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce3c:	0800ce8b 	.word	0x0800ce8b
 800ce40:	0800ce99 	.word	0x0800ce99
 800ce44:	0800cea3 	.word	0x0800cea3
 800ce48:	0800cee1 	.word	0x0800cee1
 800ce4c:	0800cec1 	.word	0x0800cec1
 800ce50:	0800cee1 	.word	0x0800cee1
 800ce54:	0800cee1 	.word	0x0800cee1
 800ce58:	0800cee1 	.word	0x0800cee1
 800ce5c:	0800cee1 	.word	0x0800cee1
 800ce60:	0800cee1 	.word	0x0800cee1
 800ce64:	0800cee1 	.word	0x0800cee1
 800ce68:	0800cee1 	.word	0x0800cee1
 800ce6c:	0800cee1 	.word	0x0800cee1
 800ce70:	0800cee1 	.word	0x0800cee1
 800ce74:	0800cee1 	.word	0x0800cee1
 800ce78:	0800cee1 	.word	0x0800cee1
 800ce7c:	0800ced1 	.word	0x0800ced1
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce86:	d011      	beq.n	800ceac <Adc_MainFunction+0xa4>
		case HAL_ADC_STATE_ERROR:
			Adc_BswState = statusValue;
			HAL_ADC_ErrorCallback(&hadc1);
			break;
		default:
			break;
 800ce88:	e02a      	b.n	800cee0 <Adc_MainFunction+0xd8>
			Adc_BswState = statusValue;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	b2da      	uxtb	r2, r3
 800ce8e:	4b18      	ldr	r3, [pc, #96]	; (800cef0 <Adc_MainFunction+0xe8>)
 800ce90:	701a      	strb	r2, [r3, #0]
			Adc_Init();
 800ce92:	f000 f839 	bl	800cf08 <Adc_Init>
			break;
 800ce96:	e024      	b.n	800cee2 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	b2da      	uxtb	r2, r3
 800ce9c:	4b14      	ldr	r3, [pc, #80]	; (800cef0 <Adc_MainFunction+0xe8>)
 800ce9e:	701a      	strb	r2, [r3, #0]
			break;
 800cea0:	e01f      	b.n	800cee2 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	b2da      	uxtb	r2, r3
 800cea6:	4b12      	ldr	r3, [pc, #72]	; (800cef0 <Adc_MainFunction+0xe8>)
 800cea8:	701a      	strb	r2, [r3, #0]
			break;
 800ceaa:	e01a      	b.n	800cee2 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	b2da      	uxtb	r2, r3
 800ceb0:	4b0f      	ldr	r3, [pc, #60]	; (800cef0 <Adc_MainFunction+0xe8>)
 800ceb2:	701a      	strb	r2, [r3, #0]
			break;
 800ceb4:	e015      	b.n	800cee2 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	b2da      	uxtb	r2, r3
 800ceba:	4b0d      	ldr	r3, [pc, #52]	; (800cef0 <Adc_MainFunction+0xe8>)
 800cebc:	701a      	strb	r2, [r3, #0]
			break;
 800cebe:	e010      	b.n	800cee2 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	b2da      	uxtb	r2, r3
 800cec4:	4b0a      	ldr	r3, [pc, #40]	; (800cef0 <Adc_MainFunction+0xe8>)
 800cec6:	701a      	strb	r2, [r3, #0]
			HAL_ADC_ErrorCallback(&hadc1);
 800cec8:	4808      	ldr	r0, [pc, #32]	; (800ceec <Adc_MainFunction+0xe4>)
 800ceca:	f7ff ff5d 	bl	800cd88 <HAL_ADC_ErrorCallback>
			break;
 800cece:	e008      	b.n	800cee2 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	b2da      	uxtb	r2, r3
 800ced4:	4b06      	ldr	r3, [pc, #24]	; (800cef0 <Adc_MainFunction+0xe8>)
 800ced6:	701a      	strb	r2, [r3, #0]
			HAL_ADC_ErrorCallback(&hadc1);
 800ced8:	4804      	ldr	r0, [pc, #16]	; (800ceec <Adc_MainFunction+0xe4>)
 800ceda:	f7ff ff55 	bl	800cd88 <HAL_ADC_ErrorCallback>
			break;
 800cede:	e000      	b.n	800cee2 <Adc_MainFunction+0xda>
			break;
 800cee0:	bf00      	nop
	}
}
 800cee2:	bf00      	nop
 800cee4:	3708      	adds	r7, #8
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	2000019c 	.word	0x2000019c
 800cef0:	20000878 	.word	0x20000878

0800cef4 <Adc_DeInit>:
/***********************************************************************************
* Function: Adc_DeInit										   					   *
* Description: De-initialize the peripheral.									   *
************************************************************************************/
StdReturnType Adc_DeInit()
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	af00      	add	r7, sp, #0
	/* Call for de-intialization function. */
	HAL_ADC_DeInit(&hadc1);
 800cef8:	4802      	ldr	r0, [pc, #8]	; (800cf04 <Adc_DeInit+0x10>)
 800cefa:	f7f8 fd27 	bl	800594c <HAL_ADC_DeInit>
	return E_OK;
 800cefe:	2300      	movs	r3, #0
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	2000019c 	.word	0x2000019c

0800cf08 <Adc_Init>:
/***********************************************************************************
* Function: Adc_Init										   					   *
* Description: Initialize the protocol.									       	   *
************************************************************************************/
StdReturnType Adc_Init()
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800cf0e:	463b      	mov	r3, r7
 800cf10:	2200      	movs	r2, #0
 800cf12:	601a      	str	r2, [r3, #0]
 800cf14:	605a      	str	r2, [r3, #4]
 800cf16:	609a      	str	r2, [r3, #8]
 800cf18:	60da      	str	r2, [r3, #12]
	hadc1.Instance = ADC1;
 800cf1a:	4b96      	ldr	r3, [pc, #600]	; (800d174 <Adc_Init+0x26c>)
 800cf1c:	4a96      	ldr	r2, [pc, #600]	; (800d178 <Adc_Init+0x270>)
 800cf1e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800cf20:	4b94      	ldr	r3, [pc, #592]	; (800d174 <Adc_Init+0x26c>)
 800cf22:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800cf26:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800cf28:	4b92      	ldr	r3, [pc, #584]	; (800d174 <Adc_Init+0x26c>)
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800cf2e:	4b91      	ldr	r3, [pc, #580]	; (800d174 <Adc_Init+0x26c>)
 800cf30:	2201      	movs	r2, #1
 800cf32:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800cf34:	4b8f      	ldr	r3, [pc, #572]	; (800d174 <Adc_Init+0x26c>)
 800cf36:	2201      	movs	r2, #1
 800cf38:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800cf3a:	4b8e      	ldr	r3, [pc, #568]	; (800d174 <Adc_Init+0x26c>)
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800cf42:	4b8c      	ldr	r3, [pc, #560]	; (800d174 <Adc_Init+0x26c>)
 800cf44:	2200      	movs	r2, #0
 800cf46:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800cf48:	4b8a      	ldr	r3, [pc, #552]	; (800d174 <Adc_Init+0x26c>)
 800cf4a:	4a8c      	ldr	r2, [pc, #560]	; (800d17c <Adc_Init+0x274>)
 800cf4c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800cf4e:	4b89      	ldr	r3, [pc, #548]	; (800d174 <Adc_Init+0x26c>)
 800cf50:	2200      	movs	r2, #0
 800cf52:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 14;
 800cf54:	4b87      	ldr	r3, [pc, #540]	; (800d174 <Adc_Init+0x26c>)
 800cf56:	220e      	movs	r2, #14
 800cf58:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800cf5a:	4b86      	ldr	r3, [pc, #536]	; (800d174 <Adc_Init+0x26c>)
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800cf62:	4b84      	ldr	r3, [pc, #528]	; (800d174 <Adc_Init+0x26c>)
 800cf64:	2201      	movs	r2, #1
 800cf66:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800cf68:	4882      	ldr	r0, [pc, #520]	; (800d174 <Adc_Init+0x26c>)
 800cf6a:	f7f8 fc89 	bl	8005880 <HAL_ADC_Init>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d002      	beq.n	800cf7a <Adc_Init+0x72>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800cf74:	487f      	ldr	r0, [pc, #508]	; (800d174 <Adc_Init+0x26c>)
 800cf76:	f7ff ff07 	bl	800cd88 <HAL_ADC_ErrorCallback>
	}
	else
	{
	/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_13;
 800cf7a:	230d      	movs	r3, #13
 800cf7c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800cf82:	2307      	movs	r3, #7
 800cf84:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cf86:	463b      	mov	r3, r7
 800cf88:	4619      	mov	r1, r3
 800cf8a:	487a      	ldr	r0, [pc, #488]	; (800d174 <Adc_Init+0x26c>)
 800cf8c:	f7f8 ff32 	bl	8005df4 <HAL_ADC_ConfigChannel>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d002      	beq.n	800cf9c <Adc_Init+0x94>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800cf96:	4877      	ldr	r0, [pc, #476]	; (800d174 <Adc_Init+0x26c>)
 800cf98:	f7ff fef6 	bl	800cd88 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_2;
 800cf9c:	2302      	movs	r3, #2
 800cf9e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 800cfa0:	2302      	movs	r3, #2
 800cfa2:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cfa4:	463b      	mov	r3, r7
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	4872      	ldr	r0, [pc, #456]	; (800d174 <Adc_Init+0x26c>)
 800cfaa:	f7f8 ff23 	bl	8005df4 <HAL_ADC_ConfigChannel>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d002      	beq.n	800cfba <Adc_Init+0xb2>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800cfb4:	486f      	ldr	r0, [pc, #444]	; (800d174 <Adc_Init+0x26c>)
 800cfb6:	f7ff fee7 	bl	800cd88 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_12;
 800cfba:	230c      	movs	r3, #12
 800cfbc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 800cfbe:	2303      	movs	r3, #3
 800cfc0:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cfc2:	463b      	mov	r3, r7
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	486b      	ldr	r0, [pc, #428]	; (800d174 <Adc_Init+0x26c>)
 800cfc8:	f7f8 ff14 	bl	8005df4 <HAL_ADC_ConfigChannel>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d002      	beq.n	800cfd8 <Adc_Init+0xd0>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800cfd2:	4868      	ldr	r0, [pc, #416]	; (800d174 <Adc_Init+0x26c>)
 800cfd4:	f7ff fed8 	bl	800cd88 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_10;
 800cfd8:	230a      	movs	r3, #10
 800cfda:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 800cfdc:	2304      	movs	r3, #4
 800cfde:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cfe0:	463b      	mov	r3, r7
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	4863      	ldr	r0, [pc, #396]	; (800d174 <Adc_Init+0x26c>)
 800cfe6:	f7f8 ff05 	bl	8005df4 <HAL_ADC_ConfigChannel>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d002      	beq.n	800cff6 <Adc_Init+0xee>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800cff0:	4860      	ldr	r0, [pc, #384]	; (800d174 <Adc_Init+0x26c>)
 800cff2:	f7ff fec9 	bl	800cd88 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_4;
 800cff6:	2304      	movs	r3, #4
 800cff8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 5;
 800cffa:	2305      	movs	r3, #5
 800cffc:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cffe:	463b      	mov	r3, r7
 800d000:	4619      	mov	r1, r3
 800d002:	485c      	ldr	r0, [pc, #368]	; (800d174 <Adc_Init+0x26c>)
 800d004:	f7f8 fef6 	bl	8005df4 <HAL_ADC_ConfigChannel>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d002      	beq.n	800d014 <Adc_Init+0x10c>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d00e:	4859      	ldr	r0, [pc, #356]	; (800d174 <Adc_Init+0x26c>)
 800d010:	f7ff feba 	bl	800cd88 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_5;
 800d014:	2305      	movs	r3, #5
 800d016:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 6;
 800d018:	2306      	movs	r3, #6
 800d01a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d01c:	463b      	mov	r3, r7
 800d01e:	4619      	mov	r1, r3
 800d020:	4854      	ldr	r0, [pc, #336]	; (800d174 <Adc_Init+0x26c>)
 800d022:	f7f8 fee7 	bl	8005df4 <HAL_ADC_ConfigChannel>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d002      	beq.n	800d032 <Adc_Init+0x12a>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d02c:	4851      	ldr	r0, [pc, #324]	; (800d174 <Adc_Init+0x26c>)
 800d02e:	f7ff feab 	bl	800cd88 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_6;
 800d032:	2306      	movs	r3, #6
 800d034:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 7;
 800d036:	2307      	movs	r3, #7
 800d038:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d03a:	463b      	mov	r3, r7
 800d03c:	4619      	mov	r1, r3
 800d03e:	484d      	ldr	r0, [pc, #308]	; (800d174 <Adc_Init+0x26c>)
 800d040:	f7f8 fed8 	bl	8005df4 <HAL_ADC_ConfigChannel>
 800d044:	4603      	mov	r3, r0
 800d046:	2b00      	cmp	r3, #0
 800d048:	d002      	beq.n	800d050 <Adc_Init+0x148>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d04a:	484a      	ldr	r0, [pc, #296]	; (800d174 <Adc_Init+0x26c>)
 800d04c:	f7ff fe9c 	bl	800cd88 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_7;
 800d050:	2307      	movs	r3, #7
 800d052:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 8;
 800d054:	2308      	movs	r3, #8
 800d056:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d058:	463b      	mov	r3, r7
 800d05a:	4619      	mov	r1, r3
 800d05c:	4845      	ldr	r0, [pc, #276]	; (800d174 <Adc_Init+0x26c>)
 800d05e:	f7f8 fec9 	bl	8005df4 <HAL_ADC_ConfigChannel>
 800d062:	4603      	mov	r3, r0
 800d064:	2b00      	cmp	r3, #0
 800d066:	d002      	beq.n	800d06e <Adc_Init+0x166>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d068:	4842      	ldr	r0, [pc, #264]	; (800d174 <Adc_Init+0x26c>)
 800d06a:	f7ff fe8d 	bl	800cd88 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_8;
 800d06e:	2308      	movs	r3, #8
 800d070:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 9;
 800d072:	2309      	movs	r3, #9
 800d074:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d076:	463b      	mov	r3, r7
 800d078:	4619      	mov	r1, r3
 800d07a:	483e      	ldr	r0, [pc, #248]	; (800d174 <Adc_Init+0x26c>)
 800d07c:	f7f8 feba 	bl	8005df4 <HAL_ADC_ConfigChannel>
 800d080:	4603      	mov	r3, r0
 800d082:	2b00      	cmp	r3, #0
 800d084:	d002      	beq.n	800d08c <Adc_Init+0x184>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d086:	483b      	ldr	r0, [pc, #236]	; (800d174 <Adc_Init+0x26c>)
 800d088:	f7ff fe7e 	bl	800cd88 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_9;
 800d08c:	2309      	movs	r3, #9
 800d08e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 10;
 800d090:	230a      	movs	r3, #10
 800d092:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d094:	463b      	mov	r3, r7
 800d096:	4619      	mov	r1, r3
 800d098:	4836      	ldr	r0, [pc, #216]	; (800d174 <Adc_Init+0x26c>)
 800d09a:	f7f8 feab 	bl	8005df4 <HAL_ADC_ConfigChannel>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d002      	beq.n	800d0aa <Adc_Init+0x1a2>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d0a4:	4833      	ldr	r0, [pc, #204]	; (800d174 <Adc_Init+0x26c>)
 800d0a6:	f7ff fe6f 	bl	800cd88 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_15;
 800d0aa:	230f      	movs	r3, #15
 800d0ac:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 11;
 800d0ae:	230b      	movs	r3, #11
 800d0b0:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d0b2:	463b      	mov	r3, r7
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	482f      	ldr	r0, [pc, #188]	; (800d174 <Adc_Init+0x26c>)
 800d0b8:	f7f8 fe9c 	bl	8005df4 <HAL_ADC_ConfigChannel>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d002      	beq.n	800d0c8 <Adc_Init+0x1c0>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d0c2:	482c      	ldr	r0, [pc, #176]	; (800d174 <Adc_Init+0x26c>)
 800d0c4:	f7ff fe60 	bl	800cd88 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_14;
 800d0c8:	230e      	movs	r3, #14
 800d0ca:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 12;
 800d0cc:	230c      	movs	r3, #12
 800d0ce:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d0d0:	463b      	mov	r3, r7
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	4827      	ldr	r0, [pc, #156]	; (800d174 <Adc_Init+0x26c>)
 800d0d6:	f7f8 fe8d 	bl	8005df4 <HAL_ADC_ConfigChannel>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d002      	beq.n	800d0e6 <Adc_Init+0x1de>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d0e0:	4824      	ldr	r0, [pc, #144]	; (800d174 <Adc_Init+0x26c>)
 800d0e2:	f7ff fe51 	bl	800cd88 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_3;
 800d0e6:	2303      	movs	r3, #3
 800d0e8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 13;
 800d0ea:	230d      	movs	r3, #13
 800d0ec:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d0ee:	463b      	mov	r3, r7
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	4820      	ldr	r0, [pc, #128]	; (800d174 <Adc_Init+0x26c>)
 800d0f4:	f7f8 fe7e 	bl	8005df4 <HAL_ADC_ConfigChannel>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d002      	beq.n	800d104 <Adc_Init+0x1fc>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d0fe:	481d      	ldr	r0, [pc, #116]	; (800d174 <Adc_Init+0x26c>)
 800d100:	f7ff fe42 	bl	800cd88 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_11;
 800d104:	230b      	movs	r3, #11
 800d106:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 14;
 800d108:	230e      	movs	r3, #14
 800d10a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d10c:	463b      	mov	r3, r7
 800d10e:	4619      	mov	r1, r3
 800d110:	4818      	ldr	r0, [pc, #96]	; (800d174 <Adc_Init+0x26c>)
 800d112:	f7f8 fe6f 	bl	8005df4 <HAL_ADC_ConfigChannel>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d002      	beq.n	800d122 <Adc_Init+0x21a>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d11c:	4815      	ldr	r0, [pc, #84]	; (800d174 <Adc_Init+0x26c>)
 800d11e:	f7ff fe33 	bl	800cd88 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800d122:	4b17      	ldr	r3, [pc, #92]	; (800d180 <Adc_Init+0x278>)
 800d124:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 15;
 800d126:	230f      	movs	r3, #15
 800d128:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d12a:	463b      	mov	r3, r7
 800d12c:	4619      	mov	r1, r3
 800d12e:	4811      	ldr	r0, [pc, #68]	; (800d174 <Adc_Init+0x26c>)
 800d130:	f7f8 fe60 	bl	8005df4 <HAL_ADC_ConfigChannel>
 800d134:	4603      	mov	r3, r0
 800d136:	2b00      	cmp	r3, #0
 800d138:	d002      	beq.n	800d140 <Adc_Init+0x238>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d13a:	480e      	ldr	r0, [pc, #56]	; (800d174 <Adc_Init+0x26c>)
 800d13c:	f7ff fe24 	bl	800cd88 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800d140:	2311      	movs	r3, #17
 800d142:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 16;
 800d144:	2310      	movs	r3, #16
 800d146:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d148:	463b      	mov	r3, r7
 800d14a:	4619      	mov	r1, r3
 800d14c:	4809      	ldr	r0, [pc, #36]	; (800d174 <Adc_Init+0x26c>)
 800d14e:	f7f8 fe51 	bl	8005df4 <HAL_ADC_ConfigChannel>
 800d152:	4603      	mov	r3, r0
 800d154:	2b00      	cmp	r3, #0
 800d156:	d002      	beq.n	800d15e <Adc_Init+0x256>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800d158:	4806      	ldr	r0, [pc, #24]	; (800d174 <Adc_Init+0x26c>)
 800d15a:	f7ff fe15 	bl	800cd88 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* Do nothing */
	}
	HAL_ADC_Start_DMA(&hadc1, Adc_ChannelOne_Buffer, ADC_BUFFER_LENGTH);
 800d15e:	220e      	movs	r2, #14
 800d160:	4908      	ldr	r1, [pc, #32]	; (800d184 <Adc_Init+0x27c>)
 800d162:	4804      	ldr	r0, [pc, #16]	; (800d174 <Adc_Init+0x26c>)
 800d164:	f7f8 fd42 	bl	8005bec <HAL_ADC_Start_DMA>
	return E_OK;
 800d168:	2300      	movs	r3, #0
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	2000019c 	.word	0x2000019c
 800d178:	40012000 	.word	0x40012000
 800d17c:	0f000001 	.word	0x0f000001
 800d180:	10000012 	.word	0x10000012
 800d184:	2000087c 	.word	0x2000087c

0800d188 <Port_Init>:
/***********************************************************************************
* Function: Port_Init										       				   *
* Description: Initialize the peripheral.									 	   *
************************************************************************************/
StdReturnType Port_Init()
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 800d18c:	f7f7 f996 	bl	80044bc <MX_GPIO_Init>
	return E_OK;
 800d190:	2300      	movs	r3, #0
}
 800d192:	4618      	mov	r0, r3
 800d194:	bd80      	pop	{r7, pc}

0800d196 <CanOverSpi_Init>:
/***********************************************************************************
* Function: CanOverSpi_Init									   					   *
* Description: Driver initialization.		 		   							   *
************************************************************************************/
StdReturnType CanOverSpi_Init()
{
 800d196:	b580      	push	{r7, lr}
 800d198:	b088      	sub	sp, #32
 800d19a:	af00      	add	r7, sp, #0
	RXF3 RXF3reg;
	RXF4 RXF4reg;
	RXF5 RXF5reg;
	RXM0 RXM0reg;
	RXM1 RXM1reg;
	RXM0reg.RXM0SIDH = 0x00;
 800d19c:	2300      	movs	r3, #0
 800d19e:	713b      	strb	r3, [r7, #4]
	RXM0reg.RXM0SIDL = 0x00;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	717b      	strb	r3, [r7, #5]
	RXM0reg.RXM0EID8 = 0x00;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	71bb      	strb	r3, [r7, #6]
	RXM0reg.RXM0EID0 = 0x00;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	71fb      	strb	r3, [r7, #7]
	RXM1reg.RXM1SIDH = 0x00;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	703b      	strb	r3, [r7, #0]
	RXM1reg.RXM1SIDL = 0x00;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	707b      	strb	r3, [r7, #1]
	RXM1reg.RXM1EID8 = 0x00;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	70bb      	strb	r3, [r7, #2]
	RXM1reg.RXM1EID0 = 0x00;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	70fb      	strb	r3, [r7, #3]
	RXF0reg.RXF0SIDH = 0x00;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	773b      	strb	r3, [r7, #28]
	RXF0reg.RXF0SIDL = 0x00;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	777b      	strb	r3, [r7, #29]
	RXF0reg.RXF0EID8 = 0x00;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	77bb      	strb	r3, [r7, #30]
	RXF0reg.RXF0EID0 = 0x00;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	77fb      	strb	r3, [r7, #31]
	RXF1reg.RXF1SIDH = 0x00;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	763b      	strb	r3, [r7, #24]
	RXF1reg.RXF1SIDL = 0x08;
 800d1d0:	2308      	movs	r3, #8
 800d1d2:	767b      	strb	r3, [r7, #25]
	RXF1reg.RXF1EID8 = 0x00;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	76bb      	strb	r3, [r7, #26]
	RXF1reg.RXF1EID0 = 0x00;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	76fb      	strb	r3, [r7, #27]
	RXF2reg.RXF2SIDH = 0x00;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	753b      	strb	r3, [r7, #20]
	RXF2reg.RXF2SIDL = 0x00;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	757b      	strb	r3, [r7, #21]
	RXF2reg.RXF2EID8 = 0x00;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	75bb      	strb	r3, [r7, #22]
	RXF2reg.RXF2EID0 = 0x00;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	75fb      	strb	r3, [r7, #23]
	RXF3reg.RXF3SIDH = 0x00;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	743b      	strb	r3, [r7, #16]
	RXF3reg.RXF3SIDL = 0x00;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	747b      	strb	r3, [r7, #17]
	RXF3reg.RXF3EID8 = 0x00;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	74bb      	strb	r3, [r7, #18]
	RXF3reg.RXF3EID0 = 0x00;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	74fb      	strb	r3, [r7, #19]
	RXF4reg.RXF4SIDH = 0x00;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	733b      	strb	r3, [r7, #12]
	RXF4reg.RXF4SIDL = 0x00;
 800d200:	2300      	movs	r3, #0
 800d202:	737b      	strb	r3, [r7, #13]
	RXF4reg.RXF4EID8 = 0x00;
 800d204:	2300      	movs	r3, #0
 800d206:	73bb      	strb	r3, [r7, #14]
	RXF4reg.RXF4EID0 = 0x00;
 800d208:	2300      	movs	r3, #0
 800d20a:	73fb      	strb	r3, [r7, #15]
	RXF5reg.RXF5SIDH = 0x00;
 800d20c:	2300      	movs	r3, #0
 800d20e:	723b      	strb	r3, [r7, #8]
	RXF5reg.RXF5SIDL = 0x08;
 800d210:	2308      	movs	r3, #8
 800d212:	727b      	strb	r3, [r7, #9]
	RXF5reg.RXF5EID8 = 0x00;
 800d214:	2300      	movs	r3, #0
 800d216:	72bb      	strb	r3, [r7, #10]
	RXF5reg.RXF5EID0 = 0x00;
 800d218:	2300      	movs	r3, #0
 800d21a:	72fb      	strb	r3, [r7, #11]
	if(MCP2515_CanOverSpi_Initialize() == E_NOT_OK)
 800d21c:	f000 f862 	bl	800d2e4 <MCP2515_CanOverSpi_Initialize>
 800d220:	4603      	mov	r3, r0
 800d222:	2b01      	cmp	r3, #1
 800d224:	d101      	bne.n	800d22a <CanOverSpi_Init+0x94>
	{
		return E_NOT_OK;
 800d226:	2301      	movs	r3, #1
 800d228:	e058      	b.n	800d2dc <CanOverSpi_Init+0x146>
	else
	{
		/* do nothing */
	}

	if(MCP2515_CanOverSpi_SetConfigMode() == E_NOT_OK)
 800d22a:	f000 f869 	bl	800d300 <MCP2515_CanOverSpi_SetConfigMode>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b01      	cmp	r3, #1
 800d232:	d101      	bne.n	800d238 <CanOverSpi_Init+0xa2>
	{
		return E_NOT_OK;
 800d234:	2301      	movs	r3, #1
 800d236:	e051      	b.n	800d2dc <CanOverSpi_Init+0x146>
	}
	else
	{
		/* do nothing */
	}
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXM0SIDH, MCP2515_CanOverSpi_RXM0EID0, &(RXM0reg.RXM0SIDH));
 800d238:	1d3b      	adds	r3, r7, #4
 800d23a:	461a      	mov	r2, r3
 800d23c:	2123      	movs	r1, #35	; 0x23
 800d23e:	2020      	movs	r0, #32
 800d240:	f000 f8ce 	bl	800d3e0 <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXM1SIDH, MCP2515_CanOverSpi_RXM1EID0, &(RXM1reg.RXM1SIDH));
 800d244:	463b      	mov	r3, r7
 800d246:	461a      	mov	r2, r3
 800d248:	2127      	movs	r1, #39	; 0x27
 800d24a:	2024      	movs	r0, #36	; 0x24
 800d24c:	f000 f8c8 	bl	800d3e0 <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF0SIDH, MCP2515_CanOverSpi_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800d250:	f107 031c 	add.w	r3, r7, #28
 800d254:	461a      	mov	r2, r3
 800d256:	2103      	movs	r1, #3
 800d258:	2000      	movs	r0, #0
 800d25a:	f000 f8c1 	bl	800d3e0 <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF1SIDH, MCP2515_CanOverSpi_RXF1EID0, &(RXF1reg.RXF1SIDH));
 800d25e:	f107 0318 	add.w	r3, r7, #24
 800d262:	461a      	mov	r2, r3
 800d264:	2107      	movs	r1, #7
 800d266:	2004      	movs	r0, #4
 800d268:	f000 f8ba 	bl	800d3e0 <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF2SIDH, MCP2515_CanOverSpi_RXF2EID0, &(RXF2reg.RXF2SIDH));
 800d26c:	f107 0314 	add.w	r3, r7, #20
 800d270:	461a      	mov	r2, r3
 800d272:	210b      	movs	r1, #11
 800d274:	2008      	movs	r0, #8
 800d276:	f000 f8b3 	bl	800d3e0 <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF3SIDH, MCP2515_CanOverSpi_RXF3EID0, &(RXF3reg.RXF3SIDH));
 800d27a:	f107 0310 	add.w	r3, r7, #16
 800d27e:	461a      	mov	r2, r3
 800d280:	2113      	movs	r1, #19
 800d282:	2010      	movs	r0, #16
 800d284:	f000 f8ac 	bl	800d3e0 <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF4SIDH, MCP2515_CanOverSpi_RXF4EID0, &(RXF4reg.RXF4SIDH));
 800d288:	f107 030c 	add.w	r3, r7, #12
 800d28c:	461a      	mov	r2, r3
 800d28e:	2117      	movs	r1, #23
 800d290:	2014      	movs	r0, #20
 800d292:	f000 f8a5 	bl	800d3e0 <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByteSequence(MCP2515_CanOverSpi_RXF5SIDH, MCP2515_CanOverSpi_RXF5EID0, &(RXF5reg.RXF5SIDH));
 800d296:	f107 0308 	add.w	r3, r7, #8
 800d29a:	461a      	mov	r2, r3
 800d29c:	211b      	movs	r1, #27
 800d29e:	2018      	movs	r0, #24
 800d2a0:	f000 f89e 	bl	800d3e0 <MCP2515_CanOverSpi_WriteByteSequence>
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_RXB0CTRL, 0x04);
 800d2a4:	2104      	movs	r1, #4
 800d2a6:	2060      	movs	r0, #96	; 0x60
 800d2a8:	f000 f874 	bl	800d394 <MCP2515_CanOverSpi_WriteByte>
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_RXB1CTRL, 0x00);
 800d2ac:	2100      	movs	r1, #0
 800d2ae:	2070      	movs	r0, #112	; 0x70
 800d2b0:	f000 f870 	bl	800d394 <MCP2515_CanOverSpi_WriteByte>
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CNF1, 0x00);
 800d2b4:	2100      	movs	r1, #0
 800d2b6:	202a      	movs	r0, #42	; 0x2a
 800d2b8:	f000 f86c 	bl	800d394 <MCP2515_CanOverSpi_WriteByte>
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CNF2, 0x90);
 800d2bc:	2190      	movs	r1, #144	; 0x90
 800d2be:	2029      	movs	r0, #41	; 0x29
 800d2c0:	f000 f868 	bl	800d394 <MCP2515_CanOverSpi_WriteByte>
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CNF3, 0x02);
 800d2c4:	2102      	movs	r1, #2
 800d2c6:	2028      	movs	r0, #40	; 0x28
 800d2c8:	f000 f864 	bl	800d394 <MCP2515_CanOverSpi_WriteByte>
	if(MCP2515_CanOverSpi_SetNormalMode() == E_NOT_OK)
 800d2cc:	f000 f82b 	bl	800d326 <MCP2515_CanOverSpi_SetNormalMode>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	d101      	bne.n	800d2da <CanOverSpi_Init+0x144>
	{
		return E_NOT_OK;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e000      	b.n	800d2dc <CanOverSpi_Init+0x146>
	}
	else
	{
		/* do nothing */
	}
	return true;
 800d2da:	2301      	movs	r3, #1
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3720      	adds	r7, #32
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <MCP2515_CanOverSpi_Initialize>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_Initialize									       *
* Description: Set the CAN CS pin high.		 	   								   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_Initialize()
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	af00      	add	r7, sp, #0
	MCP2515_CanOverSpi_CS_HIGH();
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d2ee:	4803      	ldr	r0, [pc, #12]	; (800d2fc <MCP2515_CanOverSpi_Initialize+0x18>)
 800d2f0:	f7fa fb0c 	bl	800790c <HAL_GPIO_WritePin>
//	}
//	else
//	{
//		/* do nothing */
//	}
	return E_NOT_OK;
 800d2f4:	2301      	movs	r3, #1
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	40020000 	.word	0x40020000

0800d300 <MCP2515_CanOverSpi_SetConfigMode>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_SetConfigMode									   *
* Description: Set the mode to config.		 		   							   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_SetConfigMode()
{
 800d300:	b580      	push	{r7, lr}
 800d302:	af00      	add	r7, sp, #0
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CANCTRL, MODE_CONFIG);
 800d304:	2180      	movs	r1, #128	; 0x80
 800d306:	200f      	movs	r0, #15
 800d308:	f000 f844 	bl	800d394 <MCP2515_CanOverSpi_WriteByte>
	if((MCP2515_CanOverSpi_ReadByte(MCP2515_CanOverSpi_CANSTAT) & MODE_MASK) == MODE_CONFIG)
 800d30c:	200e      	movs	r0, #14
 800d30e:	f000 f81d 	bl	800d34c <MCP2515_CanOverSpi_ReadByte>
 800d312:	4603      	mov	r3, r0
 800d314:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d318:	2b80      	cmp	r3, #128	; 0x80
 800d31a:	d101      	bne.n	800d320 <MCP2515_CanOverSpi_SetConfigMode+0x20>
	{
		return E_OK;
 800d31c:	2300      	movs	r3, #0
 800d31e:	e000      	b.n	800d322 <MCP2515_CanOverSpi_SetConfigMode+0x22>
	}
	else
	{
		/* do nothing */
	}
	return E_NOT_OK;
 800d320:	2301      	movs	r3, #1
}
 800d322:	4618      	mov	r0, r3
 800d324:	bd80      	pop	{r7, pc}

0800d326 <MCP2515_CanOverSpi_SetNormalMode>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_SetNormalMode									   *
* Description: Set the mode to normal.		 		   							   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_SetNormalMode()
{
 800d326:	b580      	push	{r7, lr}
 800d328:	af00      	add	r7, sp, #0
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CANCTRL, MODE_NORMAL);
 800d32a:	2100      	movs	r1, #0
 800d32c:	200f      	movs	r0, #15
 800d32e:	f000 f831 	bl	800d394 <MCP2515_CanOverSpi_WriteByte>
	if((MCP2515_CanOverSpi_ReadByte(MCP2515_CanOverSpi_CANSTAT) & MODE_MASK) == MODE_NORMAL)
 800d332:	200e      	movs	r0, #14
 800d334:	f000 f80a 	bl	800d34c <MCP2515_CanOverSpi_ReadByte>
 800d338:	4603      	mov	r3, r0
 800d33a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d101      	bne.n	800d346 <MCP2515_CanOverSpi_SetNormalMode+0x20>
	{
		return E_OK;
 800d342:	2300      	movs	r3, #0
 800d344:	e000      	b.n	800d348 <MCP2515_CanOverSpi_SetNormalMode+0x22>
	}
	else
	{
		/* do nothing */
	}
	return E_NOT_OK;
 800d346:	2301      	movs	r3, #1
}
 800d348:	4618      	mov	r0, r3
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <MCP2515_CanOverSpi_ReadByte>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_ReadByte											   *
* Description: Read the byte from the bus.		 		   						   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_ReadByte (uint8 address)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	4603      	mov	r3, r0
 800d354:	71fb      	strb	r3, [r7, #7]
	uint8 retVal;
	MCP2515_CanOverSpi_CS_LOW();
 800d356:	2201      	movs	r2, #1
 800d358:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d35c:	480c      	ldr	r0, [pc, #48]	; (800d390 <MCP2515_CanOverSpi_ReadByte+0x44>)
 800d35e:	f7fa fad5 	bl	800790c <HAL_GPIO_WritePin>
	SPI_Tx(MCP2515_CanOverSpi_READ);
 800d362:	2003      	movs	r0, #3
 800d364:	f000 f868 	bl	800d438 <SPI_Tx>
	SPI_Tx(address);
 800d368:	79fb      	ldrb	r3, [r7, #7]
 800d36a:	4618      	mov	r0, r3
 800d36c:	f000 f864 	bl	800d438 <SPI_Tx>
	retVal = SPI_Rx();
 800d370:	f000 f879 	bl	800d466 <SPI_Rx>
 800d374:	4603      	mov	r3, r0
 800d376:	73fb      	strb	r3, [r7, #15]
	MCP2515_CanOverSpi_CS_HIGH();
 800d378:	2201      	movs	r2, #1
 800d37a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d37e:	4804      	ldr	r0, [pc, #16]	; (800d390 <MCP2515_CanOverSpi_ReadByte+0x44>)
 800d380:	f7fa fac4 	bl	800790c <HAL_GPIO_WritePin>
	return retVal;
 800d384:	7bfb      	ldrb	r3, [r7, #15]
}
 800d386:	4618      	mov	r0, r3
 800d388:	3710      	adds	r7, #16
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	40020000 	.word	0x40020000

0800d394 <MCP2515_CanOverSpi_WriteByte>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_WriteByte										   *
* Description: Write the byte on the bus.		 		   						   *
************************************************************************************/
VOID MCP2515_CanOverSpi_WriteByte(uint8 address, uint8 data)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b082      	sub	sp, #8
 800d398:	af00      	add	r7, sp, #0
 800d39a:	4603      	mov	r3, r0
 800d39c:	460a      	mov	r2, r1
 800d39e:	71fb      	strb	r3, [r7, #7]
 800d3a0:	4613      	mov	r3, r2
 800d3a2:	71bb      	strb	r3, [r7, #6]
	MCP2515_CanOverSpi_CS_LOW();
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d3aa:	480c      	ldr	r0, [pc, #48]	; (800d3dc <MCP2515_CanOverSpi_WriteByte+0x48>)
 800d3ac:	f7fa faae 	bl	800790c <HAL_GPIO_WritePin>
	SPI_Tx(MCP2515_CanOverSpi_WRITE);
 800d3b0:	2002      	movs	r0, #2
 800d3b2:	f000 f841 	bl	800d438 <SPI_Tx>
	SPI_Tx(address);
 800d3b6:	79fb      	ldrb	r3, [r7, #7]
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f000 f83d 	bl	800d438 <SPI_Tx>
	SPI_Tx(data);
 800d3be:	79bb      	ldrb	r3, [r7, #6]
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f000 f839 	bl	800d438 <SPI_Tx>
	MCP2515_CanOverSpi_CS_HIGH();
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d3cc:	4803      	ldr	r0, [pc, #12]	; (800d3dc <MCP2515_CanOverSpi_WriteByte+0x48>)
 800d3ce:	f7fa fa9d 	bl	800790c <HAL_GPIO_WritePin>
}
 800d3d2:	bf00      	nop
 800d3d4:	3708      	adds	r7, #8
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	40020000 	.word	0x40020000

0800d3e0 <MCP2515_CanOverSpi_WriteByteSequence>:
/***********************************************************************************
* Function: MCP2515_CanOverSpi_WriteByteSequence								   *
* Description: Initialize the bluetooth communication application.		 		   *
************************************************************************************/
VOID MCP2515_CanOverSpi_WriteByteSequence(uint8 startAddress, uint8 endAddress, uint8 *data)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	603a      	str	r2, [r7, #0]
 800d3ea:	71fb      	strb	r3, [r7, #7]
 800d3ec:	460b      	mov	r3, r1
 800d3ee:	71bb      	strb	r3, [r7, #6]
	MCP2515_CanOverSpi_CS_LOW();
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d3f6:	480f      	ldr	r0, [pc, #60]	; (800d434 <MCP2515_CanOverSpi_WriteByteSequence+0x54>)
 800d3f8:	f7fa fa88 	bl	800790c <HAL_GPIO_WritePin>
	SPI_Tx(MCP2515_CanOverSpi_WRITE);
 800d3fc:	2002      	movs	r0, #2
 800d3fe:	f000 f81b 	bl	800d438 <SPI_Tx>
	SPI_Tx(startAddress);
 800d402:	79fb      	ldrb	r3, [r7, #7]
 800d404:	4618      	mov	r0, r3
 800d406:	f000 f817 	bl	800d438 <SPI_Tx>
	SPI_TxBuffer(data, (endAddress - startAddress + 1));
 800d40a:	79ba      	ldrb	r2, [r7, #6]
 800d40c:	79fb      	ldrb	r3, [r7, #7]
 800d40e:	1ad3      	subs	r3, r2, r3
 800d410:	b2db      	uxtb	r3, r3
 800d412:	3301      	adds	r3, #1
 800d414:	b2db      	uxtb	r3, r3
 800d416:	4619      	mov	r1, r3
 800d418:	6838      	ldr	r0, [r7, #0]
 800d41a:	f000 f818 	bl	800d44e <SPI_TxBuffer>
	MCP2515_CanOverSpi_CS_HIGH();
 800d41e:	2201      	movs	r2, #1
 800d420:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d424:	4803      	ldr	r0, [pc, #12]	; (800d434 <MCP2515_CanOverSpi_WriteByteSequence+0x54>)
 800d426:	f7fa fa71 	bl	800790c <HAL_GPIO_WritePin>
}
 800d42a:	bf00      	nop
 800d42c:	3708      	adds	r7, #8
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	40020000 	.word	0x40020000

0800d438 <SPI_Tx>:
/***********************************************************************************
* Function: SPI_Tx													   		   	   *
* Description: Peripheral interface.		 		   							   *
************************************************************************************/
STATIC VOID SPI_Tx(uint8 data)
{
 800d438:	b480      	push	{r7}
 800d43a:	b083      	sub	sp, #12
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	4603      	mov	r3, r0
 800d440:	71fb      	strb	r3, [r7, #7]
	//HAL_SPI_Transmit_IT(SPI_CAN, &data, 1);
}
 800d442:	bf00      	nop
 800d444:	370c      	adds	r7, #12
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr

0800d44e <SPI_TxBuffer>:
/***********************************************************************************
* Function: SPI_TxBuffer													   	   *
* Description: Peripheral interface.		 		   							   *
************************************************************************************/
STATIC VOID SPI_TxBuffer(uint8 *buffer, uint8 length)
{
 800d44e:	b480      	push	{r7}
 800d450:	b083      	sub	sp, #12
 800d452:	af00      	add	r7, sp, #0
 800d454:	6078      	str	r0, [r7, #4]
 800d456:	460b      	mov	r3, r1
 800d458:	70fb      	strb	r3, [r7, #3]
	//HAL_SPI_Transmit_IT(SPI_CAN, buffer, length);
}
 800d45a:	bf00      	nop
 800d45c:	370c      	adds	r7, #12
 800d45e:	46bd      	mov	sp, r7
 800d460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d464:	4770      	bx	lr

0800d466 <SPI_Rx>:
/***********************************************************************************
* Function: SPI_Rx													   	           *
* Description: Peripheral interface.		 		   							   *
************************************************************************************/
STATIC StdReturnType SPI_Rx(VOID)
{
 800d466:	b480      	push	{r7}
 800d468:	af00      	add	r7, sp, #0
	//uint8 retVal;
	//HAL_SPI_Receive_IT(SPI_CAN, &retVal, 1);
	//return retVal;
	return 0;
 800d46a:	2300      	movs	r3, #0
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	46bd      	mov	sp, r7
 800d470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d474:	4770      	bx	lr

0800d476 <Spi_Init>:
/***********************************************************************************
* Function: Spi_Init											 		 		   *
* Description: Module initialization.					           				   *
************************************************************************************/
StdReturnType Spi_Init()
{
 800d476:	b480      	push	{r7}
 800d478:	af00      	add	r7, sp, #0
//	}
//	else
//	{
//		/* do nothing */
//	}
	return E_OK;
 800d47a:	2300      	movs	r3, #0
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr
	...

0800d488 <HAL_TIM_IC_CaptureCallback>:
/***********************************************************************************
* Function: HAL_TIM_IC_CaptureCallback										   	   *
* Description: Input capture callback to process information received.		 	   *
************************************************************************************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
	/* If channel 3 requests. */
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	7f1b      	ldrb	r3, [r3, #28]
 800d494:	2b01      	cmp	r3, #1
 800d496:	f040 8081 	bne.w	800d59c <HAL_TIM_IC_CaptureCallback+0x114>
	{
		/* Check if the first input capture has been received. */
		if (Tim5_InputCaptureFlag_ChannelThree == STD_LOW)
 800d49a:	4b87      	ldr	r3, [pc, #540]	; (800d6b8 <HAL_TIM_IC_CaptureCallback+0x230>)
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d11a      	bne.n	800d4d8 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			/* Store the input capture value. */
			Tim5_InputCompare_ValueOne_ChannelThree = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800d4a2:	2100      	movs	r1, #0
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f7fd fe9b 	bl	800b1e0 <HAL_TIM_ReadCapturedValue>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	4a83      	ldr	r2, [pc, #524]	; (800d6bc <HAL_TIM_IC_CaptureCallback+0x234>)
 800d4ae:	6013      	str	r3, [r2, #0]
			/* Set the flag to high. */
			Tim5_InputCaptureFlag_ChannelThree = STD_HIGH;
 800d4b0:	4b81      	ldr	r3, [pc, #516]	; (800d6b8 <HAL_TIM_IC_CaptureCallback+0x230>)
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	6a1a      	ldr	r2, [r3, #32]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f022 020a 	bic.w	r2, r2, #10
 800d4c4:	621a      	str	r2, [r3, #32]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	6a1a      	ldr	r2, [r3, #32]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f042 0202 	orr.w	r2, r2, #2
 800d4d4:	621a      	str	r2, [r3, #32]
 800d4d6:	e061      	b.n	800d59c <HAL_TIM_IC_CaptureCallback+0x114>
		}/* If the first input capture has been stored. */
		else if(Tim5_InputCaptureFlag_ChannelThree == STD_HIGH)
 800d4d8:	4b77      	ldr	r3, [pc, #476]	; (800d6b8 <HAL_TIM_IC_CaptureCallback+0x230>)
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d15d      	bne.n	800d59c <HAL_TIM_IC_CaptureCallback+0x114>
		{
			/* Store the second input capture. */
			Tim5_InputCompare_ValueTwo_ChannelThree = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800d4e0:	2100      	movs	r1, #0
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f7fd fe7c 	bl	800b1e0 <HAL_TIM_ReadCapturedValue>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	4a75      	ldr	r2, [pc, #468]	; (800d6c0 <HAL_TIM_IC_CaptureCallback+0x238>)
 800d4ec:	6013      	str	r3, [r2, #0]
			/* Set the timer counter to 0. */
			__HAL_TIM_SET_COUNTER(htim, 0);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	625a      	str	r2, [r3, #36]	; 0x24
			/* If the second input capture is greater than the first, then subtract the first one from the second one. */
			if (Tim5_InputCompare_ValueTwo_ChannelThree > Tim5_InputCompare_ValueOne_ChannelThree)
 800d4f6:	4b72      	ldr	r3, [pc, #456]	; (800d6c0 <HAL_TIM_IC_CaptureCallback+0x238>)
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	4b70      	ldr	r3, [pc, #448]	; (800d6bc <HAL_TIM_IC_CaptureCallback+0x234>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d907      	bls.n	800d512 <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Tim5_Difference_ChannelThree = Tim5_InputCompare_ValueTwo_ChannelThree - Tim5_InputCompare_ValueOne_ChannelThree;
 800d502:	4b6f      	ldr	r3, [pc, #444]	; (800d6c0 <HAL_TIM_IC_CaptureCallback+0x238>)
 800d504:	681a      	ldr	r2, [r3, #0]
 800d506:	4b6d      	ldr	r3, [pc, #436]	; (800d6bc <HAL_TIM_IC_CaptureCallback+0x234>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	1ad3      	subs	r3, r2, r3
 800d50c:	4a6d      	ldr	r2, [pc, #436]	; (800d6c4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800d50e:	6013      	str	r3, [r2, #0]
 800d510:	e00d      	b.n	800d52e <HAL_TIM_IC_CaptureCallback+0xa6>
			}/* Else subtract the first value from maximum uint32 value and add the second value. */
			else if(Tim5_InputCompare_ValueOne_ChannelThree > Tim5_InputCompare_ValueTwo_ChannelThree)
 800d512:	4b6a      	ldr	r3, [pc, #424]	; (800d6bc <HAL_TIM_IC_CaptureCallback+0x234>)
 800d514:	681a      	ldr	r2, [r3, #0]
 800d516:	4b6a      	ldr	r3, [pc, #424]	; (800d6c0 <HAL_TIM_IC_CaptureCallback+0x238>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d907      	bls.n	800d52e <HAL_TIM_IC_CaptureCallback+0xa6>
			{
				Tim5_Difference_ChannelThree = (0xFFFFFFFF - Tim5_InputCompare_ValueOne_ChannelThree) + Tim5_InputCompare_ValueTwo_ChannelThree;
 800d51e:	4b68      	ldr	r3, [pc, #416]	; (800d6c0 <HAL_TIM_IC_CaptureCallback+0x238>)
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	4b66      	ldr	r3, [pc, #408]	; (800d6bc <HAL_TIM_IC_CaptureCallback+0x234>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	1ad3      	subs	r3, r2, r3
 800d528:	3b01      	subs	r3, #1
 800d52a:	4a66      	ldr	r2, [pc, #408]	; (800d6c4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800d52c:	6013      	str	r3, [r2, #0]
			else
			{
				/* do nothing */
			}
			/* Calculate the distance the sound traveled between the first measurement and the second. */
			Tim5_CalculatedDistance_ChannelThree = Tim5_Difference_ChannelThree * 0.034 / 2;
 800d52e:	4b65      	ldr	r3, [pc, #404]	; (800d6c4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	4618      	mov	r0, r3
 800d534:	f7f2 ffe6 	bl	8000504 <__aeabi_ui2d>
 800d538:	a35d      	add	r3, pc, #372	; (adr r3, 800d6b0 <HAL_TIM_IC_CaptureCallback+0x228>)
 800d53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53e:	f7f3 f85b 	bl	80005f8 <__aeabi_dmul>
 800d542:	4602      	mov	r2, r0
 800d544:	460b      	mov	r3, r1
 800d546:	4610      	mov	r0, r2
 800d548:	4619      	mov	r1, r3
 800d54a:	f04f 0200 	mov.w	r2, #0
 800d54e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d552:	f7f3 f97b 	bl	800084c <__aeabi_ddiv>
 800d556:	4602      	mov	r2, r0
 800d558:	460b      	mov	r3, r1
 800d55a:	4610      	mov	r0, r2
 800d55c:	4619      	mov	r1, r3
 800d55e:	f7f3 fa5d 	bl	8000a1c <__aeabi_d2uiz>
 800d562:	4603      	mov	r3, r0
 800d564:	b2da      	uxtb	r2, r3
 800d566:	4b58      	ldr	r3, [pc, #352]	; (800d6c8 <HAL_TIM_IC_CaptureCallback+0x240>)
 800d568:	701a      	strb	r2, [r3, #0]
			/* Set the flag to low. */
			Tim5_InputCaptureFlag_ChannelThree = STD_LOW;
 800d56a:	4b53      	ldr	r3, [pc, #332]	; (800d6b8 <HAL_TIM_IC_CaptureCallback+0x230>)
 800d56c:	2200      	movs	r2, #0
 800d56e:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	6a1a      	ldr	r2, [r3, #32]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f022 020a 	bic.w	r2, r2, #10
 800d57e:	621a      	str	r2, [r3, #32]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	6a12      	ldr	r2, [r2, #32]
 800d58a:	621a      	str	r2, [r3, #32]
			/* Disable the interrupt for the timer 5 channel 3. */
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC1);
 800d58c:	4b4f      	ldr	r3, [pc, #316]	; (800d6cc <HAL_TIM_IC_CaptureCallback+0x244>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	68da      	ldr	r2, [r3, #12]
 800d592:	4b4e      	ldr	r3, [pc, #312]	; (800d6cc <HAL_TIM_IC_CaptureCallback+0x244>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f022 0202 	bic.w	r2, r2, #2
 800d59a:	60da      	str	r2, [r3, #12]
		{
			/* do nothing */
		}
	}/* If channel 4 requests. */

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	7f1b      	ldrb	r3, [r3, #28]
 800d5a0:	2b02      	cmp	r3, #2
 800d5a2:	f040 8081 	bne.w	800d6a8 <HAL_TIM_IC_CaptureCallback+0x220>
	{
		/* Check if the first input capture has been received. */
		if (Tim5_InputCaptureFlag_ChannelFour == STD_LOW)
 800d5a6:	4b4a      	ldr	r3, [pc, #296]	; (800d6d0 <HAL_TIM_IC_CaptureCallback+0x248>)
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d11a      	bne.n	800d5e4 <HAL_TIM_IC_CaptureCallback+0x15c>
		{
			/* Store the input capture value. */
			Tim5_InputCompare_ValueOne_ChannelFour = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800d5ae:	2104      	movs	r1, #4
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f7fd fe15 	bl	800b1e0 <HAL_TIM_ReadCapturedValue>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	4a46      	ldr	r2, [pc, #280]	; (800d6d4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800d5ba:	6013      	str	r3, [r2, #0]
			/* Set the flag to high. */
			Tim5_InputCaptureFlag_ChannelFour = STD_HIGH;
 800d5bc:	4b44      	ldr	r3, [pc, #272]	; (800d6d0 <HAL_TIM_IC_CaptureCallback+0x248>)
 800d5be:	2201      	movs	r2, #1
 800d5c0:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	6a1a      	ldr	r2, [r3, #32]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d5d0:	621a      	str	r2, [r3, #32]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	6a1a      	ldr	r2, [r3, #32]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f042 0220 	orr.w	r2, r2, #32
 800d5e0:	621a      	str	r2, [r3, #32]
	}
	else
	{
		/* do nothing */
	}
}
 800d5e2:	e061      	b.n	800d6a8 <HAL_TIM_IC_CaptureCallback+0x220>
		else if(Tim5_InputCaptureFlag_ChannelFour == STD_HIGH)
 800d5e4:	4b3a      	ldr	r3, [pc, #232]	; (800d6d0 <HAL_TIM_IC_CaptureCallback+0x248>)
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d15d      	bne.n	800d6a8 <HAL_TIM_IC_CaptureCallback+0x220>
			Tim5_InputCompare_ValueTwo_ChannelFour = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800d5ec:	2104      	movs	r1, #4
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f7fd fdf6 	bl	800b1e0 <HAL_TIM_ReadCapturedValue>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	4a38      	ldr	r2, [pc, #224]	; (800d6d8 <HAL_TIM_IC_CaptureCallback+0x250>)
 800d5f8:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	2200      	movs	r2, #0
 800d600:	625a      	str	r2, [r3, #36]	; 0x24
			if (Tim5_InputCompare_ValueTwo_ChannelFour > Tim5_InputCompare_ValueOne_ChannelFour)
 800d602:	4b35      	ldr	r3, [pc, #212]	; (800d6d8 <HAL_TIM_IC_CaptureCallback+0x250>)
 800d604:	681a      	ldr	r2, [r3, #0]
 800d606:	4b33      	ldr	r3, [pc, #204]	; (800d6d4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d907      	bls.n	800d61e <HAL_TIM_IC_CaptureCallback+0x196>
				Tim5_Difference_ChannelFour = Tim5_InputCompare_ValueTwo_ChannelFour - Tim5_InputCompare_ValueOne_ChannelFour;
 800d60e:	4b32      	ldr	r3, [pc, #200]	; (800d6d8 <HAL_TIM_IC_CaptureCallback+0x250>)
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	4b30      	ldr	r3, [pc, #192]	; (800d6d4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	1ad3      	subs	r3, r2, r3
 800d618:	4a30      	ldr	r2, [pc, #192]	; (800d6dc <HAL_TIM_IC_CaptureCallback+0x254>)
 800d61a:	6013      	str	r3, [r2, #0]
 800d61c:	e00d      	b.n	800d63a <HAL_TIM_IC_CaptureCallback+0x1b2>
			else if(Tim5_InputCompare_ValueOne_ChannelFour > Tim5_InputCompare_ValueTwo_ChannelFour)
 800d61e:	4b2d      	ldr	r3, [pc, #180]	; (800d6d4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800d620:	681a      	ldr	r2, [r3, #0]
 800d622:	4b2d      	ldr	r3, [pc, #180]	; (800d6d8 <HAL_TIM_IC_CaptureCallback+0x250>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	429a      	cmp	r2, r3
 800d628:	d907      	bls.n	800d63a <HAL_TIM_IC_CaptureCallback+0x1b2>
				Tim5_Difference_ChannelFour = (0xFFFFFFFF - Tim5_InputCompare_ValueOne_ChannelFour) + Tim5_InputCompare_ValueTwo_ChannelFour;
 800d62a:	4b2b      	ldr	r3, [pc, #172]	; (800d6d8 <HAL_TIM_IC_CaptureCallback+0x250>)
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	4b29      	ldr	r3, [pc, #164]	; (800d6d4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	1ad3      	subs	r3, r2, r3
 800d634:	3b01      	subs	r3, #1
 800d636:	4a29      	ldr	r2, [pc, #164]	; (800d6dc <HAL_TIM_IC_CaptureCallback+0x254>)
 800d638:	6013      	str	r3, [r2, #0]
			Tim5_CalculatedDistance_ChannelFour = Tim5_Difference_ChannelFour * 0.034 / 2;
 800d63a:	4b28      	ldr	r3, [pc, #160]	; (800d6dc <HAL_TIM_IC_CaptureCallback+0x254>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4618      	mov	r0, r3
 800d640:	f7f2 ff60 	bl	8000504 <__aeabi_ui2d>
 800d644:	a31a      	add	r3, pc, #104	; (adr r3, 800d6b0 <HAL_TIM_IC_CaptureCallback+0x228>)
 800d646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64a:	f7f2 ffd5 	bl	80005f8 <__aeabi_dmul>
 800d64e:	4602      	mov	r2, r0
 800d650:	460b      	mov	r3, r1
 800d652:	4610      	mov	r0, r2
 800d654:	4619      	mov	r1, r3
 800d656:	f04f 0200 	mov.w	r2, #0
 800d65a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d65e:	f7f3 f8f5 	bl	800084c <__aeabi_ddiv>
 800d662:	4602      	mov	r2, r0
 800d664:	460b      	mov	r3, r1
 800d666:	4610      	mov	r0, r2
 800d668:	4619      	mov	r1, r3
 800d66a:	f7f3 f9d7 	bl	8000a1c <__aeabi_d2uiz>
 800d66e:	4603      	mov	r3, r0
 800d670:	b2da      	uxtb	r2, r3
 800d672:	4b1b      	ldr	r3, [pc, #108]	; (800d6e0 <HAL_TIM_IC_CaptureCallback+0x258>)
 800d674:	701a      	strb	r2, [r3, #0]
			Tim5_InputCaptureFlag_ChannelFour = 0;
 800d676:	4b16      	ldr	r3, [pc, #88]	; (800d6d0 <HAL_TIM_IC_CaptureCallback+0x248>)
 800d678:	2200      	movs	r2, #0
 800d67a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	6a1a      	ldr	r2, [r3, #32]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d68a:	621a      	str	r2, [r3, #32]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	6a12      	ldr	r2, [r2, #32]
 800d696:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC2);
 800d698:	4b0c      	ldr	r3, [pc, #48]	; (800d6cc <HAL_TIM_IC_CaptureCallback+0x244>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	68da      	ldr	r2, [r3, #12]
 800d69e:	4b0b      	ldr	r3, [pc, #44]	; (800d6cc <HAL_TIM_IC_CaptureCallback+0x244>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f022 0204 	bic.w	r2, r2, #4
 800d6a6:	60da      	str	r2, [r3, #12]
}
 800d6a8:	bf00      	nop
 800d6aa:	3708      	adds	r7, #8
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}
 800d6b0:	b020c49c 	.word	0xb020c49c
 800d6b4:	3fa16872 	.word	0x3fa16872
 800d6b8:	200008c4 	.word	0x200008c4
 800d6bc:	200008b8 	.word	0x200008b8
 800d6c0:	200008bc 	.word	0x200008bc
 800d6c4:	200008c0 	.word	0x200008c0
 800d6c8:	200008c5 	.word	0x200008c5
 800d6cc:	200006ec 	.word	0x200006ec
 800d6d0:	200008d4 	.word	0x200008d4
 800d6d4:	200008c8 	.word	0x200008c8
 800d6d8:	200008cc 	.word	0x200008cc
 800d6dc:	200008d0 	.word	0x200008d0
 800d6e0:	200008d5 	.word	0x200008d5

0800d6e4 <Tim_Init>:
/***********************************************************************************
* Function: Tim_Init										   			           *
* Description: Peripheral initialization.									       *
************************************************************************************/
StdReturnType Tim_Init(uint8 TimerChannel)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b084      	sub	sp, #16
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	71fb      	strb	r3, [r7, #7]
	/* Set the timer channel value into a local variable. */
	uint8 localValue = TimerChannel;
 800d6ee:	79fb      	ldrb	r3, [r7, #7]
 800d6f0:	73fb      	strb	r3, [r7, #15]
	switch(localValue)
 800d6f2:	7bfb      	ldrb	r3, [r7, #15]
 800d6f4:	3b02      	subs	r3, #2
 800d6f6:	2b03      	cmp	r3, #3
 800d6f8:	f200 81f4 	bhi.w	800dae4 <Tim_Init+0x400>
 800d6fc:	a201      	add	r2, pc, #4	; (adr r2, 800d704 <Tim_Init+0x20>)
 800d6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d702:	bf00      	nop
 800d704:	0800d715 	.word	0x0800d715
 800d708:	0800d801 	.word	0x0800d801
 800d70c:	0800d925 	.word	0x0800d925
 800d710:	0800d9fb 	.word	0x0800d9fb
	{
		/* Initialize the timer two. */
		case TIMER_TWO:
			/* Configure the timer parameters. */
			htim2.Instance = TIM2;
 800d714:	4b7a      	ldr	r3, [pc, #488]	; (800d900 <Tim_Init+0x21c>)
 800d716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d71a:	601a      	str	r2, [r3, #0]
			htim2.Init.Prescaler = 1000-1;
 800d71c:	4b78      	ldr	r3, [pc, #480]	; (800d900 <Tim_Init+0x21c>)
 800d71e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d722:	605a      	str	r2, [r3, #4]
			htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d724:	4b76      	ldr	r3, [pc, #472]	; (800d900 <Tim_Init+0x21c>)
 800d726:	2200      	movs	r2, #0
 800d728:	609a      	str	r2, [r3, #8]
			htim2.Init.Period = 2000-1;
 800d72a:	4b75      	ldr	r3, [pc, #468]	; (800d900 <Tim_Init+0x21c>)
 800d72c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800d730:	60da      	str	r2, [r3, #12]
			htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d732:	4b73      	ldr	r3, [pc, #460]	; (800d900 <Tim_Init+0x21c>)
 800d734:	2200      	movs	r2, #0
 800d736:	611a      	str	r2, [r3, #16]
			htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d738:	4b71      	ldr	r3, [pc, #452]	; (800d900 <Tim_Init+0x21c>)
 800d73a:	2200      	movs	r2, #0
 800d73c:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800d73e:	4870      	ldr	r0, [pc, #448]	; (800d900 <Tim_Init+0x21c>)
 800d740:	f7fc fdac 	bl	800a29c <HAL_TIM_Base_Init>
 800d744:	4603      	mov	r3, r0
 800d746:	2b00      	cmp	r3, #0
 800d748:	d002      	beq.n	800d750 <Tim_Init+0x6c>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800d74a:	486d      	ldr	r0, [pc, #436]	; (800d900 <Tim_Init+0x21c>)
 800d74c:	f000 fa1c 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the timer clock source. */
			sClockSourceConfig2.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d750:	4b6c      	ldr	r3, [pc, #432]	; (800d904 <Tim_Init+0x220>)
 800d752:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d756:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig2) != HAL_OK)
 800d758:	496a      	ldr	r1, [pc, #424]	; (800d904 <Tim_Init+0x220>)
 800d75a:	4869      	ldr	r0, [pc, #420]	; (800d900 <Tim_Init+0x21c>)
 800d75c:	f7fd fc78 	bl	800b050 <HAL_TIM_ConfigClockSource>
 800d760:	4603      	mov	r3, r0
 800d762:	2b00      	cmp	r3, #0
 800d764:	d002      	beq.n	800d76c <Tim_Init+0x88>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800d766:	4866      	ldr	r0, [pc, #408]	; (800d900 <Tim_Init+0x21c>)
 800d768:	f000 fa0e 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800d76c:	4864      	ldr	r0, [pc, #400]	; (800d900 <Tim_Init+0x21c>)
 800d76e:	f7fc fe53 	bl	800a418 <HAL_TIM_PWM_Init>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d002      	beq.n	800d77e <Tim_Init+0x9a>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800d778:	4861      	ldr	r0, [pc, #388]	; (800d900 <Tim_Init+0x21c>)
 800d77a:	f000 fa05 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the master slave mode and output trigger. */
			sMasterConfig2.MasterOutputTrigger = TIM_TRGO_RESET;
 800d77e:	4b62      	ldr	r3, [pc, #392]	; (800d908 <Tim_Init+0x224>)
 800d780:	2200      	movs	r2, #0
 800d782:	601a      	str	r2, [r3, #0]
			sMasterConfig2.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d784:	4b60      	ldr	r3, [pc, #384]	; (800d908 <Tim_Init+0x224>)
 800d786:	2200      	movs	r2, #0
 800d788:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig2) != HAL_OK)
 800d78a:	495f      	ldr	r1, [pc, #380]	; (800d908 <Tim_Init+0x224>)
 800d78c:	485c      	ldr	r0, [pc, #368]	; (800d900 <Tim_Init+0x21c>)
 800d78e:	f7fe fa01 	bl	800bb94 <HAL_TIMEx_MasterConfigSynchronization>
 800d792:	4603      	mov	r3, r0
 800d794:	2b00      	cmp	r3, #0
 800d796:	d002      	beq.n	800d79e <Tim_Init+0xba>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800d798:	4859      	ldr	r0, [pc, #356]	; (800d900 <Tim_Init+0x21c>)
 800d79a:	f000 f9f5 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the PWM parameters. */
			sConfigOC2.OCMode = TIM_OCMODE_PWM1;
 800d79e:	4b5b      	ldr	r3, [pc, #364]	; (800d90c <Tim_Init+0x228>)
 800d7a0:	2260      	movs	r2, #96	; 0x60
 800d7a2:	601a      	str	r2, [r3, #0]
			sConfigOC2.Pulse = 0;
 800d7a4:	4b59      	ldr	r3, [pc, #356]	; (800d90c <Tim_Init+0x228>)
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	605a      	str	r2, [r3, #4]
			sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d7aa:	4b58      	ldr	r3, [pc, #352]	; (800d90c <Tim_Init+0x228>)
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	609a      	str	r2, [r3, #8]
			sConfigOC2.OCFastMode = TIM_OCFAST_ENABLE;
 800d7b0:	4b56      	ldr	r3, [pc, #344]	; (800d90c <Tim_Init+0x228>)
 800d7b2:	2204      	movs	r2, #4
 800d7b4:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_1) != HAL_OK)
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	4954      	ldr	r1, [pc, #336]	; (800d90c <Tim_Init+0x228>)
 800d7ba:	4851      	ldr	r0, [pc, #324]	; (800d900 <Tim_Init+0x21c>)
 800d7bc:	f7fd fb86 	bl	800aecc <HAL_TIM_PWM_ConfigChannel>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d002      	beq.n	800d7cc <Tim_Init+0xe8>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800d7c6:	484e      	ldr	r0, [pc, #312]	; (800d900 <Tim_Init+0x21c>)
 800d7c8:	f000 f9de 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_2) != HAL_OK)
 800d7cc:	2204      	movs	r2, #4
 800d7ce:	494f      	ldr	r1, [pc, #316]	; (800d90c <Tim_Init+0x228>)
 800d7d0:	484b      	ldr	r0, [pc, #300]	; (800d900 <Tim_Init+0x21c>)
 800d7d2:	f7fd fb7b 	bl	800aecc <HAL_TIM_PWM_ConfigChannel>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d002      	beq.n	800d7e2 <Tim_Init+0xfe>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800d7dc:	4848      	ldr	r0, [pc, #288]	; (800d900 <Tim_Init+0x21c>)
 800d7de:	f000 f9d3 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_3) != HAL_OK)
 800d7e2:	2208      	movs	r2, #8
 800d7e4:	4949      	ldr	r1, [pc, #292]	; (800d90c <Tim_Init+0x228>)
 800d7e6:	4846      	ldr	r0, [pc, #280]	; (800d900 <Tim_Init+0x21c>)
 800d7e8:	f7fd fb70 	bl	800aecc <HAL_TIM_PWM_ConfigChannel>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d002      	beq.n	800d7f8 <Tim_Init+0x114>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800d7f2:	4843      	ldr	r0, [pc, #268]	; (800d900 <Tim_Init+0x21c>)
 800d7f4:	f000 f9c8 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the GPIO. */
			HAL_TIM_MspPostInit(&htim2);
 800d7f8:	4841      	ldr	r0, [pc, #260]	; (800d900 <Tim_Init+0x21c>)
 800d7fa:	f7f7 fb3f 	bl	8004e7c <HAL_TIM_MspPostInit>

			break;
 800d7fe:	e174      	b.n	800daea <Tim_Init+0x406>
		/* Initialize the timer three. */
		case TIMER_THREE:
			/* Configure the timer parameters. */
			htim3.Instance = TIM3;
 800d800:	4b43      	ldr	r3, [pc, #268]	; (800d910 <Tim_Init+0x22c>)
 800d802:	4a44      	ldr	r2, [pc, #272]	; (800d914 <Tim_Init+0x230>)
 800d804:	601a      	str	r2, [r3, #0]
			htim3.Init.Prescaler = 1000-1;
 800d806:	4b42      	ldr	r3, [pc, #264]	; (800d910 <Tim_Init+0x22c>)
 800d808:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d80c:	605a      	str	r2, [r3, #4]
			htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d80e:	4b40      	ldr	r3, [pc, #256]	; (800d910 <Tim_Init+0x22c>)
 800d810:	2200      	movs	r2, #0
 800d812:	609a      	str	r2, [r3, #8]
			htim3.Init.Period = 2000-1;
 800d814:	4b3e      	ldr	r3, [pc, #248]	; (800d910 <Tim_Init+0x22c>)
 800d816:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800d81a:	60da      	str	r2, [r3, #12]
			htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d81c:	4b3c      	ldr	r3, [pc, #240]	; (800d910 <Tim_Init+0x22c>)
 800d81e:	2200      	movs	r2, #0
 800d820:	611a      	str	r2, [r3, #16]
			htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d822:	4b3b      	ldr	r3, [pc, #236]	; (800d910 <Tim_Init+0x22c>)
 800d824:	2200      	movs	r2, #0
 800d826:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800d828:	4839      	ldr	r0, [pc, #228]	; (800d910 <Tim_Init+0x22c>)
 800d82a:	f7fc fd37 	bl	800a29c <HAL_TIM_Base_Init>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d002      	beq.n	800d83a <Tim_Init+0x156>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800d834:	4836      	ldr	r0, [pc, #216]	; (800d910 <Tim_Init+0x22c>)
 800d836:	f000 f9a7 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Set the clock source. */
			sClockSourceConfig3.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d83a:	4b37      	ldr	r3, [pc, #220]	; (800d918 <Tim_Init+0x234>)
 800d83c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d840:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig3) != HAL_OK)
 800d842:	4935      	ldr	r1, [pc, #212]	; (800d918 <Tim_Init+0x234>)
 800d844:	4832      	ldr	r0, [pc, #200]	; (800d910 <Tim_Init+0x22c>)
 800d846:	f7fd fc03 	bl	800b050 <HAL_TIM_ConfigClockSource>
 800d84a:	4603      	mov	r3, r0
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d002      	beq.n	800d856 <Tim_Init+0x172>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800d850:	482f      	ldr	r0, [pc, #188]	; (800d910 <Tim_Init+0x22c>)
 800d852:	f000 f999 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800d856:	482e      	ldr	r0, [pc, #184]	; (800d910 <Tim_Init+0x22c>)
 800d858:	f7fc fdde 	bl	800a418 <HAL_TIM_PWM_Init>
 800d85c:	4603      	mov	r3, r0
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d002      	beq.n	800d868 <Tim_Init+0x184>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800d862:	482b      	ldr	r0, [pc, #172]	; (800d910 <Tim_Init+0x22c>)
 800d864:	f000 f990 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure master slave mode. */
			sMasterConfig3.MasterOutputTrigger = TIM_TRGO_RESET;
 800d868:	4b2c      	ldr	r3, [pc, #176]	; (800d91c <Tim_Init+0x238>)
 800d86a:	2200      	movs	r2, #0
 800d86c:	601a      	str	r2, [r3, #0]
			sMasterConfig3.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d86e:	4b2b      	ldr	r3, [pc, #172]	; (800d91c <Tim_Init+0x238>)
 800d870:	2200      	movs	r2, #0
 800d872:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig3) != HAL_OK)
 800d874:	4929      	ldr	r1, [pc, #164]	; (800d91c <Tim_Init+0x238>)
 800d876:	4826      	ldr	r0, [pc, #152]	; (800d910 <Tim_Init+0x22c>)
 800d878:	f7fe f98c 	bl	800bb94 <HAL_TIMEx_MasterConfigSynchronization>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d002      	beq.n	800d888 <Tim_Init+0x1a4>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800d882:	4823      	ldr	r0, [pc, #140]	; (800d910 <Tim_Init+0x22c>)
 800d884:	f000 f980 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure PWM parameters. */
			sConfigOC3.OCMode = TIM_OCMODE_PWM1;
 800d888:	4b25      	ldr	r3, [pc, #148]	; (800d920 <Tim_Init+0x23c>)
 800d88a:	2260      	movs	r2, #96	; 0x60
 800d88c:	601a      	str	r2, [r3, #0]
			sConfigOC3.Pulse = 0;
 800d88e:	4b24      	ldr	r3, [pc, #144]	; (800d920 <Tim_Init+0x23c>)
 800d890:	2200      	movs	r2, #0
 800d892:	605a      	str	r2, [r3, #4]
			sConfigOC3.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d894:	4b22      	ldr	r3, [pc, #136]	; (800d920 <Tim_Init+0x23c>)
 800d896:	2200      	movs	r2, #0
 800d898:	609a      	str	r2, [r3, #8]
			sConfigOC3.OCFastMode = TIM_OCFAST_ENABLE;
 800d89a:	4b21      	ldr	r3, [pc, #132]	; (800d920 <Tim_Init+0x23c>)
 800d89c:	2204      	movs	r2, #4
 800d89e:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_1) != HAL_OK)
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	491f      	ldr	r1, [pc, #124]	; (800d920 <Tim_Init+0x23c>)
 800d8a4:	481a      	ldr	r0, [pc, #104]	; (800d910 <Tim_Init+0x22c>)
 800d8a6:	f7fd fb11 	bl	800aecc <HAL_TIM_PWM_ConfigChannel>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d002      	beq.n	800d8b6 <Tim_Init+0x1d2>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800d8b0:	4817      	ldr	r0, [pc, #92]	; (800d910 <Tim_Init+0x22c>)
 800d8b2:	f000 f969 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_2) != HAL_OK)
 800d8b6:	2204      	movs	r2, #4
 800d8b8:	4919      	ldr	r1, [pc, #100]	; (800d920 <Tim_Init+0x23c>)
 800d8ba:	4815      	ldr	r0, [pc, #84]	; (800d910 <Tim_Init+0x22c>)
 800d8bc:	f7fd fb06 	bl	800aecc <HAL_TIM_PWM_ConfigChannel>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d002      	beq.n	800d8cc <Tim_Init+0x1e8>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800d8c6:	4812      	ldr	r0, [pc, #72]	; (800d910 <Tim_Init+0x22c>)
 800d8c8:	f000 f95e 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_3) != HAL_OK)
 800d8cc:	2208      	movs	r2, #8
 800d8ce:	4914      	ldr	r1, [pc, #80]	; (800d920 <Tim_Init+0x23c>)
 800d8d0:	480f      	ldr	r0, [pc, #60]	; (800d910 <Tim_Init+0x22c>)
 800d8d2:	f7fd fafb 	bl	800aecc <HAL_TIM_PWM_ConfigChannel>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d002      	beq.n	800d8e2 <Tim_Init+0x1fe>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800d8dc:	480c      	ldr	r0, [pc, #48]	; (800d910 <Tim_Init+0x22c>)
 800d8de:	f000 f953 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_4) != HAL_OK)
 800d8e2:	220c      	movs	r2, #12
 800d8e4:	490e      	ldr	r1, [pc, #56]	; (800d920 <Tim_Init+0x23c>)
 800d8e6:	480a      	ldr	r0, [pc, #40]	; (800d910 <Tim_Init+0x22c>)
 800d8e8:	f7fd faf0 	bl	800aecc <HAL_TIM_PWM_ConfigChannel>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d002      	beq.n	800d8f8 <Tim_Init+0x214>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800d8f2:	4807      	ldr	r0, [pc, #28]	; (800d910 <Tim_Init+0x22c>)
 800d8f4:	f000 f948 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure timer GPIO. */
			HAL_TIM_MspPostInit(&htim3);
 800d8f8:	4805      	ldr	r0, [pc, #20]	; (800d910 <Tim_Init+0x22c>)
 800d8fa:	f7f7 fabf 	bl	8004e7c <HAL_TIM_MspPostInit>
			break;
 800d8fe:	e0f4      	b.n	800daea <Tim_Init+0x406>
 800d900:	200004d0 	.word	0x200004d0
 800d904:	200008d8 	.word	0x200008d8
 800d908:	200008e8 	.word	0x200008e8
 800d90c:	200008f0 	.word	0x200008f0
 800d910:	20000584 	.word	0x20000584
 800d914:	40000400 	.word	0x40000400
 800d918:	20000944 	.word	0x20000944
 800d91c:	20000954 	.word	0x20000954
 800d920:	2000090c 	.word	0x2000090c
		/* Initialize the timer four. */
		case TIMER_FOUR:
			/* Configure timer parameters. */
			htim4.Instance = TIM4;
 800d924:	4b73      	ldr	r3, [pc, #460]	; (800daf4 <Tim_Init+0x410>)
 800d926:	4a74      	ldr	r2, [pc, #464]	; (800daf8 <Tim_Init+0x414>)
 800d928:	601a      	str	r2, [r3, #0]
			htim4.Init.Prescaler = 10000-1;
 800d92a:	4b72      	ldr	r3, [pc, #456]	; (800daf4 <Tim_Init+0x410>)
 800d92c:	f242 720f 	movw	r2, #9999	; 0x270f
 800d930:	605a      	str	r2, [r3, #4]
			htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d932:	4b70      	ldr	r3, [pc, #448]	; (800daf4 <Tim_Init+0x410>)
 800d934:	2200      	movs	r2, #0
 800d936:	609a      	str	r2, [r3, #8]
			htim4.Init.Period = 1000-1;
 800d938:	4b6e      	ldr	r3, [pc, #440]	; (800daf4 <Tim_Init+0x410>)
 800d93a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d93e:	60da      	str	r2, [r3, #12]
			htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d940:	4b6c      	ldr	r3, [pc, #432]	; (800daf4 <Tim_Init+0x410>)
 800d942:	2200      	movs	r2, #0
 800d944:	611a      	str	r2, [r3, #16]
			htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d946:	4b6b      	ldr	r3, [pc, #428]	; (800daf4 <Tim_Init+0x410>)
 800d948:	2200      	movs	r2, #0
 800d94a:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800d94c:	4869      	ldr	r0, [pc, #420]	; (800daf4 <Tim_Init+0x410>)
 800d94e:	f7fc fca5 	bl	800a29c <HAL_TIM_Base_Init>
 800d952:	4603      	mov	r3, r0
 800d954:	2b00      	cmp	r3, #0
 800d956:	d002      	beq.n	800d95e <Tim_Init+0x27a>
			{
				HAL_TIM_ErrorCallback(&htim4);
 800d958:	4866      	ldr	r0, [pc, #408]	; (800daf4 <Tim_Init+0x410>)
 800d95a:	f000 f915 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the clock source. */
			sClockSourceConfig4.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d95e:	4b67      	ldr	r3, [pc, #412]	; (800dafc <Tim_Init+0x418>)
 800d960:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d964:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig4) != HAL_OK)
 800d966:	4965      	ldr	r1, [pc, #404]	; (800dafc <Tim_Init+0x418>)
 800d968:	4862      	ldr	r0, [pc, #392]	; (800daf4 <Tim_Init+0x410>)
 800d96a:	f7fd fb71 	bl	800b050 <HAL_TIM_ConfigClockSource>
 800d96e:	4603      	mov	r3, r0
 800d970:	2b00      	cmp	r3, #0
 800d972:	d002      	beq.n	800d97a <Tim_Init+0x296>
			{
				HAL_TIM_ErrorCallback(&htim4);
 800d974:	485f      	ldr	r0, [pc, #380]	; (800daf4 <Tim_Init+0x410>)
 800d976:	f000 f907 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800d97a:	485e      	ldr	r0, [pc, #376]	; (800daf4 <Tim_Init+0x410>)
 800d97c:	f7fc fd4c 	bl	800a418 <HAL_TIM_PWM_Init>
 800d980:	4603      	mov	r3, r0
 800d982:	2b00      	cmp	r3, #0
 800d984:	d002      	beq.n	800d98c <Tim_Init+0x2a8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 800d986:	485b      	ldr	r0, [pc, #364]	; (800daf4 <Tim_Init+0x410>)
 800d988:	f000 f8fe 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the master slave mode. */
			sMasterConfig4.MasterOutputTrigger = TIM_TRGO_RESET;
 800d98c:	4b5c      	ldr	r3, [pc, #368]	; (800db00 <Tim_Init+0x41c>)
 800d98e:	2200      	movs	r2, #0
 800d990:	601a      	str	r2, [r3, #0]
			sMasterConfig4.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d992:	4b5b      	ldr	r3, [pc, #364]	; (800db00 <Tim_Init+0x41c>)
 800d994:	2200      	movs	r2, #0
 800d996:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig4) != HAL_OK)
 800d998:	4959      	ldr	r1, [pc, #356]	; (800db00 <Tim_Init+0x41c>)
 800d99a:	4856      	ldr	r0, [pc, #344]	; (800daf4 <Tim_Init+0x410>)
 800d99c:	f7fe f8fa 	bl	800bb94 <HAL_TIMEx_MasterConfigSynchronization>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d002      	beq.n	800d9ac <Tim_Init+0x2c8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 800d9a6:	4853      	ldr	r0, [pc, #332]	; (800daf4 <Tim_Init+0x410>)
 800d9a8:	f000 f8ee 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the PWM parameters. */
			sConfigOC4.OCMode = TIM_OCMODE_PWM1;
 800d9ac:	4b55      	ldr	r3, [pc, #340]	; (800db04 <Tim_Init+0x420>)
 800d9ae:	2260      	movs	r2, #96	; 0x60
 800d9b0:	601a      	str	r2, [r3, #0]
			sConfigOC4.Pulse = 999;
 800d9b2:	4b54      	ldr	r3, [pc, #336]	; (800db04 <Tim_Init+0x420>)
 800d9b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d9b8:	605a      	str	r2, [r3, #4]
			sConfigOC4.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d9ba:	4b52      	ldr	r3, [pc, #328]	; (800db04 <Tim_Init+0x420>)
 800d9bc:	2200      	movs	r2, #0
 800d9be:	609a      	str	r2, [r3, #8]
			sConfigOC4.OCFastMode = TIM_OCFAST_DISABLE;
 800d9c0:	4b50      	ldr	r3, [pc, #320]	; (800db04 <Tim_Init+0x420>)
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC4, TIM_CHANNEL_3) != HAL_OK)
 800d9c6:	2208      	movs	r2, #8
 800d9c8:	494e      	ldr	r1, [pc, #312]	; (800db04 <Tim_Init+0x420>)
 800d9ca:	484a      	ldr	r0, [pc, #296]	; (800daf4 <Tim_Init+0x410>)
 800d9cc:	f7fd fa7e 	bl	800aecc <HAL_TIM_PWM_ConfigChannel>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d002      	beq.n	800d9dc <Tim_Init+0x2f8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 800d9d6:	4847      	ldr	r0, [pc, #284]	; (800daf4 <Tim_Init+0x410>)
 800d9d8:	f000 f8d6 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC4, TIM_CHANNEL_4) != HAL_OK)
 800d9dc:	220c      	movs	r2, #12
 800d9de:	4949      	ldr	r1, [pc, #292]	; (800db04 <Tim_Init+0x420>)
 800d9e0:	4844      	ldr	r0, [pc, #272]	; (800daf4 <Tim_Init+0x410>)
 800d9e2:	f7fd fa73 	bl	800aecc <HAL_TIM_PWM_ConfigChannel>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d002      	beq.n	800d9f2 <Tim_Init+0x30e>
			{
				HAL_TIM_ErrorCallback(&htim4);
 800d9ec:	4841      	ldr	r0, [pc, #260]	; (800daf4 <Tim_Init+0x410>)
 800d9ee:	f000 f8cb 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the timer GPIO. */
			HAL_TIM_MspPostInit(&htim4);
 800d9f2:	4840      	ldr	r0, [pc, #256]	; (800daf4 <Tim_Init+0x410>)
 800d9f4:	f7f7 fa42 	bl	8004e7c <HAL_TIM_MspPostInit>
			break;
 800d9f8:	e077      	b.n	800daea <Tim_Init+0x406>
		/* Initialize the timer five. */
		case TIMER_FIVE:
			htim5.Instance = TIM5;
 800d9fa:	4b43      	ldr	r3, [pc, #268]	; (800db08 <Tim_Init+0x424>)
 800d9fc:	4a43      	ldr	r2, [pc, #268]	; (800db0c <Tim_Init+0x428>)
 800d9fe:	601a      	str	r2, [r3, #0]
			htim5.Init.Prescaler = 100-1;
 800da00:	4b41      	ldr	r3, [pc, #260]	; (800db08 <Tim_Init+0x424>)
 800da02:	2263      	movs	r2, #99	; 0x63
 800da04:	605a      	str	r2, [r3, #4]
			htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800da06:	4b40      	ldr	r3, [pc, #256]	; (800db08 <Tim_Init+0x424>)
 800da08:	2200      	movs	r2, #0
 800da0a:	609a      	str	r2, [r3, #8]
			htim5.Init.Period = 0xffffffff;
 800da0c:	4b3e      	ldr	r3, [pc, #248]	; (800db08 <Tim_Init+0x424>)
 800da0e:	f04f 32ff 	mov.w	r2, #4294967295
 800da12:	60da      	str	r2, [r3, #12]
			htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800da14:	4b3c      	ldr	r3, [pc, #240]	; (800db08 <Tim_Init+0x424>)
 800da16:	2200      	movs	r2, #0
 800da18:	611a      	str	r2, [r3, #16]
			htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800da1a:	4b3b      	ldr	r3, [pc, #236]	; (800db08 <Tim_Init+0x424>)
 800da1c:	2200      	movs	r2, #0
 800da1e:	619a      	str	r2, [r3, #24]
			if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800da20:	4839      	ldr	r0, [pc, #228]	; (800db08 <Tim_Init+0x424>)
 800da22:	f7fc fc3b 	bl	800a29c <HAL_TIM_Base_Init>
 800da26:	4603      	mov	r3, r0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d002      	beq.n	800da32 <Tim_Init+0x34e>
			{
				HAL_TIM_ErrorCallback(&htim5);
 800da2c:	4836      	ldr	r0, [pc, #216]	; (800db08 <Tim_Init+0x424>)
 800da2e:	f000 f8ab 	bl	800db88 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sClockSourceConfig5.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800da32:	4b37      	ldr	r3, [pc, #220]	; (800db10 <Tim_Init+0x42c>)
 800da34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800da38:	601a      	str	r2, [r3, #0]
			if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig5) != HAL_OK)
 800da3a:	4935      	ldr	r1, [pc, #212]	; (800db10 <Tim_Init+0x42c>)
 800da3c:	4832      	ldr	r0, [pc, #200]	; (800db08 <Tim_Init+0x424>)
 800da3e:	f7fd fb07 	bl	800b050 <HAL_TIM_ConfigClockSource>
 800da42:	4603      	mov	r3, r0
 800da44:	2b00      	cmp	r3, #0
 800da46:	d002      	beq.n	800da4e <Tim_Init+0x36a>
			{
				HAL_TIM_ErrorCallback(&htim5);
 800da48:	482f      	ldr	r0, [pc, #188]	; (800db08 <Tim_Init+0x424>)
 800da4a:	f000 f89d 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800da4e:	482e      	ldr	r0, [pc, #184]	; (800db08 <Tim_Init+0x424>)
 800da50:	f7fc fef8 	bl	800a844 <HAL_TIM_IC_Init>
 800da54:	4603      	mov	r3, r0
 800da56:	2b00      	cmp	r3, #0
 800da58:	d002      	beq.n	800da60 <Tim_Init+0x37c>
			{
				HAL_TIM_ErrorCallback(&htim5);
 800da5a:	482b      	ldr	r0, [pc, #172]	; (800db08 <Tim_Init+0x424>)
 800da5c:	f000 f894 	bl	800db88 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sMasterConfig5.MasterOutputTrigger = TIM_TRGO_RESET;
 800da60:	4b2c      	ldr	r3, [pc, #176]	; (800db14 <Tim_Init+0x430>)
 800da62:	2200      	movs	r2, #0
 800da64:	601a      	str	r2, [r3, #0]
			sMasterConfig5.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800da66:	4b2b      	ldr	r3, [pc, #172]	; (800db14 <Tim_Init+0x430>)
 800da68:	2200      	movs	r2, #0
 800da6a:	605a      	str	r2, [r3, #4]
			if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig5) != HAL_OK)
 800da6c:	4929      	ldr	r1, [pc, #164]	; (800db14 <Tim_Init+0x430>)
 800da6e:	4826      	ldr	r0, [pc, #152]	; (800db08 <Tim_Init+0x424>)
 800da70:	f7fe f890 	bl	800bb94 <HAL_TIMEx_MasterConfigSynchronization>
 800da74:	4603      	mov	r3, r0
 800da76:	2b00      	cmp	r3, #0
 800da78:	d002      	beq.n	800da80 <Tim_Init+0x39c>
			{
				HAL_TIM_ErrorCallback(&htim5);
 800da7a:	4823      	ldr	r0, [pc, #140]	; (800db08 <Tim_Init+0x424>)
 800da7c:	f000 f884 	bl	800db88 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sConfigIC5.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800da80:	4b25      	ldr	r3, [pc, #148]	; (800db18 <Tim_Init+0x434>)
 800da82:	2200      	movs	r2, #0
 800da84:	601a      	str	r2, [r3, #0]
			sConfigIC5.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800da86:	4b24      	ldr	r3, [pc, #144]	; (800db18 <Tim_Init+0x434>)
 800da88:	2201      	movs	r2, #1
 800da8a:	605a      	str	r2, [r3, #4]
			sConfigIC5.ICPrescaler = TIM_ICPSC_DIV1;
 800da8c:	4b22      	ldr	r3, [pc, #136]	; (800db18 <Tim_Init+0x434>)
 800da8e:	2200      	movs	r2, #0
 800da90:	609a      	str	r2, [r3, #8]
			sConfigIC5.ICFilter = 0;
 800da92:	4b21      	ldr	r3, [pc, #132]	; (800db18 <Tim_Init+0x434>)
 800da94:	2200      	movs	r2, #0
 800da96:	60da      	str	r2, [r3, #12]
			if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC5, TIM_CHANNEL_1) != HAL_OK)
 800da98:	2200      	movs	r2, #0
 800da9a:	491f      	ldr	r1, [pc, #124]	; (800db18 <Tim_Init+0x434>)
 800da9c:	481a      	ldr	r0, [pc, #104]	; (800db08 <Tim_Init+0x424>)
 800da9e:	f7fd f979 	bl	800ad94 <HAL_TIM_IC_ConfigChannel>
 800daa2:	4603      	mov	r3, r0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d002      	beq.n	800daae <Tim_Init+0x3ca>
			{
				HAL_TIM_ErrorCallback(&htim5);
 800daa8:	4817      	ldr	r0, [pc, #92]	; (800db08 <Tim_Init+0x424>)
 800daaa:	f000 f86d 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC5, TIM_CHANNEL_2) != HAL_OK)
 800daae:	2204      	movs	r2, #4
 800dab0:	4919      	ldr	r1, [pc, #100]	; (800db18 <Tim_Init+0x434>)
 800dab2:	4815      	ldr	r0, [pc, #84]	; (800db08 <Tim_Init+0x424>)
 800dab4:	f7fd f96e 	bl	800ad94 <HAL_TIM_IC_ConfigChannel>
 800dab8:	4603      	mov	r3, r0
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d002      	beq.n	800dac4 <Tim_Init+0x3e0>
			{
				HAL_TIM_ErrorCallback(&htim5);
 800dabe:	4812      	ldr	r0, [pc, #72]	; (800db08 <Tim_Init+0x424>)
 800dac0:	f000 f862 	bl	800db88 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if(TimH_MainFunctionFirstCall == STD_LOW)
 800dac4:	4b15      	ldr	r3, [pc, #84]	; (800db1c <Tim_Init+0x438>)
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d10d      	bne.n	800dae8 <Tim_Init+0x404>
			{
				HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 800dacc:	2100      	movs	r1, #0
 800dace:	480e      	ldr	r0, [pc, #56]	; (800db08 <Tim_Init+0x424>)
 800dad0:	f7fc ff1e 	bl	800a910 <HAL_TIM_IC_Start_IT>
				HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 800dad4:	2104      	movs	r1, #4
 800dad6:	480c      	ldr	r0, [pc, #48]	; (800db08 <Tim_Init+0x424>)
 800dad8:	f7fc ff1a 	bl	800a910 <HAL_TIM_IC_Start_IT>
				TimH_MainFunctionFirstCall = STD_HIGH;
 800dadc:	4b0f      	ldr	r3, [pc, #60]	; (800db1c <Tim_Init+0x438>)
 800dade:	2201      	movs	r2, #1
 800dae0:	701a      	strb	r2, [r3, #0]
			else
			{
				/* do nothing */
			}

			break;
 800dae2:	e001      	b.n	800dae8 <Tim_Init+0x404>
		default:
			break;
 800dae4:	bf00      	nop
 800dae6:	e000      	b.n	800daea <Tim_Init+0x406>
			break;
 800dae8:	bf00      	nop
	}
	return E_OK;
 800daea:	2300      	movs	r3, #0
}
 800daec:	4618      	mov	r0, r3
 800daee:	3710      	adds	r7, #16
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}
 800daf4:	20000638 	.word	0x20000638
 800daf8:	40000800 	.word	0x40000800
 800dafc:	2000095c 	.word	0x2000095c
 800db00:	2000096c 	.word	0x2000096c
 800db04:	20000928 	.word	0x20000928
 800db08:	200006ec 	.word	0x200006ec
 800db0c:	40000c00 	.word	0x40000c00
 800db10:	20000974 	.word	0x20000974
 800db14:	20000984 	.word	0x20000984
 800db18:	2000098c 	.word	0x2000098c
 800db1c:	200008d6 	.word	0x200008d6

0800db20 <Tim_DeInit>:
/***********************************************************************************
* Function: Tim_DeInit										   			           *
* Description: Peripheral de-initialization.									   *
************************************************************************************/
StdReturnType Tim_DeInit(uint8 TimerChannel)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b084      	sub	sp, #16
 800db24:	af00      	add	r7, sp, #0
 800db26:	4603      	mov	r3, r0
 800db28:	71fb      	strb	r3, [r7, #7]
	/* Store the timer channel value into a local variable. */
	uint8 localVariable = TimerChannel;
 800db2a:	79fb      	ldrb	r3, [r7, #7]
 800db2c:	73fb      	strb	r3, [r7, #15]
	/* Process the request for timer de-init. */
	switch(localVariable)
 800db2e:	7bfb      	ldrb	r3, [r7, #15]
 800db30:	3b02      	subs	r3, #2
 800db32:	2b03      	cmp	r3, #3
 800db34:	d81a      	bhi.n	800db6c <Tim_DeInit+0x4c>
 800db36:	a201      	add	r2, pc, #4	; (adr r2, 800db3c <Tim_DeInit+0x1c>)
 800db38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db3c:	0800db4d 	.word	0x0800db4d
 800db40:	0800db55 	.word	0x0800db55
 800db44:	0800db5d 	.word	0x0800db5d
 800db48:	0800db65 	.word	0x0800db65
	{
		case TIMER_TWO:
			HAL_TIM_Base_MspDeInit(&htim2);
 800db4c:	480a      	ldr	r0, [pc, #40]	; (800db78 <Tim_DeInit+0x58>)
 800db4e:	f7f7 fa3f 	bl	8004fd0 <HAL_TIM_Base_MspDeInit>
			break;
 800db52:	e00c      	b.n	800db6e <Tim_DeInit+0x4e>
		case TIMER_THREE:
			HAL_TIM_Base_MspDeInit(&htim3);
 800db54:	4809      	ldr	r0, [pc, #36]	; (800db7c <Tim_DeInit+0x5c>)
 800db56:	f7f7 fa3b 	bl	8004fd0 <HAL_TIM_Base_MspDeInit>
			break;
 800db5a:	e008      	b.n	800db6e <Tim_DeInit+0x4e>
		case TIMER_FOUR:
			HAL_TIM_Base_MspDeInit(&htim4);
 800db5c:	4808      	ldr	r0, [pc, #32]	; (800db80 <Tim_DeInit+0x60>)
 800db5e:	f7f7 fa37 	bl	8004fd0 <HAL_TIM_Base_MspDeInit>
			break;
 800db62:	e004      	b.n	800db6e <Tim_DeInit+0x4e>
		case TIMER_FIVE:
			HAL_TIM_Base_MspDeInit(&htim5);
 800db64:	4807      	ldr	r0, [pc, #28]	; (800db84 <Tim_DeInit+0x64>)
 800db66:	f7f7 fa33 	bl	8004fd0 <HAL_TIM_Base_MspDeInit>
			break;
 800db6a:	e000      	b.n	800db6e <Tim_DeInit+0x4e>
		default:
			break;
 800db6c:	bf00      	nop
	}
	return E_OK;
 800db6e:	2300      	movs	r3, #0
}
 800db70:	4618      	mov	r0, r3
 800db72:	3710      	adds	r7, #16
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	200004d0 	.word	0x200004d0
 800db7c:	20000584 	.word	0x20000584
 800db80:	20000638 	.word	0x20000638
 800db84:	200006ec 	.word	0x200006ec

0800db88 <HAL_TIM_ErrorCallback>:
/***********************************************************************************
* Function: HAL_TIM_ErrorCallback										   		   *
* Description: Error callback called when timer fault occurs.					   *
************************************************************************************/
VOID HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
	/* Perform re-initialization of the peripheral in case of error. */
	if(htim->Instance == TIM2)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db98:	d10b      	bne.n	800dbb2 <HAL_TIM_ErrorCallback+0x2a>
	{
		SystemManager_Fault[TIMER2_ERROR]++;
 800db9a:	4b21      	ldr	r3, [pc, #132]	; (800dc20 <HAL_TIM_ErrorCallback+0x98>)
 800db9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db9e:	3301      	adds	r3, #1
 800dba0:	4a1f      	ldr	r2, [pc, #124]	; (800dc20 <HAL_TIM_ErrorCallback+0x98>)
 800dba2:	6593      	str	r3, [r2, #88]	; 0x58
		Tim_DeInit(TIMER_TWO);
 800dba4:	2002      	movs	r0, #2
 800dba6:	f7ff ffbb 	bl	800db20 <Tim_DeInit>
		Tim_Init(TIMER_TWO);
 800dbaa:	2002      	movs	r0, #2
 800dbac:	f7ff fd9a 	bl	800d6e4 <Tim_Init>
	}
	else
	{
		/* do nothing */
	}
}
 800dbb0:	e031      	b.n	800dc16 <HAL_TIM_ErrorCallback+0x8e>
	else if(htim->Instance == TIM3)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	4a1b      	ldr	r2, [pc, #108]	; (800dc24 <HAL_TIM_ErrorCallback+0x9c>)
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d10b      	bne.n	800dbd4 <HAL_TIM_ErrorCallback+0x4c>
		SystemManager_Fault[TIMER3_ERROR]++;
 800dbbc:	4b18      	ldr	r3, [pc, #96]	; (800dc20 <HAL_TIM_ErrorCallback+0x98>)
 800dbbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	4a17      	ldr	r2, [pc, #92]	; (800dc20 <HAL_TIM_ErrorCallback+0x98>)
 800dbc4:	65d3      	str	r3, [r2, #92]	; 0x5c
		Tim_DeInit(TIMER_THREE);
 800dbc6:	2003      	movs	r0, #3
 800dbc8:	f7ff ffaa 	bl	800db20 <Tim_DeInit>
		Tim_Init(TIMER_THREE);
 800dbcc:	2003      	movs	r0, #3
 800dbce:	f7ff fd89 	bl	800d6e4 <Tim_Init>
}
 800dbd2:	e020      	b.n	800dc16 <HAL_TIM_ErrorCallback+0x8e>
	else if(htim->Instance == TIM4)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4a13      	ldr	r2, [pc, #76]	; (800dc28 <HAL_TIM_ErrorCallback+0xa0>)
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d10b      	bne.n	800dbf6 <HAL_TIM_ErrorCallback+0x6e>
		SystemManager_Fault[TIMER4_ERROR]++;
 800dbde:	4b10      	ldr	r3, [pc, #64]	; (800dc20 <HAL_TIM_ErrorCallback+0x98>)
 800dbe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	4a0e      	ldr	r2, [pc, #56]	; (800dc20 <HAL_TIM_ErrorCallback+0x98>)
 800dbe6:	6613      	str	r3, [r2, #96]	; 0x60
		Tim_DeInit(TIMER_FOUR);
 800dbe8:	2004      	movs	r0, #4
 800dbea:	f7ff ff99 	bl	800db20 <Tim_DeInit>
		Tim_Init(TIMER_FOUR);
 800dbee:	2004      	movs	r0, #4
 800dbf0:	f7ff fd78 	bl	800d6e4 <Tim_Init>
}
 800dbf4:	e00f      	b.n	800dc16 <HAL_TIM_ErrorCallback+0x8e>
	else if(htim->Instance == TIM5)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	4a0c      	ldr	r2, [pc, #48]	; (800dc2c <HAL_TIM_ErrorCallback+0xa4>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d10a      	bne.n	800dc16 <HAL_TIM_ErrorCallback+0x8e>
		SystemManager_Fault[TIMER5_ERROR]++;
 800dc00:	4b07      	ldr	r3, [pc, #28]	; (800dc20 <HAL_TIM_ErrorCallback+0x98>)
 800dc02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc04:	3301      	adds	r3, #1
 800dc06:	4a06      	ldr	r2, [pc, #24]	; (800dc20 <HAL_TIM_ErrorCallback+0x98>)
 800dc08:	6653      	str	r3, [r2, #100]	; 0x64
		Tim_DeInit(TIMER_FIVE);
 800dc0a:	2005      	movs	r0, #5
 800dc0c:	f7ff ff88 	bl	800db20 <Tim_DeInit>
		Tim_Init(TIMER_FIVE);
 800dc10:	2005      	movs	r0, #5
 800dc12:	f7ff fd67 	bl	800d6e4 <Tim_Init>
}
 800dc16:	bf00      	nop
 800dc18:	3708      	adds	r7, #8
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	200093ac 	.word	0x200093ac
 800dc24:	40000400 	.word	0x40000400
 800dc28:	40000800 	.word	0x40000800
 800dc2c:	40000c00 	.word	0x40000c00

0800dc30 <Tim_MainFunction>:
/***********************************************************************************
* Function: Tim_MainFunction										   			   *
* Description: Peripheral main function.									       *
************************************************************************************/
VOID Tim_MainFunction()
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b084      	sub	sp, #16
 800dc34:	af00      	add	r7, sp, #0
	/* Check each timer for error status into local variables. */
	uint32 localStateTimerTwo = HAL_TIM_Base_GetState(&htim2);
 800dc36:	4891      	ldr	r0, [pc, #580]	; (800de7c <Tim_MainFunction+0x24c>)
 800dc38:	f7fd fb5c 	bl	800b2f4 <HAL_TIM_Base_GetState>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	60fb      	str	r3, [r7, #12]
	uint32 localStateTimerThree = HAL_TIM_Base_GetState(&htim3);
 800dc40:	488f      	ldr	r0, [pc, #572]	; (800de80 <Tim_MainFunction+0x250>)
 800dc42:	f7fd fb57 	bl	800b2f4 <HAL_TIM_Base_GetState>
 800dc46:	4603      	mov	r3, r0
 800dc48:	60bb      	str	r3, [r7, #8]
	uint32 localStateTimerFour = HAL_TIM_Base_GetState(&htim4);
 800dc4a:	488e      	ldr	r0, [pc, #568]	; (800de84 <Tim_MainFunction+0x254>)
 800dc4c:	f7fd fb52 	bl	800b2f4 <HAL_TIM_Base_GetState>
 800dc50:	4603      	mov	r3, r0
 800dc52:	607b      	str	r3, [r7, #4]
	uint32 localStateTimerFive = HAL_TIM_Base_GetState(&htim5);
 800dc54:	488c      	ldr	r0, [pc, #560]	; (800de88 <Tim_MainFunction+0x258>)
 800dc56:	f7fd fb4d 	bl	800b2f4 <HAL_TIM_Base_GetState>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	603b      	str	r3, [r7, #0]
	/* Process timers state. */
	switch(localStateTimerFive)
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	2b04      	cmp	r3, #4
 800dc62:	d86a      	bhi.n	800dd3a <Tim_MainFunction+0x10a>
 800dc64:	a201      	add	r2, pc, #4	; (adr r2, 800dc6c <Tim_MainFunction+0x3c>)
 800dc66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc6a:	bf00      	nop
 800dc6c:	0800dc81 	.word	0x0800dc81
 800dc70:	0800dc91 	.word	0x0800dc91
 800dc74:	0800dd11 	.word	0x0800dd11
 800dc78:	0800dd1b 	.word	0x0800dd1b
 800dc7c:	0800dd2b 	.word	0x0800dd2b
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerFive = localStateTimerFive;
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	b2da      	uxtb	r2, r3
 800dc84:	4b81      	ldr	r3, [pc, #516]	; (800de8c <Tim_MainFunction+0x25c>)
 800dc86:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_FIVE);
 800dc88:	2005      	movs	r0, #5
 800dc8a:	f7ff fd2b 	bl	800d6e4 <Tim_Init>
			break;
 800dc8e:	e055      	b.n	800dd3c <Tim_MainFunction+0x10c>
		case HAL_TIM_STATE_READY:
			if(Os_Counter % 500)
 800dc90:	4b7f      	ldr	r3, [pc, #508]	; (800de90 <Tim_MainFunction+0x260>)
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	4b7f      	ldr	r3, [pc, #508]	; (800de94 <Tim_MainFunction+0x264>)
 800dc96:	fba3 1302 	umull	r1, r3, r3, r2
 800dc9a:	095b      	lsrs	r3, r3, #5
 800dc9c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800dca0:	fb01 f303 	mul.w	r3, r1, r3
 800dca4:	1ad3      	subs	r3, r2, r3
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d02d      	beq.n	800dd06 <Tim_MainFunction+0xd6>
			{
				HAL_GPIO_WritePin(PDCR_TRIG_PORT, PDCR_TRIG_PIN, GPIO_PIN_SET);
 800dcaa:	2201      	movs	r2, #1
 800dcac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800dcb0:	4879      	ldr	r0, [pc, #484]	; (800de98 <Tim_MainFunction+0x268>)
 800dcb2:	f7f9 fe2b 	bl	800790c <HAL_GPIO_WritePin>
				HAL_Delay(1);
 800dcb6:	2001      	movs	r0, #1
 800dcb8:	f7f7 fdbe 	bl	8005838 <HAL_Delay>
				HAL_GPIO_WritePin(PDCR_TRIG_PORT, PDCR_TRIG_PIN, GPIO_PIN_RESET);
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800dcc2:	4875      	ldr	r0, [pc, #468]	; (800de98 <Tim_MainFunction+0x268>)
 800dcc4:	f7f9 fe22 	bl	800790c <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC2);
 800dcc8:	4b6f      	ldr	r3, [pc, #444]	; (800de88 <Tim_MainFunction+0x258>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	68da      	ldr	r2, [r3, #12]
 800dcce:	4b6e      	ldr	r3, [pc, #440]	; (800de88 <Tim_MainFunction+0x258>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f042 0204 	orr.w	r2, r2, #4
 800dcd6:	60da      	str	r2, [r3, #12]
				HAL_GPIO_WritePin(PDCF_TRIG_PORT, PDCF_TRIG_PIN, GPIO_PIN_SET);
 800dcd8:	2201      	movs	r2, #1
 800dcda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dcde:	486f      	ldr	r0, [pc, #444]	; (800de9c <Tim_MainFunction+0x26c>)
 800dce0:	f7f9 fe14 	bl	800790c <HAL_GPIO_WritePin>
				HAL_Delay(1);
 800dce4:	2001      	movs	r0, #1
 800dce6:	f7f7 fda7 	bl	8005838 <HAL_Delay>
				HAL_GPIO_WritePin(PDCF_TRIG_PORT, PDCF_TRIG_PIN, GPIO_PIN_RESET);
 800dcea:	2200      	movs	r2, #0
 800dcec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dcf0:	486a      	ldr	r0, [pc, #424]	; (800de9c <Tim_MainFunction+0x26c>)
 800dcf2:	f7f9 fe0b 	bl	800790c <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC1);
 800dcf6:	4b64      	ldr	r3, [pc, #400]	; (800de88 <Tim_MainFunction+0x258>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	68da      	ldr	r2, [r3, #12]
 800dcfc:	4b62      	ldr	r3, [pc, #392]	; (800de88 <Tim_MainFunction+0x258>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f042 0202 	orr.w	r2, r2, #2
 800dd04:	60da      	str	r2, [r3, #12]
			}
			else
			{
				/* do nothing */
			}
			TimH_BswState_TimerFive = localStateTimerFive;
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	b2da      	uxtb	r2, r3
 800dd0a:	4b60      	ldr	r3, [pc, #384]	; (800de8c <Tim_MainFunction+0x25c>)
 800dd0c:	701a      	strb	r2, [r3, #0]
			break;
 800dd0e:	e015      	b.n	800dd3c <Tim_MainFunction+0x10c>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerFive = localStateTimerFive;
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	b2da      	uxtb	r2, r3
 800dd14:	4b5d      	ldr	r3, [pc, #372]	; (800de8c <Tim_MainFunction+0x25c>)
 800dd16:	701a      	strb	r2, [r3, #0]
			break;
 800dd18:	e010      	b.n	800dd3c <Tim_MainFunction+0x10c>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerFive = localStateTimerFive;
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	b2da      	uxtb	r2, r3
 800dd1e:	4b5b      	ldr	r3, [pc, #364]	; (800de8c <Tim_MainFunction+0x25c>)
 800dd20:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim5);
 800dd22:	4859      	ldr	r0, [pc, #356]	; (800de88 <Tim_MainFunction+0x258>)
 800dd24:	f7ff ff30 	bl	800db88 <HAL_TIM_ErrorCallback>
			break;
 800dd28:	e008      	b.n	800dd3c <Tim_MainFunction+0x10c>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerFive = localStateTimerFive;
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	b2da      	uxtb	r2, r3
 800dd2e:	4b57      	ldr	r3, [pc, #348]	; (800de8c <Tim_MainFunction+0x25c>)
 800dd30:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim5);
 800dd32:	4855      	ldr	r0, [pc, #340]	; (800de88 <Tim_MainFunction+0x258>)
 800dd34:	f7ff ff28 	bl	800db88 <HAL_TIM_ErrorCallback>
			break;
 800dd38:	e000      	b.n	800dd3c <Tim_MainFunction+0x10c>
		default:
			break;
 800dd3a:	bf00      	nop
	}
	switch(localStateTimerTwo)
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2b04      	cmp	r3, #4
 800dd40:	d82e      	bhi.n	800dda0 <Tim_MainFunction+0x170>
 800dd42:	a201      	add	r2, pc, #4	; (adr r2, 800dd48 <Tim_MainFunction+0x118>)
 800dd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd48:	0800dd5d 	.word	0x0800dd5d
 800dd4c:	0800dd6d 	.word	0x0800dd6d
 800dd50:	0800dd77 	.word	0x0800dd77
 800dd54:	0800dd81 	.word	0x0800dd81
 800dd58:	0800dd91 	.word	0x0800dd91
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	b2da      	uxtb	r2, r3
 800dd60:	4b4f      	ldr	r3, [pc, #316]	; (800dea0 <Tim_MainFunction+0x270>)
 800dd62:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_TWO);
 800dd64:	2002      	movs	r0, #2
 800dd66:	f7ff fcbd 	bl	800d6e4 <Tim_Init>
			break;
 800dd6a:	e01a      	b.n	800dda2 <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	b2da      	uxtb	r2, r3
 800dd70:	4b4b      	ldr	r3, [pc, #300]	; (800dea0 <Tim_MainFunction+0x270>)
 800dd72:	701a      	strb	r2, [r3, #0]
			break;
 800dd74:	e015      	b.n	800dda2 <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	b2da      	uxtb	r2, r3
 800dd7a:	4b49      	ldr	r3, [pc, #292]	; (800dea0 <Tim_MainFunction+0x270>)
 800dd7c:	701a      	strb	r2, [r3, #0]
			break;
 800dd7e:	e010      	b.n	800dda2 <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	b2da      	uxtb	r2, r3
 800dd84:	4b46      	ldr	r3, [pc, #280]	; (800dea0 <Tim_MainFunction+0x270>)
 800dd86:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim2);
 800dd88:	483c      	ldr	r0, [pc, #240]	; (800de7c <Tim_MainFunction+0x24c>)
 800dd8a:	f7ff fefd 	bl	800db88 <HAL_TIM_ErrorCallback>
			break;
 800dd8e:	e008      	b.n	800dda2 <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	b2da      	uxtb	r2, r3
 800dd94:	4b42      	ldr	r3, [pc, #264]	; (800dea0 <Tim_MainFunction+0x270>)
 800dd96:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim2);
 800dd98:	4838      	ldr	r0, [pc, #224]	; (800de7c <Tim_MainFunction+0x24c>)
 800dd9a:	f7ff fef5 	bl	800db88 <HAL_TIM_ErrorCallback>
			break;
 800dd9e:	e000      	b.n	800dda2 <Tim_MainFunction+0x172>
		default:
			break;
 800dda0:	bf00      	nop
	}
	switch(localStateTimerThree)
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	2b04      	cmp	r3, #4
 800dda6:	d82f      	bhi.n	800de08 <Tim_MainFunction+0x1d8>
 800dda8:	a201      	add	r2, pc, #4	; (adr r2, 800ddb0 <Tim_MainFunction+0x180>)
 800ddaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddae:	bf00      	nop
 800ddb0:	0800ddc5 	.word	0x0800ddc5
 800ddb4:	0800ddd5 	.word	0x0800ddd5
 800ddb8:	0800dddf 	.word	0x0800dddf
 800ddbc:	0800dde9 	.word	0x0800dde9
 800ddc0:	0800ddf9 	.word	0x0800ddf9
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerThree = localStateTimerThree;
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	b2da      	uxtb	r2, r3
 800ddc8:	4b36      	ldr	r3, [pc, #216]	; (800dea4 <Tim_MainFunction+0x274>)
 800ddca:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_THREE);
 800ddcc:	2003      	movs	r0, #3
 800ddce:	f7ff fc89 	bl	800d6e4 <Tim_Init>
			break;
 800ddd2:	e01a      	b.n	800de0a <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerThree = localStateTimerThree;
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	b2da      	uxtb	r2, r3
 800ddd8:	4b32      	ldr	r3, [pc, #200]	; (800dea4 <Tim_MainFunction+0x274>)
 800ddda:	701a      	strb	r2, [r3, #0]
			break;
 800dddc:	e015      	b.n	800de0a <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerThree = localStateTimerThree;
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	b2da      	uxtb	r2, r3
 800dde2:	4b30      	ldr	r3, [pc, #192]	; (800dea4 <Tim_MainFunction+0x274>)
 800dde4:	701a      	strb	r2, [r3, #0]
			break;
 800dde6:	e010      	b.n	800de0a <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerThree = localStateTimerThree;
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	b2da      	uxtb	r2, r3
 800ddec:	4b2d      	ldr	r3, [pc, #180]	; (800dea4 <Tim_MainFunction+0x274>)
 800ddee:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim3);
 800ddf0:	4823      	ldr	r0, [pc, #140]	; (800de80 <Tim_MainFunction+0x250>)
 800ddf2:	f7ff fec9 	bl	800db88 <HAL_TIM_ErrorCallback>
			break;
 800ddf6:	e008      	b.n	800de0a <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerThree = localStateTimerThree;
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	b2da      	uxtb	r2, r3
 800ddfc:	4b29      	ldr	r3, [pc, #164]	; (800dea4 <Tim_MainFunction+0x274>)
 800ddfe:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim3);
 800de00:	481f      	ldr	r0, [pc, #124]	; (800de80 <Tim_MainFunction+0x250>)
 800de02:	f7ff fec1 	bl	800db88 <HAL_TIM_ErrorCallback>
			break;
 800de06:	e000      	b.n	800de0a <Tim_MainFunction+0x1da>
		default:
			break;
 800de08:	bf00      	nop
	}
	switch(localStateTimerFour)
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2b04      	cmp	r3, #4
 800de0e:	d82f      	bhi.n	800de70 <Tim_MainFunction+0x240>
 800de10:	a201      	add	r2, pc, #4	; (adr r2, 800de18 <Tim_MainFunction+0x1e8>)
 800de12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de16:	bf00      	nop
 800de18:	0800de2d 	.word	0x0800de2d
 800de1c:	0800de3d 	.word	0x0800de3d
 800de20:	0800de47 	.word	0x0800de47
 800de24:	0800de51 	.word	0x0800de51
 800de28:	0800de61 	.word	0x0800de61
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerFour = localStateTimerFour;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	b2da      	uxtb	r2, r3
 800de30:	4b1d      	ldr	r3, [pc, #116]	; (800dea8 <Tim_MainFunction+0x278>)
 800de32:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_FOUR);
 800de34:	2004      	movs	r0, #4
 800de36:	f7ff fc55 	bl	800d6e4 <Tim_Init>
			break;
 800de3a:	e01a      	b.n	800de72 <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerFour = localStateTimerFour;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	b2da      	uxtb	r2, r3
 800de40:	4b19      	ldr	r3, [pc, #100]	; (800dea8 <Tim_MainFunction+0x278>)
 800de42:	701a      	strb	r2, [r3, #0]
			break;
 800de44:	e015      	b.n	800de72 <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerFour = localStateTimerFour;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	b2da      	uxtb	r2, r3
 800de4a:	4b17      	ldr	r3, [pc, #92]	; (800dea8 <Tim_MainFunction+0x278>)
 800de4c:	701a      	strb	r2, [r3, #0]
			break;
 800de4e:	e010      	b.n	800de72 <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerFour = localStateTimerFour;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	b2da      	uxtb	r2, r3
 800de54:	4b14      	ldr	r3, [pc, #80]	; (800dea8 <Tim_MainFunction+0x278>)
 800de56:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim4);
 800de58:	480a      	ldr	r0, [pc, #40]	; (800de84 <Tim_MainFunction+0x254>)
 800de5a:	f7ff fe95 	bl	800db88 <HAL_TIM_ErrorCallback>
			break;
 800de5e:	e008      	b.n	800de72 <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerFour = localStateTimerFour;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	b2da      	uxtb	r2, r3
 800de64:	4b10      	ldr	r3, [pc, #64]	; (800dea8 <Tim_MainFunction+0x278>)
 800de66:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim4);
 800de68:	4806      	ldr	r0, [pc, #24]	; (800de84 <Tim_MainFunction+0x254>)
 800de6a:	f7ff fe8d 	bl	800db88 <HAL_TIM_ErrorCallback>
			break;
 800de6e:	e000      	b.n	800de72 <Tim_MainFunction+0x242>
		default:
			break;
 800de70:	bf00      	nop
	}
}
 800de72:	bf00      	nop
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	bf00      	nop
 800de7c:	200004d0 	.word	0x200004d0
 800de80:	20000584 	.word	0x20000584
 800de84:	20000638 	.word	0x20000638
 800de88:	200006ec 	.word	0x200006ec
 800de8c:	200008b7 	.word	0x200008b7
 800de90:	20000268 	.word	0x20000268
 800de94:	10624dd3 	.word	0x10624dd3
 800de98:	40020400 	.word	0x40020400
 800de9c:	40020000 	.word	0x40020000
 800dea0:	200008b4 	.word	0x200008b4
 800dea4:	200008b5 	.word	0x200008b5
 800dea8:	200008b6 	.word	0x200008b6

0800deac <HAL_TIM_PeriodElapsedCallback>:
* Function: HAL_TIM_PeriodElapsedCallback										   *
* Description: Peripheral period elapsed callback to process system state          *
* 			   when timer expires.									               *
************************************************************************************/
VOID HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
	/* Timer 1 is used for the time base source of FreeRTOS. Upon expiration increase the clock counter of the system. */
	if (htim->Instance == TIM1)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	4a04      	ldr	r2, [pc, #16]	; (800decc <HAL_TIM_PeriodElapsedCallback+0x20>)
 800deba:	4293      	cmp	r3, r2
 800debc:	d101      	bne.n	800dec2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 800debe:	f7f7 fc9b 	bl	80057f8 <HAL_IncTick>
	}
	else
	{
		/* do nothing */
	}
}
 800dec2:	bf00      	nop
 800dec4:	3708      	adds	r7, #8
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop
 800decc:	40010000 	.word	0x40010000

0800ded0 <__NVIC_SetPriority>:
{
 800ded0:	b480      	push	{r7}
 800ded2:	b083      	sub	sp, #12
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	4603      	mov	r3, r0
 800ded8:	6039      	str	r1, [r7, #0]
 800deda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dedc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	db0a      	blt.n	800defa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	b2da      	uxtb	r2, r3
 800dee8:	490c      	ldr	r1, [pc, #48]	; (800df1c <__NVIC_SetPriority+0x4c>)
 800deea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800deee:	0112      	lsls	r2, r2, #4
 800def0:	b2d2      	uxtb	r2, r2
 800def2:	440b      	add	r3, r1
 800def4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800def8:	e00a      	b.n	800df10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	b2da      	uxtb	r2, r3
 800defe:	4908      	ldr	r1, [pc, #32]	; (800df20 <__NVIC_SetPriority+0x50>)
 800df00:	79fb      	ldrb	r3, [r7, #7]
 800df02:	f003 030f 	and.w	r3, r3, #15
 800df06:	3b04      	subs	r3, #4
 800df08:	0112      	lsls	r2, r2, #4
 800df0a:	b2d2      	uxtb	r2, r2
 800df0c:	440b      	add	r3, r1
 800df0e:	761a      	strb	r2, [r3, #24]
}
 800df10:	bf00      	nop
 800df12:	370c      	adds	r7, #12
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr
 800df1c:	e000e100 	.word	0xe000e100
 800df20:	e000ed00 	.word	0xe000ed00

0800df24 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800df24:	b580      	push	{r7, lr}
 800df26:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800df28:	4b05      	ldr	r3, [pc, #20]	; (800df40 <SysTick_Handler+0x1c>)
 800df2a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800df2c:	f002 fae6 	bl	80104fc <xTaskGetSchedulerState>
 800df30:	4603      	mov	r3, r0
 800df32:	2b01      	cmp	r3, #1
 800df34:	d001      	beq.n	800df3a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800df36:	f000 fd07 	bl	800e948 <xPortSysTickHandler>
  }
}
 800df3a:	bf00      	nop
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop
 800df40:	e000e010 	.word	0xe000e010

0800df44 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800df44:	b580      	push	{r7, lr}
 800df46:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800df48:	2100      	movs	r1, #0
 800df4a:	f06f 0004 	mvn.w	r0, #4
 800df4e:	f7ff ffbf 	bl	800ded0 <__NVIC_SetPriority>
#endif
}
 800df52:	bf00      	nop
 800df54:	bd80      	pop	{r7, pc}
	...

0800df58 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800df58:	b480      	push	{r7}
 800df5a:	b083      	sub	sp, #12
 800df5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df5e:	f3ef 8305 	mrs	r3, IPSR
 800df62:	603b      	str	r3, [r7, #0]
  return(result);
 800df64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df66:	2b00      	cmp	r3, #0
 800df68:	d003      	beq.n	800df72 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800df6a:	f06f 0305 	mvn.w	r3, #5
 800df6e:	607b      	str	r3, [r7, #4]
 800df70:	e00c      	b.n	800df8c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800df72:	4b0a      	ldr	r3, [pc, #40]	; (800df9c <osKernelInitialize+0x44>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d105      	bne.n	800df86 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800df7a:	4b08      	ldr	r3, [pc, #32]	; (800df9c <osKernelInitialize+0x44>)
 800df7c:	2201      	movs	r2, #1
 800df7e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800df80:	2300      	movs	r3, #0
 800df82:	607b      	str	r3, [r7, #4]
 800df84:	e002      	b.n	800df8c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800df86:	f04f 33ff 	mov.w	r3, #4294967295
 800df8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800df8c:	687b      	ldr	r3, [r7, #4]
}
 800df8e:	4618      	mov	r0, r3
 800df90:	370c      	adds	r7, #12
 800df92:	46bd      	mov	sp, r7
 800df94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df98:	4770      	bx	lr
 800df9a:	bf00      	nop
 800df9c:	2000099c 	.word	0x2000099c

0800dfa0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfa6:	f3ef 8305 	mrs	r3, IPSR
 800dfaa:	603b      	str	r3, [r7, #0]
  return(result);
 800dfac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d003      	beq.n	800dfba <osKernelStart+0x1a>
    stat = osErrorISR;
 800dfb2:	f06f 0305 	mvn.w	r3, #5
 800dfb6:	607b      	str	r3, [r7, #4]
 800dfb8:	e010      	b.n	800dfdc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dfba:	4b0b      	ldr	r3, [pc, #44]	; (800dfe8 <osKernelStart+0x48>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	2b01      	cmp	r3, #1
 800dfc0:	d109      	bne.n	800dfd6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dfc2:	f7ff ffbf 	bl	800df44 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dfc6:	4b08      	ldr	r3, [pc, #32]	; (800dfe8 <osKernelStart+0x48>)
 800dfc8:	2202      	movs	r2, #2
 800dfca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dfcc:	f001 fdfc 	bl	800fbc8 <vTaskStartScheduler>
      stat = osOK;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	607b      	str	r3, [r7, #4]
 800dfd4:	e002      	b.n	800dfdc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dfd6:	f04f 33ff 	mov.w	r3, #4294967295
 800dfda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dfdc:	687b      	ldr	r3, [r7, #4]
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3708      	adds	r7, #8
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	2000099c 	.word	0x2000099c

0800dfec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b08e      	sub	sp, #56	; 0x38
 800dff0:	af04      	add	r7, sp, #16
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	60b9      	str	r1, [r7, #8]
 800dff6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dff8:	2300      	movs	r3, #0
 800dffa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dffc:	f3ef 8305 	mrs	r3, IPSR
 800e000:	617b      	str	r3, [r7, #20]
  return(result);
 800e002:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e004:	2b00      	cmp	r3, #0
 800e006:	d17f      	bne.n	800e108 <osThreadNew+0x11c>
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d07c      	beq.n	800e108 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800e00e:	2380      	movs	r3, #128	; 0x80
 800e010:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e012:	2318      	movs	r3, #24
 800e014:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e016:	2300      	movs	r3, #0
 800e018:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e01a:	f04f 33ff 	mov.w	r3, #4294967295
 800e01e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d046      	beq.n	800e0b4 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d002      	beq.n	800e034 <osThreadNew+0x48>
        name = attr->name;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	699b      	ldr	r3, [r3, #24]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d002      	beq.n	800e042 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	699b      	ldr	r3, [r3, #24]
 800e040:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e042:	69fb      	ldr	r3, [r7, #28]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d008      	beq.n	800e05a <osThreadNew+0x6e>
 800e048:	69fb      	ldr	r3, [r7, #28]
 800e04a:	2b38      	cmp	r3, #56	; 0x38
 800e04c:	d805      	bhi.n	800e05a <osThreadNew+0x6e>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	685b      	ldr	r3, [r3, #4]
 800e052:	f003 0301 	and.w	r3, r3, #1
 800e056:	2b00      	cmp	r3, #0
 800e058:	d001      	beq.n	800e05e <osThreadNew+0x72>
        return (NULL);
 800e05a:	2300      	movs	r3, #0
 800e05c:	e055      	b.n	800e10a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	695b      	ldr	r3, [r3, #20]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d003      	beq.n	800e06e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	695b      	ldr	r3, [r3, #20]
 800e06a:	089b      	lsrs	r3, r3, #2
 800e06c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	689b      	ldr	r3, [r3, #8]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d00f      	beq.n	800e096 <osThreadNew+0xaa>
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	68db      	ldr	r3, [r3, #12]
 800e07a:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 800e07e:	d30a      	bcc.n	800e096 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e084:	2b00      	cmp	r3, #0
 800e086:	d006      	beq.n	800e096 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	695b      	ldr	r3, [r3, #20]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d002      	beq.n	800e096 <osThreadNew+0xaa>
        mem = 1;
 800e090:	2301      	movs	r3, #1
 800e092:	61bb      	str	r3, [r7, #24]
 800e094:	e010      	b.n	800e0b8 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	689b      	ldr	r3, [r3, #8]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d10c      	bne.n	800e0b8 <osThreadNew+0xcc>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	68db      	ldr	r3, [r3, #12]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d108      	bne.n	800e0b8 <osThreadNew+0xcc>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	691b      	ldr	r3, [r3, #16]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d104      	bne.n	800e0b8 <osThreadNew+0xcc>
          mem = 0;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	61bb      	str	r3, [r7, #24]
 800e0b2:	e001      	b.n	800e0b8 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e0b8:	69bb      	ldr	r3, [r7, #24]
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	d110      	bne.n	800e0e0 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e0c2:	687a      	ldr	r2, [r7, #4]
 800e0c4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e0c6:	9202      	str	r2, [sp, #8]
 800e0c8:	9301      	str	r3, [sp, #4]
 800e0ca:	69fb      	ldr	r3, [r7, #28]
 800e0cc:	9300      	str	r3, [sp, #0]
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	6a3a      	ldr	r2, [r7, #32]
 800e0d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0d4:	68f8      	ldr	r0, [r7, #12]
 800e0d6:	f001 f9b3 	bl	800f440 <xTaskCreateStatic>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	613b      	str	r3, [r7, #16]
 800e0de:	e013      	b.n	800e108 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800e0e0:	69bb      	ldr	r3, [r7, #24]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d110      	bne.n	800e108 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e0e6:	6a3b      	ldr	r3, [r7, #32]
 800e0e8:	b29a      	uxth	r2, r3
 800e0ea:	f107 0310 	add.w	r3, r7, #16
 800e0ee:	9301      	str	r3, [sp, #4]
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	9300      	str	r3, [sp, #0]
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0f8:	68f8      	ldr	r0, [r7, #12]
 800e0fa:	f001 fa00 	bl	800f4fe <xTaskCreate>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b01      	cmp	r3, #1
 800e102:	d001      	beq.n	800e108 <osThreadNew+0x11c>
            hTask = NULL;
 800e104:	2300      	movs	r3, #0
 800e106:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e108:	693b      	ldr	r3, [r7, #16]
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3728      	adds	r7, #40	; 0x28
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}

0800e112 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800e112:	b580      	push	{r7, lr}
 800e114:	b084      	sub	sp, #16
 800e116:	af00      	add	r7, sp, #0
 800e118:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f002 feeb 	bl	8010ef6 <pvTimerGetTimerID>
 800e120:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d005      	beq.n	800e134 <TimerCallback+0x22>
    callb->func (callb->arg);
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	68fa      	ldr	r2, [r7, #12]
 800e12e:	6852      	ldr	r2, [r2, #4]
 800e130:	4610      	mov	r0, r2
 800e132:	4798      	blx	r3
  }
}
 800e134:	bf00      	nop
 800e136:	3710      	adds	r7, #16
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b08c      	sub	sp, #48	; 0x30
 800e140:	af02      	add	r7, sp, #8
 800e142:	60f8      	str	r0, [r7, #12]
 800e144:	607a      	str	r2, [r7, #4]
 800e146:	603b      	str	r3, [r7, #0]
 800e148:	460b      	mov	r3, r1
 800e14a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800e14c:	2300      	movs	r3, #0
 800e14e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e150:	f3ef 8305 	mrs	r3, IPSR
 800e154:	613b      	str	r3, [r7, #16]
  return(result);
 800e156:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d163      	bne.n	800e224 <osTimerNew+0xe8>
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d060      	beq.n	800e224 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800e162:	2008      	movs	r0, #8
 800e164:	f000 f91c 	bl	800e3a0 <pvPortMalloc>
 800e168:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d059      	beq.n	800e224 <osTimerNew+0xe8>
      callb->func = func;
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	68fa      	ldr	r2, [r7, #12]
 800e174:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	687a      	ldr	r2, [r7, #4]
 800e17a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800e17c:	7afb      	ldrb	r3, [r7, #11]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d102      	bne.n	800e188 <osTimerNew+0x4c>
        reload = pdFALSE;
 800e182:	2300      	movs	r3, #0
 800e184:	61fb      	str	r3, [r7, #28]
 800e186:	e001      	b.n	800e18c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800e188:	2301      	movs	r3, #1
 800e18a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800e18c:	f04f 33ff 	mov.w	r3, #4294967295
 800e190:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800e192:	2300      	movs	r3, #0
 800e194:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d01c      	beq.n	800e1d6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d002      	beq.n	800e1aa <osTimerNew+0x6e>
          name = attr->name;
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	689b      	ldr	r3, [r3, #8]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d006      	beq.n	800e1c0 <osTimerNew+0x84>
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	68db      	ldr	r3, [r3, #12]
 800e1b6:	2b2b      	cmp	r3, #43	; 0x2b
 800e1b8:	d902      	bls.n	800e1c0 <osTimerNew+0x84>
          mem = 1;
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	61bb      	str	r3, [r7, #24]
 800e1be:	e00c      	b.n	800e1da <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	689b      	ldr	r3, [r3, #8]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d108      	bne.n	800e1da <osTimerNew+0x9e>
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	68db      	ldr	r3, [r3, #12]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d104      	bne.n	800e1da <osTimerNew+0x9e>
            mem = 0;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	61bb      	str	r3, [r7, #24]
 800e1d4:	e001      	b.n	800e1da <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d10c      	bne.n	800e1fa <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	689b      	ldr	r3, [r3, #8]
 800e1e4:	9301      	str	r3, [sp, #4]
 800e1e6:	4b12      	ldr	r3, [pc, #72]	; (800e230 <osTimerNew+0xf4>)
 800e1e8:	9300      	str	r3, [sp, #0]
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	69fa      	ldr	r2, [r7, #28]
 800e1ee:	2101      	movs	r1, #1
 800e1f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1f2:	f002 fad8 	bl	80107a6 <xTimerCreateStatic>
 800e1f6:	6238      	str	r0, [r7, #32]
 800e1f8:	e00b      	b.n	800e212 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800e1fa:	69bb      	ldr	r3, [r7, #24]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d108      	bne.n	800e212 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800e200:	4b0b      	ldr	r3, [pc, #44]	; (800e230 <osTimerNew+0xf4>)
 800e202:	9300      	str	r3, [sp, #0]
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	69fa      	ldr	r2, [r7, #28]
 800e208:	2101      	movs	r1, #1
 800e20a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e20c:	f002 faaa 	bl	8010764 <xTimerCreate>
 800e210:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800e212:	6a3b      	ldr	r3, [r7, #32]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d105      	bne.n	800e224 <osTimerNew+0xe8>
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d002      	beq.n	800e224 <osTimerNew+0xe8>
        vPortFree (callb);
 800e21e:	6978      	ldr	r0, [r7, #20]
 800e220:	f000 f908 	bl	800e434 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800e224:	6a3b      	ldr	r3, [r7, #32]
}
 800e226:	4618      	mov	r0, r3
 800e228:	3728      	adds	r7, #40	; 0x28
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
 800e22e:	bf00      	nop
 800e230:	0800e113 	.word	0x0800e113

0800e234 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800e234:	b580      	push	{r7, lr}
 800e236:	b088      	sub	sp, #32
 800e238:	af02      	add	r7, sp, #8
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e242:	f3ef 8305 	mrs	r3, IPSR
 800e246:	60fb      	str	r3, [r7, #12]
  return(result);
 800e248:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d003      	beq.n	800e256 <osTimerStart+0x22>
    stat = osErrorISR;
 800e24e:	f06f 0305 	mvn.w	r3, #5
 800e252:	617b      	str	r3, [r7, #20]
 800e254:	e017      	b.n	800e286 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d103      	bne.n	800e264 <osTimerStart+0x30>
    stat = osErrorParameter;
 800e25c:	f06f 0303 	mvn.w	r3, #3
 800e260:	617b      	str	r3, [r7, #20]
 800e262:	e010      	b.n	800e286 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800e264:	2300      	movs	r3, #0
 800e266:	9300      	str	r3, [sp, #0]
 800e268:	2300      	movs	r3, #0
 800e26a:	683a      	ldr	r2, [r7, #0]
 800e26c:	2104      	movs	r1, #4
 800e26e:	6938      	ldr	r0, [r7, #16]
 800e270:	f002 fb12 	bl	8010898 <xTimerGenericCommand>
 800e274:	4603      	mov	r3, r0
 800e276:	2b01      	cmp	r3, #1
 800e278:	d102      	bne.n	800e280 <osTimerStart+0x4c>
      stat = osOK;
 800e27a:	2300      	movs	r3, #0
 800e27c:	617b      	str	r3, [r7, #20]
 800e27e:	e002      	b.n	800e286 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800e280:	f06f 0302 	mvn.w	r3, #2
 800e284:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e286:	697b      	ldr	r3, [r7, #20]
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3718      	adds	r7, #24
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800e290:	b580      	push	{r7, lr}
 800e292:	b088      	sub	sp, #32
 800e294:	af02      	add	r7, sp, #8
 800e296:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e29c:	f3ef 8305 	mrs	r3, IPSR
 800e2a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800e2a2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d003      	beq.n	800e2b0 <osTimerStop+0x20>
    stat = osErrorISR;
 800e2a8:	f06f 0305 	mvn.w	r3, #5
 800e2ac:	617b      	str	r3, [r7, #20]
 800e2ae:	e021      	b.n	800e2f4 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d103      	bne.n	800e2be <osTimerStop+0x2e>
    stat = osErrorParameter;
 800e2b6:	f06f 0303 	mvn.w	r3, #3
 800e2ba:	617b      	str	r3, [r7, #20]
 800e2bc:	e01a      	b.n	800e2f4 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800e2be:	6938      	ldr	r0, [r7, #16]
 800e2c0:	f002 fdf0 	bl	8010ea4 <xTimerIsTimerActive>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d103      	bne.n	800e2d2 <osTimerStop+0x42>
      stat = osErrorResource;
 800e2ca:	f06f 0302 	mvn.w	r3, #2
 800e2ce:	617b      	str	r3, [r7, #20]
 800e2d0:	e010      	b.n	800e2f4 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	9300      	str	r3, [sp, #0]
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	2200      	movs	r2, #0
 800e2da:	2103      	movs	r1, #3
 800e2dc:	6938      	ldr	r0, [r7, #16]
 800e2de:	f002 fadb 	bl	8010898 <xTimerGenericCommand>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	2b01      	cmp	r3, #1
 800e2e6:	d102      	bne.n	800e2ee <osTimerStop+0x5e>
        stat = osOK;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	617b      	str	r3, [r7, #20]
 800e2ec:	e002      	b.n	800e2f4 <osTimerStop+0x64>
      } else {
        stat = osError;
 800e2ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e2f2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e2f4:	697b      	ldr	r3, [r7, #20]
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3718      	adds	r7, #24
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}

0800e2fe <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 800e2fe:	b580      	push	{r7, lr}
 800e300:	b086      	sub	sp, #24
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e30a:	f3ef 8305 	mrs	r3, IPSR
 800e30e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e310:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 800e312:	2b00      	cmp	r3, #0
 800e314:	d102      	bne.n	800e31c <osTimerIsRunning+0x1e>
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d102      	bne.n	800e322 <osTimerIsRunning+0x24>
    running = 0U;
 800e31c:	2300      	movs	r3, #0
 800e31e:	617b      	str	r3, [r7, #20]
 800e320:	e004      	b.n	800e32c <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 800e322:	6938      	ldr	r0, [r7, #16]
 800e324:	f002 fdbe 	bl	8010ea4 <xTimerIsTimerActive>
 800e328:	4603      	mov	r3, r0
 800e32a:	617b      	str	r3, [r7, #20]
  }

  return (running);
 800e32c:	697b      	ldr	r3, [r7, #20]
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3718      	adds	r7, #24
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
	...

0800e338 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e338:	b480      	push	{r7}
 800e33a:	b085      	sub	sp, #20
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	60b9      	str	r1, [r7, #8]
 800e342:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	4a07      	ldr	r2, [pc, #28]	; (800e364 <vApplicationGetIdleTaskMemory+0x2c>)
 800e348:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	4a06      	ldr	r2, [pc, #24]	; (800e368 <vApplicationGetIdleTaskMemory+0x30>)
 800e34e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2280      	movs	r2, #128	; 0x80
 800e354:	601a      	str	r2, [r3, #0]
}
 800e356:	bf00      	nop
 800e358:	3714      	adds	r7, #20
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr
 800e362:	bf00      	nop
 800e364:	200009a0 	.word	0x200009a0
 800e368:	20000b58 	.word	0x20000b58

0800e36c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e36c:	b480      	push	{r7}
 800e36e:	b085      	sub	sp, #20
 800e370:	af00      	add	r7, sp, #0
 800e372:	60f8      	str	r0, [r7, #12]
 800e374:	60b9      	str	r1, [r7, #8]
 800e376:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	4a07      	ldr	r2, [pc, #28]	; (800e398 <vApplicationGetTimerTaskMemory+0x2c>)
 800e37c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	4a06      	ldr	r2, [pc, #24]	; (800e39c <vApplicationGetTimerTaskMemory+0x30>)
 800e382:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e38a:	601a      	str	r2, [r3, #0]
}
 800e38c:	bf00      	nop
 800e38e:	3714      	adds	r7, #20
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr
 800e398:	20000d58 	.word	0x20000d58
 800e39c:	20000f10 	.word	0x20000f10

0800e3a0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f003 0307 	and.w	r3, r3, #7
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d004      	beq.n	800e3c0 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f023 0307 	bic.w	r3, r3, #7
 800e3bc:	3308      	adds	r3, #8
 800e3be:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 800e3c0:	f001 fc72 	bl	800fca8 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 800e3c4:	4b18      	ldr	r3, [pc, #96]	; (800e428 <pvPortMalloc+0x88>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d105      	bne.n	800e3d8 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800e3cc:	4b17      	ldr	r3, [pc, #92]	; (800e42c <pvPortMalloc+0x8c>)
 800e3ce:	f023 0307 	bic.w	r3, r3, #7
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	4b14      	ldr	r3, [pc, #80]	; (800e428 <pvPortMalloc+0x88>)
 800e3d6:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800e3d8:	4b15      	ldr	r3, [pc, #84]	; (800e430 <pvPortMalloc+0x90>)
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	4413      	add	r3, r2
 800e3e0:	f644 6217 	movw	r2, #19991	; 0x4e17
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	d813      	bhi.n	800e410 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 800e3e8:	4b11      	ldr	r3, [pc, #68]	; (800e430 <pvPortMalloc+0x90>)
 800e3ea:	681a      	ldr	r2, [r3, #0]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	441a      	add	r2, r3
 800e3f0:	4b0f      	ldr	r3, [pc, #60]	; (800e430 <pvPortMalloc+0x90>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d90b      	bls.n	800e410 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800e3f8:	4b0b      	ldr	r3, [pc, #44]	; (800e428 <pvPortMalloc+0x88>)
 800e3fa:	681a      	ldr	r2, [r3, #0]
 800e3fc:	4b0c      	ldr	r3, [pc, #48]	; (800e430 <pvPortMalloc+0x90>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	4413      	add	r3, r2
 800e402:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 800e404:	4b0a      	ldr	r3, [pc, #40]	; (800e430 <pvPortMalloc+0x90>)
 800e406:	681a      	ldr	r2, [r3, #0]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	4413      	add	r3, r2
 800e40c:	4a08      	ldr	r2, [pc, #32]	; (800e430 <pvPortMalloc+0x90>)
 800e40e:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e410:	f001 fc58 	bl	800fcc4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d101      	bne.n	800e41e <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e41a:	f7f5 fd51 	bl	8003ec0 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 800e41e:	68fb      	ldr	r3, [r7, #12]
}
 800e420:	4618      	mov	r0, r3
 800e422:	3710      	adds	r7, #16
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}
 800e428:	20007d34 	.word	0x20007d34
 800e42c:	20002f18 	.word	0x20002f18
 800e430:	20007d30 	.word	0x20007d30

0800e434 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e434:	b480      	push	{r7}
 800e436:	b085      	sub	sp, #20
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d00a      	beq.n	800e458 <vPortFree+0x24>
	__asm volatile
 800e442:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800e446:	f383 8811 	msr	BASEPRI, r3
 800e44a:	f3bf 8f6f 	isb	sy
 800e44e:	f3bf 8f4f 	dsb	sy
 800e452:	60fb      	str	r3, [r7, #12]
}
 800e454:	bf00      	nop
 800e456:	e7fe      	b.n	800e456 <vPortFree+0x22>
}
 800e458:	bf00      	nop
 800e45a:	3714      	adds	r7, #20
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr

0800e464 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e464:	b480      	push	{r7}
 800e466:	b083      	sub	sp, #12
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f103 0208 	add.w	r2, r3, #8
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f04f 32ff 	mov.w	r2, #4294967295
 800e47c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f103 0208 	add.w	r2, r3, #8
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f103 0208 	add.w	r2, r3, #8
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2200      	movs	r2, #0
 800e496:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e498:	bf00      	nop
 800e49a:	370c      	adds	r7, #12
 800e49c:	46bd      	mov	sp, r7
 800e49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a2:	4770      	bx	lr

0800e4a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b083      	sub	sp, #12
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e4b2:	bf00      	nop
 800e4b4:	370c      	adds	r7, #12
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4bc:	4770      	bx	lr

0800e4be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e4be:	b480      	push	{r7}
 800e4c0:	b085      	sub	sp, #20
 800e4c2:	af00      	add	r7, sp, #0
 800e4c4:	6078      	str	r0, [r7, #4]
 800e4c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	68fa      	ldr	r2, [r7, #12]
 800e4d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	689a      	ldr	r2, [r3, #8]
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	689b      	ldr	r3, [r3, #8]
 800e4e0:	683a      	ldr	r2, [r7, #0]
 800e4e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	683a      	ldr	r2, [r7, #0]
 800e4e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	687a      	ldr	r2, [r7, #4]
 800e4ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	1c5a      	adds	r2, r3, #1
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	601a      	str	r2, [r3, #0]
}
 800e4fa:	bf00      	nop
 800e4fc:	3714      	adds	r7, #20
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr

0800e506 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e506:	b480      	push	{r7}
 800e508:	b085      	sub	sp, #20
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	6078      	str	r0, [r7, #4]
 800e50e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e51c:	d103      	bne.n	800e526 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	691b      	ldr	r3, [r3, #16]
 800e522:	60fb      	str	r3, [r7, #12]
 800e524:	e00c      	b.n	800e540 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	3308      	adds	r3, #8
 800e52a:	60fb      	str	r3, [r7, #12]
 800e52c:	e002      	b.n	800e534 <vListInsert+0x2e>
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	685b      	ldr	r3, [r3, #4]
 800e532:	60fb      	str	r3, [r7, #12]
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	685b      	ldr	r3, [r3, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	68ba      	ldr	r2, [r7, #8]
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d2f6      	bcs.n	800e52e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	685a      	ldr	r2, [r3, #4]
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	685b      	ldr	r3, [r3, #4]
 800e54c:	683a      	ldr	r2, [r7, #0]
 800e54e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	68fa      	ldr	r2, [r7, #12]
 800e554:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	683a      	ldr	r2, [r7, #0]
 800e55a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	687a      	ldr	r2, [r7, #4]
 800e560:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	1c5a      	adds	r2, r3, #1
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	601a      	str	r2, [r3, #0]
}
 800e56c:	bf00      	nop
 800e56e:	3714      	adds	r7, #20
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr

0800e578 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e578:	b480      	push	{r7}
 800e57a:	b085      	sub	sp, #20
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	691b      	ldr	r3, [r3, #16]
 800e584:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	685b      	ldr	r3, [r3, #4]
 800e58a:	687a      	ldr	r2, [r7, #4]
 800e58c:	6892      	ldr	r2, [r2, #8]
 800e58e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	689b      	ldr	r3, [r3, #8]
 800e594:	687a      	ldr	r2, [r7, #4]
 800e596:	6852      	ldr	r2, [r2, #4]
 800e598:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	687a      	ldr	r2, [r7, #4]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d103      	bne.n	800e5ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	689a      	ldr	r2, [r3, #8]
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	1e5a      	subs	r2, r3, #1
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3714      	adds	r7, #20
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr

0800e5cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b085      	sub	sp, #20
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	60f8      	str	r0, [r7, #12]
 800e5d4:	60b9      	str	r1, [r7, #8]
 800e5d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	3b04      	subs	r3, #4
 800e5dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e5e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	3b04      	subs	r3, #4
 800e5ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	f023 0201 	bic.w	r2, r3, #1
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	3b04      	subs	r3, #4
 800e5fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e5fc:	4a0c      	ldr	r2, [pc, #48]	; (800e630 <pxPortInitialiseStack+0x64>)
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	3b14      	subs	r3, #20
 800e606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e608:	687a      	ldr	r2, [r7, #4]
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	3b04      	subs	r3, #4
 800e612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f06f 0202 	mvn.w	r2, #2
 800e61a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	3b20      	subs	r3, #32
 800e620:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e622:	68fb      	ldr	r3, [r7, #12]
}
 800e624:	4618      	mov	r0, r3
 800e626:	3714      	adds	r7, #20
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr
 800e630:	0800e635 	.word	0x0800e635

0800e634 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e634:	b480      	push	{r7}
 800e636:	b085      	sub	sp, #20
 800e638:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e63a:	2300      	movs	r3, #0
 800e63c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e63e:	4b12      	ldr	r3, [pc, #72]	; (800e688 <prvTaskExitError+0x54>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e646:	d00a      	beq.n	800e65e <prvTaskExitError+0x2a>
	__asm volatile
 800e648:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800e64c:	f383 8811 	msr	BASEPRI, r3
 800e650:	f3bf 8f6f 	isb	sy
 800e654:	f3bf 8f4f 	dsb	sy
 800e658:	60fb      	str	r3, [r7, #12]
}
 800e65a:	bf00      	nop
 800e65c:	e7fe      	b.n	800e65c <prvTaskExitError+0x28>
	__asm volatile
 800e65e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800e662:	f383 8811 	msr	BASEPRI, r3
 800e666:	f3bf 8f6f 	isb	sy
 800e66a:	f3bf 8f4f 	dsb	sy
 800e66e:	60bb      	str	r3, [r7, #8]
}
 800e670:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e672:	bf00      	nop
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d0fc      	beq.n	800e674 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e67a:	bf00      	nop
 800e67c:	bf00      	nop
 800e67e:	3714      	adds	r7, #20
 800e680:	46bd      	mov	sp, r7
 800e682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e686:	4770      	bx	lr
 800e688:	2000000c 	.word	0x2000000c
 800e68c:	00000000 	.word	0x00000000

0800e690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e690:	4b07      	ldr	r3, [pc, #28]	; (800e6b0 <pxCurrentTCBConst2>)
 800e692:	6819      	ldr	r1, [r3, #0]
 800e694:	6808      	ldr	r0, [r1, #0]
 800e696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e69a:	f380 8809 	msr	PSP, r0
 800e69e:	f3bf 8f6f 	isb	sy
 800e6a2:	f04f 0000 	mov.w	r0, #0
 800e6a6:	f380 8811 	msr	BASEPRI, r0
 800e6aa:	4770      	bx	lr
 800e6ac:	f3af 8000 	nop.w

0800e6b0 <pxCurrentTCBConst2>:
 800e6b0:	20007d80 	.word	0x20007d80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e6b4:	bf00      	nop
 800e6b6:	bf00      	nop

0800e6b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e6b8:	4808      	ldr	r0, [pc, #32]	; (800e6dc <prvPortStartFirstTask+0x24>)
 800e6ba:	6800      	ldr	r0, [r0, #0]
 800e6bc:	6800      	ldr	r0, [r0, #0]
 800e6be:	f380 8808 	msr	MSP, r0
 800e6c2:	f04f 0000 	mov.w	r0, #0
 800e6c6:	f380 8814 	msr	CONTROL, r0
 800e6ca:	b662      	cpsie	i
 800e6cc:	b661      	cpsie	f
 800e6ce:	f3bf 8f4f 	dsb	sy
 800e6d2:	f3bf 8f6f 	isb	sy
 800e6d6:	df00      	svc	0
 800e6d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e6da:	bf00      	nop
 800e6dc:	e000ed08 	.word	0xe000ed08

0800e6e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b086      	sub	sp, #24
 800e6e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e6e6:	4b46      	ldr	r3, [pc, #280]	; (800e800 <xPortStartScheduler+0x120>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	4a46      	ldr	r2, [pc, #280]	; (800e804 <xPortStartScheduler+0x124>)
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d10a      	bne.n	800e706 <xPortStartScheduler+0x26>
	__asm volatile
 800e6f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800e6f4:	f383 8811 	msr	BASEPRI, r3
 800e6f8:	f3bf 8f6f 	isb	sy
 800e6fc:	f3bf 8f4f 	dsb	sy
 800e700:	613b      	str	r3, [r7, #16]
}
 800e702:	bf00      	nop
 800e704:	e7fe      	b.n	800e704 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e706:	4b3e      	ldr	r3, [pc, #248]	; (800e800 <xPortStartScheduler+0x120>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	4a3f      	ldr	r2, [pc, #252]	; (800e808 <xPortStartScheduler+0x128>)
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d10a      	bne.n	800e726 <xPortStartScheduler+0x46>
	__asm volatile
 800e710:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800e714:	f383 8811 	msr	BASEPRI, r3
 800e718:	f3bf 8f6f 	isb	sy
 800e71c:	f3bf 8f4f 	dsb	sy
 800e720:	60fb      	str	r3, [r7, #12]
}
 800e722:	bf00      	nop
 800e724:	e7fe      	b.n	800e724 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e726:	4b39      	ldr	r3, [pc, #228]	; (800e80c <xPortStartScheduler+0x12c>)
 800e728:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	781b      	ldrb	r3, [r3, #0]
 800e72e:	b2db      	uxtb	r3, r3
 800e730:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	22ff      	movs	r2, #255	; 0xff
 800e736:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e740:	78fb      	ldrb	r3, [r7, #3]
 800e742:	b2db      	uxtb	r3, r3
 800e744:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 800e748:	b2da      	uxtb	r2, r3
 800e74a:	4b31      	ldr	r3, [pc, #196]	; (800e810 <xPortStartScheduler+0x130>)
 800e74c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e74e:	4b31      	ldr	r3, [pc, #196]	; (800e814 <xPortStartScheduler+0x134>)
 800e750:	2207      	movs	r2, #7
 800e752:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e754:	e009      	b.n	800e76a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e756:	4b2f      	ldr	r3, [pc, #188]	; (800e814 <xPortStartScheduler+0x134>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	3b01      	subs	r3, #1
 800e75c:	4a2d      	ldr	r2, [pc, #180]	; (800e814 <xPortStartScheduler+0x134>)
 800e75e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e760:	78fb      	ldrb	r3, [r7, #3]
 800e762:	b2db      	uxtb	r3, r3
 800e764:	005b      	lsls	r3, r3, #1
 800e766:	b2db      	uxtb	r3, r3
 800e768:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e76a:	78fb      	ldrb	r3, [r7, #3]
 800e76c:	b2db      	uxtb	r3, r3
 800e76e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e772:	2b80      	cmp	r3, #128	; 0x80
 800e774:	d0ef      	beq.n	800e756 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e776:	4b27      	ldr	r3, [pc, #156]	; (800e814 <xPortStartScheduler+0x134>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f1c3 0307 	rsb	r3, r3, #7
 800e77e:	2b04      	cmp	r3, #4
 800e780:	d00a      	beq.n	800e798 <xPortStartScheduler+0xb8>
	__asm volatile
 800e782:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800e786:	f383 8811 	msr	BASEPRI, r3
 800e78a:	f3bf 8f6f 	isb	sy
 800e78e:	f3bf 8f4f 	dsb	sy
 800e792:	60bb      	str	r3, [r7, #8]
}
 800e794:	bf00      	nop
 800e796:	e7fe      	b.n	800e796 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e798:	4b1e      	ldr	r3, [pc, #120]	; (800e814 <xPortStartScheduler+0x134>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	021b      	lsls	r3, r3, #8
 800e79e:	4a1d      	ldr	r2, [pc, #116]	; (800e814 <xPortStartScheduler+0x134>)
 800e7a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e7a2:	4b1c      	ldr	r3, [pc, #112]	; (800e814 <xPortStartScheduler+0x134>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e7aa:	4a1a      	ldr	r2, [pc, #104]	; (800e814 <xPortStartScheduler+0x134>)
 800e7ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	b2da      	uxtb	r2, r3
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e7b6:	4b18      	ldr	r3, [pc, #96]	; (800e818 <xPortStartScheduler+0x138>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	4a17      	ldr	r2, [pc, #92]	; (800e818 <xPortStartScheduler+0x138>)
 800e7bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e7c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e7c2:	4b15      	ldr	r3, [pc, #84]	; (800e818 <xPortStartScheduler+0x138>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	4a14      	ldr	r2, [pc, #80]	; (800e818 <xPortStartScheduler+0x138>)
 800e7c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e7cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e7ce:	f000 f8dd 	bl	800e98c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e7d2:	4b12      	ldr	r3, [pc, #72]	; (800e81c <xPortStartScheduler+0x13c>)
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e7d8:	f000 f8fc 	bl	800e9d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e7dc:	4b10      	ldr	r3, [pc, #64]	; (800e820 <xPortStartScheduler+0x140>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4a0f      	ldr	r2, [pc, #60]	; (800e820 <xPortStartScheduler+0x140>)
 800e7e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e7e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e7e8:	f7ff ff66 	bl	800e6b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e7ec:	f001 fbda 	bl	800ffa4 <vTaskSwitchContext>
	prvTaskExitError();
 800e7f0:	f7ff ff20 	bl	800e634 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e7f4:	2300      	movs	r3, #0
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3718      	adds	r7, #24
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	e000ed00 	.word	0xe000ed00
 800e804:	410fc271 	.word	0x410fc271
 800e808:	410fc270 	.word	0x410fc270
 800e80c:	e000e400 	.word	0xe000e400
 800e810:	20007d38 	.word	0x20007d38
 800e814:	20007d3c 	.word	0x20007d3c
 800e818:	e000ed20 	.word	0xe000ed20
 800e81c:	2000000c 	.word	0x2000000c
 800e820:	e000ef34 	.word	0xe000ef34

0800e824 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
	__asm volatile
 800e82a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800e82e:	f383 8811 	msr	BASEPRI, r3
 800e832:	f3bf 8f6f 	isb	sy
 800e836:	f3bf 8f4f 	dsb	sy
 800e83a:	607b      	str	r3, [r7, #4]
}
 800e83c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e83e:	4b0f      	ldr	r3, [pc, #60]	; (800e87c <vPortEnterCritical+0x58>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	3301      	adds	r3, #1
 800e844:	4a0d      	ldr	r2, [pc, #52]	; (800e87c <vPortEnterCritical+0x58>)
 800e846:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e848:	4b0c      	ldr	r3, [pc, #48]	; (800e87c <vPortEnterCritical+0x58>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	2b01      	cmp	r3, #1
 800e84e:	d10f      	bne.n	800e870 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e850:	4b0b      	ldr	r3, [pc, #44]	; (800e880 <vPortEnterCritical+0x5c>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	b2db      	uxtb	r3, r3
 800e856:	2b00      	cmp	r3, #0
 800e858:	d00a      	beq.n	800e870 <vPortEnterCritical+0x4c>
	__asm volatile
 800e85a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800e85e:	f383 8811 	msr	BASEPRI, r3
 800e862:	f3bf 8f6f 	isb	sy
 800e866:	f3bf 8f4f 	dsb	sy
 800e86a:	603b      	str	r3, [r7, #0]
}
 800e86c:	bf00      	nop
 800e86e:	e7fe      	b.n	800e86e <vPortEnterCritical+0x4a>
	}
}
 800e870:	bf00      	nop
 800e872:	370c      	adds	r7, #12
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr
 800e87c:	2000000c 	.word	0x2000000c
 800e880:	e000ed04 	.word	0xe000ed04

0800e884 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e884:	b480      	push	{r7}
 800e886:	b083      	sub	sp, #12
 800e888:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e88a:	4b12      	ldr	r3, [pc, #72]	; (800e8d4 <vPortExitCritical+0x50>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d10a      	bne.n	800e8a8 <vPortExitCritical+0x24>
	__asm volatile
 800e892:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800e896:	f383 8811 	msr	BASEPRI, r3
 800e89a:	f3bf 8f6f 	isb	sy
 800e89e:	f3bf 8f4f 	dsb	sy
 800e8a2:	607b      	str	r3, [r7, #4]
}
 800e8a4:	bf00      	nop
 800e8a6:	e7fe      	b.n	800e8a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e8a8:	4b0a      	ldr	r3, [pc, #40]	; (800e8d4 <vPortExitCritical+0x50>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	3b01      	subs	r3, #1
 800e8ae:	4a09      	ldr	r2, [pc, #36]	; (800e8d4 <vPortExitCritical+0x50>)
 800e8b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e8b2:	4b08      	ldr	r3, [pc, #32]	; (800e8d4 <vPortExitCritical+0x50>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d105      	bne.n	800e8c6 <vPortExitCritical+0x42>
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	f383 8811 	msr	BASEPRI, r3
}
 800e8c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e8c6:	bf00      	nop
 800e8c8:	370c      	adds	r7, #12
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d0:	4770      	bx	lr
 800e8d2:	bf00      	nop
 800e8d4:	2000000c 	.word	0x2000000c
	...

0800e8e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e8e0:	f3ef 8009 	mrs	r0, PSP
 800e8e4:	f3bf 8f6f 	isb	sy
 800e8e8:	4b15      	ldr	r3, [pc, #84]	; (800e940 <pxCurrentTCBConst>)
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	f01e 0f10 	tst.w	lr, #16
 800e8f0:	bf08      	it	eq
 800e8f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e8f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8fa:	6010      	str	r0, [r2, #0]
 800e8fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e900:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 800e904:	f380 8811 	msr	BASEPRI, r0
 800e908:	f3bf 8f4f 	dsb	sy
 800e90c:	f3bf 8f6f 	isb	sy
 800e910:	f001 fb48 	bl	800ffa4 <vTaskSwitchContext>
 800e914:	f04f 0000 	mov.w	r0, #0
 800e918:	f380 8811 	msr	BASEPRI, r0
 800e91c:	bc09      	pop	{r0, r3}
 800e91e:	6819      	ldr	r1, [r3, #0]
 800e920:	6808      	ldr	r0, [r1, #0]
 800e922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e926:	f01e 0f10 	tst.w	lr, #16
 800e92a:	bf08      	it	eq
 800e92c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e930:	f380 8809 	msr	PSP, r0
 800e934:	f3bf 8f6f 	isb	sy
 800e938:	4770      	bx	lr
 800e93a:	bf00      	nop
 800e93c:	f3af 8000 	nop.w

0800e940 <pxCurrentTCBConst>:
 800e940:	20007d80 	.word	0x20007d80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e944:	bf00      	nop
 800e946:	bf00      	nop

0800e948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b082      	sub	sp, #8
 800e94c:	af00      	add	r7, sp, #0
	__asm volatile
 800e94e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800e952:	f383 8811 	msr	BASEPRI, r3
 800e956:	f3bf 8f6f 	isb	sy
 800e95a:	f3bf 8f4f 	dsb	sy
 800e95e:	607b      	str	r3, [r7, #4]
}
 800e960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e962:	f001 fa5d 	bl	800fe20 <xTaskIncrementTick>
 800e966:	4603      	mov	r3, r0
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d003      	beq.n	800e974 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e96c:	4b06      	ldr	r3, [pc, #24]	; (800e988 <xPortSysTickHandler+0x40>)
 800e96e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e972:	601a      	str	r2, [r3, #0]
 800e974:	2300      	movs	r3, #0
 800e976:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	f383 8811 	msr	BASEPRI, r3
}
 800e97e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e980:	bf00      	nop
 800e982:	3708      	adds	r7, #8
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}
 800e988:	e000ed04 	.word	0xe000ed04

0800e98c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e98c:	b480      	push	{r7}
 800e98e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e990:	4b0b      	ldr	r3, [pc, #44]	; (800e9c0 <vPortSetupTimerInterrupt+0x34>)
 800e992:	2200      	movs	r2, #0
 800e994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e996:	4b0b      	ldr	r3, [pc, #44]	; (800e9c4 <vPortSetupTimerInterrupt+0x38>)
 800e998:	2200      	movs	r2, #0
 800e99a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e99c:	4b0a      	ldr	r3, [pc, #40]	; (800e9c8 <vPortSetupTimerInterrupt+0x3c>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	4a0a      	ldr	r2, [pc, #40]	; (800e9cc <vPortSetupTimerInterrupt+0x40>)
 800e9a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e9a6:	099b      	lsrs	r3, r3, #6
 800e9a8:	4a09      	ldr	r2, [pc, #36]	; (800e9d0 <vPortSetupTimerInterrupt+0x44>)
 800e9aa:	3b01      	subs	r3, #1
 800e9ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e9ae:	4b04      	ldr	r3, [pc, #16]	; (800e9c0 <vPortSetupTimerInterrupt+0x34>)
 800e9b0:	2207      	movs	r2, #7
 800e9b2:	601a      	str	r2, [r3, #0]
}
 800e9b4:	bf00      	nop
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9bc:	4770      	bx	lr
 800e9be:	bf00      	nop
 800e9c0:	e000e010 	.word	0xe000e010
 800e9c4:	e000e018 	.word	0xe000e018
 800e9c8:	20000000 	.word	0x20000000
 800e9cc:	10624dd3 	.word	0x10624dd3
 800e9d0:	e000e014 	.word	0xe000e014

0800e9d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e9d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e9e4 <vPortEnableVFP+0x10>
 800e9d8:	6801      	ldr	r1, [r0, #0]
 800e9da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e9de:	6001      	str	r1, [r0, #0]
 800e9e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e9e2:	bf00      	nop
 800e9e4:	e000ed88 	.word	0xe000ed88

0800e9e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b085      	sub	sp, #20
 800e9ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e9ee:	f3ef 8305 	mrs	r3, IPSR
 800e9f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	2b0f      	cmp	r3, #15
 800e9f8:	d914      	bls.n	800ea24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e9fa:	4a17      	ldr	r2, [pc, #92]	; (800ea58 <vPortValidateInterruptPriority+0x70>)
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	4413      	add	r3, r2
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ea04:	4b15      	ldr	r3, [pc, #84]	; (800ea5c <vPortValidateInterruptPriority+0x74>)
 800ea06:	781b      	ldrb	r3, [r3, #0]
 800ea08:	7afa      	ldrb	r2, [r7, #11]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d20a      	bcs.n	800ea24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ea0e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ea12:	f383 8811 	msr	BASEPRI, r3
 800ea16:	f3bf 8f6f 	isb	sy
 800ea1a:	f3bf 8f4f 	dsb	sy
 800ea1e:	607b      	str	r3, [r7, #4]
}
 800ea20:	bf00      	nop
 800ea22:	e7fe      	b.n	800ea22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ea24:	4b0e      	ldr	r3, [pc, #56]	; (800ea60 <vPortValidateInterruptPriority+0x78>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ea2c:	4b0d      	ldr	r3, [pc, #52]	; (800ea64 <vPortValidateInterruptPriority+0x7c>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d90a      	bls.n	800ea4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ea34:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ea38:	f383 8811 	msr	BASEPRI, r3
 800ea3c:	f3bf 8f6f 	isb	sy
 800ea40:	f3bf 8f4f 	dsb	sy
 800ea44:	603b      	str	r3, [r7, #0]
}
 800ea46:	bf00      	nop
 800ea48:	e7fe      	b.n	800ea48 <vPortValidateInterruptPriority+0x60>
	}
 800ea4a:	bf00      	nop
 800ea4c:	3714      	adds	r7, #20
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea54:	4770      	bx	lr
 800ea56:	bf00      	nop
 800ea58:	e000e3f0 	.word	0xe000e3f0
 800ea5c:	20007d38 	.word	0x20007d38
 800ea60:	e000ed0c 	.word	0xe000ed0c
 800ea64:	20007d3c 	.word	0x20007d3c

0800ea68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b084      	sub	sp, #16
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d10a      	bne.n	800ea92 <xQueueGenericReset+0x2a>
	__asm volatile
 800ea7c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ea80:	f383 8811 	msr	BASEPRI, r3
 800ea84:	f3bf 8f6f 	isb	sy
 800ea88:	f3bf 8f4f 	dsb	sy
 800ea8c:	60bb      	str	r3, [r7, #8]
}
 800ea8e:	bf00      	nop
 800ea90:	e7fe      	b.n	800ea90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ea92:	f7ff fec7 	bl	800e824 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea9e:	68f9      	ldr	r1, [r7, #12]
 800eaa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eaa2:	fb01 f303 	mul.w	r3, r1, r3
 800eaa6:	441a      	add	r2, r3
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2200      	movs	r2, #0
 800eab0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681a      	ldr	r2, [r3, #0]
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	681a      	ldr	r2, [r3, #0]
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eac2:	3b01      	subs	r3, #1
 800eac4:	68f9      	ldr	r1, [r7, #12]
 800eac6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eac8:	fb01 f303 	mul.w	r3, r1, r3
 800eacc:	441a      	add	r2, r3
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	22ff      	movs	r2, #255	; 0xff
 800ead6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	22ff      	movs	r2, #255	; 0xff
 800eade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d114      	bne.n	800eb12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	691b      	ldr	r3, [r3, #16]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d01a      	beq.n	800eb26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	3310      	adds	r3, #16
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f001 fb3d 	bl	8010174 <xTaskRemoveFromEventList>
 800eafa:	4603      	mov	r3, r0
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d012      	beq.n	800eb26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eb00:	4b0c      	ldr	r3, [pc, #48]	; (800eb34 <xQueueGenericReset+0xcc>)
 800eb02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb06:	601a      	str	r2, [r3, #0]
 800eb08:	f3bf 8f4f 	dsb	sy
 800eb0c:	f3bf 8f6f 	isb	sy
 800eb10:	e009      	b.n	800eb26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	3310      	adds	r3, #16
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7ff fca4 	bl	800e464 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	3324      	adds	r3, #36	; 0x24
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7ff fc9f 	bl	800e464 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800eb26:	f7ff fead 	bl	800e884 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800eb2a:	2301      	movs	r3, #1
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3710      	adds	r7, #16
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}
 800eb34:	e000ed04 	.word	0xe000ed04

0800eb38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b08e      	sub	sp, #56	; 0x38
 800eb3c:	af02      	add	r7, sp, #8
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	607a      	str	r2, [r7, #4]
 800eb44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d10a      	bne.n	800eb62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800eb4c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800eb50:	f383 8811 	msr	BASEPRI, r3
 800eb54:	f3bf 8f6f 	isb	sy
 800eb58:	f3bf 8f4f 	dsb	sy
 800eb5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eb5e:	bf00      	nop
 800eb60:	e7fe      	b.n	800eb60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d10a      	bne.n	800eb7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800eb68:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800eb6c:	f383 8811 	msr	BASEPRI, r3
 800eb70:	f3bf 8f6f 	isb	sy
 800eb74:	f3bf 8f4f 	dsb	sy
 800eb78:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eb7a:	bf00      	nop
 800eb7c:	e7fe      	b.n	800eb7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d002      	beq.n	800eb8a <xQueueGenericCreateStatic+0x52>
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d001      	beq.n	800eb8e <xQueueGenericCreateStatic+0x56>
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	e000      	b.n	800eb90 <xQueueGenericCreateStatic+0x58>
 800eb8e:	2300      	movs	r3, #0
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d10a      	bne.n	800ebaa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800eb94:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800eb98:	f383 8811 	msr	BASEPRI, r3
 800eb9c:	f3bf 8f6f 	isb	sy
 800eba0:	f3bf 8f4f 	dsb	sy
 800eba4:	623b      	str	r3, [r7, #32]
}
 800eba6:	bf00      	nop
 800eba8:	e7fe      	b.n	800eba8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d102      	bne.n	800ebb6 <xQueueGenericCreateStatic+0x7e>
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d101      	bne.n	800ebba <xQueueGenericCreateStatic+0x82>
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	e000      	b.n	800ebbc <xQueueGenericCreateStatic+0x84>
 800ebba:	2300      	movs	r3, #0
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d10a      	bne.n	800ebd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ebc0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ebc4:	f383 8811 	msr	BASEPRI, r3
 800ebc8:	f3bf 8f6f 	isb	sy
 800ebcc:	f3bf 8f4f 	dsb	sy
 800ebd0:	61fb      	str	r3, [r7, #28]
}
 800ebd2:	bf00      	nop
 800ebd4:	e7fe      	b.n	800ebd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ebd6:	2350      	movs	r3, #80	; 0x50
 800ebd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	2b50      	cmp	r3, #80	; 0x50
 800ebde:	d00a      	beq.n	800ebf6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ebe0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ebe4:	f383 8811 	msr	BASEPRI, r3
 800ebe8:	f3bf 8f6f 	isb	sy
 800ebec:	f3bf 8f4f 	dsb	sy
 800ebf0:	61bb      	str	r3, [r7, #24]
}
 800ebf2:	bf00      	nop
 800ebf4:	e7fe      	b.n	800ebf4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ebf6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ebfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d00d      	beq.n	800ec1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ec02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec04:	2201      	movs	r2, #1
 800ec06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ec0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ec0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec10:	9300      	str	r3, [sp, #0]
 800ec12:	4613      	mov	r3, r2
 800ec14:	687a      	ldr	r2, [r7, #4]
 800ec16:	68b9      	ldr	r1, [r7, #8]
 800ec18:	68f8      	ldr	r0, [r7, #12]
 800ec1a:	f000 f805 	bl	800ec28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ec1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3730      	adds	r7, #48	; 0x30
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}

0800ec28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b084      	sub	sp, #16
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	60f8      	str	r0, [r7, #12]
 800ec30:	60b9      	str	r1, [r7, #8]
 800ec32:	607a      	str	r2, [r7, #4]
 800ec34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ec36:	68bb      	ldr	r3, [r7, #8]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d103      	bne.n	800ec44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ec3c:	69bb      	ldr	r3, [r7, #24]
 800ec3e:	69ba      	ldr	r2, [r7, #24]
 800ec40:	601a      	str	r2, [r3, #0]
 800ec42:	e002      	b.n	800ec4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ec44:	69bb      	ldr	r3, [r7, #24]
 800ec46:	687a      	ldr	r2, [r7, #4]
 800ec48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ec4a:	69bb      	ldr	r3, [r7, #24]
 800ec4c:	68fa      	ldr	r2, [r7, #12]
 800ec4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ec50:	69bb      	ldr	r3, [r7, #24]
 800ec52:	68ba      	ldr	r2, [r7, #8]
 800ec54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ec56:	2101      	movs	r1, #1
 800ec58:	69b8      	ldr	r0, [r7, #24]
 800ec5a:	f7ff ff05 	bl	800ea68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ec5e:	69bb      	ldr	r3, [r7, #24]
 800ec60:	78fa      	ldrb	r2, [r7, #3]
 800ec62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ec66:	bf00      	nop
 800ec68:	3710      	adds	r7, #16
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}
	...

0800ec70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b08e      	sub	sp, #56	; 0x38
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	60f8      	str	r0, [r7, #12]
 800ec78:	60b9      	str	r1, [r7, #8]
 800ec7a:	607a      	str	r2, [r7, #4]
 800ec7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ec86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d10a      	bne.n	800eca2 <xQueueGenericSend+0x32>
	__asm volatile
 800ec8c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ec90:	f383 8811 	msr	BASEPRI, r3
 800ec94:	f3bf 8f6f 	isb	sy
 800ec98:	f3bf 8f4f 	dsb	sy
 800ec9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ec9e:	bf00      	nop
 800eca0:	e7fe      	b.n	800eca0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d103      	bne.n	800ecb0 <xQueueGenericSend+0x40>
 800eca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d101      	bne.n	800ecb4 <xQueueGenericSend+0x44>
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	e000      	b.n	800ecb6 <xQueueGenericSend+0x46>
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d10a      	bne.n	800ecd0 <xQueueGenericSend+0x60>
	__asm volatile
 800ecba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ecbe:	f383 8811 	msr	BASEPRI, r3
 800ecc2:	f3bf 8f6f 	isb	sy
 800ecc6:	f3bf 8f4f 	dsb	sy
 800ecca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eccc:	bf00      	nop
 800ecce:	e7fe      	b.n	800ecce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	2b02      	cmp	r3, #2
 800ecd4:	d103      	bne.n	800ecde <xQueueGenericSend+0x6e>
 800ecd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecda:	2b01      	cmp	r3, #1
 800ecdc:	d101      	bne.n	800ece2 <xQueueGenericSend+0x72>
 800ecde:	2301      	movs	r3, #1
 800ece0:	e000      	b.n	800ece4 <xQueueGenericSend+0x74>
 800ece2:	2300      	movs	r3, #0
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d10a      	bne.n	800ecfe <xQueueGenericSend+0x8e>
	__asm volatile
 800ece8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ecec:	f383 8811 	msr	BASEPRI, r3
 800ecf0:	f3bf 8f6f 	isb	sy
 800ecf4:	f3bf 8f4f 	dsb	sy
 800ecf8:	623b      	str	r3, [r7, #32]
}
 800ecfa:	bf00      	nop
 800ecfc:	e7fe      	b.n	800ecfc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ecfe:	f001 fbfd 	bl	80104fc <xTaskGetSchedulerState>
 800ed02:	4603      	mov	r3, r0
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d102      	bne.n	800ed0e <xQueueGenericSend+0x9e>
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d101      	bne.n	800ed12 <xQueueGenericSend+0xa2>
 800ed0e:	2301      	movs	r3, #1
 800ed10:	e000      	b.n	800ed14 <xQueueGenericSend+0xa4>
 800ed12:	2300      	movs	r3, #0
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d10a      	bne.n	800ed2e <xQueueGenericSend+0xbe>
	__asm volatile
 800ed18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ed1c:	f383 8811 	msr	BASEPRI, r3
 800ed20:	f3bf 8f6f 	isb	sy
 800ed24:	f3bf 8f4f 	dsb	sy
 800ed28:	61fb      	str	r3, [r7, #28]
}
 800ed2a:	bf00      	nop
 800ed2c:	e7fe      	b.n	800ed2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ed2e:	f7ff fd79 	bl	800e824 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ed32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d302      	bcc.n	800ed44 <xQueueGenericSend+0xd4>
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	2b02      	cmp	r3, #2
 800ed42:	d129      	bne.n	800ed98 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ed44:	683a      	ldr	r2, [r7, #0]
 800ed46:	68b9      	ldr	r1, [r7, #8]
 800ed48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed4a:	f000 fa0b 	bl	800f164 <prvCopyDataToQueue>
 800ed4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d010      	beq.n	800ed7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5a:	3324      	adds	r3, #36	; 0x24
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f001 fa09 	bl	8010174 <xTaskRemoveFromEventList>
 800ed62:	4603      	mov	r3, r0
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d013      	beq.n	800ed90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ed68:	4b3f      	ldr	r3, [pc, #252]	; (800ee68 <xQueueGenericSend+0x1f8>)
 800ed6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed6e:	601a      	str	r2, [r3, #0]
 800ed70:	f3bf 8f4f 	dsb	sy
 800ed74:	f3bf 8f6f 	isb	sy
 800ed78:	e00a      	b.n	800ed90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ed7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d007      	beq.n	800ed90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ed80:	4b39      	ldr	r3, [pc, #228]	; (800ee68 <xQueueGenericSend+0x1f8>)
 800ed82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed86:	601a      	str	r2, [r3, #0]
 800ed88:	f3bf 8f4f 	dsb	sy
 800ed8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ed90:	f7ff fd78 	bl	800e884 <vPortExitCritical>
				return pdPASS;
 800ed94:	2301      	movs	r3, #1
 800ed96:	e063      	b.n	800ee60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d103      	bne.n	800eda6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ed9e:	f7ff fd71 	bl	800e884 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800eda2:	2300      	movs	r3, #0
 800eda4:	e05c      	b.n	800ee60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eda6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d106      	bne.n	800edba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800edac:	f107 0314 	add.w	r3, r7, #20
 800edb0:	4618      	mov	r0, r3
 800edb2:	f001 fa43 	bl	801023c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800edb6:	2301      	movs	r3, #1
 800edb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800edba:	f7ff fd63 	bl	800e884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800edbe:	f000 ff73 	bl	800fca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800edc2:	f7ff fd2f 	bl	800e824 <vPortEnterCritical>
 800edc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800edcc:	b25b      	sxtb	r3, r3
 800edce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edd2:	d103      	bne.n	800eddc <xQueueGenericSend+0x16c>
 800edd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd6:	2200      	movs	r2, #0
 800edd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ede2:	b25b      	sxtb	r3, r3
 800ede4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ede8:	d103      	bne.n	800edf2 <xQueueGenericSend+0x182>
 800edea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edec:	2200      	movs	r2, #0
 800edee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800edf2:	f7ff fd47 	bl	800e884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800edf6:	1d3a      	adds	r2, r7, #4
 800edf8:	f107 0314 	add.w	r3, r7, #20
 800edfc:	4611      	mov	r1, r2
 800edfe:	4618      	mov	r0, r3
 800ee00:	f001 fa32 	bl	8010268 <xTaskCheckForTimeOut>
 800ee04:	4603      	mov	r3, r0
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d124      	bne.n	800ee54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ee0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee0c:	f000 faa2 	bl	800f354 <prvIsQueueFull>
 800ee10:	4603      	mov	r3, r0
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d018      	beq.n	800ee48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ee16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee18:	3310      	adds	r3, #16
 800ee1a:	687a      	ldr	r2, [r7, #4]
 800ee1c:	4611      	mov	r1, r2
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f001 f958 	bl	80100d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ee24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee26:	f000 fa2d 	bl	800f284 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ee2a:	f000 ff4b 	bl	800fcc4 <xTaskResumeAll>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	f47f af7c 	bne.w	800ed2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ee36:	4b0c      	ldr	r3, [pc, #48]	; (800ee68 <xQueueGenericSend+0x1f8>)
 800ee38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee3c:	601a      	str	r2, [r3, #0]
 800ee3e:	f3bf 8f4f 	dsb	sy
 800ee42:	f3bf 8f6f 	isb	sy
 800ee46:	e772      	b.n	800ed2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ee48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee4a:	f000 fa1b 	bl	800f284 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ee4e:	f000 ff39 	bl	800fcc4 <xTaskResumeAll>
 800ee52:	e76c      	b.n	800ed2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ee54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee56:	f000 fa15 	bl	800f284 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ee5a:	f000 ff33 	bl	800fcc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ee5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	3738      	adds	r7, #56	; 0x38
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}
 800ee68:	e000ed04 	.word	0xe000ed04

0800ee6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b090      	sub	sp, #64	; 0x40
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	60f8      	str	r0, [r7, #12]
 800ee74:	60b9      	str	r1, [r7, #8]
 800ee76:	607a      	str	r2, [r7, #4]
 800ee78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ee7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d10a      	bne.n	800ee9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ee84:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ee88:	f383 8811 	msr	BASEPRI, r3
 800ee8c:	f3bf 8f6f 	isb	sy
 800ee90:	f3bf 8f4f 	dsb	sy
 800ee94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ee96:	bf00      	nop
 800ee98:	e7fe      	b.n	800ee98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d103      	bne.n	800eea8 <xQueueGenericSendFromISR+0x3c>
 800eea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d101      	bne.n	800eeac <xQueueGenericSendFromISR+0x40>
 800eea8:	2301      	movs	r3, #1
 800eeaa:	e000      	b.n	800eeae <xQueueGenericSendFromISR+0x42>
 800eeac:	2300      	movs	r3, #0
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d10a      	bne.n	800eec8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800eeb2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800eeb6:	f383 8811 	msr	BASEPRI, r3
 800eeba:	f3bf 8f6f 	isb	sy
 800eebe:	f3bf 8f4f 	dsb	sy
 800eec2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eec4:	bf00      	nop
 800eec6:	e7fe      	b.n	800eec6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	2b02      	cmp	r3, #2
 800eecc:	d103      	bne.n	800eed6 <xQueueGenericSendFromISR+0x6a>
 800eece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d101      	bne.n	800eeda <xQueueGenericSendFromISR+0x6e>
 800eed6:	2301      	movs	r3, #1
 800eed8:	e000      	b.n	800eedc <xQueueGenericSendFromISR+0x70>
 800eeda:	2300      	movs	r3, #0
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d10a      	bne.n	800eef6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800eee0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800eee4:	f383 8811 	msr	BASEPRI, r3
 800eee8:	f3bf 8f6f 	isb	sy
 800eeec:	f3bf 8f4f 	dsb	sy
 800eef0:	623b      	str	r3, [r7, #32]
}
 800eef2:	bf00      	nop
 800eef4:	e7fe      	b.n	800eef4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eef6:	f7ff fd77 	bl	800e9e8 <vPortValidateInterruptPriority>
	__asm volatile
 800eefa:	f3ef 8211 	mrs	r2, BASEPRI
 800eefe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ef02:	f383 8811 	msr	BASEPRI, r3
 800ef06:	f3bf 8f6f 	isb	sy
 800ef0a:	f3bf 8f4f 	dsb	sy
 800ef0e:	61fa      	str	r2, [r7, #28]
 800ef10:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800ef12:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ef14:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d302      	bcc.n	800ef28 <xQueueGenericSendFromISR+0xbc>
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	2b02      	cmp	r3, #2
 800ef26:	d12f      	bne.n	800ef88 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ef28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef36:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef38:	683a      	ldr	r2, [r7, #0]
 800ef3a:	68b9      	ldr	r1, [r7, #8]
 800ef3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ef3e:	f000 f911 	bl	800f164 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ef42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ef46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef4a:	d112      	bne.n	800ef72 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d016      	beq.n	800ef82 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef56:	3324      	adds	r3, #36	; 0x24
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f001 f90b 	bl	8010174 <xTaskRemoveFromEventList>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d00e      	beq.n	800ef82 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d00b      	beq.n	800ef82 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2201      	movs	r2, #1
 800ef6e:	601a      	str	r2, [r3, #0]
 800ef70:	e007      	b.n	800ef82 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ef72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ef76:	3301      	adds	r3, #1
 800ef78:	b2db      	uxtb	r3, r3
 800ef7a:	b25a      	sxtb	r2, r3
 800ef7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ef82:	2301      	movs	r3, #1
 800ef84:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ef86:	e001      	b.n	800ef8c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef8e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	f383 8811 	msr	BASEPRI, r3
}
 800ef96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ef98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3740      	adds	r7, #64	; 0x40
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
	...

0800efa4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b08c      	sub	sp, #48	; 0x30
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	60f8      	str	r0, [r7, #12]
 800efac:	60b9      	str	r1, [r7, #8]
 800efae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800efb0:	2300      	movs	r3, #0
 800efb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800efb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d10a      	bne.n	800efd4 <xQueueReceive+0x30>
	__asm volatile
 800efbe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800efc2:	f383 8811 	msr	BASEPRI, r3
 800efc6:	f3bf 8f6f 	isb	sy
 800efca:	f3bf 8f4f 	dsb	sy
 800efce:	623b      	str	r3, [r7, #32]
}
 800efd0:	bf00      	nop
 800efd2:	e7fe      	b.n	800efd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d103      	bne.n	800efe2 <xQueueReceive+0x3e>
 800efda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d101      	bne.n	800efe6 <xQueueReceive+0x42>
 800efe2:	2301      	movs	r3, #1
 800efe4:	e000      	b.n	800efe8 <xQueueReceive+0x44>
 800efe6:	2300      	movs	r3, #0
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d10a      	bne.n	800f002 <xQueueReceive+0x5e>
	__asm volatile
 800efec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800eff0:	f383 8811 	msr	BASEPRI, r3
 800eff4:	f3bf 8f6f 	isb	sy
 800eff8:	f3bf 8f4f 	dsb	sy
 800effc:	61fb      	str	r3, [r7, #28]
}
 800effe:	bf00      	nop
 800f000:	e7fe      	b.n	800f000 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f002:	f001 fa7b 	bl	80104fc <xTaskGetSchedulerState>
 800f006:	4603      	mov	r3, r0
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d102      	bne.n	800f012 <xQueueReceive+0x6e>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d101      	bne.n	800f016 <xQueueReceive+0x72>
 800f012:	2301      	movs	r3, #1
 800f014:	e000      	b.n	800f018 <xQueueReceive+0x74>
 800f016:	2300      	movs	r3, #0
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d10a      	bne.n	800f032 <xQueueReceive+0x8e>
	__asm volatile
 800f01c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f020:	f383 8811 	msr	BASEPRI, r3
 800f024:	f3bf 8f6f 	isb	sy
 800f028:	f3bf 8f4f 	dsb	sy
 800f02c:	61bb      	str	r3, [r7, #24]
}
 800f02e:	bf00      	nop
 800f030:	e7fe      	b.n	800f030 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f032:	f7ff fbf7 	bl	800e824 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f03a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d01f      	beq.n	800f082 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f042:	68b9      	ldr	r1, [r7, #8]
 800f044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f046:	f000 f8f7 	bl	800f238 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f04c:	1e5a      	subs	r2, r3, #1
 800f04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f050:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f054:	691b      	ldr	r3, [r3, #16]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d00f      	beq.n	800f07a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f05c:	3310      	adds	r3, #16
 800f05e:	4618      	mov	r0, r3
 800f060:	f001 f888 	bl	8010174 <xTaskRemoveFromEventList>
 800f064:	4603      	mov	r3, r0
 800f066:	2b00      	cmp	r3, #0
 800f068:	d007      	beq.n	800f07a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f06a:	4b3d      	ldr	r3, [pc, #244]	; (800f160 <xQueueReceive+0x1bc>)
 800f06c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f070:	601a      	str	r2, [r3, #0]
 800f072:	f3bf 8f4f 	dsb	sy
 800f076:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f07a:	f7ff fc03 	bl	800e884 <vPortExitCritical>
				return pdPASS;
 800f07e:	2301      	movs	r3, #1
 800f080:	e069      	b.n	800f156 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d103      	bne.n	800f090 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f088:	f7ff fbfc 	bl	800e884 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f08c:	2300      	movs	r3, #0
 800f08e:	e062      	b.n	800f156 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f092:	2b00      	cmp	r3, #0
 800f094:	d106      	bne.n	800f0a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f096:	f107 0310 	add.w	r3, r7, #16
 800f09a:	4618      	mov	r0, r3
 800f09c:	f001 f8ce 	bl	801023c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f0a4:	f7ff fbee 	bl	800e884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f0a8:	f000 fdfe 	bl	800fca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f0ac:	f7ff fbba 	bl	800e824 <vPortEnterCritical>
 800f0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f0b6:	b25b      	sxtb	r3, r3
 800f0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0bc:	d103      	bne.n	800f0c6 <xQueueReceive+0x122>
 800f0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f0cc:	b25b      	sxtb	r3, r3
 800f0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0d2:	d103      	bne.n	800f0dc <xQueueReceive+0x138>
 800f0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f0dc:	f7ff fbd2 	bl	800e884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f0e0:	1d3a      	adds	r2, r7, #4
 800f0e2:	f107 0310 	add.w	r3, r7, #16
 800f0e6:	4611      	mov	r1, r2
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f001 f8bd 	bl	8010268 <xTaskCheckForTimeOut>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d123      	bne.n	800f13c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f0f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0f6:	f000 f917 	bl	800f328 <prvIsQueueEmpty>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d017      	beq.n	800f130 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f102:	3324      	adds	r3, #36	; 0x24
 800f104:	687a      	ldr	r2, [r7, #4]
 800f106:	4611      	mov	r1, r2
 800f108:	4618      	mov	r0, r3
 800f10a:	f000 ffe3 	bl	80100d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f10e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f110:	f000 f8b8 	bl	800f284 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f114:	f000 fdd6 	bl	800fcc4 <xTaskResumeAll>
 800f118:	4603      	mov	r3, r0
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d189      	bne.n	800f032 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f11e:	4b10      	ldr	r3, [pc, #64]	; (800f160 <xQueueReceive+0x1bc>)
 800f120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f124:	601a      	str	r2, [r3, #0]
 800f126:	f3bf 8f4f 	dsb	sy
 800f12a:	f3bf 8f6f 	isb	sy
 800f12e:	e780      	b.n	800f032 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f132:	f000 f8a7 	bl	800f284 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f136:	f000 fdc5 	bl	800fcc4 <xTaskResumeAll>
 800f13a:	e77a      	b.n	800f032 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f13c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f13e:	f000 f8a1 	bl	800f284 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f142:	f000 fdbf 	bl	800fcc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f148:	f000 f8ee 	bl	800f328 <prvIsQueueEmpty>
 800f14c:	4603      	mov	r3, r0
 800f14e:	2b00      	cmp	r3, #0
 800f150:	f43f af6f 	beq.w	800f032 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f154:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f156:	4618      	mov	r0, r3
 800f158:	3730      	adds	r7, #48	; 0x30
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
 800f15e:	bf00      	nop
 800f160:	e000ed04 	.word	0xe000ed04

0800f164 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b086      	sub	sp, #24
 800f168:	af00      	add	r7, sp, #0
 800f16a:	60f8      	str	r0, [r7, #12]
 800f16c:	60b9      	str	r1, [r7, #8]
 800f16e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f170:	2300      	movs	r3, #0
 800f172:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f178:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d10d      	bne.n	800f19e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d14d      	bne.n	800f226 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	689b      	ldr	r3, [r3, #8]
 800f18e:	4618      	mov	r0, r3
 800f190:	f001 f9d2 	bl	8010538 <xTaskPriorityDisinherit>
 800f194:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	2200      	movs	r2, #0
 800f19a:	609a      	str	r2, [r3, #8]
 800f19c:	e043      	b.n	800f226 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d119      	bne.n	800f1d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	6858      	ldr	r0, [r3, #4]
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1ac:	461a      	mov	r2, r3
 800f1ae:	68b9      	ldr	r1, [r7, #8]
 800f1b0:	f003 fd08 	bl	8012bc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	685a      	ldr	r2, [r3, #4]
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1bc:	441a      	add	r2, r3
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	685a      	ldr	r2, [r3, #4]
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	689b      	ldr	r3, [r3, #8]
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	d32b      	bcc.n	800f226 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681a      	ldr	r2, [r3, #0]
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	605a      	str	r2, [r3, #4]
 800f1d6:	e026      	b.n	800f226 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	68d8      	ldr	r0, [r3, #12]
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1e0:	461a      	mov	r2, r3
 800f1e2:	68b9      	ldr	r1, [r7, #8]
 800f1e4:	f003 fcee 	bl	8012bc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	68da      	ldr	r2, [r3, #12]
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1f0:	425b      	negs	r3, r3
 800f1f2:	441a      	add	r2, r3
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	68da      	ldr	r2, [r3, #12]
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	429a      	cmp	r2, r3
 800f202:	d207      	bcs.n	800f214 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	689a      	ldr	r2, [r3, #8]
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f20c:	425b      	negs	r3, r3
 800f20e:	441a      	add	r2, r3
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2b02      	cmp	r3, #2
 800f218:	d105      	bne.n	800f226 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f21a:	693b      	ldr	r3, [r7, #16]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d002      	beq.n	800f226 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f220:	693b      	ldr	r3, [r7, #16]
 800f222:	3b01      	subs	r3, #1
 800f224:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f226:	693b      	ldr	r3, [r7, #16]
 800f228:	1c5a      	adds	r2, r3, #1
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f22e:	697b      	ldr	r3, [r7, #20]
}
 800f230:	4618      	mov	r0, r3
 800f232:	3718      	adds	r7, #24
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}

0800f238 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b082      	sub	sp, #8
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
 800f240:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f246:	2b00      	cmp	r3, #0
 800f248:	d018      	beq.n	800f27c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	68da      	ldr	r2, [r3, #12]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f252:	441a      	add	r2, r3
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	68da      	ldr	r2, [r3, #12]
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	689b      	ldr	r3, [r3, #8]
 800f260:	429a      	cmp	r2, r3
 800f262:	d303      	bcc.n	800f26c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681a      	ldr	r2, [r3, #0]
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	68d9      	ldr	r1, [r3, #12]
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f274:	461a      	mov	r2, r3
 800f276:	6838      	ldr	r0, [r7, #0]
 800f278:	f003 fca4 	bl	8012bc4 <memcpy>
	}
}
 800f27c:	bf00      	nop
 800f27e:	3708      	adds	r7, #8
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}

0800f284 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b084      	sub	sp, #16
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f28c:	f7ff faca 	bl	800e824 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f296:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f298:	e011      	b.n	800f2be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d012      	beq.n	800f2c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	3324      	adds	r3, #36	; 0x24
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f000 ff64 	bl	8010174 <xTaskRemoveFromEventList>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d001      	beq.n	800f2b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f2b2:	f001 f84b 	bl	801034c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f2b6:	7bfb      	ldrb	r3, [r7, #15]
 800f2b8:	3b01      	subs	r3, #1
 800f2ba:	b2db      	uxtb	r3, r3
 800f2bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f2be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	dce9      	bgt.n	800f29a <prvUnlockQueue+0x16>
 800f2c6:	e000      	b.n	800f2ca <prvUnlockQueue+0x46>
					break;
 800f2c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	22ff      	movs	r2, #255	; 0xff
 800f2ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f2d2:	f7ff fad7 	bl	800e884 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f2d6:	f7ff faa5 	bl	800e824 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f2e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f2e2:	e011      	b.n	800f308 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	691b      	ldr	r3, [r3, #16]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d012      	beq.n	800f312 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	3310      	adds	r3, #16
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f000 ff3f 	bl	8010174 <xTaskRemoveFromEventList>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d001      	beq.n	800f300 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f2fc:	f001 f826 	bl	801034c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f300:	7bbb      	ldrb	r3, [r7, #14]
 800f302:	3b01      	subs	r3, #1
 800f304:	b2db      	uxtb	r3, r3
 800f306:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f308:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	dce9      	bgt.n	800f2e4 <prvUnlockQueue+0x60>
 800f310:	e000      	b.n	800f314 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f312:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	22ff      	movs	r2, #255	; 0xff
 800f318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f31c:	f7ff fab2 	bl	800e884 <vPortExitCritical>
}
 800f320:	bf00      	nop
 800f322:	3710      	adds	r7, #16
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b084      	sub	sp, #16
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f330:	f7ff fa78 	bl	800e824 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d102      	bne.n	800f342 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f33c:	2301      	movs	r3, #1
 800f33e:	60fb      	str	r3, [r7, #12]
 800f340:	e001      	b.n	800f346 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f342:	2300      	movs	r3, #0
 800f344:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f346:	f7ff fa9d 	bl	800e884 <vPortExitCritical>

	return xReturn;
 800f34a:	68fb      	ldr	r3, [r7, #12]
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	3710      	adds	r7, #16
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}

0800f354 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b084      	sub	sp, #16
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f35c:	f7ff fa62 	bl	800e824 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f368:	429a      	cmp	r2, r3
 800f36a:	d102      	bne.n	800f372 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f36c:	2301      	movs	r3, #1
 800f36e:	60fb      	str	r3, [r7, #12]
 800f370:	e001      	b.n	800f376 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f372:	2300      	movs	r3, #0
 800f374:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f376:	f7ff fa85 	bl	800e884 <vPortExitCritical>

	return xReturn;
 800f37a:	68fb      	ldr	r3, [r7, #12]
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3710      	adds	r7, #16
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f384:	b480      	push	{r7}
 800f386:	b085      	sub	sp, #20
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f38e:	2300      	movs	r3, #0
 800f390:	60fb      	str	r3, [r7, #12]
 800f392:	e014      	b.n	800f3be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f394:	4a0f      	ldr	r2, [pc, #60]	; (800f3d4 <vQueueAddToRegistry+0x50>)
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d10b      	bne.n	800f3b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f3a0:	490c      	ldr	r1, [pc, #48]	; (800f3d4 <vQueueAddToRegistry+0x50>)
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	683a      	ldr	r2, [r7, #0]
 800f3a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f3aa:	4a0a      	ldr	r2, [pc, #40]	; (800f3d4 <vQueueAddToRegistry+0x50>)
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	00db      	lsls	r3, r3, #3
 800f3b0:	4413      	add	r3, r2
 800f3b2:	687a      	ldr	r2, [r7, #4]
 800f3b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f3b6:	e006      	b.n	800f3c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	3301      	adds	r3, #1
 800f3bc:	60fb      	str	r3, [r7, #12]
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	2b07      	cmp	r3, #7
 800f3c2:	d9e7      	bls.n	800f394 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f3c4:	bf00      	nop
 800f3c6:	bf00      	nop
 800f3c8:	3714      	adds	r7, #20
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d0:	4770      	bx	lr
 800f3d2:	bf00      	nop
 800f3d4:	20007d40 	.word	0x20007d40

0800f3d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b086      	sub	sp, #24
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	60f8      	str	r0, [r7, #12]
 800f3e0:	60b9      	str	r1, [r7, #8]
 800f3e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f3e8:	f7ff fa1c 	bl	800e824 <vPortEnterCritical>
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f3f2:	b25b      	sxtb	r3, r3
 800f3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3f8:	d103      	bne.n	800f402 <vQueueWaitForMessageRestricted+0x2a>
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f408:	b25b      	sxtb	r3, r3
 800f40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f40e:	d103      	bne.n	800f418 <vQueueWaitForMessageRestricted+0x40>
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	2200      	movs	r2, #0
 800f414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f418:	f7ff fa34 	bl	800e884 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f420:	2b00      	cmp	r3, #0
 800f422:	d106      	bne.n	800f432 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	3324      	adds	r3, #36	; 0x24
 800f428:	687a      	ldr	r2, [r7, #4]
 800f42a:	68b9      	ldr	r1, [r7, #8]
 800f42c:	4618      	mov	r0, r3
 800f42e:	f000 fe75 	bl	801011c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f432:	6978      	ldr	r0, [r7, #20]
 800f434:	f7ff ff26 	bl	800f284 <prvUnlockQueue>
	}
 800f438:	bf00      	nop
 800f43a:	3718      	adds	r7, #24
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f440:	b580      	push	{r7, lr}
 800f442:	b08e      	sub	sp, #56	; 0x38
 800f444:	af04      	add	r7, sp, #16
 800f446:	60f8      	str	r0, [r7, #12]
 800f448:	60b9      	str	r1, [r7, #8]
 800f44a:	607a      	str	r2, [r7, #4]
 800f44c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f450:	2b00      	cmp	r3, #0
 800f452:	d10a      	bne.n	800f46a <xTaskCreateStatic+0x2a>
	__asm volatile
 800f454:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f458:	f383 8811 	msr	BASEPRI, r3
 800f45c:	f3bf 8f6f 	isb	sy
 800f460:	f3bf 8f4f 	dsb	sy
 800f464:	623b      	str	r3, [r7, #32]
}
 800f466:	bf00      	nop
 800f468:	e7fe      	b.n	800f468 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d10a      	bne.n	800f486 <xTaskCreateStatic+0x46>
	__asm volatile
 800f470:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f474:	f383 8811 	msr	BASEPRI, r3
 800f478:	f3bf 8f6f 	isb	sy
 800f47c:	f3bf 8f4f 	dsb	sy
 800f480:	61fb      	str	r3, [r7, #28]
}
 800f482:	bf00      	nop
 800f484:	e7fe      	b.n	800f484 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f486:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800f48a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f48c:	693b      	ldr	r3, [r7, #16]
 800f48e:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 800f492:	d00a      	beq.n	800f4aa <xTaskCreateStatic+0x6a>
	__asm volatile
 800f494:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f498:	f383 8811 	msr	BASEPRI, r3
 800f49c:	f3bf 8f6f 	isb	sy
 800f4a0:	f3bf 8f4f 	dsb	sy
 800f4a4:	61bb      	str	r3, [r7, #24]
}
 800f4a6:	bf00      	nop
 800f4a8:	e7fe      	b.n	800f4a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f4aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d01e      	beq.n	800f4f0 <xTaskCreateStatic+0xb0>
 800f4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d01b      	beq.n	800f4f0 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c4:	2202      	movs	r2, #2
 800f4c6:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	9303      	str	r3, [sp, #12]
 800f4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d0:	9302      	str	r3, [sp, #8]
 800f4d2:	f107 0314 	add.w	r3, r7, #20
 800f4d6:	9301      	str	r3, [sp, #4]
 800f4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4da:	9300      	str	r3, [sp, #0]
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	687a      	ldr	r2, [r7, #4]
 800f4e0:	68b9      	ldr	r1, [r7, #8]
 800f4e2:	68f8      	ldr	r0, [r7, #12]
 800f4e4:	f000 f852 	bl	800f58c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f4e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4ea:	f000 f907 	bl	800f6fc <prvAddNewTaskToReadyList>
 800f4ee:	e001      	b.n	800f4f4 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f4f4:	697b      	ldr	r3, [r7, #20]
	}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3728      	adds	r7, #40	; 0x28
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}

0800f4fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f4fe:	b580      	push	{r7, lr}
 800f500:	b08c      	sub	sp, #48	; 0x30
 800f502:	af04      	add	r7, sp, #16
 800f504:	60f8      	str	r0, [r7, #12]
 800f506:	60b9      	str	r1, [r7, #8]
 800f508:	603b      	str	r3, [r7, #0]
 800f50a:	4613      	mov	r3, r2
 800f50c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f50e:	88fb      	ldrh	r3, [r7, #6]
 800f510:	009b      	lsls	r3, r3, #2
 800f512:	4618      	mov	r0, r3
 800f514:	f7fe ff44 	bl	800e3a0 <pvPortMalloc>
 800f518:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d00f      	beq.n	800f540 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f520:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 800f524:	f7fe ff3c 	bl	800e3a0 <pvPortMalloc>
 800f528:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f52a:	69fb      	ldr	r3, [r7, #28]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d003      	beq.n	800f538 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f530:	69fb      	ldr	r3, [r7, #28]
 800f532:	697a      	ldr	r2, [r7, #20]
 800f534:	631a      	str	r2, [r3, #48]	; 0x30
 800f536:	e005      	b.n	800f544 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f538:	6978      	ldr	r0, [r7, #20]
 800f53a:	f7fe ff7b 	bl	800e434 <vPortFree>
 800f53e:	e001      	b.n	800f544 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f540:	2300      	movs	r3, #0
 800f542:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d017      	beq.n	800f57a <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f54a:	69fb      	ldr	r3, [r7, #28]
 800f54c:	2200      	movs	r2, #0
 800f54e:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f552:	88fa      	ldrh	r2, [r7, #6]
 800f554:	2300      	movs	r3, #0
 800f556:	9303      	str	r3, [sp, #12]
 800f558:	69fb      	ldr	r3, [r7, #28]
 800f55a:	9302      	str	r3, [sp, #8]
 800f55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f55e:	9301      	str	r3, [sp, #4]
 800f560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f562:	9300      	str	r3, [sp, #0]
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	68b9      	ldr	r1, [r7, #8]
 800f568:	68f8      	ldr	r0, [r7, #12]
 800f56a:	f000 f80f 	bl	800f58c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f56e:	69f8      	ldr	r0, [r7, #28]
 800f570:	f000 f8c4 	bl	800f6fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f574:	2301      	movs	r3, #1
 800f576:	61bb      	str	r3, [r7, #24]
 800f578:	e002      	b.n	800f580 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f57a:	f04f 33ff 	mov.w	r3, #4294967295
 800f57e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f580:	69bb      	ldr	r3, [r7, #24]
	}
 800f582:	4618      	mov	r0, r3
 800f584:	3720      	adds	r7, #32
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}
	...

0800f58c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b088      	sub	sp, #32
 800f590:	af00      	add	r7, sp, #0
 800f592:	60f8      	str	r0, [r7, #12]
 800f594:	60b9      	str	r1, [r7, #8]
 800f596:	607a      	str	r2, [r7, #4]
 800f598:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f59c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	009b      	lsls	r3, r3, #2
 800f5a2:	461a      	mov	r2, r3
 800f5a4:	21a5      	movs	r1, #165	; 0xa5
 800f5a6:	f003 fb1b 	bl	8012be0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f5b4:	3b01      	subs	r3, #1
 800f5b6:	009b      	lsls	r3, r3, #2
 800f5b8:	4413      	add	r3, r2
 800f5ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f5bc:	69bb      	ldr	r3, [r7, #24]
 800f5be:	f023 0307 	bic.w	r3, r3, #7
 800f5c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f5c4:	69bb      	ldr	r3, [r7, #24]
 800f5c6:	f003 0307 	and.w	r3, r3, #7
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d00a      	beq.n	800f5e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f5ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f5d2:	f383 8811 	msr	BASEPRI, r3
 800f5d6:	f3bf 8f6f 	isb	sy
 800f5da:	f3bf 8f4f 	dsb	sy
 800f5de:	617b      	str	r3, [r7, #20]
}
 800f5e0:	bf00      	nop
 800f5e2:	e7fe      	b.n	800f5e2 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800f5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e6:	69ba      	ldr	r2, [r7, #24]
 800f5e8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d01f      	beq.n	800f632 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	61fb      	str	r3, [r7, #28]
 800f5f6:	e012      	b.n	800f61e <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f5f8:	68ba      	ldr	r2, [r7, #8]
 800f5fa:	69fb      	ldr	r3, [r7, #28]
 800f5fc:	4413      	add	r3, r2
 800f5fe:	7819      	ldrb	r1, [r3, #0]
 800f600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f602:	69fb      	ldr	r3, [r7, #28]
 800f604:	4413      	add	r3, r2
 800f606:	3334      	adds	r3, #52	; 0x34
 800f608:	460a      	mov	r2, r1
 800f60a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f60c:	68ba      	ldr	r2, [r7, #8]
 800f60e:	69fb      	ldr	r3, [r7, #28]
 800f610:	4413      	add	r3, r2
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d006      	beq.n	800f626 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f618:	69fb      	ldr	r3, [r7, #28]
 800f61a:	3301      	adds	r3, #1
 800f61c:	61fb      	str	r3, [r7, #28]
 800f61e:	69fb      	ldr	r3, [r7, #28]
 800f620:	2bfe      	cmp	r3, #254	; 0xfe
 800f622:	d9e9      	bls.n	800f5f8 <prvInitialiseNewTask+0x6c>
 800f624:	e000      	b.n	800f628 <prvInitialiseNewTask+0x9c>
			{
				break;
 800f626:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f62a:	2200      	movs	r2, #0
 800f62c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 800f630:	e003      	b.n	800f63a <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f634:	2200      	movs	r2, #0
 800f636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f63c:	2b37      	cmp	r3, #55	; 0x37
 800f63e:	d901      	bls.n	800f644 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f640:	2337      	movs	r3, #55	; 0x37
 800f642:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f648:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f64c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f64e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		pxNewTCB->uxMutexesHeld = 0;
 800f652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f654:	2200      	movs	r2, #0
 800f656:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f65c:	3304      	adds	r3, #4
 800f65e:	4618      	mov	r0, r3
 800f660:	f7fe ff20 	bl	800e4a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f666:	3318      	adds	r3, #24
 800f668:	4618      	mov	r0, r3
 800f66a:	f7fe ff1b 	bl	800e4a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f672:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f676:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f67c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f682:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800f684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f686:	2200      	movs	r2, #0
 800f688:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68e:	2200      	movs	r2, #0
 800f690:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f696:	2200      	movs	r2, #0
 800f698:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f69e:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800f6a2:	2260      	movs	r2, #96	; 0x60
 800f6a4:	2100      	movs	r1, #0
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f003 fa9a 	bl	8012be0 <memset>
 800f6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ae:	4a10      	ldr	r2, [pc, #64]	; (800f6f0 <prvInitialiseNewTask+0x164>)
 800f6b0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800f6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b6:	4a0f      	ldr	r2, [pc, #60]	; (800f6f4 <prvInitialiseNewTask+0x168>)
 800f6b8:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800f6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6be:	4a0e      	ldr	r2, [pc, #56]	; (800f6f8 <prvInitialiseNewTask+0x16c>)
 800f6c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800f6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f6cc:	683a      	ldr	r2, [r7, #0]
 800f6ce:	68f9      	ldr	r1, [r7, #12]
 800f6d0:	69b8      	ldr	r0, [r7, #24]
 800f6d2:	f7fe ff7b 	bl	800e5cc <pxPortInitialiseStack>
 800f6d6:	4602      	mov	r2, r0
 800f6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d002      	beq.n	800f6e8 <prvInitialiseNewTask+0x15c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6e8:	bf00      	nop
 800f6ea:	3720      	adds	r7, #32
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}
 800f6f0:	08013b6c 	.word	0x08013b6c
 800f6f4:	08013b8c 	.word	0x08013b8c
 800f6f8:	08013b4c 	.word	0x08013b4c

0800f6fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b082      	sub	sp, #8
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f704:	f7ff f88e 	bl	800e824 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f708:	4b2d      	ldr	r3, [pc, #180]	; (800f7c0 <prvAddNewTaskToReadyList+0xc4>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	3301      	adds	r3, #1
 800f70e:	4a2c      	ldr	r2, [pc, #176]	; (800f7c0 <prvAddNewTaskToReadyList+0xc4>)
 800f710:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f712:	4b2c      	ldr	r3, [pc, #176]	; (800f7c4 <prvAddNewTaskToReadyList+0xc8>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d109      	bne.n	800f72e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f71a:	4a2a      	ldr	r2, [pc, #168]	; (800f7c4 <prvAddNewTaskToReadyList+0xc8>)
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f720:	4b27      	ldr	r3, [pc, #156]	; (800f7c0 <prvAddNewTaskToReadyList+0xc4>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	2b01      	cmp	r3, #1
 800f726:	d110      	bne.n	800f74a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f728:	f000 fe24 	bl	8010374 <prvInitialiseTaskLists>
 800f72c:	e00d      	b.n	800f74a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f72e:	4b26      	ldr	r3, [pc, #152]	; (800f7c8 <prvAddNewTaskToReadyList+0xcc>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d109      	bne.n	800f74a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f736:	4b23      	ldr	r3, [pc, #140]	; (800f7c4 <prvAddNewTaskToReadyList+0xc8>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f740:	429a      	cmp	r2, r3
 800f742:	d802      	bhi.n	800f74a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f744:	4a1f      	ldr	r2, [pc, #124]	; (800f7c4 <prvAddNewTaskToReadyList+0xc8>)
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f74a:	4b20      	ldr	r3, [pc, #128]	; (800f7cc <prvAddNewTaskToReadyList+0xd0>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	3301      	adds	r3, #1
 800f750:	4a1e      	ldr	r2, [pc, #120]	; (800f7cc <prvAddNewTaskToReadyList+0xd0>)
 800f752:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f754:	4b1d      	ldr	r3, [pc, #116]	; (800f7cc <prvAddNewTaskToReadyList+0xd0>)
 800f756:	681a      	ldr	r2, [r3, #0]
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f762:	4b1b      	ldr	r3, [pc, #108]	; (800f7d0 <prvAddNewTaskToReadyList+0xd4>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	429a      	cmp	r2, r3
 800f768:	d903      	bls.n	800f772 <prvAddNewTaskToReadyList+0x76>
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f76e:	4a18      	ldr	r2, [pc, #96]	; (800f7d0 <prvAddNewTaskToReadyList+0xd4>)
 800f770:	6013      	str	r3, [r2, #0]
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f776:	4613      	mov	r3, r2
 800f778:	009b      	lsls	r3, r3, #2
 800f77a:	4413      	add	r3, r2
 800f77c:	009b      	lsls	r3, r3, #2
 800f77e:	4a15      	ldr	r2, [pc, #84]	; (800f7d4 <prvAddNewTaskToReadyList+0xd8>)
 800f780:	441a      	add	r2, r3
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	3304      	adds	r3, #4
 800f786:	4619      	mov	r1, r3
 800f788:	4610      	mov	r0, r2
 800f78a:	f7fe fe98 	bl	800e4be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f78e:	f7ff f879 	bl	800e884 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f792:	4b0d      	ldr	r3, [pc, #52]	; (800f7c8 <prvAddNewTaskToReadyList+0xcc>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d00e      	beq.n	800f7b8 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f79a:	4b0a      	ldr	r3, [pc, #40]	; (800f7c4 <prvAddNewTaskToReadyList+0xc8>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	d207      	bcs.n	800f7b8 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f7a8:	4b0b      	ldr	r3, [pc, #44]	; (800f7d8 <prvAddNewTaskToReadyList+0xdc>)
 800f7aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7ae:	601a      	str	r2, [r3, #0]
 800f7b0:	f3bf 8f4f 	dsb	sy
 800f7b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7b8:	bf00      	nop
 800f7ba:	3708      	adds	r7, #8
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}
 800f7c0:	20008258 	.word	0x20008258
 800f7c4:	20007d80 	.word	0x20007d80
 800f7c8:	20008264 	.word	0x20008264
 800f7cc:	20008274 	.word	0x20008274
 800f7d0:	20008260 	.word	0x20008260
 800f7d4:	20007d84 	.word	0x20007d84
 800f7d8:	e000ed04 	.word	0xe000ed04

0800f7dc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b08a      	sub	sp, #40	; 0x28
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
 800f7e4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d10a      	bne.n	800f806 <vTaskDelayUntil+0x2a>
	__asm volatile
 800f7f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f7f4:	f383 8811 	msr	BASEPRI, r3
 800f7f8:	f3bf 8f6f 	isb	sy
 800f7fc:	f3bf 8f4f 	dsb	sy
 800f800:	617b      	str	r3, [r7, #20]
}
 800f802:	bf00      	nop
 800f804:	e7fe      	b.n	800f804 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d10a      	bne.n	800f822 <vTaskDelayUntil+0x46>
	__asm volatile
 800f80c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f810:	f383 8811 	msr	BASEPRI, r3
 800f814:	f3bf 8f6f 	isb	sy
 800f818:	f3bf 8f4f 	dsb	sy
 800f81c:	613b      	str	r3, [r7, #16]
}
 800f81e:	bf00      	nop
 800f820:	e7fe      	b.n	800f820 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800f822:	4b2a      	ldr	r3, [pc, #168]	; (800f8cc <vTaskDelayUntil+0xf0>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d00a      	beq.n	800f840 <vTaskDelayUntil+0x64>
	__asm volatile
 800f82a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f82e:	f383 8811 	msr	BASEPRI, r3
 800f832:	f3bf 8f6f 	isb	sy
 800f836:	f3bf 8f4f 	dsb	sy
 800f83a:	60fb      	str	r3, [r7, #12]
}
 800f83c:	bf00      	nop
 800f83e:	e7fe      	b.n	800f83e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800f840:	f000 fa32 	bl	800fca8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800f844:	4b22      	ldr	r3, [pc, #136]	; (800f8d0 <vTaskDelayUntil+0xf4>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	683a      	ldr	r2, [r7, #0]
 800f850:	4413      	add	r3, r2
 800f852:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	6a3a      	ldr	r2, [r7, #32]
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d20b      	bcs.n	800f876 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	69fa      	ldr	r2, [r7, #28]
 800f864:	429a      	cmp	r2, r3
 800f866:	d211      	bcs.n	800f88c <vTaskDelayUntil+0xb0>
 800f868:	69fa      	ldr	r2, [r7, #28]
 800f86a:	6a3b      	ldr	r3, [r7, #32]
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d90d      	bls.n	800f88c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800f870:	2301      	movs	r3, #1
 800f872:	627b      	str	r3, [r7, #36]	; 0x24
 800f874:	e00a      	b.n	800f88c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	69fa      	ldr	r2, [r7, #28]
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d303      	bcc.n	800f888 <vTaskDelayUntil+0xac>
 800f880:	69fa      	ldr	r2, [r7, #28]
 800f882:	6a3b      	ldr	r3, [r7, #32]
 800f884:	429a      	cmp	r2, r3
 800f886:	d901      	bls.n	800f88c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800f888:	2301      	movs	r3, #1
 800f88a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	69fa      	ldr	r2, [r7, #28]
 800f890:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800f892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f894:	2b00      	cmp	r3, #0
 800f896:	d006      	beq.n	800f8a6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800f898:	69fa      	ldr	r2, [r7, #28]
 800f89a:	6a3b      	ldr	r3, [r7, #32]
 800f89c:	1ad3      	subs	r3, r2, r3
 800f89e:	2100      	movs	r1, #0
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f000 febd 	bl	8010620 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800f8a6:	f000 fa0d 	bl	800fcc4 <xTaskResumeAll>
 800f8aa:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f8ac:	69bb      	ldr	r3, [r7, #24]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d107      	bne.n	800f8c2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800f8b2:	4b08      	ldr	r3, [pc, #32]	; (800f8d4 <vTaskDelayUntil+0xf8>)
 800f8b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8b8:	601a      	str	r2, [r3, #0]
 800f8ba:	f3bf 8f4f 	dsb	sy
 800f8be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f8c2:	bf00      	nop
 800f8c4:	3728      	adds	r7, #40	; 0x28
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}
 800f8ca:	bf00      	nop
 800f8cc:	20008280 	.word	0x20008280
 800f8d0:	2000825c 	.word	0x2000825c
 800f8d4:	e000ed04 	.word	0xe000ed04

0800f8d8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b084      	sub	sp, #16
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800f8e0:	f7fe ffa0 	bl	800e824 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d102      	bne.n	800f8f0 <vTaskSuspend+0x18>
 800f8ea:	4b30      	ldr	r3, [pc, #192]	; (800f9ac <vTaskSuspend+0xd4>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	e000      	b.n	800f8f2 <vTaskSuspend+0x1a>
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	3304      	adds	r3, #4
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7fe fe3d 	bl	800e578 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f902:	2b00      	cmp	r3, #0
 800f904:	d004      	beq.n	800f910 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	3318      	adds	r3, #24
 800f90a:	4618      	mov	r0, r3
 800f90c:	f7fe fe34 	bl	800e578 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	3304      	adds	r3, #4
 800f914:	4619      	mov	r1, r3
 800f916:	4826      	ldr	r0, [pc, #152]	; (800f9b0 <vTaskSuspend+0xd8>)
 800f918:	f7fe fdd1 	bl	800e4be <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	f893 31b0 	ldrb.w	r3, [r3, #432]	; 0x1b0
 800f922:	b2db      	uxtb	r3, r3
 800f924:	2b01      	cmp	r3, #1
 800f926:	d103      	bne.n	800f930 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	2200      	movs	r2, #0
 800f92c:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800f930:	f7fe ffa8 	bl	800e884 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800f934:	4b1f      	ldr	r3, [pc, #124]	; (800f9b4 <vTaskSuspend+0xdc>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d005      	beq.n	800f948 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800f93c:	f7fe ff72 	bl	800e824 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800f940:	f000 fdbc 	bl	80104bc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800f944:	f7fe ff9e 	bl	800e884 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800f948:	4b18      	ldr	r3, [pc, #96]	; (800f9ac <vTaskSuspend+0xd4>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	68fa      	ldr	r2, [r7, #12]
 800f94e:	429a      	cmp	r2, r3
 800f950:	d127      	bne.n	800f9a2 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800f952:	4b18      	ldr	r3, [pc, #96]	; (800f9b4 <vTaskSuspend+0xdc>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d017      	beq.n	800f98a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800f95a:	4b17      	ldr	r3, [pc, #92]	; (800f9b8 <vTaskSuspend+0xe0>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d00a      	beq.n	800f978 <vTaskSuspend+0xa0>
	__asm volatile
 800f962:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f966:	f383 8811 	msr	BASEPRI, r3
 800f96a:	f3bf 8f6f 	isb	sy
 800f96e:	f3bf 8f4f 	dsb	sy
 800f972:	60bb      	str	r3, [r7, #8]
}
 800f974:	bf00      	nop
 800f976:	e7fe      	b.n	800f976 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800f978:	4b10      	ldr	r3, [pc, #64]	; (800f9bc <vTaskSuspend+0xe4>)
 800f97a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f97e:	601a      	str	r2, [r3, #0]
 800f980:	f3bf 8f4f 	dsb	sy
 800f984:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f988:	e00b      	b.n	800f9a2 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800f98a:	4b09      	ldr	r3, [pc, #36]	; (800f9b0 <vTaskSuspend+0xd8>)
 800f98c:	681a      	ldr	r2, [r3, #0]
 800f98e:	4b0c      	ldr	r3, [pc, #48]	; (800f9c0 <vTaskSuspend+0xe8>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	429a      	cmp	r2, r3
 800f994:	d103      	bne.n	800f99e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800f996:	4b05      	ldr	r3, [pc, #20]	; (800f9ac <vTaskSuspend+0xd4>)
 800f998:	2200      	movs	r2, #0
 800f99a:	601a      	str	r2, [r3, #0]
	}
 800f99c:	e001      	b.n	800f9a2 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800f99e:	f000 fb01 	bl	800ffa4 <vTaskSwitchContext>
	}
 800f9a2:	bf00      	nop
 800f9a4:	3710      	adds	r7, #16
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}
 800f9aa:	bf00      	nop
 800f9ac:	20007d80 	.word	0x20007d80
 800f9b0:	20008240 	.word	0x20008240
 800f9b4:	20008264 	.word	0x20008264
 800f9b8:	20008280 	.word	0x20008280
 800f9bc:	e000ed04 	.word	0xe000ed04
 800f9c0:	20008258 	.word	0x20008258

0800f9c4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b087      	sub	sp, #28
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d10a      	bne.n	800f9f0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800f9da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800f9de:	f383 8811 	msr	BASEPRI, r3
 800f9e2:	f3bf 8f6f 	isb	sy
 800f9e6:	f3bf 8f4f 	dsb	sy
 800f9ea:	60fb      	str	r3, [r7, #12]
}
 800f9ec:	bf00      	nop
 800f9ee:	e7fe      	b.n	800f9ee <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f9f0:	693b      	ldr	r3, [r7, #16]
 800f9f2:	695b      	ldr	r3, [r3, #20]
 800f9f4:	4a0a      	ldr	r2, [pc, #40]	; (800fa20 <prvTaskIsTaskSuspended+0x5c>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d10a      	bne.n	800fa10 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800f9fa:	693b      	ldr	r3, [r7, #16]
 800f9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9fe:	4a09      	ldr	r2, [pc, #36]	; (800fa24 <prvTaskIsTaskSuspended+0x60>)
 800fa00:	4293      	cmp	r3, r2
 800fa02:	d005      	beq.n	800fa10 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800fa04:	693b      	ldr	r3, [r7, #16]
 800fa06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d101      	bne.n	800fa10 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fa10:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800fa12:	4618      	mov	r0, r3
 800fa14:	371c      	adds	r7, #28
 800fa16:	46bd      	mov	sp, r7
 800fa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1c:	4770      	bx	lr
 800fa1e:	bf00      	nop
 800fa20:	20008240 	.word	0x20008240
 800fa24:	20008214 	.word	0x20008214

0800fa28 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b084      	sub	sp, #16
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d10a      	bne.n	800fa50 <vTaskResume+0x28>
	__asm volatile
 800fa3a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800fa3e:	f383 8811 	msr	BASEPRI, r3
 800fa42:	f3bf 8f6f 	isb	sy
 800fa46:	f3bf 8f4f 	dsb	sy
 800fa4a:	60bb      	str	r3, [r7, #8]
}
 800fa4c:	bf00      	nop
 800fa4e:	e7fe      	b.n	800fa4e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800fa50:	4b20      	ldr	r3, [pc, #128]	; (800fad4 <vTaskResume+0xac>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	68fa      	ldr	r2, [r7, #12]
 800fa56:	429a      	cmp	r2, r3
 800fa58:	d038      	beq.n	800facc <vTaskResume+0xa4>
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d035      	beq.n	800facc <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800fa60:	f7fe fee0 	bl	800e824 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800fa64:	68f8      	ldr	r0, [r7, #12]
 800fa66:	f7ff ffad 	bl	800f9c4 <prvTaskIsTaskSuspended>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d02b      	beq.n	800fac8 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	3304      	adds	r3, #4
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7fe fd7f 	bl	800e578 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa7e:	4b16      	ldr	r3, [pc, #88]	; (800fad8 <vTaskResume+0xb0>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	429a      	cmp	r2, r3
 800fa84:	d903      	bls.n	800fa8e <vTaskResume+0x66>
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa8a:	4a13      	ldr	r2, [pc, #76]	; (800fad8 <vTaskResume+0xb0>)
 800fa8c:	6013      	str	r3, [r2, #0]
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa92:	4613      	mov	r3, r2
 800fa94:	009b      	lsls	r3, r3, #2
 800fa96:	4413      	add	r3, r2
 800fa98:	009b      	lsls	r3, r3, #2
 800fa9a:	4a10      	ldr	r2, [pc, #64]	; (800fadc <vTaskResume+0xb4>)
 800fa9c:	441a      	add	r2, r3
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	3304      	adds	r3, #4
 800faa2:	4619      	mov	r1, r3
 800faa4:	4610      	mov	r0, r2
 800faa6:	f7fe fd0a 	bl	800e4be <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faae:	4b09      	ldr	r3, [pc, #36]	; (800fad4 <vTaskResume+0xac>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fab4:	429a      	cmp	r2, r3
 800fab6:	d307      	bcc.n	800fac8 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800fab8:	4b09      	ldr	r3, [pc, #36]	; (800fae0 <vTaskResume+0xb8>)
 800faba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fabe:	601a      	str	r2, [r3, #0]
 800fac0:	f3bf 8f4f 	dsb	sy
 800fac4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800fac8:	f7fe fedc 	bl	800e884 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800facc:	bf00      	nop
 800face:	3710      	adds	r7, #16
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}
 800fad4:	20007d80 	.word	0x20007d80
 800fad8:	20008260 	.word	0x20008260
 800fadc:	20007d84 	.word	0x20007d84
 800fae0:	e000ed04 	.word	0xe000ed04

0800fae4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b08a      	sub	sp, #40	; 0x28
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800faec:	2300      	movs	r3, #0
 800faee:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d10a      	bne.n	800fb10 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800fafa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800fafe:	f383 8811 	msr	BASEPRI, r3
 800fb02:	f3bf 8f6f 	isb	sy
 800fb06:	f3bf 8f4f 	dsb	sy
 800fb0a:	61bb      	str	r3, [r7, #24]
}
 800fb0c:	bf00      	nop
 800fb0e:	e7fe      	b.n	800fb0e <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fb10:	f7fe ff6a 	bl	800e9e8 <vPortValidateInterruptPriority>
	__asm volatile
 800fb14:	f3ef 8211 	mrs	r2, BASEPRI
 800fb18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800fb1c:	f383 8811 	msr	BASEPRI, r3
 800fb20:	f3bf 8f6f 	isb	sy
 800fb24:	f3bf 8f4f 	dsb	sy
 800fb28:	617a      	str	r2, [r7, #20]
 800fb2a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fb2c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fb2e:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800fb30:	6a38      	ldr	r0, [r7, #32]
 800fb32:	f7ff ff47 	bl	800f9c4 <prvTaskIsTaskSuspended>
 800fb36:	4603      	mov	r3, r0
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d030      	beq.n	800fb9e <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb3c:	4b1d      	ldr	r3, [pc, #116]	; (800fbb4 <xTaskResumeFromISR+0xd0>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d126      	bne.n	800fb92 <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb44:	6a3b      	ldr	r3, [r7, #32]
 800fb46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb48:	4b1b      	ldr	r3, [pc, #108]	; (800fbb8 <xTaskResumeFromISR+0xd4>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d301      	bcc.n	800fb56 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800fb52:	2301      	movs	r3, #1
 800fb54:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb56:	6a3b      	ldr	r3, [r7, #32]
 800fb58:	3304      	adds	r3, #4
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7fe fd0c 	bl	800e578 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb60:	6a3b      	ldr	r3, [r7, #32]
 800fb62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb64:	4b15      	ldr	r3, [pc, #84]	; (800fbbc <xTaskResumeFromISR+0xd8>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d903      	bls.n	800fb74 <xTaskResumeFromISR+0x90>
 800fb6c:	6a3b      	ldr	r3, [r7, #32]
 800fb6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb70:	4a12      	ldr	r2, [pc, #72]	; (800fbbc <xTaskResumeFromISR+0xd8>)
 800fb72:	6013      	str	r3, [r2, #0]
 800fb74:	6a3b      	ldr	r3, [r7, #32]
 800fb76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb78:	4613      	mov	r3, r2
 800fb7a:	009b      	lsls	r3, r3, #2
 800fb7c:	4413      	add	r3, r2
 800fb7e:	009b      	lsls	r3, r3, #2
 800fb80:	4a0f      	ldr	r2, [pc, #60]	; (800fbc0 <xTaskResumeFromISR+0xdc>)
 800fb82:	441a      	add	r2, r3
 800fb84:	6a3b      	ldr	r3, [r7, #32]
 800fb86:	3304      	adds	r3, #4
 800fb88:	4619      	mov	r1, r3
 800fb8a:	4610      	mov	r0, r2
 800fb8c:	f7fe fc97 	bl	800e4be <vListInsertEnd>
 800fb90:	e005      	b.n	800fb9e <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800fb92:	6a3b      	ldr	r3, [r7, #32]
 800fb94:	3318      	adds	r3, #24
 800fb96:	4619      	mov	r1, r3
 800fb98:	480a      	ldr	r0, [pc, #40]	; (800fbc4 <xTaskResumeFromISR+0xe0>)
 800fb9a:	f7fe fc90 	bl	800e4be <vListInsertEnd>
 800fb9e:	69fb      	ldr	r3, [r7, #28]
 800fba0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	f383 8811 	msr	BASEPRI, r3
}
 800fba8:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800fbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800fbac:	4618      	mov	r0, r3
 800fbae:	3728      	adds	r7, #40	; 0x28
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}
 800fbb4:	20008280 	.word	0x20008280
 800fbb8:	20007d80 	.word	0x20007d80
 800fbbc:	20008260 	.word	0x20008260
 800fbc0:	20007d84 	.word	0x20007d84
 800fbc4:	20008214 	.word	0x20008214

0800fbc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b08a      	sub	sp, #40	; 0x28
 800fbcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fbd6:	463a      	mov	r2, r7
 800fbd8:	1d39      	adds	r1, r7, #4
 800fbda:	f107 0308 	add.w	r3, r7, #8
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7fe fbaa 	bl	800e338 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fbe4:	6839      	ldr	r1, [r7, #0]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	68ba      	ldr	r2, [r7, #8]
 800fbea:	9202      	str	r2, [sp, #8]
 800fbec:	9301      	str	r3, [sp, #4]
 800fbee:	2300      	movs	r3, #0
 800fbf0:	9300      	str	r3, [sp, #0]
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	460a      	mov	r2, r1
 800fbf6:	4924      	ldr	r1, [pc, #144]	; (800fc88 <vTaskStartScheduler+0xc0>)
 800fbf8:	4824      	ldr	r0, [pc, #144]	; (800fc8c <vTaskStartScheduler+0xc4>)
 800fbfa:	f7ff fc21 	bl	800f440 <xTaskCreateStatic>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	4a23      	ldr	r2, [pc, #140]	; (800fc90 <vTaskStartScheduler+0xc8>)
 800fc02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fc04:	4b22      	ldr	r3, [pc, #136]	; (800fc90 <vTaskStartScheduler+0xc8>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d002      	beq.n	800fc12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	617b      	str	r3, [r7, #20]
 800fc10:	e001      	b.n	800fc16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fc12:	2300      	movs	r3, #0
 800fc14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	2b01      	cmp	r3, #1
 800fc1a:	d102      	bne.n	800fc22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fc1c:	f000 fd5a 	bl	80106d4 <xTimerCreateTimerTask>
 800fc20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	d11c      	bne.n	800fc62 <vTaskStartScheduler+0x9a>
	__asm volatile
 800fc28:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800fc2c:	f383 8811 	msr	BASEPRI, r3
 800fc30:	f3bf 8f6f 	isb	sy
 800fc34:	f3bf 8f4f 	dsb	sy
 800fc38:	613b      	str	r3, [r7, #16]
}
 800fc3a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fc3c:	4b15      	ldr	r3, [pc, #84]	; (800fc94 <vTaskStartScheduler+0xcc>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800fc44:	4a14      	ldr	r2, [pc, #80]	; (800fc98 <vTaskStartScheduler+0xd0>)
 800fc46:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fc48:	4b14      	ldr	r3, [pc, #80]	; (800fc9c <vTaskStartScheduler+0xd4>)
 800fc4a:	f04f 32ff 	mov.w	r2, #4294967295
 800fc4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fc50:	4b13      	ldr	r3, [pc, #76]	; (800fca0 <vTaskStartScheduler+0xd8>)
 800fc52:	2201      	movs	r2, #1
 800fc54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fc56:	4b13      	ldr	r3, [pc, #76]	; (800fca4 <vTaskStartScheduler+0xdc>)
 800fc58:	2200      	movs	r2, #0
 800fc5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fc5c:	f7fe fd40 	bl	800e6e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fc60:	e00e      	b.n	800fc80 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc68:	d10a      	bne.n	800fc80 <vTaskStartScheduler+0xb8>
	__asm volatile
 800fc6a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800fc6e:	f383 8811 	msr	BASEPRI, r3
 800fc72:	f3bf 8f6f 	isb	sy
 800fc76:	f3bf 8f4f 	dsb	sy
 800fc7a:	60fb      	str	r3, [r7, #12]
}
 800fc7c:	bf00      	nop
 800fc7e:	e7fe      	b.n	800fc7e <vTaskStartScheduler+0xb6>
}
 800fc80:	bf00      	nop
 800fc82:	3718      	adds	r7, #24
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}
 800fc88:	080138b0 	.word	0x080138b0
 800fc8c:	08010365 	.word	0x08010365
 800fc90:	2000827c 	.word	0x2000827c
 800fc94:	20007d80 	.word	0x20007d80
 800fc98:	20000010 	.word	0x20000010
 800fc9c:	20008278 	.word	0x20008278
 800fca0:	20008264 	.word	0x20008264
 800fca4:	2000825c 	.word	0x2000825c

0800fca8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fca8:	b480      	push	{r7}
 800fcaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fcac:	4b04      	ldr	r3, [pc, #16]	; (800fcc0 <vTaskSuspendAll+0x18>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	4a03      	ldr	r2, [pc, #12]	; (800fcc0 <vTaskSuspendAll+0x18>)
 800fcb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fcb6:	bf00      	nop
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbe:	4770      	bx	lr
 800fcc0:	20008280 	.word	0x20008280

0800fcc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b084      	sub	sp, #16
 800fcc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fcca:	2300      	movs	r3, #0
 800fccc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fcd2:	4b42      	ldr	r3, [pc, #264]	; (800fddc <xTaskResumeAll+0x118>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d10a      	bne.n	800fcf0 <xTaskResumeAll+0x2c>
	__asm volatile
 800fcda:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800fcde:	f383 8811 	msr	BASEPRI, r3
 800fce2:	f3bf 8f6f 	isb	sy
 800fce6:	f3bf 8f4f 	dsb	sy
 800fcea:	603b      	str	r3, [r7, #0]
}
 800fcec:	bf00      	nop
 800fcee:	e7fe      	b.n	800fcee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fcf0:	f7fe fd98 	bl	800e824 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fcf4:	4b39      	ldr	r3, [pc, #228]	; (800fddc <xTaskResumeAll+0x118>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	3b01      	subs	r3, #1
 800fcfa:	4a38      	ldr	r2, [pc, #224]	; (800fddc <xTaskResumeAll+0x118>)
 800fcfc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fcfe:	4b37      	ldr	r3, [pc, #220]	; (800fddc <xTaskResumeAll+0x118>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d162      	bne.n	800fdcc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fd06:	4b36      	ldr	r3, [pc, #216]	; (800fde0 <xTaskResumeAll+0x11c>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d05e      	beq.n	800fdcc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fd0e:	e02f      	b.n	800fd70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd10:	4b34      	ldr	r3, [pc, #208]	; (800fde4 <xTaskResumeAll+0x120>)
 800fd12:	68db      	ldr	r3, [r3, #12]
 800fd14:	68db      	ldr	r3, [r3, #12]
 800fd16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	3318      	adds	r3, #24
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f7fe fc2b 	bl	800e578 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	3304      	adds	r3, #4
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7fe fc26 	bl	800e578 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd30:	4b2d      	ldr	r3, [pc, #180]	; (800fde8 <xTaskResumeAll+0x124>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	429a      	cmp	r2, r3
 800fd36:	d903      	bls.n	800fd40 <xTaskResumeAll+0x7c>
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd3c:	4a2a      	ldr	r2, [pc, #168]	; (800fde8 <xTaskResumeAll+0x124>)
 800fd3e:	6013      	str	r3, [r2, #0]
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd44:	4613      	mov	r3, r2
 800fd46:	009b      	lsls	r3, r3, #2
 800fd48:	4413      	add	r3, r2
 800fd4a:	009b      	lsls	r3, r3, #2
 800fd4c:	4a27      	ldr	r2, [pc, #156]	; (800fdec <xTaskResumeAll+0x128>)
 800fd4e:	441a      	add	r2, r3
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	3304      	adds	r3, #4
 800fd54:	4619      	mov	r1, r3
 800fd56:	4610      	mov	r0, r2
 800fd58:	f7fe fbb1 	bl	800e4be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd60:	4b23      	ldr	r3, [pc, #140]	; (800fdf0 <xTaskResumeAll+0x12c>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd66:	429a      	cmp	r2, r3
 800fd68:	d302      	bcc.n	800fd70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800fd6a:	4b22      	ldr	r3, [pc, #136]	; (800fdf4 <xTaskResumeAll+0x130>)
 800fd6c:	2201      	movs	r2, #1
 800fd6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fd70:	4b1c      	ldr	r3, [pc, #112]	; (800fde4 <xTaskResumeAll+0x120>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d1cb      	bne.n	800fd10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d001      	beq.n	800fd82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fd7e:	f000 fb9d 	bl	80104bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fd82:	4b1d      	ldr	r3, [pc, #116]	; (800fdf8 <xTaskResumeAll+0x134>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d010      	beq.n	800fdb0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fd8e:	f000 f847 	bl	800fe20 <xTaskIncrementTick>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d002      	beq.n	800fd9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fd98:	4b16      	ldr	r3, [pc, #88]	; (800fdf4 <xTaskResumeAll+0x130>)
 800fd9a:	2201      	movs	r2, #1
 800fd9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	3b01      	subs	r3, #1
 800fda2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d1f1      	bne.n	800fd8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800fdaa:	4b13      	ldr	r3, [pc, #76]	; (800fdf8 <xTaskResumeAll+0x134>)
 800fdac:	2200      	movs	r2, #0
 800fdae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fdb0:	4b10      	ldr	r3, [pc, #64]	; (800fdf4 <xTaskResumeAll+0x130>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d009      	beq.n	800fdcc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fdb8:	2301      	movs	r3, #1
 800fdba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fdbc:	4b0f      	ldr	r3, [pc, #60]	; (800fdfc <xTaskResumeAll+0x138>)
 800fdbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdc2:	601a      	str	r2, [r3, #0]
 800fdc4:	f3bf 8f4f 	dsb	sy
 800fdc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fdcc:	f7fe fd5a 	bl	800e884 <vPortExitCritical>

	return xAlreadyYielded;
 800fdd0:	68bb      	ldr	r3, [r7, #8]
}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	3710      	adds	r7, #16
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}
 800fdda:	bf00      	nop
 800fddc:	20008280 	.word	0x20008280
 800fde0:	20008258 	.word	0x20008258
 800fde4:	20008214 	.word	0x20008214
 800fde8:	20008260 	.word	0x20008260
 800fdec:	20007d84 	.word	0x20007d84
 800fdf0:	20007d80 	.word	0x20007d80
 800fdf4:	2000826c 	.word	0x2000826c
 800fdf8:	20008268 	.word	0x20008268
 800fdfc:	e000ed04 	.word	0xe000ed04

0800fe00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fe00:	b480      	push	{r7}
 800fe02:	b083      	sub	sp, #12
 800fe04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fe06:	4b05      	ldr	r3, [pc, #20]	; (800fe1c <xTaskGetTickCount+0x1c>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fe0c:	687b      	ldr	r3, [r7, #4]
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	370c      	adds	r7, #12
 800fe12:	46bd      	mov	sp, r7
 800fe14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe18:	4770      	bx	lr
 800fe1a:	bf00      	nop
 800fe1c:	2000825c 	.word	0x2000825c

0800fe20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b086      	sub	sp, #24
 800fe24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fe26:	2300      	movs	r3, #0
 800fe28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe2a:	4b53      	ldr	r3, [pc, #332]	; (800ff78 <xTaskIncrementTick+0x158>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	f040 8095 	bne.w	800ff5e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fe34:	4b51      	ldr	r3, [pc, #324]	; (800ff7c <xTaskIncrementTick+0x15c>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	3301      	adds	r3, #1
 800fe3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fe3c:	4a4f      	ldr	r2, [pc, #316]	; (800ff7c <xTaskIncrementTick+0x15c>)
 800fe3e:	693b      	ldr	r3, [r7, #16]
 800fe40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fe42:	693b      	ldr	r3, [r7, #16]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d120      	bne.n	800fe8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fe48:	4b4d      	ldr	r3, [pc, #308]	; (800ff80 <xTaskIncrementTick+0x160>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d00a      	beq.n	800fe68 <xTaskIncrementTick+0x48>
	__asm volatile
 800fe52:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800fe56:	f383 8811 	msr	BASEPRI, r3
 800fe5a:	f3bf 8f6f 	isb	sy
 800fe5e:	f3bf 8f4f 	dsb	sy
 800fe62:	603b      	str	r3, [r7, #0]
}
 800fe64:	bf00      	nop
 800fe66:	e7fe      	b.n	800fe66 <xTaskIncrementTick+0x46>
 800fe68:	4b45      	ldr	r3, [pc, #276]	; (800ff80 <xTaskIncrementTick+0x160>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	60fb      	str	r3, [r7, #12]
 800fe6e:	4b45      	ldr	r3, [pc, #276]	; (800ff84 <xTaskIncrementTick+0x164>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	4a43      	ldr	r2, [pc, #268]	; (800ff80 <xTaskIncrementTick+0x160>)
 800fe74:	6013      	str	r3, [r2, #0]
 800fe76:	4a43      	ldr	r2, [pc, #268]	; (800ff84 <xTaskIncrementTick+0x164>)
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	6013      	str	r3, [r2, #0]
 800fe7c:	4b42      	ldr	r3, [pc, #264]	; (800ff88 <xTaskIncrementTick+0x168>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	3301      	adds	r3, #1
 800fe82:	4a41      	ldr	r2, [pc, #260]	; (800ff88 <xTaskIncrementTick+0x168>)
 800fe84:	6013      	str	r3, [r2, #0]
 800fe86:	f000 fb19 	bl	80104bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fe8a:	4b40      	ldr	r3, [pc, #256]	; (800ff8c <xTaskIncrementTick+0x16c>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	693a      	ldr	r2, [r7, #16]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d349      	bcc.n	800ff28 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fe94:	4b3a      	ldr	r3, [pc, #232]	; (800ff80 <xTaskIncrementTick+0x160>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d104      	bne.n	800fea8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe9e:	4b3b      	ldr	r3, [pc, #236]	; (800ff8c <xTaskIncrementTick+0x16c>)
 800fea0:	f04f 32ff 	mov.w	r2, #4294967295
 800fea4:	601a      	str	r2, [r3, #0]
					break;
 800fea6:	e03f      	b.n	800ff28 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fea8:	4b35      	ldr	r3, [pc, #212]	; (800ff80 <xTaskIncrementTick+0x160>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	68db      	ldr	r3, [r3, #12]
 800feae:	68db      	ldr	r3, [r3, #12]
 800feb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	685b      	ldr	r3, [r3, #4]
 800feb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800feb8:	693a      	ldr	r2, [r7, #16]
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	429a      	cmp	r2, r3
 800febe:	d203      	bcs.n	800fec8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fec0:	4a32      	ldr	r2, [pc, #200]	; (800ff8c <xTaskIncrementTick+0x16c>)
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fec6:	e02f      	b.n	800ff28 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	3304      	adds	r3, #4
 800fecc:	4618      	mov	r0, r3
 800fece:	f7fe fb53 	bl	800e578 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d004      	beq.n	800fee4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	3318      	adds	r3, #24
 800fede:	4618      	mov	r0, r3
 800fee0:	f7fe fb4a 	bl	800e578 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fee8:	4b29      	ldr	r3, [pc, #164]	; (800ff90 <xTaskIncrementTick+0x170>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	429a      	cmp	r2, r3
 800feee:	d903      	bls.n	800fef8 <xTaskIncrementTick+0xd8>
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fef4:	4a26      	ldr	r2, [pc, #152]	; (800ff90 <xTaskIncrementTick+0x170>)
 800fef6:	6013      	str	r3, [r2, #0]
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fefc:	4613      	mov	r3, r2
 800fefe:	009b      	lsls	r3, r3, #2
 800ff00:	4413      	add	r3, r2
 800ff02:	009b      	lsls	r3, r3, #2
 800ff04:	4a23      	ldr	r2, [pc, #140]	; (800ff94 <xTaskIncrementTick+0x174>)
 800ff06:	441a      	add	r2, r3
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	3304      	adds	r3, #4
 800ff0c:	4619      	mov	r1, r3
 800ff0e:	4610      	mov	r0, r2
 800ff10:	f7fe fad5 	bl	800e4be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff18:	4b1f      	ldr	r3, [pc, #124]	; (800ff98 <xTaskIncrementTick+0x178>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d3b8      	bcc.n	800fe94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ff22:	2301      	movs	r3, #1
 800ff24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ff26:	e7b5      	b.n	800fe94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ff28:	4b1b      	ldr	r3, [pc, #108]	; (800ff98 <xTaskIncrementTick+0x178>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff2e:	4919      	ldr	r1, [pc, #100]	; (800ff94 <xTaskIncrementTick+0x174>)
 800ff30:	4613      	mov	r3, r2
 800ff32:	009b      	lsls	r3, r3, #2
 800ff34:	4413      	add	r3, r2
 800ff36:	009b      	lsls	r3, r3, #2
 800ff38:	440b      	add	r3, r1
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	d901      	bls.n	800ff44 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ff40:	2301      	movs	r3, #1
 800ff42:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800ff44:	4b15      	ldr	r3, [pc, #84]	; (800ff9c <xTaskIncrementTick+0x17c>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d101      	bne.n	800ff50 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800ff4c:	f7f3 ff9c 	bl	8003e88 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ff50:	4b13      	ldr	r3, [pc, #76]	; (800ffa0 <xTaskIncrementTick+0x180>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d009      	beq.n	800ff6c <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800ff58:	2301      	movs	r3, #1
 800ff5a:	617b      	str	r3, [r7, #20]
 800ff5c:	e006      	b.n	800ff6c <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ff5e:	4b0f      	ldr	r3, [pc, #60]	; (800ff9c <xTaskIncrementTick+0x17c>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	3301      	adds	r3, #1
 800ff64:	4a0d      	ldr	r2, [pc, #52]	; (800ff9c <xTaskIncrementTick+0x17c>)
 800ff66:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800ff68:	f7f3 ff8e 	bl	8003e88 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800ff6c:	697b      	ldr	r3, [r7, #20]
}
 800ff6e:	4618      	mov	r0, r3
 800ff70:	3718      	adds	r7, #24
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}
 800ff76:	bf00      	nop
 800ff78:	20008280 	.word	0x20008280
 800ff7c:	2000825c 	.word	0x2000825c
 800ff80:	2000820c 	.word	0x2000820c
 800ff84:	20008210 	.word	0x20008210
 800ff88:	20008270 	.word	0x20008270
 800ff8c:	20008278 	.word	0x20008278
 800ff90:	20008260 	.word	0x20008260
 800ff94:	20007d84 	.word	0x20007d84
 800ff98:	20007d80 	.word	0x20007d80
 800ff9c:	20008268 	.word	0x20008268
 800ffa0:	2000826c 	.word	0x2000826c

0800ffa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b086      	sub	sp, #24
 800ffa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ffaa:	4b43      	ldr	r3, [pc, #268]	; (80100b8 <vTaskSwitchContext+0x114>)
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d003      	beq.n	800ffba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ffb2:	4b42      	ldr	r3, [pc, #264]	; (80100bc <vTaskSwitchContext+0x118>)
 800ffb4:	2201      	movs	r2, #1
 800ffb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ffb8:	e07a      	b.n	80100b0 <vTaskSwitchContext+0x10c>
		xYieldPending = pdFALSE;
 800ffba:	4b40      	ldr	r3, [pc, #256]	; (80100bc <vTaskSwitchContext+0x118>)
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ffc0:	4b3f      	ldr	r3, [pc, #252]	; (80100c0 <vTaskSwitchContext+0x11c>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffc6:	613b      	str	r3, [r7, #16]
 800ffc8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800ffcc:	60fb      	str	r3, [r7, #12]
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	68fa      	ldr	r2, [r7, #12]
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d111      	bne.n	800fffc <vTaskSwitchContext+0x58>
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	3304      	adds	r3, #4
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	68fa      	ldr	r2, [r7, #12]
 800ffe0:	429a      	cmp	r2, r3
 800ffe2:	d10b      	bne.n	800fffc <vTaskSwitchContext+0x58>
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	3308      	adds	r3, #8
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	68fa      	ldr	r2, [r7, #12]
 800ffec:	429a      	cmp	r2, r3
 800ffee:	d105      	bne.n	800fffc <vTaskSwitchContext+0x58>
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	330c      	adds	r3, #12
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	68fa      	ldr	r2, [r7, #12]
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d008      	beq.n	801000e <vTaskSwitchContext+0x6a>
 800fffc:	4b30      	ldr	r3, [pc, #192]	; (80100c0 <vTaskSwitchContext+0x11c>)
 800fffe:	681a      	ldr	r2, [r3, #0]
 8010000:	4b2f      	ldr	r3, [pc, #188]	; (80100c0 <vTaskSwitchContext+0x11c>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	3334      	adds	r3, #52	; 0x34
 8010006:	4619      	mov	r1, r3
 8010008:	4610      	mov	r0, r2
 801000a:	f7f3 ff4b 	bl	8003ea4 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 801000e:	4b2c      	ldr	r3, [pc, #176]	; (80100c0 <vTaskSwitchContext+0x11c>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	4a2c      	ldr	r2, [pc, #176]	; (80100c4 <vTaskSwitchContext+0x120>)
 8010014:	6812      	ldr	r2, [r2, #0]
 8010016:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801001a:	4b2b      	ldr	r3, [pc, #172]	; (80100c8 <vTaskSwitchContext+0x124>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	617b      	str	r3, [r7, #20]
 8010020:	e010      	b.n	8010044 <vTaskSwitchContext+0xa0>
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d10a      	bne.n	801003e <vTaskSwitchContext+0x9a>
	__asm volatile
 8010028:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801002c:	f383 8811 	msr	BASEPRI, r3
 8010030:	f3bf 8f6f 	isb	sy
 8010034:	f3bf 8f4f 	dsb	sy
 8010038:	607b      	str	r3, [r7, #4]
}
 801003a:	bf00      	nop
 801003c:	e7fe      	b.n	801003c <vTaskSwitchContext+0x98>
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	3b01      	subs	r3, #1
 8010042:	617b      	str	r3, [r7, #20]
 8010044:	4921      	ldr	r1, [pc, #132]	; (80100cc <vTaskSwitchContext+0x128>)
 8010046:	697a      	ldr	r2, [r7, #20]
 8010048:	4613      	mov	r3, r2
 801004a:	009b      	lsls	r3, r3, #2
 801004c:	4413      	add	r3, r2
 801004e:	009b      	lsls	r3, r3, #2
 8010050:	440b      	add	r3, r1
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d0e4      	beq.n	8010022 <vTaskSwitchContext+0x7e>
 8010058:	697a      	ldr	r2, [r7, #20]
 801005a:	4613      	mov	r3, r2
 801005c:	009b      	lsls	r3, r3, #2
 801005e:	4413      	add	r3, r2
 8010060:	009b      	lsls	r3, r3, #2
 8010062:	4a1a      	ldr	r2, [pc, #104]	; (80100cc <vTaskSwitchContext+0x128>)
 8010064:	4413      	add	r3, r2
 8010066:	60bb      	str	r3, [r7, #8]
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	685a      	ldr	r2, [r3, #4]
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	605a      	str	r2, [r3, #4]
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	685a      	ldr	r2, [r3, #4]
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	3308      	adds	r3, #8
 801007a:	429a      	cmp	r2, r3
 801007c:	d104      	bne.n	8010088 <vTaskSwitchContext+0xe4>
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	685b      	ldr	r3, [r3, #4]
 8010082:	685a      	ldr	r2, [r3, #4]
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	605a      	str	r2, [r3, #4]
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	685b      	ldr	r3, [r3, #4]
 801008c:	68db      	ldr	r3, [r3, #12]
 801008e:	4a0c      	ldr	r2, [pc, #48]	; (80100c0 <vTaskSwitchContext+0x11c>)
 8010090:	6013      	str	r3, [r2, #0]
 8010092:	4a0d      	ldr	r2, [pc, #52]	; (80100c8 <vTaskSwitchContext+0x124>)
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 8010098:	4b09      	ldr	r3, [pc, #36]	; (80100c0 <vTaskSwitchContext+0x11c>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80100a0:	4a08      	ldr	r2, [pc, #32]	; (80100c4 <vTaskSwitchContext+0x120>)
 80100a2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80100a4:	4b06      	ldr	r3, [pc, #24]	; (80100c0 <vTaskSwitchContext+0x11c>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80100ac:	4a08      	ldr	r2, [pc, #32]	; (80100d0 <vTaskSwitchContext+0x12c>)
 80100ae:	6013      	str	r3, [r2, #0]
}
 80100b0:	bf00      	nop
 80100b2:	3718      	adds	r7, #24
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}
 80100b8:	20008280 	.word	0x20008280
 80100bc:	2000826c 	.word	0x2000826c
 80100c0:	20007d80 	.word	0x20007d80
 80100c4:	20008254 	.word	0x20008254
 80100c8:	20008260 	.word	0x20008260
 80100cc:	20007d84 	.word	0x20007d84
 80100d0:	20000010 	.word	0x20000010

080100d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b084      	sub	sp, #16
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d10a      	bne.n	80100fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80100e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80100e8:	f383 8811 	msr	BASEPRI, r3
 80100ec:	f3bf 8f6f 	isb	sy
 80100f0:	f3bf 8f4f 	dsb	sy
 80100f4:	60fb      	str	r3, [r7, #12]
}
 80100f6:	bf00      	nop
 80100f8:	e7fe      	b.n	80100f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80100fa:	4b07      	ldr	r3, [pc, #28]	; (8010118 <vTaskPlaceOnEventList+0x44>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	3318      	adds	r3, #24
 8010100:	4619      	mov	r1, r3
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f7fe f9ff 	bl	800e506 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010108:	2101      	movs	r1, #1
 801010a:	6838      	ldr	r0, [r7, #0]
 801010c:	f000 fa88 	bl	8010620 <prvAddCurrentTaskToDelayedList>
}
 8010110:	bf00      	nop
 8010112:	3710      	adds	r7, #16
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}
 8010118:	20007d80 	.word	0x20007d80

0801011c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801011c:	b580      	push	{r7, lr}
 801011e:	b086      	sub	sp, #24
 8010120:	af00      	add	r7, sp, #0
 8010122:	60f8      	str	r0, [r7, #12]
 8010124:	60b9      	str	r1, [r7, #8]
 8010126:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d10a      	bne.n	8010144 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801012e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010132:	f383 8811 	msr	BASEPRI, r3
 8010136:	f3bf 8f6f 	isb	sy
 801013a:	f3bf 8f4f 	dsb	sy
 801013e:	617b      	str	r3, [r7, #20]
}
 8010140:	bf00      	nop
 8010142:	e7fe      	b.n	8010142 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010144:	4b0a      	ldr	r3, [pc, #40]	; (8010170 <vTaskPlaceOnEventListRestricted+0x54>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	3318      	adds	r3, #24
 801014a:	4619      	mov	r1, r3
 801014c:	68f8      	ldr	r0, [r7, #12]
 801014e:	f7fe f9b6 	bl	800e4be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d002      	beq.n	801015e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8010158:	f04f 33ff 	mov.w	r3, #4294967295
 801015c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801015e:	6879      	ldr	r1, [r7, #4]
 8010160:	68b8      	ldr	r0, [r7, #8]
 8010162:	f000 fa5d 	bl	8010620 <prvAddCurrentTaskToDelayedList>
	}
 8010166:	bf00      	nop
 8010168:	3718      	adds	r7, #24
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}
 801016e:	bf00      	nop
 8010170:	20007d80 	.word	0x20007d80

08010174 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b086      	sub	sp, #24
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	68db      	ldr	r3, [r3, #12]
 8010180:	68db      	ldr	r3, [r3, #12]
 8010182:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010184:	693b      	ldr	r3, [r7, #16]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d10a      	bne.n	80101a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801018a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801018e:	f383 8811 	msr	BASEPRI, r3
 8010192:	f3bf 8f6f 	isb	sy
 8010196:	f3bf 8f4f 	dsb	sy
 801019a:	60fb      	str	r3, [r7, #12]
}
 801019c:	bf00      	nop
 801019e:	e7fe      	b.n	801019e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80101a0:	693b      	ldr	r3, [r7, #16]
 80101a2:	3318      	adds	r3, #24
 80101a4:	4618      	mov	r0, r3
 80101a6:	f7fe f9e7 	bl	800e578 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101aa:	4b1e      	ldr	r3, [pc, #120]	; (8010224 <xTaskRemoveFromEventList+0xb0>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d11d      	bne.n	80101ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	3304      	adds	r3, #4
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7fe f9de 	bl	800e578 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80101bc:	693b      	ldr	r3, [r7, #16]
 80101be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101c0:	4b19      	ldr	r3, [pc, #100]	; (8010228 <xTaskRemoveFromEventList+0xb4>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	429a      	cmp	r2, r3
 80101c6:	d903      	bls.n	80101d0 <xTaskRemoveFromEventList+0x5c>
 80101c8:	693b      	ldr	r3, [r7, #16]
 80101ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101cc:	4a16      	ldr	r2, [pc, #88]	; (8010228 <xTaskRemoveFromEventList+0xb4>)
 80101ce:	6013      	str	r3, [r2, #0]
 80101d0:	693b      	ldr	r3, [r7, #16]
 80101d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101d4:	4613      	mov	r3, r2
 80101d6:	009b      	lsls	r3, r3, #2
 80101d8:	4413      	add	r3, r2
 80101da:	009b      	lsls	r3, r3, #2
 80101dc:	4a13      	ldr	r2, [pc, #76]	; (801022c <xTaskRemoveFromEventList+0xb8>)
 80101de:	441a      	add	r2, r3
 80101e0:	693b      	ldr	r3, [r7, #16]
 80101e2:	3304      	adds	r3, #4
 80101e4:	4619      	mov	r1, r3
 80101e6:	4610      	mov	r0, r2
 80101e8:	f7fe f969 	bl	800e4be <vListInsertEnd>
 80101ec:	e005      	b.n	80101fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80101ee:	693b      	ldr	r3, [r7, #16]
 80101f0:	3318      	adds	r3, #24
 80101f2:	4619      	mov	r1, r3
 80101f4:	480e      	ldr	r0, [pc, #56]	; (8010230 <xTaskRemoveFromEventList+0xbc>)
 80101f6:	f7fe f962 	bl	800e4be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80101fa:	693b      	ldr	r3, [r7, #16]
 80101fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101fe:	4b0d      	ldr	r3, [pc, #52]	; (8010234 <xTaskRemoveFromEventList+0xc0>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010204:	429a      	cmp	r2, r3
 8010206:	d905      	bls.n	8010214 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010208:	2301      	movs	r3, #1
 801020a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801020c:	4b0a      	ldr	r3, [pc, #40]	; (8010238 <xTaskRemoveFromEventList+0xc4>)
 801020e:	2201      	movs	r2, #1
 8010210:	601a      	str	r2, [r3, #0]
 8010212:	e001      	b.n	8010218 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010214:	2300      	movs	r3, #0
 8010216:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010218:	697b      	ldr	r3, [r7, #20]
}
 801021a:	4618      	mov	r0, r3
 801021c:	3718      	adds	r7, #24
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}
 8010222:	bf00      	nop
 8010224:	20008280 	.word	0x20008280
 8010228:	20008260 	.word	0x20008260
 801022c:	20007d84 	.word	0x20007d84
 8010230:	20008214 	.word	0x20008214
 8010234:	20007d80 	.word	0x20007d80
 8010238:	2000826c 	.word	0x2000826c

0801023c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801023c:	b480      	push	{r7}
 801023e:	b083      	sub	sp, #12
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010244:	4b06      	ldr	r3, [pc, #24]	; (8010260 <vTaskInternalSetTimeOutState+0x24>)
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801024c:	4b05      	ldr	r3, [pc, #20]	; (8010264 <vTaskInternalSetTimeOutState+0x28>)
 801024e:	681a      	ldr	r2, [r3, #0]
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	605a      	str	r2, [r3, #4]
}
 8010254:	bf00      	nop
 8010256:	370c      	adds	r7, #12
 8010258:	46bd      	mov	sp, r7
 801025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025e:	4770      	bx	lr
 8010260:	20008270 	.word	0x20008270
 8010264:	2000825c 	.word	0x2000825c

08010268 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b088      	sub	sp, #32
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d10a      	bne.n	801028e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010278:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801027c:	f383 8811 	msr	BASEPRI, r3
 8010280:	f3bf 8f6f 	isb	sy
 8010284:	f3bf 8f4f 	dsb	sy
 8010288:	613b      	str	r3, [r7, #16]
}
 801028a:	bf00      	nop
 801028c:	e7fe      	b.n	801028c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d10a      	bne.n	80102aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010294:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010298:	f383 8811 	msr	BASEPRI, r3
 801029c:	f3bf 8f6f 	isb	sy
 80102a0:	f3bf 8f4f 	dsb	sy
 80102a4:	60fb      	str	r3, [r7, #12]
}
 80102a6:	bf00      	nop
 80102a8:	e7fe      	b.n	80102a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80102aa:	f7fe fabb 	bl	800e824 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80102ae:	4b24      	ldr	r3, [pc, #144]	; (8010340 <xTaskCheckForTimeOut+0xd8>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	69ba      	ldr	r2, [r7, #24]
 80102ba:	1ad3      	subs	r3, r2, r3
 80102bc:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 80102be:	4b21      	ldr	r3, [pc, #132]	; (8010344 <xTaskCheckForTimeOut+0xdc>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	f893 31b2 	ldrb.w	r3, [r3, #434]	; 0x1b2
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d007      	beq.n	80102da <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 80102ca:	4b1e      	ldr	r3, [pc, #120]	; (8010344 <xTaskCheckForTimeOut+0xdc>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	2200      	movs	r2, #0
 80102d0:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
				xReturn = pdTRUE;
 80102d4:	2301      	movs	r3, #1
 80102d6:	61fb      	str	r3, [r7, #28]
 80102d8:	e02b      	b.n	8010332 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102e2:	d102      	bne.n	80102ea <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80102e4:	2300      	movs	r3, #0
 80102e6:	61fb      	str	r3, [r7, #28]
 80102e8:	e023      	b.n	8010332 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	4b16      	ldr	r3, [pc, #88]	; (8010348 <xTaskCheckForTimeOut+0xe0>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	429a      	cmp	r2, r3
 80102f4:	d007      	beq.n	8010306 <xTaskCheckForTimeOut+0x9e>
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	685b      	ldr	r3, [r3, #4]
 80102fa:	69ba      	ldr	r2, [r7, #24]
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d302      	bcc.n	8010306 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010300:	2301      	movs	r3, #1
 8010302:	61fb      	str	r3, [r7, #28]
 8010304:	e015      	b.n	8010332 <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	697a      	ldr	r2, [r7, #20]
 801030c:	429a      	cmp	r2, r3
 801030e:	d20b      	bcs.n	8010328 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	681a      	ldr	r2, [r3, #0]
 8010314:	697b      	ldr	r3, [r7, #20]
 8010316:	1ad2      	subs	r2, r2, r3
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f7ff ff8d 	bl	801023c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010322:	2300      	movs	r3, #0
 8010324:	61fb      	str	r3, [r7, #28]
 8010326:	e004      	b.n	8010332 <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	2200      	movs	r2, #0
 801032c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801032e:	2301      	movs	r3, #1
 8010330:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010332:	f7fe faa7 	bl	800e884 <vPortExitCritical>

	return xReturn;
 8010336:	69fb      	ldr	r3, [r7, #28]
}
 8010338:	4618      	mov	r0, r3
 801033a:	3720      	adds	r7, #32
 801033c:	46bd      	mov	sp, r7
 801033e:	bd80      	pop	{r7, pc}
 8010340:	2000825c 	.word	0x2000825c
 8010344:	20007d80 	.word	0x20007d80
 8010348:	20008270 	.word	0x20008270

0801034c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801034c:	b480      	push	{r7}
 801034e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010350:	4b03      	ldr	r3, [pc, #12]	; (8010360 <vTaskMissedYield+0x14>)
 8010352:	2201      	movs	r2, #1
 8010354:	601a      	str	r2, [r3, #0]
}
 8010356:	bf00      	nop
 8010358:	46bd      	mov	sp, r7
 801035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035e:	4770      	bx	lr
 8010360:	2000826c 	.word	0x2000826c

08010364 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b082      	sub	sp, #8
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801036c:	f000 f842 	bl	80103f4 <prvCheckTasksWaitingTermination>
 8010370:	e7fc      	b.n	801036c <prvIdleTask+0x8>
	...

08010374 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b082      	sub	sp, #8
 8010378:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801037a:	2300      	movs	r3, #0
 801037c:	607b      	str	r3, [r7, #4]
 801037e:	e00c      	b.n	801039a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010380:	687a      	ldr	r2, [r7, #4]
 8010382:	4613      	mov	r3, r2
 8010384:	009b      	lsls	r3, r3, #2
 8010386:	4413      	add	r3, r2
 8010388:	009b      	lsls	r3, r3, #2
 801038a:	4a12      	ldr	r2, [pc, #72]	; (80103d4 <prvInitialiseTaskLists+0x60>)
 801038c:	4413      	add	r3, r2
 801038e:	4618      	mov	r0, r3
 8010390:	f7fe f868 	bl	800e464 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	3301      	adds	r3, #1
 8010398:	607b      	str	r3, [r7, #4]
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2b37      	cmp	r3, #55	; 0x37
 801039e:	d9ef      	bls.n	8010380 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80103a0:	480d      	ldr	r0, [pc, #52]	; (80103d8 <prvInitialiseTaskLists+0x64>)
 80103a2:	f7fe f85f 	bl	800e464 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80103a6:	480d      	ldr	r0, [pc, #52]	; (80103dc <prvInitialiseTaskLists+0x68>)
 80103a8:	f7fe f85c 	bl	800e464 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80103ac:	480c      	ldr	r0, [pc, #48]	; (80103e0 <prvInitialiseTaskLists+0x6c>)
 80103ae:	f7fe f859 	bl	800e464 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80103b2:	480c      	ldr	r0, [pc, #48]	; (80103e4 <prvInitialiseTaskLists+0x70>)
 80103b4:	f7fe f856 	bl	800e464 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80103b8:	480b      	ldr	r0, [pc, #44]	; (80103e8 <prvInitialiseTaskLists+0x74>)
 80103ba:	f7fe f853 	bl	800e464 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80103be:	4b0b      	ldr	r3, [pc, #44]	; (80103ec <prvInitialiseTaskLists+0x78>)
 80103c0:	4a05      	ldr	r2, [pc, #20]	; (80103d8 <prvInitialiseTaskLists+0x64>)
 80103c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80103c4:	4b0a      	ldr	r3, [pc, #40]	; (80103f0 <prvInitialiseTaskLists+0x7c>)
 80103c6:	4a05      	ldr	r2, [pc, #20]	; (80103dc <prvInitialiseTaskLists+0x68>)
 80103c8:	601a      	str	r2, [r3, #0]
}
 80103ca:	bf00      	nop
 80103cc:	3708      	adds	r7, #8
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}
 80103d2:	bf00      	nop
 80103d4:	20007d84 	.word	0x20007d84
 80103d8:	200081e4 	.word	0x200081e4
 80103dc:	200081f8 	.word	0x200081f8
 80103e0:	20008214 	.word	0x20008214
 80103e4:	20008228 	.word	0x20008228
 80103e8:	20008240 	.word	0x20008240
 80103ec:	2000820c 	.word	0x2000820c
 80103f0:	20008210 	.word	0x20008210

080103f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b082      	sub	sp, #8
 80103f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80103fa:	e019      	b.n	8010430 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80103fc:	f7fe fa12 	bl	800e824 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010400:	4b10      	ldr	r3, [pc, #64]	; (8010444 <prvCheckTasksWaitingTermination+0x50>)
 8010402:	68db      	ldr	r3, [r3, #12]
 8010404:	68db      	ldr	r3, [r3, #12]
 8010406:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	3304      	adds	r3, #4
 801040c:	4618      	mov	r0, r3
 801040e:	f7fe f8b3 	bl	800e578 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010412:	4b0d      	ldr	r3, [pc, #52]	; (8010448 <prvCheckTasksWaitingTermination+0x54>)
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	3b01      	subs	r3, #1
 8010418:	4a0b      	ldr	r2, [pc, #44]	; (8010448 <prvCheckTasksWaitingTermination+0x54>)
 801041a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801041c:	4b0b      	ldr	r3, [pc, #44]	; (801044c <prvCheckTasksWaitingTermination+0x58>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	3b01      	subs	r3, #1
 8010422:	4a0a      	ldr	r2, [pc, #40]	; (801044c <prvCheckTasksWaitingTermination+0x58>)
 8010424:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010426:	f7fe fa2d 	bl	800e884 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f000 f810 	bl	8010450 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010430:	4b06      	ldr	r3, [pc, #24]	; (801044c <prvCheckTasksWaitingTermination+0x58>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d1e1      	bne.n	80103fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010438:	bf00      	nop
 801043a:	bf00      	nop
 801043c:	3708      	adds	r7, #8
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}
 8010442:	bf00      	nop
 8010444:	20008228 	.word	0x20008228
 8010448:	20008258 	.word	0x20008258
 801044c:	2000823c 	.word	0x2000823c

08010450 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010450:	b580      	push	{r7, lr}
 8010452:	b084      	sub	sp, #16
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 801045e:	4618      	mov	r0, r3
 8010460:	f002 fcb4 	bl	8012dcc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f893 31b1 	ldrb.w	r3, [r3, #433]	; 0x1b1
 801046a:	2b00      	cmp	r3, #0
 801046c:	d108      	bne.n	8010480 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010472:	4618      	mov	r0, r3
 8010474:	f7fd ffde 	bl	800e434 <vPortFree>
				vPortFree( pxTCB );
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f7fd ffdb 	bl	800e434 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801047e:	e018      	b.n	80104b2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f893 31b1 	ldrb.w	r3, [r3, #433]	; 0x1b1
 8010486:	2b01      	cmp	r3, #1
 8010488:	d103      	bne.n	8010492 <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 801048a:	6878      	ldr	r0, [r7, #4]
 801048c:	f7fd ffd2 	bl	800e434 <vPortFree>
	}
 8010490:	e00f      	b.n	80104b2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f893 31b1 	ldrb.w	r3, [r3, #433]	; 0x1b1
 8010498:	2b02      	cmp	r3, #2
 801049a:	d00a      	beq.n	80104b2 <prvDeleteTCB+0x62>
	__asm volatile
 801049c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80104a0:	f383 8811 	msr	BASEPRI, r3
 80104a4:	f3bf 8f6f 	isb	sy
 80104a8:	f3bf 8f4f 	dsb	sy
 80104ac:	60fb      	str	r3, [r7, #12]
}
 80104ae:	bf00      	nop
 80104b0:	e7fe      	b.n	80104b0 <prvDeleteTCB+0x60>
	}
 80104b2:	bf00      	nop
 80104b4:	3710      	adds	r7, #16
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}
	...

080104bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80104bc:	b480      	push	{r7}
 80104be:	b083      	sub	sp, #12
 80104c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80104c2:	4b0c      	ldr	r3, [pc, #48]	; (80104f4 <prvResetNextTaskUnblockTime+0x38>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d104      	bne.n	80104d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80104cc:	4b0a      	ldr	r3, [pc, #40]	; (80104f8 <prvResetNextTaskUnblockTime+0x3c>)
 80104ce:	f04f 32ff 	mov.w	r2, #4294967295
 80104d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80104d4:	e008      	b.n	80104e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104d6:	4b07      	ldr	r3, [pc, #28]	; (80104f4 <prvResetNextTaskUnblockTime+0x38>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	68db      	ldr	r3, [r3, #12]
 80104dc:	68db      	ldr	r3, [r3, #12]
 80104de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	685b      	ldr	r3, [r3, #4]
 80104e4:	4a04      	ldr	r2, [pc, #16]	; (80104f8 <prvResetNextTaskUnblockTime+0x3c>)
 80104e6:	6013      	str	r3, [r2, #0]
}
 80104e8:	bf00      	nop
 80104ea:	370c      	adds	r7, #12
 80104ec:	46bd      	mov	sp, r7
 80104ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f2:	4770      	bx	lr
 80104f4:	2000820c 	.word	0x2000820c
 80104f8:	20008278 	.word	0x20008278

080104fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80104fc:	b480      	push	{r7}
 80104fe:	b083      	sub	sp, #12
 8010500:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010502:	4b0b      	ldr	r3, [pc, #44]	; (8010530 <xTaskGetSchedulerState+0x34>)
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d102      	bne.n	8010510 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801050a:	2301      	movs	r3, #1
 801050c:	607b      	str	r3, [r7, #4]
 801050e:	e008      	b.n	8010522 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010510:	4b08      	ldr	r3, [pc, #32]	; (8010534 <xTaskGetSchedulerState+0x38>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d102      	bne.n	801051e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010518:	2302      	movs	r3, #2
 801051a:	607b      	str	r3, [r7, #4]
 801051c:	e001      	b.n	8010522 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801051e:	2300      	movs	r3, #0
 8010520:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010522:	687b      	ldr	r3, [r7, #4]
	}
 8010524:	4618      	mov	r0, r3
 8010526:	370c      	adds	r7, #12
 8010528:	46bd      	mov	sp, r7
 801052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052e:	4770      	bx	lr
 8010530:	20008264 	.word	0x20008264
 8010534:	20008280 	.word	0x20008280

08010538 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010538:	b580      	push	{r7, lr}
 801053a:	b086      	sub	sp, #24
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010544:	2300      	movs	r3, #0
 8010546:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d05c      	beq.n	8010608 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801054e:	4b31      	ldr	r3, [pc, #196]	; (8010614 <xTaskPriorityDisinherit+0xdc>)
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	693a      	ldr	r2, [r7, #16]
 8010554:	429a      	cmp	r2, r3
 8010556:	d00a      	beq.n	801056e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010558:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801055c:	f383 8811 	msr	BASEPRI, r3
 8010560:	f3bf 8f6f 	isb	sy
 8010564:	f3bf 8f4f 	dsb	sy
 8010568:	60fb      	str	r3, [r7, #12]
}
 801056a:	bf00      	nop
 801056c:	e7fe      	b.n	801056c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8010574:	2b00      	cmp	r3, #0
 8010576:	d10a      	bne.n	801058e <xTaskPriorityDisinherit+0x56>
	__asm volatile
 8010578:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801057c:	f383 8811 	msr	BASEPRI, r3
 8010580:	f3bf 8f6f 	isb	sy
 8010584:	f3bf 8f4f 	dsb	sy
 8010588:	60bb      	str	r3, [r7, #8]
}
 801058a:	bf00      	nop
 801058c:	e7fe      	b.n	801058c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8010594:	1e5a      	subs	r2, r3, #1
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105a0:	693b      	ldr	r3, [r7, #16]
 80105a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80105a6:	429a      	cmp	r2, r3
 80105a8:	d02e      	beq.n	8010608 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d129      	bne.n	8010608 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105b4:	693b      	ldr	r3, [r7, #16]
 80105b6:	3304      	adds	r3, #4
 80105b8:	4618      	mov	r0, r3
 80105ba:	f7fd ffdd 	bl	800e578 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80105c4:	693b      	ldr	r3, [r7, #16]
 80105c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105c8:	693b      	ldr	r3, [r7, #16]
 80105ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80105d4:	693b      	ldr	r3, [r7, #16]
 80105d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105d8:	4b0f      	ldr	r3, [pc, #60]	; (8010618 <xTaskPriorityDisinherit+0xe0>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	429a      	cmp	r2, r3
 80105de:	d903      	bls.n	80105e8 <xTaskPriorityDisinherit+0xb0>
 80105e0:	693b      	ldr	r3, [r7, #16]
 80105e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105e4:	4a0c      	ldr	r2, [pc, #48]	; (8010618 <xTaskPriorityDisinherit+0xe0>)
 80105e6:	6013      	str	r3, [r2, #0]
 80105e8:	693b      	ldr	r3, [r7, #16]
 80105ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105ec:	4613      	mov	r3, r2
 80105ee:	009b      	lsls	r3, r3, #2
 80105f0:	4413      	add	r3, r2
 80105f2:	009b      	lsls	r3, r3, #2
 80105f4:	4a09      	ldr	r2, [pc, #36]	; (801061c <xTaskPriorityDisinherit+0xe4>)
 80105f6:	441a      	add	r2, r3
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	3304      	adds	r3, #4
 80105fc:	4619      	mov	r1, r3
 80105fe:	4610      	mov	r0, r2
 8010600:	f7fd ff5d 	bl	800e4be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010604:	2301      	movs	r3, #1
 8010606:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010608:	697b      	ldr	r3, [r7, #20]
	}
 801060a:	4618      	mov	r0, r3
 801060c:	3718      	adds	r7, #24
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}
 8010612:	bf00      	nop
 8010614:	20007d80 	.word	0x20007d80
 8010618:	20008260 	.word	0x20008260
 801061c:	20007d84 	.word	0x20007d84

08010620 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b084      	sub	sp, #16
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801062a:	4b24      	ldr	r3, [pc, #144]	; (80106bc <prvAddCurrentTaskToDelayedList+0x9c>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8010630:	4b23      	ldr	r3, [pc, #140]	; (80106c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	2200      	movs	r2, #0
 8010636:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801063a:	4b21      	ldr	r3, [pc, #132]	; (80106c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	3304      	adds	r3, #4
 8010640:	4618      	mov	r0, r3
 8010642:	f7fd ff99 	bl	800e578 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f1b3 3fff 	cmp.w	r3, #4294967295
 801064c:	d10a      	bne.n	8010664 <prvAddCurrentTaskToDelayedList+0x44>
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d007      	beq.n	8010664 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010654:	4b1a      	ldr	r3, [pc, #104]	; (80106c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	3304      	adds	r3, #4
 801065a:	4619      	mov	r1, r3
 801065c:	4819      	ldr	r0, [pc, #100]	; (80106c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801065e:	f7fd ff2e 	bl	800e4be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010662:	e026      	b.n	80106b2 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010664:	68fa      	ldr	r2, [r7, #12]
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	4413      	add	r3, r2
 801066a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801066c:	4b14      	ldr	r3, [pc, #80]	; (80106c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	68ba      	ldr	r2, [r7, #8]
 8010672:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010674:	68ba      	ldr	r2, [r7, #8]
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	429a      	cmp	r2, r3
 801067a:	d209      	bcs.n	8010690 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801067c:	4b12      	ldr	r3, [pc, #72]	; (80106c8 <prvAddCurrentTaskToDelayedList+0xa8>)
 801067e:	681a      	ldr	r2, [r3, #0]
 8010680:	4b0f      	ldr	r3, [pc, #60]	; (80106c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	3304      	adds	r3, #4
 8010686:	4619      	mov	r1, r3
 8010688:	4610      	mov	r0, r2
 801068a:	f7fd ff3c 	bl	800e506 <vListInsert>
}
 801068e:	e010      	b.n	80106b2 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010690:	4b0e      	ldr	r3, [pc, #56]	; (80106cc <prvAddCurrentTaskToDelayedList+0xac>)
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	4b0a      	ldr	r3, [pc, #40]	; (80106c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	3304      	adds	r3, #4
 801069a:	4619      	mov	r1, r3
 801069c:	4610      	mov	r0, r2
 801069e:	f7fd ff32 	bl	800e506 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80106a2:	4b0b      	ldr	r3, [pc, #44]	; (80106d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	68ba      	ldr	r2, [r7, #8]
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d202      	bcs.n	80106b2 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 80106ac:	4a08      	ldr	r2, [pc, #32]	; (80106d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	6013      	str	r3, [r2, #0]
}
 80106b2:	bf00      	nop
 80106b4:	3710      	adds	r7, #16
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	2000825c 	.word	0x2000825c
 80106c0:	20007d80 	.word	0x20007d80
 80106c4:	20008240 	.word	0x20008240
 80106c8:	20008210 	.word	0x20008210
 80106cc:	2000820c 	.word	0x2000820c
 80106d0:	20008278 	.word	0x20008278

080106d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b08a      	sub	sp, #40	; 0x28
 80106d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80106da:	2300      	movs	r3, #0
 80106dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80106de:	f000 fba1 	bl	8010e24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80106e2:	4b1c      	ldr	r3, [pc, #112]	; (8010754 <xTimerCreateTimerTask+0x80>)
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d021      	beq.n	801072e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80106ea:	2300      	movs	r3, #0
 80106ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80106ee:	2300      	movs	r3, #0
 80106f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80106f2:	1d3a      	adds	r2, r7, #4
 80106f4:	f107 0108 	add.w	r1, r7, #8
 80106f8:	f107 030c 	add.w	r3, r7, #12
 80106fc:	4618      	mov	r0, r3
 80106fe:	f7fd fe35 	bl	800e36c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010702:	6879      	ldr	r1, [r7, #4]
 8010704:	68bb      	ldr	r3, [r7, #8]
 8010706:	68fa      	ldr	r2, [r7, #12]
 8010708:	9202      	str	r2, [sp, #8]
 801070a:	9301      	str	r3, [sp, #4]
 801070c:	2337      	movs	r3, #55	; 0x37
 801070e:	9300      	str	r3, [sp, #0]
 8010710:	2300      	movs	r3, #0
 8010712:	460a      	mov	r2, r1
 8010714:	4910      	ldr	r1, [pc, #64]	; (8010758 <xTimerCreateTimerTask+0x84>)
 8010716:	4811      	ldr	r0, [pc, #68]	; (801075c <xTimerCreateTimerTask+0x88>)
 8010718:	f7fe fe92 	bl	800f440 <xTaskCreateStatic>
 801071c:	4603      	mov	r3, r0
 801071e:	4a10      	ldr	r2, [pc, #64]	; (8010760 <xTimerCreateTimerTask+0x8c>)
 8010720:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010722:	4b0f      	ldr	r3, [pc, #60]	; (8010760 <xTimerCreateTimerTask+0x8c>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d001      	beq.n	801072e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801072a:	2301      	movs	r3, #1
 801072c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d10a      	bne.n	801074a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010734:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010738:	f383 8811 	msr	BASEPRI, r3
 801073c:	f3bf 8f6f 	isb	sy
 8010740:	f3bf 8f4f 	dsb	sy
 8010744:	613b      	str	r3, [r7, #16]
}
 8010746:	bf00      	nop
 8010748:	e7fe      	b.n	8010748 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801074a:	697b      	ldr	r3, [r7, #20]
}
 801074c:	4618      	mov	r0, r3
 801074e:	3718      	adds	r7, #24
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}
 8010754:	200082b4 	.word	0x200082b4
 8010758:	080138b8 	.word	0x080138b8
 801075c:	080109cd 	.word	0x080109cd
 8010760:	200082b8 	.word	0x200082b8

08010764 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8010764:	b580      	push	{r7, lr}
 8010766:	b088      	sub	sp, #32
 8010768:	af02      	add	r7, sp, #8
 801076a:	60f8      	str	r0, [r7, #12]
 801076c:	60b9      	str	r1, [r7, #8]
 801076e:	607a      	str	r2, [r7, #4]
 8010770:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8010772:	202c      	movs	r0, #44	; 0x2c
 8010774:	f7fd fe14 	bl	800e3a0 <pvPortMalloc>
 8010778:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d00d      	beq.n	801079c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	2200      	movs	r2, #0
 8010784:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	9301      	str	r3, [sp, #4]
 801078c:	6a3b      	ldr	r3, [r7, #32]
 801078e:	9300      	str	r3, [sp, #0]
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	687a      	ldr	r2, [r7, #4]
 8010794:	68b9      	ldr	r1, [r7, #8]
 8010796:	68f8      	ldr	r0, [r7, #12]
 8010798:	f000 f843 	bl	8010822 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801079c:	697b      	ldr	r3, [r7, #20]
	}
 801079e:	4618      	mov	r0, r3
 80107a0:	3718      	adds	r7, #24
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}

080107a6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80107a6:	b580      	push	{r7, lr}
 80107a8:	b08a      	sub	sp, #40	; 0x28
 80107aa:	af02      	add	r7, sp, #8
 80107ac:	60f8      	str	r0, [r7, #12]
 80107ae:	60b9      	str	r1, [r7, #8]
 80107b0:	607a      	str	r2, [r7, #4]
 80107b2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80107b4:	232c      	movs	r3, #44	; 0x2c
 80107b6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80107b8:	693b      	ldr	r3, [r7, #16]
 80107ba:	2b2c      	cmp	r3, #44	; 0x2c
 80107bc:	d00a      	beq.n	80107d4 <xTimerCreateStatic+0x2e>
	__asm volatile
 80107be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80107c2:	f383 8811 	msr	BASEPRI, r3
 80107c6:	f3bf 8f6f 	isb	sy
 80107ca:	f3bf 8f4f 	dsb	sy
 80107ce:	61bb      	str	r3, [r7, #24]
}
 80107d0:	bf00      	nop
 80107d2:	e7fe      	b.n	80107d2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80107d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80107d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d10a      	bne.n	80107f2 <xTimerCreateStatic+0x4c>
	__asm volatile
 80107dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80107e0:	f383 8811 	msr	BASEPRI, r3
 80107e4:	f3bf 8f6f 	isb	sy
 80107e8:	f3bf 8f4f 	dsb	sy
 80107ec:	617b      	str	r3, [r7, #20]
}
 80107ee:	bf00      	nop
 80107f0:	e7fe      	b.n	80107f0 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80107f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107f4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80107f6:	69fb      	ldr	r3, [r7, #28]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d00d      	beq.n	8010818 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80107fc:	69fb      	ldr	r3, [r7, #28]
 80107fe:	2202      	movs	r2, #2
 8010800:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010804:	69fb      	ldr	r3, [r7, #28]
 8010806:	9301      	str	r3, [sp, #4]
 8010808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801080a:	9300      	str	r3, [sp, #0]
 801080c:	683b      	ldr	r3, [r7, #0]
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	68b9      	ldr	r1, [r7, #8]
 8010812:	68f8      	ldr	r0, [r7, #12]
 8010814:	f000 f805 	bl	8010822 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010818:	69fb      	ldr	r3, [r7, #28]
	}
 801081a:	4618      	mov	r0, r3
 801081c:	3720      	adds	r7, #32
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}

08010822 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8010822:	b580      	push	{r7, lr}
 8010824:	b086      	sub	sp, #24
 8010826:	af00      	add	r7, sp, #0
 8010828:	60f8      	str	r0, [r7, #12]
 801082a:	60b9      	str	r1, [r7, #8]
 801082c:	607a      	str	r2, [r7, #4]
 801082e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d10a      	bne.n	801084c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8010836:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 801083a:	f383 8811 	msr	BASEPRI, r3
 801083e:	f3bf 8f6f 	isb	sy
 8010842:	f3bf 8f4f 	dsb	sy
 8010846:	617b      	str	r3, [r7, #20]
}
 8010848:	bf00      	nop
 801084a:	e7fe      	b.n	801084a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 801084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084e:	2b00      	cmp	r3, #0
 8010850:	d01e      	beq.n	8010890 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8010852:	f000 fae7 	bl	8010e24 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8010856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010858:	68fa      	ldr	r2, [r7, #12]
 801085a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 801085c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801085e:	68ba      	ldr	r2, [r7, #8]
 8010860:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8010862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010864:	683a      	ldr	r2, [r7, #0]
 8010866:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8010868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801086a:	6a3a      	ldr	r2, [r7, #32]
 801086c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010870:	3304      	adds	r3, #4
 8010872:	4618      	mov	r0, r3
 8010874:	f7fd fe16 	bl	800e4a4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d008      	beq.n	8010890 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 801087e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010884:	f043 0304 	orr.w	r3, r3, #4
 8010888:	b2da      	uxtb	r2, r3
 801088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801088c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8010890:	bf00      	nop
 8010892:	3718      	adds	r7, #24
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}

08010898 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b08a      	sub	sp, #40	; 0x28
 801089c:	af00      	add	r7, sp, #0
 801089e:	60f8      	str	r0, [r7, #12]
 80108a0:	60b9      	str	r1, [r7, #8]
 80108a2:	607a      	str	r2, [r7, #4]
 80108a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80108a6:	2300      	movs	r3, #0
 80108a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d10a      	bne.n	80108c6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80108b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80108b4:	f383 8811 	msr	BASEPRI, r3
 80108b8:	f3bf 8f6f 	isb	sy
 80108bc:	f3bf 8f4f 	dsb	sy
 80108c0:	623b      	str	r3, [r7, #32]
}
 80108c2:	bf00      	nop
 80108c4:	e7fe      	b.n	80108c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80108c6:	4b1a      	ldr	r3, [pc, #104]	; (8010930 <xTimerGenericCommand+0x98>)
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d02a      	beq.n	8010924 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	2b05      	cmp	r3, #5
 80108de:	dc18      	bgt.n	8010912 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80108e0:	f7ff fe0c 	bl	80104fc <xTaskGetSchedulerState>
 80108e4:	4603      	mov	r3, r0
 80108e6:	2b02      	cmp	r3, #2
 80108e8:	d109      	bne.n	80108fe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80108ea:	4b11      	ldr	r3, [pc, #68]	; (8010930 <xTimerGenericCommand+0x98>)
 80108ec:	6818      	ldr	r0, [r3, #0]
 80108ee:	f107 0110 	add.w	r1, r7, #16
 80108f2:	2300      	movs	r3, #0
 80108f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108f6:	f7fe f9bb 	bl	800ec70 <xQueueGenericSend>
 80108fa:	6278      	str	r0, [r7, #36]	; 0x24
 80108fc:	e012      	b.n	8010924 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80108fe:	4b0c      	ldr	r3, [pc, #48]	; (8010930 <xTimerGenericCommand+0x98>)
 8010900:	6818      	ldr	r0, [r3, #0]
 8010902:	f107 0110 	add.w	r1, r7, #16
 8010906:	2300      	movs	r3, #0
 8010908:	2200      	movs	r2, #0
 801090a:	f7fe f9b1 	bl	800ec70 <xQueueGenericSend>
 801090e:	6278      	str	r0, [r7, #36]	; 0x24
 8010910:	e008      	b.n	8010924 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010912:	4b07      	ldr	r3, [pc, #28]	; (8010930 <xTimerGenericCommand+0x98>)
 8010914:	6818      	ldr	r0, [r3, #0]
 8010916:	f107 0110 	add.w	r1, r7, #16
 801091a:	2300      	movs	r3, #0
 801091c:	683a      	ldr	r2, [r7, #0]
 801091e:	f7fe faa5 	bl	800ee6c <xQueueGenericSendFromISR>
 8010922:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010926:	4618      	mov	r0, r3
 8010928:	3728      	adds	r7, #40	; 0x28
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}
 801092e:	bf00      	nop
 8010930:	200082b4 	.word	0x200082b4

08010934 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b088      	sub	sp, #32
 8010938:	af02      	add	r7, sp, #8
 801093a:	6078      	str	r0, [r7, #4]
 801093c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801093e:	4b22      	ldr	r3, [pc, #136]	; (80109c8 <prvProcessExpiredTimer+0x94>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	68db      	ldr	r3, [r3, #12]
 8010944:	68db      	ldr	r3, [r3, #12]
 8010946:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	3304      	adds	r3, #4
 801094c:	4618      	mov	r0, r3
 801094e:	f7fd fe13 	bl	800e578 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010958:	f003 0304 	and.w	r3, r3, #4
 801095c:	2b00      	cmp	r3, #0
 801095e:	d022      	beq.n	80109a6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	699a      	ldr	r2, [r3, #24]
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	18d1      	adds	r1, r2, r3
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	683a      	ldr	r2, [r7, #0]
 801096c:	6978      	ldr	r0, [r7, #20]
 801096e:	f000 f8d1 	bl	8010b14 <prvInsertTimerInActiveList>
 8010972:	4603      	mov	r3, r0
 8010974:	2b00      	cmp	r3, #0
 8010976:	d01f      	beq.n	80109b8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010978:	2300      	movs	r3, #0
 801097a:	9300      	str	r3, [sp, #0]
 801097c:	2300      	movs	r3, #0
 801097e:	687a      	ldr	r2, [r7, #4]
 8010980:	2100      	movs	r1, #0
 8010982:	6978      	ldr	r0, [r7, #20]
 8010984:	f7ff ff88 	bl	8010898 <xTimerGenericCommand>
 8010988:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801098a:	693b      	ldr	r3, [r7, #16]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d113      	bne.n	80109b8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010990:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010994:	f383 8811 	msr	BASEPRI, r3
 8010998:	f3bf 8f6f 	isb	sy
 801099c:	f3bf 8f4f 	dsb	sy
 80109a0:	60fb      	str	r3, [r7, #12]
}
 80109a2:	bf00      	nop
 80109a4:	e7fe      	b.n	80109a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80109a6:	697b      	ldr	r3, [r7, #20]
 80109a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109ac:	f023 0301 	bic.w	r3, r3, #1
 80109b0:	b2da      	uxtb	r2, r3
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80109b8:	697b      	ldr	r3, [r7, #20]
 80109ba:	6a1b      	ldr	r3, [r3, #32]
 80109bc:	6978      	ldr	r0, [r7, #20]
 80109be:	4798      	blx	r3
}
 80109c0:	bf00      	nop
 80109c2:	3718      	adds	r7, #24
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}
 80109c8:	200082ac 	.word	0x200082ac

080109cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b084      	sub	sp, #16
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80109d4:	f107 0308 	add.w	r3, r7, #8
 80109d8:	4618      	mov	r0, r3
 80109da:	f000 f857 	bl	8010a8c <prvGetNextExpireTime>
 80109de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80109e0:	68bb      	ldr	r3, [r7, #8]
 80109e2:	4619      	mov	r1, r3
 80109e4:	68f8      	ldr	r0, [r7, #12]
 80109e6:	f000 f803 	bl	80109f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80109ea:	f000 f8d5 	bl	8010b98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80109ee:	e7f1      	b.n	80109d4 <prvTimerTask+0x8>

080109f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b084      	sub	sp, #16
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
 80109f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80109fa:	f7ff f955 	bl	800fca8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80109fe:	f107 0308 	add.w	r3, r7, #8
 8010a02:	4618      	mov	r0, r3
 8010a04:	f000 f866 	bl	8010ad4 <prvSampleTimeNow>
 8010a08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010a0a:	68bb      	ldr	r3, [r7, #8]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d130      	bne.n	8010a72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d10a      	bne.n	8010a2c <prvProcessTimerOrBlockTask+0x3c>
 8010a16:	687a      	ldr	r2, [r7, #4]
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	429a      	cmp	r2, r3
 8010a1c:	d806      	bhi.n	8010a2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010a1e:	f7ff f951 	bl	800fcc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010a22:	68f9      	ldr	r1, [r7, #12]
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f7ff ff85 	bl	8010934 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010a2a:	e024      	b.n	8010a76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d008      	beq.n	8010a44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010a32:	4b13      	ldr	r3, [pc, #76]	; (8010a80 <prvProcessTimerOrBlockTask+0x90>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d101      	bne.n	8010a40 <prvProcessTimerOrBlockTask+0x50>
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	e000      	b.n	8010a42 <prvProcessTimerOrBlockTask+0x52>
 8010a40:	2300      	movs	r3, #0
 8010a42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010a44:	4b0f      	ldr	r3, [pc, #60]	; (8010a84 <prvProcessTimerOrBlockTask+0x94>)
 8010a46:	6818      	ldr	r0, [r3, #0]
 8010a48:	687a      	ldr	r2, [r7, #4]
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	1ad3      	subs	r3, r2, r3
 8010a4e:	683a      	ldr	r2, [r7, #0]
 8010a50:	4619      	mov	r1, r3
 8010a52:	f7fe fcc1 	bl	800f3d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010a56:	f7ff f935 	bl	800fcc4 <xTaskResumeAll>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d10a      	bne.n	8010a76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010a60:	4b09      	ldr	r3, [pc, #36]	; (8010a88 <prvProcessTimerOrBlockTask+0x98>)
 8010a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a66:	601a      	str	r2, [r3, #0]
 8010a68:	f3bf 8f4f 	dsb	sy
 8010a6c:	f3bf 8f6f 	isb	sy
}
 8010a70:	e001      	b.n	8010a76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010a72:	f7ff f927 	bl	800fcc4 <xTaskResumeAll>
}
 8010a76:	bf00      	nop
 8010a78:	3710      	adds	r7, #16
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}
 8010a7e:	bf00      	nop
 8010a80:	200082b0 	.word	0x200082b0
 8010a84:	200082b4 	.word	0x200082b4
 8010a88:	e000ed04 	.word	0xe000ed04

08010a8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b085      	sub	sp, #20
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010a94:	4b0e      	ldr	r3, [pc, #56]	; (8010ad0 <prvGetNextExpireTime+0x44>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d101      	bne.n	8010aa2 <prvGetNextExpireTime+0x16>
 8010a9e:	2201      	movs	r2, #1
 8010aa0:	e000      	b.n	8010aa4 <prvGetNextExpireTime+0x18>
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d105      	bne.n	8010abc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010ab0:	4b07      	ldr	r3, [pc, #28]	; (8010ad0 <prvGetNextExpireTime+0x44>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	68db      	ldr	r3, [r3, #12]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	60fb      	str	r3, [r7, #12]
 8010aba:	e001      	b.n	8010ac0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010abc:	2300      	movs	r3, #0
 8010abe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
}
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	3714      	adds	r7, #20
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010acc:	4770      	bx	lr
 8010ace:	bf00      	nop
 8010ad0:	200082ac 	.word	0x200082ac

08010ad4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b084      	sub	sp, #16
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010adc:	f7ff f990 	bl	800fe00 <xTaskGetTickCount>
 8010ae0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010ae2:	4b0b      	ldr	r3, [pc, #44]	; (8010b10 <prvSampleTimeNow+0x3c>)
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	68fa      	ldr	r2, [r7, #12]
 8010ae8:	429a      	cmp	r2, r3
 8010aea:	d205      	bcs.n	8010af8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010aec:	f000 f936 	bl	8010d5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2201      	movs	r2, #1
 8010af4:	601a      	str	r2, [r3, #0]
 8010af6:	e002      	b.n	8010afe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2200      	movs	r2, #0
 8010afc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010afe:	4a04      	ldr	r2, [pc, #16]	; (8010b10 <prvSampleTimeNow+0x3c>)
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010b04:	68fb      	ldr	r3, [r7, #12]
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3710      	adds	r7, #16
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}
 8010b0e:	bf00      	nop
 8010b10:	200082bc 	.word	0x200082bc

08010b14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b086      	sub	sp, #24
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	60f8      	str	r0, [r7, #12]
 8010b1c:	60b9      	str	r1, [r7, #8]
 8010b1e:	607a      	str	r2, [r7, #4]
 8010b20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010b22:	2300      	movs	r3, #0
 8010b24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	68ba      	ldr	r2, [r7, #8]
 8010b2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	68fa      	ldr	r2, [r7, #12]
 8010b30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010b32:	68ba      	ldr	r2, [r7, #8]
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	429a      	cmp	r2, r3
 8010b38:	d812      	bhi.n	8010b60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b3a:	687a      	ldr	r2, [r7, #4]
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	1ad2      	subs	r2, r2, r3
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	699b      	ldr	r3, [r3, #24]
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d302      	bcc.n	8010b4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010b48:	2301      	movs	r3, #1
 8010b4a:	617b      	str	r3, [r7, #20]
 8010b4c:	e01b      	b.n	8010b86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010b4e:	4b10      	ldr	r3, [pc, #64]	; (8010b90 <prvInsertTimerInActiveList+0x7c>)
 8010b50:	681a      	ldr	r2, [r3, #0]
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	3304      	adds	r3, #4
 8010b56:	4619      	mov	r1, r3
 8010b58:	4610      	mov	r0, r2
 8010b5a:	f7fd fcd4 	bl	800e506 <vListInsert>
 8010b5e:	e012      	b.n	8010b86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010b60:	687a      	ldr	r2, [r7, #4]
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d206      	bcs.n	8010b76 <prvInsertTimerInActiveList+0x62>
 8010b68:	68ba      	ldr	r2, [r7, #8]
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	d302      	bcc.n	8010b76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010b70:	2301      	movs	r3, #1
 8010b72:	617b      	str	r3, [r7, #20]
 8010b74:	e007      	b.n	8010b86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010b76:	4b07      	ldr	r3, [pc, #28]	; (8010b94 <prvInsertTimerInActiveList+0x80>)
 8010b78:	681a      	ldr	r2, [r3, #0]
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	3304      	adds	r3, #4
 8010b7e:	4619      	mov	r1, r3
 8010b80:	4610      	mov	r0, r2
 8010b82:	f7fd fcc0 	bl	800e506 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010b86:	697b      	ldr	r3, [r7, #20]
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3718      	adds	r7, #24
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}
 8010b90:	200082b0 	.word	0x200082b0
 8010b94:	200082ac 	.word	0x200082ac

08010b98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b08e      	sub	sp, #56	; 0x38
 8010b9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010b9e:	e0ca      	b.n	8010d36 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	da18      	bge.n	8010bd8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010ba6:	1d3b      	adds	r3, r7, #4
 8010ba8:	3304      	adds	r3, #4
 8010baa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d10a      	bne.n	8010bc8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010bb2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010bb6:	f383 8811 	msr	BASEPRI, r3
 8010bba:	f3bf 8f6f 	isb	sy
 8010bbe:	f3bf 8f4f 	dsb	sy
 8010bc2:	61fb      	str	r3, [r7, #28]
}
 8010bc4:	bf00      	nop
 8010bc6:	e7fe      	b.n	8010bc6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bce:	6850      	ldr	r0, [r2, #4]
 8010bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bd2:	6892      	ldr	r2, [r2, #8]
 8010bd4:	4611      	mov	r1, r2
 8010bd6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	f2c0 80aa 	blt.w	8010d34 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be6:	695b      	ldr	r3, [r3, #20]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d004      	beq.n	8010bf6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bee:	3304      	adds	r3, #4
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f7fd fcc1 	bl	800e578 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010bf6:	463b      	mov	r3, r7
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7ff ff6b 	bl	8010ad4 <prvSampleTimeNow>
 8010bfe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2b09      	cmp	r3, #9
 8010c04:	f200 8097 	bhi.w	8010d36 <prvProcessReceivedCommands+0x19e>
 8010c08:	a201      	add	r2, pc, #4	; (adr r2, 8010c10 <prvProcessReceivedCommands+0x78>)
 8010c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c0e:	bf00      	nop
 8010c10:	08010c39 	.word	0x08010c39
 8010c14:	08010c39 	.word	0x08010c39
 8010c18:	08010c39 	.word	0x08010c39
 8010c1c:	08010cad 	.word	0x08010cad
 8010c20:	08010cc1 	.word	0x08010cc1
 8010c24:	08010d0b 	.word	0x08010d0b
 8010c28:	08010c39 	.word	0x08010c39
 8010c2c:	08010c39 	.word	0x08010c39
 8010c30:	08010cad 	.word	0x08010cad
 8010c34:	08010cc1 	.word	0x08010cc1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c3e:	f043 0301 	orr.w	r3, r3, #1
 8010c42:	b2da      	uxtb	r2, r3
 8010c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010c4a:	68ba      	ldr	r2, [r7, #8]
 8010c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c4e:	699b      	ldr	r3, [r3, #24]
 8010c50:	18d1      	adds	r1, r2, r3
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c58:	f7ff ff5c 	bl	8010b14 <prvInsertTimerInActiveList>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d069      	beq.n	8010d36 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c64:	6a1b      	ldr	r3, [r3, #32]
 8010c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c70:	f003 0304 	and.w	r3, r3, #4
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d05e      	beq.n	8010d36 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010c78:	68ba      	ldr	r2, [r7, #8]
 8010c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c7c:	699b      	ldr	r3, [r3, #24]
 8010c7e:	441a      	add	r2, r3
 8010c80:	2300      	movs	r3, #0
 8010c82:	9300      	str	r3, [sp, #0]
 8010c84:	2300      	movs	r3, #0
 8010c86:	2100      	movs	r1, #0
 8010c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c8a:	f7ff fe05 	bl	8010898 <xTimerGenericCommand>
 8010c8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010c90:	6a3b      	ldr	r3, [r7, #32]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d14f      	bne.n	8010d36 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010c96:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010c9a:	f383 8811 	msr	BASEPRI, r3
 8010c9e:	f3bf 8f6f 	isb	sy
 8010ca2:	f3bf 8f4f 	dsb	sy
 8010ca6:	61bb      	str	r3, [r7, #24]
}
 8010ca8:	bf00      	nop
 8010caa:	e7fe      	b.n	8010caa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cb2:	f023 0301 	bic.w	r3, r3, #1
 8010cb6:	b2da      	uxtb	r2, r3
 8010cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010cbe:	e03a      	b.n	8010d36 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cc6:	f043 0301 	orr.w	r3, r3, #1
 8010cca:	b2da      	uxtb	r2, r3
 8010ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010cd2:	68ba      	ldr	r2, [r7, #8]
 8010cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cda:	699b      	ldr	r3, [r3, #24]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d10a      	bne.n	8010cf6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010ce0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010ce4:	f383 8811 	msr	BASEPRI, r3
 8010ce8:	f3bf 8f6f 	isb	sy
 8010cec:	f3bf 8f4f 	dsb	sy
 8010cf0:	617b      	str	r3, [r7, #20]
}
 8010cf2:	bf00      	nop
 8010cf4:	e7fe      	b.n	8010cf4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf8:	699a      	ldr	r2, [r3, #24]
 8010cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cfc:	18d1      	adds	r1, r2, r3
 8010cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d04:	f7ff ff06 	bl	8010b14 <prvInsertTimerInActiveList>
					break;
 8010d08:	e015      	b.n	8010d36 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d10:	f003 0302 	and.w	r3, r3, #2
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d103      	bne.n	8010d20 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d1a:	f7fd fb8b 	bl	800e434 <vPortFree>
 8010d1e:	e00a      	b.n	8010d36 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d26:	f023 0301 	bic.w	r3, r3, #1
 8010d2a:	b2da      	uxtb	r2, r3
 8010d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010d32:	e000      	b.n	8010d36 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010d34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010d36:	4b08      	ldr	r3, [pc, #32]	; (8010d58 <prvProcessReceivedCommands+0x1c0>)
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	1d39      	adds	r1, r7, #4
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f7fe f930 	bl	800efa4 <xQueueReceive>
 8010d44:	4603      	mov	r3, r0
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	f47f af2a 	bne.w	8010ba0 <prvProcessReceivedCommands+0x8>
	}
}
 8010d4c:	bf00      	nop
 8010d4e:	bf00      	nop
 8010d50:	3730      	adds	r7, #48	; 0x30
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}
 8010d56:	bf00      	nop
 8010d58:	200082b4 	.word	0x200082b4

08010d5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b088      	sub	sp, #32
 8010d60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010d62:	e048      	b.n	8010df6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010d64:	4b2d      	ldr	r3, [pc, #180]	; (8010e1c <prvSwitchTimerLists+0xc0>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	68db      	ldr	r3, [r3, #12]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d6e:	4b2b      	ldr	r3, [pc, #172]	; (8010e1c <prvSwitchTimerLists+0xc0>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	68db      	ldr	r3, [r3, #12]
 8010d74:	68db      	ldr	r3, [r3, #12]
 8010d76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	3304      	adds	r3, #4
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7fd fbfb 	bl	800e578 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	6a1b      	ldr	r3, [r3, #32]
 8010d86:	68f8      	ldr	r0, [r7, #12]
 8010d88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d90:	f003 0304 	and.w	r3, r3, #4
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d02e      	beq.n	8010df6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	699b      	ldr	r3, [r3, #24]
 8010d9c:	693a      	ldr	r2, [r7, #16]
 8010d9e:	4413      	add	r3, r2
 8010da0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010da2:	68ba      	ldr	r2, [r7, #8]
 8010da4:	693b      	ldr	r3, [r7, #16]
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d90e      	bls.n	8010dc8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	68ba      	ldr	r2, [r7, #8]
 8010dae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	68fa      	ldr	r2, [r7, #12]
 8010db4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010db6:	4b19      	ldr	r3, [pc, #100]	; (8010e1c <prvSwitchTimerLists+0xc0>)
 8010db8:	681a      	ldr	r2, [r3, #0]
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	3304      	adds	r3, #4
 8010dbe:	4619      	mov	r1, r3
 8010dc0:	4610      	mov	r0, r2
 8010dc2:	f7fd fba0 	bl	800e506 <vListInsert>
 8010dc6:	e016      	b.n	8010df6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010dc8:	2300      	movs	r3, #0
 8010dca:	9300      	str	r3, [sp, #0]
 8010dcc:	2300      	movs	r3, #0
 8010dce:	693a      	ldr	r2, [r7, #16]
 8010dd0:	2100      	movs	r1, #0
 8010dd2:	68f8      	ldr	r0, [r7, #12]
 8010dd4:	f7ff fd60 	bl	8010898 <xTimerGenericCommand>
 8010dd8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d10a      	bne.n	8010df6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010de0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010de4:	f383 8811 	msr	BASEPRI, r3
 8010de8:	f3bf 8f6f 	isb	sy
 8010dec:	f3bf 8f4f 	dsb	sy
 8010df0:	603b      	str	r3, [r7, #0]
}
 8010df2:	bf00      	nop
 8010df4:	e7fe      	b.n	8010df4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010df6:	4b09      	ldr	r3, [pc, #36]	; (8010e1c <prvSwitchTimerLists+0xc0>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d1b1      	bne.n	8010d64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010e00:	4b06      	ldr	r3, [pc, #24]	; (8010e1c <prvSwitchTimerLists+0xc0>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010e06:	4b06      	ldr	r3, [pc, #24]	; (8010e20 <prvSwitchTimerLists+0xc4>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	4a04      	ldr	r2, [pc, #16]	; (8010e1c <prvSwitchTimerLists+0xc0>)
 8010e0c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010e0e:	4a04      	ldr	r2, [pc, #16]	; (8010e20 <prvSwitchTimerLists+0xc4>)
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	6013      	str	r3, [r2, #0]
}
 8010e14:	bf00      	nop
 8010e16:	3718      	adds	r7, #24
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	200082ac 	.word	0x200082ac
 8010e20:	200082b0 	.word	0x200082b0

08010e24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b082      	sub	sp, #8
 8010e28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010e2a:	f7fd fcfb 	bl	800e824 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010e2e:	4b15      	ldr	r3, [pc, #84]	; (8010e84 <prvCheckForValidListAndQueue+0x60>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d120      	bne.n	8010e78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010e36:	4814      	ldr	r0, [pc, #80]	; (8010e88 <prvCheckForValidListAndQueue+0x64>)
 8010e38:	f7fd fb14 	bl	800e464 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010e3c:	4813      	ldr	r0, [pc, #76]	; (8010e8c <prvCheckForValidListAndQueue+0x68>)
 8010e3e:	f7fd fb11 	bl	800e464 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010e42:	4b13      	ldr	r3, [pc, #76]	; (8010e90 <prvCheckForValidListAndQueue+0x6c>)
 8010e44:	4a10      	ldr	r2, [pc, #64]	; (8010e88 <prvCheckForValidListAndQueue+0x64>)
 8010e46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010e48:	4b12      	ldr	r3, [pc, #72]	; (8010e94 <prvCheckForValidListAndQueue+0x70>)
 8010e4a:	4a10      	ldr	r2, [pc, #64]	; (8010e8c <prvCheckForValidListAndQueue+0x68>)
 8010e4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010e4e:	2300      	movs	r3, #0
 8010e50:	9300      	str	r3, [sp, #0]
 8010e52:	4b11      	ldr	r3, [pc, #68]	; (8010e98 <prvCheckForValidListAndQueue+0x74>)
 8010e54:	4a11      	ldr	r2, [pc, #68]	; (8010e9c <prvCheckForValidListAndQueue+0x78>)
 8010e56:	2110      	movs	r1, #16
 8010e58:	20ff      	movs	r0, #255	; 0xff
 8010e5a:	f7fd fe6d 	bl	800eb38 <xQueueGenericCreateStatic>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	4a08      	ldr	r2, [pc, #32]	; (8010e84 <prvCheckForValidListAndQueue+0x60>)
 8010e62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010e64:	4b07      	ldr	r3, [pc, #28]	; (8010e84 <prvCheckForValidListAndQueue+0x60>)
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d005      	beq.n	8010e78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010e6c:	4b05      	ldr	r3, [pc, #20]	; (8010e84 <prvCheckForValidListAndQueue+0x60>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	490b      	ldr	r1, [pc, #44]	; (8010ea0 <prvCheckForValidListAndQueue+0x7c>)
 8010e72:	4618      	mov	r0, r3
 8010e74:	f7fe fa86 	bl	800f384 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010e78:	f7fd fd04 	bl	800e884 <vPortExitCritical>
}
 8010e7c:	bf00      	nop
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bd80      	pop	{r7, pc}
 8010e82:	bf00      	nop
 8010e84:	200082b4 	.word	0x200082b4
 8010e88:	20008284 	.word	0x20008284
 8010e8c:	20008298 	.word	0x20008298
 8010e90:	200082ac 	.word	0x200082ac
 8010e94:	200082b0 	.word	0x200082b0
 8010e98:	200092b0 	.word	0x200092b0
 8010e9c:	200082c0 	.word	0x200082c0
 8010ea0:	080138c0 	.word	0x080138c0

08010ea4 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b086      	sub	sp, #24
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d10a      	bne.n	8010ecc <xTimerIsTimerActive+0x28>
	__asm volatile
 8010eb6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010eba:	f383 8811 	msr	BASEPRI, r3
 8010ebe:	f3bf 8f6f 	isb	sy
 8010ec2:	f3bf 8f4f 	dsb	sy
 8010ec6:	60fb      	str	r3, [r7, #12]
}
 8010ec8:	bf00      	nop
 8010eca:	e7fe      	b.n	8010eca <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8010ecc:	f7fd fcaa 	bl	800e824 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8010ed0:	693b      	ldr	r3, [r7, #16]
 8010ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ed6:	f003 0301 	and.w	r3, r3, #1
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d102      	bne.n	8010ee4 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 8010ede:	2300      	movs	r3, #0
 8010ee0:	617b      	str	r3, [r7, #20]
 8010ee2:	e001      	b.n	8010ee8 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8010ee8:	f7fd fccc 	bl	800e884 <vPortExitCritical>

	return xReturn;
 8010eec:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3718      	adds	r7, #24
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}

08010ef6 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8010ef6:	b580      	push	{r7, lr}
 8010ef8:	b086      	sub	sp, #24
 8010efa:	af00      	add	r7, sp, #0
 8010efc:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d10a      	bne.n	8010f1e <pvTimerGetTimerID+0x28>
	__asm volatile
 8010f08:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8010f0c:	f383 8811 	msr	BASEPRI, r3
 8010f10:	f3bf 8f6f 	isb	sy
 8010f14:	f3bf 8f4f 	dsb	sy
 8010f18:	60fb      	str	r3, [r7, #12]
}
 8010f1a:	bf00      	nop
 8010f1c:	e7fe      	b.n	8010f1c <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8010f1e:	f7fd fc81 	bl	800e824 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8010f22:	697b      	ldr	r3, [r7, #20]
 8010f24:	69db      	ldr	r3, [r3, #28]
 8010f26:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8010f28:	f7fd fcac 	bl	800e884 <vPortExitCritical>

	return pvReturn;
 8010f2c:	693b      	ldr	r3, [r7, #16]
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	3718      	adds	r7, #24
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}
	...

08010f38 <Rte_Read_Dem_DemPort_Dem_DtcArray>:
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/
/* Run time environment interface. */
VOID Rte_Read_Dem_DemPort_Dem_DtcArray(uint8* data, uint8 position)
{
 8010f38:	b480      	push	{r7}
 8010f3a:	b083      	sub	sp, #12
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	460b      	mov	r3, r1
 8010f42:	70fb      	strb	r3, [r7, #3]
	if(Dem_DtcArray[0] > 250)
 8010f44:	4b3a      	ldr	r3, [pc, #232]	; (8011030 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8010f46:	781b      	ldrb	r3, [r3, #0]
 8010f48:	2bfa      	cmp	r3, #250	; 0xfa
 8010f4a:	d904      	bls.n	8010f56 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x1e>
	{
		ExtLights_DtcArray[0] = Dem_DtcArray[0];
 8010f4c:	4b38      	ldr	r3, [pc, #224]	; (8011030 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8010f4e:	781a      	ldrb	r2, [r3, #0]
 8010f50:	4b38      	ldr	r3, [pc, #224]	; (8011034 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8010f52:	701a      	strb	r2, [r3, #0]
 8010f54:	e002      	b.n	8010f5c <Rte_Read_Dem_DemPort_Dem_DtcArray+0x24>
	}
	else
	{
		ExtLights_DtcArray[0] = 0;
 8010f56:	4b37      	ldr	r3, [pc, #220]	; (8011034 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8010f58:	2200      	movs	r2, #0
 8010f5a:	701a      	strb	r2, [r3, #0]
	}
	if(Dem_DtcArray[1] > 250)
 8010f5c:	4b34      	ldr	r3, [pc, #208]	; (8011030 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8010f5e:	785b      	ldrb	r3, [r3, #1]
 8010f60:	2bfa      	cmp	r3, #250	; 0xfa
 8010f62:	d904      	bls.n	8010f6e <Rte_Read_Dem_DemPort_Dem_DtcArray+0x36>
	{
		ExtLights_DtcArray[1] = Dem_DtcArray[1];
 8010f64:	4b32      	ldr	r3, [pc, #200]	; (8011030 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8010f66:	785a      	ldrb	r2, [r3, #1]
 8010f68:	4b32      	ldr	r3, [pc, #200]	; (8011034 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8010f6a:	705a      	strb	r2, [r3, #1]
 8010f6c:	e002      	b.n	8010f74 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x3c>
	}
	else
	{
		ExtLights_DtcArray[1] = 0;
 8010f6e:	4b31      	ldr	r3, [pc, #196]	; (8011034 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8010f70:	2200      	movs	r2, #0
 8010f72:	705a      	strb	r2, [r3, #1]
	}
	if(Dem_DtcArray[2] > 250)
 8010f74:	4b2e      	ldr	r3, [pc, #184]	; (8011030 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8010f76:	789b      	ldrb	r3, [r3, #2]
 8010f78:	2bfa      	cmp	r3, #250	; 0xfa
 8010f7a:	d904      	bls.n	8010f86 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x4e>
	{
		ExtLights_DtcArray[2] = Dem_DtcArray[2];
 8010f7c:	4b2c      	ldr	r3, [pc, #176]	; (8011030 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8010f7e:	789a      	ldrb	r2, [r3, #2]
 8010f80:	4b2c      	ldr	r3, [pc, #176]	; (8011034 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8010f82:	709a      	strb	r2, [r3, #2]
 8010f84:	e002      	b.n	8010f8c <Rte_Read_Dem_DemPort_Dem_DtcArray+0x54>
	}
	else
	{
		ExtLights_DtcArray[2] = 0;
 8010f86:	4b2b      	ldr	r3, [pc, #172]	; (8011034 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8010f88:	2200      	movs	r2, #0
 8010f8a:	709a      	strb	r2, [r3, #2]
	}
	if(Dem_DtcArray[3] > 250)
 8010f8c:	4b28      	ldr	r3, [pc, #160]	; (8011030 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8010f8e:	78db      	ldrb	r3, [r3, #3]
 8010f90:	2bfa      	cmp	r3, #250	; 0xfa
 8010f92:	d904      	bls.n	8010f9e <Rte_Read_Dem_DemPort_Dem_DtcArray+0x66>
	{
		ExtLights_DtcArray[3] = Dem_DtcArray[3];
 8010f94:	4b26      	ldr	r3, [pc, #152]	; (8011030 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8010f96:	78da      	ldrb	r2, [r3, #3]
 8010f98:	4b26      	ldr	r3, [pc, #152]	; (8011034 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8010f9a:	70da      	strb	r2, [r3, #3]
 8010f9c:	e002      	b.n	8010fa4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x6c>
	}
	else
	{
		ExtLights_DtcArray[3] = 0;
 8010f9e:	4b25      	ldr	r3, [pc, #148]	; (8011034 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	70da      	strb	r2, [r3, #3]
	}

	if(Dem_DtcArray[4] > 250)
 8010fa4:	4b22      	ldr	r3, [pc, #136]	; (8011030 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8010fa6:	791b      	ldrb	r3, [r3, #4]
 8010fa8:	2bfa      	cmp	r3, #250	; 0xfa
 8010faa:	d904      	bls.n	8010fb6 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x7e>
	{
		ExtLights_DtcArray[4] = Dem_DtcArray[4];
 8010fac:	4b20      	ldr	r3, [pc, #128]	; (8011030 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8010fae:	791a      	ldrb	r2, [r3, #4]
 8010fb0:	4b20      	ldr	r3, [pc, #128]	; (8011034 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8010fb2:	711a      	strb	r2, [r3, #4]
 8010fb4:	e002      	b.n	8010fbc <Rte_Read_Dem_DemPort_Dem_DtcArray+0x84>
	}
	else
	{
		ExtLights_DtcArray[4] = 0;
 8010fb6:	4b1f      	ldr	r3, [pc, #124]	; (8011034 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8010fb8:	2200      	movs	r2, #0
 8010fba:	711a      	strb	r2, [r3, #4]
	}
	if(Dem_DtcArray[5] > 250)
 8010fbc:	4b1c      	ldr	r3, [pc, #112]	; (8011030 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8010fbe:	795b      	ldrb	r3, [r3, #5]
 8010fc0:	2bfa      	cmp	r3, #250	; 0xfa
 8010fc2:	d904      	bls.n	8010fce <Rte_Read_Dem_DemPort_Dem_DtcArray+0x96>
	{
		ExtLights_DtcArray[5] = Dem_DtcArray[5];
 8010fc4:	4b1a      	ldr	r3, [pc, #104]	; (8011030 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8010fc6:	795a      	ldrb	r2, [r3, #5]
 8010fc8:	4b1a      	ldr	r3, [pc, #104]	; (8011034 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8010fca:	715a      	strb	r2, [r3, #5]
 8010fcc:	e002      	b.n	8010fd4 <Rte_Read_Dem_DemPort_Dem_DtcArray+0x9c>
	}
	else
	{
		ExtLights_DtcArray[5] = 0;
 8010fce:	4b19      	ldr	r3, [pc, #100]	; (8011034 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	715a      	strb	r2, [r3, #5]
	}
	if(Dem_DtcArray[6] > 250)
 8010fd4:	4b16      	ldr	r3, [pc, #88]	; (8011030 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8010fd6:	799b      	ldrb	r3, [r3, #6]
 8010fd8:	2bfa      	cmp	r3, #250	; 0xfa
 8010fda:	d904      	bls.n	8010fe6 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xae>
	{
		ExtLights_DtcArray[6] = Dem_DtcArray[6];
 8010fdc:	4b14      	ldr	r3, [pc, #80]	; (8011030 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8010fde:	799a      	ldrb	r2, [r3, #6]
 8010fe0:	4b14      	ldr	r3, [pc, #80]	; (8011034 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8010fe2:	719a      	strb	r2, [r3, #6]
 8010fe4:	e002      	b.n	8010fec <Rte_Read_Dem_DemPort_Dem_DtcArray+0xb4>
	}
	else
	{
		ExtLights_DtcArray[6] = 0;
 8010fe6:	4b13      	ldr	r3, [pc, #76]	; (8011034 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8010fe8:	2200      	movs	r2, #0
 8010fea:	719a      	strb	r2, [r3, #6]
	}
	if(Dem_DtcArray[7] > 250)
 8010fec:	4b10      	ldr	r3, [pc, #64]	; (8011030 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8010fee:	79db      	ldrb	r3, [r3, #7]
 8010ff0:	2bfa      	cmp	r3, #250	; 0xfa
 8010ff2:	d904      	bls.n	8010ffe <Rte_Read_Dem_DemPort_Dem_DtcArray+0xc6>
	{
		ExtLights_DtcArray[7] = Dem_DtcArray[7];
 8010ff4:	4b0e      	ldr	r3, [pc, #56]	; (8011030 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8010ff6:	79da      	ldrb	r2, [r3, #7]
 8010ff8:	4b0e      	ldr	r3, [pc, #56]	; (8011034 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8010ffa:	71da      	strb	r2, [r3, #7]
 8010ffc:	e002      	b.n	8011004 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xcc>
	}
	else
	{
		ExtLights_DtcArray[7] = 0;
 8010ffe:	4b0d      	ldr	r3, [pc, #52]	; (8011034 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011000:	2200      	movs	r2, #0
 8011002:	71da      	strb	r2, [r3, #7]
	{
		ExtLights_DtcArray[8] = Dem_DtcArray[8];
	}
	else
	{
		ExtLights_DtcArray[8] = 0;
 8011004:	4b0b      	ldr	r3, [pc, #44]	; (8011034 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011006:	2200      	movs	r2, #0
 8011008:	721a      	strb	r2, [r3, #8]
	}
	if(Dem_DtcArray[9] > 250)
 801100a:	4b09      	ldr	r3, [pc, #36]	; (8011030 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 801100c:	7a5b      	ldrb	r3, [r3, #9]
 801100e:	2bfa      	cmp	r3, #250	; 0xfa
 8011010:	d904      	bls.n	801101c <Rte_Read_Dem_DemPort_Dem_DtcArray+0xe4>
	{
		ExtLights_DtcArray[9] = Dem_DtcArray[9];
 8011012:	4b07      	ldr	r3, [pc, #28]	; (8011030 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xf8>)
 8011014:	7a5a      	ldrb	r2, [r3, #9]
 8011016:	4b07      	ldr	r3, [pc, #28]	; (8011034 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 8011018:	725a      	strb	r2, [r3, #9]
	}
	else
	{
		ExtLights_DtcArray[9] = 0;
	}
}
 801101a:	e002      	b.n	8011022 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xea>
		ExtLights_DtcArray[9] = 0;
 801101c:	4b05      	ldr	r3, [pc, #20]	; (8011034 <Rte_Read_Dem_DemPort_Dem_DtcArray+0xfc>)
 801101e:	2200      	movs	r2, #0
 8011020:	725a      	strb	r2, [r3, #9]
}
 8011022:	bf00      	nop
 8011024:	370c      	adds	r7, #12
 8011026:	46bd      	mov	sp, r7
 8011028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102c:	4770      	bx	lr
 801102e:	bf00      	nop
 8011030:	20000820 	.word	0x20000820
 8011034:	20000100 	.word	0x20000100

08011038 <Rte_Write_TimH_TimHPort_Tim3Ccr2>:
{
	TIM3->CCR1 = data;
}
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr2(uint8 data)
{
 8011038:	b480      	push	{r7}
 801103a:	b083      	sub	sp, #12
 801103c:	af00      	add	r7, sp, #0
 801103e:	4603      	mov	r3, r0
 8011040:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR2 = data;
 8011042:	4a04      	ldr	r2, [pc, #16]	; (8011054 <Rte_Write_TimH_TimHPort_Tim3Ccr2+0x1c>)
 8011044:	79fb      	ldrb	r3, [r7, #7]
 8011046:	6393      	str	r3, [r2, #56]	; 0x38
}
 8011048:	bf00      	nop
 801104a:	370c      	adds	r7, #12
 801104c:	46bd      	mov	sp, r7
 801104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011052:	4770      	bx	lr
 8011054:	40000400 	.word	0x40000400

08011058 <Rte_Write_TimH_TimHPort_Tim3Ccr3>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr3(uint8 data)
{
 8011058:	b480      	push	{r7}
 801105a:	b083      	sub	sp, #12
 801105c:	af00      	add	r7, sp, #0
 801105e:	4603      	mov	r3, r0
 8011060:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR3 = data;
 8011062:	4a04      	ldr	r2, [pc, #16]	; (8011074 <Rte_Write_TimH_TimHPort_Tim3Ccr3+0x1c>)
 8011064:	79fb      	ldrb	r3, [r7, #7]
 8011066:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8011068:	bf00      	nop
 801106a:	370c      	adds	r7, #12
 801106c:	46bd      	mov	sp, r7
 801106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011072:	4770      	bx	lr
 8011074:	40000400 	.word	0x40000400

08011078 <Rte_Write_TimH_TimHPort_Tim3Ccr4>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr4(uint8 data)
{
 8011078:	b480      	push	{r7}
 801107a:	b083      	sub	sp, #12
 801107c:	af00      	add	r7, sp, #0
 801107e:	4603      	mov	r3, r0
 8011080:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR4 = data;
 8011082:	4a04      	ldr	r2, [pc, #16]	; (8011094 <Rte_Write_TimH_TimHPort_Tim3Ccr4+0x1c>)
 8011084:	79fb      	ldrb	r3, [r7, #7]
 8011086:	6413      	str	r3, [r2, #64]	; 0x40
}
 8011088:	bf00      	nop
 801108a:	370c      	adds	r7, #12
 801108c:	46bd      	mov	sp, r7
 801108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011092:	4770      	bx	lr
 8011094:	40000400 	.word	0x40000400

08011098 <Rte_Write_TimH_TimHPort_Tim2Ccr1>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim2Ccr1(uint16 data)
{
 8011098:	b480      	push	{r7}
 801109a:	b083      	sub	sp, #12
 801109c:	af00      	add	r7, sp, #0
 801109e:	4603      	mov	r3, r0
 80110a0:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = data;
 80110a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80110a6:	88fb      	ldrh	r3, [r7, #6]
 80110a8:	6353      	str	r3, [r2, #52]	; 0x34
}
 80110aa:	bf00      	nop
 80110ac:	370c      	adds	r7, #12
 80110ae:	46bd      	mov	sp, r7
 80110b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b4:	4770      	bx	lr

080110b6 <Rte_Write_TimH_TimHPort_Tim2Ccr2>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim2Ccr2(uint16 data)
{
 80110b6:	b480      	push	{r7}
 80110b8:	b083      	sub	sp, #12
 80110ba:	af00      	add	r7, sp, #0
 80110bc:	4603      	mov	r3, r0
 80110be:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR2 = data;
 80110c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80110c4:	88fb      	ldrh	r3, [r7, #6]
 80110c6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80110c8:	bf00      	nop
 80110ca:	370c      	adds	r7, #12
 80110cc:	46bd      	mov	sp, r7
 80110ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d2:	4770      	bx	lr

080110d4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>:
{
	TIM2->CCR3 = data;
}
/* Run time environment interface. */
VOID Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(uint8* data, uint8 position)
{
 80110d4:	b480      	push	{r7}
 80110d6:	b083      	sub	sp, #12
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
 80110dc:	460b      	mov	r3, r1
 80110de:	70fb      	strb	r3, [r7, #3]
	*data = SystemManager_Fault[position];
 80110e0:	78fb      	ldrb	r3, [r7, #3]
 80110e2:	4a06      	ldr	r2, [pc, #24]	; (80110fc <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault+0x28>)
 80110e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110e8:	b2da      	uxtb	r2, r3
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	701a      	strb	r2, [r3, #0]
}
 80110ee:	bf00      	nop
 80110f0:	370c      	adds	r7, #12
 80110f2:	46bd      	mov	sp, r7
 80110f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f8:	4770      	bx	lr
 80110fa:	bf00      	nop
 80110fc:	200093ac 	.word	0x200093ac

08011100 <Rte_Write_Hvac_HvacPort_Hvac_FanValue>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_FanValue(uint8* data)
{
 8011100:	b480      	push	{r7}
 8011102:	b083      	sub	sp, #12
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
	Hvac_FanValue = *data - 30;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	3b1e      	subs	r3, #30
 801110e:	b2da      	uxtb	r2, r3
 8011110:	4b03      	ldr	r3, [pc, #12]	; (8011120 <Rte_Write_Hvac_HvacPort_Hvac_FanValue+0x20>)
 8011112:	701a      	strb	r2, [r3, #0]
}
 8011114:	bf00      	nop
 8011116:	370c      	adds	r7, #12
 8011118:	46bd      	mov	sp, r7
 801111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111e:	4770      	bx	lr
 8011120:	20000112 	.word	0x20000112

08011124 <Rte_Write_Hvac_HvacPort_Hvac_TemperatureValue>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_TemperatureValue(uint8* data)
{
 8011124:	b480      	push	{r7}
 8011126:	b083      	sub	sp, #12
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
	Hvac_TemperatureValue = *data - 22;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	781b      	ldrb	r3, [r3, #0]
 8011130:	3b16      	subs	r3, #22
 8011132:	b2da      	uxtb	r2, r3
 8011134:	4b03      	ldr	r3, [pc, #12]	; (8011144 <Rte_Write_Hvac_HvacPort_Hvac_TemperatureValue+0x20>)
 8011136:	701a      	strb	r2, [r3, #0]
}
 8011138:	bf00      	nop
 801113a:	370c      	adds	r7, #12
 801113c:	46bd      	mov	sp, r7
 801113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011142:	4770      	bx	lr
 8011144:	20000113 	.word	0x20000113

08011148 <Rte_Write_Hvac_HvacPort_Hvac_LegVent>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_LegVent(uint8* data)
{
 8011148:	b480      	push	{r7}
 801114a:	b083      	sub	sp, #12
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
	Hvac_LegVent = *data;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	781a      	ldrb	r2, [r3, #0]
 8011154:	4b03      	ldr	r3, [pc, #12]	; (8011164 <Rte_Write_Hvac_HvacPort_Hvac_LegVent+0x1c>)
 8011156:	701a      	strb	r2, [r3, #0]
}
 8011158:	bf00      	nop
 801115a:	370c      	adds	r7, #12
 801115c:	46bd      	mov	sp, r7
 801115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011162:	4770      	bx	lr
 8011164:	20000114 	.word	0x20000114

08011168 <Rte_Write_Hvac_HvacPort_Hvac_MidVent>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_MidVent(uint8* data)
{
 8011168:	b480      	push	{r7}
 801116a:	b083      	sub	sp, #12
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
	Hvac_MidVent = *data;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	781a      	ldrb	r2, [r3, #0]
 8011174:	4b03      	ldr	r3, [pc, #12]	; (8011184 <Rte_Write_Hvac_HvacPort_Hvac_MidVent+0x1c>)
 8011176:	701a      	strb	r2, [r3, #0]
}
 8011178:	bf00      	nop
 801117a:	370c      	adds	r7, #12
 801117c:	46bd      	mov	sp, r7
 801117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011182:	4770      	bx	lr
 8011184:	20000115 	.word	0x20000115

08011188 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent(uint8* data)
{
 8011188:	b480      	push	{r7}
 801118a:	b083      	sub	sp, #12
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
	Hvac_WindshieldVent = *data;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	781a      	ldrb	r2, [r3, #0]
 8011194:	4b03      	ldr	r3, [pc, #12]	; (80111a4 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldVent+0x1c>)
 8011196:	701a      	strb	r2, [r3, #0]
}
 8011198:	bf00      	nop
 801119a:	370c      	adds	r7, #12
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr
 80111a4:	20000116 	.word	0x20000116

080111a8 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost(uint8* data)
{
 80111a8:	b480      	push	{r7}
 80111aa:	b083      	sub	sp, #12
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
	Hvac_WindshieldDefrost = *data;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	781a      	ldrb	r2, [r3, #0]
 80111b4:	4b03      	ldr	r3, [pc, #12]	; (80111c4 <Rte_Write_Hvac_HvacPort_Hvac_WindshieldDefrost+0x1c>)
 80111b6:	701a      	strb	r2, [r3, #0]
}
 80111b8:	bf00      	nop
 80111ba:	370c      	adds	r7, #12
 80111bc:	46bd      	mov	sp, r7
 80111be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c2:	4770      	bx	lr
 80111c4:	20000117 	.word	0x20000117

080111c8 <Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost(uint8* data)
{
 80111c8:	b480      	push	{r7}
 80111ca:	b083      	sub	sp, #12
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
	Hvac_RearWindshieldDefrost = *data;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	781a      	ldrb	r2, [r3, #0]
 80111d4:	4b03      	ldr	r3, [pc, #12]	; (80111e4 <Rte_Write_Hvac_HvacPort_Hvac_RearWindshieldDefrost+0x1c>)
 80111d6:	701a      	strb	r2, [r3, #0]
}
 80111d8:	bf00      	nop
 80111da:	370c      	adds	r7, #12
 80111dc:	46bd      	mov	sp, r7
 80111de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e2:	4770      	bx	lr
 80111e4:	20000118 	.word	0x20000118

080111e8 <Rte_Write_Hvac_HvacPort_Hvac_Ac>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_Ac(uint8* data)
{
 80111e8:	b480      	push	{r7}
 80111ea:	b083      	sub	sp, #12
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
	Hvac_Ac = *data;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	781a      	ldrb	r2, [r3, #0]
 80111f4:	4b03      	ldr	r3, [pc, #12]	; (8011204 <Rte_Write_Hvac_HvacPort_Hvac_Ac+0x1c>)
 80111f6:	701a      	strb	r2, [r3, #0]
}
 80111f8:	bf00      	nop
 80111fa:	370c      	adds	r7, #12
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	4770      	bx	lr
 8011204:	20000119 	.word	0x20000119

08011208 <Rte_Write_Hvac_HvacPort_Hvac_Recirculation>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_Recirculation(uint8* data)
{
 8011208:	b480      	push	{r7}
 801120a:	b083      	sub	sp, #12
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
	Hvac_Recirculation = *data;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	781a      	ldrb	r2, [r3, #0]
 8011214:	4b03      	ldr	r3, [pc, #12]	; (8011224 <Rte_Write_Hvac_HvacPort_Hvac_Recirculation+0x1c>)
 8011216:	701a      	strb	r2, [r3, #0]
}
 8011218:	bf00      	nop
 801121a:	370c      	adds	r7, #12
 801121c:	46bd      	mov	sp, r7
 801121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011222:	4770      	bx	lr
 8011224:	2000011a 	.word	0x2000011a

08011228 <Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation(uint8* data)
{
 8011228:	b480      	push	{r7}
 801122a:	b083      	sub	sp, #12
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
	Hvac_NoRecirculation = *data;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	781a      	ldrb	r2, [r3, #0]
 8011234:	4b03      	ldr	r3, [pc, #12]	; (8011244 <Rte_Write_Hvac_HvacPort_Hvac_NoRecirculation+0x1c>)
 8011236:	701a      	strb	r2, [r3, #0]
}
 8011238:	bf00      	nop
 801123a:	370c      	adds	r7, #12
 801123c:	46bd      	mov	sp, r7
 801123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011242:	4770      	bx	lr
 8011244:	2000011b 	.word	0x2000011b

08011248 <Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode>:
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode(uint8* data)
{
 8011248:	b480      	push	{r7}
 801124a:	b083      	sub	sp, #12
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
	Hvac_AutomaticMode = *data;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	781a      	ldrb	r2, [r3, #0]
 8011254:	4b03      	ldr	r3, [pc, #12]	; (8011264 <Rte_Write_Hvac_HvacPort_Hvac_AutomaticMode+0x1c>)
 8011256:	701a      	strb	r2, [r3, #0]
}
 8011258:	bf00      	nop
 801125a:	370c      	adds	r7, #12
 801125c:	46bd      	mov	sp, r7
 801125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011262:	4770      	bx	lr
 8011264:	2000011c 	.word	0x2000011c

08011268 <Rte_Write_Hvac_HvacPort_Hvac_TsState>:
{
	 Hvac_AqsState = *data;
}
/* Run time environment interface. */
VOID Rte_Write_Hvac_HvacPort_Hvac_TsState(uint8* data)
{
 8011268:	b480      	push	{r7}
 801126a:	b083      	sub	sp, #12
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
	Hvac_TsState = *data;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	781a      	ldrb	r2, [r3, #0]
 8011274:	4b03      	ldr	r3, [pc, #12]	; (8011284 <Rte_Write_Hvac_HvacPort_Hvac_TsState+0x1c>)
 8011276:	701a      	strb	r2, [r3, #0]
}
 8011278:	bf00      	nop
 801127a:	370c      	adds	r7, #12
 801127c:	46bd      	mov	sp, r7
 801127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011282:	4770      	bx	lr
 8011284:	20000110 	.word	0x20000110

08011288 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue>:
{
	*data = DiagCtrl_FaultValue;
}
/* Run time environment interface. */
VOID Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue(uint8 data)
{
 8011288:	b480      	push	{r7}
 801128a:	b083      	sub	sp, #12
 801128c:	af00      	add	r7, sp, #0
 801128e:	4603      	mov	r3, r0
 8011290:	71fb      	strb	r3, [r7, #7]
	DiagCtrl_FaultValue = data;
 8011292:	4a04      	ldr	r2, [pc, #16]	; (80112a4 <Rte_Write_DiagCtrl_DiagCtrlPort_DiagCtrl_FaultValue+0x1c>)
 8011294:	79fb      	ldrb	r3, [r7, #7]
 8011296:	7013      	strb	r3, [r2, #0]
}
 8011298:	bf00      	nop
 801129a:	370c      	adds	r7, #12
 801129c:	46bd      	mov	sp, r7
 801129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a2:	4770      	bx	lr
 80112a4:	200000b8 	.word	0x200000b8

080112a8 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>:
{
	*data = SecAlm_SensorState;
}
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(uint32* data)
{
 80112a8:	b480      	push	{r7}
 80112aa:	b083      	sub	sp, #12
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
	SecAlm_SensorState = *data;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	b2da      	uxtb	r2, r3
 80112b6:	4b04      	ldr	r3, [pc, #16]	; (80112c8 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState+0x20>)
 80112b8:	701a      	strb	r2, [r3, #0]
}
 80112ba:	bf00      	nop
 80112bc:	370c      	adds	r7, #12
 80112be:	46bd      	mov	sp, r7
 80112c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c4:	4770      	bx	lr
 80112c6:	bf00      	nop
 80112c8:	2000013c 	.word	0x2000013c

080112cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>:
{
	*data = ExtLights_LightSensorState;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(uint32* data)
{
 80112cc:	b480      	push	{r7}
 80112ce:	b083      	sub	sp, #12
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
	ExtLights_LightSensorState = *data;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	4a03      	ldr	r2, [pc, #12]	; (80112e8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState+0x1c>)
 80112da:	6013      	str	r3, [r2, #0]
}
 80112dc:	bf00      	nop
 80112de:	370c      	adds	r7, #12
 80112e0:	46bd      	mov	sp, r7
 80112e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e6:	4770      	bx	lr
 80112e8:	200000f8 	.word	0x200000f8

080112ec <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues>:
	Adc_ChannelOne_Buffer[14] = SenCtrl_MeasuredValues[14];
	Adc_ChannelOne_Buffer[15] = SenCtrl_MeasuredValues[15];
}
/* Run time environment interface. */
VOID Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues(uint32* data)
{
 80112ec:	b480      	push	{r7}
 80112ee:	b083      	sub	sp, #12
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
	SenCtrl_MeasuredValues[0] = Adc_ChannelOne_Buffer[0];
 80112f4:	4b1a      	ldr	r3, [pc, #104]	; (8011360 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	4a1a      	ldr	r2, [pc, #104]	; (8011364 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 80112fa:	6013      	str	r3, [r2, #0]
	SenCtrl_MeasuredValues[2] = Adc_ChannelOne_Buffer[2];
 80112fc:	4b18      	ldr	r3, [pc, #96]	; (8011360 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 80112fe:	689b      	ldr	r3, [r3, #8]
 8011300:	4a18      	ldr	r2, [pc, #96]	; (8011364 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8011302:	6093      	str	r3, [r2, #8]
	SenCtrl_MeasuredValues[3] = Adc_ChannelOne_Buffer[3];
 8011304:	4b16      	ldr	r3, [pc, #88]	; (8011360 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8011306:	68db      	ldr	r3, [r3, #12]
 8011308:	4a16      	ldr	r2, [pc, #88]	; (8011364 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 801130a:	60d3      	str	r3, [r2, #12]
	SenCtrl_MeasuredValues[4] = Adc_ChannelOne_Buffer[4];
 801130c:	4b14      	ldr	r3, [pc, #80]	; (8011360 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 801130e:	691b      	ldr	r3, [r3, #16]
 8011310:	4a14      	ldr	r2, [pc, #80]	; (8011364 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8011312:	6113      	str	r3, [r2, #16]
	SenCtrl_MeasuredValues[5] = Adc_ChannelOne_Buffer[5];
 8011314:	4b12      	ldr	r3, [pc, #72]	; (8011360 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8011316:	695b      	ldr	r3, [r3, #20]
 8011318:	4a12      	ldr	r2, [pc, #72]	; (8011364 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 801131a:	6153      	str	r3, [r2, #20]
	SenCtrl_MeasuredValues[6] = Adc_ChannelOne_Buffer[6];
 801131c:	4b10      	ldr	r3, [pc, #64]	; (8011360 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 801131e:	699b      	ldr	r3, [r3, #24]
 8011320:	4a10      	ldr	r2, [pc, #64]	; (8011364 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8011322:	6193      	str	r3, [r2, #24]
	SenCtrl_MeasuredValues[7] = Adc_ChannelOne_Buffer[7];
 8011324:	4b0e      	ldr	r3, [pc, #56]	; (8011360 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8011326:	69db      	ldr	r3, [r3, #28]
 8011328:	4a0e      	ldr	r2, [pc, #56]	; (8011364 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 801132a:	61d3      	str	r3, [r2, #28]
	SenCtrl_MeasuredValues[8] = Adc_ChannelOne_Buffer[8];
 801132c:	4b0c      	ldr	r3, [pc, #48]	; (8011360 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 801132e:	6a1b      	ldr	r3, [r3, #32]
 8011330:	4a0c      	ldr	r2, [pc, #48]	; (8011364 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8011332:	6213      	str	r3, [r2, #32]
	SenCtrl_MeasuredValues[9] = Adc_ChannelOne_Buffer[9];
 8011334:	4b0a      	ldr	r3, [pc, #40]	; (8011360 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8011336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011338:	4a0a      	ldr	r2, [pc, #40]	; (8011364 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 801133a:	6253      	str	r3, [r2, #36]	; 0x24
	SenCtrl_MeasuredValues[10] = Adc_ChannelOne_Buffer[10];
 801133c:	4b08      	ldr	r3, [pc, #32]	; (8011360 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 801133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011340:	4a08      	ldr	r2, [pc, #32]	; (8011364 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8011342:	6293      	str	r3, [r2, #40]	; 0x28
	SenCtrl_MeasuredValues[11] = Adc_ChannelOne_Buffer[11];
 8011344:	4b06      	ldr	r3, [pc, #24]	; (8011360 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 8011346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011348:	4a06      	ldr	r2, [pc, #24]	; (8011364 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 801134a:	62d3      	str	r3, [r2, #44]	; 0x2c
	SenCtrl_MeasuredValues[13] = Adc_ChannelOne_Buffer[13];
 801134c:	4b04      	ldr	r3, [pc, #16]	; (8011360 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x74>)
 801134e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011350:	4a04      	ldr	r2, [pc, #16]	; (8011364 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x78>)
 8011352:	6353      	str	r3, [r2, #52]	; 0x34
}
 8011354:	bf00      	nop
 8011356:	370c      	adds	r7, #12
 8011358:	46bd      	mov	sp, r7
 801135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135e:	4770      	bx	lr
 8011360:	2000087c 	.word	0x2000087c
 8011364:	20000140 	.word	0x20000140

08011368 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>:
{
	*data = CenLoc_FollowMeHomeCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter(uint8* data)
{
 8011368:	b480      	push	{r7}
 801136a:	b083      	sub	sp, #12
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
	CenLoc_FollowMeHomeCounter = *data;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	781a      	ldrb	r2, [r3, #0]
 8011374:	4b03      	ldr	r3, [pc, #12]	; (8011384 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter+0x1c>)
 8011376:	701a      	strb	r2, [r3, #0]
}
 8011378:	bf00      	nop
 801137a:	370c      	adds	r7, #12
 801137c:	46bd      	mov	sp, r7
 801137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011382:	4770      	bx	lr
 8011384:	200000b4 	.word	0x200000b4

08011388 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter>:
{
	*data = CenLoc_TurnOnLedCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter(uint8* data)
{
 8011388:	b480      	push	{r7}
 801138a:	b083      	sub	sp, #12
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
	CenLoc_TurnOnLedCounter = *data;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	781a      	ldrb	r2, [r3, #0]
 8011394:	4b03      	ldr	r3, [pc, #12]	; (80113a4 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter+0x1c>)
 8011396:	701a      	strb	r2, [r3, #0]
}
 8011398:	bf00      	nop
 801139a:	370c      	adds	r7, #12
 801139c:	46bd      	mov	sp, r7
 801139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a2:	4770      	bx	lr
 80113a4:	200000b5 	.word	0x200000b5

080113a8 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter>:
{
	*data = CenLoc_CyclicAlarmCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter(uint8* data)
{
 80113a8:	b480      	push	{r7}
 80113aa:	b083      	sub	sp, #12
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
	CenLoc_CyclicAlarmCounter = *data;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	781a      	ldrb	r2, [r3, #0]
 80113b4:	4b03      	ldr	r3, [pc, #12]	; (80113c4 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter+0x1c>)
 80113b6:	701a      	strb	r2, [r3, #0]
}
 80113b8:	bf00      	nop
 80113ba:	370c      	adds	r7, #12
 80113bc:	46bd      	mov	sp, r7
 80113be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c2:	4770      	bx	lr
 80113c4:	200000b3 	.word	0x200000b3

080113c8 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>:
{
	*data = CenLoc_BlinkCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(uint8* data)
{
 80113c8:	b480      	push	{r7}
 80113ca:	b083      	sub	sp, #12
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
	CenLoc_BlinkCounter = *data;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	781a      	ldrb	r2, [r3, #0]
 80113d4:	4b03      	ldr	r3, [pc, #12]	; (80113e4 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter+0x1c>)
 80113d6:	701a      	strb	r2, [r3, #0]
}
 80113d8:	bf00      	nop
 80113da:	370c      	adds	r7, #12
 80113dc:	46bd      	mov	sp, r7
 80113de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e2:	4770      	bx	lr
 80113e4:	200000b2 	.word	0x200000b2

080113e8 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>:
{
	*data = Os_Alarm_Counter;
}
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(uint8* data)
{
 80113e8:	b480      	push	{r7}
 80113ea:	b083      	sub	sp, #12
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
	Os_LockUnlockSequence_Counter = *data;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	781a      	ldrb	r2, [r3, #0]
 80113f4:	4b03      	ldr	r3, [pc, #12]	; (8011404 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter+0x1c>)
 80113f6:	701a      	strb	r2, [r3, #0]
}
 80113f8:	bf00      	nop
 80113fa:	370c      	adds	r7, #12
 80113fc:	46bd      	mov	sp, r7
 80113fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011402:	4770      	bx	lr
 8011404:	2000026c 	.word	0x2000026c

08011408 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(uint8* data)
{
 8011408:	b480      	push	{r7}
 801140a:	b083      	sub	sp, #12
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
	Os_TurnOnCyclic_Counter = *data;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	781a      	ldrb	r2, [r3, #0]
 8011414:	4b03      	ldr	r3, [pc, #12]	; (8011424 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter+0x1c>)
 8011416:	701a      	strb	r2, [r3, #0]
}
 8011418:	bf00      	nop
 801141a:	370c      	adds	r7, #12
 801141c:	46bd      	mov	sp, r7
 801141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011422:	4770      	bx	lr
 8011424:	2000026d 	.word	0x2000026d

08011428 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(uint8* data)
{
 8011428:	b480      	push	{r7}
 801142a:	b083      	sub	sp, #12
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
	Os_TurnOnLed_Counter = *data;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	781a      	ldrb	r2, [r3, #0]
 8011434:	4b03      	ldr	r3, [pc, #12]	; (8011444 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter+0x1c>)
 8011436:	701a      	strb	r2, [r3, #0]
}
 8011438:	bf00      	nop
 801143a:	370c      	adds	r7, #12
 801143c:	46bd      	mov	sp, r7
 801143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011442:	4770      	bx	lr
 8011444:	2000026e 	.word	0x2000026e

08011448 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(uint8* data)
{
 8011448:	b480      	push	{r7}
 801144a:	b083      	sub	sp, #12
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
	Os_FollowMeHome_Counter = *data;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	781a      	ldrb	r2, [r3, #0]
 8011454:	4b03      	ldr	r3, [pc, #12]	; (8011464 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter+0x1c>)
 8011456:	701a      	strb	r2, [r3, #0]
}
 8011458:	bf00      	nop
 801145a:	370c      	adds	r7, #12
 801145c:	46bd      	mov	sp, r7
 801145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011462:	4770      	bx	lr
 8011464:	2000026f 	.word	0x2000026f

08011468 <Rte_Write_Os_R_OsPort_Os_Lts_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Lts_Counter(uint32* data)
{
 8011468:	b480      	push	{r7}
 801146a:	b083      	sub	sp, #12
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
	Os_Lts_Counter = *data;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	4a03      	ldr	r2, [pc, #12]	; (8011484 <Rte_Write_Os_R_OsPort_Os_Lts_Counter+0x1c>)
 8011476:	6013      	str	r3, [r2, #0]
}
 8011478:	bf00      	nop
 801147a:	370c      	adds	r7, #12
 801147c:	46bd      	mov	sp, r7
 801147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011482:	4770      	bx	lr
 8011484:	20000270 	.word	0x20000270

08011488 <Rte_Write_Os_R_OsPort_Os_Rts_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Rts_Counter(uint32* data)
{
 8011488:	b480      	push	{r7}
 801148a:	b083      	sub	sp, #12
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
	Os_Rts_Counter = *data;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	4a03      	ldr	r2, [pc, #12]	; (80114a4 <Rte_Write_Os_R_OsPort_Os_Rts_Counter+0x1c>)
 8011496:	6013      	str	r3, [r2, #0]
}
 8011498:	bf00      	nop
 801149a:	370c      	adds	r7, #12
 801149c:	46bd      	mov	sp, r7
 801149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a2:	4770      	bx	lr
 80114a4:	20000274 	.word	0x20000274

080114a8 <Rte_Write_Os_R_OsPort_Os_HL_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_HL_Counter(uint32* data)
{
 80114a8:	b480      	push	{r7}
 80114aa:	b083      	sub	sp, #12
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
	Os_HL_Counter = *data;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	4a03      	ldr	r2, [pc, #12]	; (80114c4 <Rte_Write_Os_R_OsPort_Os_HL_Counter+0x1c>)
 80114b6:	6013      	str	r3, [r2, #0]
}
 80114b8:	bf00      	nop
 80114ba:	370c      	adds	r7, #12
 80114bc:	46bd      	mov	sp, r7
 80114be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c2:	4770      	bx	lr
 80114c4:	20000278 	.word	0x20000278

080114c8 <Rte_Write_Os_R_OsPort_Os_Alarm_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Alarm_Counter(uint8* data)
{
 80114c8:	b480      	push	{r7}
 80114ca:	b083      	sub	sp, #12
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
	Os_Alarm_Counter = *data;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	781a      	ldrb	r2, [r3, #0]
 80114d4:	4b03      	ldr	r3, [pc, #12]	; (80114e4 <Rte_Write_Os_R_OsPort_Os_Alarm_Counter+0x1c>)
 80114d6:	701a      	strb	r2, [r3, #0]
}
 80114d8:	bf00      	nop
 80114da:	370c      	adds	r7, #12
 80114dc:	46bd      	mov	sp, r7
 80114de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e2:	4770      	bx	lr
 80114e4:	2000027c 	.word	0x2000027c

080114e8 <Rte_Runnable_EcuM_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_EcuM_MainFunction()
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	af00      	add	r7, sp, #0
	EcuM_MainFunction();
 80114ec:	f001 f8e6 	bl	80126bc <EcuM_MainFunction>
}
 80114f0:	bf00      	nop
 80114f2:	bd80      	pop	{r7, pc}

080114f4 <Rte_Runnable_SystemManager_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_SystemManager_MainFunction()
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	af00      	add	r7, sp, #0
	SystemManager_MainFunction();
 80114f8:	f001 f9f0 	bl	80128dc <SystemManager_MainFunction>
}
 80114fc:	bf00      	nop
 80114fe:	bd80      	pop	{r7, pc}

08011500 <Rte_Runnable_Crc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Crc_MainFunction()
{
 8011500:	b580      	push	{r7, lr}
 8011502:	af00      	add	r7, sp, #0
	Crc_MainFunction();
 8011504:	f000 ff3c 	bl	8012380 <Crc_MainFunction>
}
 8011508:	bf00      	nop
 801150a:	bd80      	pop	{r7, pc}

0801150c <Rte_Runnable_Wdg_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Wdg_MainFunction()
{
 801150c:	b580      	push	{r7, lr}
 801150e:	af00      	add	r7, sp, #0
	Watchdog_MainFunction();
 8011510:	f001 fb20 	bl	8012b54 <Watchdog_MainFunction>
}
 8011514:	bf00      	nop
 8011516:	bd80      	pop	{r7, pc}

08011518 <Rte_Runnable_Adc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Adc_MainFunction()
{
 8011518:	b580      	push	{r7, lr}
 801151a:	af00      	add	r7, sp, #0
	Adc_MainFunction();
 801151c:	f7fb fc74 	bl	800ce08 <Adc_MainFunction>
}
 8011520:	bf00      	nop
 8011522:	bd80      	pop	{r7, pc}

08011524 <Rte_Runnable_Tim_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Tim_MainFunction()
{
 8011524:	b580      	push	{r7, lr}
 8011526:	af00      	add	r7, sp, #0
	Tim_MainFunction();
 8011528:	f7fc fb82 	bl	800dc30 <Tim_MainFunction>
}
 801152c:	bf00      	nop
 801152e:	bd80      	pop	{r7, pc}

08011530 <Rte_Runnable_Uart_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Uart_MainFunction()
{
 8011530:	b580      	push	{r7, lr}
 8011532:	af00      	add	r7, sp, #0
	Uart_MainFunction();
 8011534:	f7f2 fa18 	bl	8003968 <Uart_MainFunction>
}
 8011538:	bf00      	nop
 801153a:	bd80      	pop	{r7, pc}

0801153c <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>:
/* Run time environment interface. */
VOID Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32 Channel)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b082      	sub	sp, #8
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
 8011544:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start_IT(htim, Channel);
 8011546:	6839      	ldr	r1, [r7, #0]
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f7f8 ffcb 	bl	800a4e4 <HAL_TIM_PWM_Start_IT>
}
 801154e:	bf00      	nop
 8011550:	3708      	adds	r7, #8
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}

08011556 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>:
/* Run time environment interface. */
VOID Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32 Channel)
{
 8011556:	b580      	push	{r7, lr}
 8011558:	b082      	sub	sp, #8
 801155a:	af00      	add	r7, sp, #0
 801155c:	6078      	str	r0, [r7, #4]
 801155e:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Stop_IT(htim, Channel);
 8011560:	6839      	ldr	r1, [r7, #0]
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f7f9 f8bc 	bl	800a6e0 <HAL_TIM_PWM_Stop_IT>
}
 8011568:	bf00      	nop
 801156a:	3708      	adds	r7, #8
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}

08011570 <Rte_Write_Btc_BtcPort_Btc_RxData>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_RxData(uint8* data)
{
 8011570:	b480      	push	{r7}
 8011572:	b083      	sub	sp, #12
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
	Btc_RxData = *data;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	781a      	ldrb	r2, [r3, #0]
 801157c:	4b03      	ldr	r3, [pc, #12]	; (801158c <Rte_Write_Btc_BtcPort_Btc_RxData+0x1c>)
 801157e:	701a      	strb	r2, [r3, #0]
}
 8011580:	bf00      	nop
 8011582:	370c      	adds	r7, #12
 8011584:	46bd      	mov	sp, r7
 8011586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158a:	4770      	bx	lr
 801158c:	20000094 	.word	0x20000094

08011590 <Rte_Write_Btc_BtcPort_Btc_RxCount>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_RxCount(uint8* data)
{
 8011590:	b480      	push	{r7}
 8011592:	b083      	sub	sp, #12
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
	Btc_RxCount = *data;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	781a      	ldrb	r2, [r3, #0]
 801159c:	4b03      	ldr	r3, [pc, #12]	; (80115ac <Rte_Write_Btc_BtcPort_Btc_RxCount+0x1c>)
 801159e:	701a      	strb	r2, [r3, #0]
}
 80115a0:	bf00      	nop
 80115a2:	370c      	adds	r7, #12
 80115a4:	46bd      	mov	sp, r7
 80115a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115aa:	4770      	bx	lr
 80115ac:	20000095 	.word	0x20000095

080115b0 <Rte_Write_Btc_BtcPort_Btc_DataBuffer>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_DataBuffer(uint8* data, uint8 position)
{
 80115b0:	b480      	push	{r7}
 80115b2:	b083      	sub	sp, #12
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
 80115b8:	460b      	mov	r3, r1
 80115ba:	70fb      	strb	r3, [r7, #3]
	Btc_DataBuffer[position] = *data;
 80115bc:	78fb      	ldrb	r3, [r7, #3]
 80115be:	687a      	ldr	r2, [r7, #4]
 80115c0:	7811      	ldrb	r1, [r2, #0]
 80115c2:	4a04      	ldr	r2, [pc, #16]	; (80115d4 <Rte_Write_Btc_BtcPort_Btc_DataBuffer+0x24>)
 80115c4:	54d1      	strb	r1, [r2, r3]
}
 80115c6:	bf00      	nop
 80115c8:	370c      	adds	r7, #12
 80115ca:	46bd      	mov	sp, r7
 80115cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d0:	4770      	bx	lr
 80115d2:	bf00      	nop
 80115d4:	20000090 	.word	0x20000090

080115d8 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>:
/* Run time environment interface. */
VOID Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(uint32* data, uint8 position)
{
 80115d8:	b480      	push	{r7}
 80115da:	b083      	sub	sp, #12
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
 80115e0:	460b      	mov	r3, r1
 80115e2:	70fb      	strb	r3, [r7, #3]
	*data = Adc_ChannelOne_Buffer[position];
 80115e4:	78fb      	ldrb	r3, [r7, #3]
 80115e6:	4a05      	ldr	r2, [pc, #20]	; (80115fc <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer+0x24>)
 80115e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	601a      	str	r2, [r3, #0]
}
 80115f0:	bf00      	nop
 80115f2:	370c      	adds	r7, #12
 80115f4:	46bd      	mov	sp, r7
 80115f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fa:	4770      	bx	lr
 80115fc:	2000087c 	.word	0x2000087c

08011600 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 8011600:	b480      	push	{r7}
 8011602:	b083      	sub	sp, #12
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
	Btc_ReceivedDataOnBluetooth = *data;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	781a      	ldrb	r2, [r3, #0]
 801160c:	4b03      	ldr	r3, [pc, #12]	; (801161c <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>)
 801160e:	701a      	strb	r2, [r3, #0]
}
 8011610:	bf00      	nop
 8011612:	370c      	adds	r7, #12
 8011614:	46bd      	mov	sp, r7
 8011616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161a:	4770      	bx	lr
 801161c:	20000096 	.word	0x20000096

08011620 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(uint8* data)
{
 8011620:	b480      	push	{r7}
 8011622:	b083      	sub	sp, #12
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
	CenLoc_CurrentState = *data;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	781a      	ldrb	r2, [r3, #0]
 801162c:	4b03      	ldr	r3, [pc, #12]	; (801163c <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState+0x1c>)
 801162e:	701a      	strb	r2, [r3, #0]
}
 8011630:	bf00      	nop
 8011632:	370c      	adds	r7, #12
 8011634:	46bd      	mov	sp, r7
 8011636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163a:	4770      	bx	lr
 801163c:	200000ae 	.word	0x200000ae

08011640 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>:
{
	CenLoc_PreviousState = *data;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(uint8* data)
{
 8011640:	b480      	push	{r7}
 8011642:	b083      	sub	sp, #12
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
	CenLoc_FollowMeHomeState = *data;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	781a      	ldrb	r2, [r3, #0]
 801164c:	4b03      	ldr	r3, [pc, #12]	; (801165c <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState+0x1c>)
 801164e:	701a      	strb	r2, [r3, #0]
}
 8011650:	bf00      	nop
 8011652:	370c      	adds	r7, #12
 8011654:	46bd      	mov	sp, r7
 8011656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165a:	4770      	bx	lr
 801165c:	200000b0 	.word	0x200000b0

08011660 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>:
{
	CenLoc_PreviousStateFlag = *data;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(uint8* data)
{
 8011660:	b480      	push	{r7}
 8011662:	b083      	sub	sp, #12
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
	ExtLights_ReverseLight_CurrentState = *data;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	781a      	ldrb	r2, [r3, #0]
 801166c:	4b03      	ldr	r3, [pc, #12]	; (801167c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState+0x1c>)
 801166e:	701a      	strb	r2, [r3, #0]
}
 8011670:	bf00      	nop
 8011672:	370c      	adds	r7, #12
 8011674:	46bd      	mov	sp, r7
 8011676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167a:	4770      	bx	lr
 801167c:	200000dc 	.word	0x200000dc

08011680 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(uint8* data)
{
 8011680:	b480      	push	{r7}
 8011682:	b083      	sub	sp, #12
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
	ExtLights_BrakeLight_CurrentState = *data;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	781a      	ldrb	r2, [r3, #0]
 801168c:	4b03      	ldr	r3, [pc, #12]	; (801169c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState+0x1c>)
 801168e:	701a      	strb	r2, [r3, #0]
}
 8011690:	bf00      	nop
 8011692:	370c      	adds	r7, #12
 8011694:	46bd      	mov	sp, r7
 8011696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169a:	4770      	bx	lr
 801169c:	200000de 	.word	0x200000de

080116a0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(uint8* data)
{
 80116a0:	b480      	push	{r7}
 80116a2:	b083      	sub	sp, #12
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	6078      	str	r0, [r7, #4]
	ExtLights_LightsSwitch_CurrentState = *data;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	781a      	ldrb	r2, [r3, #0]
 80116ac:	4b03      	ldr	r3, [pc, #12]	; (80116bc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState+0x1c>)
 80116ae:	701a      	strb	r2, [r3, #0]
}
 80116b0:	bf00      	nop
 80116b2:	370c      	adds	r7, #12
 80116b4:	46bd      	mov	sp, r7
 80116b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ba:	4770      	bx	lr
 80116bc:	200000df 	.word	0x200000df

080116c0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(uint8* data)
{
 80116c0:	b480      	push	{r7}
 80116c2:	b083      	sub	sp, #12
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
	ExtLights_HighBeam_CurrentState = *data;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	781a      	ldrb	r2, [r3, #0]
 80116cc:	4b03      	ldr	r3, [pc, #12]	; (80116dc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState+0x1c>)
 80116ce:	701a      	strb	r2, [r3, #0]
}
 80116d0:	bf00      	nop
 80116d2:	370c      	adds	r7, #12
 80116d4:	46bd      	mov	sp, r7
 80116d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116da:	4770      	bx	lr
 80116dc:	200000e0 	.word	0x200000e0

080116e0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(uint8* data)
{
 80116e0:	b480      	push	{r7}
 80116e2:	b083      	sub	sp, #12
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
	ExtLights_FrontFogLight_CurrentState = *data;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	781a      	ldrb	r2, [r3, #0]
 80116ec:	4b03      	ldr	r3, [pc, #12]	; (80116fc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState+0x1c>)
 80116ee:	701a      	strb	r2, [r3, #0]
}
 80116f0:	bf00      	nop
 80116f2:	370c      	adds	r7, #12
 80116f4:	46bd      	mov	sp, r7
 80116f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fa:	4770      	bx	lr
 80116fc:	200000e1 	.word	0x200000e1

08011700 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(uint8* data)
{
 8011700:	b480      	push	{r7}
 8011702:	b083      	sub	sp, #12
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
	ExtLights_TurnSignalLeft_CurrentState = *data;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	781a      	ldrb	r2, [r3, #0]
 801170c:	4b03      	ldr	r3, [pc, #12]	; (801171c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState+0x1c>)
 801170e:	701a      	strb	r2, [r3, #0]
}
 8011710:	bf00      	nop
 8011712:	370c      	adds	r7, #12
 8011714:	46bd      	mov	sp, r7
 8011716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171a:	4770      	bx	lr
 801171c:	200000e2 	.word	0x200000e2

08011720 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(uint8* data)
{
 8011720:	b480      	push	{r7}
 8011722:	b083      	sub	sp, #12
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
	ExtLights_TurnSignalRight_CurrentState = *data;
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	781a      	ldrb	r2, [r3, #0]
 801172c:	4b03      	ldr	r3, [pc, #12]	; (801173c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState+0x1c>)
 801172e:	701a      	strb	r2, [r3, #0]
}
 8011730:	bf00      	nop
 8011732:	370c      	adds	r7, #12
 8011734:	46bd      	mov	sp, r7
 8011736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173a:	4770      	bx	lr
 801173c:	200000e3 	.word	0x200000e3

08011740 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(uint8* data)
{
 8011740:	b480      	push	{r7}
 8011742:	b083      	sub	sp, #12
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
	ExtLights_HazardLight_CurrentState = *data;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	781a      	ldrb	r2, [r3, #0]
 801174c:	4b03      	ldr	r3, [pc, #12]	; (801175c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState+0x1c>)
 801174e:	701a      	strb	r2, [r3, #0]
}
 8011750:	bf00      	nop
 8011752:	370c      	adds	r7, #12
 8011754:	46bd      	mov	sp, r7
 8011756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175a:	4770      	bx	lr
 801175c:	200000e6 	.word	0x200000e6

08011760 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(uint8* data)
{
 8011760:	b480      	push	{r7}
 8011762:	b083      	sub	sp, #12
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
	ExtLights_RearFogLight_CurrentState = *data;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	781a      	ldrb	r2, [r3, #0]
 801176c:	4b03      	ldr	r3, [pc, #12]	; (801177c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState+0x1c>)
 801176e:	701a      	strb	r2, [r3, #0]
}
 8011770:	bf00      	nop
 8011772:	370c      	adds	r7, #12
 8011774:	46bd      	mov	sp, r7
 8011776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177a:	4770      	bx	lr
 801177c:	200000e7 	.word	0x200000e7

08011780 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>:
{
	ExtLights_HL_PrevState = *data;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(uint32* data)
{
 8011780:	b480      	push	{r7}
 8011782:	b083      	sub	sp, #12
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
	ExtLights_RTSFlag = *data;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	4a03      	ldr	r2, [pc, #12]	; (801179c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag+0x1c>)
 801178e:	6013      	str	r3, [r2, #0]
}
 8011790:	bf00      	nop
 8011792:	370c      	adds	r7, #12
 8011794:	46bd      	mov	sp, r7
 8011796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179a:	4770      	bx	lr
 801179c:	200000ec 	.word	0x200000ec

080117a0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(uint32* data)
{
 80117a0:	b480      	push	{r7}
 80117a2:	b083      	sub	sp, #12
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
	ExtLights_LTSFlag = *data;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	4a03      	ldr	r2, [pc, #12]	; (80117bc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag+0x1c>)
 80117ae:	6013      	str	r3, [r2, #0]
}
 80117b0:	bf00      	nop
 80117b2:	370c      	adds	r7, #12
 80117b4:	46bd      	mov	sp, r7
 80117b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ba:	4770      	bx	lr
 80117bc:	200000f0 	.word	0x200000f0

080117c0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(uint32* data)
{
 80117c0:	b480      	push	{r7}
 80117c2:	b083      	sub	sp, #12
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
	ExtLights_HLFlag = *data;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	4a03      	ldr	r2, [pc, #12]	; (80117dc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag+0x1c>)
 80117ce:	6013      	str	r3, [r2, #0]
}
 80117d0:	bf00      	nop
 80117d2:	370c      	adds	r7, #12
 80117d4:	46bd      	mov	sp, r7
 80117d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117da:	4770      	bx	lr
 80117dc:	200000f4 	.word	0x200000f4

080117e0 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(uint8* data)
{
 80117e0:	b480      	push	{r7}
 80117e2:	b083      	sub	sp, #12
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
	IntLights_CurrentState = *data;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	781a      	ldrb	r2, [r3, #0]
 80117ec:	4b03      	ldr	r3, [pc, #12]	; (80117fc <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState+0x1c>)
 80117ee:	701a      	strb	r2, [r3, #0]
}
 80117f0:	bf00      	nop
 80117f2:	370c      	adds	r7, #12
 80117f4:	46bd      	mov	sp, r7
 80117f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fa:	4770      	bx	lr
 80117fc:	20000129 	.word	0x20000129

08011800 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>:
{
	SecAlm_PinStateChange = *data;
}
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(uint8* data)
{
 8011800:	b480      	push	{r7}
 8011802:	b083      	sub	sp, #12
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
	SecAlm_TriggerIRQCounterForTimer4 = *data;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	781a      	ldrb	r2, [r3, #0]
 801180c:	4b03      	ldr	r3, [pc, #12]	; (801181c <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4+0x1c>)
 801180e:	701a      	strb	r2, [r3, #0]
}
 8011810:	bf00      	nop
 8011812:	370c      	adds	r7, #12
 8011814:	46bd      	mov	sp, r7
 8011816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181a:	4770      	bx	lr
 801181c:	20000136 	.word	0x20000136

08011820 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>:
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter(uint16* data)
{
 8011820:	b480      	push	{r7}
 8011822:	b083      	sub	sp, #12
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
	SecAlm_SensorStatusCounter = *data;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	881a      	ldrh	r2, [r3, #0]
 801182c:	4b03      	ldr	r3, [pc, #12]	; (801183c <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter+0x1c>)
 801182e:	801a      	strh	r2, [r3, #0]
}
 8011830:	bf00      	nop
 8011832:	370c      	adds	r7, #12
 8011834:	46bd      	mov	sp, r7
 8011836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183a:	4770      	bx	lr
 801183c:	20000138 	.word	0x20000138

08011840 <Rte_Runnable_Btc_MainFunction>:
{
	SecAlm_SensorStatus = *data;
}
/* Run time environment interface. */
VOID Rte_Runnable_Btc_MainFunction()
{
 8011840:	b580      	push	{r7, lr}
 8011842:	af00      	add	r7, sp, #0
	Btc_MainFunction();
 8011844:	f7ef fdde 	bl	8001404 <Btc_MainFunction>
}
 8011848:	bf00      	nop
 801184a:	bd80      	pop	{r7, pc}

0801184c <Rte_Runnable_CenLoc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_CenLoc_MainFunction()
{
 801184c:	b580      	push	{r7, lr}
 801184e:	af00      	add	r7, sp, #0
	CenLoc_MainFunction();
 8011850:	f7f0 f826 	bl	80018a0 <CenLoc_MainFunction>
}
 8011854:	bf00      	nop
 8011856:	bd80      	pop	{r7, pc}

08011858 <Rte_Runnable_ExtLights_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_ExtLights_MainFunction()
{
 8011858:	b580      	push	{r7, lr}
 801185a:	af00      	add	r7, sp, #0
	ExtLights_MainFunction();
 801185c:	f7f0 fc88 	bl	8002170 <ExtLights_MainFunction>
}
 8011860:	bf00      	nop
 8011862:	bd80      	pop	{r7, pc}

08011864 <Rte_Runnable_IntLights_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_IntLights_MainFunction()
{
 8011864:	b580      	push	{r7, lr}
 8011866:	af00      	add	r7, sp, #0
	IntLights_MainFunction();
 8011868:	f7f1 f968 	bl	8002b3c <IntLights_MainFunction>
}
 801186c:	bf00      	nop
 801186e:	bd80      	pop	{r7, pc}

08011870 <Rte_Runnable_SecAlm_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_SecAlm_MainFunction()
{
 8011870:	b580      	push	{r7, lr}
 8011872:	af00      	add	r7, sp, #0
	SecAlm_MainFunction();
 8011874:	f7f1 fbd2 	bl	800301c <SecAlm_MainFunction>
}
 8011878:	bf00      	nop
 801187a:	bd80      	pop	{r7, pc}

0801187c <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:
/* Run time environment interface. */
VOID Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 801187c:	b480      	push	{r7}
 801187e:	b083      	sub	sp, #12
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
	*data = Btc_ReceivedDataOnBluetooth;
 8011884:	4b04      	ldr	r3, [pc, #16]	; (8011898 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>)
 8011886:	781a      	ldrb	r2, [r3, #0]
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	701a      	strb	r2, [r3, #0]
}
 801188c:	bf00      	nop
 801188e:	370c      	adds	r7, #12
 8011890:	46bd      	mov	sp, r7
 8011892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011896:	4770      	bx	lr
 8011898:	20000096 	.word	0x20000096

0801189c <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>:
{
	*data = SecAlm_SensorStatus;
}
/* Run time environment interface. */
VOID Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b084      	sub	sp, #16
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	60f8      	str	r0, [r7, #12]
 80118a4:	60b9      	str	r1, [r7, #8]
 80118a6:	4613      	mov	r3, r2
 80118a8:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Receive_IT(huart, pData, Size);
 80118aa:	88fb      	ldrh	r3, [r7, #6]
 80118ac:	461a      	mov	r2, r3
 80118ae:	68b9      	ldr	r1, [r7, #8]
 80118b0:	68f8      	ldr	r0, [r7, #12]
 80118b2:	f7fa fa8f 	bl	800bdd4 <HAL_UART_Receive_IT>
}
 80118b6:	bf00      	nop
 80118b8:	3710      	adds	r7, #16
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}

080118be <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>:
{
	HAL_TIM_Base_Stop_IT(htim);
}
/* Run time environment interface. */
VOID Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80118be:	b580      	push	{r7, lr}
 80118c0:	b082      	sub	sp, #8
 80118c2:	af00      	add	r7, sp, #0
 80118c4:	6078      	str	r0, [r7, #4]
 80118c6:	460b      	mov	r3, r1
 80118c8:	807b      	strh	r3, [r7, #2]
 80118ca:	4613      	mov	r3, r2
 80118cc:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 80118ce:	787a      	ldrb	r2, [r7, #1]
 80118d0:	887b      	ldrh	r3, [r7, #2]
 80118d2:	4619      	mov	r1, r3
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f7f6 f819 	bl	800790c <HAL_GPIO_WritePin>
}
 80118da:	bf00      	nop
 80118dc:	3708      	adds	r7, #8
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd80      	pop	{r7, pc}

080118e2 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>:
{
	HAL_GetTick();
}
/* Run time environment interface. */
VOID Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(osTimerId_t timer_id, uint32_t ticks)
{
 80118e2:	b580      	push	{r7, lr}
 80118e4:	b082      	sub	sp, #8
 80118e6:	af00      	add	r7, sp, #0
 80118e8:	6078      	str	r0, [r7, #4]
 80118ea:	6039      	str	r1, [r7, #0]
	osTimerStart(timer_id, ticks);
 80118ec:	6839      	ldr	r1, [r7, #0]
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f7fc fca0 	bl	800e234 <osTimerStart>
}
 80118f4:	bf00      	nop
 80118f6:	3708      	adds	r7, #8
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}

080118fc <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>:
/* Run time environment interface. */
VOID Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(osTimerId_t timer_id)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b082      	sub	sp, #8
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
	osTimerStop(timer_id);
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f7fc fcc3 	bl	800e290 <osTimerStop>
}
 801190a:	bf00      	nop
 801190c:	3708      	adds	r7, #8
 801190e:	46bd      	mov	sp, r7
 8011910:	bd80      	pop	{r7, pc}

08011912 <Rte_Runnable_DiagCtrl_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_DiagCtrl_MainFunction()
{
 8011912:	b580      	push	{r7, lr}
 8011914:	af00      	add	r7, sp, #0
	DiagCtrl_MainFunction();
 8011916:	f7ef ffcb 	bl	80018b0 <DiagCtrl_MainFunction>
}
 801191a:	bf00      	nop
 801191c:	bd80      	pop	{r7, pc}

0801191e <Rte_Runnable_Hvac_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Hvac_MainFunction()
{
 801191e:	b580      	push	{r7, lr}
 8011920:	af00      	add	r7, sp, #0
	Hvac_MainFunction();
 8011922:	f7f0 fd3d 	bl	80023a0 <Hvac_MainFunction>
}
 8011926:	bf00      	nop
 8011928:	bd80      	pop	{r7, pc}

0801192a <Rte_Runnable_Pdc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Pdc_MainFunction()
{
 801192a:	b580      	push	{r7, lr}
 801192c:	af00      	add	r7, sp, #0
	Pdc_MainFunction();
 801192e:	f7f1 f90b 	bl	8002b48 <Pdc_MainFunction>
}
 8011932:	bf00      	nop
 8011934:	bd80      	pop	{r7, pc}

08011936 <Rte_Runnable_I2c_MainFunction>:
{
	Can_MainFunction();
}
/* Run time environment interface. */
VOID Rte_Runnable_I2c_MainFunction()
{
 8011936:	b580      	push	{r7, lr}
 8011938:	af00      	add	r7, sp, #0
	I2c_MainFunction();
 801193a:	f7f1 fdcd 	bl	80034d8 <I2c_MainFunction>
}
 801193e:	bf00      	nop
 8011940:	bd80      	pop	{r7, pc}

08011942 <Rte_Runnable_Dem_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Dem_MainFunction()
{
 8011942:	b580      	push	{r7, lr}
 8011944:	af00      	add	r7, sp, #0
	Dem_MainFunction();
 8011946:	f7f3 fcaa 	bl	800529e <Dem_MainFunction>
}
 801194a:	bf00      	nop
 801194c:	bd80      	pop	{r7, pc}
	...

08011950 <Crc_VerifyUartData>:
/***********************************************************************************
* Function: Crc_VerifyUartData													   *
* Description: Verifies the UART data received.							 		   *
************************************************************************************/
StdReturnType Crc_VerifyUartData()
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b084      	sub	sp, #16
 8011954:	af00      	add	r7, sp, #0
	/* Local variable to store return value. */
	uint8 returnValue = E_NOT_OK;
 8011956:	2301      	movs	r3, #1
 8011958:	73fb      	strb	r3, [r7, #15]
	/* Local variable to store received value. */
	uint8 receivedValue = STD_LOW;
 801195a:	2300      	movs	r3, #0
 801195c:	71fb      	strb	r3, [r7, #7]
	/* Local value to calculate CRC. */
	uint32 calculatedCrc = STD_LOW;
 801195e:	2300      	movs	r3, #0
 8011960:	60bb      	str	r3, [r7, #8]
	/* Read the received data from UART. */
	Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&receivedValue);
 8011962:	1dfb      	adds	r3, r7, #7
 8011964:	4618      	mov	r0, r3
 8011966:	f7ff ff89 	bl	801187c <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
	Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 801196a:	4bb7      	ldr	r3, [pc, #732]	; (8011c48 <Crc_VerifyUartData+0x2f8>)
 801196c:	2201      	movs	r2, #1
 801196e:	701a      	strb	r2, [r3, #0]
	/* Calculate the CRC. */
	calculatedCrc = HAL_CRC_Calculate(&hcrc, (uint32*)&receivedValue, 1);
 8011970:	1dfb      	adds	r3, r7, #7
 8011972:	2201      	movs	r2, #1
 8011974:	4619      	mov	r1, r3
 8011976:	48b5      	ldr	r0, [pc, #724]	; (8011c4c <Crc_VerifyUartData+0x2fc>)
 8011978:	f7f4 ff0a 	bl	8006790 <HAL_CRC_Calculate>
 801197c:	60b8      	str	r0, [r7, #8]
	/* Check the value if it has correct CRC. */
	if(receivedValue >= 30 && receivedValue <= 54)
 801197e:	79fb      	ldrb	r3, [r7, #7]
 8011980:	2b1d      	cmp	r3, #29
 8011982:	d904      	bls.n	801198e <Crc_VerifyUartData+0x3e>
 8011984:	79fb      	ldrb	r3, [r7, #7]
 8011986:	2b36      	cmp	r3, #54	; 0x36
 8011988:	d801      	bhi.n	801198e <Crc_VerifyUartData+0x3e>
	{
		return E_OK;
 801198a:	2300      	movs	r3, #0
 801198c:	e278      	b.n	8011e80 <Crc_VerifyUartData+0x530>
	else
	{
		/* do nothing */
	}
	/* Check the value if it has correct CRC. */
	switch(receivedValue)
 801198e:	79fb      	ldrb	r3, [r7, #7]
 8011990:	3b01      	subs	r3, #1
 8011992:	2b46      	cmp	r3, #70	; 0x46
 8011994:	f200 8272 	bhi.w	8011e7c <Crc_VerifyUartData+0x52c>
 8011998:	a201      	add	r2, pc, #4	; (adr r2, 80119a0 <Crc_VerifyUartData+0x50>)
 801199a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801199e:	bf00      	nop
 80119a0:	08011b41 	.word	0x08011b41
 80119a4:	08011b57 	.word	0x08011b57
 80119a8:	08011b6d 	.word	0x08011b6d
 80119ac:	08011b83 	.word	0x08011b83
 80119b0:	08011e7d 	.word	0x08011e7d
 80119b4:	08011e7d 	.word	0x08011e7d
 80119b8:	08011b99 	.word	0x08011b99
 80119bc:	08011baf 	.word	0x08011baf
 80119c0:	08011bc5 	.word	0x08011bc5
 80119c4:	08011bdb 	.word	0x08011bdb
 80119c8:	08011bf1 	.word	0x08011bf1
 80119cc:	08011c07 	.word	0x08011c07
 80119d0:	08011c1d 	.word	0x08011c1d
 80119d4:	08011c33 	.word	0x08011c33
 80119d8:	08011c99 	.word	0x08011c99
 80119dc:	08011caf 	.word	0x08011caf
 80119e0:	08011cc5 	.word	0x08011cc5
 80119e4:	08011cdb 	.word	0x08011cdb
 80119e8:	08011cf1 	.word	0x08011cf1
 80119ec:	08011d07 	.word	0x08011d07
 80119f0:	08011abd 	.word	0x08011abd
 80119f4:	08011ad3 	.word	0x08011ad3
 80119f8:	08011ae9 	.word	0x08011ae9
 80119fc:	08011aff 	.word	0x08011aff
 8011a00:	08011b15 	.word	0x08011b15
 8011a04:	08011b2b 	.word	0x08011b2b
 8011a08:	08011e7d 	.word	0x08011e7d
 8011a0c:	08011e7d 	.word	0x08011e7d
 8011a10:	08011e7d 	.word	0x08011e7d
 8011a14:	08011e7d 	.word	0x08011e7d
 8011a18:	08011e7d 	.word	0x08011e7d
 8011a1c:	08011e7d 	.word	0x08011e7d
 8011a20:	08011e7d 	.word	0x08011e7d
 8011a24:	08011e7d 	.word	0x08011e7d
 8011a28:	08011e7d 	.word	0x08011e7d
 8011a2c:	08011e7d 	.word	0x08011e7d
 8011a30:	08011e7d 	.word	0x08011e7d
 8011a34:	08011e7d 	.word	0x08011e7d
 8011a38:	08011e7d 	.word	0x08011e7d
 8011a3c:	08011e7d 	.word	0x08011e7d
 8011a40:	08011e7d 	.word	0x08011e7d
 8011a44:	08011e7d 	.word	0x08011e7d
 8011a48:	08011e7d 	.word	0x08011e7d
 8011a4c:	08011e7d 	.word	0x08011e7d
 8011a50:	08011e7d 	.word	0x08011e7d
 8011a54:	08011e7d 	.word	0x08011e7d
 8011a58:	08011e7d 	.word	0x08011e7d
 8011a5c:	08011e7d 	.word	0x08011e7d
 8011a60:	08011e7d 	.word	0x08011e7d
 8011a64:	08011e7d 	.word	0x08011e7d
 8011a68:	08011e7d 	.word	0x08011e7d
 8011a6c:	08011e7d 	.word	0x08011e7d
 8011a70:	08011e7d 	.word	0x08011e7d
 8011a74:	08011e7d 	.word	0x08011e7d
 8011a78:	08011d1d 	.word	0x08011d1d
 8011a7c:	08011d33 	.word	0x08011d33
 8011a80:	08011d49 	.word	0x08011d49
 8011a84:	08011d5f 	.word	0x08011d5f
 8011a88:	08011d75 	.word	0x08011d75
 8011a8c:	08011d8b 	.word	0x08011d8b
 8011a90:	08011da1 	.word	0x08011da1
 8011a94:	08011db7 	.word	0x08011db7
 8011a98:	08011dcd 	.word	0x08011dcd
 8011a9c:	08011de3 	.word	0x08011de3
 8011aa0:	08011df9 	.word	0x08011df9
 8011aa4:	08011e0f 	.word	0x08011e0f
 8011aa8:	08011e7d 	.word	0x08011e7d
 8011aac:	08011e25 	.word	0x08011e25
 8011ab0:	08011e3b 	.word	0x08011e3b
 8011ab4:	08011e51 	.word	0x08011e51
 8011ab8:	08011e67 	.word	0x08011e67
	{
		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_ReverseLight_On)
 8011abc:	4b64      	ldr	r3, [pc, #400]	; (8011c50 <Crc_VerifyUartData+0x300>)
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	68ba      	ldr	r2, [r7, #8]
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d102      	bne.n	8011acc <Crc_VerifyUartData+0x17c>
			{
				returnValue = E_OK;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011aca:	e1d8      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011acc:	2301      	movs	r3, #1
 8011ace:	73fb      	strb	r3, [r7, #15]
			break;
 8011ad0:	e1d5      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_ReverseLight_Off)
 8011ad2:	4b60      	ldr	r3, [pc, #384]	; (8011c54 <Crc_VerifyUartData+0x304>)
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	68ba      	ldr	r2, [r7, #8]
 8011ad8:	429a      	cmp	r2, r3
 8011ada:	d102      	bne.n	8011ae2 <Crc_VerifyUartData+0x192>
			{
				returnValue = E_OK;
 8011adc:	2300      	movs	r3, #0
 8011ade:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011ae0:	e1cd      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011ae2:	2301      	movs	r3, #1
 8011ae4:	73fb      	strb	r3, [r7, #15]
			break;
 8011ae6:	e1ca      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO:
			if(calculatedCrc == Crc_ExtLights_PositionZero)
 8011ae8:	4b5b      	ldr	r3, [pc, #364]	; (8011c58 <Crc_VerifyUartData+0x308>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	68ba      	ldr	r2, [r7, #8]
 8011aee:	429a      	cmp	r2, r3
 8011af0:	d102      	bne.n	8011af8 <Crc_VerifyUartData+0x1a8>
			{
				returnValue = E_OK;
 8011af2:	2300      	movs	r3, #0
 8011af4:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011af6:	e1c2      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011af8:	2301      	movs	r3, #1
 8011afa:	73fb      	strb	r3, [r7, #15]
			break;
 8011afc:	e1bf      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:
			if(calculatedCrc == Crc_ExtLights_AutomaticLights)
 8011afe:	4b57      	ldr	r3, [pc, #348]	; (8011c5c <Crc_VerifyUartData+0x30c>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	68ba      	ldr	r2, [r7, #8]
 8011b04:	429a      	cmp	r2, r3
 8011b06:	d102      	bne.n	8011b0e <Crc_VerifyUartData+0x1be>
			{
				returnValue = E_OK;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011b0c:	e1b7      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011b0e:	2301      	movs	r3, #1
 8011b10:	73fb      	strb	r3, [r7, #15]
			break;
 8011b12:	e1b4      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS:
			if(calculatedCrc == Crc_ExtLights_PositionLights)
 8011b14:	4b52      	ldr	r3, [pc, #328]	; (8011c60 <Crc_VerifyUartData+0x310>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	68ba      	ldr	r2, [r7, #8]
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	d102      	bne.n	8011b24 <Crc_VerifyUartData+0x1d4>
			{
				returnValue = E_OK;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011b22:	e1ac      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011b24:	2301      	movs	r3, #1
 8011b26:	73fb      	strb	r3, [r7, #15]
			break;
 8011b28:	e1a9      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:
			if(calculatedCrc == Crc_ExtLights_NightTimeLights)
 8011b2a:	4b4e      	ldr	r3, [pc, #312]	; (8011c64 <Crc_VerifyUartData+0x314>)
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	68ba      	ldr	r2, [r7, #8]
 8011b30:	429a      	cmp	r2, r3
 8011b32:	d102      	bne.n	8011b3a <Crc_VerifyUartData+0x1ea>
			{
				returnValue = E_OK;
 8011b34:	2300      	movs	r3, #0
 8011b36:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011b38:	e1a1      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011b3a:	2301      	movs	r3, #1
 8011b3c:	73fb      	strb	r3, [r7, #15]
			break;
 8011b3e:	e19e      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_CENLOC_ON:
			if(calculatedCrc == Crc_CenLoc_On)
 8011b40:	4b49      	ldr	r3, [pc, #292]	; (8011c68 <Crc_VerifyUartData+0x318>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	68ba      	ldr	r2, [r7, #8]
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d102      	bne.n	8011b50 <Crc_VerifyUartData+0x200>
			{
				returnValue = E_OK;
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011b4e:	e196      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011b50:	2301      	movs	r3, #1
 8011b52:	73fb      	strb	r3, [r7, #15]
			break;
 8011b54:	e193      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_CENLOC_OFF:
			if(calculatedCrc == Crc_CenLoc_Off)
 8011b56:	4b45      	ldr	r3, [pc, #276]	; (8011c6c <Crc_VerifyUartData+0x31c>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	68ba      	ldr	r2, [r7, #8]
 8011b5c:	429a      	cmp	r2, r3
 8011b5e:	d102      	bne.n	8011b66 <Crc_VerifyUartData+0x216>
			{
				returnValue = E_OK;
 8011b60:	2300      	movs	r3, #0
 8011b62:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011b64:	e18b      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011b66:	2301      	movs	r3, #1
 8011b68:	73fb      	strb	r3, [r7, #15]
			break;
 8011b6a:	e188      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON:
			if(calculatedCrc == Crc_ExtLights_HighBeam_On)
 8011b6c:	4b40      	ldr	r3, [pc, #256]	; (8011c70 <Crc_VerifyUartData+0x320>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	68ba      	ldr	r2, [r7, #8]
 8011b72:	429a      	cmp	r2, r3
 8011b74:	d102      	bne.n	8011b7c <Crc_VerifyUartData+0x22c>
			{
				returnValue = E_OK;
 8011b76:	2300      	movs	r3, #0
 8011b78:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011b7a:	e180      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	73fb      	strb	r3, [r7, #15]
			break;
 8011b80:	e17d      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:
			if(calculatedCrc == Crc_ExtLights_HighBeam_Off)
 8011b82:	4b3c      	ldr	r3, [pc, #240]	; (8011c74 <Crc_VerifyUartData+0x324>)
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	68ba      	ldr	r2, [r7, #8]
 8011b88:	429a      	cmp	r2, r3
 8011b8a:	d102      	bne.n	8011b92 <Crc_VerifyUartData+0x242>
			{
				returnValue = E_OK;
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011b90:	e175      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011b92:	2301      	movs	r3, #1
 8011b94:	73fb      	strb	r3, [r7, #15]
			break;
 8011b96:	e172      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:
			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_On)
 8011b98:	4b37      	ldr	r3, [pc, #220]	; (8011c78 <Crc_VerifyUartData+0x328>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	68ba      	ldr	r2, [r7, #8]
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d102      	bne.n	8011ba8 <Crc_VerifyUartData+0x258>
			{
				returnValue = E_OK;
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011ba6:	e16a      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011ba8:	2301      	movs	r3, #1
 8011baa:	73fb      	strb	r3, [r7, #15]
			break;
 8011bac:	e167      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:
			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_Off)
 8011bae:	4b33      	ldr	r3, [pc, #204]	; (8011c7c <Crc_VerifyUartData+0x32c>)
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	68ba      	ldr	r2, [r7, #8]
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	d102      	bne.n	8011bbe <Crc_VerifyUartData+0x26e>
			{
				returnValue = E_OK;
 8011bb8:	2300      	movs	r3, #0
 8011bba:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011bbc:	e15f      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	73fb      	strb	r3, [r7, #15]
			break;
 8011bc2:	e15c      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_On)
 8011bc4:	4b2e      	ldr	r3, [pc, #184]	; (8011c80 <Crc_VerifyUartData+0x330>)
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	68ba      	ldr	r2, [r7, #8]
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	d102      	bne.n	8011bd4 <Crc_VerifyUartData+0x284>
			{
				returnValue = E_OK;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011bd2:	e154      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011bd4:	2301      	movs	r3, #1
 8011bd6:	73fb      	strb	r3, [r7, #15]
			break;
 8011bd8:	e151      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_Off)
 8011bda:	4b2a      	ldr	r3, [pc, #168]	; (8011c84 <Crc_VerifyUartData+0x334>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	68ba      	ldr	r2, [r7, #8]
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d102      	bne.n	8011bea <Crc_VerifyUartData+0x29a>
			{
				returnValue = E_OK;
 8011be4:	2300      	movs	r3, #0
 8011be6:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011be8:	e149      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011bea:	2301      	movs	r3, #1
 8011bec:	73fb      	strb	r3, [r7, #15]
			break;
 8011bee:	e146      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_HazardLight_On)
 8011bf0:	4b25      	ldr	r3, [pc, #148]	; (8011c88 <Crc_VerifyUartData+0x338>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	68ba      	ldr	r2, [r7, #8]
 8011bf6:	429a      	cmp	r2, r3
 8011bf8:	d102      	bne.n	8011c00 <Crc_VerifyUartData+0x2b0>
			{
				returnValue = E_OK;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011bfe:	e13e      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011c00:	2301      	movs	r3, #1
 8011c02:	73fb      	strb	r3, [r7, #15]
			break;
 8011c04:	e13b      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_HazardLight_Off)
 8011c06:	4b21      	ldr	r3, [pc, #132]	; (8011c8c <Crc_VerifyUartData+0x33c>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	68ba      	ldr	r2, [r7, #8]
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d102      	bne.n	8011c16 <Crc_VerifyUartData+0x2c6>
			{
				returnValue = E_OK;
 8011c10:	2300      	movs	r3, #0
 8011c12:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011c14:	e133      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011c16:	2301      	movs	r3, #1
 8011c18:	73fb      	strb	r3, [r7, #15]
			break;
 8011c1a:	e130      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:
			if(calculatedCrc == Crc_ExtLights_FogLightFront_On)
 8011c1c:	4b1c      	ldr	r3, [pc, #112]	; (8011c90 <Crc_VerifyUartData+0x340>)
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	68ba      	ldr	r2, [r7, #8]
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d102      	bne.n	8011c2c <Crc_VerifyUartData+0x2dc>
			{
				returnValue = E_OK;
 8011c26:	2300      	movs	r3, #0
 8011c28:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011c2a:	e128      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	73fb      	strb	r3, [r7, #15]
			break;
 8011c30:	e125      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:
			if(calculatedCrc == Crc_ExtLights_FogLightFront_Off)
 8011c32:	4b18      	ldr	r3, [pc, #96]	; (8011c94 <Crc_VerifyUartData+0x344>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	68ba      	ldr	r2, [r7, #8]
 8011c38:	429a      	cmp	r2, r3
 8011c3a:	d102      	bne.n	8011c42 <Crc_VerifyUartData+0x2f2>
			{
				returnValue = E_OK;
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011c40:	e11d      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011c42:	2301      	movs	r3, #1
 8011c44:	73fb      	strb	r3, [r7, #15]
			break;
 8011c46:	e11a      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
 8011c48:	20009300 	.word	0x20009300
 8011c4c:	20000260 	.word	0x20000260
 8011c50:	2000933c 	.word	0x2000933c
 8011c54:	20009340 	.word	0x20009340
 8011c58:	20009344 	.word	0x20009344
 8011c5c:	20009348 	.word	0x20009348
 8011c60:	2000934c 	.word	0x2000934c
 8011c64:	20009350 	.word	0x20009350
 8011c68:	20009304 	.word	0x20009304
 8011c6c:	20009308 	.word	0x20009308
 8011c70:	2000930c 	.word	0x2000930c
 8011c74:	20009310 	.word	0x20009310
 8011c78:	20009314 	.word	0x20009314
 8011c7c:	20009318 	.word	0x20009318
 8011c80:	2000931c 	.word	0x2000931c
 8011c84:	20009320 	.word	0x20009320
 8011c88:	20009324 	.word	0x20009324
 8011c8c:	20009328 	.word	0x20009328
 8011c90:	2000932c 	.word	0x2000932c
 8011c94:	20009330 	.word	0x20009330
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:
			if(calculatedCrc == Crc_ExtLights_FogLightRear_On)
 8011c98:	4b7b      	ldr	r3, [pc, #492]	; (8011e88 <Crc_VerifyUartData+0x538>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	68ba      	ldr	r2, [r7, #8]
 8011c9e:	429a      	cmp	r2, r3
 8011ca0:	d102      	bne.n	8011ca8 <Crc_VerifyUartData+0x358>
			{
				returnValue = E_OK;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011ca6:	e0ea      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011ca8:	2301      	movs	r3, #1
 8011caa:	73fb      	strb	r3, [r7, #15]
			break;
 8011cac:	e0e7      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:
			if(calculatedCrc == Crc_ExtLights_FogLightRear_Off)
 8011cae:	4b77      	ldr	r3, [pc, #476]	; (8011e8c <Crc_VerifyUartData+0x53c>)
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	68ba      	ldr	r2, [r7, #8]
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	d102      	bne.n	8011cbe <Crc_VerifyUartData+0x36e>
			{
				returnValue = E_OK;
 8011cb8:	2300      	movs	r3, #0
 8011cba:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011cbc:	e0df      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011cbe:	2301      	movs	r3, #1
 8011cc0:	73fb      	strb	r3, [r7, #15]
			break;
 8011cc2:	e0dc      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON:
			if(calculatedCrc == Crc_ExtLights_BrakeLight_On)
 8011cc4:	4b72      	ldr	r3, [pc, #456]	; (8011e90 <Crc_VerifyUartData+0x540>)
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	68ba      	ldr	r2, [r7, #8]
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d102      	bne.n	8011cd4 <Crc_VerifyUartData+0x384>
			{
				returnValue = E_OK;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011cd2:	e0d4      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011cd4:	2301      	movs	r3, #1
 8011cd6:	73fb      	strb	r3, [r7, #15]
			break;
 8011cd8:	e0d1      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:
			if(calculatedCrc == Crc_ExtLights_BrakeLight_Off)
 8011cda:	4b6e      	ldr	r3, [pc, #440]	; (8011e94 <Crc_VerifyUartData+0x544>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	68ba      	ldr	r2, [r7, #8]
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	d102      	bne.n	8011cea <Crc_VerifyUartData+0x39a>
			{
				returnValue = E_OK;
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011ce8:	e0c9      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011cea:	2301      	movs	r3, #1
 8011cec:	73fb      	strb	r3, [r7, #15]
			break;
 8011cee:	e0c6      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:
			if(calculatedCrc == Crc_IntLights_InteriorLight_On)
 8011cf0:	4b69      	ldr	r3, [pc, #420]	; (8011e98 <Crc_VerifyUartData+0x548>)
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	68ba      	ldr	r2, [r7, #8]
 8011cf6:	429a      	cmp	r2, r3
 8011cf8:	d102      	bne.n	8011d00 <Crc_VerifyUartData+0x3b0>
			{
				returnValue = E_OK;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011cfe:	e0be      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011d00:	2301      	movs	r3, #1
 8011d02:	73fb      	strb	r3, [r7, #15]
			break;
 8011d04:	e0bb      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:
			if(calculatedCrc == Crc_IntLights_InteriorLights_Off)
 8011d06:	4b65      	ldr	r3, [pc, #404]	; (8011e9c <Crc_VerifyUartData+0x54c>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	68ba      	ldr	r2, [r7, #8]
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d102      	bne.n	8011d16 <Crc_VerifyUartData+0x3c6>
			{
				returnValue = E_OK;
 8011d10:	2300      	movs	r3, #0
 8011d12:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011d14:	e0b3      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011d16:	2301      	movs	r3, #1
 8011d18:	73fb      	strb	r3, [r7, #15]
			break;
 8011d1a:	e0b0      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_LEGVENT_ON:
			if(calculatedCrc == Crc_Hvac_LegVent_On)
 8011d1c:	4b60      	ldr	r3, [pc, #384]	; (8011ea0 <Crc_VerifyUartData+0x550>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	68ba      	ldr	r2, [r7, #8]
 8011d22:	429a      	cmp	r2, r3
 8011d24:	d102      	bne.n	8011d2c <Crc_VerifyUartData+0x3dc>
			{
				returnValue = E_OK;
 8011d26:	2300      	movs	r3, #0
 8011d28:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011d2a:	e0a8      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	73fb      	strb	r3, [r7, #15]
			break;
 8011d30:	e0a5      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
			break;
		case RTE_P_BTC_RX_HVAC_LEGVENT_OFF:
			if(calculatedCrc == Crc_Hvac_LegVent_Off)
 8011d32:	4b5c      	ldr	r3, [pc, #368]	; (8011ea4 <Crc_VerifyUartData+0x554>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	68ba      	ldr	r2, [r7, #8]
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	d102      	bne.n	8011d42 <Crc_VerifyUartData+0x3f2>
			{
				returnValue = E_OK;
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011d40:	e09d      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011d42:	2301      	movs	r3, #1
 8011d44:	73fb      	strb	r3, [r7, #15]
			break;
 8011d46:	e09a      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_MIDVENT_ON:
			if(calculatedCrc == Crc_Hvac_MidVent_On)
 8011d48:	4b57      	ldr	r3, [pc, #348]	; (8011ea8 <Crc_VerifyUartData+0x558>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	68ba      	ldr	r2, [r7, #8]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d102      	bne.n	8011d58 <Crc_VerifyUartData+0x408>
			{
				returnValue = E_OK;
 8011d52:	2300      	movs	r3, #0
 8011d54:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011d56:	e092      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011d58:	2301      	movs	r3, #1
 8011d5a:	73fb      	strb	r3, [r7, #15]
			break;
 8011d5c:	e08f      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_MIDVENT_OFF:
			if(calculatedCrc == Crc_Hvac_MidVent_Off)
 8011d5e:	4b53      	ldr	r3, [pc, #332]	; (8011eac <Crc_VerifyUartData+0x55c>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	68ba      	ldr	r2, [r7, #8]
 8011d64:	429a      	cmp	r2, r3
 8011d66:	d102      	bne.n	8011d6e <Crc_VerifyUartData+0x41e>
			{
				returnValue = E_OK;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011d6c:	e087      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011d6e:	2301      	movs	r3, #1
 8011d70:	73fb      	strb	r3, [r7, #15]
			break;
 8011d72:	e084      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_WINDSHIELDVENT_ON:
			if(calculatedCrc == Crc_Hvac_WindshieldVent_On)
 8011d74:	4b4e      	ldr	r3, [pc, #312]	; (8011eb0 <Crc_VerifyUartData+0x560>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	68ba      	ldr	r2, [r7, #8]
 8011d7a:	429a      	cmp	r2, r3
 8011d7c:	d102      	bne.n	8011d84 <Crc_VerifyUartData+0x434>
			{
				returnValue = E_OK;
 8011d7e:	2300      	movs	r3, #0
 8011d80:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011d82:	e07c      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011d84:	2301      	movs	r3, #1
 8011d86:	73fb      	strb	r3, [r7, #15]
			break;
 8011d88:	e079      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_WINDSHIELDVENT_OFF:
			if(calculatedCrc == Crc_Hvac_WindshieldVent_Off)
 8011d8a:	4b4a      	ldr	r3, [pc, #296]	; (8011eb4 <Crc_VerifyUartData+0x564>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	68ba      	ldr	r2, [r7, #8]
 8011d90:	429a      	cmp	r2, r3
 8011d92:	d102      	bne.n	8011d9a <Crc_VerifyUartData+0x44a>
			{
				returnValue = E_OK;
 8011d94:	2300      	movs	r3, #0
 8011d96:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011d98:	e071      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	73fb      	strb	r3, [r7, #15]
			break;
 8011d9e:	e06e      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_WINDSHIELDDEFROST_ON:
			if(calculatedCrc == Crc_Hvac_WindshieldDefrost_On)
 8011da0:	4b45      	ldr	r3, [pc, #276]	; (8011eb8 <Crc_VerifyUartData+0x568>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	68ba      	ldr	r2, [r7, #8]
 8011da6:	429a      	cmp	r2, r3
 8011da8:	d102      	bne.n	8011db0 <Crc_VerifyUartData+0x460>
			{
				returnValue = E_OK;
 8011daa:	2300      	movs	r3, #0
 8011dac:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011dae:	e066      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011db0:	2301      	movs	r3, #1
 8011db2:	73fb      	strb	r3, [r7, #15]
			break;
 8011db4:	e063      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_WINDSHIELDDEFROST_OFF:
			if(calculatedCrc == Crc_Hvac_WindshieldDefrost_Off)
 8011db6:	4b41      	ldr	r3, [pc, #260]	; (8011ebc <Crc_VerifyUartData+0x56c>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	68ba      	ldr	r2, [r7, #8]
 8011dbc:	429a      	cmp	r2, r3
 8011dbe:	d102      	bne.n	8011dc6 <Crc_VerifyUartData+0x476>
			{
				returnValue = E_OK;
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011dc4:	e05b      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011dc6:	2301      	movs	r3, #1
 8011dc8:	73fb      	strb	r3, [r7, #15]
			break;
 8011dca:	e058      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_AC_ON:
			if(calculatedCrc == Crc_Hvac_Ac_On)
 8011dcc:	4b3c      	ldr	r3, [pc, #240]	; (8011ec0 <Crc_VerifyUartData+0x570>)
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	68ba      	ldr	r2, [r7, #8]
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	d102      	bne.n	8011ddc <Crc_VerifyUartData+0x48c>
			{
				returnValue = E_OK;
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011dda:	e050      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011ddc:	2301      	movs	r3, #1
 8011dde:	73fb      	strb	r3, [r7, #15]
			break;
 8011de0:	e04d      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_AC_OFF:
			if(calculatedCrc == Crc_Hvac_Ac_Off)
 8011de2:	4b38      	ldr	r3, [pc, #224]	; (8011ec4 <Crc_VerifyUartData+0x574>)
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	68ba      	ldr	r2, [r7, #8]
 8011de8:	429a      	cmp	r2, r3
 8011dea:	d102      	bne.n	8011df2 <Crc_VerifyUartData+0x4a2>
			{
				returnValue = E_OK;
 8011dec:	2300      	movs	r3, #0
 8011dee:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011df0:	e045      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011df2:	2301      	movs	r3, #1
 8011df4:	73fb      	strb	r3, [r7, #15]
			break;
 8011df6:	e042      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_RECIRCULATION:
			if(calculatedCrc == Crc_Hvac_Recirculation)
 8011df8:	4b33      	ldr	r3, [pc, #204]	; (8011ec8 <Crc_VerifyUartData+0x578>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	68ba      	ldr	r2, [r7, #8]
 8011dfe:	429a      	cmp	r2, r3
 8011e00:	d102      	bne.n	8011e08 <Crc_VerifyUartData+0x4b8>
			{
				returnValue = E_OK;
 8011e02:	2300      	movs	r3, #0
 8011e04:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011e06:	e03a      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011e08:	2301      	movs	r3, #1
 8011e0a:	73fb      	strb	r3, [r7, #15]
			break;
 8011e0c:	e037      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_NORECIRCULATION:
			if(calculatedCrc == Crc_Hvac_NoRecirculation)
 8011e0e:	4b2f      	ldr	r3, [pc, #188]	; (8011ecc <Crc_VerifyUartData+0x57c>)
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	68ba      	ldr	r2, [r7, #8]
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d102      	bne.n	8011e1e <Crc_VerifyUartData+0x4ce>
			{
				returnValue = E_OK;
 8011e18:	2300      	movs	r3, #0
 8011e1a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011e1c:	e02f      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011e1e:	2301      	movs	r3, #1
 8011e20:	73fb      	strb	r3, [r7, #15]
			break;
 8011e22:	e02c      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_AUTOMATICMODE_ON:
			if(calculatedCrc == Crc_Hvac_AutomaticMode_On)
 8011e24:	4b2a      	ldr	r3, [pc, #168]	; (8011ed0 <Crc_VerifyUartData+0x580>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	68ba      	ldr	r2, [r7, #8]
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d102      	bne.n	8011e34 <Crc_VerifyUartData+0x4e4>
			{
				returnValue = E_OK;
 8011e2e:	2300      	movs	r3, #0
 8011e30:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011e32:	e024      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011e34:	2301      	movs	r3, #1
 8011e36:	73fb      	strb	r3, [r7, #15]
			break;
 8011e38:	e021      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_AUTOMATICMODE_OFF:
			if(calculatedCrc == Crc_Hvac_AutomaticMode_Off)
 8011e3a:	4b26      	ldr	r3, [pc, #152]	; (8011ed4 <Crc_VerifyUartData+0x584>)
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	68ba      	ldr	r2, [r7, #8]
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d102      	bne.n	8011e4a <Crc_VerifyUartData+0x4fa>
			{
				returnValue = E_OK;
 8011e44:	2300      	movs	r3, #0
 8011e46:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011e48:	e019      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011e4a:	2301      	movs	r3, #1
 8011e4c:	73fb      	strb	r3, [r7, #15]
			break;
 8011e4e:	e016      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_REARWINDSHIELDDEFROST_ON:
			if(calculatedCrc == Crc_Hvac_RearWindshieldDefrost_On)
 8011e50:	4b21      	ldr	r3, [pc, #132]	; (8011ed8 <Crc_VerifyUartData+0x588>)
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	68ba      	ldr	r2, [r7, #8]
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d102      	bne.n	8011e60 <Crc_VerifyUartData+0x510>
			{
				returnValue = E_OK;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011e5e:	e00e      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011e60:	2301      	movs	r3, #1
 8011e62:	73fb      	strb	r3, [r7, #15]
			break;
 8011e64:	e00b      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		case RTE_P_BTC_RX_HVAC_REARWINDSHIELDDEFROST_OFF:
			if(calculatedCrc == Crc_Hvac_RearWindshieldDefrost_Off)
 8011e66:	4b1d      	ldr	r3, [pc, #116]	; (8011edc <Crc_VerifyUartData+0x58c>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	68ba      	ldr	r2, [r7, #8]
 8011e6c:	429a      	cmp	r2, r3
 8011e6e:	d102      	bne.n	8011e76 <Crc_VerifyUartData+0x526>
			{
				returnValue = E_OK;
 8011e70:	2300      	movs	r3, #0
 8011e72:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 8011e74:	e003      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
				returnValue = E_NOT_OK;
 8011e76:	2301      	movs	r3, #1
 8011e78:	73fb      	strb	r3, [r7, #15]
			break;
 8011e7a:	e000      	b.n	8011e7e <Crc_VerifyUartData+0x52e>
		default:
			break;
 8011e7c:	bf00      	nop
	}
	return returnValue;
 8011e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	3710      	adds	r7, #16
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd80      	pop	{r7, pc}
 8011e88:	20009360 	.word	0x20009360
 8011e8c:	20009364 	.word	0x20009364
 8011e90:	20009334 	.word	0x20009334
 8011e94:	20009338 	.word	0x20009338
 8011e98:	20009358 	.word	0x20009358
 8011e9c:	2000935c 	.word	0x2000935c
 8011ea0:	20009368 	.word	0x20009368
 8011ea4:	2000936c 	.word	0x2000936c
 8011ea8:	20009370 	.word	0x20009370
 8011eac:	20009374 	.word	0x20009374
 8011eb0:	20009378 	.word	0x20009378
 8011eb4:	2000937c 	.word	0x2000937c
 8011eb8:	20009380 	.word	0x20009380
 8011ebc:	20009384 	.word	0x20009384
 8011ec0:	20009390 	.word	0x20009390
 8011ec4:	20009394 	.word	0x20009394
 8011ec8:	20009398 	.word	0x20009398
 8011ecc:	2000939c 	.word	0x2000939c
 8011ed0:	200093a0 	.word	0x200093a0
 8011ed4:	200093a4 	.word	0x200093a4
 8011ed8:	20009388 	.word	0x20009388
 8011edc:	2000938c 	.word	0x2000938c

08011ee0 <Crc_InitCrcValuesForUart>:
/***********************************************************************************
* Function: Crc_InitCrcValuesForUart									   		   *
* Description: Initialize the CRC default values for UART data.			 		   *
************************************************************************************/
VOID Crc_InitCrcValuesForUart()
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b082      	sub	sp, #8
 8011ee4:	af00      	add	r7, sp, #0
	/* Local variable to store default value of possible
	 * received data from UART. */
	uint32 value = 0;
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	607b      	str	r3, [r7, #4]
	/* Calculate CRC for each defined bluetooth command. */
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON;
 8011eea:	230f      	movs	r3, #15
 8011eec:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8011eee:	1d3b      	adds	r3, r7, #4
 8011ef0:	2201      	movs	r2, #1
 8011ef2:	4619      	mov	r1, r3
 8011ef4:	48ba      	ldr	r0, [pc, #744]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8011ef6:	f7f4 fc4b 	bl	8006790 <HAL_CRC_Calculate>
 8011efa:	4603      	mov	r3, r0
 8011efc:	4ab9      	ldr	r2, [pc, #740]	; (80121e4 <Crc_InitCrcValuesForUart+0x304>)
 8011efe:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF;
 8011f00:	2310      	movs	r3, #16
 8011f02:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8011f04:	1d3b      	adds	r3, r7, #4
 8011f06:	2201      	movs	r2, #1
 8011f08:	4619      	mov	r1, r3
 8011f0a:	48b5      	ldr	r0, [pc, #724]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8011f0c:	f7f4 fc40 	bl	8006790 <HAL_CRC_Calculate>
 8011f10:	4603      	mov	r3, r0
 8011f12:	4ab5      	ldr	r2, [pc, #724]	; (80121e8 <Crc_InitCrcValuesForUart+0x308>)
 8011f14:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_CENLOC_ON;
 8011f16:	2301      	movs	r3, #1
 8011f18:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8011f1a:	1d3b      	adds	r3, r7, #4
 8011f1c:	2201      	movs	r2, #1
 8011f1e:	4619      	mov	r1, r3
 8011f20:	48af      	ldr	r0, [pc, #700]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8011f22:	f7f4 fc35 	bl	8006790 <HAL_CRC_Calculate>
 8011f26:	4603      	mov	r3, r0
 8011f28:	4ab0      	ldr	r2, [pc, #704]	; (80121ec <Crc_InitCrcValuesForUart+0x30c>)
 8011f2a:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_CENLOC_OFF;
 8011f2c:	2302      	movs	r3, #2
 8011f2e:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8011f30:	1d3b      	adds	r3, r7, #4
 8011f32:	2201      	movs	r2, #1
 8011f34:	4619      	mov	r1, r3
 8011f36:	48aa      	ldr	r0, [pc, #680]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8011f38:	f7f4 fc2a 	bl	8006790 <HAL_CRC_Calculate>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	4aac      	ldr	r2, [pc, #688]	; (80121f0 <Crc_InitCrcValuesForUart+0x310>)
 8011f40:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON;
 8011f42:	2303      	movs	r3, #3
 8011f44:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8011f46:	1d3b      	adds	r3, r7, #4
 8011f48:	2201      	movs	r2, #1
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	48a4      	ldr	r0, [pc, #656]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8011f4e:	f7f4 fc1f 	bl	8006790 <HAL_CRC_Calculate>
 8011f52:	4603      	mov	r3, r0
 8011f54:	4aa7      	ldr	r2, [pc, #668]	; (80121f4 <Crc_InitCrcValuesForUart+0x314>)
 8011f56:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF;
 8011f58:	2304      	movs	r3, #4
 8011f5a:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8011f5c:	1d3b      	adds	r3, r7, #4
 8011f5e:	2201      	movs	r2, #1
 8011f60:	4619      	mov	r1, r3
 8011f62:	489f      	ldr	r0, [pc, #636]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8011f64:	f7f4 fc14 	bl	8006790 <HAL_CRC_Calculate>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	4aa3      	ldr	r2, [pc, #652]	; (80121f8 <Crc_InitCrcValuesForUart+0x318>)
 8011f6c:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON;
 8011f6e:	2307      	movs	r3, #7
 8011f70:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8011f72:	1d3b      	adds	r3, r7, #4
 8011f74:	2201      	movs	r2, #1
 8011f76:	4619      	mov	r1, r3
 8011f78:	4899      	ldr	r0, [pc, #612]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8011f7a:	f7f4 fc09 	bl	8006790 <HAL_CRC_Calculate>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	4a9e      	ldr	r2, [pc, #632]	; (80121fc <Crc_InitCrcValuesForUart+0x31c>)
 8011f82:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF;
 8011f84:	2308      	movs	r3, #8
 8011f86:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8011f88:	1d3b      	adds	r3, r7, #4
 8011f8a:	2201      	movs	r2, #1
 8011f8c:	4619      	mov	r1, r3
 8011f8e:	4894      	ldr	r0, [pc, #592]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8011f90:	f7f4 fbfe 	bl	8006790 <HAL_CRC_Calculate>
 8011f94:	4603      	mov	r3, r0
 8011f96:	4a9a      	ldr	r2, [pc, #616]	; (8012200 <Crc_InitCrcValuesForUart+0x320>)
 8011f98:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON;
 8011f9a:	2309      	movs	r3, #9
 8011f9c:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8011f9e:	1d3b      	adds	r3, r7, #4
 8011fa0:	2201      	movs	r2, #1
 8011fa2:	4619      	mov	r1, r3
 8011fa4:	488e      	ldr	r0, [pc, #568]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8011fa6:	f7f4 fbf3 	bl	8006790 <HAL_CRC_Calculate>
 8011faa:	4603      	mov	r3, r0
 8011fac:	4a95      	ldr	r2, [pc, #596]	; (8012204 <Crc_InitCrcValuesForUart+0x324>)
 8011fae:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF;
 8011fb0:	230a      	movs	r3, #10
 8011fb2:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8011fb4:	1d3b      	adds	r3, r7, #4
 8011fb6:	2201      	movs	r2, #1
 8011fb8:	4619      	mov	r1, r3
 8011fba:	4889      	ldr	r0, [pc, #548]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8011fbc:	f7f4 fbe8 	bl	8006790 <HAL_CRC_Calculate>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	4a91      	ldr	r2, [pc, #580]	; (8012208 <Crc_InitCrcValuesForUart+0x328>)
 8011fc4:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON;
 8011fc6:	230b      	movs	r3, #11
 8011fc8:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8011fca:	1d3b      	adds	r3, r7, #4
 8011fcc:	2201      	movs	r2, #1
 8011fce:	4619      	mov	r1, r3
 8011fd0:	4883      	ldr	r0, [pc, #524]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8011fd2:	f7f4 fbdd 	bl	8006790 <HAL_CRC_Calculate>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	4a8c      	ldr	r2, [pc, #560]	; (801220c <Crc_InitCrcValuesForUart+0x32c>)
 8011fda:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF;
 8011fdc:	230c      	movs	r3, #12
 8011fde:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8011fe0:	1d3b      	adds	r3, r7, #4
 8011fe2:	2201      	movs	r2, #1
 8011fe4:	4619      	mov	r1, r3
 8011fe6:	487e      	ldr	r0, [pc, #504]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8011fe8:	f7f4 fbd2 	bl	8006790 <HAL_CRC_Calculate>
 8011fec:	4603      	mov	r3, r0
 8011fee:	4a88      	ldr	r2, [pc, #544]	; (8012210 <Crc_InitCrcValuesForUart+0x330>)
 8011ff0:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON;
 8011ff2:	230d      	movs	r3, #13
 8011ff4:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8011ff6:	1d3b      	adds	r3, r7, #4
 8011ff8:	2201      	movs	r2, #1
 8011ffa:	4619      	mov	r1, r3
 8011ffc:	4878      	ldr	r0, [pc, #480]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8011ffe:	f7f4 fbc7 	bl	8006790 <HAL_CRC_Calculate>
 8012002:	4603      	mov	r3, r0
 8012004:	4a83      	ldr	r2, [pc, #524]	; (8012214 <Crc_InitCrcValuesForUart+0x334>)
 8012006:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF;
 8012008:	230e      	movs	r3, #14
 801200a:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 801200c:	1d3b      	adds	r3, r7, #4
 801200e:	2201      	movs	r2, #1
 8012010:	4619      	mov	r1, r3
 8012012:	4873      	ldr	r0, [pc, #460]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8012014:	f7f4 fbbc 	bl	8006790 <HAL_CRC_Calculate>
 8012018:	4603      	mov	r3, r0
 801201a:	4a7f      	ldr	r2, [pc, #508]	; (8012218 <Crc_InitCrcValuesForUart+0x338>)
 801201c:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON;
 801201e:	2311      	movs	r3, #17
 8012020:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012022:	1d3b      	adds	r3, r7, #4
 8012024:	2201      	movs	r2, #1
 8012026:	4619      	mov	r1, r3
 8012028:	486d      	ldr	r0, [pc, #436]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 801202a:	f7f4 fbb1 	bl	8006790 <HAL_CRC_Calculate>
 801202e:	4603      	mov	r3, r0
 8012030:	4a7a      	ldr	r2, [pc, #488]	; (801221c <Crc_InitCrcValuesForUart+0x33c>)
 8012032:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF;
 8012034:	2312      	movs	r3, #18
 8012036:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012038:	1d3b      	adds	r3, r7, #4
 801203a:	2201      	movs	r2, #1
 801203c:	4619      	mov	r1, r3
 801203e:	4868      	ldr	r0, [pc, #416]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8012040:	f7f4 fba6 	bl	8006790 <HAL_CRC_Calculate>
 8012044:	4603      	mov	r3, r0
 8012046:	4a76      	ldr	r2, [pc, #472]	; (8012220 <Crc_InitCrcValuesForUart+0x340>)
 8012048:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON;
 801204a:	2315      	movs	r3, #21
 801204c:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 801204e:	1d3b      	adds	r3, r7, #4
 8012050:	2201      	movs	r2, #1
 8012052:	4619      	mov	r1, r3
 8012054:	4862      	ldr	r0, [pc, #392]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8012056:	f7f4 fb9b 	bl	8006790 <HAL_CRC_Calculate>
 801205a:	4603      	mov	r3, r0
 801205c:	4a71      	ldr	r2, [pc, #452]	; (8012224 <Crc_InitCrcValuesForUart+0x344>)
 801205e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF;
 8012060:	2316      	movs	r3, #22
 8012062:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012064:	1d3b      	adds	r3, r7, #4
 8012066:	2201      	movs	r2, #1
 8012068:	4619      	mov	r1, r3
 801206a:	485d      	ldr	r0, [pc, #372]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 801206c:	f7f4 fb90 	bl	8006790 <HAL_CRC_Calculate>
 8012070:	4603      	mov	r3, r0
 8012072:	4a6d      	ldr	r2, [pc, #436]	; (8012228 <Crc_InitCrcValuesForUart+0x348>)
 8012074:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO;
 8012076:	2317      	movs	r3, #23
 8012078:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionZero = HAL_CRC_Calculate(&hcrc, &value, 1);
 801207a:	1d3b      	adds	r3, r7, #4
 801207c:	2201      	movs	r2, #1
 801207e:	4619      	mov	r1, r3
 8012080:	4857      	ldr	r0, [pc, #348]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8012082:	f7f4 fb85 	bl	8006790 <HAL_CRC_Calculate>
 8012086:	4603      	mov	r3, r0
 8012088:	4a68      	ldr	r2, [pc, #416]	; (801222c <Crc_InitCrcValuesForUart+0x34c>)
 801208a:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 801208c:	2318      	movs	r3, #24
 801208e:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_AutomaticLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012090:	1d3b      	adds	r3, r7, #4
 8012092:	2201      	movs	r2, #1
 8012094:	4619      	mov	r1, r3
 8012096:	4852      	ldr	r0, [pc, #328]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8012098:	f7f4 fb7a 	bl	8006790 <HAL_CRC_Calculate>
 801209c:	4603      	mov	r3, r0
 801209e:	4a64      	ldr	r2, [pc, #400]	; (8012230 <Crc_InitCrcValuesForUart+0x350>)
 80120a0:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 80120a2:	2319      	movs	r3, #25
 80120a4:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 80120a6:	1d3b      	adds	r3, r7, #4
 80120a8:	2201      	movs	r2, #1
 80120aa:	4619      	mov	r1, r3
 80120ac:	484c      	ldr	r0, [pc, #304]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 80120ae:	f7f4 fb6f 	bl	8006790 <HAL_CRC_Calculate>
 80120b2:	4603      	mov	r3, r0
 80120b4:	4a5f      	ldr	r2, [pc, #380]	; (8012234 <Crc_InitCrcValuesForUart+0x354>)
 80120b6:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 80120b8:	231a      	movs	r3, #26
 80120ba:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_NightTimeLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 80120bc:	1d3b      	adds	r3, r7, #4
 80120be:	2201      	movs	r2, #1
 80120c0:	4619      	mov	r1, r3
 80120c2:	4847      	ldr	r0, [pc, #284]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 80120c4:	f7f4 fb64 	bl	8006790 <HAL_CRC_Calculate>
 80120c8:	4603      	mov	r3, r0
 80120ca:	4a5b      	ldr	r2, [pc, #364]	; (8012238 <Crc_InitCrcValuesForUart+0x358>)
 80120cc:	6013      	str	r3, [r2, #0]
	Crc_Ignition_Turn_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 80120ce:	1d3b      	adds	r3, r7, #4
 80120d0:	2201      	movs	r2, #1
 80120d2:	4619      	mov	r1, r3
 80120d4:	4842      	ldr	r0, [pc, #264]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 80120d6:	f7f4 fb5b 	bl	8006790 <HAL_CRC_Calculate>
 80120da:	4603      	mov	r3, r0
 80120dc:	4a57      	ldr	r2, [pc, #348]	; (801223c <Crc_InitCrcValuesForUart+0x35c>)
 80120de:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON;
 80120e0:	2313      	movs	r3, #19
 80120e2:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 80120e4:	1d3b      	adds	r3, r7, #4
 80120e6:	2201      	movs	r2, #1
 80120e8:	4619      	mov	r1, r3
 80120ea:	483d      	ldr	r0, [pc, #244]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 80120ec:	f7f4 fb50 	bl	8006790 <HAL_CRC_Calculate>
 80120f0:	4603      	mov	r3, r0
 80120f2:	4a53      	ldr	r2, [pc, #332]	; (8012240 <Crc_InitCrcValuesForUart+0x360>)
 80120f4:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF;
 80120f6:	2314      	movs	r3, #20
 80120f8:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLights_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 80120fa:	1d3b      	adds	r3, r7, #4
 80120fc:	2201      	movs	r2, #1
 80120fe:	4619      	mov	r1, r3
 8012100:	4837      	ldr	r0, [pc, #220]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8012102:	f7f4 fb45 	bl	8006790 <HAL_CRC_Calculate>
 8012106:	4603      	mov	r3, r0
 8012108:	4a4e      	ldr	r2, [pc, #312]	; (8012244 <Crc_InitCrcValuesForUart+0x364>)
 801210a:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_LEGVENT_ON;
 801210c:	2337      	movs	r3, #55	; 0x37
 801210e:	607b      	str	r3, [r7, #4]
	Crc_Hvac_LegVent_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012110:	1d3b      	adds	r3, r7, #4
 8012112:	2201      	movs	r2, #1
 8012114:	4619      	mov	r1, r3
 8012116:	4832      	ldr	r0, [pc, #200]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8012118:	f7f4 fb3a 	bl	8006790 <HAL_CRC_Calculate>
 801211c:	4603      	mov	r3, r0
 801211e:	4a4a      	ldr	r2, [pc, #296]	; (8012248 <Crc_InitCrcValuesForUart+0x368>)
 8012120:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_LEGVENT_OFF;
 8012122:	2338      	movs	r3, #56	; 0x38
 8012124:	607b      	str	r3, [r7, #4]
	Crc_Hvac_LegVent_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012126:	1d3b      	adds	r3, r7, #4
 8012128:	2201      	movs	r2, #1
 801212a:	4619      	mov	r1, r3
 801212c:	482c      	ldr	r0, [pc, #176]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 801212e:	f7f4 fb2f 	bl	8006790 <HAL_CRC_Calculate>
 8012132:	4603      	mov	r3, r0
 8012134:	4a45      	ldr	r2, [pc, #276]	; (801224c <Crc_InitCrcValuesForUart+0x36c>)
 8012136:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_MIDVENT_ON;
 8012138:	2339      	movs	r3, #57	; 0x39
 801213a:	607b      	str	r3, [r7, #4]
	Crc_Hvac_MidVent_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 801213c:	1d3b      	adds	r3, r7, #4
 801213e:	2201      	movs	r2, #1
 8012140:	4619      	mov	r1, r3
 8012142:	4827      	ldr	r0, [pc, #156]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8012144:	f7f4 fb24 	bl	8006790 <HAL_CRC_Calculate>
 8012148:	4603      	mov	r3, r0
 801214a:	4a41      	ldr	r2, [pc, #260]	; (8012250 <Crc_InitCrcValuesForUart+0x370>)
 801214c:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_MIDVENT_OFF;
 801214e:	233a      	movs	r3, #58	; 0x3a
 8012150:	607b      	str	r3, [r7, #4]
	Crc_Hvac_MidVent_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012152:	1d3b      	adds	r3, r7, #4
 8012154:	2201      	movs	r2, #1
 8012156:	4619      	mov	r1, r3
 8012158:	4821      	ldr	r0, [pc, #132]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 801215a:	f7f4 fb19 	bl	8006790 <HAL_CRC_Calculate>
 801215e:	4603      	mov	r3, r0
 8012160:	4a3c      	ldr	r2, [pc, #240]	; (8012254 <Crc_InitCrcValuesForUart+0x374>)
 8012162:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_WINDSHIELDVENT_ON;
 8012164:	233b      	movs	r3, #59	; 0x3b
 8012166:	607b      	str	r3, [r7, #4]
	Crc_Hvac_WindshieldVent_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012168:	1d3b      	adds	r3, r7, #4
 801216a:	2201      	movs	r2, #1
 801216c:	4619      	mov	r1, r3
 801216e:	481c      	ldr	r0, [pc, #112]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8012170:	f7f4 fb0e 	bl	8006790 <HAL_CRC_Calculate>
 8012174:	4603      	mov	r3, r0
 8012176:	4a38      	ldr	r2, [pc, #224]	; (8012258 <Crc_InitCrcValuesForUart+0x378>)
 8012178:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_WINDSHIELDVENT_OFF;
 801217a:	233c      	movs	r3, #60	; 0x3c
 801217c:	607b      	str	r3, [r7, #4]
	Crc_Hvac_WindshieldVent_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 801217e:	1d3b      	adds	r3, r7, #4
 8012180:	2201      	movs	r2, #1
 8012182:	4619      	mov	r1, r3
 8012184:	4816      	ldr	r0, [pc, #88]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 8012186:	f7f4 fb03 	bl	8006790 <HAL_CRC_Calculate>
 801218a:	4603      	mov	r3, r0
 801218c:	4a33      	ldr	r2, [pc, #204]	; (801225c <Crc_InitCrcValuesForUart+0x37c>)
 801218e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_WINDSHIELDDEFROST_ON;
 8012190:	233d      	movs	r3, #61	; 0x3d
 8012192:	607b      	str	r3, [r7, #4]
	Crc_Hvac_WindshieldDefrost_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012194:	1d3b      	adds	r3, r7, #4
 8012196:	2201      	movs	r2, #1
 8012198:	4619      	mov	r1, r3
 801219a:	4811      	ldr	r0, [pc, #68]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 801219c:	f7f4 faf8 	bl	8006790 <HAL_CRC_Calculate>
 80121a0:	4603      	mov	r3, r0
 80121a2:	4a2f      	ldr	r2, [pc, #188]	; (8012260 <Crc_InitCrcValuesForUart+0x380>)
 80121a4:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_WINDSHIELDDEFROST_OFF;
 80121a6:	233e      	movs	r3, #62	; 0x3e
 80121a8:	607b      	str	r3, [r7, #4]
	Crc_Hvac_WindshieldDefrost_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 80121aa:	1d3b      	adds	r3, r7, #4
 80121ac:	2201      	movs	r2, #1
 80121ae:	4619      	mov	r1, r3
 80121b0:	480b      	ldr	r0, [pc, #44]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 80121b2:	f7f4 faed 	bl	8006790 <HAL_CRC_Calculate>
 80121b6:	4603      	mov	r3, r0
 80121b8:	4a2a      	ldr	r2, [pc, #168]	; (8012264 <Crc_InitCrcValuesForUart+0x384>)
 80121ba:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_REARWINDSHIELDDEFROST_ON;
 80121bc:	2346      	movs	r3, #70	; 0x46
 80121be:	607b      	str	r3, [r7, #4]
	Crc_Hvac_RearWindshieldDefrost_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 80121c0:	1d3b      	adds	r3, r7, #4
 80121c2:	2201      	movs	r2, #1
 80121c4:	4619      	mov	r1, r3
 80121c6:	4806      	ldr	r0, [pc, #24]	; (80121e0 <Crc_InitCrcValuesForUart+0x300>)
 80121c8:	f7f4 fae2 	bl	8006790 <HAL_CRC_Calculate>
 80121cc:	4603      	mov	r3, r0
 80121ce:	4a26      	ldr	r2, [pc, #152]	; (8012268 <Crc_InitCrcValuesForUart+0x388>)
 80121d0:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_REARWINDSHIELDDEFROST_OFF;
 80121d2:	2347      	movs	r3, #71	; 0x47
 80121d4:	607b      	str	r3, [r7, #4]
	Crc_Hvac_RearWindshieldDefrost_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 80121d6:	1d3b      	adds	r3, r7, #4
 80121d8:	2201      	movs	r2, #1
 80121da:	4619      	mov	r1, r3
 80121dc:	e046      	b.n	801226c <Crc_InitCrcValuesForUart+0x38c>
 80121de:	bf00      	nop
 80121e0:	20000260 	.word	0x20000260
 80121e4:	20009360 	.word	0x20009360
 80121e8:	20009364 	.word	0x20009364
 80121ec:	20009304 	.word	0x20009304
 80121f0:	20009308 	.word	0x20009308
 80121f4:	2000930c 	.word	0x2000930c
 80121f8:	20009310 	.word	0x20009310
 80121fc:	20009314 	.word	0x20009314
 8012200:	20009318 	.word	0x20009318
 8012204:	2000931c 	.word	0x2000931c
 8012208:	20009320 	.word	0x20009320
 801220c:	20009324 	.word	0x20009324
 8012210:	20009328 	.word	0x20009328
 8012214:	2000932c 	.word	0x2000932c
 8012218:	20009330 	.word	0x20009330
 801221c:	20009334 	.word	0x20009334
 8012220:	20009338 	.word	0x20009338
 8012224:	2000933c 	.word	0x2000933c
 8012228:	20009340 	.word	0x20009340
 801222c:	20009344 	.word	0x20009344
 8012230:	20009348 	.word	0x20009348
 8012234:	2000934c 	.word	0x2000934c
 8012238:	20009350 	.word	0x20009350
 801223c:	20009354 	.word	0x20009354
 8012240:	20009358 	.word	0x20009358
 8012244:	2000935c 	.word	0x2000935c
 8012248:	20009368 	.word	0x20009368
 801224c:	2000936c 	.word	0x2000936c
 8012250:	20009370 	.word	0x20009370
 8012254:	20009374 	.word	0x20009374
 8012258:	20009378 	.word	0x20009378
 801225c:	2000937c 	.word	0x2000937c
 8012260:	20009380 	.word	0x20009380
 8012264:	20009384 	.word	0x20009384
 8012268:	20009388 	.word	0x20009388
 801226c:	4825      	ldr	r0, [pc, #148]	; (8012304 <Crc_InitCrcValuesForUart+0x424>)
 801226e:	f7f4 fa8f 	bl	8006790 <HAL_CRC_Calculate>
 8012272:	4603      	mov	r3, r0
 8012274:	4a24      	ldr	r2, [pc, #144]	; (8012308 <Crc_InitCrcValuesForUart+0x428>)
 8012276:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_AC_ON;
 8012278:	233f      	movs	r3, #63	; 0x3f
 801227a:	607b      	str	r3, [r7, #4]
	Crc_Hvac_Ac_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 801227c:	1d3b      	adds	r3, r7, #4
 801227e:	2201      	movs	r2, #1
 8012280:	4619      	mov	r1, r3
 8012282:	4820      	ldr	r0, [pc, #128]	; (8012304 <Crc_InitCrcValuesForUart+0x424>)
 8012284:	f7f4 fa84 	bl	8006790 <HAL_CRC_Calculate>
 8012288:	4603      	mov	r3, r0
 801228a:	4a20      	ldr	r2, [pc, #128]	; (801230c <Crc_InitCrcValuesForUart+0x42c>)
 801228c:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_AC_OFF;
 801228e:	2340      	movs	r3, #64	; 0x40
 8012290:	607b      	str	r3, [r7, #4]
	Crc_Hvac_Ac_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 8012292:	1d3b      	adds	r3, r7, #4
 8012294:	2201      	movs	r2, #1
 8012296:	4619      	mov	r1, r3
 8012298:	481a      	ldr	r0, [pc, #104]	; (8012304 <Crc_InitCrcValuesForUart+0x424>)
 801229a:	f7f4 fa79 	bl	8006790 <HAL_CRC_Calculate>
 801229e:	4603      	mov	r3, r0
 80122a0:	4a1b      	ldr	r2, [pc, #108]	; (8012310 <Crc_InitCrcValuesForUart+0x430>)
 80122a2:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_RECIRCULATION;
 80122a4:	2341      	movs	r3, #65	; 0x41
 80122a6:	607b      	str	r3, [r7, #4]
	Crc_Hvac_Recirculation = HAL_CRC_Calculate(&hcrc, &value, 1);
 80122a8:	1d3b      	adds	r3, r7, #4
 80122aa:	2201      	movs	r2, #1
 80122ac:	4619      	mov	r1, r3
 80122ae:	4815      	ldr	r0, [pc, #84]	; (8012304 <Crc_InitCrcValuesForUart+0x424>)
 80122b0:	f7f4 fa6e 	bl	8006790 <HAL_CRC_Calculate>
 80122b4:	4603      	mov	r3, r0
 80122b6:	4a17      	ldr	r2, [pc, #92]	; (8012314 <Crc_InitCrcValuesForUart+0x434>)
 80122b8:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_NORECIRCULATION;
 80122ba:	2342      	movs	r3, #66	; 0x42
 80122bc:	607b      	str	r3, [r7, #4]
	Crc_Hvac_NoRecirculation = HAL_CRC_Calculate(&hcrc, &value, 1);
 80122be:	1d3b      	adds	r3, r7, #4
 80122c0:	2201      	movs	r2, #1
 80122c2:	4619      	mov	r1, r3
 80122c4:	480f      	ldr	r0, [pc, #60]	; (8012304 <Crc_InitCrcValuesForUart+0x424>)
 80122c6:	f7f4 fa63 	bl	8006790 <HAL_CRC_Calculate>
 80122ca:	4603      	mov	r3, r0
 80122cc:	4a12      	ldr	r2, [pc, #72]	; (8012318 <Crc_InitCrcValuesForUart+0x438>)
 80122ce:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_AUTOMATICMODE_ON;
 80122d0:	2344      	movs	r3, #68	; 0x44
 80122d2:	607b      	str	r3, [r7, #4]
	Crc_Hvac_AutomaticMode_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 80122d4:	1d3b      	adds	r3, r7, #4
 80122d6:	2201      	movs	r2, #1
 80122d8:	4619      	mov	r1, r3
 80122da:	480a      	ldr	r0, [pc, #40]	; (8012304 <Crc_InitCrcValuesForUart+0x424>)
 80122dc:	f7f4 fa58 	bl	8006790 <HAL_CRC_Calculate>
 80122e0:	4603      	mov	r3, r0
 80122e2:	4a0e      	ldr	r2, [pc, #56]	; (801231c <Crc_InitCrcValuesForUart+0x43c>)
 80122e4:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_HVAC_AUTOMATICMODE_OFF;
 80122e6:	2345      	movs	r3, #69	; 0x45
 80122e8:	607b      	str	r3, [r7, #4]
	Crc_Hvac_AutomaticMode_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 80122ea:	1d3b      	adds	r3, r7, #4
 80122ec:	2201      	movs	r2, #1
 80122ee:	4619      	mov	r1, r3
 80122f0:	4804      	ldr	r0, [pc, #16]	; (8012304 <Crc_InitCrcValuesForUart+0x424>)
 80122f2:	f7f4 fa4d 	bl	8006790 <HAL_CRC_Calculate>
 80122f6:	4603      	mov	r3, r0
 80122f8:	4a09      	ldr	r2, [pc, #36]	; (8012320 <Crc_InitCrcValuesForUart+0x440>)
 80122fa:	6013      	str	r3, [r2, #0]
}
 80122fc:	bf00      	nop
 80122fe:	3708      	adds	r7, #8
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}
 8012304:	20000260 	.word	0x20000260
 8012308:	2000938c 	.word	0x2000938c
 801230c:	20009390 	.word	0x20009390
 8012310:	20009394 	.word	0x20009394
 8012314:	20009398 	.word	0x20009398
 8012318:	2000939c 	.word	0x2000939c
 801231c:	200093a0 	.word	0x200093a0
 8012320:	200093a4 	.word	0x200093a4

08012324 <HAL_CRC_ErrorCallback>:
/***********************************************************************************
* Function: HAL_CRC_ErrorCallback												   *
* Description: Called in case of error. 								 		   *
************************************************************************************/
VOID HAL_CRC_ErrorCallback(CRC_HandleTypeDef *hcrc)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b082      	sub	sp, #8
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
	/* Perform re-initialization. */
	Crc_DeInit();
 801232c:	f000 f81e 	bl	801236c <Crc_DeInit>
	Crc_Init();
 8012330:	f000 f804 	bl	801233c <Crc_Init>
}
 8012334:	bf00      	nop
 8012336:	3708      	adds	r7, #8
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}

0801233c <Crc_Init>:
/***********************************************************************************
* Function: Crc_Init													   		   *
* Description: Initialize the peripheral.								 		   *
************************************************************************************/
StdReturnType Crc_Init()
{
 801233c:	b580      	push	{r7, lr}
 801233e:	af00      	add	r7, sp, #0
	/* Initialize the CRC.
	 * Call for the error callback in case of faulty initialization. */
	hcrc.Instance = CRC;
 8012340:	4b08      	ldr	r3, [pc, #32]	; (8012364 <Crc_Init+0x28>)
 8012342:	4a09      	ldr	r2, [pc, #36]	; (8012368 <Crc_Init+0x2c>)
 8012344:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8012346:	4807      	ldr	r0, [pc, #28]	; (8012364 <Crc_Init+0x28>)
 8012348:	f7f4 f9d6 	bl	80066f8 <HAL_CRC_Init>
 801234c:	4603      	mov	r3, r0
 801234e:	2b00      	cmp	r3, #0
 8012350:	d002      	beq.n	8012358 <Crc_Init+0x1c>
	{
		HAL_CRC_ErrorCallback(&hcrc);
 8012352:	4804      	ldr	r0, [pc, #16]	; (8012364 <Crc_Init+0x28>)
 8012354:	f7ff ffe6 	bl	8012324 <HAL_CRC_ErrorCallback>
	else
	{
		/* do nothing */
	}
	/* Initialize the default CRC UART data received values. */
	Crc_InitCrcValuesForUart();
 8012358:	f7ff fdc2 	bl	8011ee0 <Crc_InitCrcValuesForUart>
	return E_OK;
 801235c:	2300      	movs	r3, #0
}
 801235e:	4618      	mov	r0, r3
 8012360:	bd80      	pop	{r7, pc}
 8012362:	bf00      	nop
 8012364:	20000260 	.word	0x20000260
 8012368:	40023000 	.word	0x40023000

0801236c <Crc_DeInit>:
/***********************************************************************************
* Function: Crc_DeInit													   		   *
* Description: De-initialize the peripheral.		 		   					   *
************************************************************************************/
StdReturnType Crc_DeInit()
{
 801236c:	b580      	push	{r7, lr}
 801236e:	af00      	add	r7, sp, #0
	/* De-initialize the CRC. */
	HAL_CRC_DeInit(&hcrc);
 8012370:	4802      	ldr	r0, [pc, #8]	; (801237c <Crc_DeInit+0x10>)
 8012372:	f7f4 f9dd 	bl	8006730 <HAL_CRC_DeInit>
	return E_OK;
 8012376:	2300      	movs	r3, #0
}
 8012378:	4618      	mov	r0, r3
 801237a:	bd80      	pop	{r7, pc}
 801237c:	20000260 	.word	0x20000260

08012380 <Crc_MainFunction>:
/***********************************************************************************
* Function: Crc_MainFunction													   *
* Description: Peripheral main function.		 		   						   *
************************************************************************************/
VOID Crc_MainFunction()
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b082      	sub	sp, #8
 8012384:	af00      	add	r7, sp, #0
	/* Get the error status in the local variable. */
	uint32 returnValue = HAL_CRC_GetState(&hcrc);
 8012386:	4825      	ldr	r0, [pc, #148]	; (801241c <Crc_MainFunction+0x9c>)
 8012388:	f7f4 fa35 	bl	80067f6 <HAL_CRC_GetState>
 801238c:	4603      	mov	r3, r0
 801238e:	607b      	str	r3, [r7, #4]
	/* Process module state. */
	switch(Crc_BswState)
 8012390:	4b23      	ldr	r3, [pc, #140]	; (8012420 <Crc_MainFunction+0xa0>)
 8012392:	781b      	ldrb	r3, [r3, #0]
 8012394:	2b03      	cmp	r3, #3
 8012396:	d81a      	bhi.n	80123ce <Crc_MainFunction+0x4e>
 8012398:	a201      	add	r2, pc, #4	; (adr r2, 80123a0 <Crc_MainFunction+0x20>)
 801239a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801239e:	bf00      	nop
 80123a0:	080123b1 	.word	0x080123b1
 80123a4:	080123cf 	.word	0x080123cf
 80123a8:	080123c3 	.word	0x080123c3
 80123ac:	080123bd 	.word	0x080123bd
	{
		case CRC_INIT_STATE:
			Crc_Init();
 80123b0:	f7ff ffc4 	bl	801233c <Crc_Init>
			Crc_BswState = CRC_INITCRCVALUES_STATE;
 80123b4:	4b1a      	ldr	r3, [pc, #104]	; (8012420 <Crc_MainFunction+0xa0>)
 80123b6:	2202      	movs	r2, #2
 80123b8:	701a      	strb	r2, [r3, #0]
			break;
 80123ba:	e009      	b.n	80123d0 <Crc_MainFunction+0x50>
		case CRC_DEINIT_STATE:
			Crc_DeInit();
 80123bc:	f7ff ffd6 	bl	801236c <Crc_DeInit>
			break;
 80123c0:	e006      	b.n	80123d0 <Crc_MainFunction+0x50>
		case CRC_VERIFYUARTDATA_STATE:
			break;
		case CRC_INITCRCVALUES_STATE:
			Crc_InitCrcValuesForUart();
 80123c2:	f7ff fd8d 	bl	8011ee0 <Crc_InitCrcValuesForUart>
			Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 80123c6:	4b16      	ldr	r3, [pc, #88]	; (8012420 <Crc_MainFunction+0xa0>)
 80123c8:	2201      	movs	r2, #1
 80123ca:	701a      	strb	r2, [r3, #0]
			break;
 80123cc:	e000      	b.n	80123d0 <Crc_MainFunction+0x50>
		default:
			break;
 80123ce:	bf00      	nop
	}
	/* Process peripheral state. */
	switch(returnValue)
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2b04      	cmp	r3, #4
 80123d4:	d81c      	bhi.n	8012410 <Crc_MainFunction+0x90>
 80123d6:	a201      	add	r2, pc, #4	; (adr r2, 80123dc <Crc_MainFunction+0x5c>)
 80123d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123dc:	080123f1 	.word	0x080123f1
 80123e0:	080123f9 	.word	0x080123f9
 80123e4:	08012411 	.word	0x08012411
 80123e8:	08012401 	.word	0x08012401
 80123ec:	08012409 	.word	0x08012409
	{
		case HAL_CRC_STATE_RESET:
			Crc_BswState = CRC_INIT_STATE;
 80123f0:	4b0b      	ldr	r3, [pc, #44]	; (8012420 <Crc_MainFunction+0xa0>)
 80123f2:	2200      	movs	r2, #0
 80123f4:	701a      	strb	r2, [r3, #0]
			break;
 80123f6:	e00c      	b.n	8012412 <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_READY:
			Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 80123f8:	4b09      	ldr	r3, [pc, #36]	; (8012420 <Crc_MainFunction+0xa0>)
 80123fa:	2201      	movs	r2, #1
 80123fc:	701a      	strb	r2, [r3, #0]
			break;
 80123fe:	e008      	b.n	8012412 <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_BUSY:
			break;
		case HAL_CRC_STATE_TIMEOUT:
			HAL_CRC_ErrorCallback(&hcrc);
 8012400:	4806      	ldr	r0, [pc, #24]	; (801241c <Crc_MainFunction+0x9c>)
 8012402:	f7ff ff8f 	bl	8012324 <HAL_CRC_ErrorCallback>
			break;
 8012406:	e004      	b.n	8012412 <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_ERROR:
			HAL_CRC_ErrorCallback(&hcrc);
 8012408:	4804      	ldr	r0, [pc, #16]	; (801241c <Crc_MainFunction+0x9c>)
 801240a:	f7ff ff8b 	bl	8012324 <HAL_CRC_ErrorCallback>
			break;
 801240e:	e000      	b.n	8012412 <Crc_MainFunction+0x92>
		default:
			break;
 8012410:	bf00      	nop
	}
}
 8012412:	bf00      	nop
 8012414:	3708      	adds	r7, #8
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}
 801241a:	bf00      	nop
 801241c:	20000260 	.word	0x20000260
 8012420:	20009300 	.word	0x20009300

08012424 <EcuM_CheckForWakeupEvent>:
/***********************************************************************************
* Function: EcuM_CheckForWakeupEvent									   		   *
* Description: Checks for the wake up event and sends it forward for processing.   *
************************************************************************************/
VOID EcuM_CheckForWakeupEvent()
{
 8012424:	b580      	push	{r7, lr}
 8012426:	af00      	add	r7, sp, #0
	/* Check if power-on reset wake-up event occurred. */
	if((RCC->CSR & RCC_CSR_PORRSTF) != 0)
 8012428:	4b2a      	ldr	r3, [pc, #168]	; (80124d4 <EcuM_CheckForWakeupEvent+0xb0>)
 801242a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801242c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012430:	2b00      	cmp	r3, #0
 8012432:	d009      	beq.n	8012448 <EcuM_CheckForWakeupEvent+0x24>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_POR);
 8012434:	2000      	movs	r0, #0
 8012436:	f000 f84f 	bl	80124d8 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_PORRSTF;
 801243a:	4b26      	ldr	r3, [pc, #152]	; (80124d4 <EcuM_CheckForWakeupEvent+0xb0>)
 801243c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801243e:	4a25      	ldr	r2, [pc, #148]	; (80124d4 <EcuM_CheckForWakeupEvent+0xb0>)
 8012440:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012444:	6753      	str	r3, [r2, #116]	; 0x74
 8012446:	e03c      	b.n	80124c2 <EcuM_CheckForWakeupEvent+0x9e>
	}/* Check if brown-out reset wake-up event occurred.*/
	else if((RCC->CSR & RCC_CSR_BORRSTF) != 0)
 8012448:	4b22      	ldr	r3, [pc, #136]	; (80124d4 <EcuM_CheckForWakeupEvent+0xb0>)
 801244a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801244c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012450:	2b00      	cmp	r3, #0
 8012452:	d009      	beq.n	8012468 <EcuM_CheckForWakeupEvent+0x44>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_BOR);
 8012454:	2001      	movs	r0, #1
 8012456:	f000 f83f 	bl	80124d8 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_BORRSTF;
 801245a:	4b1e      	ldr	r3, [pc, #120]	; (80124d4 <EcuM_CheckForWakeupEvent+0xb0>)
 801245c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801245e:	4a1d      	ldr	r2, [pc, #116]	; (80124d4 <EcuM_CheckForWakeupEvent+0xb0>)
 8012460:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8012464:	6753      	str	r3, [r2, #116]	; 0x74
 8012466:	e02c      	b.n	80124c2 <EcuM_CheckForWakeupEvent+0x9e>
	}/* Check if a software reset wake-up event occurred. */
	else if((RCC->CSR & RCC_CSR_SFTRSTF) != 0)
 8012468:	4b1a      	ldr	r3, [pc, #104]	; (80124d4 <EcuM_CheckForWakeupEvent+0xb0>)
 801246a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012470:	2b00      	cmp	r3, #0
 8012472:	d009      	beq.n	8012488 <EcuM_CheckForWakeupEvent+0x64>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 8012474:	2002      	movs	r0, #2
 8012476:	f000 f82f 	bl	80124d8 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_SFTRSTF;
 801247a:	4b16      	ldr	r3, [pc, #88]	; (80124d4 <EcuM_CheckForWakeupEvent+0xb0>)
 801247c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801247e:	4a15      	ldr	r2, [pc, #84]	; (80124d4 <EcuM_CheckForWakeupEvent+0xb0>)
 8012480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012484:	6753      	str	r3, [r2, #116]	; 0x74
 8012486:	e01c      	b.n	80124c2 <EcuM_CheckForWakeupEvent+0x9e>
	}/* Check if a windowed watchdog reset wake-up event occurred. */
	else if((RCC->CSR & RCC_CSR_IWDGRSTF) != 0)
 8012488:	4b12      	ldr	r3, [pc, #72]	; (80124d4 <EcuM_CheckForWakeupEvent+0xb0>)
 801248a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801248c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012490:	2b00      	cmp	r3, #0
 8012492:	d009      	beq.n	80124a8 <EcuM_CheckForWakeupEvent+0x84>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 8012494:	2003      	movs	r0, #3
 8012496:	f000 f81f 	bl	80124d8 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_IWDGRSTF;
 801249a:	4b0e      	ldr	r3, [pc, #56]	; (80124d4 <EcuM_CheckForWakeupEvent+0xb0>)
 801249c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801249e:	4a0d      	ldr	r2, [pc, #52]	; (80124d4 <EcuM_CheckForWakeupEvent+0xb0>)
 80124a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80124a4:	6753      	str	r3, [r2, #116]	; 0x74
 80124a6:	e00c      	b.n	80124c2 <EcuM_CheckForWakeupEvent+0x9e>
	}/* Check if a low power reset wake-up event occurred. */
	else if((RCC->CSR & RCC_CSR_LPWRRSTF) != 0)
 80124a8:	4b0a      	ldr	r3, [pc, #40]	; (80124d4 <EcuM_CheckForWakeupEvent+0xb0>)
 80124aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	da08      	bge.n	80124c2 <EcuM_CheckForWakeupEvent+0x9e>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 80124b0:	2004      	movs	r0, #4
 80124b2:	f000 f811 	bl	80124d8 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_LPWRRSTF;
 80124b6:	4b07      	ldr	r3, [pc, #28]	; (80124d4 <EcuM_CheckForWakeupEvent+0xb0>)
 80124b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124ba:	4a06      	ldr	r2, [pc, #24]	; (80124d4 <EcuM_CheckForWakeupEvent+0xb0>)
 80124bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80124c0:	6753      	str	r3, [r2, #116]	; 0x74
	}/* Check if a button reset wake-up event occurred. */
	else
	{
		/* do nothing */
	}
	RCC->CSR |= RCC_CSR_RMVF;
 80124c2:	4b04      	ldr	r3, [pc, #16]	; (80124d4 <EcuM_CheckForWakeupEvent+0xb0>)
 80124c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124c6:	4a03      	ldr	r2, [pc, #12]	; (80124d4 <EcuM_CheckForWakeupEvent+0xb0>)
 80124c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80124cc:	6753      	str	r3, [r2, #116]	; 0x74
}
 80124ce:	bf00      	nop
 80124d0:	bd80      	pop	{r7, pc}
 80124d2:	bf00      	nop
 80124d4:	40023800 	.word	0x40023800

080124d8 <EcuM_SetWakeupSource>:
/***********************************************************************************
* Function: EcuM_SetWakeupSource									   		   	   *
* Description: Sets the wake up source received.			 		   			   *
************************************************************************************/
VOID EcuM_SetWakeupSource(uint32 wakeupSource)
{
 80124d8:	b480      	push	{r7}
 80124da:	b083      	sub	sp, #12
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
	/* If wake-up source is valid. */
	if(wakeupSource != NULL_PTR)
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d003      	beq.n	80124ee <EcuM_SetWakeupSource+0x16>
	{
		/* Store the wake-up event. */
		EcuM_GlobalState = wakeupSource;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	b2da      	uxtb	r2, r3
 80124ea:	4b04      	ldr	r3, [pc, #16]	; (80124fc <EcuM_SetWakeupSource+0x24>)
 80124ec:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 80124ee:	bf00      	nop
 80124f0:	370c      	adds	r7, #12
 80124f2:	46bd      	mov	sp, r7
 80124f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f8:	4770      	bx	lr
 80124fa:	bf00      	nop
 80124fc:	200093a9 	.word	0x200093a9

08012500 <EcuM_ProcessWakeupEvent>:
/***********************************************************************************
* Function: EcuM_ProcessWakeupEvent									   		       *
* Description: Sends forward the wake up event.							 		   *
************************************************************************************/
VOID EcuM_ProcessWakeupEvent()
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b082      	sub	sp, #8
 8012504:	af00      	add	r7, sp, #0
	/* Store the wake-up event into local variable. */
	uint8 localWakeupEvent = EcuM_GlobalState;
 8012506:	4b1d      	ldr	r3, [pc, #116]	; (801257c <EcuM_ProcessWakeupEvent+0x7c>)
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	71fb      	strb	r3, [r7, #7]
	/* Set the system fault for the respective wake-up event. */
	switch(localWakeupEvent)
 801250c:	79fb      	ldrb	r3, [r7, #7]
 801250e:	2b04      	cmp	r3, #4
 8012510:	d82f      	bhi.n	8012572 <EcuM_ProcessWakeupEvent+0x72>
 8012512:	a201      	add	r2, pc, #4	; (adr r2, 8012518 <EcuM_ProcessWakeupEvent+0x18>)
 8012514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012518:	0801252d 	.word	0x0801252d
 801251c:	0801253b 	.word	0x0801253b
 8012520:	08012549 	.word	0x08012549
 8012524:	08012557 	.word	0x08012557
 8012528:	08012565 	.word	0x08012565
	{
		case ECUM_WAKEUPSOURCE_POR:
			EcuM_GlobalState = 255;
 801252c:	4b13      	ldr	r3, [pc, #76]	; (801257c <EcuM_ProcessWakeupEvent+0x7c>)
 801252e:	22ff      	movs	r2, #255	; 0xff
 8012530:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_POR);
 8012532:	2000      	movs	r0, #0
 8012534:	f000 f9ae 	bl	8012894 <SystemManager_SetFault>
			break;
 8012538:	e01c      	b.n	8012574 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_BOR:
			EcuM_GlobalState = 255;
 801253a:	4b10      	ldr	r3, [pc, #64]	; (801257c <EcuM_ProcessWakeupEvent+0x7c>)
 801253c:	22ff      	movs	r2, #255	; 0xff
 801253e:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_BOR);
 8012540:	2001      	movs	r0, #1
 8012542:	f000 f9a7 	bl	8012894 <SystemManager_SetFault>
			break;
 8012546:	e015      	b.n	8012574 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_SOFTWARE_RESET:
			EcuM_GlobalState = 255;
 8012548:	4b0c      	ldr	r3, [pc, #48]	; (801257c <EcuM_ProcessWakeupEvent+0x7c>)
 801254a:	22ff      	movs	r2, #255	; 0xff
 801254c:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 801254e:	2002      	movs	r0, #2
 8012550:	f000 f9a0 	bl	8012894 <SystemManager_SetFault>
			break;
 8012554:	e00e      	b.n	8012574 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET:
			EcuM_GlobalState = 255;
 8012556:	4b09      	ldr	r3, [pc, #36]	; (801257c <EcuM_ProcessWakeupEvent+0x7c>)
 8012558:	22ff      	movs	r2, #255	; 0xff
 801255a:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 801255c:	2003      	movs	r0, #3
 801255e:	f000 f999 	bl	8012894 <SystemManager_SetFault>
			break;
 8012562:	e007      	b.n	8012574 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_LOWPOWER_RESET:
			EcuM_GlobalState = 255;
 8012564:	4b05      	ldr	r3, [pc, #20]	; (801257c <EcuM_ProcessWakeupEvent+0x7c>)
 8012566:	22ff      	movs	r2, #255	; 0xff
 8012568:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 801256a:	2004      	movs	r0, #4
 801256c:	f000 f992 	bl	8012894 <SystemManager_SetFault>
			break;
 8012570:	e000      	b.n	8012574 <EcuM_ProcessWakeupEvent+0x74>
		default:
			break;
 8012572:	bf00      	nop
	}
}
 8012574:	bf00      	nop
 8012576:	3708      	adds	r7, #8
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}
 801257c:	200093a9 	.word	0x200093a9

08012580 <EcuM_DriverInit>:
/***********************************************************************************
* Function: EcuM_DriverInit									   		               *
* Description: Initialize the drivers.			 		   						   *
************************************************************************************/
StdReturnType EcuM_DriverInit()
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b084      	sub	sp, #16
 8012584:	af00      	add	r7, sp, #0
	Port_Init();
 8012586:	f7fa fdff 	bl	800d188 <Port_Init>
	MX_DMA_Init();
 801258a:	f7f1 fc63 	bl	8003e54 <MX_DMA_Init>
	Spi_Init();
 801258e:	f7fa ff72 	bl	800d476 <Spi_Init>
	CanOverSpi_Init();
 8012592:	f7fa fe00 	bl	800d196 <CanOverSpi_Init>
	Can_Init();
 8012596:	f7f0 fe83 	bl	80032a0 <Can_Init>
	Tim_Init(TIMER_TWO);
 801259a:	2002      	movs	r0, #2
 801259c:	f7fb f8a2 	bl	800d6e4 <Tim_Init>
	Tim_Init(TIMER_THREE);
 80125a0:	2003      	movs	r0, #3
 80125a2:	f7fb f89f 	bl	800d6e4 <Tim_Init>
	Tim_Init(TIMER_FOUR);
 80125a6:	2004      	movs	r0, #4
 80125a8:	f7fb f89c 	bl	800d6e4 <Tim_Init>
	Tim_Init(TIMER_FIVE);
 80125ac:	2005      	movs	r0, #5
 80125ae:	f7fb f899 	bl	800d6e4 <Tim_Init>
	I2c_Init(I2C_CHANNEL_ONE);
 80125b2:	2001      	movs	r0, #1
 80125b4:	f7f0 ff46 	bl	8003444 <I2c_Init>
	Adc_Init();
 80125b8:	f7fa fca6 	bl	800cf08 <Adc_Init>
	Crc_Init();
 80125bc:	f7ff febe 	bl	801233c <Crc_Init>
	Uart_Init();
 80125c0:	f7f1 f99c 	bl	80038fc <Uart_Init>
	Watchdog_Init();
 80125c4:	f000 faac 	bl	8012b20 <Watchdog_Init>
	MX_NVIC_Init();
 80125c8:	f000 f994 	bl	80128f4 <MX_NVIC_Init>
	TIM2->CCR1 = 0;
 80125cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80125d0:	2200      	movs	r2, #0
 80125d2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = 0;
 80125d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80125d8:	2200      	movs	r2, #0
 80125da:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = 0;
 80125dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80125e0:	2200      	movs	r2, #0
 80125e2:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR1 = 0;
 80125e4:	4b25      	ldr	r3, [pc, #148]	; (801267c <EcuM_DriverInit+0xfc>)
 80125e6:	2200      	movs	r2, #0
 80125e8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 0;
 80125ea:	4b24      	ldr	r3, [pc, #144]	; (801267c <EcuM_DriverInit+0xfc>)
 80125ec:	2200      	movs	r2, #0
 80125ee:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 0;
 80125f0:	4b22      	ldr	r3, [pc, #136]	; (801267c <EcuM_DriverInit+0xfc>)
 80125f2:	2200      	movs	r2, #0
 80125f4:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 0;
 80125f6:	4b21      	ldr	r3, [pc, #132]	; (801267c <EcuM_DriverInit+0xfc>)
 80125f8:	2200      	movs	r2, #0
 80125fa:	641a      	str	r2, [r3, #64]	; 0x40
	MPU_Region_InitTypeDef MPU_InitStruct;
	HAL_MPU_Disable();
 80125fc:	f7f4 f800 	bl	8006600 <HAL_MPU_Disable>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8012600:	2301      	movs	r3, #1
 8012602:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = FLASH_BASE;
 8012604:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012608:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 801260a:	2311      	movs	r3, #17
 801260c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO;
 801260e:	2305      	movs	r3, #5
 8012610:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8012612:	2300      	movs	r3, #0
 8012614:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8012616:	2301      	movs	r3, #1
 8012618:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 801261a:	2301      	movs	r3, #1
 801261c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 801261e:	2300      	movs	r3, #0
 8012620:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8012622:	2300      	movs	r3, #0
 8012624:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8012626:	2300      	movs	r3, #0
 8012628:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 801262a:	2300      	movs	r3, #0
 801262c:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 801262e:	2301      	movs	r3, #1
 8012630:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x20000000;
 8012632:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8012636:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8012638:	230d      	movs	r3, #13
 801263a:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 801263c:	2303      	movs	r3, #3
 801263e:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8012640:	2301      	movs	r3, #1
 8012642:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8012644:	2301      	movs	r3, #1
 8012646:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8012648:	2301      	movs	r3, #1
 801264a:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 801264c:	2301      	movs	r3, #1
 801264e:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8012650:	2300      	movs	r3, #0
 8012652:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8012654:	2300      	movs	r3, #0
 8012656:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8012658:	2300      	movs	r3, #0
 801265a:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 801265c:	463b      	mov	r3, r7
 801265e:	4618      	mov	r0, r3
 8012660:	f7f4 f806 	bl	8006670 <HAL_MPU_ConfigRegion>
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8012664:	2004      	movs	r0, #4
 8012666:	f7f3 ffe3 	bl	8006630 <HAL_MPU_Enable>
	EcuM_BswState = ECUM_CHECKFORWAKEUP_STATE;
 801266a:	4b05      	ldr	r3, [pc, #20]	; (8012680 <EcuM_DriverInit+0x100>)
 801266c:	2201      	movs	r2, #1
 801266e:	701a      	strb	r2, [r3, #0]
	return E_OK;
 8012670:	2300      	movs	r3, #0
}
 8012672:	4618      	mov	r0, r3
 8012674:	3710      	adds	r7, #16
 8012676:	46bd      	mov	sp, r7
 8012678:	bd80      	pop	{r7, pc}
 801267a:	bf00      	nop
 801267c:	40000400 	.word	0x40000400
 8012680:	200093a8 	.word	0x200093a8

08012684 <EcuM_DriverDeInit>:
/***********************************************************************************
* Function: EcuM_DriverDeInit									   		           *
* Description: De-initialize the drivers.			 		                       *
************************************************************************************/
StdReturnType EcuM_DriverDeInit()
{
 8012684:	b580      	push	{r7, lr}
 8012686:	af00      	add	r7, sp, #0
	Adc_DeInit();
 8012688:	f7fa fc34 	bl	800cef4 <Adc_DeInit>
	Tim_DeInit(TIMER_TWO);
 801268c:	2002      	movs	r0, #2
 801268e:	f7fb fa47 	bl	800db20 <Tim_DeInit>
	Tim_DeInit(TIMER_THREE);
 8012692:	2003      	movs	r0, #3
 8012694:	f7fb fa44 	bl	800db20 <Tim_DeInit>
	Tim_DeInit(TIMER_FOUR);
 8012698:	2004      	movs	r0, #4
 801269a:	f7fb fa41 	bl	800db20 <Tim_DeInit>
	Tim_DeInit(TIMER_FIVE);
 801269e:	2005      	movs	r0, #5
 80126a0:	f7fb fa3e 	bl	800db20 <Tim_DeInit>
	Uart_DeInit();
 80126a4:	f7f1 f956 	bl	8003954 <Uart_DeInit>
	Crc_DeInit();
 80126a8:	f7ff fe60 	bl	801236c <Crc_DeInit>
	I2c_DeInit(I2C_CHANNEL_ONE);
 80126ac:	2001      	movs	r0, #1
 80126ae:	f7f0 ff01 	bl	80034b4 <I2c_DeInit>
#if(CAN_SPI_COMMUNICATION_ENABLE == STD_ON)
	Spi_DeInit();
	Can_DeInit();
#endif
	SystemManager_DeInit();
 80126b2:	f000 f8e9 	bl	8012888 <SystemManager_DeInit>
	return E_OK;
 80126b6:	2300      	movs	r3, #0
}
 80126b8:	4618      	mov	r0, r3
 80126ba:	bd80      	pop	{r7, pc}

080126bc <EcuM_MainFunction>:
/***********************************************************************************
* Function: EcuM_MainFunction									   		           *
* Description: Electronic control unit manager main function.			 		   *
************************************************************************************/
VOID EcuM_MainFunction()
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	af00      	add	r7, sp, #0
	switch(EcuM_BswState)
 80126c0:	4b12      	ldr	r3, [pc, #72]	; (801270c <EcuM_MainFunction+0x50>)
 80126c2:	781b      	ldrb	r3, [r3, #0]
 80126c4:	2b03      	cmp	r3, #3
 80126c6:	d81d      	bhi.n	8012704 <EcuM_MainFunction+0x48>
 80126c8:	a201      	add	r2, pc, #4	; (adr r2, 80126d0 <EcuM_MainFunction+0x14>)
 80126ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126ce:	bf00      	nop
 80126d0:	080126e1 	.word	0x080126e1
 80126d4:	080126ed 	.word	0x080126ed
 80126d8:	080126f9 	.word	0x080126f9
 80126dc:	080126e7 	.word	0x080126e7
	{
		case ECUM_INIT_STATE:
			EcuM_DriverInit();
 80126e0:	f7ff ff4e 	bl	8012580 <EcuM_DriverInit>
			break;
 80126e4:	e00f      	b.n	8012706 <EcuM_MainFunction+0x4a>
		case ECUM_DEINIT_STATE:
			EcuM_DriverDeInit();
 80126e6:	f7ff ffcd 	bl	8012684 <EcuM_DriverDeInit>
			break;
 80126ea:	e00c      	b.n	8012706 <EcuM_MainFunction+0x4a>
		case ECUM_CHECKFORWAKEUP_STATE:
			EcuM_CheckForWakeupEvent();
 80126ec:	f7ff fe9a 	bl	8012424 <EcuM_CheckForWakeupEvent>
			EcuM_BswState = ECUM_PROCESSWAKEUP_STATE;
 80126f0:	4b06      	ldr	r3, [pc, #24]	; (801270c <EcuM_MainFunction+0x50>)
 80126f2:	2202      	movs	r2, #2
 80126f4:	701a      	strb	r2, [r3, #0]
			break;
 80126f6:	e006      	b.n	8012706 <EcuM_MainFunction+0x4a>
		case ECUM_PROCESSWAKEUP_STATE:
			EcuM_ProcessWakeupEvent();
 80126f8:	f7ff ff02 	bl	8012500 <EcuM_ProcessWakeupEvent>
			EcuM_BswState = ECUM_CHECKFORWAKEUP_STATE;
 80126fc:	4b03      	ldr	r3, [pc, #12]	; (801270c <EcuM_MainFunction+0x50>)
 80126fe:	2201      	movs	r2, #1
 8012700:	701a      	strb	r2, [r3, #0]
			break;
 8012702:	e000      	b.n	8012706 <EcuM_MainFunction+0x4a>
		default:
			break;
 8012704:	bf00      	nop
	}
}
 8012706:	bf00      	nop
 8012708:	bd80      	pop	{r7, pc}
 801270a:	bf00      	nop
 801270c:	200093a8 	.word	0x200093a8

08012710 <SystemManager_ProcessFault>:
/***********************************************************************************
* Function: SystemManager_ProcessFault										       *
* Description: Initialize the system.  		   									   *
************************************************************************************/
VOID SystemManager_ProcessFault()
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b082      	sub	sp, #8
 8012714:	af00      	add	r7, sp, #0
	for(uint8 idx = STD_LOW ; idx < 49; idx++)
 8012716:	2300      	movs	r3, #0
 8012718:	71fb      	strb	r3, [r7, #7]
 801271a:	e0a2      	b.n	8012862 <SystemManager_ProcessFault+0x152>
	{
		if(SystemManager_Fault[idx] != STD_LOW)
 801271c:	79fb      	ldrb	r3, [r7, #7]
 801271e:	4a55      	ldr	r2, [pc, #340]	; (8012874 <SystemManager_ProcessFault+0x164>)
 8012720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012724:	2b00      	cmp	r3, #0
 8012726:	f000 8099 	beq.w	801285c <SystemManager_ProcessFault+0x14c>
		{
			if(idx == POWER_ON_RESET)
 801272a:	79fb      	ldrb	r3, [r7, #7]
 801272c:	2b00      	cmp	r3, #0
 801272e:	f000 8095 	beq.w	801285c <SystemManager_ProcessFault+0x14c>
			{
				/* do nothing */
			}
			else if(idx == BROWN_OUT_RESET ||
 8012732:	79fb      	ldrb	r3, [r7, #7]
 8012734:	2b01      	cmp	r3, #1
 8012736:	d014      	beq.n	8012762 <SystemManager_ProcessFault+0x52>
 8012738:	79fb      	ldrb	r3, [r7, #7]
 801273a:	2b04      	cmp	r3, #4
 801273c:	d011      	beq.n	8012762 <SystemManager_ProcessFault+0x52>
					idx == LOW_POWER_RESET ||
 801273e:	79fb      	ldrb	r3, [r7, #7]
 8012740:	2b06      	cmp	r3, #6
 8012742:	d00e      	beq.n	8012762 <SystemManager_ProcessFault+0x52>
					idx == HARDWARE_RESET ||
 8012744:	79fb      	ldrb	r3, [r7, #7]
 8012746:	2b07      	cmp	r3, #7
 8012748:	d00b      	beq.n	8012762 <SystemManager_ProcessFault+0x52>
					idx == FLASH_FAULT_RESET ||
 801274a:	79fb      	ldrb	r3, [r7, #7]
 801274c:	2b08      	cmp	r3, #8
 801274e:	d008      	beq.n	8012762 <SystemManager_ProcessFault+0x52>
					idx == NMI_RESET ||
 8012750:	79fb      	ldrb	r3, [r7, #7]
 8012752:	2b09      	cmp	r3, #9
 8012754:	d005      	beq.n	8012762 <SystemManager_ProcessFault+0x52>
					idx == MEMORY_FAULT_RESET ||
 8012756:	79fb      	ldrb	r3, [r7, #7]
 8012758:	2b0a      	cmp	r3, #10
 801275a:	d002      	beq.n	8012762 <SystemManager_ProcessFault+0x52>
					idx == USAGE_FAULT_RESET ||
 801275c:	79fb      	ldrb	r3, [r7, #7]
 801275e:	2b0b      	cmp	r3, #11
 8012760:	d109      	bne.n	8012776 <SystemManager_ProcessFault+0x66>
					idx == BUS_FAULT_RESET)
			{
				if(SystemManager_Fault[idx] >= 2)
 8012762:	79fb      	ldrb	r3, [r7, #7]
 8012764:	4a43      	ldr	r2, [pc, #268]	; (8012874 <SystemManager_ProcessFault+0x164>)
 8012766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801276a:	2b01      	cmp	r3, #1
 801276c:	d976      	bls.n	801285c <SystemManager_ProcessFault+0x14c>
				{
					Dem_ReceiveFault(HARDWARE_RESET_DTC_CODE);
 801276e:	2056      	movs	r0, #86	; 0x56
 8012770:	f7f2 fe3a 	bl	80053e8 <Dem_ReceiveFault>
				if(SystemManager_Fault[idx] >= 2)
 8012774:	e072      	b.n	801285c <SystemManager_ProcessFault+0x14c>
				else
				{
					/* do nothing */
				}
			}
			else if(idx == SOFTWARE_RESET ||
 8012776:	79fb      	ldrb	r3, [r7, #7]
 8012778:	2b02      	cmp	r3, #2
 801277a:	d008      	beq.n	801278e <SystemManager_ProcessFault+0x7e>
 801277c:	79fb      	ldrb	r3, [r7, #7]
 801277e:	2b03      	cmp	r3, #3
 8012780:	d005      	beq.n	801278e <SystemManager_ProcessFault+0x7e>
					idx == WATCHDOG_RESET ||
 8012782:	79fb      	ldrb	r3, [r7, #7]
 8012784:	2b0c      	cmp	r3, #12
 8012786:	d002      	beq.n	801278e <SystemManager_ProcessFault+0x7e>
					idx == STACK_OVERFLOW_RESET ||
 8012788:	79fb      	ldrb	r3, [r7, #7]
 801278a:	2b0d      	cmp	r3, #13
 801278c:	d109      	bne.n	80127a2 <SystemManager_ProcessFault+0x92>
					idx == MALLOC_FAILED_RESET)
			{
				if(SystemManager_Fault[idx] >= 2)
 801278e:	79fb      	ldrb	r3, [r7, #7]
 8012790:	4a38      	ldr	r2, [pc, #224]	; (8012874 <SystemManager_ProcessFault+0x164>)
 8012792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012796:	2b01      	cmp	r3, #1
 8012798:	d960      	bls.n	801285c <SystemManager_ProcessFault+0x14c>
				{
					Dem_ReceiveFault(SOFTWARE_RESET_DTC_CODE);
 801279a:	2035      	movs	r0, #53	; 0x35
 801279c:	f7f2 fe24 	bl	80053e8 <Dem_ReceiveFault>
				if(SystemManager_Fault[idx] >= 2)
 80127a0:	e05c      	b.n	801285c <SystemManager_ProcessFault+0x14c>
				else
				{
					/* do nothing */
				}
			}
			else if(idx == ADC_ERROR_INTERNAL ||
 80127a2:	79fb      	ldrb	r3, [r7, #7]
 80127a4:	2b0e      	cmp	r3, #14
 80127a6:	d050      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
 80127a8:	79fb      	ldrb	r3, [r7, #7]
 80127aa:	2b0f      	cmp	r3, #15
 80127ac:	d04d      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == ADC_ERROR_OVR ||
 80127ae:	79fb      	ldrb	r3, [r7, #7]
 80127b0:	2b10      	cmp	r3, #16
 80127b2:	d04a      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == ADC_ERROR_DMA ||
 80127b4:	79fb      	ldrb	r3, [r7, #7]
 80127b6:	2b11      	cmp	r3, #17
 80127b8:	d047      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == UART_ERROR_PE ||
 80127ba:	79fb      	ldrb	r3, [r7, #7]
 80127bc:	2b12      	cmp	r3, #18
 80127be:	d044      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == UART_ERROR_NE ||
 80127c0:	79fb      	ldrb	r3, [r7, #7]
 80127c2:	2b13      	cmp	r3, #19
 80127c4:	d041      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == UART_ERROR_FE ||
 80127c6:	79fb      	ldrb	r3, [r7, #7]
 80127c8:	2b14      	cmp	r3, #20
 80127ca:	d03e      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == UART_ERROR_ORE ||
 80127cc:	79fb      	ldrb	r3, [r7, #7]
 80127ce:	2b15      	cmp	r3, #21
 80127d0:	d03b      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == UART_ERROR_DMA ||
 80127d2:	79fb      	ldrb	r3, [r7, #7]
 80127d4:	2b16      	cmp	r3, #22
 80127d6:	d038      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == TIMER2_ERROR ||
 80127d8:	79fb      	ldrb	r3, [r7, #7]
 80127da:	2b17      	cmp	r3, #23
 80127dc:	d035      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == TIMER3_ERROR ||
 80127de:	79fb      	ldrb	r3, [r7, #7]
 80127e0:	2b18      	cmp	r3, #24
 80127e2:	d032      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == TIMER4_ERROR ||
 80127e4:	79fb      	ldrb	r3, [r7, #7]
 80127e6:	2b19      	cmp	r3, #25
 80127e8:	d02f      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == TIMER5_ERROR ||
 80127ea:	79fb      	ldrb	r3, [r7, #7]
 80127ec:	2b21      	cmp	r3, #33	; 0x21
 80127ee:	d02c      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == SPI_ERROR_OVR ||
					idx == SPI_ERROR_DMA ||
					idx == SPI_ERROR_FLAG ||
					idx == SPI_ERROR_ABORT ||
#endif
					idx == I2C_ERROR_BERR_ONE ||
 80127f0:	79fb      	ldrb	r3, [r7, #7]
 80127f2:	2b22      	cmp	r3, #34	; 0x22
 80127f4:	d029      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_ARLO_ONE ||
 80127f6:	79fb      	ldrb	r3, [r7, #7]
 80127f8:	2b23      	cmp	r3, #35	; 0x23
 80127fa:	d026      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_AF_ONE ||
 80127fc:	79fb      	ldrb	r3, [r7, #7]
 80127fe:	2b24      	cmp	r3, #36	; 0x24
 8012800:	d023      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_OVR_ONE ||
 8012802:	79fb      	ldrb	r3, [r7, #7]
 8012804:	2b25      	cmp	r3, #37	; 0x25
 8012806:	d020      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_DMA_ONE ||
 8012808:	79fb      	ldrb	r3, [r7, #7]
 801280a:	2b26      	cmp	r3, #38	; 0x26
 801280c:	d01d      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_TIMEOUT_ONE ||
 801280e:	79fb      	ldrb	r3, [r7, #7]
 8012810:	2b27      	cmp	r3, #39	; 0x27
 8012812:	d01a      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_SIZE_ONE ||
 8012814:	79fb      	ldrb	r3, [r7, #7]
 8012816:	2b28      	cmp	r3, #40	; 0x28
 8012818:	d017      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_DMA_PARAM_ONE ||
 801281a:	79fb      	ldrb	r3, [r7, #7]
 801281c:	2b29      	cmp	r3, #41	; 0x29
 801281e:	d014      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_BERR_THREE ||
 8012820:	79fb      	ldrb	r3, [r7, #7]
 8012822:	2b2a      	cmp	r3, #42	; 0x2a
 8012824:	d011      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_ARLO_THREE ||
 8012826:	79fb      	ldrb	r3, [r7, #7]
 8012828:	2b2b      	cmp	r3, #43	; 0x2b
 801282a:	d00e      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_AF_THREE ||
 801282c:	79fb      	ldrb	r3, [r7, #7]
 801282e:	2b2c      	cmp	r3, #44	; 0x2c
 8012830:	d00b      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_OVR_THREE ||
 8012832:	79fb      	ldrb	r3, [r7, #7]
 8012834:	2b2d      	cmp	r3, #45	; 0x2d
 8012836:	d008      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_DMA_THREE ||
 8012838:	79fb      	ldrb	r3, [r7, #7]
 801283a:	2b2e      	cmp	r3, #46	; 0x2e
 801283c:	d005      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_TIMEOUT_THREE ||
 801283e:	79fb      	ldrb	r3, [r7, #7]
 8012840:	2b2f      	cmp	r3, #47	; 0x2f
 8012842:	d002      	beq.n	801284a <SystemManager_ProcessFault+0x13a>
					idx == I2C_ERROR_SIZE_THREE ||
 8012844:	79fb      	ldrb	r3, [r7, #7]
 8012846:	2b30      	cmp	r3, #48	; 0x30
 8012848:	d108      	bne.n	801285c <SystemManager_ProcessFault+0x14c>
					idx == I2C_ERROR_DMA_PARAM_THREE)
			{
				if(SystemManager_Fault[idx] >= 2)
 801284a:	79fb      	ldrb	r3, [r7, #7]
 801284c:	4a09      	ldr	r2, [pc, #36]	; (8012874 <SystemManager_ProcessFault+0x164>)
 801284e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012852:	2b01      	cmp	r3, #1
 8012854:	d902      	bls.n	801285c <SystemManager_ProcessFault+0x14c>
				{
					Dem_ReceiveFault(PERIPHERAL_ERROR_DTC_CODE);
 8012856:	2099      	movs	r0, #153	; 0x99
 8012858:	f7f2 fdc6 	bl	80053e8 <Dem_ReceiveFault>
	for(uint8 idx = STD_LOW ; idx < 49; idx++)
 801285c:	79fb      	ldrb	r3, [r7, #7]
 801285e:	3301      	adds	r3, #1
 8012860:	71fb      	strb	r3, [r7, #7]
 8012862:	79fb      	ldrb	r3, [r7, #7]
 8012864:	2b30      	cmp	r3, #48	; 0x30
 8012866:	f67f af59 	bls.w	801271c <SystemManager_ProcessFault+0xc>
		else
		{
			/* do nothing */
		}
	}
}
 801286a:	bf00      	nop
 801286c:	bf00      	nop
 801286e:	3708      	adds	r7, #8
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}
 8012874:	200093ac 	.word	0x200093ac

08012878 <SystemManager_Init>:
/***********************************************************************************
* Function: SystemManager_Init													   *
* Description: Initialize the system.  		   									   *
************************************************************************************/
VOID SystemManager_Init()
{
 8012878:	b580      	push	{r7, lr}
 801287a:	af00      	add	r7, sp, #0
	/* Perform system initialization sequence. */
	HAL_Init();
 801287c:	f7f2 ff66 	bl	800574c <HAL_Init>
	SystemClock_Config();
 8012880:	f000 f8dc 	bl	8012a3c <SystemClock_Config>
}
 8012884:	bf00      	nop
 8012886:	bd80      	pop	{r7, pc}

08012888 <SystemManager_DeInit>:
/***********************************************************************************
* Function: SystemManager_DeInit												   *
* Description: De-initialize the system.  		   								   *
************************************************************************************/
VOID SystemManager_DeInit()
{
 8012888:	b580      	push	{r7, lr}
 801288a:	af00      	add	r7, sp, #0
	HAL_DeInit();
 801288c:	f7f2 ff80 	bl	8005790 <HAL_DeInit>
}
 8012890:	bf00      	nop
 8012892:	bd80      	pop	{r7, pc}

08012894 <SystemManager_SetFault>:
/***********************************************************************************
* Function: SystemManager_SetFault										   		   *
* Description: Set the fault in the system.		 		   						   *
************************************************************************************/
StdReturnType SystemManager_SetFault(uint8 faultType)
{
 8012894:	b480      	push	{r7}
 8012896:	b085      	sub	sp, #20
 8012898:	af00      	add	r7, sp, #0
 801289a:	4603      	mov	r3, r0
 801289c:	71fb      	strb	r3, [r7, #7]
	/* Store the fault into the data type. */
	for(uint8 index = 0; index < 14; index++)
 801289e:	2300      	movs	r3, #0
 80128a0:	73fb      	strb	r3, [r7, #15]
 80128a2:	e00e      	b.n	80128c2 <SystemManager_SetFault+0x2e>
	{
		if(faultType == index)
 80128a4:	79fa      	ldrb	r2, [r7, #7]
 80128a6:	7bfb      	ldrb	r3, [r7, #15]
 80128a8:	429a      	cmp	r2, r3
 80128aa:	d107      	bne.n	80128bc <SystemManager_SetFault+0x28>
		{
			SystemManager_Fault[index]++;
 80128ac:	7bfb      	ldrb	r3, [r7, #15]
 80128ae:	4a0a      	ldr	r2, [pc, #40]	; (80128d8 <SystemManager_SetFault+0x44>)
 80128b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80128b4:	3201      	adds	r2, #1
 80128b6:	4908      	ldr	r1, [pc, #32]	; (80128d8 <SystemManager_SetFault+0x44>)
 80128b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8 index = 0; index < 14; index++)
 80128bc:	7bfb      	ldrb	r3, [r7, #15]
 80128be:	3301      	adds	r3, #1
 80128c0:	73fb      	strb	r3, [r7, #15]
 80128c2:	7bfb      	ldrb	r3, [r7, #15]
 80128c4:	2b0d      	cmp	r3, #13
 80128c6:	d9ed      	bls.n	80128a4 <SystemManager_SetFault+0x10>
		else
		{
			/* do nothing */
		}
	}
	return E_OK;
 80128c8:	2300      	movs	r3, #0
}
 80128ca:	4618      	mov	r0, r3
 80128cc:	3714      	adds	r7, #20
 80128ce:	46bd      	mov	sp, r7
 80128d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d4:	4770      	bx	lr
 80128d6:	bf00      	nop
 80128d8:	200093ac 	.word	0x200093ac

080128dc <SystemManager_MainFunction>:
/***********************************************************************************
* Function: SystemManager_MainFunction									   		   *
* Description: System main function.									 		   *
************************************************************************************/
VOID SystemManager_MainFunction()
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	af00      	add	r7, sp, #0
	SystemManager_ProcessFault();
 80128e0:	f7ff ff16 	bl	8012710 <SystemManager_ProcessFault>
}
 80128e4:	bf00      	nop
 80128e6:	bd80      	pop	{r7, pc}

080128e8 <SystemManager_PerformReset>:
/***********************************************************************************
* Function: SystemManager_PerformReset									   		   *
* Description: Perform system reset.		 		   							   *
************************************************************************************/
VOID SystemManager_PerformReset()
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 80128ec:	f7f3 fe83 	bl	80065f6 <HAL_NVIC_SystemReset>
}
 80128f0:	bf00      	nop
 80128f2:	bd80      	pop	{r7, pc}

080128f4 <MX_NVIC_Init>:
* Function: MX_NVIC_Init													   	   *
* Description: Initialize the nested vector interrupt controller with configured   *
* 			   values.		 		   											   *
************************************************************************************/
VOID MX_NVIC_Init(VOID)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	af00      	add	r7, sp, #0
	/* TIM5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM5_IRQn, 10, 0);
 80128f8:	2200      	movs	r2, #0
 80128fa:	210a      	movs	r1, #10
 80128fc:	2032      	movs	r0, #50	; 0x32
 80128fe:	f7f3 fe42 	bl	8006586 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8012902:	2032      	movs	r0, #50	; 0x32
 8012904:	f7f3 fe5b 	bl	80065be <HAL_NVIC_EnableIRQ>
	/* WWDG_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(WWDG_IRQn, 15, 0);
 8012908:	2200      	movs	r2, #0
 801290a:	210f      	movs	r1, #15
 801290c:	2000      	movs	r0, #0
 801290e:	f7f3 fe3a 	bl	8006586 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(WWDG_IRQn);
 8012912:	2000      	movs	r0, #0
 8012914:	f7f3 fe53 	bl	80065be <HAL_NVIC_EnableIRQ>
	/* FLASH_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FLASH_IRQn, 15, 0);
 8012918:	2200      	movs	r2, #0
 801291a:	210f      	movs	r1, #15
 801291c:	2004      	movs	r0, #4
 801291e:	f7f3 fe32 	bl	8006586 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8012922:	2004      	movs	r0, #4
 8012924:	f7f3 fe4b 	bl	80065be <HAL_NVIC_EnableIRQ>
	/* RCC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RCC_IRQn, 15, 0);
 8012928:	2200      	movs	r2, #0
 801292a:	210f      	movs	r1, #15
 801292c:	2005      	movs	r0, #5
 801292e:	f7f3 fe2a 	bl	8006586 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RCC_IRQn);
 8012932:	2005      	movs	r0, #5
 8012934:	f7f3 fe43 	bl	80065be <HAL_NVIC_EnableIRQ>
	/* PVD_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PVD_IRQn, 15, 0);
 8012938:	2200      	movs	r2, #0
 801293a:	210f      	movs	r1, #15
 801293c:	2001      	movs	r0, #1
 801293e:	f7f3 fe22 	bl	8006586 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(PVD_IRQn);
 8012942:	2001      	movs	r0, #1
 8012944:	f7f3 fe3b 	bl	80065be <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 15, 0);
 8012948:	2200      	movs	r2, #0
 801294a:	210f      	movs	r1, #15
 801294c:	2012      	movs	r0, #18
 801294e:	f7f3 fe1a 	bl	8006586 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 8012952:	2012      	movs	r0, #18
 8012954:	f7f3 fe33 	bl	80065be <HAL_NVIC_EnableIRQ>
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8012958:	2200      	movs	r2, #0
 801295a:	210f      	movs	r1, #15
 801295c:	201c      	movs	r0, #28
 801295e:	f7f3 fe12 	bl	8006586 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8012962:	201c      	movs	r0, #28
 8012964:	f7f3 fe2b 	bl	80065be <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 8012968:	2200      	movs	r2, #0
 801296a:	210f      	movs	r1, #15
 801296c:	201d      	movs	r0, #29
 801296e:	f7f3 fe0a 	bl	8006586 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8012972:	201d      	movs	r0, #29
 8012974:	f7f3 fe23 	bl	80065be <HAL_NVIC_EnableIRQ>
	/* TIM4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 8012978:	2200      	movs	r2, #0
 801297a:	210f      	movs	r1, #15
 801297c:	201e      	movs	r0, #30
 801297e:	f7f3 fe02 	bl	8006586 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8012982:	201e      	movs	r0, #30
 8012984:	f7f3 fe1b 	bl	80065be <HAL_NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8012988:	2200      	movs	r2, #0
 801298a:	2100      	movs	r1, #0
 801298c:	2025      	movs	r0, #37	; 0x25
 801298e:	f7f3 fdfa 	bl	8006586 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8012992:	2025      	movs	r0, #37	; 0x25
 8012994:	f7f3 fe13 	bl	80065be <HAL_NVIC_EnableIRQ>
	/* SPI3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SPI3_IRQn, 15, 0);
 8012998:	2200      	movs	r2, #0
 801299a:	210f      	movs	r1, #15
 801299c:	2033      	movs	r0, #51	; 0x33
 801299e:	f7f3 fdf2 	bl	8006586 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80129a2:	2033      	movs	r0, #51	; 0x33
 80129a4:	f7f3 fe0b 	bl	80065be <HAL_NVIC_EnableIRQ>
	/* I2C3_EV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(I2C3_EV_IRQn, 15, 0);
 80129a8:	2200      	movs	r2, #0
 80129aa:	210f      	movs	r1, #15
 80129ac:	2048      	movs	r0, #72	; 0x48
 80129ae:	f7f3 fdea 	bl	8006586 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80129b2:	2048      	movs	r0, #72	; 0x48
 80129b4:	f7f3 fe03 	bl	80065be <HAL_NVIC_EnableIRQ>
	/* I2C3_ER_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(I2C3_ER_IRQn, 15, 0);
 80129b8:	2200      	movs	r2, #0
 80129ba:	210f      	movs	r1, #15
 80129bc:	2049      	movs	r0, #73	; 0x49
 80129be:	f7f3 fde2 	bl	8006586 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80129c2:	2049      	movs	r0, #73	; 0x49
 80129c4:	f7f3 fdfb 	bl	80065be <HAL_NVIC_EnableIRQ>
	/* FPU_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FPU_IRQn, 15, 0);
 80129c8:	2200      	movs	r2, #0
 80129ca:	210f      	movs	r1, #15
 80129cc:	2051      	movs	r0, #81	; 0x51
 80129ce:	f7f3 fdda 	bl	8006586 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FPU_IRQn);
 80129d2:	2051      	movs	r0, #81	; 0x51
 80129d4:	f7f3 fdf3 	bl	80065be <HAL_NVIC_EnableIRQ>
	/* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 10, 0);
 80129d8:	2200      	movs	r2, #0
 80129da:	210a      	movs	r1, #10
 80129dc:	201a      	movs	r0, #26
 80129de:	f7f3 fdd2 	bl	8006586 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80129e2:	201a      	movs	r0, #26
 80129e4:	f7f3 fdeb 	bl	80065be <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 10, 0);
 80129e8:	2200      	movs	r2, #0
 80129ea:	210a      	movs	r1, #10
 80129ec:	2038      	movs	r0, #56	; 0x38
 80129ee:	f7f3 fdca 	bl	8006586 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80129f2:	2038      	movs	r0, #56	; 0x38
 80129f4:	f7f3 fde3 	bl	80065be <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 10, 0);
 80129f8:	2200      	movs	r2, #0
 80129fa:	210a      	movs	r1, #10
 80129fc:	200d      	movs	r0, #13
 80129fe:	f7f3 fdc2 	bl	8006586 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8012a02:	200d      	movs	r0, #13
 8012a04:	f7f3 fddb 	bl	80065be <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 10, 0);
 8012a08:	2200      	movs	r2, #0
 8012a0a:	210a      	movs	r1, #10
 8012a0c:	200f      	movs	r0, #15
 8012a0e:	f7f3 fdba 	bl	8006586 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8012a12:	200f      	movs	r0, #15
 8012a14:	f7f3 fdd3 	bl	80065be <HAL_NVIC_EnableIRQ>
	/* I2C1_ER_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 10, 0);
 8012a18:	2200      	movs	r2, #0
 8012a1a:	210a      	movs	r1, #10
 8012a1c:	2020      	movs	r0, #32
 8012a1e:	f7f3 fdb2 	bl	8006586 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8012a22:	2020      	movs	r0, #32
 8012a24:	f7f3 fdcb 	bl	80065be <HAL_NVIC_EnableIRQ>
	/* I2C1_EV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 10, 0);
 8012a28:	2200      	movs	r2, #0
 8012a2a:	210a      	movs	r1, #10
 8012a2c:	201f      	movs	r0, #31
 8012a2e:	f7f3 fdaa 	bl	8006586 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8012a32:	201f      	movs	r0, #31
 8012a34:	f7f3 fdc3 	bl	80065be <HAL_NVIC_EnableIRQ>
}
 8012a38:	bf00      	nop
 8012a3a:	bd80      	pop	{r7, pc}

08012a3c <SystemClock_Config>:
/***********************************************************************************
* Function: SystemClock_Config													   *
* Description: Initialize the system clock.		 		   						   *
************************************************************************************/
VOID SystemClock_Config(VOID)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b094      	sub	sp, #80	; 0x50
 8012a40:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8012a42:	f107 0320 	add.w	r3, r7, #32
 8012a46:	2230      	movs	r2, #48	; 0x30
 8012a48:	2100      	movs	r1, #0
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f000 f8c8 	bl	8012be0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012a50:	f107 030c 	add.w	r3, r7, #12
 8012a54:	2200      	movs	r2, #0
 8012a56:	601a      	str	r2, [r3, #0]
 8012a58:	605a      	str	r2, [r3, #4]
 8012a5a:	609a      	str	r2, [r3, #8]
 8012a5c:	60da      	str	r2, [r3, #12]
 8012a5e:	611a      	str	r2, [r3, #16]
	__HAL_RCC_PWR_CLK_ENABLE();
 8012a60:	2300      	movs	r3, #0
 8012a62:	60bb      	str	r3, [r7, #8]
 8012a64:	4b28      	ldr	r3, [pc, #160]	; (8012b08 <SystemClock_Config+0xcc>)
 8012a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a68:	4a27      	ldr	r2, [pc, #156]	; (8012b08 <SystemClock_Config+0xcc>)
 8012a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8012a70:	4b25      	ldr	r3, [pc, #148]	; (8012b08 <SystemClock_Config+0xcc>)
 8012a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012a78:	60bb      	str	r3, [r7, #8]
 8012a7a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	607b      	str	r3, [r7, #4]
 8012a80:	4b22      	ldr	r3, [pc, #136]	; (8012b0c <SystemClock_Config+0xd0>)
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	4a21      	ldr	r2, [pc, #132]	; (8012b0c <SystemClock_Config+0xd0>)
 8012a86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012a8a:	6013      	str	r3, [r2, #0]
 8012a8c:	4b1f      	ldr	r3, [pc, #124]	; (8012b0c <SystemClock_Config+0xd0>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012a94:	607b      	str	r3, [r7, #4]
 8012a96:	687b      	ldr	r3, [r7, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8012a98:	2309      	movs	r3, #9
 8012a9a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8012a9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8012aa0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8012aa6:	2302      	movs	r3, #2
 8012aa8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8012aaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012aae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8012ab0:	2304      	movs	r3, #4
 8012ab2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8012ab4:	2364      	movs	r3, #100	; 0x64
 8012ab6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8012ab8:	2302      	movs	r3, #2
 8012aba:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8012abc:	2304      	movs	r3, #4
 8012abe:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8012ac0:	f107 0320 	add.w	r3, r7, #32
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f7f6 ff1f 	bl	8009908 <HAL_RCC_OscConfig>
 8012aca:	4603      	mov	r3, r0
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d001      	beq.n	8012ad4 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8012ad0:	f000 f81e 	bl	8012b10 <Error_Handler>
	}
	else
	{
		/* do nothing */
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8012ad4:	230f      	movs	r3, #15
 8012ad6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8012ad8:	2302      	movs	r3, #2
 8012ada:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8012adc:	2300      	movs	r3, #0
 8012ade:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8012ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ae4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	61fb      	str	r3, [r7, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8012aea:	f107 030c 	add.w	r3, r7, #12
 8012aee:	2103      	movs	r1, #3
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7f7 f981 	bl	8009df8 <HAL_RCC_ClockConfig>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d001      	beq.n	8012b00 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8012afc:	f000 f808 	bl	8012b10 <Error_Handler>
	}
	else
	{
		/* do nothing */
	}
}
 8012b00:	bf00      	nop
 8012b02:	3750      	adds	r7, #80	; 0x50
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}
 8012b08:	40023800 	.word	0x40023800
 8012b0c:	40007000 	.word	0x40007000

08012b10 <Error_Handler>:
/***********************************************************************************
* Function: Error_Handler													   	   *
* Description: Perform system reset in case of system fault.			 		   *
************************************************************************************/
VOID Error_Handler(VOID)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8012b14:	b672      	cpsid	i
}
 8012b16:	bf00      	nop
	__disable_irq();
	SystemManager_PerformReset();
 8012b18:	f7ff fee6 	bl	80128e8 <SystemManager_PerformReset>
	while (1)
 8012b1c:	e7fe      	b.n	8012b1c <Error_Handler+0xc>
	...

08012b20 <Watchdog_Init>:
/***********************************************************************************
* Function: Watchdog_Init									   		       		   *
* Description: Peripheral initialization.							 		   	   *
************************************************************************************/
StdReturnType Watchdog_Init()
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	af00      	add	r7, sp, #0
	hiwdg.Instance = IWDG;
 8012b24:	4b09      	ldr	r3, [pc, #36]	; (8012b4c <Watchdog_Init+0x2c>)
 8012b26:	4a0a      	ldr	r2, [pc, #40]	; (8012b50 <Watchdog_Init+0x30>)
 8012b28:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8012b2a:	4b08      	ldr	r3, [pc, #32]	; (8012b4c <Watchdog_Init+0x2c>)
 8012b2c:	2205      	movs	r2, #5
 8012b2e:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 63;
 8012b30:	4b06      	ldr	r3, [pc, #24]	; (8012b4c <Watchdog_Init+0x2c>)
 8012b32:	223f      	movs	r2, #63	; 0x3f
 8012b34:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8012b36:	4805      	ldr	r0, [pc, #20]	; (8012b4c <Watchdog_Init+0x2c>)
 8012b38:	f7f6 fe79 	bl	800982e <HAL_IWDG_Init>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d001      	beq.n	8012b46 <Watchdog_Init+0x26>
	{
		Error_Handler();
 8012b42:	f7ff ffe5 	bl	8012b10 <Error_Handler>
	}
	return E_OK;
 8012b46:	2300      	movs	r3, #0
}
 8012b48:	4618      	mov	r0, r3
 8012b4a:	bd80      	pop	{r7, pc}
 8012b4c:	2000040c 	.word	0x2000040c
 8012b50:	40003000 	.word	0x40003000

08012b54 <Watchdog_MainFunction>:
/***********************************************************************************
* Function: Watchdog_MainFunction									   		       *
* Description: Peripheral main function.							 		       *
************************************************************************************/
VOID Watchdog_MainFunction()
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 8012b58:	4802      	ldr	r0, [pc, #8]	; (8012b64 <Watchdog_MainFunction+0x10>)
 8012b5a:	f7f6 feaa 	bl	80098b2 <HAL_IWDG_Refresh>
}
 8012b5e:	bf00      	nop
 8012b60:	bd80      	pop	{r7, pc}
 8012b62:	bf00      	nop
 8012b64:	2000040c 	.word	0x2000040c

08012b68 <atoi>:
 8012b68:	220a      	movs	r2, #10
 8012b6a:	2100      	movs	r1, #0
 8012b6c:	f000 ba3c 	b.w	8012fe8 <strtol>

08012b70 <__errno>:
 8012b70:	4b01      	ldr	r3, [pc, #4]	; (8012b78 <__errno+0x8>)
 8012b72:	6818      	ldr	r0, [r3, #0]
 8012b74:	4770      	bx	lr
 8012b76:	bf00      	nop
 8012b78:	20000010 	.word	0x20000010

08012b7c <__libc_init_array>:
 8012b7c:	b570      	push	{r4, r5, r6, lr}
 8012b7e:	4d0d      	ldr	r5, [pc, #52]	; (8012bb4 <__libc_init_array+0x38>)
 8012b80:	4c0d      	ldr	r4, [pc, #52]	; (8012bb8 <__libc_init_array+0x3c>)
 8012b82:	1b64      	subs	r4, r4, r5
 8012b84:	10a4      	asrs	r4, r4, #2
 8012b86:	2600      	movs	r6, #0
 8012b88:	42a6      	cmp	r6, r4
 8012b8a:	d109      	bne.n	8012ba0 <__libc_init_array+0x24>
 8012b8c:	4d0b      	ldr	r5, [pc, #44]	; (8012bbc <__libc_init_array+0x40>)
 8012b8e:	4c0c      	ldr	r4, [pc, #48]	; (8012bc0 <__libc_init_array+0x44>)
 8012b90:	f000 fd82 	bl	8013698 <_init>
 8012b94:	1b64      	subs	r4, r4, r5
 8012b96:	10a4      	asrs	r4, r4, #2
 8012b98:	2600      	movs	r6, #0
 8012b9a:	42a6      	cmp	r6, r4
 8012b9c:	d105      	bne.n	8012baa <__libc_init_array+0x2e>
 8012b9e:	bd70      	pop	{r4, r5, r6, pc}
 8012ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ba4:	4798      	blx	r3
 8012ba6:	3601      	adds	r6, #1
 8012ba8:	e7ee      	b.n	8012b88 <__libc_init_array+0xc>
 8012baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8012bae:	4798      	blx	r3
 8012bb0:	3601      	adds	r6, #1
 8012bb2:	e7f2      	b.n	8012b9a <__libc_init_array+0x1e>
 8012bb4:	08013ce8 	.word	0x08013ce8
 8012bb8:	08013ce8 	.word	0x08013ce8
 8012bbc:	08013ce8 	.word	0x08013ce8
 8012bc0:	08013cec 	.word	0x08013cec

08012bc4 <memcpy>:
 8012bc4:	440a      	add	r2, r1
 8012bc6:	4291      	cmp	r1, r2
 8012bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8012bcc:	d100      	bne.n	8012bd0 <memcpy+0xc>
 8012bce:	4770      	bx	lr
 8012bd0:	b510      	push	{r4, lr}
 8012bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012bda:	4291      	cmp	r1, r2
 8012bdc:	d1f9      	bne.n	8012bd2 <memcpy+0xe>
 8012bde:	bd10      	pop	{r4, pc}

08012be0 <memset>:
 8012be0:	4402      	add	r2, r0
 8012be2:	4603      	mov	r3, r0
 8012be4:	4293      	cmp	r3, r2
 8012be6:	d100      	bne.n	8012bea <memset+0xa>
 8012be8:	4770      	bx	lr
 8012bea:	f803 1b01 	strb.w	r1, [r3], #1
 8012bee:	e7f9      	b.n	8012be4 <memset+0x4>

08012bf0 <_free_r>:
 8012bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012bf2:	2900      	cmp	r1, #0
 8012bf4:	d044      	beq.n	8012c80 <_free_r+0x90>
 8012bf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012bfa:	9001      	str	r0, [sp, #4]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	f1a1 0404 	sub.w	r4, r1, #4
 8012c02:	bfb8      	it	lt
 8012c04:	18e4      	addlt	r4, r4, r3
 8012c06:	f000 f9f9 	bl	8012ffc <__malloc_lock>
 8012c0a:	4a1e      	ldr	r2, [pc, #120]	; (8012c84 <_free_r+0x94>)
 8012c0c:	9801      	ldr	r0, [sp, #4]
 8012c0e:	6813      	ldr	r3, [r2, #0]
 8012c10:	b933      	cbnz	r3, 8012c20 <_free_r+0x30>
 8012c12:	6063      	str	r3, [r4, #4]
 8012c14:	6014      	str	r4, [r2, #0]
 8012c16:	b003      	add	sp, #12
 8012c18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012c1c:	f000 b9f4 	b.w	8013008 <__malloc_unlock>
 8012c20:	42a3      	cmp	r3, r4
 8012c22:	d908      	bls.n	8012c36 <_free_r+0x46>
 8012c24:	6825      	ldr	r5, [r4, #0]
 8012c26:	1961      	adds	r1, r4, r5
 8012c28:	428b      	cmp	r3, r1
 8012c2a:	bf01      	itttt	eq
 8012c2c:	6819      	ldreq	r1, [r3, #0]
 8012c2e:	685b      	ldreq	r3, [r3, #4]
 8012c30:	1949      	addeq	r1, r1, r5
 8012c32:	6021      	streq	r1, [r4, #0]
 8012c34:	e7ed      	b.n	8012c12 <_free_r+0x22>
 8012c36:	461a      	mov	r2, r3
 8012c38:	685b      	ldr	r3, [r3, #4]
 8012c3a:	b10b      	cbz	r3, 8012c40 <_free_r+0x50>
 8012c3c:	42a3      	cmp	r3, r4
 8012c3e:	d9fa      	bls.n	8012c36 <_free_r+0x46>
 8012c40:	6811      	ldr	r1, [r2, #0]
 8012c42:	1855      	adds	r5, r2, r1
 8012c44:	42a5      	cmp	r5, r4
 8012c46:	d10b      	bne.n	8012c60 <_free_r+0x70>
 8012c48:	6824      	ldr	r4, [r4, #0]
 8012c4a:	4421      	add	r1, r4
 8012c4c:	1854      	adds	r4, r2, r1
 8012c4e:	42a3      	cmp	r3, r4
 8012c50:	6011      	str	r1, [r2, #0]
 8012c52:	d1e0      	bne.n	8012c16 <_free_r+0x26>
 8012c54:	681c      	ldr	r4, [r3, #0]
 8012c56:	685b      	ldr	r3, [r3, #4]
 8012c58:	6053      	str	r3, [r2, #4]
 8012c5a:	4421      	add	r1, r4
 8012c5c:	6011      	str	r1, [r2, #0]
 8012c5e:	e7da      	b.n	8012c16 <_free_r+0x26>
 8012c60:	d902      	bls.n	8012c68 <_free_r+0x78>
 8012c62:	230c      	movs	r3, #12
 8012c64:	6003      	str	r3, [r0, #0]
 8012c66:	e7d6      	b.n	8012c16 <_free_r+0x26>
 8012c68:	6825      	ldr	r5, [r4, #0]
 8012c6a:	1961      	adds	r1, r4, r5
 8012c6c:	428b      	cmp	r3, r1
 8012c6e:	bf04      	itt	eq
 8012c70:	6819      	ldreq	r1, [r3, #0]
 8012c72:	685b      	ldreq	r3, [r3, #4]
 8012c74:	6063      	str	r3, [r4, #4]
 8012c76:	bf04      	itt	eq
 8012c78:	1949      	addeq	r1, r1, r5
 8012c7a:	6021      	streq	r1, [r4, #0]
 8012c7c:	6054      	str	r4, [r2, #4]
 8012c7e:	e7ca      	b.n	8012c16 <_free_r+0x26>
 8012c80:	b003      	add	sp, #12
 8012c82:	bd30      	pop	{r4, r5, pc}
 8012c84:	20009470 	.word	0x20009470

08012c88 <sbrk_aligned>:
 8012c88:	b570      	push	{r4, r5, r6, lr}
 8012c8a:	4e0e      	ldr	r6, [pc, #56]	; (8012cc4 <sbrk_aligned+0x3c>)
 8012c8c:	460c      	mov	r4, r1
 8012c8e:	6831      	ldr	r1, [r6, #0]
 8012c90:	4605      	mov	r5, r0
 8012c92:	b911      	cbnz	r1, 8012c9a <sbrk_aligned+0x12>
 8012c94:	f000 f8f6 	bl	8012e84 <_sbrk_r>
 8012c98:	6030      	str	r0, [r6, #0]
 8012c9a:	4621      	mov	r1, r4
 8012c9c:	4628      	mov	r0, r5
 8012c9e:	f000 f8f1 	bl	8012e84 <_sbrk_r>
 8012ca2:	1c43      	adds	r3, r0, #1
 8012ca4:	d00a      	beq.n	8012cbc <sbrk_aligned+0x34>
 8012ca6:	1cc4      	adds	r4, r0, #3
 8012ca8:	f024 0403 	bic.w	r4, r4, #3
 8012cac:	42a0      	cmp	r0, r4
 8012cae:	d007      	beq.n	8012cc0 <sbrk_aligned+0x38>
 8012cb0:	1a21      	subs	r1, r4, r0
 8012cb2:	4628      	mov	r0, r5
 8012cb4:	f000 f8e6 	bl	8012e84 <_sbrk_r>
 8012cb8:	3001      	adds	r0, #1
 8012cba:	d101      	bne.n	8012cc0 <sbrk_aligned+0x38>
 8012cbc:	f04f 34ff 	mov.w	r4, #4294967295
 8012cc0:	4620      	mov	r0, r4
 8012cc2:	bd70      	pop	{r4, r5, r6, pc}
 8012cc4:	20009474 	.word	0x20009474

08012cc8 <_malloc_r>:
 8012cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ccc:	1ccd      	adds	r5, r1, #3
 8012cce:	f025 0503 	bic.w	r5, r5, #3
 8012cd2:	3508      	adds	r5, #8
 8012cd4:	2d0c      	cmp	r5, #12
 8012cd6:	bf38      	it	cc
 8012cd8:	250c      	movcc	r5, #12
 8012cda:	2d00      	cmp	r5, #0
 8012cdc:	4607      	mov	r7, r0
 8012cde:	db01      	blt.n	8012ce4 <_malloc_r+0x1c>
 8012ce0:	42a9      	cmp	r1, r5
 8012ce2:	d905      	bls.n	8012cf0 <_malloc_r+0x28>
 8012ce4:	230c      	movs	r3, #12
 8012ce6:	603b      	str	r3, [r7, #0]
 8012ce8:	2600      	movs	r6, #0
 8012cea:	4630      	mov	r0, r6
 8012cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cf0:	4e2e      	ldr	r6, [pc, #184]	; (8012dac <_malloc_r+0xe4>)
 8012cf2:	f000 f983 	bl	8012ffc <__malloc_lock>
 8012cf6:	6833      	ldr	r3, [r6, #0]
 8012cf8:	461c      	mov	r4, r3
 8012cfa:	bb34      	cbnz	r4, 8012d4a <_malloc_r+0x82>
 8012cfc:	4629      	mov	r1, r5
 8012cfe:	4638      	mov	r0, r7
 8012d00:	f7ff ffc2 	bl	8012c88 <sbrk_aligned>
 8012d04:	1c43      	adds	r3, r0, #1
 8012d06:	4604      	mov	r4, r0
 8012d08:	d14d      	bne.n	8012da6 <_malloc_r+0xde>
 8012d0a:	6834      	ldr	r4, [r6, #0]
 8012d0c:	4626      	mov	r6, r4
 8012d0e:	2e00      	cmp	r6, #0
 8012d10:	d140      	bne.n	8012d94 <_malloc_r+0xcc>
 8012d12:	6823      	ldr	r3, [r4, #0]
 8012d14:	4631      	mov	r1, r6
 8012d16:	4638      	mov	r0, r7
 8012d18:	eb04 0803 	add.w	r8, r4, r3
 8012d1c:	f000 f8b2 	bl	8012e84 <_sbrk_r>
 8012d20:	4580      	cmp	r8, r0
 8012d22:	d13a      	bne.n	8012d9a <_malloc_r+0xd2>
 8012d24:	6821      	ldr	r1, [r4, #0]
 8012d26:	3503      	adds	r5, #3
 8012d28:	1a6d      	subs	r5, r5, r1
 8012d2a:	f025 0503 	bic.w	r5, r5, #3
 8012d2e:	3508      	adds	r5, #8
 8012d30:	2d0c      	cmp	r5, #12
 8012d32:	bf38      	it	cc
 8012d34:	250c      	movcc	r5, #12
 8012d36:	4629      	mov	r1, r5
 8012d38:	4638      	mov	r0, r7
 8012d3a:	f7ff ffa5 	bl	8012c88 <sbrk_aligned>
 8012d3e:	3001      	adds	r0, #1
 8012d40:	d02b      	beq.n	8012d9a <_malloc_r+0xd2>
 8012d42:	6823      	ldr	r3, [r4, #0]
 8012d44:	442b      	add	r3, r5
 8012d46:	6023      	str	r3, [r4, #0]
 8012d48:	e00e      	b.n	8012d68 <_malloc_r+0xa0>
 8012d4a:	6822      	ldr	r2, [r4, #0]
 8012d4c:	1b52      	subs	r2, r2, r5
 8012d4e:	d41e      	bmi.n	8012d8e <_malloc_r+0xc6>
 8012d50:	2a0b      	cmp	r2, #11
 8012d52:	d916      	bls.n	8012d82 <_malloc_r+0xba>
 8012d54:	1961      	adds	r1, r4, r5
 8012d56:	42a3      	cmp	r3, r4
 8012d58:	6025      	str	r5, [r4, #0]
 8012d5a:	bf18      	it	ne
 8012d5c:	6059      	strne	r1, [r3, #4]
 8012d5e:	6863      	ldr	r3, [r4, #4]
 8012d60:	bf08      	it	eq
 8012d62:	6031      	streq	r1, [r6, #0]
 8012d64:	5162      	str	r2, [r4, r5]
 8012d66:	604b      	str	r3, [r1, #4]
 8012d68:	4638      	mov	r0, r7
 8012d6a:	f104 060b 	add.w	r6, r4, #11
 8012d6e:	f000 f94b 	bl	8013008 <__malloc_unlock>
 8012d72:	f026 0607 	bic.w	r6, r6, #7
 8012d76:	1d23      	adds	r3, r4, #4
 8012d78:	1af2      	subs	r2, r6, r3
 8012d7a:	d0b6      	beq.n	8012cea <_malloc_r+0x22>
 8012d7c:	1b9b      	subs	r3, r3, r6
 8012d7e:	50a3      	str	r3, [r4, r2]
 8012d80:	e7b3      	b.n	8012cea <_malloc_r+0x22>
 8012d82:	6862      	ldr	r2, [r4, #4]
 8012d84:	42a3      	cmp	r3, r4
 8012d86:	bf0c      	ite	eq
 8012d88:	6032      	streq	r2, [r6, #0]
 8012d8a:	605a      	strne	r2, [r3, #4]
 8012d8c:	e7ec      	b.n	8012d68 <_malloc_r+0xa0>
 8012d8e:	4623      	mov	r3, r4
 8012d90:	6864      	ldr	r4, [r4, #4]
 8012d92:	e7b2      	b.n	8012cfa <_malloc_r+0x32>
 8012d94:	4634      	mov	r4, r6
 8012d96:	6876      	ldr	r6, [r6, #4]
 8012d98:	e7b9      	b.n	8012d0e <_malloc_r+0x46>
 8012d9a:	230c      	movs	r3, #12
 8012d9c:	603b      	str	r3, [r7, #0]
 8012d9e:	4638      	mov	r0, r7
 8012da0:	f000 f932 	bl	8013008 <__malloc_unlock>
 8012da4:	e7a1      	b.n	8012cea <_malloc_r+0x22>
 8012da6:	6025      	str	r5, [r4, #0]
 8012da8:	e7de      	b.n	8012d68 <_malloc_r+0xa0>
 8012daa:	bf00      	nop
 8012dac:	20009470 	.word	0x20009470

08012db0 <cleanup_glue>:
 8012db0:	b538      	push	{r3, r4, r5, lr}
 8012db2:	460c      	mov	r4, r1
 8012db4:	6809      	ldr	r1, [r1, #0]
 8012db6:	4605      	mov	r5, r0
 8012db8:	b109      	cbz	r1, 8012dbe <cleanup_glue+0xe>
 8012dba:	f7ff fff9 	bl	8012db0 <cleanup_glue>
 8012dbe:	4621      	mov	r1, r4
 8012dc0:	4628      	mov	r0, r5
 8012dc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012dc6:	f7ff bf13 	b.w	8012bf0 <_free_r>
	...

08012dcc <_reclaim_reent>:
 8012dcc:	4b2c      	ldr	r3, [pc, #176]	; (8012e80 <_reclaim_reent+0xb4>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	4283      	cmp	r3, r0
 8012dd2:	b570      	push	{r4, r5, r6, lr}
 8012dd4:	4604      	mov	r4, r0
 8012dd6:	d051      	beq.n	8012e7c <_reclaim_reent+0xb0>
 8012dd8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012dda:	b143      	cbz	r3, 8012dee <_reclaim_reent+0x22>
 8012ddc:	68db      	ldr	r3, [r3, #12]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d14a      	bne.n	8012e78 <_reclaim_reent+0xac>
 8012de2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012de4:	6819      	ldr	r1, [r3, #0]
 8012de6:	b111      	cbz	r1, 8012dee <_reclaim_reent+0x22>
 8012de8:	4620      	mov	r0, r4
 8012dea:	f7ff ff01 	bl	8012bf0 <_free_r>
 8012dee:	6961      	ldr	r1, [r4, #20]
 8012df0:	b111      	cbz	r1, 8012df8 <_reclaim_reent+0x2c>
 8012df2:	4620      	mov	r0, r4
 8012df4:	f7ff fefc 	bl	8012bf0 <_free_r>
 8012df8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012dfa:	b111      	cbz	r1, 8012e02 <_reclaim_reent+0x36>
 8012dfc:	4620      	mov	r0, r4
 8012dfe:	f7ff fef7 	bl	8012bf0 <_free_r>
 8012e02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012e04:	b111      	cbz	r1, 8012e0c <_reclaim_reent+0x40>
 8012e06:	4620      	mov	r0, r4
 8012e08:	f7ff fef2 	bl	8012bf0 <_free_r>
 8012e0c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012e0e:	b111      	cbz	r1, 8012e16 <_reclaim_reent+0x4a>
 8012e10:	4620      	mov	r0, r4
 8012e12:	f7ff feed 	bl	8012bf0 <_free_r>
 8012e16:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012e18:	b111      	cbz	r1, 8012e20 <_reclaim_reent+0x54>
 8012e1a:	4620      	mov	r0, r4
 8012e1c:	f7ff fee8 	bl	8012bf0 <_free_r>
 8012e20:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012e22:	b111      	cbz	r1, 8012e2a <_reclaim_reent+0x5e>
 8012e24:	4620      	mov	r0, r4
 8012e26:	f7ff fee3 	bl	8012bf0 <_free_r>
 8012e2a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012e2c:	b111      	cbz	r1, 8012e34 <_reclaim_reent+0x68>
 8012e2e:	4620      	mov	r0, r4
 8012e30:	f7ff fede 	bl	8012bf0 <_free_r>
 8012e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012e36:	b111      	cbz	r1, 8012e3e <_reclaim_reent+0x72>
 8012e38:	4620      	mov	r0, r4
 8012e3a:	f7ff fed9 	bl	8012bf0 <_free_r>
 8012e3e:	69a3      	ldr	r3, [r4, #24]
 8012e40:	b1e3      	cbz	r3, 8012e7c <_reclaim_reent+0xb0>
 8012e42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012e44:	4620      	mov	r0, r4
 8012e46:	4798      	blx	r3
 8012e48:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012e4a:	b1b9      	cbz	r1, 8012e7c <_reclaim_reent+0xb0>
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e52:	f7ff bfad 	b.w	8012db0 <cleanup_glue>
 8012e56:	5949      	ldr	r1, [r1, r5]
 8012e58:	b941      	cbnz	r1, 8012e6c <_reclaim_reent+0xa0>
 8012e5a:	3504      	adds	r5, #4
 8012e5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e5e:	2d80      	cmp	r5, #128	; 0x80
 8012e60:	68d9      	ldr	r1, [r3, #12]
 8012e62:	d1f8      	bne.n	8012e56 <_reclaim_reent+0x8a>
 8012e64:	4620      	mov	r0, r4
 8012e66:	f7ff fec3 	bl	8012bf0 <_free_r>
 8012e6a:	e7ba      	b.n	8012de2 <_reclaim_reent+0x16>
 8012e6c:	680e      	ldr	r6, [r1, #0]
 8012e6e:	4620      	mov	r0, r4
 8012e70:	f7ff febe 	bl	8012bf0 <_free_r>
 8012e74:	4631      	mov	r1, r6
 8012e76:	e7ef      	b.n	8012e58 <_reclaim_reent+0x8c>
 8012e78:	2500      	movs	r5, #0
 8012e7a:	e7ef      	b.n	8012e5c <_reclaim_reent+0x90>
 8012e7c:	bd70      	pop	{r4, r5, r6, pc}
 8012e7e:	bf00      	nop
 8012e80:	20000010 	.word	0x20000010

08012e84 <_sbrk_r>:
 8012e84:	b538      	push	{r3, r4, r5, lr}
 8012e86:	4d06      	ldr	r5, [pc, #24]	; (8012ea0 <_sbrk_r+0x1c>)
 8012e88:	2300      	movs	r3, #0
 8012e8a:	4604      	mov	r4, r0
 8012e8c:	4608      	mov	r0, r1
 8012e8e:	602b      	str	r3, [r5, #0]
 8012e90:	f7f1 ff24 	bl	8004cdc <_sbrk>
 8012e94:	1c43      	adds	r3, r0, #1
 8012e96:	d102      	bne.n	8012e9e <_sbrk_r+0x1a>
 8012e98:	682b      	ldr	r3, [r5, #0]
 8012e9a:	b103      	cbz	r3, 8012e9e <_sbrk_r+0x1a>
 8012e9c:	6023      	str	r3, [r4, #0]
 8012e9e:	bd38      	pop	{r3, r4, r5, pc}
 8012ea0:	20009478 	.word	0x20009478

08012ea4 <siprintf>:
 8012ea4:	b40e      	push	{r1, r2, r3}
 8012ea6:	b500      	push	{lr}
 8012ea8:	b09c      	sub	sp, #112	; 0x70
 8012eaa:	ab1d      	add	r3, sp, #116	; 0x74
 8012eac:	9002      	str	r0, [sp, #8]
 8012eae:	9006      	str	r0, [sp, #24]
 8012eb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012eb4:	4809      	ldr	r0, [pc, #36]	; (8012edc <siprintf+0x38>)
 8012eb6:	9107      	str	r1, [sp, #28]
 8012eb8:	9104      	str	r1, [sp, #16]
 8012eba:	4909      	ldr	r1, [pc, #36]	; (8012ee0 <siprintf+0x3c>)
 8012ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ec0:	9105      	str	r1, [sp, #20]
 8012ec2:	6800      	ldr	r0, [r0, #0]
 8012ec4:	9301      	str	r3, [sp, #4]
 8012ec6:	a902      	add	r1, sp, #8
 8012ec8:	f000 f900 	bl	80130cc <_svfiprintf_r>
 8012ecc:	9b02      	ldr	r3, [sp, #8]
 8012ece:	2200      	movs	r2, #0
 8012ed0:	701a      	strb	r2, [r3, #0]
 8012ed2:	b01c      	add	sp, #112	; 0x70
 8012ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ed8:	b003      	add	sp, #12
 8012eda:	4770      	bx	lr
 8012edc:	20000010 	.word	0x20000010
 8012ee0:	ffff0208 	.word	0xffff0208

08012ee4 <_strtol_l.constprop.0>:
 8012ee4:	2b01      	cmp	r3, #1
 8012ee6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012eea:	d001      	beq.n	8012ef0 <_strtol_l.constprop.0+0xc>
 8012eec:	2b24      	cmp	r3, #36	; 0x24
 8012eee:	d906      	bls.n	8012efe <_strtol_l.constprop.0+0x1a>
 8012ef0:	f7ff fe3e 	bl	8012b70 <__errno>
 8012ef4:	2316      	movs	r3, #22
 8012ef6:	6003      	str	r3, [r0, #0]
 8012ef8:	2000      	movs	r0, #0
 8012efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012efe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012fe4 <_strtol_l.constprop.0+0x100>
 8012f02:	460d      	mov	r5, r1
 8012f04:	462e      	mov	r6, r5
 8012f06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f0a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8012f0e:	f017 0708 	ands.w	r7, r7, #8
 8012f12:	d1f7      	bne.n	8012f04 <_strtol_l.constprop.0+0x20>
 8012f14:	2c2d      	cmp	r4, #45	; 0x2d
 8012f16:	d132      	bne.n	8012f7e <_strtol_l.constprop.0+0x9a>
 8012f18:	782c      	ldrb	r4, [r5, #0]
 8012f1a:	2701      	movs	r7, #1
 8012f1c:	1cb5      	adds	r5, r6, #2
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d05b      	beq.n	8012fda <_strtol_l.constprop.0+0xf6>
 8012f22:	2b10      	cmp	r3, #16
 8012f24:	d109      	bne.n	8012f3a <_strtol_l.constprop.0+0x56>
 8012f26:	2c30      	cmp	r4, #48	; 0x30
 8012f28:	d107      	bne.n	8012f3a <_strtol_l.constprop.0+0x56>
 8012f2a:	782c      	ldrb	r4, [r5, #0]
 8012f2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012f30:	2c58      	cmp	r4, #88	; 0x58
 8012f32:	d14d      	bne.n	8012fd0 <_strtol_l.constprop.0+0xec>
 8012f34:	786c      	ldrb	r4, [r5, #1]
 8012f36:	2310      	movs	r3, #16
 8012f38:	3502      	adds	r5, #2
 8012f3a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012f3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8012f42:	f04f 0c00 	mov.w	ip, #0
 8012f46:	fbb8 f9f3 	udiv	r9, r8, r3
 8012f4a:	4666      	mov	r6, ip
 8012f4c:	fb03 8a19 	mls	sl, r3, r9, r8
 8012f50:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8012f54:	f1be 0f09 	cmp.w	lr, #9
 8012f58:	d816      	bhi.n	8012f88 <_strtol_l.constprop.0+0xa4>
 8012f5a:	4674      	mov	r4, lr
 8012f5c:	42a3      	cmp	r3, r4
 8012f5e:	dd24      	ble.n	8012faa <_strtol_l.constprop.0+0xc6>
 8012f60:	f1bc 0f00 	cmp.w	ip, #0
 8012f64:	db1e      	blt.n	8012fa4 <_strtol_l.constprop.0+0xc0>
 8012f66:	45b1      	cmp	r9, r6
 8012f68:	d31c      	bcc.n	8012fa4 <_strtol_l.constprop.0+0xc0>
 8012f6a:	d101      	bne.n	8012f70 <_strtol_l.constprop.0+0x8c>
 8012f6c:	45a2      	cmp	sl, r4
 8012f6e:	db19      	blt.n	8012fa4 <_strtol_l.constprop.0+0xc0>
 8012f70:	fb06 4603 	mla	r6, r6, r3, r4
 8012f74:	f04f 0c01 	mov.w	ip, #1
 8012f78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f7c:	e7e8      	b.n	8012f50 <_strtol_l.constprop.0+0x6c>
 8012f7e:	2c2b      	cmp	r4, #43	; 0x2b
 8012f80:	bf04      	itt	eq
 8012f82:	782c      	ldrbeq	r4, [r5, #0]
 8012f84:	1cb5      	addeq	r5, r6, #2
 8012f86:	e7ca      	b.n	8012f1e <_strtol_l.constprop.0+0x3a>
 8012f88:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8012f8c:	f1be 0f19 	cmp.w	lr, #25
 8012f90:	d801      	bhi.n	8012f96 <_strtol_l.constprop.0+0xb2>
 8012f92:	3c37      	subs	r4, #55	; 0x37
 8012f94:	e7e2      	b.n	8012f5c <_strtol_l.constprop.0+0x78>
 8012f96:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8012f9a:	f1be 0f19 	cmp.w	lr, #25
 8012f9e:	d804      	bhi.n	8012faa <_strtol_l.constprop.0+0xc6>
 8012fa0:	3c57      	subs	r4, #87	; 0x57
 8012fa2:	e7db      	b.n	8012f5c <_strtol_l.constprop.0+0x78>
 8012fa4:	f04f 3cff 	mov.w	ip, #4294967295
 8012fa8:	e7e6      	b.n	8012f78 <_strtol_l.constprop.0+0x94>
 8012faa:	f1bc 0f00 	cmp.w	ip, #0
 8012fae:	da05      	bge.n	8012fbc <_strtol_l.constprop.0+0xd8>
 8012fb0:	2322      	movs	r3, #34	; 0x22
 8012fb2:	6003      	str	r3, [r0, #0]
 8012fb4:	4646      	mov	r6, r8
 8012fb6:	b942      	cbnz	r2, 8012fca <_strtol_l.constprop.0+0xe6>
 8012fb8:	4630      	mov	r0, r6
 8012fba:	e79e      	b.n	8012efa <_strtol_l.constprop.0+0x16>
 8012fbc:	b107      	cbz	r7, 8012fc0 <_strtol_l.constprop.0+0xdc>
 8012fbe:	4276      	negs	r6, r6
 8012fc0:	2a00      	cmp	r2, #0
 8012fc2:	d0f9      	beq.n	8012fb8 <_strtol_l.constprop.0+0xd4>
 8012fc4:	f1bc 0f00 	cmp.w	ip, #0
 8012fc8:	d000      	beq.n	8012fcc <_strtol_l.constprop.0+0xe8>
 8012fca:	1e69      	subs	r1, r5, #1
 8012fcc:	6011      	str	r1, [r2, #0]
 8012fce:	e7f3      	b.n	8012fb8 <_strtol_l.constprop.0+0xd4>
 8012fd0:	2430      	movs	r4, #48	; 0x30
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d1b1      	bne.n	8012f3a <_strtol_l.constprop.0+0x56>
 8012fd6:	2308      	movs	r3, #8
 8012fd8:	e7af      	b.n	8012f3a <_strtol_l.constprop.0+0x56>
 8012fda:	2c30      	cmp	r4, #48	; 0x30
 8012fdc:	d0a5      	beq.n	8012f2a <_strtol_l.constprop.0+0x46>
 8012fde:	230a      	movs	r3, #10
 8012fe0:	e7ab      	b.n	8012f3a <_strtol_l.constprop.0+0x56>
 8012fe2:	bf00      	nop
 8012fe4:	08013bad 	.word	0x08013bad

08012fe8 <strtol>:
 8012fe8:	4613      	mov	r3, r2
 8012fea:	460a      	mov	r2, r1
 8012fec:	4601      	mov	r1, r0
 8012fee:	4802      	ldr	r0, [pc, #8]	; (8012ff8 <strtol+0x10>)
 8012ff0:	6800      	ldr	r0, [r0, #0]
 8012ff2:	f7ff bf77 	b.w	8012ee4 <_strtol_l.constprop.0>
 8012ff6:	bf00      	nop
 8012ff8:	20000010 	.word	0x20000010

08012ffc <__malloc_lock>:
 8012ffc:	4801      	ldr	r0, [pc, #4]	; (8013004 <__malloc_lock+0x8>)
 8012ffe:	f7f2 b926 	b.w	800524e <__retarget_lock_acquire_recursive>
 8013002:	bf00      	nop
 8013004:	20000814 	.word	0x20000814

08013008 <__malloc_unlock>:
 8013008:	4801      	ldr	r0, [pc, #4]	; (8013010 <__malloc_unlock+0x8>)
 801300a:	f7f2 b934 	b.w	8005276 <__retarget_lock_release_recursive>
 801300e:	bf00      	nop
 8013010:	20000814 	.word	0x20000814

08013014 <__ssputs_r>:
 8013014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013018:	688e      	ldr	r6, [r1, #8]
 801301a:	429e      	cmp	r6, r3
 801301c:	4682      	mov	sl, r0
 801301e:	460c      	mov	r4, r1
 8013020:	4690      	mov	r8, r2
 8013022:	461f      	mov	r7, r3
 8013024:	d838      	bhi.n	8013098 <__ssputs_r+0x84>
 8013026:	898a      	ldrh	r2, [r1, #12]
 8013028:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801302c:	d032      	beq.n	8013094 <__ssputs_r+0x80>
 801302e:	6825      	ldr	r5, [r4, #0]
 8013030:	6909      	ldr	r1, [r1, #16]
 8013032:	eba5 0901 	sub.w	r9, r5, r1
 8013036:	6965      	ldr	r5, [r4, #20]
 8013038:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801303c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013040:	3301      	adds	r3, #1
 8013042:	444b      	add	r3, r9
 8013044:	106d      	asrs	r5, r5, #1
 8013046:	429d      	cmp	r5, r3
 8013048:	bf38      	it	cc
 801304a:	461d      	movcc	r5, r3
 801304c:	0553      	lsls	r3, r2, #21
 801304e:	d531      	bpl.n	80130b4 <__ssputs_r+0xa0>
 8013050:	4629      	mov	r1, r5
 8013052:	f7ff fe39 	bl	8012cc8 <_malloc_r>
 8013056:	4606      	mov	r6, r0
 8013058:	b950      	cbnz	r0, 8013070 <__ssputs_r+0x5c>
 801305a:	230c      	movs	r3, #12
 801305c:	f8ca 3000 	str.w	r3, [sl]
 8013060:	89a3      	ldrh	r3, [r4, #12]
 8013062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013066:	81a3      	strh	r3, [r4, #12]
 8013068:	f04f 30ff 	mov.w	r0, #4294967295
 801306c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013070:	6921      	ldr	r1, [r4, #16]
 8013072:	464a      	mov	r2, r9
 8013074:	f7ff fda6 	bl	8012bc4 <memcpy>
 8013078:	89a3      	ldrh	r3, [r4, #12]
 801307a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801307e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013082:	81a3      	strh	r3, [r4, #12]
 8013084:	6126      	str	r6, [r4, #16]
 8013086:	6165      	str	r5, [r4, #20]
 8013088:	444e      	add	r6, r9
 801308a:	eba5 0509 	sub.w	r5, r5, r9
 801308e:	6026      	str	r6, [r4, #0]
 8013090:	60a5      	str	r5, [r4, #8]
 8013092:	463e      	mov	r6, r7
 8013094:	42be      	cmp	r6, r7
 8013096:	d900      	bls.n	801309a <__ssputs_r+0x86>
 8013098:	463e      	mov	r6, r7
 801309a:	6820      	ldr	r0, [r4, #0]
 801309c:	4632      	mov	r2, r6
 801309e:	4641      	mov	r1, r8
 80130a0:	f000 faa8 	bl	80135f4 <memmove>
 80130a4:	68a3      	ldr	r3, [r4, #8]
 80130a6:	1b9b      	subs	r3, r3, r6
 80130a8:	60a3      	str	r3, [r4, #8]
 80130aa:	6823      	ldr	r3, [r4, #0]
 80130ac:	4433      	add	r3, r6
 80130ae:	6023      	str	r3, [r4, #0]
 80130b0:	2000      	movs	r0, #0
 80130b2:	e7db      	b.n	801306c <__ssputs_r+0x58>
 80130b4:	462a      	mov	r2, r5
 80130b6:	f000 fab7 	bl	8013628 <_realloc_r>
 80130ba:	4606      	mov	r6, r0
 80130bc:	2800      	cmp	r0, #0
 80130be:	d1e1      	bne.n	8013084 <__ssputs_r+0x70>
 80130c0:	6921      	ldr	r1, [r4, #16]
 80130c2:	4650      	mov	r0, sl
 80130c4:	f7ff fd94 	bl	8012bf0 <_free_r>
 80130c8:	e7c7      	b.n	801305a <__ssputs_r+0x46>
	...

080130cc <_svfiprintf_r>:
 80130cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130d0:	4698      	mov	r8, r3
 80130d2:	898b      	ldrh	r3, [r1, #12]
 80130d4:	061b      	lsls	r3, r3, #24
 80130d6:	b09d      	sub	sp, #116	; 0x74
 80130d8:	4607      	mov	r7, r0
 80130da:	460d      	mov	r5, r1
 80130dc:	4614      	mov	r4, r2
 80130de:	d50e      	bpl.n	80130fe <_svfiprintf_r+0x32>
 80130e0:	690b      	ldr	r3, [r1, #16]
 80130e2:	b963      	cbnz	r3, 80130fe <_svfiprintf_r+0x32>
 80130e4:	2140      	movs	r1, #64	; 0x40
 80130e6:	f7ff fdef 	bl	8012cc8 <_malloc_r>
 80130ea:	6028      	str	r0, [r5, #0]
 80130ec:	6128      	str	r0, [r5, #16]
 80130ee:	b920      	cbnz	r0, 80130fa <_svfiprintf_r+0x2e>
 80130f0:	230c      	movs	r3, #12
 80130f2:	603b      	str	r3, [r7, #0]
 80130f4:	f04f 30ff 	mov.w	r0, #4294967295
 80130f8:	e0d1      	b.n	801329e <_svfiprintf_r+0x1d2>
 80130fa:	2340      	movs	r3, #64	; 0x40
 80130fc:	616b      	str	r3, [r5, #20]
 80130fe:	2300      	movs	r3, #0
 8013100:	9309      	str	r3, [sp, #36]	; 0x24
 8013102:	2320      	movs	r3, #32
 8013104:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013108:	f8cd 800c 	str.w	r8, [sp, #12]
 801310c:	2330      	movs	r3, #48	; 0x30
 801310e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80132b8 <_svfiprintf_r+0x1ec>
 8013112:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013116:	f04f 0901 	mov.w	r9, #1
 801311a:	4623      	mov	r3, r4
 801311c:	469a      	mov	sl, r3
 801311e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013122:	b10a      	cbz	r2, 8013128 <_svfiprintf_r+0x5c>
 8013124:	2a25      	cmp	r2, #37	; 0x25
 8013126:	d1f9      	bne.n	801311c <_svfiprintf_r+0x50>
 8013128:	ebba 0b04 	subs.w	fp, sl, r4
 801312c:	d00b      	beq.n	8013146 <_svfiprintf_r+0x7a>
 801312e:	465b      	mov	r3, fp
 8013130:	4622      	mov	r2, r4
 8013132:	4629      	mov	r1, r5
 8013134:	4638      	mov	r0, r7
 8013136:	f7ff ff6d 	bl	8013014 <__ssputs_r>
 801313a:	3001      	adds	r0, #1
 801313c:	f000 80aa 	beq.w	8013294 <_svfiprintf_r+0x1c8>
 8013140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013142:	445a      	add	r2, fp
 8013144:	9209      	str	r2, [sp, #36]	; 0x24
 8013146:	f89a 3000 	ldrb.w	r3, [sl]
 801314a:	2b00      	cmp	r3, #0
 801314c:	f000 80a2 	beq.w	8013294 <_svfiprintf_r+0x1c8>
 8013150:	2300      	movs	r3, #0
 8013152:	f04f 32ff 	mov.w	r2, #4294967295
 8013156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801315a:	f10a 0a01 	add.w	sl, sl, #1
 801315e:	9304      	str	r3, [sp, #16]
 8013160:	9307      	str	r3, [sp, #28]
 8013162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013166:	931a      	str	r3, [sp, #104]	; 0x68
 8013168:	4654      	mov	r4, sl
 801316a:	2205      	movs	r2, #5
 801316c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013170:	4851      	ldr	r0, [pc, #324]	; (80132b8 <_svfiprintf_r+0x1ec>)
 8013172:	f7ed f835 	bl	80001e0 <memchr>
 8013176:	9a04      	ldr	r2, [sp, #16]
 8013178:	b9d8      	cbnz	r0, 80131b2 <_svfiprintf_r+0xe6>
 801317a:	06d0      	lsls	r0, r2, #27
 801317c:	bf44      	itt	mi
 801317e:	2320      	movmi	r3, #32
 8013180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013184:	0711      	lsls	r1, r2, #28
 8013186:	bf44      	itt	mi
 8013188:	232b      	movmi	r3, #43	; 0x2b
 801318a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801318e:	f89a 3000 	ldrb.w	r3, [sl]
 8013192:	2b2a      	cmp	r3, #42	; 0x2a
 8013194:	d015      	beq.n	80131c2 <_svfiprintf_r+0xf6>
 8013196:	9a07      	ldr	r2, [sp, #28]
 8013198:	4654      	mov	r4, sl
 801319a:	2000      	movs	r0, #0
 801319c:	f04f 0c0a 	mov.w	ip, #10
 80131a0:	4621      	mov	r1, r4
 80131a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80131a6:	3b30      	subs	r3, #48	; 0x30
 80131a8:	2b09      	cmp	r3, #9
 80131aa:	d94e      	bls.n	801324a <_svfiprintf_r+0x17e>
 80131ac:	b1b0      	cbz	r0, 80131dc <_svfiprintf_r+0x110>
 80131ae:	9207      	str	r2, [sp, #28]
 80131b0:	e014      	b.n	80131dc <_svfiprintf_r+0x110>
 80131b2:	eba0 0308 	sub.w	r3, r0, r8
 80131b6:	fa09 f303 	lsl.w	r3, r9, r3
 80131ba:	4313      	orrs	r3, r2
 80131bc:	9304      	str	r3, [sp, #16]
 80131be:	46a2      	mov	sl, r4
 80131c0:	e7d2      	b.n	8013168 <_svfiprintf_r+0x9c>
 80131c2:	9b03      	ldr	r3, [sp, #12]
 80131c4:	1d19      	adds	r1, r3, #4
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	9103      	str	r1, [sp, #12]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	bfbb      	ittet	lt
 80131ce:	425b      	neglt	r3, r3
 80131d0:	f042 0202 	orrlt.w	r2, r2, #2
 80131d4:	9307      	strge	r3, [sp, #28]
 80131d6:	9307      	strlt	r3, [sp, #28]
 80131d8:	bfb8      	it	lt
 80131da:	9204      	strlt	r2, [sp, #16]
 80131dc:	7823      	ldrb	r3, [r4, #0]
 80131de:	2b2e      	cmp	r3, #46	; 0x2e
 80131e0:	d10c      	bne.n	80131fc <_svfiprintf_r+0x130>
 80131e2:	7863      	ldrb	r3, [r4, #1]
 80131e4:	2b2a      	cmp	r3, #42	; 0x2a
 80131e6:	d135      	bne.n	8013254 <_svfiprintf_r+0x188>
 80131e8:	9b03      	ldr	r3, [sp, #12]
 80131ea:	1d1a      	adds	r2, r3, #4
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	9203      	str	r2, [sp, #12]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	bfb8      	it	lt
 80131f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80131f8:	3402      	adds	r4, #2
 80131fa:	9305      	str	r3, [sp, #20]
 80131fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80132c8 <_svfiprintf_r+0x1fc>
 8013200:	7821      	ldrb	r1, [r4, #0]
 8013202:	2203      	movs	r2, #3
 8013204:	4650      	mov	r0, sl
 8013206:	f7ec ffeb 	bl	80001e0 <memchr>
 801320a:	b140      	cbz	r0, 801321e <_svfiprintf_r+0x152>
 801320c:	2340      	movs	r3, #64	; 0x40
 801320e:	eba0 000a 	sub.w	r0, r0, sl
 8013212:	fa03 f000 	lsl.w	r0, r3, r0
 8013216:	9b04      	ldr	r3, [sp, #16]
 8013218:	4303      	orrs	r3, r0
 801321a:	3401      	adds	r4, #1
 801321c:	9304      	str	r3, [sp, #16]
 801321e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013222:	4826      	ldr	r0, [pc, #152]	; (80132bc <_svfiprintf_r+0x1f0>)
 8013224:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013228:	2206      	movs	r2, #6
 801322a:	f7ec ffd9 	bl	80001e0 <memchr>
 801322e:	2800      	cmp	r0, #0
 8013230:	d038      	beq.n	80132a4 <_svfiprintf_r+0x1d8>
 8013232:	4b23      	ldr	r3, [pc, #140]	; (80132c0 <_svfiprintf_r+0x1f4>)
 8013234:	bb1b      	cbnz	r3, 801327e <_svfiprintf_r+0x1b2>
 8013236:	9b03      	ldr	r3, [sp, #12]
 8013238:	3307      	adds	r3, #7
 801323a:	f023 0307 	bic.w	r3, r3, #7
 801323e:	3308      	adds	r3, #8
 8013240:	9303      	str	r3, [sp, #12]
 8013242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013244:	4433      	add	r3, r6
 8013246:	9309      	str	r3, [sp, #36]	; 0x24
 8013248:	e767      	b.n	801311a <_svfiprintf_r+0x4e>
 801324a:	fb0c 3202 	mla	r2, ip, r2, r3
 801324e:	460c      	mov	r4, r1
 8013250:	2001      	movs	r0, #1
 8013252:	e7a5      	b.n	80131a0 <_svfiprintf_r+0xd4>
 8013254:	2300      	movs	r3, #0
 8013256:	3401      	adds	r4, #1
 8013258:	9305      	str	r3, [sp, #20]
 801325a:	4619      	mov	r1, r3
 801325c:	f04f 0c0a 	mov.w	ip, #10
 8013260:	4620      	mov	r0, r4
 8013262:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013266:	3a30      	subs	r2, #48	; 0x30
 8013268:	2a09      	cmp	r2, #9
 801326a:	d903      	bls.n	8013274 <_svfiprintf_r+0x1a8>
 801326c:	2b00      	cmp	r3, #0
 801326e:	d0c5      	beq.n	80131fc <_svfiprintf_r+0x130>
 8013270:	9105      	str	r1, [sp, #20]
 8013272:	e7c3      	b.n	80131fc <_svfiprintf_r+0x130>
 8013274:	fb0c 2101 	mla	r1, ip, r1, r2
 8013278:	4604      	mov	r4, r0
 801327a:	2301      	movs	r3, #1
 801327c:	e7f0      	b.n	8013260 <_svfiprintf_r+0x194>
 801327e:	ab03      	add	r3, sp, #12
 8013280:	9300      	str	r3, [sp, #0]
 8013282:	462a      	mov	r2, r5
 8013284:	4b0f      	ldr	r3, [pc, #60]	; (80132c4 <_svfiprintf_r+0x1f8>)
 8013286:	a904      	add	r1, sp, #16
 8013288:	4638      	mov	r0, r7
 801328a:	f3af 8000 	nop.w
 801328e:	1c42      	adds	r2, r0, #1
 8013290:	4606      	mov	r6, r0
 8013292:	d1d6      	bne.n	8013242 <_svfiprintf_r+0x176>
 8013294:	89ab      	ldrh	r3, [r5, #12]
 8013296:	065b      	lsls	r3, r3, #25
 8013298:	f53f af2c 	bmi.w	80130f4 <_svfiprintf_r+0x28>
 801329c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801329e:	b01d      	add	sp, #116	; 0x74
 80132a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132a4:	ab03      	add	r3, sp, #12
 80132a6:	9300      	str	r3, [sp, #0]
 80132a8:	462a      	mov	r2, r5
 80132aa:	4b06      	ldr	r3, [pc, #24]	; (80132c4 <_svfiprintf_r+0x1f8>)
 80132ac:	a904      	add	r1, sp, #16
 80132ae:	4638      	mov	r0, r7
 80132b0:	f000 f87a 	bl	80133a8 <_printf_i>
 80132b4:	e7eb      	b.n	801328e <_svfiprintf_r+0x1c2>
 80132b6:	bf00      	nop
 80132b8:	08013cad 	.word	0x08013cad
 80132bc:	08013cb7 	.word	0x08013cb7
 80132c0:	00000000 	.word	0x00000000
 80132c4:	08013015 	.word	0x08013015
 80132c8:	08013cb3 	.word	0x08013cb3

080132cc <_printf_common>:
 80132cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132d0:	4616      	mov	r6, r2
 80132d2:	4699      	mov	r9, r3
 80132d4:	688a      	ldr	r2, [r1, #8]
 80132d6:	690b      	ldr	r3, [r1, #16]
 80132d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80132dc:	4293      	cmp	r3, r2
 80132de:	bfb8      	it	lt
 80132e0:	4613      	movlt	r3, r2
 80132e2:	6033      	str	r3, [r6, #0]
 80132e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80132e8:	4607      	mov	r7, r0
 80132ea:	460c      	mov	r4, r1
 80132ec:	b10a      	cbz	r2, 80132f2 <_printf_common+0x26>
 80132ee:	3301      	adds	r3, #1
 80132f0:	6033      	str	r3, [r6, #0]
 80132f2:	6823      	ldr	r3, [r4, #0]
 80132f4:	0699      	lsls	r1, r3, #26
 80132f6:	bf42      	ittt	mi
 80132f8:	6833      	ldrmi	r3, [r6, #0]
 80132fa:	3302      	addmi	r3, #2
 80132fc:	6033      	strmi	r3, [r6, #0]
 80132fe:	6825      	ldr	r5, [r4, #0]
 8013300:	f015 0506 	ands.w	r5, r5, #6
 8013304:	d106      	bne.n	8013314 <_printf_common+0x48>
 8013306:	f104 0a19 	add.w	sl, r4, #25
 801330a:	68e3      	ldr	r3, [r4, #12]
 801330c:	6832      	ldr	r2, [r6, #0]
 801330e:	1a9b      	subs	r3, r3, r2
 8013310:	42ab      	cmp	r3, r5
 8013312:	dc26      	bgt.n	8013362 <_printf_common+0x96>
 8013314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013318:	1e13      	subs	r3, r2, #0
 801331a:	6822      	ldr	r2, [r4, #0]
 801331c:	bf18      	it	ne
 801331e:	2301      	movne	r3, #1
 8013320:	0692      	lsls	r2, r2, #26
 8013322:	d42b      	bmi.n	801337c <_printf_common+0xb0>
 8013324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013328:	4649      	mov	r1, r9
 801332a:	4638      	mov	r0, r7
 801332c:	47c0      	blx	r8
 801332e:	3001      	adds	r0, #1
 8013330:	d01e      	beq.n	8013370 <_printf_common+0xa4>
 8013332:	6823      	ldr	r3, [r4, #0]
 8013334:	68e5      	ldr	r5, [r4, #12]
 8013336:	6832      	ldr	r2, [r6, #0]
 8013338:	f003 0306 	and.w	r3, r3, #6
 801333c:	2b04      	cmp	r3, #4
 801333e:	bf08      	it	eq
 8013340:	1aad      	subeq	r5, r5, r2
 8013342:	68a3      	ldr	r3, [r4, #8]
 8013344:	6922      	ldr	r2, [r4, #16]
 8013346:	bf0c      	ite	eq
 8013348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801334c:	2500      	movne	r5, #0
 801334e:	4293      	cmp	r3, r2
 8013350:	bfc4      	itt	gt
 8013352:	1a9b      	subgt	r3, r3, r2
 8013354:	18ed      	addgt	r5, r5, r3
 8013356:	2600      	movs	r6, #0
 8013358:	341a      	adds	r4, #26
 801335a:	42b5      	cmp	r5, r6
 801335c:	d11a      	bne.n	8013394 <_printf_common+0xc8>
 801335e:	2000      	movs	r0, #0
 8013360:	e008      	b.n	8013374 <_printf_common+0xa8>
 8013362:	2301      	movs	r3, #1
 8013364:	4652      	mov	r2, sl
 8013366:	4649      	mov	r1, r9
 8013368:	4638      	mov	r0, r7
 801336a:	47c0      	blx	r8
 801336c:	3001      	adds	r0, #1
 801336e:	d103      	bne.n	8013378 <_printf_common+0xac>
 8013370:	f04f 30ff 	mov.w	r0, #4294967295
 8013374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013378:	3501      	adds	r5, #1
 801337a:	e7c6      	b.n	801330a <_printf_common+0x3e>
 801337c:	18e1      	adds	r1, r4, r3
 801337e:	1c5a      	adds	r2, r3, #1
 8013380:	2030      	movs	r0, #48	; 0x30
 8013382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013386:	4422      	add	r2, r4
 8013388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801338c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013390:	3302      	adds	r3, #2
 8013392:	e7c7      	b.n	8013324 <_printf_common+0x58>
 8013394:	2301      	movs	r3, #1
 8013396:	4622      	mov	r2, r4
 8013398:	4649      	mov	r1, r9
 801339a:	4638      	mov	r0, r7
 801339c:	47c0      	blx	r8
 801339e:	3001      	adds	r0, #1
 80133a0:	d0e6      	beq.n	8013370 <_printf_common+0xa4>
 80133a2:	3601      	adds	r6, #1
 80133a4:	e7d9      	b.n	801335a <_printf_common+0x8e>
	...

080133a8 <_printf_i>:
 80133a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80133ac:	7e0f      	ldrb	r7, [r1, #24]
 80133ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80133b0:	2f78      	cmp	r7, #120	; 0x78
 80133b2:	4691      	mov	r9, r2
 80133b4:	4680      	mov	r8, r0
 80133b6:	460c      	mov	r4, r1
 80133b8:	469a      	mov	sl, r3
 80133ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80133be:	d807      	bhi.n	80133d0 <_printf_i+0x28>
 80133c0:	2f62      	cmp	r7, #98	; 0x62
 80133c2:	d80a      	bhi.n	80133da <_printf_i+0x32>
 80133c4:	2f00      	cmp	r7, #0
 80133c6:	f000 80d8 	beq.w	801357a <_printf_i+0x1d2>
 80133ca:	2f58      	cmp	r7, #88	; 0x58
 80133cc:	f000 80a3 	beq.w	8013516 <_printf_i+0x16e>
 80133d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80133d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80133d8:	e03a      	b.n	8013450 <_printf_i+0xa8>
 80133da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80133de:	2b15      	cmp	r3, #21
 80133e0:	d8f6      	bhi.n	80133d0 <_printf_i+0x28>
 80133e2:	a101      	add	r1, pc, #4	; (adr r1, 80133e8 <_printf_i+0x40>)
 80133e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80133e8:	08013441 	.word	0x08013441
 80133ec:	08013455 	.word	0x08013455
 80133f0:	080133d1 	.word	0x080133d1
 80133f4:	080133d1 	.word	0x080133d1
 80133f8:	080133d1 	.word	0x080133d1
 80133fc:	080133d1 	.word	0x080133d1
 8013400:	08013455 	.word	0x08013455
 8013404:	080133d1 	.word	0x080133d1
 8013408:	080133d1 	.word	0x080133d1
 801340c:	080133d1 	.word	0x080133d1
 8013410:	080133d1 	.word	0x080133d1
 8013414:	08013561 	.word	0x08013561
 8013418:	08013485 	.word	0x08013485
 801341c:	08013543 	.word	0x08013543
 8013420:	080133d1 	.word	0x080133d1
 8013424:	080133d1 	.word	0x080133d1
 8013428:	08013583 	.word	0x08013583
 801342c:	080133d1 	.word	0x080133d1
 8013430:	08013485 	.word	0x08013485
 8013434:	080133d1 	.word	0x080133d1
 8013438:	080133d1 	.word	0x080133d1
 801343c:	0801354b 	.word	0x0801354b
 8013440:	682b      	ldr	r3, [r5, #0]
 8013442:	1d1a      	adds	r2, r3, #4
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	602a      	str	r2, [r5, #0]
 8013448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801344c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013450:	2301      	movs	r3, #1
 8013452:	e0a3      	b.n	801359c <_printf_i+0x1f4>
 8013454:	6820      	ldr	r0, [r4, #0]
 8013456:	6829      	ldr	r1, [r5, #0]
 8013458:	0606      	lsls	r6, r0, #24
 801345a:	f101 0304 	add.w	r3, r1, #4
 801345e:	d50a      	bpl.n	8013476 <_printf_i+0xce>
 8013460:	680e      	ldr	r6, [r1, #0]
 8013462:	602b      	str	r3, [r5, #0]
 8013464:	2e00      	cmp	r6, #0
 8013466:	da03      	bge.n	8013470 <_printf_i+0xc8>
 8013468:	232d      	movs	r3, #45	; 0x2d
 801346a:	4276      	negs	r6, r6
 801346c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013470:	485e      	ldr	r0, [pc, #376]	; (80135ec <_printf_i+0x244>)
 8013472:	230a      	movs	r3, #10
 8013474:	e019      	b.n	80134aa <_printf_i+0x102>
 8013476:	680e      	ldr	r6, [r1, #0]
 8013478:	602b      	str	r3, [r5, #0]
 801347a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801347e:	bf18      	it	ne
 8013480:	b236      	sxthne	r6, r6
 8013482:	e7ef      	b.n	8013464 <_printf_i+0xbc>
 8013484:	682b      	ldr	r3, [r5, #0]
 8013486:	6820      	ldr	r0, [r4, #0]
 8013488:	1d19      	adds	r1, r3, #4
 801348a:	6029      	str	r1, [r5, #0]
 801348c:	0601      	lsls	r1, r0, #24
 801348e:	d501      	bpl.n	8013494 <_printf_i+0xec>
 8013490:	681e      	ldr	r6, [r3, #0]
 8013492:	e002      	b.n	801349a <_printf_i+0xf2>
 8013494:	0646      	lsls	r6, r0, #25
 8013496:	d5fb      	bpl.n	8013490 <_printf_i+0xe8>
 8013498:	881e      	ldrh	r6, [r3, #0]
 801349a:	4854      	ldr	r0, [pc, #336]	; (80135ec <_printf_i+0x244>)
 801349c:	2f6f      	cmp	r7, #111	; 0x6f
 801349e:	bf0c      	ite	eq
 80134a0:	2308      	moveq	r3, #8
 80134a2:	230a      	movne	r3, #10
 80134a4:	2100      	movs	r1, #0
 80134a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80134aa:	6865      	ldr	r5, [r4, #4]
 80134ac:	60a5      	str	r5, [r4, #8]
 80134ae:	2d00      	cmp	r5, #0
 80134b0:	bfa2      	ittt	ge
 80134b2:	6821      	ldrge	r1, [r4, #0]
 80134b4:	f021 0104 	bicge.w	r1, r1, #4
 80134b8:	6021      	strge	r1, [r4, #0]
 80134ba:	b90e      	cbnz	r6, 80134c0 <_printf_i+0x118>
 80134bc:	2d00      	cmp	r5, #0
 80134be:	d04d      	beq.n	801355c <_printf_i+0x1b4>
 80134c0:	4615      	mov	r5, r2
 80134c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80134c6:	fb03 6711 	mls	r7, r3, r1, r6
 80134ca:	5dc7      	ldrb	r7, [r0, r7]
 80134cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80134d0:	4637      	mov	r7, r6
 80134d2:	42bb      	cmp	r3, r7
 80134d4:	460e      	mov	r6, r1
 80134d6:	d9f4      	bls.n	80134c2 <_printf_i+0x11a>
 80134d8:	2b08      	cmp	r3, #8
 80134da:	d10b      	bne.n	80134f4 <_printf_i+0x14c>
 80134dc:	6823      	ldr	r3, [r4, #0]
 80134de:	07de      	lsls	r6, r3, #31
 80134e0:	d508      	bpl.n	80134f4 <_printf_i+0x14c>
 80134e2:	6923      	ldr	r3, [r4, #16]
 80134e4:	6861      	ldr	r1, [r4, #4]
 80134e6:	4299      	cmp	r1, r3
 80134e8:	bfde      	ittt	le
 80134ea:	2330      	movle	r3, #48	; 0x30
 80134ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80134f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80134f4:	1b52      	subs	r2, r2, r5
 80134f6:	6122      	str	r2, [r4, #16]
 80134f8:	f8cd a000 	str.w	sl, [sp]
 80134fc:	464b      	mov	r3, r9
 80134fe:	aa03      	add	r2, sp, #12
 8013500:	4621      	mov	r1, r4
 8013502:	4640      	mov	r0, r8
 8013504:	f7ff fee2 	bl	80132cc <_printf_common>
 8013508:	3001      	adds	r0, #1
 801350a:	d14c      	bne.n	80135a6 <_printf_i+0x1fe>
 801350c:	f04f 30ff 	mov.w	r0, #4294967295
 8013510:	b004      	add	sp, #16
 8013512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013516:	4835      	ldr	r0, [pc, #212]	; (80135ec <_printf_i+0x244>)
 8013518:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801351c:	6829      	ldr	r1, [r5, #0]
 801351e:	6823      	ldr	r3, [r4, #0]
 8013520:	f851 6b04 	ldr.w	r6, [r1], #4
 8013524:	6029      	str	r1, [r5, #0]
 8013526:	061d      	lsls	r5, r3, #24
 8013528:	d514      	bpl.n	8013554 <_printf_i+0x1ac>
 801352a:	07df      	lsls	r7, r3, #31
 801352c:	bf44      	itt	mi
 801352e:	f043 0320 	orrmi.w	r3, r3, #32
 8013532:	6023      	strmi	r3, [r4, #0]
 8013534:	b91e      	cbnz	r6, 801353e <_printf_i+0x196>
 8013536:	6823      	ldr	r3, [r4, #0]
 8013538:	f023 0320 	bic.w	r3, r3, #32
 801353c:	6023      	str	r3, [r4, #0]
 801353e:	2310      	movs	r3, #16
 8013540:	e7b0      	b.n	80134a4 <_printf_i+0xfc>
 8013542:	6823      	ldr	r3, [r4, #0]
 8013544:	f043 0320 	orr.w	r3, r3, #32
 8013548:	6023      	str	r3, [r4, #0]
 801354a:	2378      	movs	r3, #120	; 0x78
 801354c:	4828      	ldr	r0, [pc, #160]	; (80135f0 <_printf_i+0x248>)
 801354e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013552:	e7e3      	b.n	801351c <_printf_i+0x174>
 8013554:	0659      	lsls	r1, r3, #25
 8013556:	bf48      	it	mi
 8013558:	b2b6      	uxthmi	r6, r6
 801355a:	e7e6      	b.n	801352a <_printf_i+0x182>
 801355c:	4615      	mov	r5, r2
 801355e:	e7bb      	b.n	80134d8 <_printf_i+0x130>
 8013560:	682b      	ldr	r3, [r5, #0]
 8013562:	6826      	ldr	r6, [r4, #0]
 8013564:	6961      	ldr	r1, [r4, #20]
 8013566:	1d18      	adds	r0, r3, #4
 8013568:	6028      	str	r0, [r5, #0]
 801356a:	0635      	lsls	r5, r6, #24
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	d501      	bpl.n	8013574 <_printf_i+0x1cc>
 8013570:	6019      	str	r1, [r3, #0]
 8013572:	e002      	b.n	801357a <_printf_i+0x1d2>
 8013574:	0670      	lsls	r0, r6, #25
 8013576:	d5fb      	bpl.n	8013570 <_printf_i+0x1c8>
 8013578:	8019      	strh	r1, [r3, #0]
 801357a:	2300      	movs	r3, #0
 801357c:	6123      	str	r3, [r4, #16]
 801357e:	4615      	mov	r5, r2
 8013580:	e7ba      	b.n	80134f8 <_printf_i+0x150>
 8013582:	682b      	ldr	r3, [r5, #0]
 8013584:	1d1a      	adds	r2, r3, #4
 8013586:	602a      	str	r2, [r5, #0]
 8013588:	681d      	ldr	r5, [r3, #0]
 801358a:	6862      	ldr	r2, [r4, #4]
 801358c:	2100      	movs	r1, #0
 801358e:	4628      	mov	r0, r5
 8013590:	f7ec fe26 	bl	80001e0 <memchr>
 8013594:	b108      	cbz	r0, 801359a <_printf_i+0x1f2>
 8013596:	1b40      	subs	r0, r0, r5
 8013598:	6060      	str	r0, [r4, #4]
 801359a:	6863      	ldr	r3, [r4, #4]
 801359c:	6123      	str	r3, [r4, #16]
 801359e:	2300      	movs	r3, #0
 80135a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80135a4:	e7a8      	b.n	80134f8 <_printf_i+0x150>
 80135a6:	6923      	ldr	r3, [r4, #16]
 80135a8:	462a      	mov	r2, r5
 80135aa:	4649      	mov	r1, r9
 80135ac:	4640      	mov	r0, r8
 80135ae:	47d0      	blx	sl
 80135b0:	3001      	adds	r0, #1
 80135b2:	d0ab      	beq.n	801350c <_printf_i+0x164>
 80135b4:	6823      	ldr	r3, [r4, #0]
 80135b6:	079b      	lsls	r3, r3, #30
 80135b8:	d413      	bmi.n	80135e2 <_printf_i+0x23a>
 80135ba:	68e0      	ldr	r0, [r4, #12]
 80135bc:	9b03      	ldr	r3, [sp, #12]
 80135be:	4298      	cmp	r0, r3
 80135c0:	bfb8      	it	lt
 80135c2:	4618      	movlt	r0, r3
 80135c4:	e7a4      	b.n	8013510 <_printf_i+0x168>
 80135c6:	2301      	movs	r3, #1
 80135c8:	4632      	mov	r2, r6
 80135ca:	4649      	mov	r1, r9
 80135cc:	4640      	mov	r0, r8
 80135ce:	47d0      	blx	sl
 80135d0:	3001      	adds	r0, #1
 80135d2:	d09b      	beq.n	801350c <_printf_i+0x164>
 80135d4:	3501      	adds	r5, #1
 80135d6:	68e3      	ldr	r3, [r4, #12]
 80135d8:	9903      	ldr	r1, [sp, #12]
 80135da:	1a5b      	subs	r3, r3, r1
 80135dc:	42ab      	cmp	r3, r5
 80135de:	dcf2      	bgt.n	80135c6 <_printf_i+0x21e>
 80135e0:	e7eb      	b.n	80135ba <_printf_i+0x212>
 80135e2:	2500      	movs	r5, #0
 80135e4:	f104 0619 	add.w	r6, r4, #25
 80135e8:	e7f5      	b.n	80135d6 <_printf_i+0x22e>
 80135ea:	bf00      	nop
 80135ec:	08013cbe 	.word	0x08013cbe
 80135f0:	08013ccf 	.word	0x08013ccf

080135f4 <memmove>:
 80135f4:	4288      	cmp	r0, r1
 80135f6:	b510      	push	{r4, lr}
 80135f8:	eb01 0402 	add.w	r4, r1, r2
 80135fc:	d902      	bls.n	8013604 <memmove+0x10>
 80135fe:	4284      	cmp	r4, r0
 8013600:	4623      	mov	r3, r4
 8013602:	d807      	bhi.n	8013614 <memmove+0x20>
 8013604:	1e43      	subs	r3, r0, #1
 8013606:	42a1      	cmp	r1, r4
 8013608:	d008      	beq.n	801361c <memmove+0x28>
 801360a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801360e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013612:	e7f8      	b.n	8013606 <memmove+0x12>
 8013614:	4402      	add	r2, r0
 8013616:	4601      	mov	r1, r0
 8013618:	428a      	cmp	r2, r1
 801361a:	d100      	bne.n	801361e <memmove+0x2a>
 801361c:	bd10      	pop	{r4, pc}
 801361e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013622:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013626:	e7f7      	b.n	8013618 <memmove+0x24>

08013628 <_realloc_r>:
 8013628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801362c:	4680      	mov	r8, r0
 801362e:	4614      	mov	r4, r2
 8013630:	460e      	mov	r6, r1
 8013632:	b921      	cbnz	r1, 801363e <_realloc_r+0x16>
 8013634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013638:	4611      	mov	r1, r2
 801363a:	f7ff bb45 	b.w	8012cc8 <_malloc_r>
 801363e:	b92a      	cbnz	r2, 801364c <_realloc_r+0x24>
 8013640:	f7ff fad6 	bl	8012bf0 <_free_r>
 8013644:	4625      	mov	r5, r4
 8013646:	4628      	mov	r0, r5
 8013648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801364c:	f000 f81b 	bl	8013686 <_malloc_usable_size_r>
 8013650:	4284      	cmp	r4, r0
 8013652:	4607      	mov	r7, r0
 8013654:	d802      	bhi.n	801365c <_realloc_r+0x34>
 8013656:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801365a:	d812      	bhi.n	8013682 <_realloc_r+0x5a>
 801365c:	4621      	mov	r1, r4
 801365e:	4640      	mov	r0, r8
 8013660:	f7ff fb32 	bl	8012cc8 <_malloc_r>
 8013664:	4605      	mov	r5, r0
 8013666:	2800      	cmp	r0, #0
 8013668:	d0ed      	beq.n	8013646 <_realloc_r+0x1e>
 801366a:	42bc      	cmp	r4, r7
 801366c:	4622      	mov	r2, r4
 801366e:	4631      	mov	r1, r6
 8013670:	bf28      	it	cs
 8013672:	463a      	movcs	r2, r7
 8013674:	f7ff faa6 	bl	8012bc4 <memcpy>
 8013678:	4631      	mov	r1, r6
 801367a:	4640      	mov	r0, r8
 801367c:	f7ff fab8 	bl	8012bf0 <_free_r>
 8013680:	e7e1      	b.n	8013646 <_realloc_r+0x1e>
 8013682:	4635      	mov	r5, r6
 8013684:	e7df      	b.n	8013646 <_realloc_r+0x1e>

08013686 <_malloc_usable_size_r>:
 8013686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801368a:	1f18      	subs	r0, r3, #4
 801368c:	2b00      	cmp	r3, #0
 801368e:	bfbc      	itt	lt
 8013690:	580b      	ldrlt	r3, [r1, r0]
 8013692:	18c0      	addlt	r0, r0, r3
 8013694:	4770      	bx	lr
	...

08013698 <_init>:
 8013698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801369a:	bf00      	nop
 801369c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801369e:	bc08      	pop	{r3}
 80136a0:	469e      	mov	lr, r3
 80136a2:	4770      	bx	lr

080136a4 <_fini>:
 80136a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136a6:	bf00      	nop
 80136a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136aa:	bc08      	pop	{r3}
 80136ac:	469e      	mov	lr, r3
 80136ae:	4770      	bx	lr
