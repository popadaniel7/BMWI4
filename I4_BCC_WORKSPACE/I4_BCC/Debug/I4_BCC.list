
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a210  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800a3b0  0800a3b0  0001a3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4c0  0800a4c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4c0  0800a4c0  0001a4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4c8  0800a4c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4c8  0800a4c8  0001a4c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4cc  0800a4cc  0001a4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a4d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005184  20000074  0800a544  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200051f8  0800a544  000251f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029a0f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000063cd  00000000  00000000  00049ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002140  00000000  00000000  0004fe80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e78  00000000  00000000  00051fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e9ed  00000000  00000000  00053e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e95b  00000000  00000000  00072825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b116c  00000000  00000000  000a1180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001522ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a74  00000000  00000000  0015233c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a398 	.word	0x0800a398

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800a398 	.word	0x0800a398

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <CenLoc_MainFunction>:
uint8 PreviousState_CenLoc;
uint8 ExtLights_UnlockedState;
uint8 ExtLights_LockedState;

void CenLoc_MainFunction()
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	if(CurrentState_CenLoc == STD_HIGH)
 80004e8:	4b95      	ldr	r3, [pc, #596]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d102      	bne.n	80004f6 <CenLoc_MainFunction+0x12>
	{
		SecAlmTrigger = STD_LOW;
 80004f0:	4b94      	ldr	r3, [pc, #592]	; (8000744 <CenLoc_MainFunction+0x260>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(PreviousState_CenLoc != CurrentState_CenLoc)
 80004f6:	4b94      	ldr	r3, [pc, #592]	; (8000748 <CenLoc_MainFunction+0x264>)
 80004f8:	781a      	ldrb	r2, [r3, #0]
 80004fa:	4b91      	ldr	r3, [pc, #580]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	429a      	cmp	r2, r3
 8000500:	d027      	beq.n	8000552 <CenLoc_MainFunction+0x6e>
	{
		ExtLights_LockedState = PreviousState_CenLoc;
 8000502:	4b91      	ldr	r3, [pc, #580]	; (8000748 <CenLoc_MainFunction+0x264>)
 8000504:	781a      	ldrb	r2, [r3, #0]
 8000506:	4b91      	ldr	r3, [pc, #580]	; (800074c <CenLoc_MainFunction+0x268>)
 8000508:	701a      	strb	r2, [r3, #0]
		ExtLights_UnlockedState = CurrentState_CenLoc;
 800050a:	4b8d      	ldr	r3, [pc, #564]	; (8000740 <CenLoc_MainFunction+0x25c>)
 800050c:	781a      	ldrb	r2, [r3, #0]
 800050e:	4b90      	ldr	r3, [pc, #576]	; (8000750 <CenLoc_MainFunction+0x26c>)
 8000510:	701a      	strb	r2, [r3, #0]
		PreviousState_CenLoc = CurrentState_CenLoc;
 8000512:	4b8b      	ldr	r3, [pc, #556]	; (8000740 <CenLoc_MainFunction+0x25c>)
 8000514:	781a      	ldrb	r2, [r3, #0]
 8000516:	4b8c      	ldr	r3, [pc, #560]	; (8000748 <CenLoc_MainFunction+0x264>)
 8000518:	701a      	strb	r2, [r3, #0]
		BTCenLoc_LockUnlockFlag = !CurrentState_CenLoc;
 800051a:	4b89      	ldr	r3, [pc, #548]	; (8000740 <CenLoc_MainFunction+0x25c>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	bf0c      	ite	eq
 8000522:	2301      	moveq	r3, #1
 8000524:	2300      	movne	r3, #0
 8000526:	b2db      	uxtb	r3, r3
 8000528:	461a      	mov	r2, r3
 800052a:	4b8a      	ldr	r3, [pc, #552]	; (8000754 <CenLoc_MainFunction+0x270>)
 800052c:	701a      	strb	r2, [r3, #0]
		LockCounter = STD_LOW;
 800052e:	4b8a      	ldr	r3, [pc, #552]	; (8000758 <CenLoc_MainFunction+0x274>)
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]
		UnlockCounter = STD_LOW;
 8000534:	4b89      	ldr	r3, [pc, #548]	; (800075c <CenLoc_MainFunction+0x278>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
		SecAlmCounter = STD_LOW;
 800053a:	4b89      	ldr	r3, [pc, #548]	; (8000760 <CenLoc_MainFunction+0x27c>)
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]

		HAL_TIM_Base_Init(&htim2);
 8000540:	4888      	ldr	r0, [pc, #544]	; (8000764 <CenLoc_MainFunction+0x280>)
 8000542:	f004 ff2d 	bl	80053a0 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim3);
 8000546:	4888      	ldr	r0, [pc, #544]	; (8000768 <CenLoc_MainFunction+0x284>)
 8000548:	f004 ff2a 	bl	80053a0 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim5);
 800054c:	4887      	ldr	r0, [pc, #540]	; (800076c <CenLoc_MainFunction+0x288>)
 800054e:	f004 ff27 	bl	80053a0 <HAL_TIM_Base_Init>
	else
	{
		/* do nothing */
	}

	if(CurrentState_CenLoc == STD_HIGH && SecAlmTrigger == STD_LOW)
 8000552:	4b7b      	ldr	r3, [pc, #492]	; (8000740 <CenLoc_MainFunction+0x25c>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b01      	cmp	r3, #1
 8000558:	f040 810e 	bne.w	8000778 <CenLoc_MainFunction+0x294>
 800055c:	4b79      	ldr	r3, [pc, #484]	; (8000744 <CenLoc_MainFunction+0x260>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	f040 8109 	bne.w	8000778 <CenLoc_MainFunction+0x294>
	{
		HAL_TIM_Base_Stop(&htim3);
 8000566:	4880      	ldr	r0, [pc, #512]	; (8000768 <CenLoc_MainFunction+0x284>)
 8000568:	f004 ffd0 	bl	800550c <HAL_TIM_Base_Stop>
		BTCenLoc = STD_HIGH;
 800056c:	4b80      	ldr	r3, [pc, #512]	; (8000770 <CenLoc_MainFunction+0x28c>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]

		IntLights_Toggle_IntLights(CurrentState_CenLoc);
 8000572:	4b73      	ldr	r3, [pc, #460]	; (8000740 <CenLoc_MainFunction+0x25c>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fe24 	bl	80011c4 <IntLights_Toggle_IntLights>
		CenLoc_Toggle_Door_LED(CurrentState_CenLoc);
 800057c:	4b70      	ldr	r3, [pc, #448]	; (8000740 <CenLoc_MainFunction+0x25c>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4618      	mov	r0, r3
 8000582:	f000 fa4b 	bl	8000a1c <CenLoc_Toggle_Door_LED>
		SecAlm_ToggleAlarmLed(!CurrentState_CenLoc);
 8000586:	4b6e      	ldr	r3, [pc, #440]	; (8000740 <CenLoc_MainFunction+0x25c>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	bf0c      	ite	eq
 800058e:	2301      	moveq	r3, #1
 8000590:	2300      	movne	r3, #0
 8000592:	b2db      	uxtb	r3, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f000 ff1f 	bl	80013d8 <SecAlm_ToggleAlarmLed>

		if(ExtLights_UnlockedState == 1 && ExtLights_LockedState == 0)
 800059a:	4b6d      	ldr	r3, [pc, #436]	; (8000750 <CenLoc_MainFunction+0x26c>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d143      	bne.n	800062a <CenLoc_MainFunction+0x146>
 80005a2:	4b6a      	ldr	r3, [pc, #424]	; (800074c <CenLoc_MainFunction+0x268>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d13f      	bne.n	800062a <CenLoc_MainFunction+0x146>
		{
			HAL_TIM_Base_Start(&htim5);
 80005aa:	4870      	ldr	r0, [pc, #448]	; (800076c <CenLoc_MainFunction+0x288>)
 80005ac:	f004 ff54 	bl	8005458 <HAL_TIM_Base_Start>
			if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 80005b0:	4b6e      	ldr	r3, [pc, #440]	; (800076c <CenLoc_MainFunction+0x288>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005b6:	4a6f      	ldr	r2, [pc, #444]	; (8000774 <CenLoc_MainFunction+0x290>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d80f      	bhi.n	80005dc <CenLoc_MainFunction+0xf8>
			{
				ExtLights_FogLightFront(CurrentState_CenLoc);
 80005bc:	4b60      	ldr	r3, [pc, #384]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fd53 	bl	800106c <ExtLights_FogLightFront>
				ExtLights_LowBeam(CurrentState_CenLoc);
 80005c6:	4b5e      	ldr	r3, [pc, #376]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 fd2a 	bl	8001024 <ExtLights_LowBeam>
				ExtLights_PositionLightRear(CurrentState_CenLoc);
 80005d0:	4b5b      	ldr	r3, [pc, #364]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fd91 	bl	80010fc <ExtLights_PositionLightRear>
 80005da:	e026      	b.n	800062a <CenLoc_MainFunction+0x146>
			}
			else
			{
				ExtLights_FogLightFront(!CurrentState_CenLoc);
 80005dc:	4b58      	ldr	r3, [pc, #352]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	bf0c      	ite	eq
 80005e4:	2301      	moveq	r3, #1
 80005e6:	2300      	movne	r3, #0
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fd3e 	bl	800106c <ExtLights_FogLightFront>
				ExtLights_LowBeam(!CurrentState_CenLoc);
 80005f0:	4b53      	ldr	r3, [pc, #332]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf0c      	ite	eq
 80005f8:	2301      	moveq	r3, #1
 80005fa:	2300      	movne	r3, #0
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fd10 	bl	8001024 <ExtLights_LowBeam>
				ExtLights_PositionLightRear(!CurrentState_CenLoc);
 8000604:	4b4e      	ldr	r3, [pc, #312]	; (8000740 <CenLoc_MainFunction+0x25c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	bf0c      	ite	eq
 800060c:	2301      	moveq	r3, #1
 800060e:	2300      	movne	r3, #0
 8000610:	b2db      	uxtb	r3, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fd72 	bl	80010fc <ExtLights_PositionLightRear>

				ExtLights_UnlockedState = 0;
 8000618:	4b4d      	ldr	r3, [pc, #308]	; (8000750 <CenLoc_MainFunction+0x26c>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
				ExtLights_LockedState = 1;
 800061e:	4b4b      	ldr	r3, [pc, #300]	; (800074c <CenLoc_MainFunction+0x268>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]

				HAL_TIM_Base_Stop(&htim5);
 8000624:	4851      	ldr	r0, [pc, #324]	; (800076c <CenLoc_MainFunction+0x288>)
 8000626:	f004 ff71 	bl	800550c <HAL_TIM_Base_Stop>
		else
		{
			/* do nothing */
		}

		if(LockCounter < 4)
 800062a:	4b4b      	ldr	r3, [pc, #300]	; (8000758 <CenLoc_MainFunction+0x274>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b03      	cmp	r3, #3
 8000630:	d87b      	bhi.n	800072a <CenLoc_MainFunction+0x246>
		{
			HAL_TIM_Base_Start(&htim2);
 8000632:	484c      	ldr	r0, [pc, #304]	; (8000764 <CenLoc_MainFunction+0x280>)
 8000634:	f004 ff10 	bl	8005458 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000638:	4b4a      	ldr	r3, [pc, #296]	; (8000764 <CenLoc_MainFunction+0x280>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800063e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000642:	4293      	cmp	r3, r2
 8000644:	d80a      	bhi.n	800065c <CenLoc_MainFunction+0x178>
			{
				ExtLights_TurnSignalLeft(CurrentState_CenLoc);
 8000646:	4b3e      	ldr	r3, [pc, #248]	; (8000740 <CenLoc_MainFunction+0x25c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fd32 	bl	80010b4 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(CurrentState_CenLoc);
 8000650:	4b3b      	ldr	r3, [pc, #236]	; (8000740 <CenLoc_MainFunction+0x25c>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fd3f 	bl	80010d8 <ExtLights_TurnSignalRight>
		if(LockCounter < 4)
 800065a:	e19c      	b.n	8000996 <CenLoc_MainFunction+0x4b2>
			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 800065c:	4b41      	ldr	r3, [pc, #260]	; (8000764 <CenLoc_MainFunction+0x280>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000662:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000666:	4293      	cmp	r3, r2
 8000668:	d91b      	bls.n	80006a2 <CenLoc_MainFunction+0x1be>
 800066a:	4b3e      	ldr	r3, [pc, #248]	; (8000764 <CenLoc_MainFunction+0x280>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000670:	f241 3287 	movw	r2, #4999	; 0x1387
 8000674:	4293      	cmp	r3, r2
 8000676:	d814      	bhi.n	80006a2 <CenLoc_MainFunction+0x1be>
			{
				ExtLights_TurnSignalLeft(!CurrentState_CenLoc);
 8000678:	4b31      	ldr	r3, [pc, #196]	; (8000740 <CenLoc_MainFunction+0x25c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	bf0c      	ite	eq
 8000680:	2301      	moveq	r3, #1
 8000682:	2300      	movne	r3, #0
 8000684:	b2db      	uxtb	r3, r3
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fd14 	bl	80010b4 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(!CurrentState_CenLoc);
 800068c:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <CenLoc_MainFunction+0x25c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	bf0c      	ite	eq
 8000694:	2301      	moveq	r3, #1
 8000696:	2300      	movne	r3, #0
 8000698:	b2db      	uxtb	r3, r3
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fd1c 	bl	80010d8 <ExtLights_TurnSignalRight>
 80006a0:	e04c      	b.n	800073c <CenLoc_MainFunction+0x258>
			}
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 80006a2:	4b30      	ldr	r3, [pc, #192]	; (8000764 <CenLoc_MainFunction+0x280>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d911      	bls.n	80006d4 <CenLoc_MainFunction+0x1f0>
 80006b0:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <CenLoc_MainFunction+0x280>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b6:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d80a      	bhi.n	80006d4 <CenLoc_MainFunction+0x1f0>
			{
				ExtLights_TurnSignalLeft(CurrentState_CenLoc);
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fcf6 	bl	80010b4 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(CurrentState_CenLoc);
 80006c8:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fd03 	bl	80010d8 <ExtLights_TurnSignalRight>
 80006d2:	e033      	b.n	800073c <CenLoc_MainFunction+0x258>
			}
			else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <CenLoc_MainFunction+0x280>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006da:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80006de:	4293      	cmp	r3, r2
 80006e0:	f240 8159 	bls.w	8000996 <CenLoc_MainFunction+0x4b2>
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <CenLoc_MainFunction+0x280>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ea:	f242 720f 	movw	r2, #9999	; 0x270f
 80006ee:	4293      	cmp	r3, r2
 80006f0:	f200 8151 	bhi.w	8000996 <CenLoc_MainFunction+0x4b2>
			{
				ExtLights_TurnSignalLeft(!CurrentState_CenLoc);
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	bf0c      	ite	eq
 80006fc:	2301      	moveq	r3, #1
 80006fe:	2300      	movne	r3, #0
 8000700:	b2db      	uxtb	r3, r3
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fcd6 	bl	80010b4 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(!CurrentState_CenLoc);
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <CenLoc_MainFunction+0x25c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	bf0c      	ite	eq
 8000710:	2301      	moveq	r3, #1
 8000712:	2300      	movne	r3, #0
 8000714:	b2db      	uxtb	r3, r3
 8000716:	4618      	mov	r0, r3
 8000718:	f000 fcde 	bl	80010d8 <ExtLights_TurnSignalRight>

				LockCounter++;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <CenLoc_MainFunction+0x274>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	3301      	adds	r3, #1
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <CenLoc_MainFunction+0x274>)
 8000726:	701a      	strb	r2, [r3, #0]
		if(LockCounter < 4)
 8000728:	e135      	b.n	8000996 <CenLoc_MainFunction+0x4b2>
			else
			{
				/* do nothing */
			}
		}
		else if(LockCounter >= 4)
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <CenLoc_MainFunction+0x274>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b03      	cmp	r3, #3
 8000730:	f240 8131 	bls.w	8000996 <CenLoc_MainFunction+0x4b2>
		{
			HAL_TIM_Base_Stop(&htim2);
 8000734:	480b      	ldr	r0, [pc, #44]	; (8000764 <CenLoc_MainFunction+0x280>)
 8000736:	f004 fee9 	bl	800550c <HAL_TIM_Base_Stop>
		if(LockCounter < 4)
 800073a:	e12c      	b.n	8000996 <CenLoc_MainFunction+0x4b2>
 800073c:	e12b      	b.n	8000996 <CenLoc_MainFunction+0x4b2>
 800073e:	bf00      	nop
 8000740:	20000090 	.word	0x20000090
 8000744:	200000b0 	.word	0x200000b0
 8000748:	20000093 	.word	0x20000093
 800074c:	20000095 	.word	0x20000095
 8000750:	20000094 	.word	0x20000094
 8000754:	20000092 	.word	0x20000092
 8000758:	200000ae 	.word	0x200000ae
 800075c:	200000af 	.word	0x200000af
 8000760:	200000b1 	.word	0x200000b1
 8000764:	200003b0 	.word	0x200003b0
 8000768:	20000464 	.word	0x20000464
 800076c:	200005cc 	.word	0x200005cc
 8000770:	20000091 	.word	0x20000091
 8000774:	0001869f 	.word	0x0001869f
		else
		{
			/* do nothing */
		}
	}
	else if(CurrentState_CenLoc == STD_LOW && SecAlmTrigger == STD_LOW)
 8000778:	4b89      	ldr	r3, [pc, #548]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	f040 810d 	bne.w	800099c <CenLoc_MainFunction+0x4b8>
 8000782:	4b88      	ldr	r3, [pc, #544]	; (80009a4 <CenLoc_MainFunction+0x4c0>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	f040 8108 	bne.w	800099c <CenLoc_MainFunction+0x4b8>
	{
		BTCenLoc = STD_LOW;
 800078c:	4b86      	ldr	r3, [pc, #536]	; (80009a8 <CenLoc_MainFunction+0x4c4>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
		IntLights_Toggle_IntLights(CurrentState_CenLoc);
 8000792:	4b83      	ldr	r3, [pc, #524]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fd14 	bl	80011c4 <IntLights_Toggle_IntLights>
		CenLoc_Toggle_Door_LED(CurrentState_CenLoc);
 800079c:	4b80      	ldr	r3, [pc, #512]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 f93b 	bl	8000a1c <CenLoc_Toggle_Door_LED>

		HAL_TIM_Base_Start(&htim3);
 80007a6:	4881      	ldr	r0, [pc, #516]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 80007a8:	f004 fe56 	bl	8005458 <HAL_TIM_Base_Start>

		if(ExtLights_UnlockedState == 0 && ExtLights_LockedState == 1)
 80007ac:	4b80      	ldr	r3, [pc, #512]	; (80009b0 <CenLoc_MainFunction+0x4cc>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d149      	bne.n	8000848 <CenLoc_MainFunction+0x364>
 80007b4:	4b7f      	ldr	r3, [pc, #508]	; (80009b4 <CenLoc_MainFunction+0x4d0>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d145      	bne.n	8000848 <CenLoc_MainFunction+0x364>
		{
			HAL_TIM_Base_Start(&htim5);
 80007bc:	487e      	ldr	r0, [pc, #504]	; (80009b8 <CenLoc_MainFunction+0x4d4>)
 80007be:	f004 fe4b 	bl	8005458 <HAL_TIM_Base_Start>
			if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 80007c2:	4b7d      	ldr	r3, [pc, #500]	; (80009b8 <CenLoc_MainFunction+0x4d4>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c8:	4a7c      	ldr	r2, [pc, #496]	; (80009bc <CenLoc_MainFunction+0x4d8>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d81e      	bhi.n	800080c <CenLoc_MainFunction+0x328>
			{
				ExtLights_FogLightFront(!CurrentState_CenLoc);
 80007ce:	4b74      	ldr	r3, [pc, #464]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	bf0c      	ite	eq
 80007d6:	2301      	moveq	r3, #1
 80007d8:	2300      	movne	r3, #0
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fc45 	bl	800106c <ExtLights_FogLightFront>
				ExtLights_LowBeam(!CurrentState_CenLoc);
 80007e2:	4b6f      	ldr	r3, [pc, #444]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	bf0c      	ite	eq
 80007ea:	2301      	moveq	r3, #1
 80007ec:	2300      	movne	r3, #0
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 fc17 	bl	8001024 <ExtLights_LowBeam>
				ExtLights_PositionLightRear(!CurrentState_CenLoc);
 80007f6:	4b6a      	ldr	r3, [pc, #424]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf0c      	ite	eq
 80007fe:	2301      	moveq	r3, #1
 8000800:	2300      	movne	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4618      	mov	r0, r3
 8000806:	f000 fc79 	bl	80010fc <ExtLights_PositionLightRear>
 800080a:	e01d      	b.n	8000848 <CenLoc_MainFunction+0x364>
			}
			else if(__HAL_TIM_GET_COUNTER(&htim5) > 100000)
 800080c:	4b6a      	ldr	r3, [pc, #424]	; (80009b8 <CenLoc_MainFunction+0x4d4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000812:	4a6b      	ldr	r2, [pc, #428]	; (80009c0 <CenLoc_MainFunction+0x4dc>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d917      	bls.n	8000848 <CenLoc_MainFunction+0x364>
			{
				ExtLights_FogLightFront(CurrentState_CenLoc);
 8000818:	4b61      	ldr	r3, [pc, #388]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fc25 	bl	800106c <ExtLights_FogLightFront>
				ExtLights_LowBeam(CurrentState_CenLoc);
 8000822:	4b5f      	ldr	r3, [pc, #380]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fbfc 	bl	8001024 <ExtLights_LowBeam>
				ExtLights_PositionLightRear(CurrentState_CenLoc);
 800082c:	4b5c      	ldr	r3, [pc, #368]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fc63 	bl	80010fc <ExtLights_PositionLightRear>

				ExtLights_UnlockedState = 1;
 8000836:	4b5e      	ldr	r3, [pc, #376]	; (80009b0 <CenLoc_MainFunction+0x4cc>)
 8000838:	2201      	movs	r2, #1
 800083a:	701a      	strb	r2, [r3, #0]
				ExtLights_LockedState = 0;
 800083c:	4b5d      	ldr	r3, [pc, #372]	; (80009b4 <CenLoc_MainFunction+0x4d0>)
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]

				HAL_TIM_Base_Stop(&htim5);
 8000842:	485d      	ldr	r0, [pc, #372]	; (80009b8 <CenLoc_MainFunction+0x4d4>)
 8000844:	f004 fe62 	bl	800550c <HAL_TIM_Base_Stop>
		else
		{
			/* do nothing */
		}

		if(40000 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 41250)
 8000848:	4b58      	ldr	r3, [pc, #352]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000852:	4293      	cmp	r3, r2
 8000854:	d911      	bls.n	800087a <CenLoc_MainFunction+0x396>
 8000856:	4b55      	ldr	r3, [pc, #340]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800085c:	f24a 1221 	movw	r2, #41249	; 0xa121
 8000860:	4293      	cmp	r3, r2
 8000862:	d80a      	bhi.n	800087a <CenLoc_MainFunction+0x396>
		{
			SecAlm_ToggleAlarmLed(!CurrentState_CenLoc);
 8000864:	4b4e      	ldr	r3, [pc, #312]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	bf0c      	ite	eq
 800086c:	2301      	moveq	r3, #1
 800086e:	2300      	movne	r3, #0
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f000 fdb0 	bl	80013d8 <SecAlm_ToggleAlarmLed>
 8000878:	e03f      	b.n	80008fa <CenLoc_MainFunction+0x416>
		}
		else if(41250 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 42500)
 800087a:	4b4c      	ldr	r3, [pc, #304]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000880:	f24a 1222 	movw	r2, #41250	; 0xa122
 8000884:	4293      	cmp	r3, r2
 8000886:	d90c      	bls.n	80008a2 <CenLoc_MainFunction+0x3be>
 8000888:	4b48      	ldr	r3, [pc, #288]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088e:	f24a 6203 	movw	r2, #42499	; 0xa603
 8000892:	4293      	cmp	r3, r2
 8000894:	d805      	bhi.n	80008a2 <CenLoc_MainFunction+0x3be>
		{
			SecAlm_ToggleAlarmLed(CurrentState_CenLoc);
 8000896:	4b42      	ldr	r3, [pc, #264]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fd9c 	bl	80013d8 <SecAlm_ToggleAlarmLed>
 80008a0:	e02b      	b.n	80008fa <CenLoc_MainFunction+0x416>
		}
		else if(42500 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 43750)
 80008a2:	4b42      	ldr	r3, [pc, #264]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a8:	f24a 6204 	movw	r2, #42500	; 0xa604
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d911      	bls.n	80008d4 <CenLoc_MainFunction+0x3f0>
 80008b0:	4b3e      	ldr	r3, [pc, #248]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b6:	f64a 22e5 	movw	r2, #43749	; 0xaae5
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d80a      	bhi.n	80008d4 <CenLoc_MainFunction+0x3f0>
		{
			SecAlm_ToggleAlarmLed(!CurrentState_CenLoc);
 80008be:	4b38      	ldr	r3, [pc, #224]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	bf0c      	ite	eq
 80008c6:	2301      	moveq	r3, #1
 80008c8:	2300      	movne	r3, #0
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 fd83 	bl	80013d8 <SecAlm_ToggleAlarmLed>
 80008d2:	e012      	b.n	80008fa <CenLoc_MainFunction+0x416>
		}
		else if(43750 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 45000)
 80008d4:	4b35      	ldr	r3, [pc, #212]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008da:	f64a 22e6 	movw	r2, #43750	; 0xaae6
 80008de:	4293      	cmp	r3, r2
 80008e0:	d90b      	bls.n	80008fa <CenLoc_MainFunction+0x416>
 80008e2:	4b32      	ldr	r3, [pc, #200]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e8:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d804      	bhi.n	80008fa <CenLoc_MainFunction+0x416>
		{
			SecAlm_ToggleAlarmLed(CurrentState_CenLoc);
 80008f0:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fd6f 	bl	80013d8 <SecAlm_ToggleAlarmLed>
		else
		{
			/* do nothing */
		}

		if(UnlockCounter < 2 && BTCenLoc_LockUnlockFlag == STD_HIGH)
 80008fa:	4b32      	ldr	r3, [pc, #200]	; (80009c4 <CenLoc_MainFunction+0x4e0>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d841      	bhi.n	8000986 <CenLoc_MainFunction+0x4a2>
 8000902:	4b31      	ldr	r3, [pc, #196]	; (80009c8 <CenLoc_MainFunction+0x4e4>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d13d      	bne.n	8000986 <CenLoc_MainFunction+0x4a2>
		{
			HAL_TIM_Base_Start(&htim2);
 800090a:	4830      	ldr	r0, [pc, #192]	; (80009cc <CenLoc_MainFunction+0x4e8>)
 800090c:	f004 fda4 	bl	8005458 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000910:	4b2e      	ldr	r3, [pc, #184]	; (80009cc <CenLoc_MainFunction+0x4e8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000916:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800091a:	4293      	cmp	r3, r2
 800091c:	d814      	bhi.n	8000948 <CenLoc_MainFunction+0x464>
			{
				ExtLights_TurnSignalLeft(!CurrentState_CenLoc);
 800091e:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	bf0c      	ite	eq
 8000926:	2301      	moveq	r3, #1
 8000928:	2300      	movne	r3, #0
 800092a:	b2db      	uxtb	r3, r3
 800092c:	4618      	mov	r0, r3
 800092e:	f000 fbc1 	bl	80010b4 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(!CurrentState_CenLoc);
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	bf0c      	ite	eq
 800093a:	2301      	moveq	r3, #1
 800093c:	2300      	movne	r3, #0
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fbc9 	bl	80010d8 <ExtLights_TurnSignalRight>
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000946:	e028      	b.n	800099a <CenLoc_MainFunction+0x4b6>
			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <CenLoc_MainFunction+0x4e8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000952:	4293      	cmp	r3, r2
 8000954:	d921      	bls.n	800099a <CenLoc_MainFunction+0x4b6>
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <CenLoc_MainFunction+0x4e8>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000960:	4293      	cmp	r3, r2
 8000962:	d81a      	bhi.n	800099a <CenLoc_MainFunction+0x4b6>
			{
				ExtLights_TurnSignalLeft(CurrentState_CenLoc);
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4618      	mov	r0, r3
 800096a:	f000 fba3 	bl	80010b4 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(CurrentState_CenLoc);
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fbb0 	bl	80010d8 <ExtLights_TurnSignalRight>

				UnlockCounter++;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <CenLoc_MainFunction+0x4e0>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	b2da      	uxtb	r2, r3
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <CenLoc_MainFunction+0x4e0>)
 8000982:	701a      	strb	r2, [r3, #0]
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000984:	e009      	b.n	800099a <CenLoc_MainFunction+0x4b6>
			else
			{
				/* do nothing */
			}
		}
		else if(UnlockCounter >= 2)
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <CenLoc_MainFunction+0x4e0>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d906      	bls.n	800099c <CenLoc_MainFunction+0x4b8>
		{
			HAL_TIM_Base_Stop(&htim2);
 800098e:	480f      	ldr	r0, [pc, #60]	; (80009cc <CenLoc_MainFunction+0x4e8>)
 8000990:	f004 fdbc 	bl	800550c <HAL_TIM_Base_Stop>
	}
	else
	{
		/* do nothing */
	}
}
 8000994:	e002      	b.n	800099c <CenLoc_MainFunction+0x4b8>
		if(LockCounter < 4)
 8000996:	bf00      	nop
 8000998:	e000      	b.n	800099c <CenLoc_MainFunction+0x4b8>
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 800099a:	bf00      	nop
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000090 	.word	0x20000090
 80009a4:	200000b0 	.word	0x200000b0
 80009a8:	20000091 	.word	0x20000091
 80009ac:	20000464 	.word	0x20000464
 80009b0:	20000094 	.word	0x20000094
 80009b4:	20000095 	.word	0x20000095
 80009b8:	200005cc 	.word	0x200005cc
 80009bc:	0001869f 	.word	0x0001869f
 80009c0:	000186a0 	.word	0x000186a0
 80009c4:	200000af 	.word	0x200000af
 80009c8:	20000092 	.word	0x20000092
 80009cc:	200003b0 	.word	0x200003b0

080009d0 <CenLoc_Init>:

StdReturnType CenLoc_Init()
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
	CurrentState_CenLoc = STD_LOW;
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <CenLoc_Init+0x34>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
	BTCenLoc = STD_LOW;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <CenLoc_Init+0x38>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
	BTCenLoc_LockUnlockFlag = STD_LOW;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <CenLoc_Init+0x3c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
	PreviousState_CenLoc = STD_LOW;
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <CenLoc_Init+0x40>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
	ExtLights_UnlockedState = STD_LOW;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <CenLoc_Init+0x44>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
	ExtLights_LockedState = STD_LOW;
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <CenLoc_Init+0x48>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]

	return E_OK;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	20000090 	.word	0x20000090
 8000a08:	20000091 	.word	0x20000091
 8000a0c:	20000092 	.word	0x20000092
 8000a10:	20000093 	.word	0x20000093
 8000a14:	20000094 	.word	0x20000094
 8000a18:	20000095 	.word	0x20000095

08000a1c <CenLoc_Toggle_Door_LED>:

void CenLoc_Toggle_Door_LED(uint8 PinState)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DOOR_LED_PORT, DOOR_LED_PIN, PinState);
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	2140      	movs	r1, #64	; 0x40
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <CenLoc_Toggle_Door_LED+0x20>)
 8000a2e:	f003 f80b 	bl	8003a48 <HAL_GPIO_WritePin>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40020400 	.word	0x40020400

08000a40 <ExtLights_MainFunction>:
uint8_t BTHazardLight;
uint8_t BTExtLight_IrqFlag;


void ExtLights_MainFunction()
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	if(BTLowBeam == STD_HIGH)
 8000a44:	4b86      	ldr	r3, [pc, #536]	; (8000c60 <ExtLights_MainFunction+0x220>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d104      	bne.n	8000a56 <ExtLights_MainFunction+0x16>
	{
		CurrentState_LowBeam = BTLowBeam;
 8000a4c:	4b84      	ldr	r3, [pc, #528]	; (8000c60 <ExtLights_MainFunction+0x220>)
 8000a4e:	781a      	ldrb	r2, [r3, #0]
 8000a50:	4b84      	ldr	r3, [pc, #528]	; (8000c64 <ExtLights_MainFunction+0x224>)
 8000a52:	701a      	strb	r2, [r3, #0]
 8000a54:	e007      	b.n	8000a66 <ExtLights_MainFunction+0x26>
	}
	else if(BTLowBeam == STD_LOW)
 8000a56:	4b82      	ldr	r3, [pc, #520]	; (8000c60 <ExtLights_MainFunction+0x220>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d103      	bne.n	8000a66 <ExtLights_MainFunction+0x26>
	{
		CurrentState_LowBeam = BTLowBeam;
 8000a5e:	4b80      	ldr	r3, [pc, #512]	; (8000c60 <ExtLights_MainFunction+0x220>)
 8000a60:	781a      	ldrb	r2, [r3, #0]
 8000a62:	4b80      	ldr	r3, [pc, #512]	; (8000c64 <ExtLights_MainFunction+0x224>)
 8000a64:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTHighBeam == STD_HIGH)
 8000a66:	4b80      	ldr	r3, [pc, #512]	; (8000c68 <ExtLights_MainFunction+0x228>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d104      	bne.n	8000a78 <ExtLights_MainFunction+0x38>
	{
		CurrentState_HighBeam = BTLowBeam;
 8000a6e:	4b7c      	ldr	r3, [pc, #496]	; (8000c60 <ExtLights_MainFunction+0x220>)
 8000a70:	781a      	ldrb	r2, [r3, #0]
 8000a72:	4b7e      	ldr	r3, [pc, #504]	; (8000c6c <ExtLights_MainFunction+0x22c>)
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	e007      	b.n	8000a88 <ExtLights_MainFunction+0x48>
	}
	else if(BTHighBeam == STD_LOW)
 8000a78:	4b7b      	ldr	r3, [pc, #492]	; (8000c68 <ExtLights_MainFunction+0x228>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d103      	bne.n	8000a88 <ExtLights_MainFunction+0x48>
	{
		CurrentState_HighBeam = BTLowBeam;
 8000a80:	4b77      	ldr	r3, [pc, #476]	; (8000c60 <ExtLights_MainFunction+0x220>)
 8000a82:	781a      	ldrb	r2, [r3, #0]
 8000a84:	4b79      	ldr	r3, [pc, #484]	; (8000c6c <ExtLights_MainFunction+0x22c>)
 8000a86:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTHighBeam == STD_HIGH)
 8000a88:	4b77      	ldr	r3, [pc, #476]	; (8000c68 <ExtLights_MainFunction+0x228>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d104      	bne.n	8000a9a <ExtLights_MainFunction+0x5a>
	{
		CurrentState_HighBeam = BTHighBeam;
 8000a90:	4b75      	ldr	r3, [pc, #468]	; (8000c68 <ExtLights_MainFunction+0x228>)
 8000a92:	781a      	ldrb	r2, [r3, #0]
 8000a94:	4b75      	ldr	r3, [pc, #468]	; (8000c6c <ExtLights_MainFunction+0x22c>)
 8000a96:	701a      	strb	r2, [r3, #0]
 8000a98:	e007      	b.n	8000aaa <ExtLights_MainFunction+0x6a>
	}
	else if(BTHighBeam == STD_LOW)
 8000a9a:	4b73      	ldr	r3, [pc, #460]	; (8000c68 <ExtLights_MainFunction+0x228>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d103      	bne.n	8000aaa <ExtLights_MainFunction+0x6a>
	{
		CurrentState_HighBeam = BTHighBeam;
 8000aa2:	4b71      	ldr	r3, [pc, #452]	; (8000c68 <ExtLights_MainFunction+0x228>)
 8000aa4:	781a      	ldrb	r2, [r3, #0]
 8000aa6:	4b71      	ldr	r3, [pc, #452]	; (8000c6c <ExtLights_MainFunction+0x22c>)
 8000aa8:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTFogLightFront == STD_HIGH)
 8000aaa:	4b71      	ldr	r3, [pc, #452]	; (8000c70 <ExtLights_MainFunction+0x230>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d104      	bne.n	8000abc <ExtLights_MainFunction+0x7c>
	{
		CurrentState_FogLightFront = BTFogLightFront;
 8000ab2:	4b6f      	ldr	r3, [pc, #444]	; (8000c70 <ExtLights_MainFunction+0x230>)
 8000ab4:	781a      	ldrb	r2, [r3, #0]
 8000ab6:	4b6f      	ldr	r3, [pc, #444]	; (8000c74 <ExtLights_MainFunction+0x234>)
 8000ab8:	701a      	strb	r2, [r3, #0]
 8000aba:	e007      	b.n	8000acc <ExtLights_MainFunction+0x8c>
	}
	else if(BTFogLightFront == STD_LOW)
 8000abc:	4b6c      	ldr	r3, [pc, #432]	; (8000c70 <ExtLights_MainFunction+0x230>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d103      	bne.n	8000acc <ExtLights_MainFunction+0x8c>
	{
		CurrentState_FogLightFront = BTFogLightFront;
 8000ac4:	4b6a      	ldr	r3, [pc, #424]	; (8000c70 <ExtLights_MainFunction+0x230>)
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	4b6a      	ldr	r3, [pc, #424]	; (8000c74 <ExtLights_MainFunction+0x234>)
 8000aca:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTFogLightRear == STD_HIGH)
 8000acc:	4b6a      	ldr	r3, [pc, #424]	; (8000c78 <ExtLights_MainFunction+0x238>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d104      	bne.n	8000ade <ExtLights_MainFunction+0x9e>
	{
		CurrentState_FogLightRear = BTFogLightRear;
 8000ad4:	4b68      	ldr	r3, [pc, #416]	; (8000c78 <ExtLights_MainFunction+0x238>)
 8000ad6:	781a      	ldrb	r2, [r3, #0]
 8000ad8:	4b68      	ldr	r3, [pc, #416]	; (8000c7c <ExtLights_MainFunction+0x23c>)
 8000ada:	701a      	strb	r2, [r3, #0]
 8000adc:	e007      	b.n	8000aee <ExtLights_MainFunction+0xae>
	}
	else if(BTFogLightRear == STD_LOW)
 8000ade:	4b66      	ldr	r3, [pc, #408]	; (8000c78 <ExtLights_MainFunction+0x238>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <ExtLights_MainFunction+0xae>
	{
		CurrentState_FogLightRear = BTFogLightRear;
 8000ae6:	4b64      	ldr	r3, [pc, #400]	; (8000c78 <ExtLights_MainFunction+0x238>)
 8000ae8:	781a      	ldrb	r2, [r3, #0]
 8000aea:	4b64      	ldr	r3, [pc, #400]	; (8000c7c <ExtLights_MainFunction+0x23c>)
 8000aec:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTPositionLightRear == STD_HIGH)
 8000aee:	4b64      	ldr	r3, [pc, #400]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d104      	bne.n	8000b00 <ExtLights_MainFunction+0xc0>
	{
		CurrentState_PositionLightRear = BTPositionLightRear;
 8000af6:	4b62      	ldr	r3, [pc, #392]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	4b62      	ldr	r3, [pc, #392]	; (8000c84 <ExtLights_MainFunction+0x244>)
 8000afc:	701a      	strb	r2, [r3, #0]
 8000afe:	e007      	b.n	8000b10 <ExtLights_MainFunction+0xd0>
	}
	else if(BTPositionLightRear == STD_LOW)
 8000b00:	4b5f      	ldr	r3, [pc, #380]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d103      	bne.n	8000b10 <ExtLights_MainFunction+0xd0>
	{
		CurrentState_PositionLightRear = BTPositionLightRear;
 8000b08:	4b5d      	ldr	r3, [pc, #372]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000b0a:	781a      	ldrb	r2, [r3, #0]
 8000b0c:	4b5d      	ldr	r3, [pc, #372]	; (8000c84 <ExtLights_MainFunction+0x244>)
 8000b0e:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTPositionLightRear == STD_HIGH)
 8000b10:	4b5b      	ldr	r3, [pc, #364]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d104      	bne.n	8000b22 <ExtLights_MainFunction+0xe2>
	{
		CurrentState_PositionLightRear = BTPositionLightRear;
 8000b18:	4b59      	ldr	r3, [pc, #356]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	4b59      	ldr	r3, [pc, #356]	; (8000c84 <ExtLights_MainFunction+0x244>)
 8000b1e:	701a      	strb	r2, [r3, #0]
 8000b20:	e007      	b.n	8000b32 <ExtLights_MainFunction+0xf2>
	}
	else if(BTPositionLightRear == STD_LOW)
 8000b22:	4b57      	ldr	r3, [pc, #348]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d103      	bne.n	8000b32 <ExtLights_MainFunction+0xf2>
	{
		CurrentState_PositionLightRear = BTPositionLightRear;
 8000b2a:	4b55      	ldr	r3, [pc, #340]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000b2c:	781a      	ldrb	r2, [r3, #0]
 8000b2e:	4b55      	ldr	r3, [pc, #340]	; (8000c84 <ExtLights_MainFunction+0x244>)
 8000b30:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTBrakeLight == STD_HIGH)
 8000b32:	4b55      	ldr	r3, [pc, #340]	; (8000c88 <ExtLights_MainFunction+0x248>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d104      	bne.n	8000b44 <ExtLights_MainFunction+0x104>
	{
		CurrentState_BrakeLight = BTBrakeLight;
 8000b3a:	4b53      	ldr	r3, [pc, #332]	; (8000c88 <ExtLights_MainFunction+0x248>)
 8000b3c:	781a      	ldrb	r2, [r3, #0]
 8000b3e:	4b53      	ldr	r3, [pc, #332]	; (8000c8c <ExtLights_MainFunction+0x24c>)
 8000b40:	701a      	strb	r2, [r3, #0]
 8000b42:	e007      	b.n	8000b54 <ExtLights_MainFunction+0x114>
	}
	else if(BTBrakeLight == STD_LOW)
 8000b44:	4b50      	ldr	r3, [pc, #320]	; (8000c88 <ExtLights_MainFunction+0x248>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d103      	bne.n	8000b54 <ExtLights_MainFunction+0x114>
	{
		CurrentState_BrakeLight = BTBrakeLight;
 8000b4c:	4b4e      	ldr	r3, [pc, #312]	; (8000c88 <ExtLights_MainFunction+0x248>)
 8000b4e:	781a      	ldrb	r2, [r3, #0]
 8000b50:	4b4e      	ldr	r3, [pc, #312]	; (8000c8c <ExtLights_MainFunction+0x24c>)
 8000b52:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTReverseLight == STD_HIGH)
 8000b54:	4b4e      	ldr	r3, [pc, #312]	; (8000c90 <ExtLights_MainFunction+0x250>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d104      	bne.n	8000b66 <ExtLights_MainFunction+0x126>
	{
		CurrentState_ReverseLight = BTReverseLight;
 8000b5c:	4b4c      	ldr	r3, [pc, #304]	; (8000c90 <ExtLights_MainFunction+0x250>)
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	4b4c      	ldr	r3, [pc, #304]	; (8000c94 <ExtLights_MainFunction+0x254>)
 8000b62:	701a      	strb	r2, [r3, #0]
 8000b64:	e007      	b.n	8000b76 <ExtLights_MainFunction+0x136>
	}
	else if(BTReverseLight == STD_LOW)
 8000b66:	4b4a      	ldr	r3, [pc, #296]	; (8000c90 <ExtLights_MainFunction+0x250>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d103      	bne.n	8000b76 <ExtLights_MainFunction+0x136>
	{
		CurrentState_ReverseLight = BTReverseLight;
 8000b6e:	4b48      	ldr	r3, [pc, #288]	; (8000c90 <ExtLights_MainFunction+0x250>)
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	4b48      	ldr	r3, [pc, #288]	; (8000c94 <ExtLights_MainFunction+0x254>)
 8000b74:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTTurnSignalLeft == STD_HIGH)
 8000b76:	4b48      	ldr	r3, [pc, #288]	; (8000c98 <ExtLights_MainFunction+0x258>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d104      	bne.n	8000b88 <ExtLights_MainFunction+0x148>
	{
		CurrentState_TurnSignalLeft = BTTurnSignalLeft;
 8000b7e:	4b46      	ldr	r3, [pc, #280]	; (8000c98 <ExtLights_MainFunction+0x258>)
 8000b80:	781a      	ldrb	r2, [r3, #0]
 8000b82:	4b46      	ldr	r3, [pc, #280]	; (8000c9c <ExtLights_MainFunction+0x25c>)
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	e007      	b.n	8000b98 <ExtLights_MainFunction+0x158>
	}
	else if(BTTurnSignalLeft == STD_LOW)
 8000b88:	4b43      	ldr	r3, [pc, #268]	; (8000c98 <ExtLights_MainFunction+0x258>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d103      	bne.n	8000b98 <ExtLights_MainFunction+0x158>
	{
		CurrentState_TurnSignalLeft = BTTurnSignalLeft;
 8000b90:	4b41      	ldr	r3, [pc, #260]	; (8000c98 <ExtLights_MainFunction+0x258>)
 8000b92:	781a      	ldrb	r2, [r3, #0]
 8000b94:	4b41      	ldr	r3, [pc, #260]	; (8000c9c <ExtLights_MainFunction+0x25c>)
 8000b96:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTTurnSignalRight == STD_HIGH)
 8000b98:	4b41      	ldr	r3, [pc, #260]	; (8000ca0 <ExtLights_MainFunction+0x260>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d104      	bne.n	8000baa <ExtLights_MainFunction+0x16a>
	{
		CurrentState_TurnSignalRight = BTTurnSignalRight;
 8000ba0:	4b3f      	ldr	r3, [pc, #252]	; (8000ca0 <ExtLights_MainFunction+0x260>)
 8000ba2:	781a      	ldrb	r2, [r3, #0]
 8000ba4:	4b3f      	ldr	r3, [pc, #252]	; (8000ca4 <ExtLights_MainFunction+0x264>)
 8000ba6:	701a      	strb	r2, [r3, #0]
 8000ba8:	e007      	b.n	8000bba <ExtLights_MainFunction+0x17a>
	}
	else if(BTTurnSignalRight == STD_LOW)
 8000baa:	4b3d      	ldr	r3, [pc, #244]	; (8000ca0 <ExtLights_MainFunction+0x260>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d103      	bne.n	8000bba <ExtLights_MainFunction+0x17a>
	{
		CurrentState_TurnSignalRight = BTTurnSignalRight;
 8000bb2:	4b3b      	ldr	r3, [pc, #236]	; (8000ca0 <ExtLights_MainFunction+0x260>)
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	4b3b      	ldr	r3, [pc, #236]	; (8000ca4 <ExtLights_MainFunction+0x264>)
 8000bb8:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTHazardLight == STD_HIGH)
 8000bba:	4b3b      	ldr	r3, [pc, #236]	; (8000ca8 <ExtLights_MainFunction+0x268>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d104      	bne.n	8000bcc <ExtLights_MainFunction+0x18c>
	{
		CurrentState_HazardLight = BTHazardLight;
 8000bc2:	4b39      	ldr	r3, [pc, #228]	; (8000ca8 <ExtLights_MainFunction+0x268>)
 8000bc4:	781a      	ldrb	r2, [r3, #0]
 8000bc6:	4b39      	ldr	r3, [pc, #228]	; (8000cac <ExtLights_MainFunction+0x26c>)
 8000bc8:	701a      	strb	r2, [r3, #0]
 8000bca:	e007      	b.n	8000bdc <ExtLights_MainFunction+0x19c>
	}
	else if(BTHazardLight == STD_LOW)
 8000bcc:	4b36      	ldr	r3, [pc, #216]	; (8000ca8 <ExtLights_MainFunction+0x268>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d103      	bne.n	8000bdc <ExtLights_MainFunction+0x19c>
	{
		CurrentState_HazardLight = BTHazardLight;
 8000bd4:	4b34      	ldr	r3, [pc, #208]	; (8000ca8 <ExtLights_MainFunction+0x268>)
 8000bd6:	781a      	ldrb	r2, [r3, #0]
 8000bd8:	4b34      	ldr	r3, [pc, #208]	; (8000cac <ExtLights_MainFunction+0x26c>)
 8000bda:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(CurrentState_TurnSignalLeft == STD_HIGH)
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	; (8000c9c <ExtLights_MainFunction+0x25c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	f040 8080 	bne.w	8000ce6 <ExtLights_MainFunction+0x2a6>
	{
		HAL_TIM_Base_Start(&htim2);
 8000be6:	4832      	ldr	r0, [pc, #200]	; (8000cb0 <ExtLights_MainFunction+0x270>)
 8000be8:	f004 fc36 	bl	8005458 <HAL_TIM_Base_Start>
		if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000bec:	4b30      	ldr	r3, [pc, #192]	; (8000cb0 <ExtLights_MainFunction+0x270>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d805      	bhi.n	8000c06 <ExtLights_MainFunction+0x1c6>
		{
			ExtLights_TurnSignalLeft(CurrentState_TurnSignalLeft);
 8000bfa:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <ExtLights_MainFunction+0x25c>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 fa58 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000c04:	e078      	b.n	8000cf8 <ExtLights_MainFunction+0x2b8>
		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2)  && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000c06:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <ExtLights_MainFunction+0x270>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d911      	bls.n	8000c38 <ExtLights_MainFunction+0x1f8>
 8000c14:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <ExtLights_MainFunction+0x270>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1a:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d80a      	bhi.n	8000c38 <ExtLights_MainFunction+0x1f8>
		{
			ExtLights_TurnSignalLeft(!CurrentState_TurnSignalLeft);
 8000c22:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <ExtLights_MainFunction+0x25c>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	bf0c      	ite	eq
 8000c2a:	2301      	moveq	r3, #1
 8000c2c:	2300      	movne	r3, #0
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 fa3f 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000c36:	e05f      	b.n	8000cf8 <ExtLights_MainFunction+0x2b8>
		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <ExtLights_MainFunction+0x270>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d936      	bls.n	8000cb4 <ExtLights_MainFunction+0x274>
 8000c46:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <ExtLights_MainFunction+0x270>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4c:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d82f      	bhi.n	8000cb4 <ExtLights_MainFunction+0x274>
		{
			ExtLights_TurnSignalLeft(CurrentState_TurnSignalLeft);
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <ExtLights_MainFunction+0x25c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 fa2b 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000c5e:	e04b      	b.n	8000cf8 <ExtLights_MainFunction+0x2b8>
 8000c60:	200000a0 	.word	0x200000a0
 8000c64:	20000096 	.word	0x20000096
 8000c68:	200000a1 	.word	0x200000a1
 8000c6c:	20000097 	.word	0x20000097
 8000c70:	200000a2 	.word	0x200000a2
 8000c74:	20000098 	.word	0x20000098
 8000c78:	200000a3 	.word	0x200000a3
 8000c7c:	20000099 	.word	0x20000099
 8000c80:	200000a4 	.word	0x200000a4
 8000c84:	2000009c 	.word	0x2000009c
 8000c88:	200000a5 	.word	0x200000a5
 8000c8c:	2000009d 	.word	0x2000009d
 8000c90:	200000a6 	.word	0x200000a6
 8000c94:	2000009e 	.word	0x2000009e
 8000c98:	200000a8 	.word	0x200000a8
 8000c9c:	2000009b 	.word	0x2000009b
 8000ca0:	200000a7 	.word	0x200000a7
 8000ca4:	2000009a 	.word	0x2000009a
 8000ca8:	200000a9 	.word	0x200000a9
 8000cac:	2000009f 	.word	0x2000009f
 8000cb0:	200003b0 	.word	0x200003b0
		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8000cb4:	4b97      	ldr	r3, [pc, #604]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cba:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d91a      	bls.n	8000cf8 <ExtLights_MainFunction+0x2b8>
 8000cc2:	4b94      	ldr	r3, [pc, #592]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d813      	bhi.n	8000cf8 <ExtLights_MainFunction+0x2b8>
		{
			ExtLights_TurnSignalLeft(!CurrentState_TurnSignalLeft);
 8000cd0:	4b91      	ldr	r3, [pc, #580]	; (8000f18 <ExtLights_MainFunction+0x4d8>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	bf0c      	ite	eq
 8000cd8:	2301      	moveq	r3, #1
 8000cda:	2300      	movne	r3, #0
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f9e8 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000ce4:	e008      	b.n	8000cf8 <ExtLights_MainFunction+0x2b8>
		else
		{
			/* do nothing */
		}
	}
	else if(CurrentState_TurnSignalLeft == STD_LOW)
 8000ce6:	4b8c      	ldr	r3, [pc, #560]	; (8000f18 <ExtLights_MainFunction+0x4d8>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d104      	bne.n	8000cf8 <ExtLights_MainFunction+0x2b8>
	{
		ExtLights_TurnSignalLeft(CurrentState_TurnSignalLeft);
 8000cee:	4b8a      	ldr	r3, [pc, #552]	; (8000f18 <ExtLights_MainFunction+0x4d8>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f9de 	bl	80010b4 <ExtLights_TurnSignalLeft>
	else
	{
		/* do nothing */
	}

	if(CurrentState_TurnSignalRight == STD_HIGH)
 8000cf8:	4b88      	ldr	r3, [pc, #544]	; (8000f1c <ExtLights_MainFunction+0x4dc>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d155      	bne.n	8000dac <ExtLights_MainFunction+0x36c>
	{
		HAL_TIM_Base_Start(&htim2);
 8000d00:	4884      	ldr	r0, [pc, #528]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d02:	f004 fba9 	bl	8005458 <HAL_TIM_Base_Start>
		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8000d06:	4b83      	ldr	r3, [pc, #524]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d805      	bhi.n	8000d20 <ExtLights_MainFunction+0x2e0>
		{
			ExtLights_TurnSignalRight(CurrentState_TurnSignalRight);
 8000d14:	4b81      	ldr	r3, [pc, #516]	; (8000f1c <ExtLights_MainFunction+0x4dc>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 f9dd 	bl	80010d8 <ExtLights_TurnSignalRight>
 8000d1e:	e04e      	b.n	8000dbe <ExtLights_MainFunction+0x37e>
		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000d20:	4b7c      	ldr	r3, [pc, #496]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d26:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d911      	bls.n	8000d52 <ExtLights_MainFunction+0x312>
 8000d2e:	4b79      	ldr	r3, [pc, #484]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d34:	f241 3287 	movw	r2, #4999	; 0x1387
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d80a      	bhi.n	8000d52 <ExtLights_MainFunction+0x312>
		{
			ExtLights_TurnSignalRight(!CurrentState_TurnSignalRight);
 8000d3c:	4b77      	ldr	r3, [pc, #476]	; (8000f1c <ExtLights_MainFunction+0x4dc>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	bf0c      	ite	eq
 8000d44:	2301      	moveq	r3, #1
 8000d46:	2300      	movne	r3, #0
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f9c4 	bl	80010d8 <ExtLights_TurnSignalRight>
 8000d50:	e035      	b.n	8000dbe <ExtLights_MainFunction+0x37e>
		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8000d52:	4b70      	ldr	r3, [pc, #448]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d90c      	bls.n	8000d7a <ExtLights_MainFunction+0x33a>
 8000d60:	4b6c      	ldr	r3, [pc, #432]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d66:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d805      	bhi.n	8000d7a <ExtLights_MainFunction+0x33a>
		{
			ExtLights_TurnSignalRight(CurrentState_TurnSignalRight);
 8000d6e:	4b6b      	ldr	r3, [pc, #428]	; (8000f1c <ExtLights_MainFunction+0x4dc>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f9b0 	bl	80010d8 <ExtLights_TurnSignalRight>
 8000d78:	e021      	b.n	8000dbe <ExtLights_MainFunction+0x37e>
		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8000d7a:	4b66      	ldr	r3, [pc, #408]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d80:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d91a      	bls.n	8000dbe <ExtLights_MainFunction+0x37e>
 8000d88:	4b62      	ldr	r3, [pc, #392]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d813      	bhi.n	8000dbe <ExtLights_MainFunction+0x37e>
		{
			ExtLights_TurnSignalRight(!CurrentState_TurnSignalRight);
 8000d96:	4b61      	ldr	r3, [pc, #388]	; (8000f1c <ExtLights_MainFunction+0x4dc>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	bf0c      	ite	eq
 8000d9e:	2301      	moveq	r3, #1
 8000da0:	2300      	movne	r3, #0
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 f997 	bl	80010d8 <ExtLights_TurnSignalRight>
 8000daa:	e008      	b.n	8000dbe <ExtLights_MainFunction+0x37e>
		else
		{
			/* do nothing */
		}
	}
	else if(CurrentState_TurnSignalRight == STD_LOW)
 8000dac:	4b5b      	ldr	r3, [pc, #364]	; (8000f1c <ExtLights_MainFunction+0x4dc>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d104      	bne.n	8000dbe <ExtLights_MainFunction+0x37e>
	{
		ExtLights_TurnSignalRight(CurrentState_TurnSignalRight);
 8000db4:	4b59      	ldr	r3, [pc, #356]	; (8000f1c <ExtLights_MainFunction+0x4dc>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 f98d 	bl	80010d8 <ExtLights_TurnSignalRight>
	else
	{
		/* do nothing */
	}

	if(CurrentState_HazardLight == STD_HIGH)
 8000dbe:	4b58      	ldr	r3, [pc, #352]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d173      	bne.n	8000eae <ExtLights_MainFunction+0x46e>
	{
		HAL_TIM_Base_Start(&htim2);
 8000dc6:	4853      	ldr	r0, [pc, #332]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000dc8:	f004 fb46 	bl	8005458 <HAL_TIM_Base_Start>
		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8000dcc:	4b51      	ldr	r3, [pc, #324]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d80a      	bhi.n	8000df0 <ExtLights_MainFunction+0x3b0>
		{
			ExtLights_TurnSignalRight(CurrentState_HazardLight);
 8000dda:	4b51      	ldr	r3, [pc, #324]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f97a 	bl	80010d8 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(CurrentState_HazardLight);
 8000de4:	4b4e      	ldr	r3, [pc, #312]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 f963 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000dee:	e06c      	b.n	8000eca <ExtLights_MainFunction+0x48a>
		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000df0:	4b48      	ldr	r3, [pc, #288]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d91b      	bls.n	8000e36 <ExtLights_MainFunction+0x3f6>
 8000dfe:	4b45      	ldr	r3, [pc, #276]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e04:	f241 3287 	movw	r2, #4999	; 0x1387
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d814      	bhi.n	8000e36 <ExtLights_MainFunction+0x3f6>
		{
			ExtLights_TurnSignalRight(!CurrentState_HazardLight);
 8000e0c:	4b44      	ldr	r3, [pc, #272]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	bf0c      	ite	eq
 8000e14:	2301      	moveq	r3, #1
 8000e16:	2300      	movne	r3, #0
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f95c 	bl	80010d8 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(!CurrentState_HazardLight);
 8000e20:	4b3f      	ldr	r3, [pc, #252]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	bf0c      	ite	eq
 8000e28:	2301      	moveq	r3, #1
 8000e2a:	2300      	movne	r3, #0
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f940 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000e34:	e049      	b.n	8000eca <ExtLights_MainFunction+0x48a>
		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2)&& __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8000e36:	4b37      	ldr	r3, [pc, #220]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d911      	bls.n	8000e68 <ExtLights_MainFunction+0x428>
 8000e44:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4a:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d80a      	bhi.n	8000e68 <ExtLights_MainFunction+0x428>
		{
			ExtLights_TurnSignalRight(CurrentState_HazardLight);
 8000e52:	4b33      	ldr	r3, [pc, #204]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f93e 	bl	80010d8 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(CurrentState_HazardLight);
 8000e5c:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 f927 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000e66:	e030      	b.n	8000eca <ExtLights_MainFunction+0x48a>
		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8000e68:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6e:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d929      	bls.n	8000eca <ExtLights_MainFunction+0x48a>
 8000e76:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d822      	bhi.n	8000eca <ExtLights_MainFunction+0x48a>
		{
			ExtLights_TurnSignalRight(!CurrentState_HazardLight);
 8000e84:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	bf0c      	ite	eq
 8000e8c:	2301      	moveq	r3, #1
 8000e8e:	2300      	movne	r3, #0
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f920 	bl	80010d8 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(!CurrentState_HazardLight);
 8000e98:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	bf0c      	ite	eq
 8000ea0:	2301      	moveq	r3, #1
 8000ea2:	2300      	movne	r3, #0
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f904 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000eac:	e00d      	b.n	8000eca <ExtLights_MainFunction+0x48a>
		else
		{
			/* do nothing */
		}
	}
	else if(CurrentState_HazardLight == STD_LOW)
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d109      	bne.n	8000eca <ExtLights_MainFunction+0x48a>
	{
		ExtLights_TurnSignalRight(CurrentState_HazardLight);
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f90c 	bl	80010d8 <ExtLights_TurnSignalRight>
		ExtLights_TurnSignalLeft(CurrentState_HazardLight);
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 f8f5 	bl	80010b4 <ExtLights_TurnSignalLeft>
	else
	{
		/* do nothing */
	}

	ExtLights_LowBeam(CurrentState_LowBeam);
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <ExtLights_MainFunction+0x4e4>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f8a8 	bl	8001024 <ExtLights_LowBeam>
	ExtLights_HighBeam(CurrentState_HighBeam);
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <ExtLights_MainFunction+0x4e8>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 f8b5 	bl	8001048 <ExtLights_HighBeam>
	ExtLights_FogLightFront(CurrentState_FogLightFront);
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <ExtLights_MainFunction+0x4ec>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f8c2 	bl	800106c <ExtLights_FogLightFront>
	ExtLights_FogLightRear(CurrentState_FogLightRear);
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <ExtLights_MainFunction+0x4f0>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 f8cf 	bl	8001090 <ExtLights_FogLightRear>
	ExtLights_PositionLightRear(CurrentState_PositionLightRear);
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <ExtLights_MainFunction+0x4f4>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f900 	bl	80010fc <ExtLights_PositionLightRear>
	ExtLights_BrakeLight(CurrentState_BrakeLight);
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <ExtLights_MainFunction+0x4f8>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f90d 	bl	8001120 <ExtLights_BrakeLight>
	ExtLights_ReverseLight(CurrentState_ReverseLight);
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <ExtLights_MainFunction+0x4fc>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f91a 	bl	8001144 <ExtLights_ReverseLight>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200003b0 	.word	0x200003b0
 8000f18:	2000009b 	.word	0x2000009b
 8000f1c:	2000009a 	.word	0x2000009a
 8000f20:	2000009f 	.word	0x2000009f
 8000f24:	20000096 	.word	0x20000096
 8000f28:	20000097 	.word	0x20000097
 8000f2c:	20000098 	.word	0x20000098
 8000f30:	20000099 	.word	0x20000099
 8000f34:	2000009c 	.word	0x2000009c
 8000f38:	2000009d 	.word	0x2000009d
 8000f3c:	2000009e 	.word	0x2000009e

08000f40 <ExtLights_Init>:

StdReturnType ExtLights_Init()
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
	CurrentState_LowBeam = STD_LOW;
 8000f44:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <ExtLights_Init+0x90>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
	CurrentState_HighBeam = STD_LOW;
 8000f4a:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <ExtLights_Init+0x94>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
	CurrentState_FogLightFront = STD_LOW;
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <ExtLights_Init+0x98>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
	CurrentState_FogLightRear = STD_LOW;
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <ExtLights_Init+0x9c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
	CurrentState_TurnSignalLeft = STD_LOW;
 8000f5c:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <ExtLights_Init+0xa0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
	CurrentState_TurnSignalRight = STD_LOW;
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <ExtLights_Init+0xa4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
	CurrentState_PositionLightRear = STD_LOW;
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <ExtLights_Init+0xa8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
	CurrentState_BrakeLight = STD_LOW;
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <ExtLights_Init+0xac>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
	CurrentState_ReverseLight = STD_LOW;
 8000f74:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <ExtLights_Init+0xb0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
	CurrentState_HazardLight = STD_LOW;
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <ExtLights_Init+0xb4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
	BTLowBeam = STD_LOW;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <ExtLights_Init+0xb8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
	BTHighBeam = STD_LOW;
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <ExtLights_Init+0xbc>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
	BTFogLightFront = STD_LOW;
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <ExtLights_Init+0xc0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
	BTFogLightRear = STD_LOW;
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <ExtLights_Init+0xc4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
	BTPositionLightRear = STD_LOW;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <ExtLights_Init+0xc8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
	BTBrakeLight = STD_LOW;
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <ExtLights_Init+0xcc>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
	BTReverseLight = STD_LOW;
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <ExtLights_Init+0xd0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
	BTTurnSignalRight = STD_LOW;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <ExtLights_Init+0xd4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
	BTTurnSignalLeft = STD_LOW;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <ExtLights_Init+0xd8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
	BTHazardLight = STD_LOW;
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <ExtLights_Init+0xdc>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
	BTExtLight_IrqFlag = STD_LOW;
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <ExtLights_Init+0xe0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]

	return E_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000096 	.word	0x20000096
 8000fd4:	20000097 	.word	0x20000097
 8000fd8:	20000098 	.word	0x20000098
 8000fdc:	20000099 	.word	0x20000099
 8000fe0:	2000009b 	.word	0x2000009b
 8000fe4:	2000009a 	.word	0x2000009a
 8000fe8:	2000009c 	.word	0x2000009c
 8000fec:	2000009d 	.word	0x2000009d
 8000ff0:	2000009e 	.word	0x2000009e
 8000ff4:	2000009f 	.word	0x2000009f
 8000ff8:	200000a0 	.word	0x200000a0
 8000ffc:	200000a1 	.word	0x200000a1
 8001000:	200000a2 	.word	0x200000a2
 8001004:	200000a3 	.word	0x200000a3
 8001008:	200000a4 	.word	0x200000a4
 800100c:	200000a5 	.word	0x200000a5
 8001010:	200000a6 	.word	0x200000a6
 8001014:	200000a7 	.word	0x200000a7
 8001018:	200000a8 	.word	0x200000a8
 800101c:	200000a9 	.word	0x200000a9
 8001020:	200000aa 	.word	0x200000aa

08001024 <ExtLights_LowBeam>:


void ExtLights_LowBeam(uint8 PinState)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LOW_BEAM_PORT, LOW_BEAM_PIN, PinState);
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	461a      	mov	r2, r3
 8001032:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001036:	4803      	ldr	r0, [pc, #12]	; (8001044 <ExtLights_LowBeam+0x20>)
 8001038:	f002 fd06 	bl	8003a48 <HAL_GPIO_WritePin>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40020000 	.word	0x40020000

08001048 <ExtLights_HighBeam>:

void ExtLights_HighBeam(uint8 PinState)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(HIGH_BEAM_PORT, HIGH_BEAM_PIN, PinState);
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	461a      	mov	r2, r3
 8001056:	2120      	movs	r1, #32
 8001058:	4803      	ldr	r0, [pc, #12]	; (8001068 <ExtLights_HighBeam+0x20>)
 800105a:	f002 fcf5 	bl	8003a48 <HAL_GPIO_WritePin>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40020400 	.word	0x40020400

0800106c <ExtLights_FogLightFront>:

void ExtLights_FogLightFront(uint8 PinState)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(FRONT_FOG_LIGHT_PORT, FRONT_FOG_LIGHT_PIN, PinState);
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	461a      	mov	r2, r3
 800107a:	2110      	movs	r1, #16
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <ExtLights_FogLightFront+0x20>)
 800107e:	f002 fce3 	bl	8003a48 <HAL_GPIO_WritePin>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40020400 	.word	0x40020400

08001090 <ExtLights_FogLightRear>:

void ExtLights_FogLightRear(uint8 PinState)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(REAR_FOG_LIGHT_PORT, REAR_FOG_LIGHT_PIN, PinState);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	461a      	mov	r2, r3
 800109e:	2140      	movs	r1, #64	; 0x40
 80010a0:	4803      	ldr	r0, [pc, #12]	; (80010b0 <ExtLights_FogLightRear+0x20>)
 80010a2:	f002 fcd1 	bl	8003a48 <HAL_GPIO_WritePin>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40020000 	.word	0x40020000

080010b4 <ExtLights_TurnSignalLeft>:

void ExtLights_TurnSignalLeft(uint8 PinState)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LEFT_TURN_SIGNAL_PORT, LEFT_TURN_SIGNAL_PIN, PinState);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	461a      	mov	r2, r3
 80010c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c6:	4803      	ldr	r0, [pc, #12]	; (80010d4 <ExtLights_TurnSignalLeft+0x20>)
 80010c8:	f002 fcbe 	bl	8003a48 <HAL_GPIO_WritePin>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40020000 	.word	0x40020000

080010d8 <ExtLights_TurnSignalRight>:

void ExtLights_TurnSignalRight(uint8 PinState)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RIGHT_TURN_SIGNAL_PORT, RIGHT_TURN_SIGNAL_PIN, PinState);
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	461a      	mov	r2, r3
 80010e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <ExtLights_TurnSignalRight+0x20>)
 80010ec:	f002 fcac 	bl	8003a48 <HAL_GPIO_WritePin>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40020000 	.word	0x40020000

080010fc <ExtLights_PositionLightRear>:

void ExtLights_PositionLightRear(uint8 PinState)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(REAR_POSITION_LIGHT_PORT, REAR_POSITION_LIGHT_PIN, PinState);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	461a      	mov	r2, r3
 800110a:	2120      	movs	r1, #32
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <ExtLights_PositionLightRear+0x20>)
 800110e:	f002 fc9b 	bl	8003a48 <HAL_GPIO_WritePin>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40020000 	.word	0x40020000

08001120 <ExtLights_BrakeLight>:

void ExtLights_BrakeLight(uint8 PinState)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(BRAKE_LIGHT_PORT, BRAKE_LIGHT_PIN, PinState);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	461a      	mov	r2, r3
 800112e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001132:	4803      	ldr	r0, [pc, #12]	; (8001140 <ExtLights_BrakeLight+0x20>)
 8001134:	f002 fc88 	bl	8003a48 <HAL_GPIO_WritePin>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40020400 	.word	0x40020400

08001144 <ExtLights_ReverseLight>:

void ExtLights_ReverseLight(uint8 PinState)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(REVERSE_LIGHT_PORT, REVERSE_LIGHT_PIN, PinState);
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	461a      	mov	r2, r3
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <ExtLights_ReverseLight+0x20>)
 8001156:	f002 fc77 	bl	8003a48 <HAL_GPIO_WritePin>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40020800 	.word	0x40020800

08001168 <IntLights_MainFunction>:

uint8 CurrentState_IntLights;
uint8 BTIntLights;

void IntLights_MainFunction()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	if(BTIntLights == STD_HIGH)
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <IntLights_MainFunction+0x30>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d103      	bne.n	800117c <IntLights_MainFunction+0x14>
	{
		CurrentState_IntLights = STD_HIGH;
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <IntLights_MainFunction+0x34>)
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
 800117a:	e006      	b.n	800118a <IntLights_MainFunction+0x22>
	}
	else if(BTIntLights == STD_LOW)
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <IntLights_MainFunction+0x30>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d102      	bne.n	800118a <IntLights_MainFunction+0x22>
	{
		CurrentState_IntLights = STD_LOW;
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <IntLights_MainFunction+0x34>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	IntLights_Toggle_IntLights(CurrentState_IntLights);
 800118a:	4b04      	ldr	r3, [pc, #16]	; (800119c <IntLights_MainFunction+0x34>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f818 	bl	80011c4 <IntLights_Toggle_IntLights>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200000ac 	.word	0x200000ac
 800119c:	200000ab 	.word	0x200000ab

080011a0 <IntLights_Init>:

StdReturnType IntLights_Init()
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
	CurrentState_IntLights = STD_LOW;
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <IntLights_Init+0x1c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
	BTIntLights = STD_LOW;
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <IntLights_Init+0x20>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]

	return E_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	200000ab 	.word	0x200000ab
 80011c0:	200000ac 	.word	0x200000ac

080011c4 <IntLights_Toggle_IntLights>:

void IntLights_Toggle_IntLights(uint8 PinState)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(INTERIOR_LIGHT_PORT, INTERIOR_LIGHT_PIN, PinState);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	461a      	mov	r2, r3
 80011d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d6:	4803      	ldr	r0, [pc, #12]	; (80011e4 <IntLights_Toggle_IntLights+0x20>)
 80011d8:	f002 fc36 	bl	8003a48 <HAL_GPIO_WritePin>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40020400 	.word	0x40020400

080011e8 <SecAlm_MainFunction>:
uint8 SecAlmTrigger;
uint8 SecAlmCounter;
uint8 PreviousState_SecAlm;

void SecAlm_MainFunction()
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	if(PreviousState_SecAlm != SecAlmTrigger)
 80011ec:	4b61      	ldr	r3, [pc, #388]	; (8001374 <SecAlm_MainFunction+0x18c>)
 80011ee:	781a      	ldrb	r2, [r3, #0]
 80011f0:	4b61      	ldr	r3, [pc, #388]	; (8001378 <SecAlm_MainFunction+0x190>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d006      	beq.n	8001206 <SecAlm_MainFunction+0x1e>
	{
		HAL_TIM_Base_Init(&htim5);
 80011f8:	4860      	ldr	r0, [pc, #384]	; (800137c <SecAlm_MainFunction+0x194>)
 80011fa:	f004 f8d1 	bl	80053a0 <HAL_TIM_Base_Init>
		PreviousState_SecAlm = SecAlmTrigger;
 80011fe:	4b5e      	ldr	r3, [pc, #376]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	4b5c      	ldr	r3, [pc, #368]	; (8001374 <SecAlm_MainFunction+0x18c>)
 8001204:	701a      	strb	r2, [r3, #0]
	}

	if(SecAlmTrigger == STD_HIGH)
 8001206:	4b5c      	ldr	r3, [pc, #368]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b01      	cmp	r3, #1
 800120c:	f040 808a 	bne.w	8001324 <SecAlm_MainFunction+0x13c>
	{
		HAL_TIM_Base_Start(&htim5);
 8001210:	485a      	ldr	r0, [pc, #360]	; (800137c <SecAlm_MainFunction+0x194>)
 8001212:	f004 f921 	bl	8005458 <HAL_TIM_Base_Start>
		if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 8001216:	4b59      	ldr	r3, [pc, #356]	; (800137c <SecAlm_MainFunction+0x194>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	4a58      	ldr	r2, [pc, #352]	; (8001380 <SecAlm_MainFunction+0x198>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d873      	bhi.n	800130a <SecAlm_MainFunction+0x122>
		{
			HAL_TIM_Base_Start(&htim4);
 8001222:	4858      	ldr	r0, [pc, #352]	; (8001384 <SecAlm_MainFunction+0x19c>)
 8001224:	f004 f918 	bl	8005458 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim4) < 5000)
 8001228:	4b56      	ldr	r3, [pc, #344]	; (8001384 <SecAlm_MainFunction+0x19c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001232:	4293      	cmp	r3, r2
 8001234:	d81e      	bhi.n	8001274 <SecAlm_MainFunction+0x8c>
			{
				ExtLights_LowBeam(SecAlmTrigger);
 8001236:	4b50      	ldr	r3, [pc, #320]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fef2 	bl	8001024 <ExtLights_LowBeam>
				ExtLights_PositionLightRear(SecAlmTrigger);
 8001240:	4b4d      	ldr	r3, [pc, #308]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff59 	bl	80010fc <ExtLights_PositionLightRear>
				ExtLights_FogLightFront(SecAlmTrigger);
 800124a:	4b4b      	ldr	r3, [pc, #300]	; (8001378 <SecAlm_MainFunction+0x190>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff0c 	bl	800106c <ExtLights_FogLightFront>
				ExtLights_FogLightRear(SecAlmTrigger);
 8001254:	4b48      	ldr	r3, [pc, #288]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff19 	bl	8001090 <ExtLights_FogLightRear>
				ExtLights_TurnSignalRight(SecAlmTrigger);
 800125e:	4b46      	ldr	r3, [pc, #280]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff38 	bl	80010d8 <ExtLights_TurnSignalRight>
				ExtLights_TurnSignalLeft(SecAlmTrigger);
 8001268:	4b43      	ldr	r3, [pc, #268]	; (8001378 <SecAlm_MainFunction+0x190>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff21 	bl	80010b4 <ExtLights_TurnSignalLeft>
	}
	else
	{
		/* do nothing */
	}
}
 8001272:	e07c      	b.n	800136e <SecAlm_MainFunction+0x186>
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim4) && __HAL_TIM_GET_COUNTER(&htim4) < 10000)
 8001274:	4b43      	ldr	r3, [pc, #268]	; (8001384 <SecAlm_MainFunction+0x19c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	f241 3288 	movw	r2, #5000	; 0x1388
 800127e:	4293      	cmp	r3, r2
 8001280:	d975      	bls.n	800136e <SecAlm_MainFunction+0x186>
 8001282:	4b40      	ldr	r3, [pc, #256]	; (8001384 <SecAlm_MainFunction+0x19c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	f242 720f 	movw	r2, #9999	; 0x270f
 800128c:	4293      	cmp	r3, r2
 800128e:	d86e      	bhi.n	800136e <SecAlm_MainFunction+0x186>
				ExtLights_LowBeam(!SecAlmTrigger);
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	bf0c      	ite	eq
 8001298:	2301      	moveq	r3, #1
 800129a:	2300      	movne	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fec0 	bl	8001024 <ExtLights_LowBeam>
				ExtLights_PositionLightRear(!SecAlmTrigger);
 80012a4:	4b34      	ldr	r3, [pc, #208]	; (8001378 <SecAlm_MainFunction+0x190>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf0c      	ite	eq
 80012ac:	2301      	moveq	r3, #1
 80012ae:	2300      	movne	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff22 	bl	80010fc <ExtLights_PositionLightRear>
				ExtLights_FogLightFront(!SecAlmTrigger);
 80012b8:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <SecAlm_MainFunction+0x190>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bf0c      	ite	eq
 80012c0:	2301      	moveq	r3, #1
 80012c2:	2300      	movne	r3, #0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fed0 	bl	800106c <ExtLights_FogLightFront>
				ExtLights_FogLightRear(!SecAlmTrigger);
 80012cc:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <SecAlm_MainFunction+0x190>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	bf0c      	ite	eq
 80012d4:	2301      	moveq	r3, #1
 80012d6:	2300      	movne	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fed8 	bl	8001090 <ExtLights_FogLightRear>
				ExtLights_TurnSignalRight(!SecAlmTrigger);
 80012e0:	4b25      	ldr	r3, [pc, #148]	; (8001378 <SecAlm_MainFunction+0x190>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	bf0c      	ite	eq
 80012e8:	2301      	moveq	r3, #1
 80012ea:	2300      	movne	r3, #0
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fef2 	bl	80010d8 <ExtLights_TurnSignalRight>
				ExtLights_TurnSignalLeft(!SecAlmTrigger);
 80012f4:	4b20      	ldr	r3, [pc, #128]	; (8001378 <SecAlm_MainFunction+0x190>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf0c      	ite	eq
 80012fc:	2301      	moveq	r3, #1
 80012fe:	2300      	movne	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fed6 	bl	80010b4 <ExtLights_TurnSignalLeft>
}
 8001308:	e031      	b.n	800136e <SecAlm_MainFunction+0x186>
		else if(__HAL_TIM_GET_COUNTER(&htim5) > 100000)
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <SecAlm_MainFunction+0x194>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	4a1d      	ldr	r2, [pc, #116]	; (8001388 <SecAlm_MainFunction+0x1a0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d92b      	bls.n	800136e <SecAlm_MainFunction+0x186>
			SecAlmTrigger = STD_LOW;
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim5);
 800131c:	4817      	ldr	r0, [pc, #92]	; (800137c <SecAlm_MainFunction+0x194>)
 800131e:	f004 f8f5 	bl	800550c <HAL_TIM_Base_Stop>
}
 8001322:	e024      	b.n	800136e <SecAlm_MainFunction+0x186>
	else if(SecAlmTrigger == STD_LOW)
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d120      	bne.n	800136e <SecAlm_MainFunction+0x186>
		HAL_TIM_Base_Stop(&htim4);
 800132c:	4815      	ldr	r0, [pc, #84]	; (8001384 <SecAlm_MainFunction+0x19c>)
 800132e:	f004 f8ed 	bl	800550c <HAL_TIM_Base_Stop>
		ExtLights_LowBeam(SecAlmTrigger);
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fe74 	bl	8001024 <ExtLights_LowBeam>
		ExtLights_PositionLightRear(SecAlmTrigger);
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <SecAlm_MainFunction+0x190>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fedb 	bl	80010fc <ExtLights_PositionLightRear>
		ExtLights_FogLightFront(SecAlmTrigger);
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fe8e 	bl	800106c <ExtLights_FogLightFront>
		ExtLights_FogLightRear(SecAlmTrigger);
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fe9b 	bl	8001090 <ExtLights_FogLightRear>
		ExtLights_TurnSignalRight(SecAlmTrigger);
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <SecAlm_MainFunction+0x190>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff feba 	bl	80010d8 <ExtLights_TurnSignalRight>
		ExtLights_TurnSignalLeft(SecAlmTrigger);
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fea3 	bl	80010b4 <ExtLights_TurnSignalLeft>
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200000b2 	.word	0x200000b2
 8001378:	200000b0 	.word	0x200000b0
 800137c:	200005cc 	.word	0x200005cc
 8001380:	0001869f 	.word	0x0001869f
 8001384:	20000518 	.word	0x20000518
 8001388:	000186a0 	.word	0x000186a0

0800138c <SecAlm_Init>:

StdReturnType SecAlm_Init()
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
	CurrentState_Alarm_LED = STD_LOW;
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <SecAlm_Init+0x34>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
	LockCounter = STD_LOW;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <SecAlm_Init+0x38>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
	UnlockCounter = STD_LOW;
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <SecAlm_Init+0x3c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
	SecAlmTrigger = STD_LOW;
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <SecAlm_Init+0x40>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
	SecAlmCounter = STD_LOW;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <SecAlm_Init+0x44>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
	PreviousState_SecAlm = STD_LOW;
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <SecAlm_Init+0x48>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]

	return E_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	200000ad 	.word	0x200000ad
 80013c4:	200000ae 	.word	0x200000ae
 80013c8:	200000af 	.word	0x200000af
 80013cc:	200000b0 	.word	0x200000b0
 80013d0:	200000b1 	.word	0x200000b1
 80013d4:	200000b2 	.word	0x200000b2

080013d8 <SecAlm_ToggleAlarmLed>:
{
	HAL_GPIO_WritePin(ALARM_BUZZER_PORT, ALARM_BUZZER_PIN, PinState);
}

void SecAlm_ToggleAlarmLed(uint8 PinState)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ALARM_LED_PORT, ALARM_LED_PIN, PinState);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	461a      	mov	r2, r3
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	4803      	ldr	r0, [pc, #12]	; (80013f8 <SecAlm_ToggleAlarmLed+0x20>)
 80013ea:	f002 fb2d 	bl	8003a48 <HAL_GPIO_WritePin>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40020000 	.word	0x40020000

080013fc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001402:	463b      	mov	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <MX_ADC1_Init+0x98>)
 8001410:	4a21      	ldr	r2, [pc, #132]	; (8001498 <MX_ADC1_Init+0x9c>)
 8001412:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001414:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <MX_ADC1_Init+0x98>)
 8001416:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800141a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <MX_ADC1_Init+0x98>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <MX_ADC1_Init+0x98>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_ADC1_Init+0x98>)
 800142a:	2200      	movs	r2, #0
 800142c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <MX_ADC1_Init+0x98>)
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_ADC1_Init+0x98>)
 8001438:	2200      	movs	r2, #0
 800143a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_ADC1_Init+0x98>)
 800143e:	4a17      	ldr	r2, [pc, #92]	; (800149c <MX_ADC1_Init+0xa0>)
 8001440:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_ADC1_Init+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_ADC1_Init+0x98>)
 800144a:	2201      	movs	r2, #1
 800144c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_ADC1_Init+0x98>)
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_ADC1_Init+0x98>)
 8001458:	2201      	movs	r2, #1
 800145a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <MX_ADC1_Init+0x98>)
 800145e:	f001 fa11 	bl	8002884 <HAL_ADC_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001468:	f000 fb3e 	bl	8001ae8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800146c:	2301      	movs	r3, #1
 800146e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001470:	2301      	movs	r3, #1
 8001472:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001478:	463b      	mov	r3, r7
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_ADC1_Init+0x98>)
 800147e:	f001 fa8f 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001488:	f000 fb2e 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200000b4 	.word	0x200000b4
 8001498:	40012000 	.word	0x40012000
 800149c:	0f000001 	.word	0x0f000001

080014a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a31      	ldr	r2, [pc, #196]	; (8001584 <HAL_ADC_MspInit+0xe4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d15b      	bne.n	800157a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
 80014c6:	4b30      	ldr	r3, [pc, #192]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	4a2f      	ldr	r2, [pc, #188]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 80014cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d0:	6453      	str	r3, [r2, #68]	; 0x44
 80014d2:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014da:	61bb      	str	r3, [r7, #24]
 80014dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	4b29      	ldr	r3, [pc, #164]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a28      	ldr	r2, [pc, #160]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a21      	ldr	r2, [pc, #132]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a1a      	ldr	r2, [pc, #104]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_ADC_MspInit+0xe8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001532:	2307      	movs	r3, #7
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001536:	2303      	movs	r3, #3
 8001538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153e:	f107 031c 	add.w	r3, r7, #28
 8001542:	4619      	mov	r1, r3
 8001544:	4811      	ldr	r0, [pc, #68]	; (800158c <HAL_ADC_MspInit+0xec>)
 8001546:	f002 f8fb 	bl	8003740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800154a:	230e      	movs	r3, #14
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800154e:	2303      	movs	r3, #3
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 031c 	add.w	r3, r7, #28
 800155a:	4619      	mov	r1, r3
 800155c:	480c      	ldr	r0, [pc, #48]	; (8001590 <HAL_ADC_MspInit+0xf0>)
 800155e:	f002 f8ef 	bl	8003740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001562:	2302      	movs	r3, #2
 8001564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001566:	2303      	movs	r3, #3
 8001568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	4807      	ldr	r0, [pc, #28]	; (8001594 <HAL_ADC_MspInit+0xf4>)
 8001576:	f002 f8e3 	bl	8003740 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800157a:	bf00      	nop
 800157c:	3730      	adds	r7, #48	; 0x30
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40012000 	.word	0x40012000
 8001588:	40023800 	.word	0x40023800
 800158c:	40020800 	.word	0x40020800
 8001590:	40020000 	.word	0x40020000
 8001594:	40020400 	.word	0x40020400

08001598 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_CRC_Init+0x20>)
 800159e:	4a07      	ldr	r2, [pc, #28]	; (80015bc <MX_CRC_Init+0x24>)
 80015a0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_CRC_Init+0x20>)
 80015a4:	f001 fd16 	bl	8002fd4 <HAL_CRC_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80015ae:	f000 fa9b 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000118 	.word	0x20000118
 80015bc:	40023000 	.word	0x40023000

080015c0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <HAL_CRC_MspInit+0x3c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d10d      	bne.n	80015ee <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_CRC_MspInit+0x40>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a09      	ldr	r2, [pc, #36]	; (8001600 <HAL_CRC_MspInit+0x40>)
 80015dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <HAL_CRC_MspInit+0x40>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40023000 	.word	0x40023000
 8001600:	40023800 	.word	0x40023800

08001604 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <MX_DMA_Init+0x8c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a1f      	ldr	r2, [pc, #124]	; (8001690 <MX_DMA_Init+0x8c>)
 8001614:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <MX_DMA_Init+0x8c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <MX_DMA_Init+0x90>)
 8001628:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <MX_DMA_Init+0x94>)
 800162a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <MX_DMA_Init+0x90>)
 800162e:	2200      	movs	r2, #0
 8001630:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001632:	4b18      	ldr	r3, [pc, #96]	; (8001694 <MX_DMA_Init+0x90>)
 8001634:	2280      	movs	r2, #128	; 0x80
 8001636:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <MX_DMA_Init+0x90>)
 800163a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800163e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <MX_DMA_Init+0x90>)
 8001642:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001646:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <MX_DMA_Init+0x90>)
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_DMA_Init+0x90>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MX_DMA_Init+0x90>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_DMA_Init+0x90>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_DMA_Init+0x90>)
 8001662:	2204      	movs	r2, #4
 8001664:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <MX_DMA_Init+0x90>)
 8001668:	2203      	movs	r2, #3
 800166a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_DMA_Init+0x90>)
 800166e:	2200      	movs	r2, #0
 8001670:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <MX_DMA_Init+0x90>)
 8001674:	2200      	movs	r2, #0
 8001676:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8001678:	4806      	ldr	r0, [pc, #24]	; (8001694 <MX_DMA_Init+0x90>)
 800167a:	f001 fcc7 	bl	800300c <HAL_DMA_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_DMA_Init+0x84>
  {
    Error_Handler();
 8001684:	f000 fa30 	bl	8001ae8 <Error_Handler>
  }

}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40023800 	.word	0x40023800
 8001694:	20000120 	.word	0x20000120
 8001698:	40026410 	.word	0x40026410

0800169c <configureTimerForRunTimeStats>:
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
return 0;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <PreSleepProcessing>:
/* USER CODE END DAEMON_TASK_STARTUP_HOOK */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of OsTimerCounter */
  OsTimerCounterHandle = osTimerNew(OsTimerCounter_Callback, osTimerPeriodic, NULL, &OsTimerCounter_attributes);
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_FREERTOS_Init+0x2c>)
 8001736:	2200      	movs	r2, #0
 8001738:	2101      	movs	r1, #1
 800173a:	4809      	ldr	r0, [pc, #36]	; (8001760 <MX_FREERTOS_Init+0x30>)
 800173c:	f005 fd50 	bl	80071e0 <osTimerNew>
 8001740:	4603      	mov	r3, r0
 8001742:	4a08      	ldr	r2, [pc, #32]	; (8001764 <MX_FREERTOS_Init+0x34>)
 8001744:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StartOsInit */
  StartOsInitHandle = osThreadNew(Task_StartOsInit, NULL, &StartOsInit_attributes);
 8001746:	4a08      	ldr	r2, [pc, #32]	; (8001768 <MX_FREERTOS_Init+0x38>)
 8001748:	2100      	movs	r1, #0
 800174a:	4808      	ldr	r0, [pc, #32]	; (800176c <MX_FREERTOS_Init+0x3c>)
 800174c:	f005 fc86 	bl	800705c <osThreadNew>
 8001750:	4603      	mov	r3, r0
 8001752:	4a07      	ldr	r2, [pc, #28]	; (8001770 <MX_FREERTOS_Init+0x40>)
 8001754:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	0800a430 	.word	0x0800a430
 8001760:	08001785 	.word	0x08001785
 8001764:	20000184 	.word	0x20000184
 8001768:	0800a40c 	.word	0x0800a40c
 800176c:	08001775 	.word	0x08001775
 8001770:	20000180 	.word	0x20000180

08001774 <Task_StartOsInit>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_StartOsInit */
void Task_StartOsInit(void *argument)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_StartOsInit */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800177c:	2001      	movs	r0, #1
 800177e:	f005 fcff 	bl	8007180 <osDelay>
 8001782:	e7fb      	b.n	800177c <Task_StartOsInit+0x8>

08001784 <OsTimerCounter_Callback>:
  /* USER CODE END Task_StartOsInit */
}

/* OsTimerCounter_Callback function */
void OsTimerCounter_Callback(void *argument)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OsTimerCounter_Callback */

  /* USER CODE END OsTimerCounter_Callback */
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	; 0x28
 800179c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	4b49      	ldr	r3, [pc, #292]	; (80018d8 <MX_GPIO_Init+0x140>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a48      	ldr	r2, [pc, #288]	; (80018d8 <MX_GPIO_Init+0x140>)
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b46      	ldr	r3, [pc, #280]	; (80018d8 <MX_GPIO_Init+0x140>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	4b42      	ldr	r3, [pc, #264]	; (80018d8 <MX_GPIO_Init+0x140>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a41      	ldr	r2, [pc, #260]	; (80018d8 <MX_GPIO_Init+0x140>)
 80017d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b3f      	ldr	r3, [pc, #252]	; (80018d8 <MX_GPIO_Init+0x140>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <MX_GPIO_Init+0x140>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a3a      	ldr	r2, [pc, #232]	; (80018d8 <MX_GPIO_Init+0x140>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <MX_GPIO_Init+0x140>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	4b34      	ldr	r3, [pc, #208]	; (80018d8 <MX_GPIO_Init+0x140>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a33      	ldr	r2, [pc, #204]	; (80018d8 <MX_GPIO_Init+0x140>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b31      	ldr	r3, [pc, #196]	; (80018d8 <MX_GPIO_Init+0x140>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_6|GPIO_PIN_7
 800181e:	2200      	movs	r2, #0
 8001820:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 8001824:	482d      	ldr	r0, [pc, #180]	; (80018dc <MX_GPIO_Init+0x144>)
 8001826:	f002 f90f 	bl	8003a48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5
 800182a:	2200      	movs	r2, #0
 800182c:	f240 7171 	movw	r1, #1905	; 0x771
 8001830:	482b      	ldr	r0, [pc, #172]	; (80018e0 <MX_GPIO_Init+0x148>)
 8001832:	f002 f909 	bl	8003a48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	2180      	movs	r1, #128	; 0x80
 800183a:	482a      	ldr	r0, [pc, #168]	; (80018e4 <MX_GPIO_Init+0x14c>)
 800183c:	f002 f904 	bl	8003a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001846:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800184a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4619      	mov	r1, r3
 8001856:	4823      	ldr	r0, [pc, #140]	; (80018e4 <MX_GPIO_Init+0x14c>)
 8001858:	f001 ff72 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800185c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001862:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	481c      	ldr	r0, [pc, #112]	; (80018e4 <MX_GPIO_Init+0x14c>)
 8001874:	f001 ff64 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin PA6 PA7
                           PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_6|GPIO_PIN_7
 8001878:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 800187c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	2301      	movs	r3, #1
 8001880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	4812      	ldr	r0, [pc, #72]	; (80018dc <MX_GPIO_Init+0x144>)
 8001892:	f001 ff55 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 PB5
                           PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5
 8001896:	f240 7371 	movw	r3, #1905	; 0x771
 800189a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189c:	2301      	movs	r3, #1
 800189e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4619      	mov	r1, r3
 80018ae:	480c      	ldr	r0, [pc, #48]	; (80018e0 <MX_GPIO_Init+0x148>)
 80018b0:	f001 ff46 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b8:	2301      	movs	r3, #1
 80018ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	4806      	ldr	r0, [pc, #24]	; (80018e4 <MX_GPIO_Init+0x14c>)
 80018cc:	f001 ff38 	bl	8003740 <HAL_GPIO_Init>

}
 80018d0:	bf00      	nop
 80018d2:	3728      	adds	r7, #40	; 0x28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020000 	.word	0x40020000
 80018e0:	40020400 	.word	0x40020400
 80018e4:	40020800 	.word	0x40020800

080018e8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <MX_IWDG_Init+0x2c>)
 80018ee:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <MX_IWDG_Init+0x30>)
 80018f0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <MX_IWDG_Init+0x2c>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <MX_IWDG_Init+0x2c>)
 80018fa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80018fe:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001900:	4804      	ldr	r0, [pc, #16]	; (8001914 <MX_IWDG_Init+0x2c>)
 8001902:	f002 f8ba 	bl	8003a7a <HAL_IWDG_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800190c:	f000 f8ec 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	200001b4 	.word	0x200001b4
 8001918:	40003000 	.word	0x40003000

0800191c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001920:	f000 ff6e 	bl	8002800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001924:	f000 f838 	bl	8001998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001928:	f7ff ff36 	bl	8001798 <MX_GPIO_Init>
  MX_DMA_Init();
 800192c:	f7ff fe6a 	bl	8001604 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001930:	f000 fde0 	bl	80024f4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001934:	f000 fc3e 	bl	80021b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001938:	f000 fc8a 	bl	8002250 <MX_TIM3_Init>
  MX_TIM5_Init();
 800193c:	f000 fd24 	bl	8002388 <MX_TIM5_Init>
  MX_TIM4_Init();
 8001940:	f000 fcd4 	bl	80022ec <MX_TIM4_Init>
  MX_IWDG_Init();
 8001944:	f7ff ffd0 	bl	80018e8 <MX_IWDG_Init>
  MX_SPI2_Init();
 8001948:	f000 f9ba 	bl	8001cc0 <MX_SPI2_Init>
  MX_SPI3_Init();
 800194c:	f000 f9ee 	bl	8001d2c <MX_SPI3_Init>
  MX_USART6_UART_Init();
 8001950:	f000 fdfa 	bl	8002548 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001954:	f7ff fd52 	bl	80013fc <MX_ADC1_Init>
  MX_CRC_Init();
 8001958:	f7ff fe1e 	bl	8001598 <MX_CRC_Init>
  MX_RTC_Init();
 800195c:	f000 f8ca 	bl	8001af4 <MX_RTC_Init>
  MX_WWDG_Init();
 8001960:	f000 fee2 	bl	8002728 <MX_WWDG_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001964:	f000 f882 	bl	8001a6c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  CenLoc_Init();
 8001968:	f7ff f832 	bl	80009d0 <CenLoc_Init>
  SecAlm_Init();
 800196c:	f7ff fd0e 	bl	800138c <SecAlm_Init>
  ExtLights_Init();
 8001970:	f7ff fae6 	bl	8000f40 <ExtLights_Init>
  IntLights_Init();
 8001974:	f7ff fc14 	bl	80011a0 <IntLights_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001978:	f005 fb26 	bl	8006fc8 <osKernelInitialize>
  MX_FREERTOS_Init();
 800197c:	f7ff fed8 	bl	8001730 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001980:	f005 fb46 	bl	8007010 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	CenLoc_MainFunction();
 8001984:	f7fe fdae 	bl	80004e4 <CenLoc_MainFunction>
	SecAlm_MainFunction();
 8001988:	f7ff fc2e 	bl	80011e8 <SecAlm_MainFunction>
	ExtLights_MainFunction();
 800198c:	f7ff f858 	bl	8000a40 <ExtLights_MainFunction>
	IntLights_MainFunction();
 8001990:	f7ff fbea 	bl	8001168 <IntLights_MainFunction>
	CenLoc_MainFunction();
 8001994:	e7f6      	b.n	8001984 <main+0x68>
	...

08001998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b094      	sub	sp, #80	; 0x50
 800199c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199e:	f107 0320 	add.w	r3, r7, #32
 80019a2:	2230      	movs	r2, #48	; 0x30
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f008 fc2c 	bl	800a204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <SystemClock_Config+0xcc>)
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	4a27      	ldr	r2, [pc, #156]	; (8001a64 <SystemClock_Config+0xcc>)
 80019c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ca:	6413      	str	r3, [r2, #64]	; 0x40
 80019cc:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <SystemClock_Config+0xcc>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d8:	2300      	movs	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <SystemClock_Config+0xd0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <SystemClock_Config+0xd0>)
 80019e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <SystemClock_Config+0xd0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019f4:	2309      	movs	r3, #9
 80019f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019fe:	2301      	movs	r3, #1
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a02:	2302      	movs	r3, #2
 8001a04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a0c:	2304      	movs	r3, #4
 8001a0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001a10:	2364      	movs	r3, #100	; 0x64
 8001a12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a14:	2302      	movs	r3, #2
 8001a16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a18:	2304      	movs	r3, #4
 8001a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a1c:	f107 0320 	add.w	r3, r7, #32
 8001a20:	4618      	mov	r0, r3
 8001a22:	f002 f887 	bl	8003b34 <HAL_RCC_OscConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a2c:	f000 f85c 	bl	8001ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a30:	230f      	movs	r3, #15
 8001a32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a34:	2302      	movs	r3, #2
 8001a36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	2103      	movs	r1, #3
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f002 fae9 	bl	8004024 <HAL_RCC_ClockConfig>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a58:	f000 f846 	bl	8001ae8 <Error_Handler>
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	3750      	adds	r7, #80	; 0x50
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40007000 	.word	0x40007000

08001a6c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2105      	movs	r1, #5
 8001a74:	2025      	movs	r0, #37	; 0x25
 8001a76:	f001 fa83 	bl	8002f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a7a:	2025      	movs	r0, #37	; 0x25
 8001a7c:	f001 fa9c 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2105      	movs	r1, #5
 8001a84:	2004      	movs	r0, #4
 8001a86:	f001 fa7b 	bl	8002f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001a8a:	2004      	movs	r0, #4
 8001a8c:	f001 fa94 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2105      	movs	r1, #5
 8001a94:	201c      	movs	r0, #28
 8001a96:	f001 fa73 	bl	8002f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a9a:	201c      	movs	r0, #28
 8001a9c:	f001 fa8c 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2105      	movs	r1, #5
 8001aa4:	201d      	movs	r0, #29
 8001aa6:	f001 fa6b 	bl	8002f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001aaa:	201d      	movs	r0, #29
 8001aac:	f001 fa84 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2105      	movs	r1, #5
 8001ab4:	2051      	movs	r0, #81	; 0x51
 8001ab6:	f001 fa63 	bl	8002f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001aba:	2051      	movs	r0, #81	; 0x51
 8001abc:	f001 fa7c 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d101      	bne.n	8001ada <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ad6:	f000 feb5 	bl	8002844 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40010000 	.word	0x40010000

08001ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aec:	b672      	cpsid	i
}
 8001aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <Error_Handler+0x8>
	...

08001af4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b090      	sub	sp, #64	; 0x40
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
 8001b08:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001b0e:	463b      	mov	r3, r7
 8001b10:	2228      	movs	r2, #40	; 0x28
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f008 fb75 	bl	800a204 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b1a:	4b46      	ldr	r3, [pc, #280]	; (8001c34 <MX_RTC_Init+0x140>)
 8001b1c:	4a46      	ldr	r2, [pc, #280]	; (8001c38 <MX_RTC_Init+0x144>)
 8001b1e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b20:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <MX_RTC_Init+0x140>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b26:	4b43      	ldr	r3, [pc, #268]	; (8001c34 <MX_RTC_Init+0x140>)
 8001b28:	227f      	movs	r2, #127	; 0x7f
 8001b2a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b2c:	4b41      	ldr	r3, [pc, #260]	; (8001c34 <MX_RTC_Init+0x140>)
 8001b2e:	22ff      	movs	r2, #255	; 0xff
 8001b30:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b32:	4b40      	ldr	r3, [pc, #256]	; (8001c34 <MX_RTC_Init+0x140>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b38:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <MX_RTC_Init+0x140>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b3e:	4b3d      	ldr	r3, [pc, #244]	; (8001c34 <MX_RTC_Init+0x140>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b44:	483b      	ldr	r0, [pc, #236]	; (8001c34 <MX_RTC_Init+0x140>)
 8001b46:	f002 fdaf 	bl	80046a8 <HAL_RTC_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001b50:	f7ff ffca 	bl	8001ae8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001b6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b72:	2201      	movs	r2, #1
 8001b74:	4619      	mov	r1, r3
 8001b76:	482f      	ldr	r0, [pc, #188]	; (8001c34 <MX_RTC_Init+0x140>)
 8001b78:	f002 fe38 	bl	80047ec <HAL_RTC_SetTime>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001b82:	f7ff ffb1 	bl	8001ae8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001b92:	2301      	movs	r3, #1
 8001b94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4823      	ldr	r0, [pc, #140]	; (8001c34 <MX_RTC_Init+0x140>)
 8001ba8:	f002 feba 	bl	8004920 <HAL_RTC_SetDate>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001bb2:	f7ff ff99 	bl	8001ae8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001be0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001be6:	463b      	mov	r3, r7
 8001be8:	2201      	movs	r2, #1
 8001bea:	4619      	mov	r1, r3
 8001bec:	4811      	ldr	r0, [pc, #68]	; (8001c34 <MX_RTC_Init+0x140>)
 8001bee:	f002 ff1b 	bl	8004a28 <HAL_RTC_SetAlarm>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001bf8:	f7ff ff76 	bl	8001ae8 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c02:	463b      	mov	r3, r7
 8001c04:	2201      	movs	r2, #1
 8001c06:	4619      	mov	r1, r3
 8001c08:	480a      	ldr	r0, [pc, #40]	; (8001c34 <MX_RTC_Init+0x140>)
 8001c0a:	f002 ff0d 	bl	8004a28 <HAL_RTC_SetAlarm>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8001c14:	f7ff ff68 	bl	8001ae8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_RTC_Init+0x140>)
 8001c1e:	f003 f8ec 	bl	8004dfa <HAL_RTCEx_SetWakeUpTimer>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8001c28:	f7ff ff5e 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	3740      	adds	r7, #64	; 0x40
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200001c0 	.word	0x200001c0
 8001c38:	40002800 	.word	0x40002800

08001c3c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c44:	f107 0308 	add.w	r3, r7, #8
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
 8001c54:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <HAL_RTC_MspInit+0x50>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d111      	bne.n	8001c84 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c60:	2302      	movs	r3, #2
 8001c62:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c68:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c6a:	f107 0308 	add.w	r3, r7, #8
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f002 fc2a 	bl	80044c8 <HAL_RCCEx_PeriphCLKConfig>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001c7a:	f7ff ff35 	bl	8001ae8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <HAL_RTC_MspInit+0x54>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c84:	bf00      	nop
 8001c86:	3720      	adds	r7, #32
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40002800 	.word	0x40002800
 8001c90:	42470e3c 	.word	0x42470e3c

08001c94 <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <HAL_RTC_MspDeInit+0x24>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d102      	bne.n	8001cac <HAL_RTC_MspDeInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_RTC_MspDeInit+0x28>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	40002800 	.word	0x40002800
 8001cbc:	42470e3c 	.word	0x42470e3c

08001cc0 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <MX_SPI2_Init+0x64>)
 8001cc6:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <MX_SPI2_Init+0x68>)
 8001cc8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cca:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <MX_SPI2_Init+0x64>)
 8001ccc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cd0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <MX_SPI2_Init+0x64>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <MX_SPI2_Init+0x64>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <MX_SPI2_Init+0x64>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <MX_SPI2_Init+0x64>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <MX_SPI2_Init+0x64>)
 8001cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cf0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <MX_SPI2_Init+0x64>)
 8001cf4:	2218      	movs	r2, #24
 8001cf6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <MX_SPI2_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <MX_SPI2_Init+0x64>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <MX_SPI2_Init+0x64>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <MX_SPI2_Init+0x64>)
 8001d0c:	220a      	movs	r2, #10
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d10:	4804      	ldr	r0, [pc, #16]	; (8001d24 <MX_SPI2_Init+0x64>)
 8001d12:	f003 f923 	bl	8004f5c <HAL_SPI_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d1c:	f7ff fee4 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200001fc 	.word	0x200001fc
 8001d28:	40003800 	.word	0x40003800

08001d2c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001d30:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d32:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <MX_SPI3_Init+0x68>)
 8001d34:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d3c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001d3e:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d5c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d60:	2218      	movs	r2, #24
 8001d62:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d78:	220a      	movs	r2, #10
 8001d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d7c:	4804      	ldr	r0, [pc, #16]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d7e:	f003 f8ed 	bl	8004f5c <HAL_SPI_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001d88:	f7ff feae 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	2000027c 	.word	0x2000027c
 8001d94:	40003c00 	.word	0x40003c00

08001d98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08e      	sub	sp, #56	; 0x38
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a59      	ldr	r2, [pc, #356]	; (8001f1c <HAL_SPI_MspInit+0x184>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d153      	bne.n	8001e62 <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
 8001dbe:	4b58      	ldr	r3, [pc, #352]	; (8001f20 <HAL_SPI_MspInit+0x188>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4a57      	ldr	r2, [pc, #348]	; (8001f20 <HAL_SPI_MspInit+0x188>)
 8001dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dca:	4b55      	ldr	r3, [pc, #340]	; (8001f20 <HAL_SPI_MspInit+0x188>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd2:	623b      	str	r3, [r7, #32]
 8001dd4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	4b51      	ldr	r3, [pc, #324]	; (8001f20 <HAL_SPI_MspInit+0x188>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a50      	ldr	r2, [pc, #320]	; (8001f20 <HAL_SPI_MspInit+0x188>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <HAL_SPI_MspInit+0x188>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	4b4a      	ldr	r3, [pc, #296]	; (8001f20 <HAL_SPI_MspInit+0x188>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a49      	ldr	r2, [pc, #292]	; (8001f20 <HAL_SPI_MspInit+0x188>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b47      	ldr	r3, [pc, #284]	; (8001f20 <HAL_SPI_MspInit+0x188>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e0e:	2308      	movs	r3, #8
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e1e:	2305      	movs	r3, #5
 8001e20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e26:	4619      	mov	r1, r3
 8001e28:	483e      	ldr	r0, [pc, #248]	; (8001f24 <HAL_SPI_MspInit+0x18c>)
 8001e2a:	f001 fc89 	bl	8003740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001e2e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e40:	2305      	movs	r3, #5
 8001e42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4837      	ldr	r0, [pc, #220]	; (8001f28 <HAL_SPI_MspInit+0x190>)
 8001e4c:	f001 fc78 	bl	8003740 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2105      	movs	r1, #5
 8001e54:	2024      	movs	r0, #36	; 0x24
 8001e56:	f001 f893 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001e5a:	2024      	movs	r0, #36	; 0x24
 8001e5c:	f001 f8ac 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001e60:	e058      	b.n	8001f14 <HAL_SPI_MspInit+0x17c>
  else if(spiHandle->Instance==SPI3)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a31      	ldr	r2, [pc, #196]	; (8001f2c <HAL_SPI_MspInit+0x194>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d153      	bne.n	8001f14 <HAL_SPI_MspInit+0x17c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <HAL_SPI_MspInit+0x188>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	4a2a      	ldr	r2, [pc, #168]	; (8001f20 <HAL_SPI_MspInit+0x188>)
 8001e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7c:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <HAL_SPI_MspInit+0x188>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <HAL_SPI_MspInit+0x188>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	4a23      	ldr	r2, [pc, #140]	; (8001f20 <HAL_SPI_MspInit+0x188>)
 8001e92:	f043 0302 	orr.w	r3, r3, #2
 8001e96:	6313      	str	r3, [r2, #48]	; 0x30
 8001e98:	4b21      	ldr	r3, [pc, #132]	; (8001f20 <HAL_SPI_MspInit+0x188>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <HAL_SPI_MspInit+0x188>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <HAL_SPI_MspInit+0x188>)
 8001eae:	f043 0304 	orr.w	r3, r3, #4
 8001eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <HAL_SPI_MspInit+0x188>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001ed2:	2307      	movs	r3, #7
 8001ed4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eda:	4619      	mov	r1, r3
 8001edc:	4812      	ldr	r0, [pc, #72]	; (8001f28 <HAL_SPI_MspInit+0x190>)
 8001ede:	f001 fc2f 	bl	8003740 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ee2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ef4:	2306      	movs	r3, #6
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efc:	4619      	mov	r1, r3
 8001efe:	4809      	ldr	r0, [pc, #36]	; (8001f24 <HAL_SPI_MspInit+0x18c>)
 8001f00:	f001 fc1e 	bl	8003740 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2105      	movs	r1, #5
 8001f08:	2033      	movs	r0, #51	; 0x33
 8001f0a:	f001 f839 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001f0e:	2033      	movs	r0, #51	; 0x33
 8001f10:	f001 f852 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
}
 8001f14:	bf00      	nop
 8001f16:	3738      	adds	r7, #56	; 0x38
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40003800 	.word	0x40003800
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020800 	.word	0x40020800
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	40003c00 	.word	0x40003c00

08001f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_MspInit+0x74>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	4a19      	ldr	r2, [pc, #100]	; (8001fa4 <HAL_MspInit+0x74>)
 8001f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f44:	6453      	str	r3, [r2, #68]	; 0x44
 8001f46:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <HAL_MspInit+0x74>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <HAL_MspInit+0x74>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <HAL_MspInit+0x74>)
 8001f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f60:	6413      	str	r3, [r2, #64]	; 0x40
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <HAL_MspInit+0x74>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	210f      	movs	r1, #15
 8001f72:	f06f 0001 	mvn.w	r0, #1
 8001f76:	f001 f803 	bl	8002f80 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2105      	movs	r1, #5
 8001f7e:	2001      	movs	r0, #1
 8001f80:	f000 fffe 	bl	8002f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001f84:	2001      	movs	r0, #1
 8001f86:	f001 f817 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2105      	movs	r1, #5
 8001f8e:	2005      	movs	r0, #5
 8001f90:	f000 fff6 	bl	8002f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001f94:	2005      	movs	r0, #5
 8001f96:	f001 f80f 	bl	8002fb8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800

08001fa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08c      	sub	sp, #48	; 0x30
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	4b2e      	ldr	r3, [pc, #184]	; (8002078 <HAL_InitTick+0xd0>)
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc0:	4a2d      	ldr	r2, [pc, #180]	; (8002078 <HAL_InitTick+0xd0>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	; (8002078 <HAL_InitTick+0xd0>)
 8001fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fd4:	f107 020c 	add.w	r2, r7, #12
 8001fd8:	f107 0310 	add.w	r3, r7, #16
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f002 fa40 	bl	8004464 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001fe4:	f002 fa2a 	bl	800443c <HAL_RCC_GetPCLK2Freq>
 8001fe8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fec:	4a23      	ldr	r2, [pc, #140]	; (800207c <HAL_InitTick+0xd4>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	0c9b      	lsrs	r3, r3, #18
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ff8:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_InitTick+0xd8>)
 8001ffa:	4a22      	ldr	r2, [pc, #136]	; (8002084 <HAL_InitTick+0xdc>)
 8001ffc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001ffe:	4b20      	ldr	r3, [pc, #128]	; (8002080 <HAL_InitTick+0xd8>)
 8002000:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002004:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002006:	4a1e      	ldr	r2, [pc, #120]	; (8002080 <HAL_InitTick+0xd8>)
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800200c:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <HAL_InitTick+0xd8>)
 800200e:	2200      	movs	r2, #0
 8002010:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002012:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <HAL_InitTick+0xd8>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_InitTick+0xd8>)
 800201a:	2200      	movs	r2, #0
 800201c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800201e:	4818      	ldr	r0, [pc, #96]	; (8002080 <HAL_InitTick+0xd8>)
 8002020:	f003 f9be 	bl	80053a0 <HAL_TIM_Base_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800202a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800202e:	2b00      	cmp	r3, #0
 8002030:	d11b      	bne.n	800206a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002032:	4813      	ldr	r0, [pc, #76]	; (8002080 <HAL_InitTick+0xd8>)
 8002034:	f003 fa92 	bl	800555c <HAL_TIM_Base_Start_IT>
 8002038:	4603      	mov	r3, r0
 800203a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800203e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002042:	2b00      	cmp	r3, #0
 8002044:	d111      	bne.n	800206a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002046:	2019      	movs	r0, #25
 8002048:	f000 ffb6 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b0f      	cmp	r3, #15
 8002050:	d808      	bhi.n	8002064 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002052:	2200      	movs	r2, #0
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	2019      	movs	r0, #25
 8002058:	f000 ff92 	bl	8002f80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800205c:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <HAL_InitTick+0xe0>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e002      	b.n	800206a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800206a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800206e:	4618      	mov	r0, r3
 8002070:	3730      	adds	r7, #48	; 0x30
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800
 800207c:	431bde83 	.word	0x431bde83
 8002080:	200002fc 	.word	0x200002fc
 8002084:	40010000 	.word	0x40010000
 8002088:	20000004 	.word	0x20000004

0800208c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <NMI_Handler+0x4>

08002092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002096:	e7fe      	b.n	8002096 <HardFault_Handler+0x4>

08002098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800209c:	e7fe      	b.n	800209c <MemManage_Handler+0x4>

0800209e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a2:	e7fe      	b.n	80020a2 <BusFault_Handler+0x4>

080020a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <UsageFault_Handler+0x4>

080020aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80020bc:	f001 fd20 	bl	8003b00 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80020c8:	f001 f992 	bl	80033f0 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020e4:	4802      	ldr	r0, [pc, #8]	; (80020f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80020e6:	f003 fa9b 	bl	8005620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200002fc 	.word	0x200002fc

080020f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <TIM2_IRQHandler+0x10>)
 80020fa:	f003 fa91 	bl	8005620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200003b0 	.word	0x200003b0

08002108 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800210c:	4802      	ldr	r0, [pc, #8]	; (8002118 <TIM3_IRQHandler+0x10>)
 800210e:	f003 fa87 	bl	8005620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000464 	.word	0x20000464

0800211c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <TIM4_IRQHandler+0x10>)
 8002122:	f003 fa7d 	bl	8005620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000518 	.word	0x20000518

08002130 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <SPI2_IRQHandler+0x10>)
 8002136:	f002 ffcd 	bl	80050d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200001fc 	.word	0x200001fc

08002144 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <USART1_IRQHandler+0x10>)
 800214a:	f003 ff7f 	bl	800604c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000680 	.word	0x20000680

08002158 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <SPI3_IRQHandler+0x10>)
 800215e:	f002 ffb9 	bl	80050d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	2000027c 	.word	0x2000027c

0800216c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002170:	4802      	ldr	r0, [pc, #8]	; (800217c <USART6_IRQHandler+0x10>)
 8002172:	f003 ff6b 	bl	800604c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	200006f4 	.word	0x200006f4

08002180 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <SystemInit+0x20>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219a:	4a05      	ldr	r2, [pc, #20]	; (80021b0 <SystemInit+0x20>)
 800219c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ba:	f107 0308 	add.w	r3, r7, #8
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c8:	463b      	mov	r3, r7
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021d0:	4b1e      	ldr	r3, [pc, #120]	; (800224c <MX_TIM2_Init+0x98>)
 80021d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 80021d8:	4b1c      	ldr	r3, [pc, #112]	; (800224c <MX_TIM2_Init+0x98>)
 80021da:	f242 720f 	movw	r2, #9999	; 0x270f
 80021de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e0:	4b1a      	ldr	r3, [pc, #104]	; (800224c <MX_TIM2_Init+0x98>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80021e6:	4b19      	ldr	r3, [pc, #100]	; (800224c <MX_TIM2_Init+0x98>)
 80021e8:	f242 720f 	movw	r2, #9999	; 0x270f
 80021ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ee:	4b17      	ldr	r3, [pc, #92]	; (800224c <MX_TIM2_Init+0x98>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f4:	4b15      	ldr	r3, [pc, #84]	; (800224c <MX_TIM2_Init+0x98>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021fa:	4814      	ldr	r0, [pc, #80]	; (800224c <MX_TIM2_Init+0x98>)
 80021fc:	f003 f8d0 	bl	80053a0 <HAL_TIM_Base_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002206:	f7ff fc6f 	bl	8001ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800220a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800220e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002210:	f107 0308 	add.w	r3, r7, #8
 8002214:	4619      	mov	r1, r3
 8002216:	480d      	ldr	r0, [pc, #52]	; (800224c <MX_TIM2_Init+0x98>)
 8002218:	f003 fb2a 	bl	8005870 <HAL_TIM_ConfigClockSource>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002222:	f7ff fc61 	bl	8001ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002226:	2300      	movs	r3, #0
 8002228:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800222e:	463b      	mov	r3, r7
 8002230:	4619      	mov	r1, r3
 8002232:	4806      	ldr	r0, [pc, #24]	; (800224c <MX_TIM2_Init+0x98>)
 8002234:	f003 fdb0 	bl	8005d98 <HAL_TIMEx_MasterConfigSynchronization>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800223e:	f7ff fc53 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002242:	bf00      	nop
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200003b0 	.word	0x200003b0

08002250 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002256:	f107 0308 	add.w	r3, r7, #8
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002264:	463b      	mov	r3, r7
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800226c:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <MX_TIM3_Init+0x94>)
 800226e:	4a1e      	ldr	r2, [pc, #120]	; (80022e8 <MX_TIM3_Init+0x98>)
 8002270:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8002272:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <MX_TIM3_Init+0x94>)
 8002274:	f242 720f 	movw	r2, #9999	; 0x270f
 8002278:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227a:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <MX_TIM3_Init+0x94>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8002280:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <MX_TIM3_Init+0x94>)
 8002282:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002286:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002288:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <MX_TIM3_Init+0x94>)
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <MX_TIM3_Init+0x94>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002294:	4813      	ldr	r0, [pc, #76]	; (80022e4 <MX_TIM3_Init+0x94>)
 8002296:	f003 f883 	bl	80053a0 <HAL_TIM_Base_Init>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80022a0:	f7ff fc22 	bl	8001ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022aa:	f107 0308 	add.w	r3, r7, #8
 80022ae:	4619      	mov	r1, r3
 80022b0:	480c      	ldr	r0, [pc, #48]	; (80022e4 <MX_TIM3_Init+0x94>)
 80022b2:	f003 fadd 	bl	8005870 <HAL_TIM_ConfigClockSource>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80022bc:	f7ff fc14 	bl	8001ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c0:	2300      	movs	r3, #0
 80022c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022c8:	463b      	mov	r3, r7
 80022ca:	4619      	mov	r1, r3
 80022cc:	4805      	ldr	r0, [pc, #20]	; (80022e4 <MX_TIM3_Init+0x94>)
 80022ce:	f003 fd63 	bl	8005d98 <HAL_TIMEx_MasterConfigSynchronization>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80022d8:	f7ff fc06 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022dc:	bf00      	nop
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000464 	.word	0x20000464
 80022e8:	40000400 	.word	0x40000400

080022ec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022f2:	f107 0308 	add.w	r3, r7, #8
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002300:	463b      	mov	r3, r7
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002308:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <MX_TIM4_Init+0x94>)
 800230a:	4a1e      	ldr	r2, [pc, #120]	; (8002384 <MX_TIM4_Init+0x98>)
 800230c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 800230e:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <MX_TIM4_Init+0x94>)
 8002310:	f242 720f 	movw	r2, #9999	; 0x270f
 8002314:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002316:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <MX_TIM4_Init+0x94>)
 8002318:	2200      	movs	r2, #0
 800231a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 800231c:	4b18      	ldr	r3, [pc, #96]	; (8002380 <MX_TIM4_Init+0x94>)
 800231e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002322:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002324:	4b16      	ldr	r3, [pc, #88]	; (8002380 <MX_TIM4_Init+0x94>)
 8002326:	2200      	movs	r2, #0
 8002328:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <MX_TIM4_Init+0x94>)
 800232c:	2200      	movs	r2, #0
 800232e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002330:	4813      	ldr	r0, [pc, #76]	; (8002380 <MX_TIM4_Init+0x94>)
 8002332:	f003 f835 	bl	80053a0 <HAL_TIM_Base_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800233c:	f7ff fbd4 	bl	8001ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002344:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002346:	f107 0308 	add.w	r3, r7, #8
 800234a:	4619      	mov	r1, r3
 800234c:	480c      	ldr	r0, [pc, #48]	; (8002380 <MX_TIM4_Init+0x94>)
 800234e:	f003 fa8f 	bl	8005870 <HAL_TIM_ConfigClockSource>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002358:	f7ff fbc6 	bl	8001ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800235c:	2300      	movs	r3, #0
 800235e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002360:	2300      	movs	r3, #0
 8002362:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002364:	463b      	mov	r3, r7
 8002366:	4619      	mov	r1, r3
 8002368:	4805      	ldr	r0, [pc, #20]	; (8002380 <MX_TIM4_Init+0x94>)
 800236a:	f003 fd15 	bl	8005d98 <HAL_TIMEx_MasterConfigSynchronization>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002374:	f7ff fbb8 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002378:	bf00      	nop
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000518 	.word	0x20000518
 8002384:	40000800 	.word	0x40000800

08002388 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800238e:	f107 0308 	add.w	r3, r7, #8
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800239c:	463b      	mov	r3, r7
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80023a4:	4b1d      	ldr	r3, [pc, #116]	; (800241c <MX_TIM5_Init+0x94>)
 80023a6:	4a1e      	ldr	r2, [pc, #120]	; (8002420 <MX_TIM5_Init+0x98>)
 80023a8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80023aa:	4b1c      	ldr	r3, [pc, #112]	; (800241c <MX_TIM5_Init+0x94>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b0:	4b1a      	ldr	r3, [pc, #104]	; (800241c <MX_TIM5_Init+0x94>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80023b6:	4b19      	ldr	r3, [pc, #100]	; (800241c <MX_TIM5_Init+0x94>)
 80023b8:	f04f 32ff 	mov.w	r2, #4294967295
 80023bc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023be:	4b17      	ldr	r3, [pc, #92]	; (800241c <MX_TIM5_Init+0x94>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c4:	4b15      	ldr	r3, [pc, #84]	; (800241c <MX_TIM5_Init+0x94>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80023ca:	4814      	ldr	r0, [pc, #80]	; (800241c <MX_TIM5_Init+0x94>)
 80023cc:	f002 ffe8 	bl	80053a0 <HAL_TIM_Base_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80023d6:	f7ff fb87 	bl	8001ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80023e0:	f107 0308 	add.w	r3, r7, #8
 80023e4:	4619      	mov	r1, r3
 80023e6:	480d      	ldr	r0, [pc, #52]	; (800241c <MX_TIM5_Init+0x94>)
 80023e8:	f003 fa42 	bl	8005870 <HAL_TIM_ConfigClockSource>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80023f2:	f7ff fb79 	bl	8001ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80023fe:	463b      	mov	r3, r7
 8002400:	4619      	mov	r1, r3
 8002402:	4806      	ldr	r0, [pc, #24]	; (800241c <MX_TIM5_Init+0x94>)
 8002404:	f003 fcc8 	bl	8005d98 <HAL_TIMEx_MasterConfigSynchronization>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800240e:	f7ff fb6b 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002412:	bf00      	nop
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200005cc 	.word	0x200005cc
 8002420:	40000c00 	.word	0x40000c00

08002424 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002434:	d10e      	bne.n	8002454 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_TIM_Base_MspInit+0xc0>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	4a29      	ldr	r2, [pc, #164]	; (80024e4 <HAL_TIM_Base_MspInit+0xc0>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6413      	str	r3, [r2, #64]	; 0x40
 8002446:	4b27      	ldr	r3, [pc, #156]	; (80024e4 <HAL_TIM_Base_MspInit+0xc0>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002452:	e042      	b.n	80024da <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a23      	ldr	r2, [pc, #140]	; (80024e8 <HAL_TIM_Base_MspInit+0xc4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d10e      	bne.n	800247c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_TIM_Base_MspInit+0xc0>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_TIM_Base_MspInit+0xc0>)
 8002468:	f043 0302 	orr.w	r3, r3, #2
 800246c:	6413      	str	r3, [r2, #64]	; 0x40
 800246e:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <HAL_TIM_Base_MspInit+0xc0>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	693b      	ldr	r3, [r7, #16]
}
 800247a:	e02e      	b.n	80024da <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a1a      	ldr	r2, [pc, #104]	; (80024ec <HAL_TIM_Base_MspInit+0xc8>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d116      	bne.n	80024b4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <HAL_TIM_Base_MspInit+0xc0>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	4a15      	ldr	r2, [pc, #84]	; (80024e4 <HAL_TIM_Base_MspInit+0xc0>)
 8002490:	f043 0304 	orr.w	r3, r3, #4
 8002494:	6413      	str	r3, [r2, #64]	; 0x40
 8002496:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <HAL_TIM_Base_MspInit+0xc0>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2105      	movs	r1, #5
 80024a6:	201e      	movs	r0, #30
 80024a8:	f000 fd6a 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80024ac:	201e      	movs	r0, #30
 80024ae:	f000 fd83 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
}
 80024b2:	e012      	b.n	80024da <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a0d      	ldr	r2, [pc, #52]	; (80024f0 <HAL_TIM_Base_MspInit+0xcc>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d10d      	bne.n	80024da <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_TIM_Base_MspInit+0xc0>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a07      	ldr	r2, [pc, #28]	; (80024e4 <HAL_TIM_Base_MspInit+0xc0>)
 80024c8:	f043 0308 	orr.w	r3, r3, #8
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <HAL_TIM_Base_MspInit+0xc0>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
}
 80024da:	bf00      	nop
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40000400 	.word	0x40000400
 80024ec:	40000800 	.word	0x40000800
 80024f0:	40000c00 	.word	0x40000c00

080024f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 80024fa:	4a12      	ldr	r2, [pc, #72]	; (8002544 <MX_USART1_UART_Init+0x50>)
 80024fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 8002500:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002504:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002506:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 800250e:	2200      	movs	r2, #0
 8002510:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002512:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002518:	4b09      	ldr	r3, [pc, #36]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 800251a:	220c      	movs	r2, #12
 800251c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800251e:	4b08      	ldr	r3, [pc, #32]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 8002526:	2200      	movs	r2, #0
 8002528:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800252a:	4805      	ldr	r0, [pc, #20]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 800252c:	f003 fcc0 	bl	8005eb0 <HAL_UART_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002536:	f7ff fad7 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000680 	.word	0x20000680
 8002544:	40011000 	.word	0x40011000

08002548 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <MX_USART6_UART_Init+0x4c>)
 800254e:	4a12      	ldr	r2, [pc, #72]	; (8002598 <MX_USART6_UART_Init+0x50>)
 8002550:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <MX_USART6_UART_Init+0x4c>)
 8002554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002558:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <MX_USART6_UART_Init+0x4c>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <MX_USART6_UART_Init+0x4c>)
 8002562:	2200      	movs	r2, #0
 8002564:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <MX_USART6_UART_Init+0x4c>)
 8002568:	2200      	movs	r2, #0
 800256a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <MX_USART6_UART_Init+0x4c>)
 800256e:	220c      	movs	r2, #12
 8002570:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <MX_USART6_UART_Init+0x4c>)
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <MX_USART6_UART_Init+0x4c>)
 800257a:	2200      	movs	r2, #0
 800257c:	61da      	str	r2, [r3, #28]
  if (HAL_LIN_Init(&huart6, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 800257e:	2100      	movs	r1, #0
 8002580:	4804      	ldr	r0, [pc, #16]	; (8002594 <MX_USART6_UART_Init+0x4c>)
 8002582:	f003 fcef 	bl	8005f64 <HAL_LIN_Init>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 800258c:	f7ff faac 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200006f4 	.word	0x200006f4
 8002598:	40011400 	.word	0x40011400

0800259c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08e      	sub	sp, #56	; 0x38
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a55      	ldr	r2, [pc, #340]	; (8002710 <HAL_UART_MspInit+0x174>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d14b      	bne.n	8002656 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	623b      	str	r3, [r7, #32]
 80025c2:	4b54      	ldr	r3, [pc, #336]	; (8002714 <HAL_UART_MspInit+0x178>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	4a53      	ldr	r2, [pc, #332]	; (8002714 <HAL_UART_MspInit+0x178>)
 80025c8:	f043 0310 	orr.w	r3, r3, #16
 80025cc:	6453      	str	r3, [r2, #68]	; 0x44
 80025ce:	4b51      	ldr	r3, [pc, #324]	; (8002714 <HAL_UART_MspInit+0x178>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	623b      	str	r3, [r7, #32]
 80025d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	4b4d      	ldr	r3, [pc, #308]	; (8002714 <HAL_UART_MspInit+0x178>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	4a4c      	ldr	r2, [pc, #304]	; (8002714 <HAL_UART_MspInit+0x178>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ea:	4b4a      	ldr	r3, [pc, #296]	; (8002714 <HAL_UART_MspInit+0x178>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	4b46      	ldr	r3, [pc, #280]	; (8002714 <HAL_UART_MspInit+0x178>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	4a45      	ldr	r2, [pc, #276]	; (8002714 <HAL_UART_MspInit+0x178>)
 8002600:	f043 0302 	orr.w	r3, r3, #2
 8002604:	6313      	str	r3, [r2, #48]	; 0x30
 8002606:	4b43      	ldr	r3, [pc, #268]	; (8002714 <HAL_UART_MspInit+0x178>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002620:	2303      	movs	r3, #3
 8002622:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002624:	2307      	movs	r3, #7
 8002626:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800262c:	4619      	mov	r1, r3
 800262e:	483a      	ldr	r0, [pc, #232]	; (8002718 <HAL_UART_MspInit+0x17c>)
 8002630:	f001 f886 	bl	8003740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002638:	2302      	movs	r3, #2
 800263a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002640:	2303      	movs	r3, #3
 8002642:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002644:	2307      	movs	r3, #7
 8002646:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264c:	4619      	mov	r1, r3
 800264e:	4833      	ldr	r0, [pc, #204]	; (800271c <HAL_UART_MspInit+0x180>)
 8002650:	f001 f876 	bl	8003740 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002654:	e057      	b.n	8002706 <HAL_UART_MspInit+0x16a>
  else if(uartHandle->Instance==USART6)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a31      	ldr	r2, [pc, #196]	; (8002720 <HAL_UART_MspInit+0x184>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d152      	bne.n	8002706 <HAL_UART_MspInit+0x16a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	4b2b      	ldr	r3, [pc, #172]	; (8002714 <HAL_UART_MspInit+0x178>)
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	4a2a      	ldr	r2, [pc, #168]	; (8002714 <HAL_UART_MspInit+0x178>)
 800266a:	f043 0320 	orr.w	r3, r3, #32
 800266e:	6453      	str	r3, [r2, #68]	; 0x44
 8002670:	4b28      	ldr	r3, [pc, #160]	; (8002714 <HAL_UART_MspInit+0x178>)
 8002672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800267c:	2300      	movs	r3, #0
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	4b24      	ldr	r3, [pc, #144]	; (8002714 <HAL_UART_MspInit+0x178>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	4a23      	ldr	r2, [pc, #140]	; (8002714 <HAL_UART_MspInit+0x178>)
 8002686:	f043 0304 	orr.w	r3, r3, #4
 800268a:	6313      	str	r3, [r2, #48]	; 0x30
 800268c:	4b21      	ldr	r3, [pc, #132]	; (8002714 <HAL_UART_MspInit+0x178>)
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_UART_MspInit+0x178>)
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	4a1c      	ldr	r2, [pc, #112]	; (8002714 <HAL_UART_MspInit+0x178>)
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	6313      	str	r3, [r2, #48]	; 0x30
 80026a8:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <HAL_UART_MspInit+0x178>)
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026b4:	2340      	movs	r3, #64	; 0x40
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c0:	2303      	movs	r3, #3
 80026c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80026c4:	2308      	movs	r3, #8
 80026c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026cc:	4619      	mov	r1, r3
 80026ce:	4815      	ldr	r0, [pc, #84]	; (8002724 <HAL_UART_MspInit+0x188>)
 80026d0:	f001 f836 	bl	8003740 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026da:	2302      	movs	r3, #2
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e2:	2303      	movs	r3, #3
 80026e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80026e6:	2308      	movs	r3, #8
 80026e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ee:	4619      	mov	r1, r3
 80026f0:	4809      	ldr	r0, [pc, #36]	; (8002718 <HAL_UART_MspInit+0x17c>)
 80026f2:	f001 f825 	bl	8003740 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2105      	movs	r1, #5
 80026fa:	2047      	movs	r0, #71	; 0x47
 80026fc:	f000 fc40 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002700:	2047      	movs	r0, #71	; 0x47
 8002702:	f000 fc59 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
}
 8002706:	bf00      	nop
 8002708:	3738      	adds	r7, #56	; 0x38
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40011000 	.word	0x40011000
 8002714:	40023800 	.word	0x40023800
 8002718:	40020000 	.word	0x40020000
 800271c:	40020400 	.word	0x40020400
 8002720:	40011400 	.word	0x40011400
 8002724:	40020800 	.word	0x40020800

08002728 <MX_WWDG_Init>:

WWDG_HandleTypeDef hwwdg;

/* WWDG init function */
void MX_WWDG_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <MX_WWDG_Init+0x38>)
 800272e:	4a0d      	ldr	r2, [pc, #52]	; (8002764 <MX_WWDG_Init+0x3c>)
 8002730:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 8002732:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <MX_WWDG_Init+0x38>)
 8002734:	2200      	movs	r2, #0
 8002736:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <MX_WWDG_Init+0x38>)
 800273a:	2240      	movs	r2, #64	; 0x40
 800273c:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <MX_WWDG_Init+0x38>)
 8002740:	2240      	movs	r2, #64	; 0x40
 8002742:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <MX_WWDG_Init+0x38>)
 8002746:	2200      	movs	r2, #0
 8002748:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 800274a:	4805      	ldr	r0, [pc, #20]	; (8002760 <MX_WWDG_Init+0x38>)
 800274c:	f004 fbb6 	bl	8006ebc <HAL_WWDG_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_WWDG_Init+0x32>
  {
    Error_Handler();
 8002756:	f7ff f9c7 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000768 	.word	0x20000768
 8002764:	40002c00 	.word	0x40002c00

08002768 <HAL_WWDG_MspInit>:

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* wwdgHandle)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  if(wwdgHandle->Instance==WWDG)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0b      	ldr	r2, [pc, #44]	; (80027a4 <HAL_WWDG_MspInit+0x3c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d10d      	bne.n	8002796 <HAL_WWDG_MspInit+0x2e>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* WWDG clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <HAL_WWDG_MspInit+0x40>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	4a09      	ldr	r2, [pc, #36]	; (80027a8 <HAL_WWDG_MspInit+0x40>)
 8002784:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <HAL_WWDG_MspInit+0x40>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }
}
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40002c00 	.word	0x40002c00
 80027a8:	40023800 	.word	0x40023800

080027ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80027ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027b0:	480d      	ldr	r0, [pc, #52]	; (80027e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027b2:	490e      	ldr	r1, [pc, #56]	; (80027ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027b4:	4a0e      	ldr	r2, [pc, #56]	; (80027f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b8:	e002      	b.n	80027c0 <LoopCopyDataInit>

080027ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027be:	3304      	adds	r3, #4

080027c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c4:	d3f9      	bcc.n	80027ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027c6:	4a0b      	ldr	r2, [pc, #44]	; (80027f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027c8:	4c0b      	ldr	r4, [pc, #44]	; (80027f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027cc:	e001      	b.n	80027d2 <LoopFillZerobss>

080027ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d0:	3204      	adds	r2, #4

080027d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d4:	d3fb      	bcc.n	80027ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027d6:	f7ff fcdb 	bl	8002190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027da:	f007 fcdf 	bl	800a19c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027de:	f7ff f89d 	bl	800191c <main>
  bx  lr    
 80027e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027ec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80027f0:	0800a4d0 	.word	0x0800a4d0
  ldr r2, =_sbss
 80027f4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80027f8:	200051f8 	.word	0x200051f8

080027fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027fc:	e7fe      	b.n	80027fc <ADC_IRQHandler>
	...

08002800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002804:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <HAL_Init+0x40>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a0d      	ldr	r2, [pc, #52]	; (8002840 <HAL_Init+0x40>)
 800280a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800280e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_Init+0x40>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <HAL_Init+0x40>)
 8002816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800281a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <HAL_Init+0x40>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a07      	ldr	r2, [pc, #28]	; (8002840 <HAL_Init+0x40>)
 8002822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002828:	2003      	movs	r0, #3
 800282a:	f000 fb9e 	bl	8002f6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800282e:	200f      	movs	r0, #15
 8002830:	f7ff fbba 	bl	8001fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002834:	f7ff fb7c 	bl	8001f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40023c00 	.word	0x40023c00

08002844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_IncTick+0x20>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_IncTick+0x24>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4413      	add	r3, r2
 8002854:	4a04      	ldr	r2, [pc, #16]	; (8002868 <HAL_IncTick+0x24>)
 8002856:	6013      	str	r3, [r2, #0]
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000008 	.word	0x20000008
 8002868:	20000784 	.word	0x20000784

0800286c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return uwTick;
 8002870:	4b03      	ldr	r3, [pc, #12]	; (8002880 <HAL_GetTick+0x14>)
 8002872:	681b      	ldr	r3, [r3, #0]
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	20000784 	.word	0x20000784

08002884 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e04a      	b.n	8002930 <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d120      	bne.n	80028e4 <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a24      	ldr	r2, [pc, #144]	; (8002938 <HAL_ADC_Init+0xb4>)
 80028a6:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a24      	ldr	r2, [pc, #144]	; (800293c <HAL_ADC_Init+0xb8>)
 80028ac:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a23      	ldr	r2, [pc, #140]	; (8002940 <HAL_ADC_Init+0xbc>)
 80028b2:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a23      	ldr	r2, [pc, #140]	; (8002944 <HAL_ADC_Init+0xc0>)
 80028b8:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a22      	ldr	r2, [pc, #136]	; (8002948 <HAL_ADC_Init+0xc4>)
 80028be:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d102      	bne.n	80028ce <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a20      	ldr	r2, [pc, #128]	; (800294c <HAL_ADC_Init+0xc8>)
 80028cc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d118      	bne.n	8002922 <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028f8:	f023 0302 	bic.w	r3, r3, #2
 80028fc:	f043 0202 	orr.w	r2, r3, #2
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f97d 	bl	8002c04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f023 0303 	bic.w	r3, r3, #3
 8002918:	f043 0201 	orr.w	r2, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	641a      	str	r2, [r3, #64]	; 0x40
 8002920:	e001      	b.n	8002926 <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	08002951 	.word	0x08002951
 800293c:	08002965 	.word	0x08002965
 8002940:	08002979 	.word	0x08002979
 8002944:	0800298d 	.word	0x0800298d
 8002948:	08002dfd 	.word	0x08002dfd
 800294c:	080014a1 	.word	0x080014a1

08002950 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x1c>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e113      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x244>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b09      	cmp	r3, #9
 80029ca:	d925      	bls.n	8002a18 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68d9      	ldr	r1, [r3, #12]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	461a      	mov	r2, r3
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	3b1e      	subs	r3, #30
 80029e2:	2207      	movs	r2, #7
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43da      	mvns	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	400a      	ands	r2, r1
 80029f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68d9      	ldr	r1, [r3, #12]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	4618      	mov	r0, r3
 8002a04:	4603      	mov	r3, r0
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4403      	add	r3, r0
 8002a0a:	3b1e      	subs	r3, #30
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	e022      	b.n	8002a5e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6919      	ldr	r1, [r3, #16]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	4613      	mov	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	2207      	movs	r2, #7
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43da      	mvns	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	400a      	ands	r2, r1
 8002a3a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6919      	ldr	r1, [r3, #16]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	4603      	mov	r3, r0
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	4403      	add	r3, r0
 8002a54:	409a      	lsls	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d824      	bhi.n	8002ab0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	3b05      	subs	r3, #5
 8002a78:	221f      	movs	r2, #31
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	400a      	ands	r2, r1
 8002a86:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	4618      	mov	r0, r3
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3b05      	subs	r3, #5
 8002aa2:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	635a      	str	r2, [r3, #52]	; 0x34
 8002aae:	e04c      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b0c      	cmp	r3, #12
 8002ab6:	d824      	bhi.n	8002b02 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3b23      	subs	r3, #35	; 0x23
 8002aca:	221f      	movs	r2, #31
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43da      	mvns	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	400a      	ands	r2, r1
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	3b23      	subs	r3, #35	; 0x23
 8002af4:	fa00 f203 	lsl.w	r2, r0, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
 8002b00:	e023      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	3b41      	subs	r3, #65	; 0x41
 8002b14:	221f      	movs	r2, #31
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	400a      	ands	r2, r1
 8002b22:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	4618      	mov	r0, r3
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3b41      	subs	r3, #65	; 0x41
 8002b3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b4a:	4b29      	ldr	r3, [pc, #164]	; (8002bf0 <HAL_ADC_ConfigChannel+0x250>)
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a28      	ldr	r2, [pc, #160]	; (8002bf4 <HAL_ADC_ConfigChannel+0x254>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d10f      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x1d8>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b12      	cmp	r3, #18
 8002b5e:	d10b      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a1d      	ldr	r2, [pc, #116]	; (8002bf4 <HAL_ADC_ConfigChannel+0x254>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d12b      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x23a>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <HAL_ADC_ConfigChannel+0x258>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d003      	beq.n	8002b94 <HAL_ADC_ConfigChannel+0x1f4>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b11      	cmp	r3, #17
 8002b92:	d122      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a11      	ldr	r2, [pc, #68]	; (8002bf8 <HAL_ADC_ConfigChannel+0x258>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d111      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bb6:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <HAL_ADC_ConfigChannel+0x25c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a11      	ldr	r2, [pc, #68]	; (8002c00 <HAL_ADC_ConfigChannel+0x260>)
 8002bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc0:	0c9a      	lsrs	r2, r3, #18
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bcc:	e002      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f9      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	40012300 	.word	0x40012300
 8002bf4:	40012000 	.word	0x40012000
 8002bf8:	10000012 	.word	0x10000012
 8002bfc:	20000000 	.word	0x20000000
 8002c00:	431bde83 	.word	0x431bde83

08002c04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c0c:	4b79      	ldr	r3, [pc, #484]	; (8002df4 <ADC_Init+0x1f0>)
 8002c0e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	021a      	lsls	r2, r3, #8
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6859      	ldr	r1, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6899      	ldr	r1, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	4a58      	ldr	r2, [pc, #352]	; (8002df8 <ADC_Init+0x1f4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d022      	beq.n	8002ce2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002caa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6899      	ldr	r1, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ccc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6899      	ldr	r1, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	e00f      	b.n	8002d02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0202 	bic.w	r2, r2, #2
 8002d10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6899      	ldr	r1, [r3, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	7e1b      	ldrb	r3, [r3, #24]
 8002d1c:	005a      	lsls	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d01b      	beq.n	8002d68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6859      	ldr	r1, [r3, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	035a      	lsls	r2, r3, #13
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	605a      	str	r2, [r3, #4]
 8002d66:	e007      	b.n	8002d78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	051a      	lsls	r2, r3, #20
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6899      	ldr	r1, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dba:	025a      	lsls	r2, r3, #9
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6899      	ldr	r1, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	029a      	lsls	r2, r3, #10
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	609a      	str	r2, [r3, #8]
}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	40012300 	.word	0x40012300
 8002df8:	0f000001 	.word	0x0f000001

08002dfc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e42:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	60d3      	str	r3, [r2, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <__NVIC_GetPriorityGrouping+0x18>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	0a1b      	lsrs	r3, r3, #8
 8002e62:	f003 0307 	and.w	r3, r3, #7
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	db0b      	blt.n	8002e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	f003 021f 	and.w	r2, r3, #31
 8002e8c:	4907      	ldr	r1, [pc, #28]	; (8002eac <__NVIC_EnableIRQ+0x38>)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2001      	movs	r0, #1
 8002e96:	fa00 f202 	lsl.w	r2, r0, r2
 8002e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000e100 	.word	0xe000e100

08002eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	db0a      	blt.n	8002eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	490c      	ldr	r1, [pc, #48]	; (8002efc <__NVIC_SetPriority+0x4c>)
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	0112      	lsls	r2, r2, #4
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed8:	e00a      	b.n	8002ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4908      	ldr	r1, [pc, #32]	; (8002f00 <__NVIC_SetPriority+0x50>)
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	3b04      	subs	r3, #4
 8002ee8:	0112      	lsls	r2, r2, #4
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	440b      	add	r3, r1
 8002eee:	761a      	strb	r2, [r3, #24]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000e100 	.word	0xe000e100
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	; 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f1c3 0307 	rsb	r3, r3, #7
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	bf28      	it	cs
 8002f22:	2304      	movcs	r3, #4
 8002f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d902      	bls.n	8002f34 <NVIC_EncodePriority+0x30>
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3b03      	subs	r3, #3
 8002f32:	e000      	b.n	8002f36 <NVIC_EncodePriority+0x32>
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f38:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43da      	mvns	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	401a      	ands	r2, r3
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	43d9      	mvns	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f5c:	4313      	orrs	r3, r2
         );
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3724      	adds	r7, #36	; 0x24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ff4c 	bl	8002e10 <__NVIC_SetPriorityGrouping>
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f92:	f7ff ff61 	bl	8002e58 <__NVIC_GetPriorityGrouping>
 8002f96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	6978      	ldr	r0, [r7, #20]
 8002f9e:	f7ff ffb1 	bl	8002f04 <NVIC_EncodePriority>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff ff80 	bl	8002eb0 <__NVIC_SetPriority>
}
 8002fb0:	bf00      	nop
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff ff54 	bl	8002e74 <__NVIC_EnableIRQ>
}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e00e      	b.n	8003004 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	795b      	ldrb	r3, [r3, #5]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d105      	bne.n	8002ffc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fe fae2 	bl	80015c0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003018:	f7ff fc28 	bl	800286c <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e099      	b.n	800315c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0201 	bic.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003048:	e00f      	b.n	800306a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800304a:	f7ff fc0f 	bl	800286c <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b05      	cmp	r3, #5
 8003056:	d908      	bls.n	800306a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2220      	movs	r2, #32
 800305c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2203      	movs	r2, #3
 8003062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e078      	b.n	800315c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1e8      	bne.n	800304a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	4b38      	ldr	r3, [pc, #224]	; (8003164 <HAL_DMA_Init+0x158>)
 8003084:	4013      	ands	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003096:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d107      	bne.n	80030d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	4313      	orrs	r3, r2
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f023 0307 	bic.w	r3, r3, #7
 80030ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d117      	bne.n	800312e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00e      	beq.n	800312e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f8f1 	bl	80032f8 <DMA_CheckFifoParam>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2240      	movs	r2, #64	; 0x40
 8003120:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800312a:	2301      	movs	r3, #1
 800312c:	e016      	b.n	800315c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f8a8 	bl	800328c <DMA_CalcBaseAndBitshift>
 800313c:	4603      	mov	r3, r0
 800313e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003144:	223f      	movs	r2, #63	; 0x3f
 8003146:	409a      	lsls	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	f010803f 	.word	0xf010803f

08003168 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003174:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003176:	f7ff fb79 	bl	800286c <HAL_GetTick>
 800317a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d008      	beq.n	800319a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2280      	movs	r2, #128	; 0x80
 800318c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e052      	b.n	8003240 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0216 	bic.w	r2, r2, #22
 80031a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695a      	ldr	r2, [r3, #20]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d103      	bne.n	80031ca <HAL_DMA_Abort+0x62>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d007      	beq.n	80031da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0208 	bic.w	r2, r2, #8
 80031d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0201 	bic.w	r2, r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ea:	e013      	b.n	8003214 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ec:	f7ff fb3e 	bl	800286c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b05      	cmp	r3, #5
 80031f8:	d90c      	bls.n	8003214 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2220      	movs	r2, #32
 80031fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2203      	movs	r2, #3
 8003204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e015      	b.n	8003240 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1e4      	bne.n	80031ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003226:	223f      	movs	r2, #63	; 0x3f
 8003228:	409a      	lsls	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d004      	beq.n	8003266 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2280      	movs	r2, #128	; 0x80
 8003260:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e00c      	b.n	8003280 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2205      	movs	r2, #5
 800326a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0201 	bic.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	3b10      	subs	r3, #16
 800329c:	4a14      	ldr	r2, [pc, #80]	; (80032f0 <DMA_CalcBaseAndBitshift+0x64>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	091b      	lsrs	r3, r3, #4
 80032a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032a6:	4a13      	ldr	r2, [pc, #76]	; (80032f4 <DMA_CalcBaseAndBitshift+0x68>)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4413      	add	r3, r2
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	d909      	bls.n	80032ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032c2:	f023 0303 	bic.w	r3, r3, #3
 80032c6:	1d1a      	adds	r2, r3, #4
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	659a      	str	r2, [r3, #88]	; 0x58
 80032cc:	e007      	b.n	80032de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032d6:	f023 0303 	bic.w	r3, r3, #3
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	aaaaaaab 	.word	0xaaaaaaab
 80032f4:	0800a458 	.word	0x0800a458

080032f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d11f      	bne.n	8003352 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d856      	bhi.n	80033c6 <DMA_CheckFifoParam+0xce>
 8003318:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <DMA_CheckFifoParam+0x28>)
 800331a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331e:	bf00      	nop
 8003320:	08003331 	.word	0x08003331
 8003324:	08003343 	.word	0x08003343
 8003328:	08003331 	.word	0x08003331
 800332c:	080033c7 	.word	0x080033c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d046      	beq.n	80033ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003340:	e043      	b.n	80033ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800334a:	d140      	bne.n	80033ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003350:	e03d      	b.n	80033ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800335a:	d121      	bne.n	80033a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b03      	cmp	r3, #3
 8003360:	d837      	bhi.n	80033d2 <DMA_CheckFifoParam+0xda>
 8003362:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <DMA_CheckFifoParam+0x70>)
 8003364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003368:	08003379 	.word	0x08003379
 800336c:	0800337f 	.word	0x0800337f
 8003370:	08003379 	.word	0x08003379
 8003374:	08003391 	.word	0x08003391
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
      break;
 800337c:	e030      	b.n	80033e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d025      	beq.n	80033d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800338e:	e022      	b.n	80033d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003398:	d11f      	bne.n	80033da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800339e:	e01c      	b.n	80033da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d903      	bls.n	80033ae <DMA_CheckFifoParam+0xb6>
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d003      	beq.n	80033b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033ac:	e018      	b.n	80033e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	73fb      	strb	r3, [r7, #15]
      break;
 80033b2:	e015      	b.n	80033e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00e      	beq.n	80033de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	73fb      	strb	r3, [r7, #15]
      break;
 80033c4:	e00b      	b.n	80033de <DMA_CheckFifoParam+0xe6>
      break;
 80033c6:	bf00      	nop
 80033c8:	e00a      	b.n	80033e0 <DMA_CheckFifoParam+0xe8>
      break;
 80033ca:	bf00      	nop
 80033cc:	e008      	b.n	80033e0 <DMA_CheckFifoParam+0xe8>
      break;
 80033ce:	bf00      	nop
 80033d0:	e006      	b.n	80033e0 <DMA_CheckFifoParam+0xe8>
      break;
 80033d2:	bf00      	nop
 80033d4:	e004      	b.n	80033e0 <DMA_CheckFifoParam+0xe8>
      break;
 80033d6:	bf00      	nop
 80033d8:	e002      	b.n	80033e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80033da:	bf00      	nop
 80033dc:	e000      	b.n	80033e0 <DMA_CheckFifoParam+0xe8>
      break;
 80033de:	bf00      	nop
    }
  } 
  
  return status; 
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop

080033f0 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80033fa:	4b4b      	ldr	r3, [pc, #300]	; (8003528 <HAL_FLASH_IRQHandler+0x138>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d020      	beq.n	8003448 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8003406:	4b49      	ldr	r3, [pc, #292]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d107      	bne.n	8003420 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8003410:	4b46      	ldr	r3, [pc, #280]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8003416:	4b45      	ldr	r3, [pc, #276]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 8003418:	f04f 32ff 	mov.w	r2, #4294967295
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	e00b      	b.n	8003438 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8003420:	4b42      	ldr	r3, [pc, #264]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d103      	bne.n	8003432 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800342a:	4b40      	ldr	r3, [pc, #256]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	607b      	str	r3, [r7, #4]
 8003430:	e002      	b.n	8003438 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8003432:	4b3e      	ldr	r3, [pc, #248]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8003438:	f000 f88e 	bl	8003558 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f881 	bl	8003544 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003442:	4b3a      	ldr	r3, [pc, #232]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003448:	4b37      	ldr	r3, [pc, #220]	; (8003528 <HAL_FLASH_IRQHandler+0x138>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d04a      	beq.n	80034ea <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003454:	4b34      	ldr	r3, [pc, #208]	; (8003528 <HAL_FLASH_IRQHandler+0x138>)
 8003456:	2201      	movs	r2, #1
 8003458:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800345a:	4b34      	ldr	r3, [pc, #208]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b01      	cmp	r3, #1
 8003462:	d12d      	bne.n	80034c0 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8003464:	4b31      	ldr	r3, [pc, #196]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	3b01      	subs	r3, #1
 800346a:	4a30      	ldr	r2, [pc, #192]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 800346c:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800346e:	4b2f      	ldr	r3, [pc, #188]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d015      	beq.n	80034a2 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8003476:	4b2d      	ldr	r3, [pc, #180]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f857 	bl	8003530 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8003482:	4b2a      	ldr	r3, [pc, #168]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	3301      	adds	r3, #1
 8003488:	4a28      	ldr	r2, [pc, #160]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 800348a:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 800348c:	4b27      	ldr	r3, [pc, #156]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8003492:	4b26      	ldr	r3, [pc, #152]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 8003494:	7a1b      	ldrb	r3, [r3, #8]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	4619      	mov	r1, r3
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f8c2 	bl	8003624 <FLASH_Erase_Sector>
 80034a0:	e023      	b.n	80034ea <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 80034a2:	f04f 33ff 	mov.w	r3, #4294967295
 80034a6:	607b      	str	r3, [r7, #4]
 80034a8:	4a20      	ldr	r2, [pc, #128]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80034ae:	4b1f      	ldr	r3, [pc, #124]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80034b4:	f000 f8fe 	bl	80036b4 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f839 	bl	8003530 <HAL_FLASH_EndOfOperationCallback>
 80034be:	e014      	b.n	80034ea <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 80034c0:	4b1a      	ldr	r3, [pc, #104]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d107      	bne.n	80034da <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80034ca:	f000 f8f3 	bl	80036b4 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80034ce:	4b17      	ldr	r3, [pc, #92]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 f82c 	bl	8003530 <HAL_FLASH_EndOfOperationCallback>
 80034d8:	e004      	b.n	80034e4 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80034da:	4b14      	ldr	r3, [pc, #80]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 f826 	bl	8003530 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80034e4:	4b11      	ldr	r3, [pc, #68]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d114      	bne.n	800351e <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 80034f4:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <HAL_FLASH_IRQHandler+0x138>)
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	4a0b      	ldr	r2, [pc, #44]	; (8003528 <HAL_FLASH_IRQHandler+0x138>)
 80034fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034fe:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8003500:	4b09      	ldr	r3, [pc, #36]	; (8003528 <HAL_FLASH_IRQHandler+0x138>)
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	4a08      	ldr	r2, [pc, #32]	; (8003528 <HAL_FLASH_IRQHandler+0x138>)
 8003506:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800350a:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <HAL_FLASH_IRQHandler+0x138>)
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	4a05      	ldr	r2, [pc, #20]	; (8003528 <HAL_FLASH_IRQHandler+0x138>)
 8003512:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003516:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8003518:	4b04      	ldr	r3, [pc, #16]	; (800352c <HAL_FLASH_IRQHandler+0x13c>)
 800351a:	2200      	movs	r2, #0
 800351c:	761a      	strb	r2, [r3, #24]
  }
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40023c00 	.word	0x40023c00
 800352c:	20000788 	.word	0x20000788

08003530 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800355c:	4b2f      	ldr	r3, [pc, #188]	; (800361c <FLASH_SetErrorCode+0xc4>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003568:	4b2d      	ldr	r3, [pc, #180]	; (8003620 <FLASH_SetErrorCode+0xc8>)
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	f043 0310 	orr.w	r3, r3, #16
 8003570:	4a2b      	ldr	r2, [pc, #172]	; (8003620 <FLASH_SetErrorCode+0xc8>)
 8003572:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003574:	4b29      	ldr	r3, [pc, #164]	; (800361c <FLASH_SetErrorCode+0xc4>)
 8003576:	2210      	movs	r2, #16
 8003578:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800357a:	4b28      	ldr	r3, [pc, #160]	; (800361c <FLASH_SetErrorCode+0xc4>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d008      	beq.n	8003598 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003586:	4b26      	ldr	r3, [pc, #152]	; (8003620 <FLASH_SetErrorCode+0xc8>)
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	f043 0308 	orr.w	r3, r3, #8
 800358e:	4a24      	ldr	r2, [pc, #144]	; (8003620 <FLASH_SetErrorCode+0xc8>)
 8003590:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003592:	4b22      	ldr	r3, [pc, #136]	; (800361c <FLASH_SetErrorCode+0xc4>)
 8003594:	2220      	movs	r2, #32
 8003596:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003598:	4b20      	ldr	r3, [pc, #128]	; (800361c <FLASH_SetErrorCode+0xc4>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80035a4:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <FLASH_SetErrorCode+0xc8>)
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	f043 0304 	orr.w	r3, r3, #4
 80035ac:	4a1c      	ldr	r2, [pc, #112]	; (8003620 <FLASH_SetErrorCode+0xc8>)
 80035ae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80035b0:	4b1a      	ldr	r3, [pc, #104]	; (800361c <FLASH_SetErrorCode+0xc4>)
 80035b2:	2240      	movs	r2, #64	; 0x40
 80035b4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <FLASH_SetErrorCode+0xc4>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80035c2:	4b17      	ldr	r3, [pc, #92]	; (8003620 <FLASH_SetErrorCode+0xc8>)
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	f043 0302 	orr.w	r3, r3, #2
 80035ca:	4a15      	ldr	r2, [pc, #84]	; (8003620 <FLASH_SetErrorCode+0xc8>)
 80035cc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80035ce:	4b13      	ldr	r3, [pc, #76]	; (800361c <FLASH_SetErrorCode+0xc4>)
 80035d0:	2280      	movs	r2, #128	; 0x80
 80035d2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80035d4:	4b11      	ldr	r3, [pc, #68]	; (800361c <FLASH_SetErrorCode+0xc4>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d009      	beq.n	80035f4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80035e0:	4b0f      	ldr	r3, [pc, #60]	; (8003620 <FLASH_SetErrorCode+0xc8>)
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	4a0d      	ldr	r2, [pc, #52]	; (8003620 <FLASH_SetErrorCode+0xc8>)
 80035ea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <FLASH_SetErrorCode+0xc4>)
 80035ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035f2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80035f4:	4b09      	ldr	r3, [pc, #36]	; (800361c <FLASH_SetErrorCode+0xc4>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003600:	4b07      	ldr	r3, [pc, #28]	; (8003620 <FLASH_SetErrorCode+0xc8>)
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	f043 0320 	orr.w	r3, r3, #32
 8003608:	4a05      	ldr	r2, [pc, #20]	; (8003620 <FLASH_SetErrorCode+0xc8>)
 800360a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <FLASH_SetErrorCode+0xc4>)
 800360e:	2202      	movs	r2, #2
 8003610:	60da      	str	r2, [r3, #12]
  }
}
 8003612:	bf00      	nop
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	40023c00 	.word	0x40023c00
 8003620:	20000788 	.word	0x20000788

08003624 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d102      	bne.n	8003640 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	e010      	b.n	8003662 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d103      	bne.n	800364e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	e009      	b.n	8003662 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800364e:	78fb      	ldrb	r3, [r7, #3]
 8003650:	2b02      	cmp	r3, #2
 8003652:	d103      	bne.n	800365c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	e002      	b.n	8003662 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800365c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003660:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003662:	4b13      	ldr	r3, [pc, #76]	; (80036b0 <FLASH_Erase_Sector+0x8c>)
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	4a12      	ldr	r2, [pc, #72]	; (80036b0 <FLASH_Erase_Sector+0x8c>)
 8003668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800366e:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <FLASH_Erase_Sector+0x8c>)
 8003670:	691a      	ldr	r2, [r3, #16]
 8003672:	490f      	ldr	r1, [pc, #60]	; (80036b0 <FLASH_Erase_Sector+0x8c>)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800367a:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <FLASH_Erase_Sector+0x8c>)
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	4a0c      	ldr	r2, [pc, #48]	; (80036b0 <FLASH_Erase_Sector+0x8c>)
 8003680:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003684:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003686:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <FLASH_Erase_Sector+0x8c>)
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4313      	orrs	r3, r2
 8003690:	4a07      	ldr	r2, [pc, #28]	; (80036b0 <FLASH_Erase_Sector+0x8c>)
 8003692:	f043 0302 	orr.w	r3, r3, #2
 8003696:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003698:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <FLASH_Erase_Sector+0x8c>)
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	4a04      	ldr	r2, [pc, #16]	; (80036b0 <FLASH_Erase_Sector+0x8c>)
 800369e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a2:	6113      	str	r3, [r2, #16]
}
 80036a4:	bf00      	nop
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	40023c00 	.word	0x40023c00

080036b4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80036b8:	4b20      	ldr	r3, [pc, #128]	; (800373c <FLASH_FlushCaches+0x88>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d017      	beq.n	80036f4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80036c4:	4b1d      	ldr	r3, [pc, #116]	; (800373c <FLASH_FlushCaches+0x88>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1c      	ldr	r2, [pc, #112]	; (800373c <FLASH_FlushCaches+0x88>)
 80036ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036ce:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80036d0:	4b1a      	ldr	r3, [pc, #104]	; (800373c <FLASH_FlushCaches+0x88>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a19      	ldr	r2, [pc, #100]	; (800373c <FLASH_FlushCaches+0x88>)
 80036d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	4b17      	ldr	r3, [pc, #92]	; (800373c <FLASH_FlushCaches+0x88>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a16      	ldr	r2, [pc, #88]	; (800373c <FLASH_FlushCaches+0x88>)
 80036e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036e6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036e8:	4b14      	ldr	r3, [pc, #80]	; (800373c <FLASH_FlushCaches+0x88>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a13      	ldr	r2, [pc, #76]	; (800373c <FLASH_FlushCaches+0x88>)
 80036ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036f2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80036f4:	4b11      	ldr	r3, [pc, #68]	; (800373c <FLASH_FlushCaches+0x88>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d017      	beq.n	8003730 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003700:	4b0e      	ldr	r3, [pc, #56]	; (800373c <FLASH_FlushCaches+0x88>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a0d      	ldr	r2, [pc, #52]	; (800373c <FLASH_FlushCaches+0x88>)
 8003706:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800370a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <FLASH_FlushCaches+0x88>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a0a      	ldr	r2, [pc, #40]	; (800373c <FLASH_FlushCaches+0x88>)
 8003712:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	4b08      	ldr	r3, [pc, #32]	; (800373c <FLASH_FlushCaches+0x88>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a07      	ldr	r2, [pc, #28]	; (800373c <FLASH_FlushCaches+0x88>)
 800371e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003722:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <FLASH_FlushCaches+0x88>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a04      	ldr	r2, [pc, #16]	; (800373c <FLASH_FlushCaches+0x88>)
 800372a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800372e:	6013      	str	r3, [r2, #0]
  }
}
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40023c00 	.word	0x40023c00

08003740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003740:	b480      	push	{r7}
 8003742:	b089      	sub	sp, #36	; 0x24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003756:	2300      	movs	r3, #0
 8003758:	61fb      	str	r3, [r7, #28]
 800375a:	e159      	b.n	8003a10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800375c:	2201      	movs	r2, #1
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4013      	ands	r3, r2
 800376e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	429a      	cmp	r2, r3
 8003776:	f040 8148 	bne.w	8003a0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d005      	beq.n	8003792 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800378e:	2b02      	cmp	r3, #2
 8003790:	d130      	bne.n	80037f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	2203      	movs	r2, #3
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037c8:	2201      	movs	r2, #1
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f003 0201 	and.w	r2, r3, #1
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d017      	beq.n	8003830 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	2203      	movs	r2, #3
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4313      	orrs	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 0303 	and.w	r3, r3, #3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d123      	bne.n	8003884 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	08da      	lsrs	r2, r3, #3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3208      	adds	r2, #8
 8003844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003848:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	220f      	movs	r2, #15
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4313      	orrs	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	08da      	lsrs	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3208      	adds	r2, #8
 800387e:	69b9      	ldr	r1, [r7, #24]
 8003880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	2203      	movs	r2, #3
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 0203 	and.w	r2, r3, #3
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80a2 	beq.w	8003a0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	4b57      	ldr	r3, [pc, #348]	; (8003a28 <HAL_GPIO_Init+0x2e8>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	4a56      	ldr	r2, [pc, #344]	; (8003a28 <HAL_GPIO_Init+0x2e8>)
 80038d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038d4:	6453      	str	r3, [r2, #68]	; 0x44
 80038d6:	4b54      	ldr	r3, [pc, #336]	; (8003a28 <HAL_GPIO_Init+0x2e8>)
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038e2:	4a52      	ldr	r2, [pc, #328]	; (8003a2c <HAL_GPIO_Init+0x2ec>)
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	089b      	lsrs	r3, r3, #2
 80038e8:	3302      	adds	r3, #2
 80038ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	220f      	movs	r2, #15
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a49      	ldr	r2, [pc, #292]	; (8003a30 <HAL_GPIO_Init+0x2f0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d019      	beq.n	8003942 <HAL_GPIO_Init+0x202>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a48      	ldr	r2, [pc, #288]	; (8003a34 <HAL_GPIO_Init+0x2f4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d013      	beq.n	800393e <HAL_GPIO_Init+0x1fe>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a47      	ldr	r2, [pc, #284]	; (8003a38 <HAL_GPIO_Init+0x2f8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00d      	beq.n	800393a <HAL_GPIO_Init+0x1fa>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a46      	ldr	r2, [pc, #280]	; (8003a3c <HAL_GPIO_Init+0x2fc>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d007      	beq.n	8003936 <HAL_GPIO_Init+0x1f6>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a45      	ldr	r2, [pc, #276]	; (8003a40 <HAL_GPIO_Init+0x300>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d101      	bne.n	8003932 <HAL_GPIO_Init+0x1f2>
 800392e:	2304      	movs	r3, #4
 8003930:	e008      	b.n	8003944 <HAL_GPIO_Init+0x204>
 8003932:	2307      	movs	r3, #7
 8003934:	e006      	b.n	8003944 <HAL_GPIO_Init+0x204>
 8003936:	2303      	movs	r3, #3
 8003938:	e004      	b.n	8003944 <HAL_GPIO_Init+0x204>
 800393a:	2302      	movs	r3, #2
 800393c:	e002      	b.n	8003944 <HAL_GPIO_Init+0x204>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <HAL_GPIO_Init+0x204>
 8003942:	2300      	movs	r3, #0
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	f002 0203 	and.w	r2, r2, #3
 800394a:	0092      	lsls	r2, r2, #2
 800394c:	4093      	lsls	r3, r2
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003954:	4935      	ldr	r1, [pc, #212]	; (8003a2c <HAL_GPIO_Init+0x2ec>)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	089b      	lsrs	r3, r3, #2
 800395a:	3302      	adds	r3, #2
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003962:	4b38      	ldr	r3, [pc, #224]	; (8003a44 <HAL_GPIO_Init+0x304>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003986:	4a2f      	ldr	r2, [pc, #188]	; (8003a44 <HAL_GPIO_Init+0x304>)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800398c:	4b2d      	ldr	r3, [pc, #180]	; (8003a44 <HAL_GPIO_Init+0x304>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039b0:	4a24      	ldr	r2, [pc, #144]	; (8003a44 <HAL_GPIO_Init+0x304>)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039b6:	4b23      	ldr	r3, [pc, #140]	; (8003a44 <HAL_GPIO_Init+0x304>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	43db      	mvns	r3, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4013      	ands	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039da:	4a1a      	ldr	r2, [pc, #104]	; (8003a44 <HAL_GPIO_Init+0x304>)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039e0:	4b18      	ldr	r3, [pc, #96]	; (8003a44 <HAL_GPIO_Init+0x304>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4013      	ands	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a04:	4a0f      	ldr	r2, [pc, #60]	; (8003a44 <HAL_GPIO_Init+0x304>)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	61fb      	str	r3, [r7, #28]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2b0f      	cmp	r3, #15
 8003a14:	f67f aea2 	bls.w	800375c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a18:	bf00      	nop
 8003a1a:	bf00      	nop
 8003a1c:	3724      	adds	r7, #36	; 0x24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40013800 	.word	0x40013800
 8003a30:	40020000 	.word	0x40020000
 8003a34:	40020400 	.word	0x40020400
 8003a38:	40020800 	.word	0x40020800
 8003a3c:	40020c00 	.word	0x40020c00
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40013c00 	.word	0x40013c00

08003a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	807b      	strh	r3, [r7, #2]
 8003a54:	4613      	mov	r3, r2
 8003a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a58:	787b      	ldrb	r3, [r7, #1]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a5e:	887a      	ldrh	r2, [r7, #2]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a64:	e003      	b.n	8003a6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a66:	887b      	ldrh	r3, [r7, #2]
 8003a68:	041a      	lsls	r2, r3, #16
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	619a      	str	r2, [r3, #24]
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e034      	b.n	8003af6 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003a94:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f245 5255 	movw	r2, #21845	; 0x5555
 8003a9e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6852      	ldr	r2, [r2, #4]
 8003aa8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6892      	ldr	r2, [r2, #8]
 8003ab2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003ab4:	f7fe feda 	bl	800286c <HAL_GetTick>
 8003ab8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003aba:	e00f      	b.n	8003adc <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003abc:	f7fe fed6 	bl	800286c <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b31      	cmp	r3, #49	; 0x31
 8003ac8:	d908      	bls.n	8003adc <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0303 	and.w	r3, r3, #3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e00c      	b.n	8003af6 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e8      	bne.n	8003abc <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003af2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <HAL_PWR_PVD_IRQHandler+0x20>)
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8003b10:	f000 f808 	bl	8003b24 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003b14:	4b02      	ldr	r3, [pc, #8]	; (8003b20 <HAL_PWR_PVD_IRQHandler+0x20>)
 8003b16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b1a:	615a      	str	r2, [r3, #20]
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40013c00 	.word	0x40013c00

08003b24 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8003b28:	bf00      	nop
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e267      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d075      	beq.n	8003c3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b52:	4b88      	ldr	r3, [pc, #544]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d00c      	beq.n	8003b78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b5e:	4b85      	ldr	r3, [pc, #532]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d112      	bne.n	8003b90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b6a:	4b82      	ldr	r3, [pc, #520]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b76:	d10b      	bne.n	8003b90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b78:	4b7e      	ldr	r3, [pc, #504]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d05b      	beq.n	8003c3c <HAL_RCC_OscConfig+0x108>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d157      	bne.n	8003c3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e242      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b98:	d106      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x74>
 8003b9a:	4b76      	ldr	r3, [pc, #472]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a75      	ldr	r2, [pc, #468]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	e01d      	b.n	8003be4 <HAL_RCC_OscConfig+0xb0>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bb0:	d10c      	bne.n	8003bcc <HAL_RCC_OscConfig+0x98>
 8003bb2:	4b70      	ldr	r3, [pc, #448]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a6f      	ldr	r2, [pc, #444]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	4b6d      	ldr	r3, [pc, #436]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a6c      	ldr	r2, [pc, #432]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	e00b      	b.n	8003be4 <HAL_RCC_OscConfig+0xb0>
 8003bcc:	4b69      	ldr	r3, [pc, #420]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a68      	ldr	r2, [pc, #416]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd6:	6013      	str	r3, [r2, #0]
 8003bd8:	4b66      	ldr	r3, [pc, #408]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a65      	ldr	r2, [pc, #404]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d013      	beq.n	8003c14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bec:	f7fe fe3e 	bl	800286c <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf4:	f7fe fe3a 	bl	800286c <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	; 0x64
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e207      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c06:	4b5b      	ldr	r3, [pc, #364]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0xc0>
 8003c12:	e014      	b.n	8003c3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fe fe2a 	bl	800286c <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c1c:	f7fe fe26 	bl	800286c <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	; 0x64
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e1f3      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2e:	4b51      	ldr	r3, [pc, #324]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f0      	bne.n	8003c1c <HAL_RCC_OscConfig+0xe8>
 8003c3a:	e000      	b.n	8003c3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d063      	beq.n	8003d12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c4a:	4b4a      	ldr	r3, [pc, #296]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 030c 	and.w	r3, r3, #12
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00b      	beq.n	8003c6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c56:	4b47      	ldr	r3, [pc, #284]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d11c      	bne.n	8003c9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c62:	4b44      	ldr	r3, [pc, #272]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d116      	bne.n	8003c9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6e:	4b41      	ldr	r3, [pc, #260]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <HAL_RCC_OscConfig+0x152>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d001      	beq.n	8003c86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e1c7      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c86:	4b3b      	ldr	r3, [pc, #236]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	4937      	ldr	r1, [pc, #220]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c9a:	e03a      	b.n	8003d12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d020      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca4:	4b34      	ldr	r3, [pc, #208]	; (8003d78 <HAL_RCC_OscConfig+0x244>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003caa:	f7fe fddf 	bl	800286c <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cb2:	f7fe fddb 	bl	800286c <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e1a8      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc4:	4b2b      	ldr	r3, [pc, #172]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f0      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd0:	4b28      	ldr	r3, [pc, #160]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4925      	ldr	r1, [pc, #148]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	600b      	str	r3, [r1, #0]
 8003ce4:	e015      	b.n	8003d12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ce6:	4b24      	ldr	r3, [pc, #144]	; (8003d78 <HAL_RCC_OscConfig+0x244>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7fe fdbe 	bl	800286c <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf4:	f7fe fdba 	bl	800286c <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e187      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d06:	4b1b      	ldr	r3, [pc, #108]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f0      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d036      	beq.n	8003d8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d016      	beq.n	8003d54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d26:	4b15      	ldr	r3, [pc, #84]	; (8003d7c <HAL_RCC_OscConfig+0x248>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2c:	f7fe fd9e 	bl	800286c <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d34:	f7fe fd9a 	bl	800286c <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e167      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d46:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x200>
 8003d52:	e01b      	b.n	8003d8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d54:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <HAL_RCC_OscConfig+0x248>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5a:	f7fe fd87 	bl	800286c <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d60:	e00e      	b.n	8003d80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d62:	f7fe fd83 	bl	800286c <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d907      	bls.n	8003d80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e150      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
 8003d74:	40023800 	.word	0x40023800
 8003d78:	42470000 	.word	0x42470000
 8003d7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d80:	4b88      	ldr	r3, [pc, #544]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1ea      	bne.n	8003d62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8097 	beq.w	8003ec8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d9e:	4b81      	ldr	r3, [pc, #516]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10f      	bne.n	8003dca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	4b7d      	ldr	r3, [pc, #500]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	4a7c      	ldr	r2, [pc, #496]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dba:	4b7a      	ldr	r3, [pc, #488]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	60bb      	str	r3, [r7, #8]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dca:	4b77      	ldr	r3, [pc, #476]	; (8003fa8 <HAL_RCC_OscConfig+0x474>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d118      	bne.n	8003e08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dd6:	4b74      	ldr	r3, [pc, #464]	; (8003fa8 <HAL_RCC_OscConfig+0x474>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a73      	ldr	r2, [pc, #460]	; (8003fa8 <HAL_RCC_OscConfig+0x474>)
 8003ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003de2:	f7fe fd43 	bl	800286c <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dea:	f7fe fd3f 	bl	800286c <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e10c      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfc:	4b6a      	ldr	r3, [pc, #424]	; (8003fa8 <HAL_RCC_OscConfig+0x474>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0f0      	beq.n	8003dea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d106      	bne.n	8003e1e <HAL_RCC_OscConfig+0x2ea>
 8003e10:	4b64      	ldr	r3, [pc, #400]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e14:	4a63      	ldr	r2, [pc, #396]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1c:	e01c      	b.n	8003e58 <HAL_RCC_OscConfig+0x324>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2b05      	cmp	r3, #5
 8003e24:	d10c      	bne.n	8003e40 <HAL_RCC_OscConfig+0x30c>
 8003e26:	4b5f      	ldr	r3, [pc, #380]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2a:	4a5e      	ldr	r2, [pc, #376]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	f043 0304 	orr.w	r3, r3, #4
 8003e30:	6713      	str	r3, [r2, #112]	; 0x70
 8003e32:	4b5c      	ldr	r3, [pc, #368]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	4a5b      	ldr	r2, [pc, #364]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3e:	e00b      	b.n	8003e58 <HAL_RCC_OscConfig+0x324>
 8003e40:	4b58      	ldr	r3, [pc, #352]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	4a57      	ldr	r2, [pc, #348]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e46:	f023 0301 	bic.w	r3, r3, #1
 8003e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4c:	4b55      	ldr	r3, [pc, #340]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e50:	4a54      	ldr	r2, [pc, #336]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e52:	f023 0304 	bic.w	r3, r3, #4
 8003e56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d015      	beq.n	8003e8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e60:	f7fe fd04 	bl	800286c <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e66:	e00a      	b.n	8003e7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e68:	f7fe fd00 	bl	800286c <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e0cb      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7e:	4b49      	ldr	r3, [pc, #292]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0ee      	beq.n	8003e68 <HAL_RCC_OscConfig+0x334>
 8003e8a:	e014      	b.n	8003eb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e8c:	f7fe fcee 	bl	800286c <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e92:	e00a      	b.n	8003eaa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e94:	f7fe fcea 	bl	800286c <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e0b5      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eaa:	4b3e      	ldr	r3, [pc, #248]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1ee      	bne.n	8003e94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eb6:	7dfb      	ldrb	r3, [r7, #23]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d105      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ebc:	4b39      	ldr	r3, [pc, #228]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	4a38      	ldr	r2, [pc, #224]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 80a1 	beq.w	8004014 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ed2:	4b34      	ldr	r3, [pc, #208]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d05c      	beq.n	8003f98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d141      	bne.n	8003f6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee6:	4b31      	ldr	r3, [pc, #196]	; (8003fac <HAL_RCC_OscConfig+0x478>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eec:	f7fe fcbe 	bl	800286c <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef4:	f7fe fcba 	bl	800286c <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e087      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f06:	4b27      	ldr	r3, [pc, #156]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69da      	ldr	r2, [r3, #28]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	019b      	lsls	r3, r3, #6
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f28:	085b      	lsrs	r3, r3, #1
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	041b      	lsls	r3, r3, #16
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	061b      	lsls	r3, r3, #24
 8003f36:	491b      	ldr	r1, [pc, #108]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f3c:	4b1b      	ldr	r3, [pc, #108]	; (8003fac <HAL_RCC_OscConfig+0x478>)
 8003f3e:	2201      	movs	r2, #1
 8003f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f42:	f7fe fc93 	bl	800286c <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f4a:	f7fe fc8f 	bl	800286c <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e05c      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5c:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0f0      	beq.n	8003f4a <HAL_RCC_OscConfig+0x416>
 8003f68:	e054      	b.n	8004014 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6a:	4b10      	ldr	r3, [pc, #64]	; (8003fac <HAL_RCC_OscConfig+0x478>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f70:	f7fe fc7c 	bl	800286c <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f78:	f7fe fc78 	bl	800286c <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e045      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8a:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x444>
 8003f96:	e03d      	b.n	8004014 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d107      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e038      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	40007000 	.word	0x40007000
 8003fac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fb0:	4b1b      	ldr	r3, [pc, #108]	; (8004020 <HAL_RCC_OscConfig+0x4ec>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d028      	beq.n	8004010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d121      	bne.n	8004010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d11a      	bne.n	8004010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fe6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d111      	bne.n	8004010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff6:	085b      	lsrs	r3, r3, #1
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d107      	bne.n	8004010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800400c:	429a      	cmp	r2, r3
 800400e:	d001      	beq.n	8004014 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40023800 	.word	0x40023800

08004024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0cc      	b.n	80041d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004038:	4b68      	ldr	r3, [pc, #416]	; (80041dc <HAL_RCC_ClockConfig+0x1b8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d90c      	bls.n	8004060 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004046:	4b65      	ldr	r3, [pc, #404]	; (80041dc <HAL_RCC_ClockConfig+0x1b8>)
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800404e:	4b63      	ldr	r3, [pc, #396]	; (80041dc <HAL_RCC_ClockConfig+0x1b8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	429a      	cmp	r2, r3
 800405a:	d001      	beq.n	8004060 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e0b8      	b.n	80041d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d020      	beq.n	80040ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004078:	4b59      	ldr	r3, [pc, #356]	; (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	4a58      	ldr	r2, [pc, #352]	; (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004082:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b00      	cmp	r3, #0
 800408e:	d005      	beq.n	800409c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004090:	4b53      	ldr	r3, [pc, #332]	; (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	4a52      	ldr	r2, [pc, #328]	; (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800409a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800409c:	4b50      	ldr	r3, [pc, #320]	; (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	494d      	ldr	r1, [pc, #308]	; (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d044      	beq.n	8004144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d107      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c2:	4b47      	ldr	r3, [pc, #284]	; (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d119      	bne.n	8004102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e07f      	b.n	80041d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d003      	beq.n	80040e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d107      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e2:	4b3f      	ldr	r3, [pc, #252]	; (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d109      	bne.n	8004102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e06f      	b.n	80041d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f2:	4b3b      	ldr	r3, [pc, #236]	; (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e067      	b.n	80041d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004102:	4b37      	ldr	r3, [pc, #220]	; (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f023 0203 	bic.w	r2, r3, #3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	4934      	ldr	r1, [pc, #208]	; (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004110:	4313      	orrs	r3, r2
 8004112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004114:	f7fe fbaa 	bl	800286c <HAL_GetTick>
 8004118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411a:	e00a      	b.n	8004132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800411c:	f7fe fba6 	bl	800286c <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	f241 3288 	movw	r2, #5000	; 0x1388
 800412a:	4293      	cmp	r3, r2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e04f      	b.n	80041d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004132:	4b2b      	ldr	r3, [pc, #172]	; (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 020c 	and.w	r2, r3, #12
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	429a      	cmp	r2, r3
 8004142:	d1eb      	bne.n	800411c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004144:	4b25      	ldr	r3, [pc, #148]	; (80041dc <HAL_RCC_ClockConfig+0x1b8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d20c      	bcs.n	800416c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004152:	4b22      	ldr	r3, [pc, #136]	; (80041dc <HAL_RCC_ClockConfig+0x1b8>)
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415a:	4b20      	ldr	r3, [pc, #128]	; (80041dc <HAL_RCC_ClockConfig+0x1b8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d001      	beq.n	800416c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e032      	b.n	80041d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d008      	beq.n	800418a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004178:	4b19      	ldr	r3, [pc, #100]	; (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	4916      	ldr	r1, [pc, #88]	; (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	4313      	orrs	r3, r2
 8004188:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d009      	beq.n	80041aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004196:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	490e      	ldr	r1, [pc, #56]	; (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041aa:	f000 f821 	bl	80041f0 <HAL_RCC_GetSysClockFreq>
 80041ae:	4602      	mov	r2, r0
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	091b      	lsrs	r3, r3, #4
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	490a      	ldr	r1, [pc, #40]	; (80041e4 <HAL_RCC_ClockConfig+0x1c0>)
 80041bc:	5ccb      	ldrb	r3, [r1, r3]
 80041be:	fa22 f303 	lsr.w	r3, r2, r3
 80041c2:	4a09      	ldr	r2, [pc, #36]	; (80041e8 <HAL_RCC_ClockConfig+0x1c4>)
 80041c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041c6:	4b09      	ldr	r3, [pc, #36]	; (80041ec <HAL_RCC_ClockConfig+0x1c8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fd feec 	bl	8001fa8 <HAL_InitTick>

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40023c00 	.word	0x40023c00
 80041e0:	40023800 	.word	0x40023800
 80041e4:	0800a440 	.word	0x0800a440
 80041e8:	20000000 	.word	0x20000000
 80041ec:	20000004 	.word	0x20000004

080041f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041f4:	b094      	sub	sp, #80	; 0x50
 80041f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	647b      	str	r3, [r7, #68]	; 0x44
 80041fc:	2300      	movs	r3, #0
 80041fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004200:	2300      	movs	r3, #0
 8004202:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004208:	4b79      	ldr	r3, [pc, #484]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 030c 	and.w	r3, r3, #12
 8004210:	2b08      	cmp	r3, #8
 8004212:	d00d      	beq.n	8004230 <HAL_RCC_GetSysClockFreq+0x40>
 8004214:	2b08      	cmp	r3, #8
 8004216:	f200 80e1 	bhi.w	80043dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <HAL_RCC_GetSysClockFreq+0x34>
 800421e:	2b04      	cmp	r3, #4
 8004220:	d003      	beq.n	800422a <HAL_RCC_GetSysClockFreq+0x3a>
 8004222:	e0db      	b.n	80043dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004224:	4b73      	ldr	r3, [pc, #460]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004226:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004228:	e0db      	b.n	80043e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800422a:	4b73      	ldr	r3, [pc, #460]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800422c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800422e:	e0d8      	b.n	80043e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004230:	4b6f      	ldr	r3, [pc, #444]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004238:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800423a:	4b6d      	ldr	r3, [pc, #436]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d063      	beq.n	800430e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004246:	4b6a      	ldr	r3, [pc, #424]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	099b      	lsrs	r3, r3, #6
 800424c:	2200      	movs	r2, #0
 800424e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004250:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004258:	633b      	str	r3, [r7, #48]	; 0x30
 800425a:	2300      	movs	r3, #0
 800425c:	637b      	str	r3, [r7, #52]	; 0x34
 800425e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004262:	4622      	mov	r2, r4
 8004264:	462b      	mov	r3, r5
 8004266:	f04f 0000 	mov.w	r0, #0
 800426a:	f04f 0100 	mov.w	r1, #0
 800426e:	0159      	lsls	r1, r3, #5
 8004270:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004274:	0150      	lsls	r0, r2, #5
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4621      	mov	r1, r4
 800427c:	1a51      	subs	r1, r2, r1
 800427e:	6139      	str	r1, [r7, #16]
 8004280:	4629      	mov	r1, r5
 8004282:	eb63 0301 	sbc.w	r3, r3, r1
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004294:	4659      	mov	r1, fp
 8004296:	018b      	lsls	r3, r1, #6
 8004298:	4651      	mov	r1, sl
 800429a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800429e:	4651      	mov	r1, sl
 80042a0:	018a      	lsls	r2, r1, #6
 80042a2:	4651      	mov	r1, sl
 80042a4:	ebb2 0801 	subs.w	r8, r2, r1
 80042a8:	4659      	mov	r1, fp
 80042aa:	eb63 0901 	sbc.w	r9, r3, r1
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	f04f 0300 	mov.w	r3, #0
 80042b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042c2:	4690      	mov	r8, r2
 80042c4:	4699      	mov	r9, r3
 80042c6:	4623      	mov	r3, r4
 80042c8:	eb18 0303 	adds.w	r3, r8, r3
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	462b      	mov	r3, r5
 80042d0:	eb49 0303 	adc.w	r3, r9, r3
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	f04f 0300 	mov.w	r3, #0
 80042de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042e2:	4629      	mov	r1, r5
 80042e4:	024b      	lsls	r3, r1, #9
 80042e6:	4621      	mov	r1, r4
 80042e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042ec:	4621      	mov	r1, r4
 80042ee:	024a      	lsls	r2, r1, #9
 80042f0:	4610      	mov	r0, r2
 80042f2:	4619      	mov	r1, r3
 80042f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042f6:	2200      	movs	r2, #0
 80042f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004300:	f7fb ff6e 	bl	80001e0 <__aeabi_uldivmod>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4613      	mov	r3, r2
 800430a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800430c:	e058      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800430e:	4b38      	ldr	r3, [pc, #224]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	099b      	lsrs	r3, r3, #6
 8004314:	2200      	movs	r2, #0
 8004316:	4618      	mov	r0, r3
 8004318:	4611      	mov	r1, r2
 800431a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800431e:	623b      	str	r3, [r7, #32]
 8004320:	2300      	movs	r3, #0
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
 8004324:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004328:	4642      	mov	r2, r8
 800432a:	464b      	mov	r3, r9
 800432c:	f04f 0000 	mov.w	r0, #0
 8004330:	f04f 0100 	mov.w	r1, #0
 8004334:	0159      	lsls	r1, r3, #5
 8004336:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800433a:	0150      	lsls	r0, r2, #5
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4641      	mov	r1, r8
 8004342:	ebb2 0a01 	subs.w	sl, r2, r1
 8004346:	4649      	mov	r1, r9
 8004348:	eb63 0b01 	sbc.w	fp, r3, r1
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004358:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800435c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004360:	ebb2 040a 	subs.w	r4, r2, sl
 8004364:	eb63 050b 	sbc.w	r5, r3, fp
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	00eb      	lsls	r3, r5, #3
 8004372:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004376:	00e2      	lsls	r2, r4, #3
 8004378:	4614      	mov	r4, r2
 800437a:	461d      	mov	r5, r3
 800437c:	4643      	mov	r3, r8
 800437e:	18e3      	adds	r3, r4, r3
 8004380:	603b      	str	r3, [r7, #0]
 8004382:	464b      	mov	r3, r9
 8004384:	eb45 0303 	adc.w	r3, r5, r3
 8004388:	607b      	str	r3, [r7, #4]
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	f04f 0300 	mov.w	r3, #0
 8004392:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004396:	4629      	mov	r1, r5
 8004398:	028b      	lsls	r3, r1, #10
 800439a:	4621      	mov	r1, r4
 800439c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043a0:	4621      	mov	r1, r4
 80043a2:	028a      	lsls	r2, r1, #10
 80043a4:	4610      	mov	r0, r2
 80043a6:	4619      	mov	r1, r3
 80043a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043aa:	2200      	movs	r2, #0
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	61fa      	str	r2, [r7, #28]
 80043b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043b4:	f7fb ff14 	bl	80001e0 <__aeabi_uldivmod>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4613      	mov	r3, r2
 80043be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	0c1b      	lsrs	r3, r3, #16
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	3301      	adds	r3, #1
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80043d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043da:	e002      	b.n	80043e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043dc:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80043de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3750      	adds	r7, #80	; 0x50
 80043e8:	46bd      	mov	sp, r7
 80043ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ee:	bf00      	nop
 80043f0:	40023800 	.word	0x40023800
 80043f4:	00f42400 	.word	0x00f42400
 80043f8:	007a1200 	.word	0x007a1200

080043fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004400:	4b03      	ldr	r3, [pc, #12]	; (8004410 <HAL_RCC_GetHCLKFreq+0x14>)
 8004402:	681b      	ldr	r3, [r3, #0]
}
 8004404:	4618      	mov	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	20000000 	.word	0x20000000

08004414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004418:	f7ff fff0 	bl	80043fc <HAL_RCC_GetHCLKFreq>
 800441c:	4602      	mov	r2, r0
 800441e:	4b05      	ldr	r3, [pc, #20]	; (8004434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	0a9b      	lsrs	r3, r3, #10
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	4903      	ldr	r1, [pc, #12]	; (8004438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800442a:	5ccb      	ldrb	r3, [r1, r3]
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004430:	4618      	mov	r0, r3
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40023800 	.word	0x40023800
 8004438:	0800a450 	.word	0x0800a450

0800443c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004440:	f7ff ffdc 	bl	80043fc <HAL_RCC_GetHCLKFreq>
 8004444:	4602      	mov	r2, r0
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	0b5b      	lsrs	r3, r3, #13
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	4903      	ldr	r1, [pc, #12]	; (8004460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004452:	5ccb      	ldrb	r3, [r1, r3]
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004458:	4618      	mov	r0, r3
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40023800 	.word	0x40023800
 8004460:	0800a450 	.word	0x0800a450

08004464 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	220f      	movs	r2, #15
 8004472:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004474:	4b12      	ldr	r3, [pc, #72]	; (80044c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 0203 	and.w	r2, r3, #3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004480:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800448c:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <HAL_RCC_GetClockConfig+0x5c>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004498:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <HAL_RCC_GetClockConfig+0x5c>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	08db      	lsrs	r3, r3, #3
 800449e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044a6:	4b07      	ldr	r3, [pc, #28]	; (80044c4 <HAL_RCC_GetClockConfig+0x60>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0207 	and.w	r2, r3, #7
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	601a      	str	r2, [r3, #0]
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40023800 	.word	0x40023800
 80044c4:	40023c00 	.word	0x40023c00

080044c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d105      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d038      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044f0:	4b68      	ldr	r3, [pc, #416]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044f6:	f7fe f9b9 	bl	800286c <HAL_GetTick>
 80044fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044fc:	e008      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044fe:	f7fe f9b5 	bl	800286c <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d901      	bls.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e0bd      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004510:	4b61      	ldr	r3, [pc, #388]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1f0      	bne.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	019b      	lsls	r3, r3, #6
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	071b      	lsls	r3, r3, #28
 800452e:	495a      	ldr	r1, [pc, #360]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004536:	4b57      	ldr	r3, [pc, #348]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004538:	2201      	movs	r2, #1
 800453a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800453c:	f7fe f996 	bl	800286c <HAL_GetTick>
 8004540:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004544:	f7fe f992 	bl	800286c <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e09a      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004556:	4b50      	ldr	r3, [pc, #320]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0f0      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 8083 	beq.w	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	4b48      	ldr	r3, [pc, #288]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	4a47      	ldr	r2, [pc, #284]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800457e:	6413      	str	r3, [r2, #64]	; 0x40
 8004580:	4b45      	ldr	r3, [pc, #276]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800458c:	4b43      	ldr	r3, [pc, #268]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a42      	ldr	r2, [pc, #264]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004596:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004598:	f7fe f968 	bl	800286c <HAL_GetTick>
 800459c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045a0:	f7fe f964 	bl	800286c <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e06c      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045b2:	4b3a      	ldr	r3, [pc, #232]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f0      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045be:	4b36      	ldr	r3, [pc, #216]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d02f      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d028      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045dc:	4b2e      	ldr	r3, [pc, #184]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045e6:	4b2e      	ldr	r3, [pc, #184]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045ec:	4b2c      	ldr	r3, [pc, #176]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045f2:	4a29      	ldr	r2, [pc, #164]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045f8:	4b27      	ldr	r3, [pc, #156]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b01      	cmp	r3, #1
 8004602:	d114      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004604:	f7fe f932 	bl	800286c <HAL_GetTick>
 8004608:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460a:	e00a      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800460c:	f7fe f92e 	bl	800286c <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	f241 3288 	movw	r2, #5000	; 0x1388
 800461a:	4293      	cmp	r3, r2
 800461c:	d901      	bls.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e034      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004622:	4b1d      	ldr	r3, [pc, #116]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0ee      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800463a:	d10d      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800463c:	4b16      	ldr	r3, [pc, #88]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800464c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004650:	4911      	ldr	r1, [pc, #68]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
 8004656:	e005      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004658:	4b0f      	ldr	r3, [pc, #60]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4a0e      	ldr	r2, [pc, #56]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004662:	6093      	str	r3, [r2, #8]
 8004664:	4b0c      	ldr	r3, [pc, #48]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004666:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004670:	4909      	ldr	r1, [pc, #36]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004672:	4313      	orrs	r3, r2
 8004674:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	7d1a      	ldrb	r2, [r3, #20]
 8004686:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004688:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	42470068 	.word	0x42470068
 8004698:	40023800 	.word	0x40023800
 800469c:	40007000 	.word	0x40007000
 80046a0:	42470e40 	.word	0x42470e40
 80046a4:	424711e0 	.word	0x424711e0

080046a8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e084      	b.n	80047c8 <HAL_RTC_Init+0x120>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	7f5b      	ldrb	r3, [r3, #29]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d123      	bne.n	8004710 <HAL_RTC_Init+0x68>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a3f      	ldr	r2, [pc, #252]	; (80047d0 <HAL_RTC_Init+0x128>)
 80046d2:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a3f      	ldr	r2, [pc, #252]	; (80047d4 <HAL_RTC_Init+0x12c>)
 80046d8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a3e      	ldr	r2, [pc, #248]	; (80047d8 <HAL_RTC_Init+0x130>)
 80046de:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a3e      	ldr	r2, [pc, #248]	; (80047dc <HAL_RTC_Init+0x134>)
 80046e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a3d      	ldr	r2, [pc, #244]	; (80047e0 <HAL_RTC_Init+0x138>)
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(RTC_TAMPER2_SUPPORT)
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
#endif /* RTC_TAMPER2_SUPPORT */

    if (hrtc->MspInitCallback == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d102      	bne.n	80046fa <HAL_RTC_Init+0x52>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a3b      	ldr	r2, [pc, #236]	; (80047e4 <HAL_RTC_Init+0x13c>)
 80046f8:	635a      	str	r2, [r3, #52]	; 0x34
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	4798      	blx	r3

    if (hrtc->MspDeInitCallback == NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	2b00      	cmp	r3, #0
 8004708:	d102      	bne.n	8004710 <HAL_RTC_Init+0x68>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a36      	ldr	r2, [pc, #216]	; (80047e8 <HAL_RTC_Init+0x140>)
 800470e:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_RTC_MspInit(hrtc);
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	22ca      	movs	r2, #202	; 0xca
 800471c:	625a      	str	r2, [r3, #36]	; 0x24
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2253      	movs	r2, #83	; 0x53
 8004724:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fada 	bl	8004ce0 <RTC_EnterInitMode>
 800472c:	4603      	mov	r3, r0
 800472e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d12c      	bne.n	8004790 <HAL_RTC_Init+0xe8>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6812      	ldr	r2, [r2, #0]
 8004740:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004748:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6899      	ldr	r1, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	68d2      	ldr	r2, [r2, #12]
 8004770:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6919      	ldr	r1, [r3, #16]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	041a      	lsls	r2, r3, #16
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fae1 	bl	8004d4e <RTC_ExitInitMode>
 800478c:	4603      	mov	r3, r0
 800478e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d113      	bne.n	80047be <HAL_RTC_Init+0x116>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047a4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699a      	ldr	r2, [r3, #24]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	22ff      	movs	r2, #255	; 0xff
 80047c4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	08004c7d 	.word	0x08004c7d
 80047d4:	08004f49 	.word	0x08004f49
 80047d8:	08004dd3 	.word	0x08004dd3
 80047dc:	08004f35 	.word	0x08004f35
 80047e0:	08004de7 	.word	0x08004de7
 80047e4:	08001c3d 	.word	0x08001c3d
 80047e8:	08001c95 	.word	0x08001c95

080047ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80047ec:	b590      	push	{r4, r7, lr}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	7f1b      	ldrb	r3, [r3, #28]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_RTC_SetTime+0x1c>
 8004804:	2302      	movs	r3, #2
 8004806:	e087      	b.n	8004918 <HAL_RTC_SetTime+0x12c>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2201      	movs	r2, #1
 800480c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2202      	movs	r2, #2
 8004812:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d126      	bne.n	8004868 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004824:	2b00      	cmp	r3, #0
 8004826:	d102      	bne.n	800482e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2200      	movs	r2, #0
 800482c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fab0 	bl	8004d98 <RTC_ByteToBcd2>
 8004838:	4603      	mov	r3, r0
 800483a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	785b      	ldrb	r3, [r3, #1]
 8004840:	4618      	mov	r0, r3
 8004842:	f000 faa9 	bl	8004d98 <RTC_ByteToBcd2>
 8004846:	4603      	mov	r3, r0
 8004848:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800484a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	789b      	ldrb	r3, [r3, #2]
 8004850:	4618      	mov	r0, r3
 8004852:	f000 faa1 	bl	8004d98 <RTC_ByteToBcd2>
 8004856:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004858:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	78db      	ldrb	r3, [r3, #3]
 8004860:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	e018      	b.n	800489a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	d102      	bne.n	800487c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2200      	movs	r2, #0
 800487a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	785b      	ldrb	r3, [r3, #1]
 8004886:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004888:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800488e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	78db      	ldrb	r3, [r3, #3]
 8004894:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	22ca      	movs	r2, #202	; 0xca
 80048a0:	625a      	str	r2, [r3, #36]	; 0x24
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2253      	movs	r2, #83	; 0x53
 80048a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 fa18 	bl	8004ce0 <RTC_EnterInitMode>
 80048b0:	4603      	mov	r3, r0
 80048b2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80048b4:	7cfb      	ldrb	r3, [r7, #19]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d120      	bne.n	80048fc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80048c4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80048c8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048d8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6899      	ldr	r1, [r3, #8]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	431a      	orrs	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 fa2b 	bl	8004d4e <RTC_ExitInitMode>
 80048f8:	4603      	mov	r3, r0
 80048fa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80048fc:	7cfb      	ldrb	r3, [r7, #19]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d102      	bne.n	8004908 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	22ff      	movs	r2, #255	; 0xff
 800490e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	771a      	strb	r2, [r3, #28]

  return status;
 8004916:	7cfb      	ldrb	r3, [r7, #19]
}
 8004918:	4618      	mov	r0, r3
 800491a:	371c      	adds	r7, #28
 800491c:	46bd      	mov	sp, r7
 800491e:	bd90      	pop	{r4, r7, pc}

08004920 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004920:	b590      	push	{r4, r7, lr}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	7f1b      	ldrb	r3, [r3, #28]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d101      	bne.n	800493c <HAL_RTC_SetDate+0x1c>
 8004938:	2302      	movs	r3, #2
 800493a:	e071      	b.n	8004a20 <HAL_RTC_SetDate+0x100>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2201      	movs	r2, #1
 8004940:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2202      	movs	r2, #2
 8004946:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10e      	bne.n	800496c <HAL_RTC_SetDate+0x4c>
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	785b      	ldrb	r3, [r3, #1]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b00      	cmp	r3, #0
 8004958:	d008      	beq.n	800496c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	785b      	ldrb	r3, [r3, #1]
 800495e:	f023 0310 	bic.w	r3, r3, #16
 8004962:	b2db      	uxtb	r3, r3
 8004964:	330a      	adds	r3, #10
 8004966:	b2da      	uxtb	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d11c      	bne.n	80049ac <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	78db      	ldrb	r3, [r3, #3]
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fa0e 	bl	8004d98 <RTC_ByteToBcd2>
 800497c:	4603      	mov	r3, r0
 800497e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	785b      	ldrb	r3, [r3, #1]
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fa07 	bl	8004d98 <RTC_ByteToBcd2>
 800498a:	4603      	mov	r3, r0
 800498c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800498e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	789b      	ldrb	r3, [r3, #2]
 8004994:	4618      	mov	r0, r3
 8004996:	f000 f9ff 	bl	8004d98 <RTC_ByteToBcd2>
 800499a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800499c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80049a6:	4313      	orrs	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	e00e      	b.n	80049ca <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	78db      	ldrb	r3, [r3, #3]
 80049b0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	785b      	ldrb	r3, [r3, #1]
 80049b6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80049b8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80049be:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	22ca      	movs	r2, #202	; 0xca
 80049d0:	625a      	str	r2, [r3, #36]	; 0x24
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2253      	movs	r2, #83	; 0x53
 80049d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f980 	bl	8004ce0 <RTC_EnterInitMode>
 80049e0:	4603      	mov	r3, r0
 80049e2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80049e4:	7cfb      	ldrb	r3, [r7, #19]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10c      	bne.n	8004a04 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80049f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80049f8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 f9a7 	bl	8004d4e <RTC_ExitInitMode>
 8004a00:	4603      	mov	r3, r0
 8004a02:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004a04:	7cfb      	ldrb	r3, [r7, #19]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d102      	bne.n	8004a10 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	22ff      	movs	r2, #255	; 0xff
 8004a16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	771a      	strb	r2, [r3, #28]

  return status;
 8004a1e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	371c      	adds	r7, #28
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd90      	pop	{r4, r7, pc}

08004a28 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004a28:	b590      	push	{r4, r7, lr}
 8004a2a:	b089      	sub	sp, #36	; 0x24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	7f1b      	ldrb	r3, [r3, #28]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d101      	bne.n	8004a4c <HAL_RTC_SetAlarm+0x24>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e113      	b.n	8004c74 <HAL_RTC_SetAlarm+0x24c>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2202      	movs	r2, #2
 8004a56:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d137      	bne.n	8004ace <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d102      	bne.n	8004a72 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 f98e 	bl	8004d98 <RTC_ByteToBcd2>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	785b      	ldrb	r3, [r3, #1]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 f987 	bl	8004d98 <RTC_ByteToBcd2>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004a8e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	789b      	ldrb	r3, [r3, #2]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 f97f 	bl	8004d98 <RTC_ByteToBcd2>
 8004a9a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a9c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	78db      	ldrb	r3, [r3, #3]
 8004aa4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004aa6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 f971 	bl	8004d98 <RTC_ByteToBcd2>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8004aba:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004ac2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	61fb      	str	r3, [r7, #28]
 8004acc:	e023      	b.n	8004b16 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d102      	bne.n	8004ae2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	785b      	ldrb	r3, [r3, #1]
 8004aec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004aee:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004af4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	78db      	ldrb	r3, [r3, #3]
 8004afa:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004afc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b04:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004b06:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004b0c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	22ca      	movs	r2, #202	; 0xca
 8004b28:	625a      	str	r2, [r3, #36]	; 0x24
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2253      	movs	r2, #83	; 0x53
 8004b30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3a:	d148      	bne.n	8004bce <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b4a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b5a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004b6c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b6e:	f7fd fe7d 	bl	800286c <HAL_GetTick>
 8004b72:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004b74:	e013      	b.n	8004b9e <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b76:	f7fd fe79 	bl	800286c <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b84:	d90b      	bls.n	8004b9e <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	22ff      	movs	r2, #255	; 0xff
 8004b8c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2203      	movs	r2, #3
 8004b92:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e06a      	b.n	8004c74 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0e4      	beq.n	8004b76 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	69fa      	ldr	r2, [r7, #28]
 8004bb2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bca:	609a      	str	r2, [r3, #8]
 8004bcc:	e047      	b.n	8004c5e <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004bdc:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bec:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004bfe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c00:	f7fd fe34 	bl	800286c <HAL_GetTick>
 8004c04:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004c06:	e013      	b.n	8004c30 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c08:	f7fd fe30 	bl	800286c <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c16:	d90b      	bls.n	8004c30 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	22ff      	movs	r2, #255	; 0xff
 8004c1e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2203      	movs	r2, #3
 8004c24:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e021      	b.n	8004c74 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0e4      	beq.n	8004c08 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69fa      	ldr	r2, [r7, #28]
 8004c44:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	22ff      	movs	r2, #255	; 0xff
 8004c64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3724      	adds	r7, #36	; 0x24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd90      	pop	{r4, r7, pc}

08004c7c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004caa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cac:	f7fd fdde 	bl	800286c <HAL_GetTick>
 8004cb0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004cb2:	e009      	b.n	8004cc8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cb4:	f7fd fdda 	bl	800286c <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e007      	b.n	8004cd8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0ee      	beq.n	8004cb4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d122      	bne.n	8004d44 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d0c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d0e:	f7fd fdad 	bl	800286c <HAL_GetTick>
 8004d12:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004d14:	e00c      	b.n	8004d30 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d16:	f7fd fda9 	bl	800286c <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d24:	d904      	bls.n	8004d30 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2204      	movs	r2, #4
 8004d2a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d102      	bne.n	8004d44 <RTC_EnterInitMode+0x64>
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d1e8      	bne.n	8004d16 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b084      	sub	sp, #16
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d68:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff ff89 	bl	8004c90 <HAL_RTC_WaitForSynchro>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d004      	beq.n	8004d8e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2204      	movs	r2, #4
 8004d88:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	4603      	mov	r3, r0
 8004da0:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004da6:	e005      	b.n	8004db4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
 8004daa:	3301      	adds	r3, #1
 8004dac:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	3b0a      	subs	r3, #10
 8004db2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004db4:	79fb      	ldrb	r3, [r7, #7]
 8004db6:	2b09      	cmp	r3, #9
 8004db8:	d8f6      	bhi.n	8004da8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004dba:	7bfb      	ldrb	r3, [r7, #15]
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	79fb      	ldrb	r3, [r7, #7]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	b2db      	uxtb	r3, r3
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b086      	sub	sp, #24
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	7f1b      	ldrb	r3, [r3, #28]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e08a      	b.n	8004f2c <HAL_RTCEx_SetWakeUpTimer+0x132>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	22ca      	movs	r2, #202	; 0xca
 8004e28:	625a      	str	r2, [r3, #36]	; 0x24
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2253      	movs	r2, #83	; 0x53
 8004e30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01e      	beq.n	8004e7e <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 8004e40:	f7fd fd14 	bl	800286c <HAL_GetTick>
 8004e44:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8004e46:	e013      	b.n	8004e70 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e48:	f7fd fd10 	bl	800286c <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e56:	d90b      	bls.n	8004e70 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	22ff      	movs	r2, #255	; 0xff
 8004e5e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2203      	movs	r2, #3
 8004e64:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e05d      	b.n	8004f2c <HAL_RTCEx_SetWakeUpTimer+0x132>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f003 0304 	and.w	r3, r3, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e4      	bne.n	8004e48 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e8c:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004e9e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ea0:	f7fd fce4 	bl	800286c <HAL_GetTick>
 8004ea4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004ea6:	e013      	b.n	8004ed0 <HAL_RTCEx_SetWakeUpTimer+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ea8:	f7fd fce0 	bl	800286c <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eb6:	d90b      	bls.n	8004ed0 <HAL_RTCEx_SetWakeUpTimer+0xd6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	22ff      	movs	r2, #255	; 0xff
 8004ebe:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2203      	movs	r2, #3
 8004ec4:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e02d      	b.n	8004f2c <HAL_RTCEx_SetWakeUpTimer+0x132>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0e4      	beq.n	8004ea8 <HAL_RTCEx_SetWakeUpTimer+0xae>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0207 	bic.w	r2, r2, #7
 8004eec:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6899      	ldr	r1, [r3, #8]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f14:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	22ff      	movs	r2, #255	; 0xff
 8004f1c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2201      	movs	r2, #1
 8004f22:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e09b      	b.n	80050a6 <HAL_SPI_Init+0x14a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d108      	bne.n	8004f88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f7e:	d009      	beq.n	8004f94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	61da      	str	r2, [r3, #28]
 8004f86:	e005      	b.n	8004f94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d126      	bne.n	8004ff4 <HAL_SPI_Init+0x98>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a3f      	ldr	r2, [pc, #252]	; (80050b0 <HAL_SPI_Init+0x154>)
 8004fb2:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a3f      	ldr	r2, [pc, #252]	; (80050b4 <HAL_SPI_Init+0x158>)
 8004fb8:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a3e      	ldr	r2, [pc, #248]	; (80050b8 <HAL_SPI_Init+0x15c>)
 8004fbe:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a3e      	ldr	r2, [pc, #248]	; (80050bc <HAL_SPI_Init+0x160>)
 8004fc4:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a3d      	ldr	r2, [pc, #244]	; (80050c0 <HAL_SPI_Init+0x164>)
 8004fca:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a3d      	ldr	r2, [pc, #244]	; (80050c4 <HAL_SPI_Init+0x168>)
 8004fd0:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a3c      	ldr	r2, [pc, #240]	; (80050c8 <HAL_SPI_Init+0x16c>)
 8004fd6:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a3c      	ldr	r2, [pc, #240]	; (80050cc <HAL_SPI_Init+0x170>)
 8004fdc:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d102      	bne.n	8004fec <HAL_SPI_Init+0x90>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a39      	ldr	r2, [pc, #228]	; (80050d0 <HAL_SPI_Init+0x174>)
 8004fea:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800500a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	431a      	orrs	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005058:	ea42 0103 	orr.w	r1, r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005060:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	0c1b      	lsrs	r3, r3, #16
 8005072:	f003 0104 	and.w	r1, r3, #4
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	f003 0210 	and.w	r2, r3, #16
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005094:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	080052d5 	.word	0x080052d5
 80050b4:	080052e9 	.word	0x080052e9
 80050b8:	080052fd 	.word	0x080052fd
 80050bc:	08005311 	.word	0x08005311
 80050c0:	08005325 	.word	0x08005325
 80050c4:	08005339 	.word	0x08005339
 80050c8:	0800534d 	.word	0x0800534d
 80050cc:	08005361 	.word	0x08005361
 80050d0:	08001d99 	.word	0x08001d99

080050d4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	099b      	lsrs	r3, r3, #6
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10f      	bne.n	8005118 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	099b      	lsrs	r3, r3, #6
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d004      	beq.n	8005118 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	4798      	blx	r3
    return;
 8005116:	e0d8      	b.n	80052ca <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	085b      	lsrs	r3, r3, #1
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00a      	beq.n	800513a <HAL_SPI_IRQHandler+0x66>
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	09db      	lsrs	r3, r3, #7
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d004      	beq.n	800513a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	4798      	blx	r3
    return;
 8005138:	e0c7      	b.n	80052ca <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10c      	bne.n	8005160 <HAL_SPI_IRQHandler+0x8c>
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	099b      	lsrs	r3, r3, #6
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	0a1b      	lsrs	r3, r3, #8
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 80b5 	beq.w	80052ca <HAL_SPI_IRQHandler+0x1f6>
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 80ae 	beq.w	80052ca <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	099b      	lsrs	r3, r3, #6
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d023      	beq.n	80051c2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b03      	cmp	r3, #3
 8005184:	d011      	beq.n	80051aa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518a:	f043 0204 	orr.w	r2, r3, #4
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	e00b      	b.n	80051c2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051aa:	2300      	movs	r3, #0
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	693b      	ldr	r3, [r7, #16]
        return;
 80051c0:	e083      	b.n	80052ca <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	095b      	lsrs	r3, r3, #5
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d014      	beq.n	80051f8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d2:	f043 0201 	orr.w	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	0a1b      	lsrs	r3, r3, #8
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00c      	beq.n	800521e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005208:	f043 0208 	orr.w	r2, r3, #8
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005210:	2300      	movs	r3, #0
 8005212:	60bb      	str	r3, [r7, #8]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	60bb      	str	r3, [r7, #8]
 800521c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005222:	2b00      	cmp	r3, #0
 8005224:	d050      	beq.n	80052c8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005234:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d104      	bne.n	8005252 <HAL_SPI_IRQHandler+0x17e>
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d034      	beq.n	80052bc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0203 	bic.w	r2, r2, #3
 8005260:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005266:	2b00      	cmp	r3, #0
 8005268:	d011      	beq.n	800528e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526e:	4a18      	ldr	r2, [pc, #96]	; (80052d0 <HAL_SPI_IRQHandler+0x1fc>)
 8005270:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005276:	4618      	mov	r0, r3
 8005278:	f7fd ffe6 	bl	8003248 <HAL_DMA_Abort_IT>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d005      	beq.n	800528e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005286:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005292:	2b00      	cmp	r3, #0
 8005294:	d017      	beq.n	80052c6 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800529a:	4a0d      	ldr	r2, [pc, #52]	; (80052d0 <HAL_SPI_IRQHandler+0x1fc>)
 800529c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fd ffd0 	bl	8003248 <HAL_DMA_Abort_IT>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80052ba:	e004      	b.n	80052c6 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80052c4:	e000      	b.n	80052c8 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 80052c6:	bf00      	nop
    return;
 80052c8:	bf00      	nop
  }
}
 80052ca:	3720      	adds	r7, #32
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	08005375 	.word	0x08005375

080052d4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005396:	bf00      	nop
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e04c      	b.n	800544c <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d111      	bne.n	80053e2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fc8e 	bl	8005ce8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d102      	bne.n	80053da <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a1f      	ldr	r2, [pc, #124]	; (8005454 <HAL_TIM_Base_Init+0xb4>)
 80053d8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3304      	adds	r3, #4
 80053f2:	4619      	mov	r1, r3
 80053f4:	4610      	mov	r0, r2
 80053f6:	f000 fb5d 	bl	8005ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	08002425 	.word	0x08002425

08005458 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b01      	cmp	r3, #1
 800546a:	d001      	beq.n	8005470 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e03c      	b.n	80054ea <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a1e      	ldr	r2, [pc, #120]	; (80054f8 <HAL_TIM_Base_Start+0xa0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d018      	beq.n	80054b4 <HAL_TIM_Base_Start+0x5c>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548a:	d013      	beq.n	80054b4 <HAL_TIM_Base_Start+0x5c>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a1a      	ldr	r2, [pc, #104]	; (80054fc <HAL_TIM_Base_Start+0xa4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00e      	beq.n	80054b4 <HAL_TIM_Base_Start+0x5c>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a19      	ldr	r2, [pc, #100]	; (8005500 <HAL_TIM_Base_Start+0xa8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d009      	beq.n	80054b4 <HAL_TIM_Base_Start+0x5c>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a17      	ldr	r2, [pc, #92]	; (8005504 <HAL_TIM_Base_Start+0xac>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d004      	beq.n	80054b4 <HAL_TIM_Base_Start+0x5c>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a16      	ldr	r2, [pc, #88]	; (8005508 <HAL_TIM_Base_Start+0xb0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d111      	bne.n	80054d8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b06      	cmp	r3, #6
 80054c4:	d010      	beq.n	80054e8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0201 	orr.w	r2, r2, #1
 80054d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d6:	e007      	b.n	80054e8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0201 	orr.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40010000 	.word	0x40010000
 80054fc:	40000400 	.word	0x40000400
 8005500:	40000800 	.word	0x40000800
 8005504:	40000c00 	.word	0x40000c00
 8005508:	40014000 	.word	0x40014000

0800550c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6a1a      	ldr	r2, [r3, #32]
 800551a:	f241 1311 	movw	r3, #4369	; 0x1111
 800551e:	4013      	ands	r3, r2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10f      	bne.n	8005544 <HAL_TIM_Base_Stop+0x38>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6a1a      	ldr	r2, [r3, #32]
 800552a:	f240 4344 	movw	r3, #1092	; 0x444
 800552e:	4013      	ands	r3, r2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d107      	bne.n	8005544 <HAL_TIM_Base_Stop+0x38>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0201 	bic.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
	...

0800555c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b01      	cmp	r3, #1
 800556e:	d001      	beq.n	8005574 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e044      	b.n	80055fe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0201 	orr.w	r2, r2, #1
 800558a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a1e      	ldr	r2, [pc, #120]	; (800560c <HAL_TIM_Base_Start_IT+0xb0>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d018      	beq.n	80055c8 <HAL_TIM_Base_Start_IT+0x6c>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800559e:	d013      	beq.n	80055c8 <HAL_TIM_Base_Start_IT+0x6c>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a1a      	ldr	r2, [pc, #104]	; (8005610 <HAL_TIM_Base_Start_IT+0xb4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00e      	beq.n	80055c8 <HAL_TIM_Base_Start_IT+0x6c>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a19      	ldr	r2, [pc, #100]	; (8005614 <HAL_TIM_Base_Start_IT+0xb8>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d009      	beq.n	80055c8 <HAL_TIM_Base_Start_IT+0x6c>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a17      	ldr	r2, [pc, #92]	; (8005618 <HAL_TIM_Base_Start_IT+0xbc>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d004      	beq.n	80055c8 <HAL_TIM_Base_Start_IT+0x6c>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a16      	ldr	r2, [pc, #88]	; (800561c <HAL_TIM_Base_Start_IT+0xc0>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d111      	bne.n	80055ec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b06      	cmp	r3, #6
 80055d8:	d010      	beq.n	80055fc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0201 	orr.w	r2, r2, #1
 80055e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ea:	e007      	b.n	80055fc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	40010000 	.word	0x40010000
 8005610:	40000400 	.word	0x40000400
 8005614:	40000800 	.word	0x40000800
 8005618:	40000c00 	.word	0x40000c00
 800561c:	40014000 	.word	0x40014000

08005620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b02      	cmp	r3, #2
 8005634:	d128      	bne.n	8005688 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b02      	cmp	r3, #2
 8005642:	d121      	bne.n	8005688 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0202 	mvn.w	r2, #2
 800564c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d005      	beq.n	800566e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	4798      	blx	r3
 800566c:	e009      	b.n	8005682 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b04      	cmp	r3, #4
 8005694:	d128      	bne.n	80056e8 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b04      	cmp	r3, #4
 80056a2:	d121      	bne.n	80056e8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f06f 0204 	mvn.w	r2, #4
 80056ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2202      	movs	r2, #2
 80056b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d005      	beq.n	80056ce <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	4798      	blx	r3
 80056cc:	e009      	b.n	80056e2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d128      	bne.n	8005748 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b08      	cmp	r3, #8
 8005702:	d121      	bne.n	8005748 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f06f 0208 	mvn.w	r2, #8
 800570c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2204      	movs	r2, #4
 8005712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f003 0303 	and.w	r3, r3, #3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d005      	beq.n	800572e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	4798      	blx	r3
 800572c:	e009      	b.n	8005742 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0310 	and.w	r3, r3, #16
 8005752:	2b10      	cmp	r3, #16
 8005754:	d128      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f003 0310 	and.w	r3, r3, #16
 8005760:	2b10      	cmp	r3, #16
 8005762:	d121      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0210 	mvn.w	r2, #16
 800576c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2208      	movs	r2, #8
 8005772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
 800578c:	e009      	b.n	80057a2 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d110      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d109      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 0201 	mvn.w	r2, #1
 80057cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e2:	2b80      	cmp	r3, #128	; 0x80
 80057e4:	d110      	bne.n	8005808 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f0:	2b80      	cmp	r3, #128	; 0x80
 80057f2:	d109      	bne.n	8005808 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005812:	2b40      	cmp	r3, #64	; 0x40
 8005814:	d110      	bne.n	8005838 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005820:	2b40      	cmp	r3, #64	; 0x40
 8005822:	d109      	bne.n	8005838 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800582c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b20      	cmp	r3, #32
 8005844:	d110      	bne.n	8005868 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f003 0320 	and.w	r3, r3, #32
 8005850:	2b20      	cmp	r3, #32
 8005852:	d109      	bne.n	8005868 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0220 	mvn.w	r2, #32
 800585c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005868:	bf00      	nop
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005884:	2b01      	cmp	r3, #1
 8005886:	d101      	bne.n	800588c <HAL_TIM_ConfigClockSource+0x1c>
 8005888:	2302      	movs	r3, #2
 800588a:	e0b4      	b.n	80059f6 <HAL_TIM_ConfigClockSource+0x186>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c4:	d03e      	beq.n	8005944 <HAL_TIM_ConfigClockSource+0xd4>
 80058c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ca:	f200 8087 	bhi.w	80059dc <HAL_TIM_ConfigClockSource+0x16c>
 80058ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d2:	f000 8086 	beq.w	80059e2 <HAL_TIM_ConfigClockSource+0x172>
 80058d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058da:	d87f      	bhi.n	80059dc <HAL_TIM_ConfigClockSource+0x16c>
 80058dc:	2b70      	cmp	r3, #112	; 0x70
 80058de:	d01a      	beq.n	8005916 <HAL_TIM_ConfigClockSource+0xa6>
 80058e0:	2b70      	cmp	r3, #112	; 0x70
 80058e2:	d87b      	bhi.n	80059dc <HAL_TIM_ConfigClockSource+0x16c>
 80058e4:	2b60      	cmp	r3, #96	; 0x60
 80058e6:	d050      	beq.n	800598a <HAL_TIM_ConfigClockSource+0x11a>
 80058e8:	2b60      	cmp	r3, #96	; 0x60
 80058ea:	d877      	bhi.n	80059dc <HAL_TIM_ConfigClockSource+0x16c>
 80058ec:	2b50      	cmp	r3, #80	; 0x50
 80058ee:	d03c      	beq.n	800596a <HAL_TIM_ConfigClockSource+0xfa>
 80058f0:	2b50      	cmp	r3, #80	; 0x50
 80058f2:	d873      	bhi.n	80059dc <HAL_TIM_ConfigClockSource+0x16c>
 80058f4:	2b40      	cmp	r3, #64	; 0x40
 80058f6:	d058      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0x13a>
 80058f8:	2b40      	cmp	r3, #64	; 0x40
 80058fa:	d86f      	bhi.n	80059dc <HAL_TIM_ConfigClockSource+0x16c>
 80058fc:	2b30      	cmp	r3, #48	; 0x30
 80058fe:	d064      	beq.n	80059ca <HAL_TIM_ConfigClockSource+0x15a>
 8005900:	2b30      	cmp	r3, #48	; 0x30
 8005902:	d86b      	bhi.n	80059dc <HAL_TIM_ConfigClockSource+0x16c>
 8005904:	2b20      	cmp	r3, #32
 8005906:	d060      	beq.n	80059ca <HAL_TIM_ConfigClockSource+0x15a>
 8005908:	2b20      	cmp	r3, #32
 800590a:	d867      	bhi.n	80059dc <HAL_TIM_ConfigClockSource+0x16c>
 800590c:	2b00      	cmp	r3, #0
 800590e:	d05c      	beq.n	80059ca <HAL_TIM_ConfigClockSource+0x15a>
 8005910:	2b10      	cmp	r3, #16
 8005912:	d05a      	beq.n	80059ca <HAL_TIM_ConfigClockSource+0x15a>
 8005914:	e062      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6818      	ldr	r0, [r3, #0]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	6899      	ldr	r1, [r3, #8]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f000 f9bf 	bl	8005ca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005938:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	609a      	str	r2, [r3, #8]
      break;
 8005942:	e04f      	b.n	80059e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6818      	ldr	r0, [r3, #0]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	6899      	ldr	r1, [r3, #8]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f000 f9a8 	bl	8005ca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005966:	609a      	str	r2, [r3, #8]
      break;
 8005968:	e03c      	b.n	80059e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6818      	ldr	r0, [r3, #0]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	6859      	ldr	r1, [r3, #4]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	461a      	mov	r2, r3
 8005978:	f000 f91c 	bl	8005bb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2150      	movs	r1, #80	; 0x50
 8005982:	4618      	mov	r0, r3
 8005984:	f000 f975 	bl	8005c72 <TIM_ITRx_SetConfig>
      break;
 8005988:	e02c      	b.n	80059e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	6859      	ldr	r1, [r3, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	461a      	mov	r2, r3
 8005998:	f000 f93b 	bl	8005c12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2160      	movs	r1, #96	; 0x60
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 f965 	bl	8005c72 <TIM_ITRx_SetConfig>
      break;
 80059a8:	e01c      	b.n	80059e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	6859      	ldr	r1, [r3, #4]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	461a      	mov	r2, r3
 80059b8:	f000 f8fc 	bl	8005bb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2140      	movs	r1, #64	; 0x40
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 f955 	bl	8005c72 <TIM_ITRx_SetConfig>
      break;
 80059c8:	e00c      	b.n	80059e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4619      	mov	r1, r3
 80059d4:	4610      	mov	r0, r2
 80059d6:	f000 f94c 	bl	8005c72 <TIM_ITRx_SetConfig>
      break;
 80059da:	e003      	b.n	80059e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	73fb      	strb	r3, [r7, #15]
      break;
 80059e0:	e000      	b.n	80059e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005a6a:	bf00      	nop
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a7e:	bf00      	nop
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b083      	sub	sp, #12
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005a92:	bf00      	nop
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
	...

08005ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a34      	ldr	r2, [pc, #208]	; (8005b98 <TIM_Base_SetConfig+0xe4>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00f      	beq.n	8005aec <TIM_Base_SetConfig+0x38>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad2:	d00b      	beq.n	8005aec <TIM_Base_SetConfig+0x38>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a31      	ldr	r2, [pc, #196]	; (8005b9c <TIM_Base_SetConfig+0xe8>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d007      	beq.n	8005aec <TIM_Base_SetConfig+0x38>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a30      	ldr	r2, [pc, #192]	; (8005ba0 <TIM_Base_SetConfig+0xec>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d003      	beq.n	8005aec <TIM_Base_SetConfig+0x38>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a2f      	ldr	r2, [pc, #188]	; (8005ba4 <TIM_Base_SetConfig+0xf0>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d108      	bne.n	8005afe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a25      	ldr	r2, [pc, #148]	; (8005b98 <TIM_Base_SetConfig+0xe4>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d01b      	beq.n	8005b3e <TIM_Base_SetConfig+0x8a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0c:	d017      	beq.n	8005b3e <TIM_Base_SetConfig+0x8a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a22      	ldr	r2, [pc, #136]	; (8005b9c <TIM_Base_SetConfig+0xe8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d013      	beq.n	8005b3e <TIM_Base_SetConfig+0x8a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a21      	ldr	r2, [pc, #132]	; (8005ba0 <TIM_Base_SetConfig+0xec>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d00f      	beq.n	8005b3e <TIM_Base_SetConfig+0x8a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a20      	ldr	r2, [pc, #128]	; (8005ba4 <TIM_Base_SetConfig+0xf0>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d00b      	beq.n	8005b3e <TIM_Base_SetConfig+0x8a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a1f      	ldr	r2, [pc, #124]	; (8005ba8 <TIM_Base_SetConfig+0xf4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d007      	beq.n	8005b3e <TIM_Base_SetConfig+0x8a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a1e      	ldr	r2, [pc, #120]	; (8005bac <TIM_Base_SetConfig+0xf8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d003      	beq.n	8005b3e <TIM_Base_SetConfig+0x8a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a1d      	ldr	r2, [pc, #116]	; (8005bb0 <TIM_Base_SetConfig+0xfc>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d108      	bne.n	8005b50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a08      	ldr	r2, [pc, #32]	; (8005b98 <TIM_Base_SetConfig+0xe4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d103      	bne.n	8005b84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	691a      	ldr	r2, [r3, #16]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	615a      	str	r2, [r3, #20]
}
 8005b8a:	bf00      	nop
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	40010000 	.word	0x40010000
 8005b9c:	40000400 	.word	0x40000400
 8005ba0:	40000800 	.word	0x40000800
 8005ba4:	40000c00 	.word	0x40000c00
 8005ba8:	40014000 	.word	0x40014000
 8005bac:	40014400 	.word	0x40014400
 8005bb0:	40014800 	.word	0x40014800

08005bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	f023 0201 	bic.w	r2, r3, #1
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f023 030a 	bic.w	r3, r3, #10
 8005bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	621a      	str	r2, [r3, #32]
}
 8005c06:	bf00      	nop
 8005c08:	371c      	adds	r7, #28
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b087      	sub	sp, #28
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	60f8      	str	r0, [r7, #12]
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	f023 0210 	bic.w	r2, r3, #16
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	031b      	lsls	r3, r3, #12
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	621a      	str	r2, [r3, #32]
}
 8005c66:	bf00      	nop
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b085      	sub	sp, #20
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f043 0307 	orr.w	r3, r3, #7
 8005c94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	609a      	str	r2, [r3, #8]
}
 8005c9c:	bf00      	nop
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
 8005cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	021a      	lsls	r2, r3, #8
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	609a      	str	r2, [r3, #8]
}
 8005cdc:	bf00      	nop
 8005cde:	371c      	adds	r7, #28
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a1c      	ldr	r2, [pc, #112]	; (8005d64 <TIM_ResetCallback+0x7c>)
 8005cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a1b      	ldr	r2, [pc, #108]	; (8005d68 <TIM_ResetCallback+0x80>)
 8005cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a1a      	ldr	r2, [pc, #104]	; (8005d6c <TIM_ResetCallback+0x84>)
 8005d04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a19      	ldr	r2, [pc, #100]	; (8005d70 <TIM_ResetCallback+0x88>)
 8005d0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a18      	ldr	r2, [pc, #96]	; (8005d74 <TIM_ResetCallback+0x8c>)
 8005d14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a17      	ldr	r2, [pc, #92]	; (8005d78 <TIM_ResetCallback+0x90>)
 8005d1c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a16      	ldr	r2, [pc, #88]	; (8005d7c <TIM_ResetCallback+0x94>)
 8005d24:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a15      	ldr	r2, [pc, #84]	; (8005d80 <TIM_ResetCallback+0x98>)
 8005d2c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a14      	ldr	r2, [pc, #80]	; (8005d84 <TIM_ResetCallback+0x9c>)
 8005d34:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a13      	ldr	r2, [pc, #76]	; (8005d88 <TIM_ResetCallback+0xa0>)
 8005d3c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a12      	ldr	r2, [pc, #72]	; (8005d8c <TIM_ResetCallback+0xa4>)
 8005d44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a11      	ldr	r2, [pc, #68]	; (8005d90 <TIM_ResetCallback+0xa8>)
 8005d4c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a10      	ldr	r2, [pc, #64]	; (8005d94 <TIM_ResetCallback+0xac>)
 8005d54:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	08001ac5 	.word	0x08001ac5
 8005d68:	080059ff 	.word	0x080059ff
 8005d6c:	08005a77 	.word	0x08005a77
 8005d70:	08005a8b 	.word	0x08005a8b
 8005d74:	08005a27 	.word	0x08005a27
 8005d78:	08005a3b 	.word	0x08005a3b
 8005d7c:	08005a13 	.word	0x08005a13
 8005d80:	08005a4f 	.word	0x08005a4f
 8005d84:	08005a63 	.word	0x08005a63
 8005d88:	08005a9f 	.word	0x08005a9f
 8005d8c:	08005e75 	.word	0x08005e75
 8005d90:	08005e89 	.word	0x08005e89
 8005d94:	08005e9d 	.word	0x08005e9d

08005d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d101      	bne.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dac:	2302      	movs	r3, #2
 8005dae:	e050      	b.n	8005e52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a1c      	ldr	r2, [pc, #112]	; (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d018      	beq.n	8005e26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfc:	d013      	beq.n	8005e26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a18      	ldr	r2, [pc, #96]	; (8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d00e      	beq.n	8005e26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a16      	ldr	r2, [pc, #88]	; (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d009      	beq.n	8005e26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a15      	ldr	r2, [pc, #84]	; (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d004      	beq.n	8005e26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a13      	ldr	r2, [pc, #76]	; (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d10c      	bne.n	8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	40010000 	.word	0x40010000
 8005e64:	40000400 	.word	0x40000400
 8005e68:	40000800 	.word	0x40000800
 8005e6c:	40000c00 	.word	0x40000c00
 8005e70:	40014000 	.word	0x40014000

08005e74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e04a      	b.n	8005f58 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d111      	bne.n	8005ef2 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fba6 	bl	8006628 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d102      	bne.n	8005eea <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a1e      	ldr	r2, [pc, #120]	; (8005f60 <HAL_UART_Init+0xb0>)
 8005ee8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2224      	movs	r2, #36	; 0x24
 8005ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f08:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fd62 	bl	80069d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f1e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695a      	ldr	r2, [r3, #20]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f2e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f3e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	0800259d 	.word	0x0800259d

08005f64 <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e062      	b.n	800603e <HAL_LIN_Init+0xda>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d111      	bne.n	8005fa8 <HAL_LIN_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fb4b 	bl	8006628 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d102      	bne.n	8005fa0 <HAL_LIN_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a2a      	ldr	r2, [pc, #168]	; (8006048 <HAL_LIN_Init+0xe4>)
 8005f9e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2224      	movs	r2, #36	; 0x24
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fd07 	bl	80069d4 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	691a      	ldr	r2, [r3, #16]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	695a      	ldr	r2, [r3, #20]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fe4:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	691a      	ldr	r2, [r3, #16]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ff4:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	691a      	ldr	r2, [r3, #16]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0220 	bic.w	r2, r2, #32
 8006004:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6919      	ldr	r1, [r3, #16]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2220      	movs	r2, #32
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	0800259d 	.word	0x0800259d

0800604c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b0ba      	sub	sp, #232	; 0xe8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006072:	2300      	movs	r3, #0
 8006074:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006078:	2300      	movs	r3, #0
 800607a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800607e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006082:	f003 030f 	and.w	r3, r3, #15
 8006086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800608a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10f      	bne.n	80060b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006096:	f003 0320 	and.w	r3, r3, #32
 800609a:	2b00      	cmp	r3, #0
 800609c:	d009      	beq.n	80060b2 <HAL_UART_IRQHandler+0x66>
 800609e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a2:	f003 0320 	and.w	r3, r3, #32
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d003      	beq.n	80060b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fbd5 	bl	800685a <UART_Receive_IT>
      return;
 80060b0:	e25b      	b.n	800656a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80060b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 80e1 	beq.w	800627e <HAL_UART_IRQHandler+0x232>
 80060bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d106      	bne.n	80060d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 80d4 	beq.w	800627e <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00b      	beq.n	80060fa <HAL_UART_IRQHandler+0xae>
 80060e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d005      	beq.n	80060fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f043 0201 	orr.w	r2, r3, #1
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060fe:	f003 0304 	and.w	r3, r3, #4
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00b      	beq.n	800611e <HAL_UART_IRQHandler+0xd2>
 8006106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d005      	beq.n	800611e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	f043 0202 	orr.w	r2, r3, #2
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800611e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00b      	beq.n	8006142 <HAL_UART_IRQHandler+0xf6>
 800612a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d005      	beq.n	8006142 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613a:	f043 0204 	orr.w	r2, r3, #4
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006146:	f003 0308 	and.w	r3, r3, #8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d011      	beq.n	8006172 <HAL_UART_IRQHandler+0x126>
 800614e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b00      	cmp	r3, #0
 8006158:	d105      	bne.n	8006166 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800615a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d005      	beq.n	8006172 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	f043 0208 	orr.w	r2, r3, #8
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	2b00      	cmp	r3, #0
 8006178:	f000 81f2 	beq.w	8006560 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800617c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006180:	f003 0320 	and.w	r3, r3, #32
 8006184:	2b00      	cmp	r3, #0
 8006186:	d008      	beq.n	800619a <HAL_UART_IRQHandler+0x14e>
 8006188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800618c:	f003 0320 	and.w	r3, r3, #32
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fb60 	bl	800685a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a4:	2b40      	cmp	r3, #64	; 0x40
 80061a6:	bf0c      	ite	eq
 80061a8:	2301      	moveq	r3, #1
 80061aa:	2300      	movne	r3, #0
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d103      	bne.n	80061c6 <HAL_UART_IRQHandler+0x17a>
 80061be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d051      	beq.n	800626a <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fa66 	bl	8006698 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d6:	2b40      	cmp	r3, #64	; 0x40
 80061d8:	d142      	bne.n	8006260 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3314      	adds	r3, #20
 80061e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061e8:	e853 3f00 	ldrex	r3, [r3]
 80061ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3314      	adds	r3, #20
 8006202:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006206:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800620a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006212:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006216:	e841 2300 	strex	r3, r2, [r1]
 800621a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800621e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1d9      	bne.n	80061da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622a:	2b00      	cmp	r3, #0
 800622c:	d013      	beq.n	8006256 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006232:	4a7f      	ldr	r2, [pc, #508]	; (8006430 <HAL_UART_IRQHandler+0x3e4>)
 8006234:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623a:	4618      	mov	r0, r3
 800623c:	f7fd f804 	bl	8003248 <HAL_DMA_Abort_IT>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d019      	beq.n	800627a <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006250:	4610      	mov	r0, r2
 8006252:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006254:	e011      	b.n	800627a <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800625e:	e00c      	b.n	800627a <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006268:	e007      	b.n	800627a <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006278:	e172      	b.n	8006560 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800627a:	bf00      	nop
    return;
 800627c:	e170      	b.n	8006560 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006282:	2b01      	cmp	r3, #1
 8006284:	f040 814c 	bne.w	8006520 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800628c:	f003 0310 	and.w	r3, r3, #16
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 8145 	beq.w	8006520 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800629a:	f003 0310 	and.w	r3, r3, #16
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 813e 	beq.w	8006520 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062a4:	2300      	movs	r3, #0
 80062a6:	60bb      	str	r3, [r7, #8]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	60bb      	str	r3, [r7, #8]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	60bb      	str	r3, [r7, #8]
 80062b8:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c4:	2b40      	cmp	r3, #64	; 0x40
 80062c6:	f040 80b5 	bne.w	8006434 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 8142 	beq.w	8006564 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062e8:	429a      	cmp	r2, r3
 80062ea:	f080 813b 	bcs.w	8006564 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062f4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006300:	f000 8088 	beq.w	8006414 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	330c      	adds	r3, #12
 800630a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006312:	e853 3f00 	ldrex	r3, [r3]
 8006316:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800631a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800631e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006322:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	330c      	adds	r3, #12
 800632c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006330:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006334:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800633c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006340:	e841 2300 	strex	r3, r2, [r1]
 8006344:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006348:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1d9      	bne.n	8006304 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3314      	adds	r3, #20
 8006356:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006360:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006362:	f023 0301 	bic.w	r3, r3, #1
 8006366:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3314      	adds	r3, #20
 8006370:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006374:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006378:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800637c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006380:	e841 2300 	strex	r3, r2, [r1]
 8006384:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006386:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1e1      	bne.n	8006350 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3314      	adds	r3, #20
 8006392:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006394:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006396:	e853 3f00 	ldrex	r3, [r3]
 800639a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800639c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800639e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3314      	adds	r3, #20
 80063ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063b8:	e841 2300 	strex	r3, r2, [r1]
 80063bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1e3      	bne.n	800638c <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	330c      	adds	r3, #12
 80063d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063dc:	e853 3f00 	ldrex	r3, [r3]
 80063e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063e4:	f023 0310 	bic.w	r3, r3, #16
 80063e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	330c      	adds	r3, #12
 80063f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80063f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80063f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063fe:	e841 2300 	strex	r3, r2, [r1]
 8006402:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1e3      	bne.n	80063d2 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640e:	4618      	mov	r0, r3
 8006410:	f7fc feaa 	bl	8003168 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8006420:	b292      	uxth	r2, r2
 8006422:	1a8a      	subs	r2, r1, r2
 8006424:	b292      	uxth	r2, r2
 8006426:	4611      	mov	r1, r2
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800642c:	e09a      	b.n	8006564 <HAL_UART_IRQHandler+0x518>
 800642e:	bf00      	nop
 8006430:	0800675f 	.word	0x0800675f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800643c:	b29b      	uxth	r3, r3
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006448:	b29b      	uxth	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 808c 	beq.w	8006568 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006450:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 8087 	beq.w	8006568 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	330c      	adds	r3, #12
 8006460:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800646a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006470:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	330c      	adds	r3, #12
 800647a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800647e:	647a      	str	r2, [r7, #68]	; 0x44
 8006480:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006484:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006486:	e841 2300 	strex	r3, r2, [r1]
 800648a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800648c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1e3      	bne.n	800645a <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3314      	adds	r3, #20
 8006498:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	e853 3f00 	ldrex	r3, [r3]
 80064a0:	623b      	str	r3, [r7, #32]
   return(result);
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	f023 0301 	bic.w	r3, r3, #1
 80064a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3314      	adds	r3, #20
 80064b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064b6:	633a      	str	r2, [r7, #48]	; 0x30
 80064b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e3      	bne.n	8006492 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	330c      	adds	r3, #12
 80064de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	e853 3f00 	ldrex	r3, [r3]
 80064e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f023 0310 	bic.w	r3, r3, #16
 80064ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	330c      	adds	r3, #12
 80064f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80064fc:	61fa      	str	r2, [r7, #28]
 80064fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006500:	69b9      	ldr	r1, [r7, #24]
 8006502:	69fa      	ldr	r2, [r7, #28]
 8006504:	e841 2300 	strex	r3, r2, [r1]
 8006508:	617b      	str	r3, [r7, #20]
   return(result);
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e3      	bne.n	80064d8 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006514:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8006518:	4611      	mov	r1, r2
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800651e:	e023      	b.n	8006568 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006528:	2b00      	cmp	r3, #0
 800652a:	d009      	beq.n	8006540 <HAL_UART_IRQHandler+0x4f4>
 800652c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f925 	bl	8006788 <UART_Transmit_IT>
    return;
 800653e:	e014      	b.n	800656a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00e      	beq.n	800656a <HAL_UART_IRQHandler+0x51e>
 800654c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006554:	2b00      	cmp	r3, #0
 8006556:	d008      	beq.n	800656a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f965 	bl	8006828 <UART_EndTransmit_IT>
    return;
 800655e:	e004      	b.n	800656a <HAL_UART_IRQHandler+0x51e>
    return;
 8006560:	bf00      	nop
 8006562:	e002      	b.n	800656a <HAL_UART_IRQHandler+0x51e>
      return;
 8006564:	bf00      	nop
 8006566:	e000      	b.n	800656a <HAL_UART_IRQHandler+0x51e>
      return;
 8006568:	bf00      	nop
  }
}
 800656a:	37e8      	adds	r7, #232	; 0xe8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	460b      	mov	r3, r1
 800661a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a10      	ldr	r2, [pc, #64]	; (8006674 <UART_InitCallbacksToDefault+0x4c>)
 8006634:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a0f      	ldr	r2, [pc, #60]	; (8006678 <UART_InitCallbacksToDefault+0x50>)
 800663a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a0f      	ldr	r2, [pc, #60]	; (800667c <UART_InitCallbacksToDefault+0x54>)
 8006640:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a0e      	ldr	r2, [pc, #56]	; (8006680 <UART_InitCallbacksToDefault+0x58>)
 8006646:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a0e      	ldr	r2, [pc, #56]	; (8006684 <UART_InitCallbacksToDefault+0x5c>)
 800664c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a0d      	ldr	r2, [pc, #52]	; (8006688 <UART_InitCallbacksToDefault+0x60>)
 8006652:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a0d      	ldr	r2, [pc, #52]	; (800668c <UART_InitCallbacksToDefault+0x64>)
 8006658:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a0c      	ldr	r2, [pc, #48]	; (8006690 <UART_InitCallbacksToDefault+0x68>)
 800665e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a0c      	ldr	r2, [pc, #48]	; (8006694 <UART_InitCallbacksToDefault+0x6c>)
 8006664:	669a      	str	r2, [r3, #104]	; 0x68

}
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	08006585 	.word	0x08006585
 8006678:	08006571 	.word	0x08006571
 800667c:	080065ad 	.word	0x080065ad
 8006680:	08006599 	.word	0x08006599
 8006684:	080065c1 	.word	0x080065c1
 8006688:	080065d5 	.word	0x080065d5
 800668c:	080065e9 	.word	0x080065e9
 8006690:	080065fd 	.word	0x080065fd
 8006694:	08006611 	.word	0x08006611

08006698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006698:	b480      	push	{r7}
 800669a:	b095      	sub	sp, #84	; 0x54
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	330c      	adds	r3, #12
 80066a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066aa:	e853 3f00 	ldrex	r3, [r3]
 80066ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	330c      	adds	r3, #12
 80066be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066c0:	643a      	str	r2, [r7, #64]	; 0x40
 80066c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066c8:	e841 2300 	strex	r3, r2, [r1]
 80066cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1e5      	bne.n	80066a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3314      	adds	r3, #20
 80066da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	f023 0301 	bic.w	r3, r3, #1
 80066ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3314      	adds	r3, #20
 80066f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066fc:	e841 2300 	strex	r3, r2, [r1]
 8006700:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e5      	bne.n	80066d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670c:	2b01      	cmp	r3, #1
 800670e:	d119      	bne.n	8006744 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	330c      	adds	r3, #12
 8006716:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	e853 3f00 	ldrex	r3, [r3]
 800671e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f023 0310 	bic.w	r3, r3, #16
 8006726:	647b      	str	r3, [r7, #68]	; 0x44
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	330c      	adds	r3, #12
 800672e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006730:	61ba      	str	r2, [r7, #24]
 8006732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006734:	6979      	ldr	r1, [r7, #20]
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	e841 2300 	strex	r3, r2, [r1]
 800673c:	613b      	str	r3, [r7, #16]
   return(result);
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1e5      	bne.n	8006710 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2220      	movs	r2, #32
 8006748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006752:	bf00      	nop
 8006754:	3754      	adds	r7, #84	; 0x54
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b084      	sub	sp, #16
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006780:	bf00      	nop
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b21      	cmp	r3, #33	; 0x21
 800679a:	d13e      	bne.n	800681a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a4:	d114      	bne.n	80067d0 <UART_Transmit_IT+0x48>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d110      	bne.n	80067d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	1c9a      	adds	r2, r3, #2
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	621a      	str	r2, [r3, #32]
 80067ce:	e008      	b.n	80067e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	1c59      	adds	r1, r3, #1
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	6211      	str	r1, [r2, #32]
 80067da:	781a      	ldrb	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	4619      	mov	r1, r3
 80067f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10f      	bne.n	8006816 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68da      	ldr	r2, [r3, #12]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006804:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68da      	ldr	r2, [r3, #12]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006814:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	e000      	b.n	800681c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800681a:	2302      	movs	r3, #2
  }
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800683e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2220      	movs	r2, #32
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b08c      	sub	sp, #48	; 0x30
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b22      	cmp	r3, #34	; 0x22
 800686c:	f040 80ad 	bne.w	80069ca <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006878:	d117      	bne.n	80068aa <UART_Receive_IT+0x50>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d113      	bne.n	80068aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006882:	2300      	movs	r3, #0
 8006884:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	b29b      	uxth	r3, r3
 8006894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006898:	b29a      	uxth	r2, r3
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a2:	1c9a      	adds	r2, r3, #2
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	629a      	str	r2, [r3, #40]	; 0x28
 80068a8:	e026      	b.n	80068f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80068b0:	2300      	movs	r3, #0
 80068b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068bc:	d007      	beq.n	80068ce <UART_Receive_IT+0x74>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10a      	bne.n	80068dc <UART_Receive_IT+0x82>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d106      	bne.n	80068dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d8:	701a      	strb	r2, [r3, #0]
 80068da:	e008      	b.n	80068ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29b      	uxth	r3, r3
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	4619      	mov	r1, r3
 8006906:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006908:	2b00      	cmp	r3, #0
 800690a:	d15c      	bne.n	80069c6 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0220 	bic.w	r2, r2, #32
 800691a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68da      	ldr	r2, [r3, #12]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800692a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	695a      	ldr	r2, [r3, #20]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 0201 	bic.w	r2, r2, #1
 800693a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2220      	movs	r2, #32
 8006940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006948:	2b01      	cmp	r3, #1
 800694a:	d136      	bne.n	80069ba <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	330c      	adds	r3, #12
 8006958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	613b      	str	r3, [r7, #16]
   return(result);
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f023 0310 	bic.w	r3, r3, #16
 8006968:	627b      	str	r3, [r7, #36]	; 0x24
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	330c      	adds	r3, #12
 8006970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006972:	623a      	str	r2, [r7, #32]
 8006974:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	69f9      	ldr	r1, [r7, #28]
 8006978:	6a3a      	ldr	r2, [r7, #32]
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e5      	bne.n	8006952 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0310 	and.w	r3, r3, #16
 8006990:	2b10      	cmp	r3, #16
 8006992:	d10a      	bne.n	80069aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006994:	2300      	movs	r3, #0
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	60fb      	str	r3, [r7, #12]
 80069a8:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80069b2:	4611      	mov	r1, r2
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	4798      	blx	r3
 80069b8:	e003      	b.n	80069c2 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e002      	b.n	80069cc <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	e000      	b.n	80069cc <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 80069ca:	2302      	movs	r3, #2
  }
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3730      	adds	r7, #48	; 0x30
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069d8:	b0c0      	sub	sp, #256	; 0x100
 80069da:	af00      	add	r7, sp, #0
 80069dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80069ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f0:	68d9      	ldr	r1, [r3, #12]
 80069f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	ea40 0301 	orr.w	r3, r0, r1
 80069fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	431a      	orrs	r2, r3
 8006a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a2c:	f021 010c 	bic.w	r1, r1, #12
 8006a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a3a:	430b      	orrs	r3, r1
 8006a3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a4e:	6999      	ldr	r1, [r3, #24]
 8006a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	ea40 0301 	orr.w	r3, r0, r1
 8006a5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	4b8f      	ldr	r3, [pc, #572]	; (8006ca0 <UART_SetConfig+0x2cc>)
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d005      	beq.n	8006a74 <UART_SetConfig+0xa0>
 8006a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	4b8d      	ldr	r3, [pc, #564]	; (8006ca4 <UART_SetConfig+0x2d0>)
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d104      	bne.n	8006a7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a74:	f7fd fce2 	bl	800443c <HAL_RCC_GetPCLK2Freq>
 8006a78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a7c:	e003      	b.n	8006a86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a7e:	f7fd fcc9 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 8006a82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a90:	f040 810c 	bne.w	8006cac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006aa2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006aa6:	4622      	mov	r2, r4
 8006aa8:	462b      	mov	r3, r5
 8006aaa:	1891      	adds	r1, r2, r2
 8006aac:	65b9      	str	r1, [r7, #88]	; 0x58
 8006aae:	415b      	adcs	r3, r3
 8006ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ab2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	eb12 0801 	adds.w	r8, r2, r1
 8006abc:	4629      	mov	r1, r5
 8006abe:	eb43 0901 	adc.w	r9, r3, r1
 8006ac2:	f04f 0200 	mov.w	r2, #0
 8006ac6:	f04f 0300 	mov.w	r3, #0
 8006aca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ace:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ad2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ad6:	4690      	mov	r8, r2
 8006ad8:	4699      	mov	r9, r3
 8006ada:	4623      	mov	r3, r4
 8006adc:	eb18 0303 	adds.w	r3, r8, r3
 8006ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ae4:	462b      	mov	r3, r5
 8006ae6:	eb49 0303 	adc.w	r3, r9, r3
 8006aea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006afa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006afe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006b02:	460b      	mov	r3, r1
 8006b04:	18db      	adds	r3, r3, r3
 8006b06:	653b      	str	r3, [r7, #80]	; 0x50
 8006b08:	4613      	mov	r3, r2
 8006b0a:	eb42 0303 	adc.w	r3, r2, r3
 8006b0e:	657b      	str	r3, [r7, #84]	; 0x54
 8006b10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006b14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006b18:	f7f9 fb62 	bl	80001e0 <__aeabi_uldivmod>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4b61      	ldr	r3, [pc, #388]	; (8006ca8 <UART_SetConfig+0x2d4>)
 8006b22:	fba3 2302 	umull	r2, r3, r3, r2
 8006b26:	095b      	lsrs	r3, r3, #5
 8006b28:	011c      	lsls	r4, r3, #4
 8006b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b3c:	4642      	mov	r2, r8
 8006b3e:	464b      	mov	r3, r9
 8006b40:	1891      	adds	r1, r2, r2
 8006b42:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b44:	415b      	adcs	r3, r3
 8006b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b4c:	4641      	mov	r1, r8
 8006b4e:	eb12 0a01 	adds.w	sl, r2, r1
 8006b52:	4649      	mov	r1, r9
 8006b54:	eb43 0b01 	adc.w	fp, r3, r1
 8006b58:	f04f 0200 	mov.w	r2, #0
 8006b5c:	f04f 0300 	mov.w	r3, #0
 8006b60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b6c:	4692      	mov	sl, r2
 8006b6e:	469b      	mov	fp, r3
 8006b70:	4643      	mov	r3, r8
 8006b72:	eb1a 0303 	adds.w	r3, sl, r3
 8006b76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b7a:	464b      	mov	r3, r9
 8006b7c:	eb4b 0303 	adc.w	r3, fp, r3
 8006b80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	18db      	adds	r3, r3, r3
 8006b9c:	643b      	str	r3, [r7, #64]	; 0x40
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	eb42 0303 	adc.w	r3, r2, r3
 8006ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ba6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006baa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006bae:	f7f9 fb17 	bl	80001e0 <__aeabi_uldivmod>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	4b3b      	ldr	r3, [pc, #236]	; (8006ca8 <UART_SetConfig+0x2d4>)
 8006bba:	fba3 2301 	umull	r2, r3, r3, r1
 8006bbe:	095b      	lsrs	r3, r3, #5
 8006bc0:	2264      	movs	r2, #100	; 0x64
 8006bc2:	fb02 f303 	mul.w	r3, r2, r3
 8006bc6:	1acb      	subs	r3, r1, r3
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006bce:	4b36      	ldr	r3, [pc, #216]	; (8006ca8 <UART_SetConfig+0x2d4>)
 8006bd0:	fba3 2302 	umull	r2, r3, r3, r2
 8006bd4:	095b      	lsrs	r3, r3, #5
 8006bd6:	005b      	lsls	r3, r3, #1
 8006bd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bdc:	441c      	add	r4, r3
 8006bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006be8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006bec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006bf0:	4642      	mov	r2, r8
 8006bf2:	464b      	mov	r3, r9
 8006bf4:	1891      	adds	r1, r2, r2
 8006bf6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006bf8:	415b      	adcs	r3, r3
 8006bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c00:	4641      	mov	r1, r8
 8006c02:	1851      	adds	r1, r2, r1
 8006c04:	6339      	str	r1, [r7, #48]	; 0x30
 8006c06:	4649      	mov	r1, r9
 8006c08:	414b      	adcs	r3, r1
 8006c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	f04f 0300 	mov.w	r3, #0
 8006c14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006c18:	4659      	mov	r1, fp
 8006c1a:	00cb      	lsls	r3, r1, #3
 8006c1c:	4651      	mov	r1, sl
 8006c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c22:	4651      	mov	r1, sl
 8006c24:	00ca      	lsls	r2, r1, #3
 8006c26:	4610      	mov	r0, r2
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	4642      	mov	r2, r8
 8006c2e:	189b      	adds	r3, r3, r2
 8006c30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c34:	464b      	mov	r3, r9
 8006c36:	460a      	mov	r2, r1
 8006c38:	eb42 0303 	adc.w	r3, r2, r3
 8006c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c54:	460b      	mov	r3, r1
 8006c56:	18db      	adds	r3, r3, r3
 8006c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	eb42 0303 	adc.w	r3, r2, r3
 8006c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c6a:	f7f9 fab9 	bl	80001e0 <__aeabi_uldivmod>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4b0d      	ldr	r3, [pc, #52]	; (8006ca8 <UART_SetConfig+0x2d4>)
 8006c74:	fba3 1302 	umull	r1, r3, r3, r2
 8006c78:	095b      	lsrs	r3, r3, #5
 8006c7a:	2164      	movs	r1, #100	; 0x64
 8006c7c:	fb01 f303 	mul.w	r3, r1, r3
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	3332      	adds	r3, #50	; 0x32
 8006c86:	4a08      	ldr	r2, [pc, #32]	; (8006ca8 <UART_SetConfig+0x2d4>)
 8006c88:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8c:	095b      	lsrs	r3, r3, #5
 8006c8e:	f003 0207 	and.w	r2, r3, #7
 8006c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4422      	add	r2, r4
 8006c9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c9c:	e105      	b.n	8006eaa <UART_SetConfig+0x4d6>
 8006c9e:	bf00      	nop
 8006ca0:	40011000 	.word	0x40011000
 8006ca4:	40011400 	.word	0x40011400
 8006ca8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006cb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006cba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006cbe:	4642      	mov	r2, r8
 8006cc0:	464b      	mov	r3, r9
 8006cc2:	1891      	adds	r1, r2, r2
 8006cc4:	6239      	str	r1, [r7, #32]
 8006cc6:	415b      	adcs	r3, r3
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8006cca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cce:	4641      	mov	r1, r8
 8006cd0:	1854      	adds	r4, r2, r1
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	eb43 0501 	adc.w	r5, r3, r1
 8006cd8:	f04f 0200 	mov.w	r2, #0
 8006cdc:	f04f 0300 	mov.w	r3, #0
 8006ce0:	00eb      	lsls	r3, r5, #3
 8006ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ce6:	00e2      	lsls	r2, r4, #3
 8006ce8:	4614      	mov	r4, r2
 8006cea:	461d      	mov	r5, r3
 8006cec:	4643      	mov	r3, r8
 8006cee:	18e3      	adds	r3, r4, r3
 8006cf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cf4:	464b      	mov	r3, r9
 8006cf6:	eb45 0303 	adc.w	r3, r5, r3
 8006cfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d0e:	f04f 0200 	mov.w	r2, #0
 8006d12:	f04f 0300 	mov.w	r3, #0
 8006d16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006d1a:	4629      	mov	r1, r5
 8006d1c:	008b      	lsls	r3, r1, #2
 8006d1e:	4621      	mov	r1, r4
 8006d20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d24:	4621      	mov	r1, r4
 8006d26:	008a      	lsls	r2, r1, #2
 8006d28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006d2c:	f7f9 fa58 	bl	80001e0 <__aeabi_uldivmod>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4b60      	ldr	r3, [pc, #384]	; (8006eb8 <UART_SetConfig+0x4e4>)
 8006d36:	fba3 2302 	umull	r2, r3, r3, r2
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	011c      	lsls	r4, r3, #4
 8006d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d50:	4642      	mov	r2, r8
 8006d52:	464b      	mov	r3, r9
 8006d54:	1891      	adds	r1, r2, r2
 8006d56:	61b9      	str	r1, [r7, #24]
 8006d58:	415b      	adcs	r3, r3
 8006d5a:	61fb      	str	r3, [r7, #28]
 8006d5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d60:	4641      	mov	r1, r8
 8006d62:	1851      	adds	r1, r2, r1
 8006d64:	6139      	str	r1, [r7, #16]
 8006d66:	4649      	mov	r1, r9
 8006d68:	414b      	adcs	r3, r1
 8006d6a:	617b      	str	r3, [r7, #20]
 8006d6c:	f04f 0200 	mov.w	r2, #0
 8006d70:	f04f 0300 	mov.w	r3, #0
 8006d74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d78:	4659      	mov	r1, fp
 8006d7a:	00cb      	lsls	r3, r1, #3
 8006d7c:	4651      	mov	r1, sl
 8006d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d82:	4651      	mov	r1, sl
 8006d84:	00ca      	lsls	r2, r1, #3
 8006d86:	4610      	mov	r0, r2
 8006d88:	4619      	mov	r1, r3
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	4642      	mov	r2, r8
 8006d8e:	189b      	adds	r3, r3, r2
 8006d90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d94:	464b      	mov	r3, r9
 8006d96:	460a      	mov	r2, r1
 8006d98:	eb42 0303 	adc.w	r3, r2, r3
 8006d9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006daa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006dac:	f04f 0200 	mov.w	r2, #0
 8006db0:	f04f 0300 	mov.w	r3, #0
 8006db4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006db8:	4649      	mov	r1, r9
 8006dba:	008b      	lsls	r3, r1, #2
 8006dbc:	4641      	mov	r1, r8
 8006dbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dc2:	4641      	mov	r1, r8
 8006dc4:	008a      	lsls	r2, r1, #2
 8006dc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006dca:	f7f9 fa09 	bl	80001e0 <__aeabi_uldivmod>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4b39      	ldr	r3, [pc, #228]	; (8006eb8 <UART_SetConfig+0x4e4>)
 8006dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8006dd8:	095b      	lsrs	r3, r3, #5
 8006dda:	2164      	movs	r1, #100	; 0x64
 8006ddc:	fb01 f303 	mul.w	r3, r1, r3
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	011b      	lsls	r3, r3, #4
 8006de4:	3332      	adds	r3, #50	; 0x32
 8006de6:	4a34      	ldr	r2, [pc, #208]	; (8006eb8 <UART_SetConfig+0x4e4>)
 8006de8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dec:	095b      	lsrs	r3, r3, #5
 8006dee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006df2:	441c      	add	r4, r3
 8006df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006df8:	2200      	movs	r2, #0
 8006dfa:	673b      	str	r3, [r7, #112]	; 0x70
 8006dfc:	677a      	str	r2, [r7, #116]	; 0x74
 8006dfe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006e02:	4642      	mov	r2, r8
 8006e04:	464b      	mov	r3, r9
 8006e06:	1891      	adds	r1, r2, r2
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	415b      	adcs	r3, r3
 8006e0c:	60fb      	str	r3, [r7, #12]
 8006e0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e12:	4641      	mov	r1, r8
 8006e14:	1851      	adds	r1, r2, r1
 8006e16:	6039      	str	r1, [r7, #0]
 8006e18:	4649      	mov	r1, r9
 8006e1a:	414b      	adcs	r3, r1
 8006e1c:	607b      	str	r3, [r7, #4]
 8006e1e:	f04f 0200 	mov.w	r2, #0
 8006e22:	f04f 0300 	mov.w	r3, #0
 8006e26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e2a:	4659      	mov	r1, fp
 8006e2c:	00cb      	lsls	r3, r1, #3
 8006e2e:	4651      	mov	r1, sl
 8006e30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e34:	4651      	mov	r1, sl
 8006e36:	00ca      	lsls	r2, r1, #3
 8006e38:	4610      	mov	r0, r2
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	4642      	mov	r2, r8
 8006e40:	189b      	adds	r3, r3, r2
 8006e42:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e44:	464b      	mov	r3, r9
 8006e46:	460a      	mov	r2, r1
 8006e48:	eb42 0303 	adc.w	r3, r2, r3
 8006e4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	663b      	str	r3, [r7, #96]	; 0x60
 8006e58:	667a      	str	r2, [r7, #100]	; 0x64
 8006e5a:	f04f 0200 	mov.w	r2, #0
 8006e5e:	f04f 0300 	mov.w	r3, #0
 8006e62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e66:	4649      	mov	r1, r9
 8006e68:	008b      	lsls	r3, r1, #2
 8006e6a:	4641      	mov	r1, r8
 8006e6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e70:	4641      	mov	r1, r8
 8006e72:	008a      	lsls	r2, r1, #2
 8006e74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e78:	f7f9 f9b2 	bl	80001e0 <__aeabi_uldivmod>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4b0d      	ldr	r3, [pc, #52]	; (8006eb8 <UART_SetConfig+0x4e4>)
 8006e82:	fba3 1302 	umull	r1, r3, r3, r2
 8006e86:	095b      	lsrs	r3, r3, #5
 8006e88:	2164      	movs	r1, #100	; 0x64
 8006e8a:	fb01 f303 	mul.w	r3, r1, r3
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	011b      	lsls	r3, r3, #4
 8006e92:	3332      	adds	r3, #50	; 0x32
 8006e94:	4a08      	ldr	r2, [pc, #32]	; (8006eb8 <UART_SetConfig+0x4e4>)
 8006e96:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9a:	095b      	lsrs	r3, r3, #5
 8006e9c:	f003 020f 	and.w	r2, r3, #15
 8006ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4422      	add	r2, r4
 8006ea8:	609a      	str	r2, [r3, #8]
}
 8006eaa:	bf00      	nop
 8006eac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eb6:	bf00      	nop
 8006eb8:	51eb851f 	.word	0x51eb851f

08006ebc <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e025      	b.n	8006f1a <HAL_WWDG_Init+0x5e>
  assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
  assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));

#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
  /* Reset Callback pointers */
  if (hwwdg->EwiCallback == NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d102      	bne.n	8006edc <HAL_WWDG_Init+0x20>
  {
    hwwdg->EwiCallback = HAL_WWDG_EarlyWakeupCallback;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a12      	ldr	r2, [pc, #72]	; (8006f24 <HAL_WWDG_Init+0x68>)
 8006eda:	615a      	str	r2, [r3, #20]
  }

  if (hwwdg->MspInitCallback == NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d102      	bne.n	8006eea <HAL_WWDG_Init+0x2e>
  {
    hwwdg->MspInitCallback = HAL_WWDG_MspInit;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a10      	ldr	r2, [pc, #64]	; (8006f28 <HAL_WWDG_Init+0x6c>)
 8006ee8:	619a      	str	r2, [r3, #24]
  }

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	4798      	blx	r3
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006efe:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	691a      	ldr	r2, [r3, #16]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	ea42 0103 	orr.w	r1, r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	08006f2d 	.word	0x08006f2d
 8006f28:	08002769 	.word	0x08002769

08006f2c <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <__NVIC_SetPriority>:
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	4603      	mov	r3, r0
 8006f48:	6039      	str	r1, [r7, #0]
 8006f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	db0a      	blt.n	8006f6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	490c      	ldr	r1, [pc, #48]	; (8006f8c <__NVIC_SetPriority+0x4c>)
 8006f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f5e:	0112      	lsls	r2, r2, #4
 8006f60:	b2d2      	uxtb	r2, r2
 8006f62:	440b      	add	r3, r1
 8006f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f68:	e00a      	b.n	8006f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	4908      	ldr	r1, [pc, #32]	; (8006f90 <__NVIC_SetPriority+0x50>)
 8006f70:	79fb      	ldrb	r3, [r7, #7]
 8006f72:	f003 030f 	and.w	r3, r3, #15
 8006f76:	3b04      	subs	r3, #4
 8006f78:	0112      	lsls	r2, r2, #4
 8006f7a:	b2d2      	uxtb	r2, r2
 8006f7c:	440b      	add	r3, r1
 8006f7e:	761a      	strb	r2, [r3, #24]
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	e000e100 	.word	0xe000e100
 8006f90:	e000ed00 	.word	0xe000ed00

08006f94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006f94:	b580      	push	{r7, lr}
 8006f96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006f98:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <SysTick_Handler+0x1c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006f9c:	f002 fc0e 	bl	80097bc <xTaskGetSchedulerState>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d001      	beq.n	8006faa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006fa6:	f000 fe2f 	bl	8007c08 <xPortSysTickHandler>
  }
}
 8006faa:	bf00      	nop
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	e000e010 	.word	0xe000e010

08006fb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006fb8:	2100      	movs	r1, #0
 8006fba:	f06f 0004 	mvn.w	r0, #4
 8006fbe:	f7ff ffbf 	bl	8006f40 <__NVIC_SetPriority>
#endif
}
 8006fc2:	bf00      	nop
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fce:	f3ef 8305 	mrs	r3, IPSR
 8006fd2:	603b      	str	r3, [r7, #0]
  return(result);
 8006fd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006fda:	f06f 0305 	mvn.w	r3, #5
 8006fde:	607b      	str	r3, [r7, #4]
 8006fe0:	e00c      	b.n	8006ffc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006fe2:	4b0a      	ldr	r3, [pc, #40]	; (800700c <osKernelInitialize+0x44>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d105      	bne.n	8006ff6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006fea:	4b08      	ldr	r3, [pc, #32]	; (800700c <osKernelInitialize+0x44>)
 8006fec:	2201      	movs	r2, #1
 8006fee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	607b      	str	r3, [r7, #4]
 8006ff4:	e002      	b.n	8006ffc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8006ffa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ffc:	687b      	ldr	r3, [r7, #4]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	200007a8 	.word	0x200007a8

08007010 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007016:	f3ef 8305 	mrs	r3, IPSR
 800701a:	603b      	str	r3, [r7, #0]
  return(result);
 800701c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007022:	f06f 0305 	mvn.w	r3, #5
 8007026:	607b      	str	r3, [r7, #4]
 8007028:	e010      	b.n	800704c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800702a:	4b0b      	ldr	r3, [pc, #44]	; (8007058 <osKernelStart+0x48>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d109      	bne.n	8007046 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007032:	f7ff ffbf 	bl	8006fb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007036:	4b08      	ldr	r3, [pc, #32]	; (8007058 <osKernelStart+0x48>)
 8007038:	2202      	movs	r2, #2
 800703a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800703c:	f001 fe3e 	bl	8008cbc <vTaskStartScheduler>
      stat = osOK;
 8007040:	2300      	movs	r3, #0
 8007042:	607b      	str	r3, [r7, #4]
 8007044:	e002      	b.n	800704c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007046:	f04f 33ff 	mov.w	r3, #4294967295
 800704a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800704c:	687b      	ldr	r3, [r7, #4]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	200007a8 	.word	0x200007a8

0800705c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800705c:	b580      	push	{r7, lr}
 800705e:	b08e      	sub	sp, #56	; 0x38
 8007060:	af04      	add	r7, sp, #16
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007068:	2300      	movs	r3, #0
 800706a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800706c:	f3ef 8305 	mrs	r3, IPSR
 8007070:	617b      	str	r3, [r7, #20]
  return(result);
 8007072:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007074:	2b00      	cmp	r3, #0
 8007076:	d17e      	bne.n	8007176 <osThreadNew+0x11a>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d07b      	beq.n	8007176 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800707e:	2380      	movs	r3, #128	; 0x80
 8007080:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007082:	2318      	movs	r3, #24
 8007084:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007086:	2300      	movs	r3, #0
 8007088:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800708a:	f04f 33ff 	mov.w	r3, #4294967295
 800708e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d045      	beq.n	8007122 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <osThreadNew+0x48>
        name = attr->name;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d002      	beq.n	80070b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d008      	beq.n	80070ca <osThreadNew+0x6e>
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	2b38      	cmp	r3, #56	; 0x38
 80070bc:	d805      	bhi.n	80070ca <osThreadNew+0x6e>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <osThreadNew+0x72>
        return (NULL);
 80070ca:	2300      	movs	r3, #0
 80070cc:	e054      	b.n	8007178 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	089b      	lsrs	r3, r3, #2
 80070dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00e      	beq.n	8007104 <osThreadNew+0xa8>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	2bcb      	cmp	r3, #203	; 0xcb
 80070ec:	d90a      	bls.n	8007104 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d006      	beq.n	8007104 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <osThreadNew+0xa8>
        mem = 1;
 80070fe:	2301      	movs	r3, #1
 8007100:	61bb      	str	r3, [r7, #24]
 8007102:	e010      	b.n	8007126 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10c      	bne.n	8007126 <osThreadNew+0xca>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d108      	bne.n	8007126 <osThreadNew+0xca>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d104      	bne.n	8007126 <osThreadNew+0xca>
          mem = 0;
 800711c:	2300      	movs	r3, #0
 800711e:	61bb      	str	r3, [r7, #24]
 8007120:	e001      	b.n	8007126 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007122:	2300      	movs	r3, #0
 8007124:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d110      	bne.n	800714e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007134:	9202      	str	r2, [sp, #8]
 8007136:	9301      	str	r3, [sp, #4]
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	6a3a      	ldr	r2, [r7, #32]
 8007140:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f001 fbc0 	bl	80088c8 <xTaskCreateStatic>
 8007148:	4603      	mov	r3, r0
 800714a:	613b      	str	r3, [r7, #16]
 800714c:	e013      	b.n	8007176 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d110      	bne.n	8007176 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	b29a      	uxth	r2, r3
 8007158:	f107 0310 	add.w	r3, r7, #16
 800715c:	9301      	str	r3, [sp, #4]
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	9300      	str	r3, [sp, #0]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f001 fc0b 	bl	8008982 <xTaskCreate>
 800716c:	4603      	mov	r3, r0
 800716e:	2b01      	cmp	r3, #1
 8007170:	d001      	beq.n	8007176 <osThreadNew+0x11a>
            hTask = NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007176:	693b      	ldr	r3, [r7, #16]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3728      	adds	r7, #40	; 0x28
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007188:	f3ef 8305 	mrs	r3, IPSR
 800718c:	60bb      	str	r3, [r7, #8]
  return(result);
 800718e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007190:	2b00      	cmp	r3, #0
 8007192:	d003      	beq.n	800719c <osDelay+0x1c>
    stat = osErrorISR;
 8007194:	f06f 0305 	mvn.w	r3, #5
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	e007      	b.n	80071ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f001 fd54 	bl	8008c54 <vTaskDelay>
    }
  }

  return (stat);
 80071ac:	68fb      	ldr	r3, [r7, #12]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b084      	sub	sp, #16
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f002 ffcc 	bl	800a15c <pvTimerGetTimerID>
 80071c4:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d005      	beq.n	80071d8 <TimerCallback+0x22>
    callb->func (callb->arg);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	6852      	ldr	r2, [r2, #4]
 80071d4:	4610      	mov	r0, r2
 80071d6:	4798      	blx	r3
  }
}
 80071d8:	bf00      	nop
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08c      	sub	sp, #48	; 0x30
 80071e4:	af02      	add	r7, sp, #8
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	607a      	str	r2, [r7, #4]
 80071ea:	603b      	str	r3, [r7, #0]
 80071ec:	460b      	mov	r3, r1
 80071ee:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80071f0:	2300      	movs	r3, #0
 80071f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071f4:	f3ef 8305 	mrs	r3, IPSR
 80071f8:	613b      	str	r3, [r7, #16]
  return(result);
 80071fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d163      	bne.n	80072c8 <osTimerNew+0xe8>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d060      	beq.n	80072c8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007206:	2008      	movs	r0, #8
 8007208:	f000 f89a 	bl	8007340 <pvPortMalloc>
 800720c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d059      	beq.n	80072c8 <osTimerNew+0xe8>
      callb->func = func;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007220:	7afb      	ldrb	r3, [r7, #11]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d102      	bne.n	800722c <osTimerNew+0x4c>
        reload = pdFALSE;
 8007226:	2300      	movs	r3, #0
 8007228:	61fb      	str	r3, [r7, #28]
 800722a:	e001      	b.n	8007230 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800722c:	2301      	movs	r3, #1
 800722e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8007230:	f04f 33ff 	mov.w	r3, #4294967295
 8007234:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8007236:	2300      	movs	r3, #0
 8007238:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d01c      	beq.n	800727a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <osTimerNew+0x6e>
          name = attr->name;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d006      	beq.n	8007264 <osTimerNew+0x84>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	2b2b      	cmp	r3, #43	; 0x2b
 800725c:	d902      	bls.n	8007264 <osTimerNew+0x84>
          mem = 1;
 800725e:	2301      	movs	r3, #1
 8007260:	61bb      	str	r3, [r7, #24]
 8007262:	e00c      	b.n	800727e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d108      	bne.n	800727e <osTimerNew+0x9e>
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d104      	bne.n	800727e <osTimerNew+0x9e>
            mem = 0;
 8007274:	2300      	movs	r3, #0
 8007276:	61bb      	str	r3, [r7, #24]
 8007278:	e001      	b.n	800727e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800727a:	2300      	movs	r3, #0
 800727c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d10c      	bne.n	800729e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	9301      	str	r3, [sp, #4]
 800728a:	4b12      	ldr	r3, [pc, #72]	; (80072d4 <osTimerNew+0xf4>)
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	69fa      	ldr	r2, [r7, #28]
 8007292:	2101      	movs	r1, #1
 8007294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007296:	f002 fbe0 	bl	8009a5a <xTimerCreateStatic>
 800729a:	6238      	str	r0, [r7, #32]
 800729c:	e00b      	b.n	80072b6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d108      	bne.n	80072b6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80072a4:	4b0b      	ldr	r3, [pc, #44]	; (80072d4 <osTimerNew+0xf4>)
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	69fa      	ldr	r2, [r7, #28]
 80072ac:	2101      	movs	r1, #1
 80072ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072b0:	f002 fbb2 	bl	8009a18 <xTimerCreate>
 80072b4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d105      	bne.n	80072c8 <osTimerNew+0xe8>
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <osTimerNew+0xe8>
        vPortFree (callb);
 80072c2:	6978      	ldr	r0, [r7, #20]
 80072c4:	f000 f90c 	bl	80074e0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80072c8:	6a3b      	ldr	r3, [r7, #32]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3728      	adds	r7, #40	; 0x28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	080071b7 	.word	0x080071b7

080072d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4a07      	ldr	r2, [pc, #28]	; (8007304 <vApplicationGetIdleTaskMemory+0x2c>)
 80072e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	4a06      	ldr	r2, [pc, #24]	; (8007308 <vApplicationGetIdleTaskMemory+0x30>)
 80072ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2280      	movs	r2, #128	; 0x80
 80072f4:	601a      	str	r2, [r3, #0]
}
 80072f6:	bf00      	nop
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	200007ac 	.word	0x200007ac
 8007308:	20000878 	.word	0x20000878

0800730c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4a07      	ldr	r2, [pc, #28]	; (8007338 <vApplicationGetTimerTaskMemory+0x2c>)
 800731c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	4a06      	ldr	r2, [pc, #24]	; (800733c <vApplicationGetTimerTaskMemory+0x30>)
 8007322:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f44f 7280 	mov.w	r2, #256	; 0x100
 800732a:	601a      	str	r2, [r3, #0]
}
 800732c:	bf00      	nop
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	20000a78 	.word	0x20000a78
 800733c:	20000b44 	.word	0x20000b44

08007340 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08a      	sub	sp, #40	; 0x28
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007348:	2300      	movs	r3, #0
 800734a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800734c:	f001 fd28 	bl	8008da0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007350:	4b5d      	ldr	r3, [pc, #372]	; (80074c8 <pvPortMalloc+0x188>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007358:	f000 f924 	bl	80075a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800735c:	4b5b      	ldr	r3, [pc, #364]	; (80074cc <pvPortMalloc+0x18c>)
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4013      	ands	r3, r2
 8007364:	2b00      	cmp	r3, #0
 8007366:	f040 8093 	bne.w	8007490 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d01d      	beq.n	80073ac <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007370:	2208      	movs	r2, #8
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4413      	add	r3, r2
 8007376:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f003 0307 	and.w	r3, r3, #7
 800737e:	2b00      	cmp	r3, #0
 8007380:	d014      	beq.n	80073ac <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f023 0307 	bic.w	r3, r3, #7
 8007388:	3308      	adds	r3, #8
 800738a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f003 0307 	and.w	r3, r3, #7
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00a      	beq.n	80073ac <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80073a8:	bf00      	nop
 80073aa:	e7fe      	b.n	80073aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d06e      	beq.n	8007490 <pvPortMalloc+0x150>
 80073b2:	4b47      	ldr	r3, [pc, #284]	; (80074d0 <pvPortMalloc+0x190>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d869      	bhi.n	8007490 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073bc:	4b45      	ldr	r3, [pc, #276]	; (80074d4 <pvPortMalloc+0x194>)
 80073be:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073c0:	4b44      	ldr	r3, [pc, #272]	; (80074d4 <pvPortMalloc+0x194>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073c6:	e004      	b.n	80073d2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d903      	bls.n	80073e4 <pvPortMalloc+0xa4>
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1f1      	bne.n	80073c8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073e4:	4b38      	ldr	r3, [pc, #224]	; (80074c8 <pvPortMalloc+0x188>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d050      	beq.n	8007490 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073ee:	6a3b      	ldr	r3, [r7, #32]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2208      	movs	r2, #8
 80073f4:	4413      	add	r3, r2
 80073f6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	685a      	ldr	r2, [r3, #4]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	1ad2      	subs	r2, r2, r3
 8007408:	2308      	movs	r3, #8
 800740a:	005b      	lsls	r3, r3, #1
 800740c:	429a      	cmp	r2, r3
 800740e:	d91f      	bls.n	8007450 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4413      	add	r3, r2
 8007416:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	f003 0307 	and.w	r3, r3, #7
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00a      	beq.n	8007438 <pvPortMalloc+0xf8>
	__asm volatile
 8007422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007426:	f383 8811 	msr	BASEPRI, r3
 800742a:	f3bf 8f6f 	isb	sy
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	613b      	str	r3, [r7, #16]
}
 8007434:	bf00      	nop
 8007436:	e7fe      	b.n	8007436 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	1ad2      	subs	r2, r2, r3
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800744a:	69b8      	ldr	r0, [r7, #24]
 800744c:	f000 f90c 	bl	8007668 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007450:	4b1f      	ldr	r3, [pc, #124]	; (80074d0 <pvPortMalloc+0x190>)
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	4a1d      	ldr	r2, [pc, #116]	; (80074d0 <pvPortMalloc+0x190>)
 800745c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800745e:	4b1c      	ldr	r3, [pc, #112]	; (80074d0 <pvPortMalloc+0x190>)
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	4b1d      	ldr	r3, [pc, #116]	; (80074d8 <pvPortMalloc+0x198>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	429a      	cmp	r2, r3
 8007468:	d203      	bcs.n	8007472 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800746a:	4b19      	ldr	r3, [pc, #100]	; (80074d0 <pvPortMalloc+0x190>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a1a      	ldr	r2, [pc, #104]	; (80074d8 <pvPortMalloc+0x198>)
 8007470:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	4b15      	ldr	r3, [pc, #84]	; (80074cc <pvPortMalloc+0x18c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	431a      	orrs	r2, r3
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	2200      	movs	r2, #0
 8007484:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007486:	4b15      	ldr	r3, [pc, #84]	; (80074dc <pvPortMalloc+0x19c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3301      	adds	r3, #1
 800748c:	4a13      	ldr	r2, [pc, #76]	; (80074dc <pvPortMalloc+0x19c>)
 800748e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007490:	f001 fccc 	bl	8008e2c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800749a:	f7fa f927 	bl	80016ec <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	f003 0307 	and.w	r3, r3, #7
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00a      	beq.n	80074be <pvPortMalloc+0x17e>
	__asm volatile
 80074a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ac:	f383 8811 	msr	BASEPRI, r3
 80074b0:	f3bf 8f6f 	isb	sy
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	60fb      	str	r3, [r7, #12]
}
 80074ba:	bf00      	nop
 80074bc:	e7fe      	b.n	80074bc <pvPortMalloc+0x17c>
	return pvReturn;
 80074be:	69fb      	ldr	r3, [r7, #28]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3728      	adds	r7, #40	; 0x28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	20004b4c 	.word	0x20004b4c
 80074cc:	20004b60 	.word	0x20004b60
 80074d0:	20004b50 	.word	0x20004b50
 80074d4:	20004b44 	.word	0x20004b44
 80074d8:	20004b54 	.word	0x20004b54
 80074dc:	20004b58 	.word	0x20004b58

080074e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d04d      	beq.n	800758e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80074f2:	2308      	movs	r3, #8
 80074f4:	425b      	negs	r3, r3
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	4413      	add	r3, r2
 80074fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	4b24      	ldr	r3, [pc, #144]	; (8007598 <vPortFree+0xb8>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4013      	ands	r3, r2
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10a      	bne.n	8007524 <vPortFree+0x44>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	60fb      	str	r3, [r7, #12]
}
 8007520:	bf00      	nop
 8007522:	e7fe      	b.n	8007522 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00a      	beq.n	8007542 <vPortFree+0x62>
	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	60bb      	str	r3, [r7, #8]
}
 800753e:	bf00      	nop
 8007540:	e7fe      	b.n	8007540 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	4b14      	ldr	r3, [pc, #80]	; (8007598 <vPortFree+0xb8>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4013      	ands	r3, r2
 800754c:	2b00      	cmp	r3, #0
 800754e:	d01e      	beq.n	800758e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d11a      	bne.n	800758e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	4b0e      	ldr	r3, [pc, #56]	; (8007598 <vPortFree+0xb8>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	43db      	mvns	r3, r3
 8007562:	401a      	ands	r2, r3
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007568:	f001 fc1a 	bl	8008da0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	4b0a      	ldr	r3, [pc, #40]	; (800759c <vPortFree+0xbc>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4413      	add	r3, r2
 8007576:	4a09      	ldr	r2, [pc, #36]	; (800759c <vPortFree+0xbc>)
 8007578:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800757a:	6938      	ldr	r0, [r7, #16]
 800757c:	f000 f874 	bl	8007668 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007580:	4b07      	ldr	r3, [pc, #28]	; (80075a0 <vPortFree+0xc0>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3301      	adds	r3, #1
 8007586:	4a06      	ldr	r2, [pc, #24]	; (80075a0 <vPortFree+0xc0>)
 8007588:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800758a:	f001 fc4f 	bl	8008e2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800758e:	bf00      	nop
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	20004b60 	.word	0x20004b60
 800759c:	20004b50 	.word	0x20004b50
 80075a0:	20004b5c 	.word	0x20004b5c

080075a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80075ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075b0:	4b27      	ldr	r3, [pc, #156]	; (8007650 <prvHeapInit+0xac>)
 80075b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f003 0307 	and.w	r3, r3, #7
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00c      	beq.n	80075d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3307      	adds	r3, #7
 80075c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 0307 	bic.w	r3, r3, #7
 80075ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	4a1f      	ldr	r2, [pc, #124]	; (8007650 <prvHeapInit+0xac>)
 80075d4:	4413      	add	r3, r2
 80075d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075dc:	4a1d      	ldr	r2, [pc, #116]	; (8007654 <prvHeapInit+0xb0>)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075e2:	4b1c      	ldr	r3, [pc, #112]	; (8007654 <prvHeapInit+0xb0>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	4413      	add	r3, r2
 80075ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80075f0:	2208      	movs	r2, #8
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	1a9b      	subs	r3, r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f023 0307 	bic.w	r3, r3, #7
 80075fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4a15      	ldr	r2, [pc, #84]	; (8007658 <prvHeapInit+0xb4>)
 8007604:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007606:	4b14      	ldr	r3, [pc, #80]	; (8007658 <prvHeapInit+0xb4>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2200      	movs	r2, #0
 800760c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800760e:	4b12      	ldr	r3, [pc, #72]	; (8007658 <prvHeapInit+0xb4>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	1ad2      	subs	r2, r2, r3
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007624:	4b0c      	ldr	r3, [pc, #48]	; (8007658 <prvHeapInit+0xb4>)
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	4a0a      	ldr	r2, [pc, #40]	; (800765c <prvHeapInit+0xb8>)
 8007632:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	4a09      	ldr	r2, [pc, #36]	; (8007660 <prvHeapInit+0xbc>)
 800763a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800763c:	4b09      	ldr	r3, [pc, #36]	; (8007664 <prvHeapInit+0xc0>)
 800763e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007642:	601a      	str	r2, [r3, #0]
}
 8007644:	bf00      	nop
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	20000f44 	.word	0x20000f44
 8007654:	20004b44 	.word	0x20004b44
 8007658:	20004b4c 	.word	0x20004b4c
 800765c:	20004b54 	.word	0x20004b54
 8007660:	20004b50 	.word	0x20004b50
 8007664:	20004b60 	.word	0x20004b60

08007668 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007670:	4b28      	ldr	r3, [pc, #160]	; (8007714 <prvInsertBlockIntoFreeList+0xac>)
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	e002      	b.n	800767c <prvInsertBlockIntoFreeList+0x14>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	429a      	cmp	r2, r3
 8007684:	d8f7      	bhi.n	8007676 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	4413      	add	r3, r2
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	429a      	cmp	r2, r3
 8007696:	d108      	bne.n	80076aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	441a      	add	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	441a      	add	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d118      	bne.n	80076f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	4b15      	ldr	r3, [pc, #84]	; (8007718 <prvInsertBlockIntoFreeList+0xb0>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d00d      	beq.n	80076e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	441a      	add	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	e008      	b.n	80076f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076e6:	4b0c      	ldr	r3, [pc, #48]	; (8007718 <prvInsertBlockIntoFreeList+0xb0>)
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	e003      	b.n	80076f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d002      	beq.n	8007706 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007706:	bf00      	nop
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	20004b44 	.word	0x20004b44
 8007718:	20004b4c 	.word	0x20004b4c

0800771c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f103 0208 	add.w	r2, r3, #8
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f04f 32ff 	mov.w	r2, #4294967295
 8007734:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f103 0208 	add.w	r2, r3, #8
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f103 0208 	add.w	r2, r3, #8
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800776a:	bf00      	nop
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007776:	b480      	push	{r7}
 8007778:	b085      	sub	sp, #20
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	689a      	ldr	r2, [r3, #8]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	601a      	str	r2, [r3, #0]
}
 80077b2:	bf00      	nop
 80077b4:	3714      	adds	r7, #20
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077be:	b480      	push	{r7}
 80077c0:	b085      	sub	sp, #20
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d4:	d103      	bne.n	80077de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	e00c      	b.n	80077f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	3308      	adds	r3, #8
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	e002      	b.n	80077ec <vListInsert+0x2e>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d2f6      	bcs.n	80077e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	601a      	str	r2, [r3, #0]
}
 8007824:	bf00      	nop
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	6892      	ldr	r2, [r2, #8]
 8007846:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	6852      	ldr	r2, [r2, #4]
 8007850:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	429a      	cmp	r2, r3
 800785a:	d103      	bne.n	8007864 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689a      	ldr	r2, [r3, #8]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	1e5a      	subs	r2, r3, #1
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3714      	adds	r7, #20
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3b04      	subs	r3, #4
 8007894:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800789c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	3b04      	subs	r3, #4
 80078a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	f023 0201 	bic.w	r2, r3, #1
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	3b04      	subs	r3, #4
 80078b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078b4:	4a0c      	ldr	r2, [pc, #48]	; (80078e8 <pxPortInitialiseStack+0x64>)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	3b14      	subs	r3, #20
 80078be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	3b04      	subs	r3, #4
 80078ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f06f 0202 	mvn.w	r2, #2
 80078d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	3b20      	subs	r3, #32
 80078d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80078da:	68fb      	ldr	r3, [r7, #12]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	080078ed 	.word	0x080078ed

080078ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80078f2:	2300      	movs	r3, #0
 80078f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80078f6:	4b12      	ldr	r3, [pc, #72]	; (8007940 <prvTaskExitError+0x54>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078fe:	d00a      	beq.n	8007916 <prvTaskExitError+0x2a>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	60fb      	str	r3, [r7, #12]
}
 8007912:	bf00      	nop
 8007914:	e7fe      	b.n	8007914 <prvTaskExitError+0x28>
	__asm volatile
 8007916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791a:	f383 8811 	msr	BASEPRI, r3
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f3bf 8f4f 	dsb	sy
 8007926:	60bb      	str	r3, [r7, #8]
}
 8007928:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800792a:	bf00      	nop
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d0fc      	beq.n	800792c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007932:	bf00      	nop
 8007934:	bf00      	nop
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	2000000c 	.word	0x2000000c
	...

08007950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007950:	4b07      	ldr	r3, [pc, #28]	; (8007970 <pxCurrentTCBConst2>)
 8007952:	6819      	ldr	r1, [r3, #0]
 8007954:	6808      	ldr	r0, [r1, #0]
 8007956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795a:	f380 8809 	msr	PSP, r0
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f04f 0000 	mov.w	r0, #0
 8007966:	f380 8811 	msr	BASEPRI, r0
 800796a:	4770      	bx	lr
 800796c:	f3af 8000 	nop.w

08007970 <pxCurrentTCBConst2>:
 8007970:	20004bb8 	.word	0x20004bb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007974:	bf00      	nop
 8007976:	bf00      	nop

08007978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007978:	4808      	ldr	r0, [pc, #32]	; (800799c <prvPortStartFirstTask+0x24>)
 800797a:	6800      	ldr	r0, [r0, #0]
 800797c:	6800      	ldr	r0, [r0, #0]
 800797e:	f380 8808 	msr	MSP, r0
 8007982:	f04f 0000 	mov.w	r0, #0
 8007986:	f380 8814 	msr	CONTROL, r0
 800798a:	b662      	cpsie	i
 800798c:	b661      	cpsie	f
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	df00      	svc	0
 8007998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800799a:	bf00      	nop
 800799c:	e000ed08 	.word	0xe000ed08

080079a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079a6:	4b46      	ldr	r3, [pc, #280]	; (8007ac0 <xPortStartScheduler+0x120>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a46      	ldr	r2, [pc, #280]	; (8007ac4 <xPortStartScheduler+0x124>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d10a      	bne.n	80079c6 <xPortStartScheduler+0x26>
	__asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	613b      	str	r3, [r7, #16]
}
 80079c2:	bf00      	nop
 80079c4:	e7fe      	b.n	80079c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80079c6:	4b3e      	ldr	r3, [pc, #248]	; (8007ac0 <xPortStartScheduler+0x120>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a3f      	ldr	r2, [pc, #252]	; (8007ac8 <xPortStartScheduler+0x128>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d10a      	bne.n	80079e6 <xPortStartScheduler+0x46>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	60fb      	str	r3, [r7, #12]
}
 80079e2:	bf00      	nop
 80079e4:	e7fe      	b.n	80079e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079e6:	4b39      	ldr	r3, [pc, #228]	; (8007acc <xPortStartScheduler+0x12c>)
 80079e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	22ff      	movs	r2, #255	; 0xff
 80079f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a00:	78fb      	ldrb	r3, [r7, #3]
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	4b31      	ldr	r3, [pc, #196]	; (8007ad0 <xPortStartScheduler+0x130>)
 8007a0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a0e:	4b31      	ldr	r3, [pc, #196]	; (8007ad4 <xPortStartScheduler+0x134>)
 8007a10:	2207      	movs	r2, #7
 8007a12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a14:	e009      	b.n	8007a2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007a16:	4b2f      	ldr	r3, [pc, #188]	; (8007ad4 <xPortStartScheduler+0x134>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	4a2d      	ldr	r2, [pc, #180]	; (8007ad4 <xPortStartScheduler+0x134>)
 8007a1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a20:	78fb      	ldrb	r3, [r7, #3]
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	005b      	lsls	r3, r3, #1
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a2a:	78fb      	ldrb	r3, [r7, #3]
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a32:	2b80      	cmp	r3, #128	; 0x80
 8007a34:	d0ef      	beq.n	8007a16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a36:	4b27      	ldr	r3, [pc, #156]	; (8007ad4 <xPortStartScheduler+0x134>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f1c3 0307 	rsb	r3, r3, #7
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	d00a      	beq.n	8007a58 <xPortStartScheduler+0xb8>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	60bb      	str	r3, [r7, #8]
}
 8007a54:	bf00      	nop
 8007a56:	e7fe      	b.n	8007a56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a58:	4b1e      	ldr	r3, [pc, #120]	; (8007ad4 <xPortStartScheduler+0x134>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	021b      	lsls	r3, r3, #8
 8007a5e:	4a1d      	ldr	r2, [pc, #116]	; (8007ad4 <xPortStartScheduler+0x134>)
 8007a60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a62:	4b1c      	ldr	r3, [pc, #112]	; (8007ad4 <xPortStartScheduler+0x134>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a6a:	4a1a      	ldr	r2, [pc, #104]	; (8007ad4 <xPortStartScheduler+0x134>)
 8007a6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a76:	4b18      	ldr	r3, [pc, #96]	; (8007ad8 <xPortStartScheduler+0x138>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a17      	ldr	r2, [pc, #92]	; (8007ad8 <xPortStartScheduler+0x138>)
 8007a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a82:	4b15      	ldr	r3, [pc, #84]	; (8007ad8 <xPortStartScheduler+0x138>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a14      	ldr	r2, [pc, #80]	; (8007ad8 <xPortStartScheduler+0x138>)
 8007a88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a8e:	f000 f9a9 	bl	8007de4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a92:	4b12      	ldr	r3, [pc, #72]	; (8007adc <xPortStartScheduler+0x13c>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a98:	f000 f9e0 	bl	8007e5c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a9c:	4b10      	ldr	r3, [pc, #64]	; (8007ae0 <xPortStartScheduler+0x140>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a0f      	ldr	r2, [pc, #60]	; (8007ae0 <xPortStartScheduler+0x140>)
 8007aa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007aa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007aa8:	f7ff ff66 	bl	8007978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007aac:	f001 fb56 	bl	800915c <vTaskSwitchContext>
	prvTaskExitError();
 8007ab0:	f7ff ff1c 	bl	80078ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	e000ed00 	.word	0xe000ed00
 8007ac4:	410fc271 	.word	0x410fc271
 8007ac8:	410fc270 	.word	0x410fc270
 8007acc:	e000e400 	.word	0xe000e400
 8007ad0:	20004b70 	.word	0x20004b70
 8007ad4:	20004b74 	.word	0x20004b74
 8007ad8:	e000ed20 	.word	0xe000ed20
 8007adc:	2000000c 	.word	0x2000000c
 8007ae0:	e000ef34 	.word	0xe000ef34

08007ae4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
	__asm volatile
 8007aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aee:	f383 8811 	msr	BASEPRI, r3
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	607b      	str	r3, [r7, #4]
}
 8007afc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007afe:	4b0f      	ldr	r3, [pc, #60]	; (8007b3c <vPortEnterCritical+0x58>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3301      	adds	r3, #1
 8007b04:	4a0d      	ldr	r2, [pc, #52]	; (8007b3c <vPortEnterCritical+0x58>)
 8007b06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b08:	4b0c      	ldr	r3, [pc, #48]	; (8007b3c <vPortEnterCritical+0x58>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d10f      	bne.n	8007b30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b10:	4b0b      	ldr	r3, [pc, #44]	; (8007b40 <vPortEnterCritical+0x5c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00a      	beq.n	8007b30 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	603b      	str	r3, [r7, #0]
}
 8007b2c:	bf00      	nop
 8007b2e:	e7fe      	b.n	8007b2e <vPortEnterCritical+0x4a>
	}
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	2000000c 	.word	0x2000000c
 8007b40:	e000ed04 	.word	0xe000ed04

08007b44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b4a:	4b12      	ldr	r3, [pc, #72]	; (8007b94 <vPortExitCritical+0x50>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10a      	bne.n	8007b68 <vPortExitCritical+0x24>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	607b      	str	r3, [r7, #4]
}
 8007b64:	bf00      	nop
 8007b66:	e7fe      	b.n	8007b66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b68:	4b0a      	ldr	r3, [pc, #40]	; (8007b94 <vPortExitCritical+0x50>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	4a09      	ldr	r2, [pc, #36]	; (8007b94 <vPortExitCritical+0x50>)
 8007b70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b72:	4b08      	ldr	r3, [pc, #32]	; (8007b94 <vPortExitCritical+0x50>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d105      	bne.n	8007b86 <vPortExitCritical+0x42>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b86:	bf00      	nop
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	2000000c 	.word	0x2000000c
	...

08007ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ba0:	f3ef 8009 	mrs	r0, PSP
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	4b15      	ldr	r3, [pc, #84]	; (8007c00 <pxCurrentTCBConst>)
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	f01e 0f10 	tst.w	lr, #16
 8007bb0:	bf08      	it	eq
 8007bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bba:	6010      	str	r0, [r2, #0]
 8007bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007bc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007bc4:	f380 8811 	msr	BASEPRI, r0
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f001 fac4 	bl	800915c <vTaskSwitchContext>
 8007bd4:	f04f 0000 	mov.w	r0, #0
 8007bd8:	f380 8811 	msr	BASEPRI, r0
 8007bdc:	bc09      	pop	{r0, r3}
 8007bde:	6819      	ldr	r1, [r3, #0]
 8007be0:	6808      	ldr	r0, [r1, #0]
 8007be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be6:	f01e 0f10 	tst.w	lr, #16
 8007bea:	bf08      	it	eq
 8007bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007bf0:	f380 8809 	msr	PSP, r0
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	f3af 8000 	nop.w

08007c00 <pxCurrentTCBConst>:
 8007c00:	20004bb8 	.word	0x20004bb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop

08007c08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	607b      	str	r3, [r7, #4]
}
 8007c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c22:	f001 f9d9 	bl	8008fd8 <xTaskIncrementTick>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c2c:	4b06      	ldr	r3, [pc, #24]	; (8007c48 <xPortSysTickHandler+0x40>)
 8007c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	2300      	movs	r3, #0
 8007c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	f383 8811 	msr	BASEPRI, r3
}
 8007c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	e000ed04 	.word	0xe000ed04

08007c4c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b088      	sub	sp, #32
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8007c54:	4b5d      	ldr	r3, [pc, #372]	; (8007dcc <vPortSuppressTicksAndSleep+0x180>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d902      	bls.n	8007c64 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 8007c5e:	4b5b      	ldr	r3, [pc, #364]	; (8007dcc <vPortSuppressTicksAndSleep+0x180>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8007c64:	4b5a      	ldr	r3, [pc, #360]	; (8007dd0 <vPortSuppressTicksAndSleep+0x184>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a59      	ldr	r2, [pc, #356]	; (8007dd0 <vPortSuppressTicksAndSleep+0x184>)
 8007c6a:	f023 0301 	bic.w	r3, r3, #1
 8007c6e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8007c70:	4b58      	ldr	r3, [pc, #352]	; (8007dd4 <vPortSuppressTicksAndSleep+0x188>)
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3b01      	subs	r3, #1
 8007c78:	4957      	ldr	r1, [pc, #348]	; (8007dd8 <vPortSuppressTicksAndSleep+0x18c>)
 8007c7a:	6809      	ldr	r1, [r1, #0]
 8007c7c:	fb01 f303 	mul.w	r3, r1, r3
 8007c80:	4413      	add	r3, r2
 8007c82:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8007c84:	4b55      	ldr	r3, [pc, #340]	; (8007ddc <vPortSuppressTicksAndSleep+0x190>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	69fa      	ldr	r2, [r7, #28]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d904      	bls.n	8007c98 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 8007c8e:	4b53      	ldr	r3, [pc, #332]	; (8007ddc <vPortSuppressTicksAndSleep+0x190>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69fa      	ldr	r2, [r7, #28]
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8007c98:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8007c9a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 8007c9e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8007ca2:	f001 fc9b 	bl	80095dc <eTaskConfirmSleepModeStatus>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d110      	bne.n	8007cce <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8007cac:	4b49      	ldr	r3, [pc, #292]	; (8007dd4 <vPortSuppressTicksAndSleep+0x188>)
 8007cae:	4a4c      	ldr	r2, [pc, #304]	; (8007de0 <vPortSuppressTicksAndSleep+0x194>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8007cb4:	4b46      	ldr	r3, [pc, #280]	; (8007dd0 <vPortSuppressTicksAndSleep+0x184>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a45      	ldr	r2, [pc, #276]	; (8007dd0 <vPortSuppressTicksAndSleep+0x184>)
 8007cba:	f043 0301 	orr.w	r3, r3, #1
 8007cbe:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8007cc0:	4b45      	ldr	r3, [pc, #276]	; (8007dd8 <vPortSuppressTicksAndSleep+0x18c>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a46      	ldr	r2, [pc, #280]	; (8007de0 <vPortSuppressTicksAndSleep+0x194>)
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8007cca:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8007ccc:	e079      	b.n	8007dc2 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8007cce:	4a44      	ldr	r2, [pc, #272]	; (8007de0 <vPortSuppressTicksAndSleep+0x194>)
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007cd4:	4b3f      	ldr	r3, [pc, #252]	; (8007dd4 <vPortSuppressTicksAndSleep+0x188>)
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8007cda:	4b3d      	ldr	r3, [pc, #244]	; (8007dd0 <vPortSuppressTicksAndSleep+0x184>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a3c      	ldr	r2, [pc, #240]	; (8007dd0 <vPortSuppressTicksAndSleep+0x184>)
 8007ce0:	f043 0301 	orr.w	r3, r3, #1
 8007ce4:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 8007cea:	2300      	movs	r3, #0
 8007cec:	613b      	str	r3, [r7, #16]
 8007cee:	6938      	ldr	r0, [r7, #16]
 8007cf0:	f7f9 fd0a 	bl	8001708 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d004      	beq.n	8007d04 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 8007cfa:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8007cfe:	bf30      	wfi
				__asm volatile( "isb" );
 8007d00:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7f9 fd09 	bl	800171c <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8007d0a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8007d0c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8007d10:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8007d14:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8007d16:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8007d1a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8007d1e:	4b2c      	ldr	r3, [pc, #176]	; (8007dd0 <vPortSuppressTicksAndSleep+0x184>)
 8007d20:	2206      	movs	r2, #6
 8007d22:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8007d24:	4b2a      	ldr	r3, [pc, #168]	; (8007dd0 <vPortSuppressTicksAndSleep+0x184>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d01d      	beq.n	8007d6c <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8007d30:	4b29      	ldr	r3, [pc, #164]	; (8007dd8 <vPortSuppressTicksAndSleep+0x18c>)
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	4b27      	ldr	r3, [pc, #156]	; (8007dd4 <vPortSuppressTicksAndSleep+0x188>)
 8007d36:	6819      	ldr	r1, [r3, #0]
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	1acb      	subs	r3, r1, r3
 8007d3c:	4413      	add	r3, r2
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8007d42:	4b26      	ldr	r3, [pc, #152]	; (8007ddc <vPortSuppressTicksAndSleep+0x190>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d304      	bcc.n	8007d56 <vPortSuppressTicksAndSleep+0x10a>
 8007d4c:	4b22      	ldr	r3, [pc, #136]	; (8007dd8 <vPortSuppressTicksAndSleep+0x18c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d903      	bls.n	8007d5e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8007d56:	4b20      	ldr	r3, [pc, #128]	; (8007dd8 <vPortSuppressTicksAndSleep+0x18c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8007d5e:	4a20      	ldr	r2, [pc, #128]	; (8007de0 <vPortSuppressTicksAndSleep+0x194>)
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3b01      	subs	r3, #1
 8007d68:	61bb      	str	r3, [r7, #24]
 8007d6a:	e018      	b.n	8007d9e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8007d6c:	4b1a      	ldr	r3, [pc, #104]	; (8007dd8 <vPortSuppressTicksAndSleep+0x18c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	fb03 f202 	mul.w	r2, r3, r2
 8007d76:	4b17      	ldr	r3, [pc, #92]	; (8007dd4 <vPortSuppressTicksAndSleep+0x188>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8007d7e:	4b16      	ldr	r3, [pc, #88]	; (8007dd8 <vPortSuppressTicksAndSleep+0x18c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d88:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	4a12      	ldr	r2, [pc, #72]	; (8007dd8 <vPortSuppressTicksAndSleep+0x18c>)
 8007d90:	6812      	ldr	r2, [r2, #0]
 8007d92:	fb03 f202 	mul.w	r2, r3, r2
 8007d96:	4912      	ldr	r1, [pc, #72]	; (8007de0 <vPortSuppressTicksAndSleep+0x194>)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d9e:	4b0d      	ldr	r3, [pc, #52]	; (8007dd4 <vPortSuppressTicksAndSleep+0x188>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8007da4:	4b0a      	ldr	r3, [pc, #40]	; (8007dd0 <vPortSuppressTicksAndSleep+0x184>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a09      	ldr	r2, [pc, #36]	; (8007dd0 <vPortSuppressTicksAndSleep+0x184>)
 8007daa:	f043 0301 	orr.w	r3, r3, #1
 8007dae:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 8007db0:	69b8      	ldr	r0, [r7, #24]
 8007db2:	f001 f8e9 	bl	8008f88 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8007db6:	4b08      	ldr	r3, [pc, #32]	; (8007dd8 <vPortSuppressTicksAndSleep+0x18c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a09      	ldr	r2, [pc, #36]	; (8007de0 <vPortSuppressTicksAndSleep+0x194>)
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8007dc0:	b662      	cpsie	i
	}
 8007dc2:	bf00      	nop
 8007dc4:	3720      	adds	r7, #32
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	20004b68 	.word	0x20004b68
 8007dd0:	e000e010 	.word	0xe000e010
 8007dd4:	e000e018 	.word	0xe000e018
 8007dd8:	20004b64 	.word	0x20004b64
 8007ddc:	20004b6c 	.word	0x20004b6c
 8007de0:	e000e014 	.word	0xe000e014

08007de4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007de4:	b480      	push	{r7}
 8007de6:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8007de8:	4b14      	ldr	r3, [pc, #80]	; (8007e3c <vPortSetupTimerInterrupt+0x58>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a14      	ldr	r2, [pc, #80]	; (8007e40 <vPortSetupTimerInterrupt+0x5c>)
 8007dee:	fba2 2303 	umull	r2, r3, r2, r3
 8007df2:	099b      	lsrs	r3, r3, #6
 8007df4:	4a13      	ldr	r2, [pc, #76]	; (8007e44 <vPortSetupTimerInterrupt+0x60>)
 8007df6:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8007df8:	4b12      	ldr	r3, [pc, #72]	; (8007e44 <vPortSetupTimerInterrupt+0x60>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8007e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e04:	4a10      	ldr	r2, [pc, #64]	; (8007e48 <vPortSetupTimerInterrupt+0x64>)
 8007e06:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8007e08:	4b10      	ldr	r3, [pc, #64]	; (8007e4c <vPortSetupTimerInterrupt+0x68>)
 8007e0a:	222d      	movs	r2, #45	; 0x2d
 8007e0c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e0e:	4b10      	ldr	r3, [pc, #64]	; (8007e50 <vPortSetupTimerInterrupt+0x6c>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e14:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <vPortSetupTimerInterrupt+0x70>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e1a:	4b08      	ldr	r3, [pc, #32]	; (8007e3c <vPortSetupTimerInterrupt+0x58>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a08      	ldr	r2, [pc, #32]	; (8007e40 <vPortSetupTimerInterrupt+0x5c>)
 8007e20:	fba2 2303 	umull	r2, r3, r2, r3
 8007e24:	099b      	lsrs	r3, r3, #6
 8007e26:	4a0c      	ldr	r2, [pc, #48]	; (8007e58 <vPortSetupTimerInterrupt+0x74>)
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e2c:	4b08      	ldr	r3, [pc, #32]	; (8007e50 <vPortSetupTimerInterrupt+0x6c>)
 8007e2e:	2207      	movs	r2, #7
 8007e30:	601a      	str	r2, [r3, #0]
}
 8007e32:	bf00      	nop
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	20000000 	.word	0x20000000
 8007e40:	10624dd3 	.word	0x10624dd3
 8007e44:	20004b64 	.word	0x20004b64
 8007e48:	20004b68 	.word	0x20004b68
 8007e4c:	20004b6c 	.word	0x20004b6c
 8007e50:	e000e010 	.word	0xe000e010
 8007e54:	e000e018 	.word	0xe000e018
 8007e58:	e000e014 	.word	0xe000e014

08007e5c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e5c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e6c <vPortEnableVFP+0x10>
 8007e60:	6801      	ldr	r1, [r0, #0]
 8007e62:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007e66:	6001      	str	r1, [r0, #0]
 8007e68:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e6a:	bf00      	nop
 8007e6c:	e000ed88 	.word	0xe000ed88

08007e70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e76:	f3ef 8305 	mrs	r3, IPSR
 8007e7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2b0f      	cmp	r3, #15
 8007e80:	d914      	bls.n	8007eac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e82:	4a17      	ldr	r2, [pc, #92]	; (8007ee0 <vPortValidateInterruptPriority+0x70>)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	4413      	add	r3, r2
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e8c:	4b15      	ldr	r3, [pc, #84]	; (8007ee4 <vPortValidateInterruptPriority+0x74>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	7afa      	ldrb	r2, [r7, #11]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d20a      	bcs.n	8007eac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9a:	f383 8811 	msr	BASEPRI, r3
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	607b      	str	r3, [r7, #4]
}
 8007ea8:	bf00      	nop
 8007eaa:	e7fe      	b.n	8007eaa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007eac:	4b0e      	ldr	r3, [pc, #56]	; (8007ee8 <vPortValidateInterruptPriority+0x78>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007eb4:	4b0d      	ldr	r3, [pc, #52]	; (8007eec <vPortValidateInterruptPriority+0x7c>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d90a      	bls.n	8007ed2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	603b      	str	r3, [r7, #0]
}
 8007ece:	bf00      	nop
 8007ed0:	e7fe      	b.n	8007ed0 <vPortValidateInterruptPriority+0x60>
	}
 8007ed2:	bf00      	nop
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	e000e3f0 	.word	0xe000e3f0
 8007ee4:	20004b70 	.word	0x20004b70
 8007ee8:	e000ed0c 	.word	0xe000ed0c
 8007eec:	20004b74 	.word	0x20004b74

08007ef0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10a      	bne.n	8007f1a <xQueueGenericReset+0x2a>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	60bb      	str	r3, [r7, #8]
}
 8007f16:	bf00      	nop
 8007f18:	e7fe      	b.n	8007f18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f1a:	f7ff fde3 	bl	8007ae4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f26:	68f9      	ldr	r1, [r7, #12]
 8007f28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f2a:	fb01 f303 	mul.w	r3, r1, r3
 8007f2e:	441a      	add	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	68f9      	ldr	r1, [r7, #12]
 8007f4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f50:	fb01 f303 	mul.w	r3, r1, r3
 8007f54:	441a      	add	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	22ff      	movs	r2, #255	; 0xff
 8007f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	22ff      	movs	r2, #255	; 0xff
 8007f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d114      	bne.n	8007f9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d01a      	beq.n	8007fae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3310      	adds	r3, #16
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f001 f9f1 	bl	8009364 <xTaskRemoveFromEventList>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d012      	beq.n	8007fae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f88:	4b0c      	ldr	r3, [pc, #48]	; (8007fbc <xQueueGenericReset+0xcc>)
 8007f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f8e:	601a      	str	r2, [r3, #0]
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	e009      	b.n	8007fae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	3310      	adds	r3, #16
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7ff fbbc 	bl	800771c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	3324      	adds	r3, #36	; 0x24
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7ff fbb7 	bl	800771c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007fae:	f7ff fdc9 	bl	8007b44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007fb2:	2301      	movs	r3, #1
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	e000ed04 	.word	0xe000ed04

08007fc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08e      	sub	sp, #56	; 0x38
 8007fc4:	af02      	add	r7, sp, #8
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
 8007fcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10a      	bne.n	8007fea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007fe6:	bf00      	nop
 8007fe8:	e7fe      	b.n	8007fe8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10a      	bne.n	8008006 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008002:	bf00      	nop
 8008004:	e7fe      	b.n	8008004 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <xQueueGenericCreateStatic+0x52>
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <xQueueGenericCreateStatic+0x56>
 8008012:	2301      	movs	r3, #1
 8008014:	e000      	b.n	8008018 <xQueueGenericCreateStatic+0x58>
 8008016:	2300      	movs	r3, #0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10a      	bne.n	8008032 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	623b      	str	r3, [r7, #32]
}
 800802e:	bf00      	nop
 8008030:	e7fe      	b.n	8008030 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d102      	bne.n	800803e <xQueueGenericCreateStatic+0x7e>
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <xQueueGenericCreateStatic+0x82>
 800803e:	2301      	movs	r3, #1
 8008040:	e000      	b.n	8008044 <xQueueGenericCreateStatic+0x84>
 8008042:	2300      	movs	r3, #0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10a      	bne.n	800805e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804c:	f383 8811 	msr	BASEPRI, r3
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	61fb      	str	r3, [r7, #28]
}
 800805a:	bf00      	nop
 800805c:	e7fe      	b.n	800805c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800805e:	2350      	movs	r3, #80	; 0x50
 8008060:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	2b50      	cmp	r3, #80	; 0x50
 8008066:	d00a      	beq.n	800807e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806c:	f383 8811 	msr	BASEPRI, r3
 8008070:	f3bf 8f6f 	isb	sy
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	61bb      	str	r3, [r7, #24]
}
 800807a:	bf00      	nop
 800807c:	e7fe      	b.n	800807c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800807e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00d      	beq.n	80080a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800808a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808c:	2201      	movs	r2, #1
 800808e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008092:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	4613      	mov	r3, r2
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	68b9      	ldr	r1, [r7, #8]
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 f805 	bl	80080b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80080a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3730      	adds	r7, #48	; 0x30
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
 80080bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d103      	bne.n	80080cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	69ba      	ldr	r2, [r7, #24]
 80080c8:	601a      	str	r2, [r3, #0]
 80080ca:	e002      	b.n	80080d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80080de:	2101      	movs	r1, #1
 80080e0:	69b8      	ldr	r0, [r7, #24]
 80080e2:	f7ff ff05 	bl	8007ef0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	78fa      	ldrb	r2, [r7, #3]
 80080ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80080ee:	bf00      	nop
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
	...

080080f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b08e      	sub	sp, #56	; 0x38
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
 8008104:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008106:	2300      	movs	r3, #0
 8008108:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800810e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10a      	bne.n	800812a <xQueueGenericSend+0x32>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008126:	bf00      	nop
 8008128:	e7fe      	b.n	8008128 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d103      	bne.n	8008138 <xQueueGenericSend+0x40>
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008134:	2b00      	cmp	r3, #0
 8008136:	d101      	bne.n	800813c <xQueueGenericSend+0x44>
 8008138:	2301      	movs	r3, #1
 800813a:	e000      	b.n	800813e <xQueueGenericSend+0x46>
 800813c:	2300      	movs	r3, #0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10a      	bne.n	8008158 <xQueueGenericSend+0x60>
	__asm volatile
 8008142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008154:	bf00      	nop
 8008156:	e7fe      	b.n	8008156 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	2b02      	cmp	r3, #2
 800815c:	d103      	bne.n	8008166 <xQueueGenericSend+0x6e>
 800815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008162:	2b01      	cmp	r3, #1
 8008164:	d101      	bne.n	800816a <xQueueGenericSend+0x72>
 8008166:	2301      	movs	r3, #1
 8008168:	e000      	b.n	800816c <xQueueGenericSend+0x74>
 800816a:	2300      	movs	r3, #0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10a      	bne.n	8008186 <xQueueGenericSend+0x8e>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	623b      	str	r3, [r7, #32]
}
 8008182:	bf00      	nop
 8008184:	e7fe      	b.n	8008184 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008186:	f001 fb19 	bl	80097bc <xTaskGetSchedulerState>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d102      	bne.n	8008196 <xQueueGenericSend+0x9e>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <xQueueGenericSend+0xa2>
 8008196:	2301      	movs	r3, #1
 8008198:	e000      	b.n	800819c <xQueueGenericSend+0xa4>
 800819a:	2300      	movs	r3, #0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10a      	bne.n	80081b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	61fb      	str	r3, [r7, #28]
}
 80081b2:	bf00      	nop
 80081b4:	e7fe      	b.n	80081b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081b6:	f7ff fc95 	bl	8007ae4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d302      	bcc.n	80081cc <xQueueGenericSend+0xd4>
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d129      	bne.n	8008220 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	68b9      	ldr	r1, [r7, #8]
 80081d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081d2:	f000 fa0b 	bl	80085ec <prvCopyDataToQueue>
 80081d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d010      	beq.n	8008202 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	3324      	adds	r3, #36	; 0x24
 80081e4:	4618      	mov	r0, r3
 80081e6:	f001 f8bd 	bl	8009364 <xTaskRemoveFromEventList>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d013      	beq.n	8008218 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80081f0:	4b3f      	ldr	r3, [pc, #252]	; (80082f0 <xQueueGenericSend+0x1f8>)
 80081f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	e00a      	b.n	8008218 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008204:	2b00      	cmp	r3, #0
 8008206:	d007      	beq.n	8008218 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008208:	4b39      	ldr	r3, [pc, #228]	; (80082f0 <xQueueGenericSend+0x1f8>)
 800820a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008218:	f7ff fc94 	bl	8007b44 <vPortExitCritical>
				return pdPASS;
 800821c:	2301      	movs	r3, #1
 800821e:	e063      	b.n	80082e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d103      	bne.n	800822e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008226:	f7ff fc8d 	bl	8007b44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800822a:	2300      	movs	r3, #0
 800822c:	e05c      	b.n	80082e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800822e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008230:	2b00      	cmp	r3, #0
 8008232:	d106      	bne.n	8008242 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008234:	f107 0314 	add.w	r3, r7, #20
 8008238:	4618      	mov	r0, r3
 800823a:	f001 f8f9 	bl	8009430 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800823e:	2301      	movs	r3, #1
 8008240:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008242:	f7ff fc7f 	bl	8007b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008246:	f000 fdab 	bl	8008da0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800824a:	f7ff fc4b 	bl	8007ae4 <vPortEnterCritical>
 800824e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008254:	b25b      	sxtb	r3, r3
 8008256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825a:	d103      	bne.n	8008264 <xQueueGenericSend+0x16c>
 800825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825e:	2200      	movs	r2, #0
 8008260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800826a:	b25b      	sxtb	r3, r3
 800826c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008270:	d103      	bne.n	800827a <xQueueGenericSend+0x182>
 8008272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800827a:	f7ff fc63 	bl	8007b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800827e:	1d3a      	adds	r2, r7, #4
 8008280:	f107 0314 	add.w	r3, r7, #20
 8008284:	4611      	mov	r1, r2
 8008286:	4618      	mov	r0, r3
 8008288:	f001 f8e8 	bl	800945c <xTaskCheckForTimeOut>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d124      	bne.n	80082dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008292:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008294:	f000 faa2 	bl	80087dc <prvIsQueueFull>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d018      	beq.n	80082d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	3310      	adds	r3, #16
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	4611      	mov	r1, r2
 80082a6:	4618      	mov	r0, r3
 80082a8:	f001 f80c 	bl	80092c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082ae:	f000 fa2d 	bl	800870c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082b2:	f000 fdbb 	bl	8008e2c <xTaskResumeAll>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f47f af7c 	bne.w	80081b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80082be:	4b0c      	ldr	r3, [pc, #48]	; (80082f0 <xQueueGenericSend+0x1f8>)
 80082c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	e772      	b.n	80081b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082d2:	f000 fa1b 	bl	800870c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082d6:	f000 fda9 	bl	8008e2c <xTaskResumeAll>
 80082da:	e76c      	b.n	80081b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082de:	f000 fa15 	bl	800870c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082e2:	f000 fda3 	bl	8008e2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80082e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3738      	adds	r7, #56	; 0x38
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	e000ed04 	.word	0xe000ed04

080082f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b090      	sub	sp, #64	; 0x40
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
 8008300:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10a      	bne.n	8008322 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800831e:	bf00      	nop
 8008320:	e7fe      	b.n	8008320 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d103      	bne.n	8008330 <xQueueGenericSendFromISR+0x3c>
 8008328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <xQueueGenericSendFromISR+0x40>
 8008330:	2301      	movs	r3, #1
 8008332:	e000      	b.n	8008336 <xQueueGenericSendFromISR+0x42>
 8008334:	2300      	movs	r3, #0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10a      	bne.n	8008350 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800833a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833e:	f383 8811 	msr	BASEPRI, r3
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800834c:	bf00      	nop
 800834e:	e7fe      	b.n	800834e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	2b02      	cmp	r3, #2
 8008354:	d103      	bne.n	800835e <xQueueGenericSendFromISR+0x6a>
 8008356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800835a:	2b01      	cmp	r3, #1
 800835c:	d101      	bne.n	8008362 <xQueueGenericSendFromISR+0x6e>
 800835e:	2301      	movs	r3, #1
 8008360:	e000      	b.n	8008364 <xQueueGenericSendFromISR+0x70>
 8008362:	2300      	movs	r3, #0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10a      	bne.n	800837e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	623b      	str	r3, [r7, #32]
}
 800837a:	bf00      	nop
 800837c:	e7fe      	b.n	800837c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800837e:	f7ff fd77 	bl	8007e70 <vPortValidateInterruptPriority>
	__asm volatile
 8008382:	f3ef 8211 	mrs	r2, BASEPRI
 8008386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	61fa      	str	r2, [r7, #28]
 8008398:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800839a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800839c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800839e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d302      	bcc.n	80083b0 <xQueueGenericSendFromISR+0xbc>
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d12f      	bne.n	8008410 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083c0:	683a      	ldr	r2, [r7, #0]
 80083c2:	68b9      	ldr	r1, [r7, #8]
 80083c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083c6:	f000 f911 	bl	80085ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80083ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d2:	d112      	bne.n	80083fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d016      	beq.n	800840a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083de:	3324      	adds	r3, #36	; 0x24
 80083e0:	4618      	mov	r0, r3
 80083e2:	f000 ffbf 	bl	8009364 <xTaskRemoveFromEventList>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00e      	beq.n	800840a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00b      	beq.n	800840a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	601a      	str	r2, [r3, #0]
 80083f8:	e007      	b.n	800840a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80083fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80083fe:	3301      	adds	r3, #1
 8008400:	b2db      	uxtb	r3, r3
 8008402:	b25a      	sxtb	r2, r3
 8008404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800840a:	2301      	movs	r3, #1
 800840c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800840e:	e001      	b.n	8008414 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008410:	2300      	movs	r3, #0
 8008412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008416:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	f383 8811 	msr	BASEPRI, r3
}
 800841e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008422:	4618      	mov	r0, r3
 8008424:	3740      	adds	r7, #64	; 0x40
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
	...

0800842c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b08c      	sub	sp, #48	; 0x30
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008438:	2300      	movs	r3, #0
 800843a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10a      	bne.n	800845c <xQueueReceive+0x30>
	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	623b      	str	r3, [r7, #32]
}
 8008458:	bf00      	nop
 800845a:	e7fe      	b.n	800845a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d103      	bne.n	800846a <xQueueReceive+0x3e>
 8008462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <xQueueReceive+0x42>
 800846a:	2301      	movs	r3, #1
 800846c:	e000      	b.n	8008470 <xQueueReceive+0x44>
 800846e:	2300      	movs	r3, #0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10a      	bne.n	800848a <xQueueReceive+0x5e>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	61fb      	str	r3, [r7, #28]
}
 8008486:	bf00      	nop
 8008488:	e7fe      	b.n	8008488 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800848a:	f001 f997 	bl	80097bc <xTaskGetSchedulerState>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d102      	bne.n	800849a <xQueueReceive+0x6e>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d101      	bne.n	800849e <xQueueReceive+0x72>
 800849a:	2301      	movs	r3, #1
 800849c:	e000      	b.n	80084a0 <xQueueReceive+0x74>
 800849e:	2300      	movs	r3, #0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10a      	bne.n	80084ba <xQueueReceive+0x8e>
	__asm volatile
 80084a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	61bb      	str	r3, [r7, #24]
}
 80084b6:	bf00      	nop
 80084b8:	e7fe      	b.n	80084b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084ba:	f7ff fb13 	bl	8007ae4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d01f      	beq.n	800850a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084ca:	68b9      	ldr	r1, [r7, #8]
 80084cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084ce:	f000 f8f7 	bl	80086c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d4:	1e5a      	subs	r2, r3, #1
 80084d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00f      	beq.n	8008502 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e4:	3310      	adds	r3, #16
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 ff3c 	bl	8009364 <xTaskRemoveFromEventList>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d007      	beq.n	8008502 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80084f2:	4b3d      	ldr	r3, [pc, #244]	; (80085e8 <xQueueReceive+0x1bc>)
 80084f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008502:	f7ff fb1f 	bl	8007b44 <vPortExitCritical>
				return pdPASS;
 8008506:	2301      	movs	r3, #1
 8008508:	e069      	b.n	80085de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d103      	bne.n	8008518 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008510:	f7ff fb18 	bl	8007b44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008514:	2300      	movs	r3, #0
 8008516:	e062      	b.n	80085de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851a:	2b00      	cmp	r3, #0
 800851c:	d106      	bne.n	800852c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800851e:	f107 0310 	add.w	r3, r7, #16
 8008522:	4618      	mov	r0, r3
 8008524:	f000 ff84 	bl	8009430 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008528:	2301      	movs	r3, #1
 800852a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800852c:	f7ff fb0a 	bl	8007b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008530:	f000 fc36 	bl	8008da0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008534:	f7ff fad6 	bl	8007ae4 <vPortEnterCritical>
 8008538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800853e:	b25b      	sxtb	r3, r3
 8008540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008544:	d103      	bne.n	800854e <xQueueReceive+0x122>
 8008546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008548:	2200      	movs	r2, #0
 800854a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800854e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008550:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008554:	b25b      	sxtb	r3, r3
 8008556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855a:	d103      	bne.n	8008564 <xQueueReceive+0x138>
 800855c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855e:	2200      	movs	r2, #0
 8008560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008564:	f7ff faee 	bl	8007b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008568:	1d3a      	adds	r2, r7, #4
 800856a:	f107 0310 	add.w	r3, r7, #16
 800856e:	4611      	mov	r1, r2
 8008570:	4618      	mov	r0, r3
 8008572:	f000 ff73 	bl	800945c <xTaskCheckForTimeOut>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d123      	bne.n	80085c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800857c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800857e:	f000 f917 	bl	80087b0 <prvIsQueueEmpty>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d017      	beq.n	80085b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858a:	3324      	adds	r3, #36	; 0x24
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	4611      	mov	r1, r2
 8008590:	4618      	mov	r0, r3
 8008592:	f000 fe97 	bl	80092c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008598:	f000 f8b8 	bl	800870c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800859c:	f000 fc46 	bl	8008e2c <xTaskResumeAll>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d189      	bne.n	80084ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80085a6:	4b10      	ldr	r3, [pc, #64]	; (80085e8 <xQueueReceive+0x1bc>)
 80085a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	e780      	b.n	80084ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80085b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085ba:	f000 f8a7 	bl	800870c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085be:	f000 fc35 	bl	8008e2c <xTaskResumeAll>
 80085c2:	e77a      	b.n	80084ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80085c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085c6:	f000 f8a1 	bl	800870c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085ca:	f000 fc2f 	bl	8008e2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085d0:	f000 f8ee 	bl	80087b0 <prvIsQueueEmpty>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f43f af6f 	beq.w	80084ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3730      	adds	r7, #48	; 0x30
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	e000ed04 	.word	0xe000ed04

080085ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b086      	sub	sp, #24
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80085f8:	2300      	movs	r3, #0
 80085fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008600:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10d      	bne.n	8008626 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d14d      	bne.n	80086ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	4618      	mov	r0, r3
 8008618:	f001 f8ee 	bl	80097f8 <xTaskPriorityDisinherit>
 800861c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	609a      	str	r2, [r3, #8]
 8008624:	e043      	b.n	80086ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d119      	bne.n	8008660 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6858      	ldr	r0, [r3, #4]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008634:	461a      	mov	r2, r3
 8008636:	68b9      	ldr	r1, [r7, #8]
 8008638:	f001 fdd6 	bl	800a1e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008644:	441a      	add	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	685a      	ldr	r2, [r3, #4]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	429a      	cmp	r2, r3
 8008654:	d32b      	bcc.n	80086ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	605a      	str	r2, [r3, #4]
 800865e:	e026      	b.n	80086ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	68d8      	ldr	r0, [r3, #12]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008668:	461a      	mov	r2, r3
 800866a:	68b9      	ldr	r1, [r7, #8]
 800866c:	f001 fdbc 	bl	800a1e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	68da      	ldr	r2, [r3, #12]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008678:	425b      	negs	r3, r3
 800867a:	441a      	add	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	68da      	ldr	r2, [r3, #12]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	429a      	cmp	r2, r3
 800868a:	d207      	bcs.n	800869c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	689a      	ldr	r2, [r3, #8]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008694:	425b      	negs	r3, r3
 8008696:	441a      	add	r2, r3
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d105      	bne.n	80086ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d002      	beq.n	80086ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	1c5a      	adds	r2, r3, #1
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80086b6:	697b      	ldr	r3, [r7, #20]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3718      	adds	r7, #24
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d018      	beq.n	8008704 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	68da      	ldr	r2, [r3, #12]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086da:	441a      	add	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	68da      	ldr	r2, [r3, #12]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d303      	bcc.n	80086f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68d9      	ldr	r1, [r3, #12]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fc:	461a      	mov	r2, r3
 80086fe:	6838      	ldr	r0, [r7, #0]
 8008700:	f001 fd72 	bl	800a1e8 <memcpy>
	}
}
 8008704:	bf00      	nop
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008714:	f7ff f9e6 	bl	8007ae4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800871e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008720:	e011      	b.n	8008746 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008726:	2b00      	cmp	r3, #0
 8008728:	d012      	beq.n	8008750 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	3324      	adds	r3, #36	; 0x24
 800872e:	4618      	mov	r0, r3
 8008730:	f000 fe18 	bl	8009364 <xTaskRemoveFromEventList>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800873a:	f000 ff01 	bl	8009540 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	3b01      	subs	r3, #1
 8008742:	b2db      	uxtb	r3, r3
 8008744:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800874a:	2b00      	cmp	r3, #0
 800874c:	dce9      	bgt.n	8008722 <prvUnlockQueue+0x16>
 800874e:	e000      	b.n	8008752 <prvUnlockQueue+0x46>
					break;
 8008750:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	22ff      	movs	r2, #255	; 0xff
 8008756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800875a:	f7ff f9f3 	bl	8007b44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800875e:	f7ff f9c1 	bl	8007ae4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008768:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800876a:	e011      	b.n	8008790 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d012      	beq.n	800879a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	3310      	adds	r3, #16
 8008778:	4618      	mov	r0, r3
 800877a:	f000 fdf3 	bl	8009364 <xTaskRemoveFromEventList>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008784:	f000 fedc 	bl	8009540 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008788:	7bbb      	ldrb	r3, [r7, #14]
 800878a:	3b01      	subs	r3, #1
 800878c:	b2db      	uxtb	r3, r3
 800878e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008794:	2b00      	cmp	r3, #0
 8008796:	dce9      	bgt.n	800876c <prvUnlockQueue+0x60>
 8008798:	e000      	b.n	800879c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800879a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	22ff      	movs	r2, #255	; 0xff
 80087a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80087a4:	f7ff f9ce 	bl	8007b44 <vPortExitCritical>
}
 80087a8:	bf00      	nop
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087b8:	f7ff f994 	bl	8007ae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d102      	bne.n	80087ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80087c4:	2301      	movs	r3, #1
 80087c6:	60fb      	str	r3, [r7, #12]
 80087c8:	e001      	b.n	80087ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80087ca:	2300      	movs	r3, #0
 80087cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087ce:	f7ff f9b9 	bl	8007b44 <vPortExitCritical>

	return xReturn;
 80087d2:	68fb      	ldr	r3, [r7, #12]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087e4:	f7ff f97e 	bl	8007ae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d102      	bne.n	80087fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80087f4:	2301      	movs	r3, #1
 80087f6:	60fb      	str	r3, [r7, #12]
 80087f8:	e001      	b.n	80087fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80087fa:	2300      	movs	r3, #0
 80087fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087fe:	f7ff f9a1 	bl	8007b44 <vPortExitCritical>

	return xReturn;
 8008802:	68fb      	ldr	r3, [r7, #12]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]
 800881a:	e014      	b.n	8008846 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800881c:	4a0f      	ldr	r2, [pc, #60]	; (800885c <vQueueAddToRegistry+0x50>)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10b      	bne.n	8008840 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008828:	490c      	ldr	r1, [pc, #48]	; (800885c <vQueueAddToRegistry+0x50>)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008832:	4a0a      	ldr	r2, [pc, #40]	; (800885c <vQueueAddToRegistry+0x50>)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	00db      	lsls	r3, r3, #3
 8008838:	4413      	add	r3, r2
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800883e:	e006      	b.n	800884e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3301      	adds	r3, #1
 8008844:	60fb      	str	r3, [r7, #12]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2b07      	cmp	r3, #7
 800884a:	d9e7      	bls.n	800881c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800884c:	bf00      	nop
 800884e:	bf00      	nop
 8008850:	3714      	adds	r7, #20
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	20004b78 	.word	0x20004b78

08008860 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008870:	f7ff f938 	bl	8007ae4 <vPortEnterCritical>
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800887a:	b25b      	sxtb	r3, r3
 800887c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008880:	d103      	bne.n	800888a <vQueueWaitForMessageRestricted+0x2a>
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008890:	b25b      	sxtb	r3, r3
 8008892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008896:	d103      	bne.n	80088a0 <vQueueWaitForMessageRestricted+0x40>
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088a0:	f7ff f950 	bl	8007b44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d106      	bne.n	80088ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	3324      	adds	r3, #36	; 0x24
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	68b9      	ldr	r1, [r7, #8]
 80088b4:	4618      	mov	r0, r3
 80088b6:	f000 fd29 	bl	800930c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80088ba:	6978      	ldr	r0, [r7, #20]
 80088bc:	f7ff ff26 	bl	800870c <prvUnlockQueue>
	}
 80088c0:	bf00      	nop
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b08e      	sub	sp, #56	; 0x38
 80088cc:	af04      	add	r7, sp, #16
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
 80088d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80088d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10a      	bne.n	80088f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	623b      	str	r3, [r7, #32]
}
 80088ee:	bf00      	nop
 80088f0:	e7fe      	b.n	80088f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80088f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10a      	bne.n	800890e <xTaskCreateStatic+0x46>
	__asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fc:	f383 8811 	msr	BASEPRI, r3
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	61fb      	str	r3, [r7, #28]
}
 800890a:	bf00      	nop
 800890c:	e7fe      	b.n	800890c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800890e:	23cc      	movs	r3, #204	; 0xcc
 8008910:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	2bcc      	cmp	r3, #204	; 0xcc
 8008916:	d00a      	beq.n	800892e <xTaskCreateStatic+0x66>
	__asm volatile
 8008918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	61bb      	str	r3, [r7, #24]
}
 800892a:	bf00      	nop
 800892c:	e7fe      	b.n	800892c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800892e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008932:	2b00      	cmp	r3, #0
 8008934:	d01e      	beq.n	8008974 <xTaskCreateStatic+0xac>
 8008936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008938:	2b00      	cmp	r3, #0
 800893a:	d01b      	beq.n	8008974 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800893c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008944:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008948:	2202      	movs	r2, #2
 800894a:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800894e:	2300      	movs	r3, #0
 8008950:	9303      	str	r3, [sp, #12]
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	9302      	str	r3, [sp, #8]
 8008956:	f107 0314 	add.w	r3, r7, #20
 800895a:	9301      	str	r3, [sp, #4]
 800895c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	68b9      	ldr	r1, [r7, #8]
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f000 f850 	bl	8008a0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800896c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800896e:	f000 f901 	bl	8008b74 <prvAddNewTaskToReadyList>
 8008972:	e001      	b.n	8008978 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008974:	2300      	movs	r3, #0
 8008976:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008978:	697b      	ldr	r3, [r7, #20]
	}
 800897a:	4618      	mov	r0, r3
 800897c:	3728      	adds	r7, #40	; 0x28
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008982:	b580      	push	{r7, lr}
 8008984:	b08c      	sub	sp, #48	; 0x30
 8008986:	af04      	add	r7, sp, #16
 8008988:	60f8      	str	r0, [r7, #12]
 800898a:	60b9      	str	r1, [r7, #8]
 800898c:	603b      	str	r3, [r7, #0]
 800898e:	4613      	mov	r3, r2
 8008990:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008992:	88fb      	ldrh	r3, [r7, #6]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4618      	mov	r0, r3
 8008998:	f7fe fcd2 	bl	8007340 <pvPortMalloc>
 800899c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00e      	beq.n	80089c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80089a4:	20cc      	movs	r0, #204	; 0xcc
 80089a6:	f7fe fccb 	bl	8007340 <pvPortMalloc>
 80089aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d003      	beq.n	80089ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	631a      	str	r2, [r3, #48]	; 0x30
 80089b8:	e005      	b.n	80089c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089ba:	6978      	ldr	r0, [r7, #20]
 80089bc:	f7fe fd90 	bl	80074e0 <vPortFree>
 80089c0:	e001      	b.n	80089c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089c2:	2300      	movs	r3, #0
 80089c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d017      	beq.n	80089fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089d4:	88fa      	ldrh	r2, [r7, #6]
 80089d6:	2300      	movs	r3, #0
 80089d8:	9303      	str	r3, [sp, #12]
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	9302      	str	r3, [sp, #8]
 80089de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e0:	9301      	str	r3, [sp, #4]
 80089e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	68b9      	ldr	r1, [r7, #8]
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f000 f80e 	bl	8008a0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089f0:	69f8      	ldr	r0, [r7, #28]
 80089f2:	f000 f8bf 	bl	8008b74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80089f6:	2301      	movs	r3, #1
 80089f8:	61bb      	str	r3, [r7, #24]
 80089fa:	e002      	b.n	8008a02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80089fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008a00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a02:	69bb      	ldr	r3, [r7, #24]
	}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3720      	adds	r7, #32
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b088      	sub	sp, #32
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
 8008a18:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	461a      	mov	r2, r3
 8008a24:	21a5      	movs	r1, #165	; 0xa5
 8008a26:	f001 fbed 	bl	800a204 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a34:	3b01      	subs	r3, #1
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4413      	add	r3, r2
 8008a3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	f023 0307 	bic.w	r3, r3, #7
 8008a42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	f003 0307 	and.w	r3, r3, #7
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00a      	beq.n	8008a64 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a52:	f383 8811 	msr	BASEPRI, r3
 8008a56:	f3bf 8f6f 	isb	sy
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	617b      	str	r3, [r7, #20]
}
 8008a60:	bf00      	nop
 8008a62:	e7fe      	b.n	8008a62 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8008a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a66:	69ba      	ldr	r2, [r7, #24]
 8008a68:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d01f      	beq.n	8008ab0 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a70:	2300      	movs	r3, #0
 8008a72:	61fb      	str	r3, [r7, #28]
 8008a74:	e012      	b.n	8008a9c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	7819      	ldrb	r1, [r3, #0]
 8008a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	4413      	add	r3, r2
 8008a84:	3334      	adds	r3, #52	; 0x34
 8008a86:	460a      	mov	r2, r1
 8008a88:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	4413      	add	r3, r2
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d006      	beq.n	8008aa4 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	61fb      	str	r3, [r7, #28]
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	2b0f      	cmp	r3, #15
 8008aa0:	d9e9      	bls.n	8008a76 <prvInitialiseNewTask+0x6a>
 8008aa2:	e000      	b.n	8008aa6 <prvInitialiseNewTask+0x9a>
			{
				break;
 8008aa4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008aae:	e003      	b.n	8008ab8 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aba:	2b37      	cmp	r3, #55	; 0x37
 8008abc:	d901      	bls.n	8008ac2 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008abe:	2337      	movs	r3, #55	; 0x37
 8008ac0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ac6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008acc:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8008ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad6:	3304      	adds	r3, #4
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fe fe3f 	bl	800775c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	3318      	adds	r3, #24
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fe fe3a 	bl	800775c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008afc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8008afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b00:	2200      	movs	r2, #0
 8008b02:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8008b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b06:	2200      	movs	r2, #0
 8008b08:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1c:	3360      	adds	r3, #96	; 0x60
 8008b1e:	2260      	movs	r2, #96	; 0x60
 8008b20:	2100      	movs	r1, #0
 8008b22:	4618      	mov	r0, r3
 8008b24:	f001 fb6e 	bl	800a204 <memset>
 8008b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2a:	4a0f      	ldr	r2, [pc, #60]	; (8008b68 <prvInitialiseNewTask+0x15c>)
 8008b2c:	665a      	str	r2, [r3, #100]	; 0x64
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	4a0e      	ldr	r2, [pc, #56]	; (8008b6c <prvInitialiseNewTask+0x160>)
 8008b32:	669a      	str	r2, [r3, #104]	; 0x68
 8008b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b36:	4a0e      	ldr	r2, [pc, #56]	; (8008b70 <prvInitialiseNewTask+0x164>)
 8008b38:	66da      	str	r2, [r3, #108]	; 0x6c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	68f9      	ldr	r1, [r7, #12]
 8008b46:	69b8      	ldr	r0, [r7, #24]
 8008b48:	f7fe fe9c 	bl	8007884 <pxPortInitialiseStack>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d002      	beq.n	8008b5e <prvInitialiseNewTask+0x152>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b5e:	bf00      	nop
 8008b60:	3720      	adds	r7, #32
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	0800a480 	.word	0x0800a480
 8008b6c:	0800a4a0 	.word	0x0800a4a0
 8008b70:	0800a460 	.word	0x0800a460

08008b74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b7c:	f7fe ffb2 	bl	8007ae4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b80:	4b2d      	ldr	r3, [pc, #180]	; (8008c38 <prvAddNewTaskToReadyList+0xc4>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3301      	adds	r3, #1
 8008b86:	4a2c      	ldr	r2, [pc, #176]	; (8008c38 <prvAddNewTaskToReadyList+0xc4>)
 8008b88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b8a:	4b2c      	ldr	r3, [pc, #176]	; (8008c3c <prvAddNewTaskToReadyList+0xc8>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d109      	bne.n	8008ba6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b92:	4a2a      	ldr	r2, [pc, #168]	; (8008c3c <prvAddNewTaskToReadyList+0xc8>)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b98:	4b27      	ldr	r3, [pc, #156]	; (8008c38 <prvAddNewTaskToReadyList+0xc4>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d110      	bne.n	8008bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ba0:	f000 fd4a 	bl	8009638 <prvInitialiseTaskLists>
 8008ba4:	e00d      	b.n	8008bc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ba6:	4b26      	ldr	r3, [pc, #152]	; (8008c40 <prvAddNewTaskToReadyList+0xcc>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d109      	bne.n	8008bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bae:	4b23      	ldr	r3, [pc, #140]	; (8008c3c <prvAddNewTaskToReadyList+0xc8>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d802      	bhi.n	8008bc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008bbc:	4a1f      	ldr	r2, [pc, #124]	; (8008c3c <prvAddNewTaskToReadyList+0xc8>)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008bc2:	4b20      	ldr	r3, [pc, #128]	; (8008c44 <prvAddNewTaskToReadyList+0xd0>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	4a1e      	ldr	r2, [pc, #120]	; (8008c44 <prvAddNewTaskToReadyList+0xd0>)
 8008bca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008bcc:	4b1d      	ldr	r3, [pc, #116]	; (8008c44 <prvAddNewTaskToReadyList+0xd0>)
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd8:	4b1b      	ldr	r3, [pc, #108]	; (8008c48 <prvAddNewTaskToReadyList+0xd4>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d903      	bls.n	8008be8 <prvAddNewTaskToReadyList+0x74>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be4:	4a18      	ldr	r2, [pc, #96]	; (8008c48 <prvAddNewTaskToReadyList+0xd4>)
 8008be6:	6013      	str	r3, [r2, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bec:	4613      	mov	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	4a15      	ldr	r2, [pc, #84]	; (8008c4c <prvAddNewTaskToReadyList+0xd8>)
 8008bf6:	441a      	add	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4610      	mov	r0, r2
 8008c00:	f7fe fdb9 	bl	8007776 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c04:	f7fe ff9e 	bl	8007b44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c08:	4b0d      	ldr	r3, [pc, #52]	; (8008c40 <prvAddNewTaskToReadyList+0xcc>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00e      	beq.n	8008c2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c10:	4b0a      	ldr	r3, [pc, #40]	; (8008c3c <prvAddNewTaskToReadyList+0xc8>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d207      	bcs.n	8008c2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c1e:	4b0c      	ldr	r3, [pc, #48]	; (8008c50 <prvAddNewTaskToReadyList+0xdc>)
 8008c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c2e:	bf00      	nop
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	20005090 	.word	0x20005090
 8008c3c:	20004bb8 	.word	0x20004bb8
 8008c40:	2000509c 	.word	0x2000509c
 8008c44:	200050ac 	.word	0x200050ac
 8008c48:	20005098 	.word	0x20005098
 8008c4c:	20004bbc 	.word	0x20004bbc
 8008c50:	e000ed04 	.word	0xe000ed04

08008c54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d017      	beq.n	8008c96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c66:	4b13      	ldr	r3, [pc, #76]	; (8008cb4 <vTaskDelay+0x60>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00a      	beq.n	8008c84 <vTaskDelay+0x30>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	60bb      	str	r3, [r7, #8]
}
 8008c80:	bf00      	nop
 8008c82:	e7fe      	b.n	8008c82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c84:	f000 f88c 	bl	8008da0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c88:	2100      	movs	r1, #0
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fe22 	bl	80098d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c90:	f000 f8cc 	bl	8008e2c <xTaskResumeAll>
 8008c94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d107      	bne.n	8008cac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008c9c:	4b06      	ldr	r3, [pc, #24]	; (8008cb8 <vTaskDelay+0x64>)
 8008c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	f3bf 8f4f 	dsb	sy
 8008ca8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008cac:	bf00      	nop
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	200050b8 	.word	0x200050b8
 8008cb8:	e000ed04 	.word	0xe000ed04

08008cbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b08a      	sub	sp, #40	; 0x28
 8008cc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008cca:	463a      	mov	r2, r7
 8008ccc:	1d39      	adds	r1, r7, #4
 8008cce:	f107 0308 	add.w	r3, r7, #8
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe fb00 	bl	80072d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	9202      	str	r2, [sp, #8]
 8008ce0:	9301      	str	r3, [sp, #4]
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	460a      	mov	r2, r1
 8008cea:	4925      	ldr	r1, [pc, #148]	; (8008d80 <vTaskStartScheduler+0xc4>)
 8008cec:	4825      	ldr	r0, [pc, #148]	; (8008d84 <vTaskStartScheduler+0xc8>)
 8008cee:	f7ff fdeb 	bl	80088c8 <xTaskCreateStatic>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	4a24      	ldr	r2, [pc, #144]	; (8008d88 <vTaskStartScheduler+0xcc>)
 8008cf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008cf8:	4b23      	ldr	r3, [pc, #140]	; (8008d88 <vTaskStartScheduler+0xcc>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d00:	2301      	movs	r3, #1
 8008d02:	617b      	str	r3, [r7, #20]
 8008d04:	e001      	b.n	8008d0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d06:	2300      	movs	r3, #0
 8008d08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d102      	bne.n	8008d16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d10:	f000 fe3a 	bl	8009988 <xTimerCreateTimerTask>
 8008d14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d11d      	bne.n	8008d58 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d20:	f383 8811 	msr	BASEPRI, r3
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	613b      	str	r3, [r7, #16]
}
 8008d2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d30:	4b16      	ldr	r3, [pc, #88]	; (8008d8c <vTaskStartScheduler+0xd0>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3360      	adds	r3, #96	; 0x60
 8008d36:	4a16      	ldr	r2, [pc, #88]	; (8008d90 <vTaskStartScheduler+0xd4>)
 8008d38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d3a:	4b16      	ldr	r3, [pc, #88]	; (8008d94 <vTaskStartScheduler+0xd8>)
 8008d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d42:	4b15      	ldr	r3, [pc, #84]	; (8008d98 <vTaskStartScheduler+0xdc>)
 8008d44:	2201      	movs	r2, #1
 8008d46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d48:	4b14      	ldr	r3, [pc, #80]	; (8008d9c <vTaskStartScheduler+0xe0>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8008d4e:	f7f8 fca5 	bl	800169c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d52:	f7fe fe25 	bl	80079a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d56:	e00e      	b.n	8008d76 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5e:	d10a      	bne.n	8008d76 <vTaskStartScheduler+0xba>
	__asm volatile
 8008d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d64:	f383 8811 	msr	BASEPRI, r3
 8008d68:	f3bf 8f6f 	isb	sy
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	60fb      	str	r3, [r7, #12]
}
 8008d72:	bf00      	nop
 8008d74:	e7fe      	b.n	8008d74 <vTaskStartScheduler+0xb8>
}
 8008d76:	bf00      	nop
 8008d78:	3718      	adds	r7, #24
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	0800a3cc 	.word	0x0800a3cc
 8008d84:	08009559 	.word	0x08009559
 8008d88:	200050b4 	.word	0x200050b4
 8008d8c:	20004bb8 	.word	0x20004bb8
 8008d90:	20000010 	.word	0x20000010
 8008d94:	200050b0 	.word	0x200050b0
 8008d98:	2000509c 	.word	0x2000509c
 8008d9c:	20005094 	.word	0x20005094

08008da0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008da0:	b480      	push	{r7}
 8008da2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008da4:	4b04      	ldr	r3, [pc, #16]	; (8008db8 <vTaskSuspendAll+0x18>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	3301      	adds	r3, #1
 8008daa:	4a03      	ldr	r2, [pc, #12]	; (8008db8 <vTaskSuspendAll+0x18>)
 8008dac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008dae:	bf00      	nop
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	200050b8 	.word	0x200050b8

08008dbc <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8008dc6:	4b14      	ldr	r3, [pc, #80]	; (8008e18 <prvGetExpectedIdleTime+0x5c>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8008dd2:	4b12      	ldr	r3, [pc, #72]	; (8008e1c <prvGetExpectedIdleTime+0x60>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d002      	beq.n	8008de2 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	607b      	str	r3, [r7, #4]
 8008de0:	e012      	b.n	8008e08 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8008de2:	4b0f      	ldr	r3, [pc, #60]	; (8008e20 <prvGetExpectedIdleTime+0x64>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d902      	bls.n	8008df0 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8008dea:	2300      	movs	r3, #0
 8008dec:	607b      	str	r3, [r7, #4]
 8008dee:	e00b      	b.n	8008e08 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d002      	beq.n	8008dfc <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8008df6:	2300      	movs	r3, #0
 8008df8:	607b      	str	r3, [r7, #4]
 8008dfa:	e005      	b.n	8008e08 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8008dfc:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <prvGetExpectedIdleTime+0x68>)
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	4b09      	ldr	r3, [pc, #36]	; (8008e28 <prvGetExpectedIdleTime+0x6c>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8008e08:	687b      	ldr	r3, [r7, #4]
	}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	370c      	adds	r7, #12
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	20005098 	.word	0x20005098
 8008e1c:	20004bb8 	.word	0x20004bb8
 8008e20:	20004bbc 	.word	0x20004bbc
 8008e24:	200050b0 	.word	0x200050b0
 8008e28:	20005094 	.word	0x20005094

08008e2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e32:	2300      	movs	r3, #0
 8008e34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e36:	2300      	movs	r3, #0
 8008e38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e3a:	4b42      	ldr	r3, [pc, #264]	; (8008f44 <xTaskResumeAll+0x118>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10a      	bne.n	8008e58 <xTaskResumeAll+0x2c>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	603b      	str	r3, [r7, #0]
}
 8008e54:	bf00      	nop
 8008e56:	e7fe      	b.n	8008e56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e58:	f7fe fe44 	bl	8007ae4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e5c:	4b39      	ldr	r3, [pc, #228]	; (8008f44 <xTaskResumeAll+0x118>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3b01      	subs	r3, #1
 8008e62:	4a38      	ldr	r2, [pc, #224]	; (8008f44 <xTaskResumeAll+0x118>)
 8008e64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e66:	4b37      	ldr	r3, [pc, #220]	; (8008f44 <xTaskResumeAll+0x118>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d162      	bne.n	8008f34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e6e:	4b36      	ldr	r3, [pc, #216]	; (8008f48 <xTaskResumeAll+0x11c>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d05e      	beq.n	8008f34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e76:	e02f      	b.n	8008ed8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e78:	4b34      	ldr	r3, [pc, #208]	; (8008f4c <xTaskResumeAll+0x120>)
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	3318      	adds	r3, #24
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7fe fcd3 	bl	8007830 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fe fcce 	bl	8007830 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e98:	4b2d      	ldr	r3, [pc, #180]	; (8008f50 <xTaskResumeAll+0x124>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d903      	bls.n	8008ea8 <xTaskResumeAll+0x7c>
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea4:	4a2a      	ldr	r2, [pc, #168]	; (8008f50 <xTaskResumeAll+0x124>)
 8008ea6:	6013      	str	r3, [r2, #0]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eac:	4613      	mov	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	4413      	add	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4a27      	ldr	r2, [pc, #156]	; (8008f54 <xTaskResumeAll+0x128>)
 8008eb6:	441a      	add	r2, r3
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	3304      	adds	r3, #4
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	f7fe fc59 	bl	8007776 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec8:	4b23      	ldr	r3, [pc, #140]	; (8008f58 <xTaskResumeAll+0x12c>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d302      	bcc.n	8008ed8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008ed2:	4b22      	ldr	r3, [pc, #136]	; (8008f5c <xTaskResumeAll+0x130>)
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ed8:	4b1c      	ldr	r3, [pc, #112]	; (8008f4c <xTaskResumeAll+0x120>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1cb      	bne.n	8008e78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008ee6:	f000 fc49 	bl	800977c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008eea:	4b1d      	ldr	r3, [pc, #116]	; (8008f60 <xTaskResumeAll+0x134>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d010      	beq.n	8008f18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ef6:	f000 f86f 	bl	8008fd8 <xTaskIncrementTick>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d002      	beq.n	8008f06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008f00:	4b16      	ldr	r3, [pc, #88]	; (8008f5c <xTaskResumeAll+0x130>)
 8008f02:	2201      	movs	r2, #1
 8008f04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1f1      	bne.n	8008ef6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008f12:	4b13      	ldr	r3, [pc, #76]	; (8008f60 <xTaskResumeAll+0x134>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f18:	4b10      	ldr	r3, [pc, #64]	; (8008f5c <xTaskResumeAll+0x130>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d009      	beq.n	8008f34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f20:	2301      	movs	r3, #1
 8008f22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f24:	4b0f      	ldr	r3, [pc, #60]	; (8008f64 <xTaskResumeAll+0x138>)
 8008f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f2a:	601a      	str	r2, [r3, #0]
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f34:	f7fe fe06 	bl	8007b44 <vPortExitCritical>

	return xAlreadyYielded;
 8008f38:	68bb      	ldr	r3, [r7, #8]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	200050b8 	.word	0x200050b8
 8008f48:	20005090 	.word	0x20005090
 8008f4c:	2000504c 	.word	0x2000504c
 8008f50:	20005098 	.word	0x20005098
 8008f54:	20004bbc 	.word	0x20004bbc
 8008f58:	20004bb8 	.word	0x20004bb8
 8008f5c:	200050a4 	.word	0x200050a4
 8008f60:	200050a0 	.word	0x200050a0
 8008f64:	e000ed04 	.word	0xe000ed04

08008f68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f6e:	4b05      	ldr	r3, [pc, #20]	; (8008f84 <xTaskGetTickCount+0x1c>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f74:	687b      	ldr	r3, [r7, #4]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	20005094 	.word	0x20005094

08008f88 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8008f90:	4b0f      	ldr	r3, [pc, #60]	; (8008fd0 <vTaskStepTick+0x48>)
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	441a      	add	r2, r3
 8008f98:	4b0e      	ldr	r3, [pc, #56]	; (8008fd4 <vTaskStepTick+0x4c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d90a      	bls.n	8008fb6 <vTaskStepTick+0x2e>
	__asm volatile
 8008fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa4:	f383 8811 	msr	BASEPRI, r3
 8008fa8:	f3bf 8f6f 	isb	sy
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	60fb      	str	r3, [r7, #12]
}
 8008fb2:	bf00      	nop
 8008fb4:	e7fe      	b.n	8008fb4 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 8008fb6:	4b06      	ldr	r3, [pc, #24]	; (8008fd0 <vTaskStepTick+0x48>)
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	4a04      	ldr	r2, [pc, #16]	; (8008fd0 <vTaskStepTick+0x48>)
 8008fc0:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8008fc2:	bf00      	nop
 8008fc4:	3714      	adds	r7, #20
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	20005094 	.word	0x20005094
 8008fd4:	200050b0 	.word	0x200050b0

08008fd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fe2:	4b53      	ldr	r3, [pc, #332]	; (8009130 <xTaskIncrementTick+0x158>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f040 8095 	bne.w	8009116 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008fec:	4b51      	ldr	r3, [pc, #324]	; (8009134 <xTaskIncrementTick+0x15c>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ff4:	4a4f      	ldr	r2, [pc, #316]	; (8009134 <xTaskIncrementTick+0x15c>)
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d120      	bne.n	8009042 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009000:	4b4d      	ldr	r3, [pc, #308]	; (8009138 <xTaskIncrementTick+0x160>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00a      	beq.n	8009020 <xTaskIncrementTick+0x48>
	__asm volatile
 800900a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	603b      	str	r3, [r7, #0]
}
 800901c:	bf00      	nop
 800901e:	e7fe      	b.n	800901e <xTaskIncrementTick+0x46>
 8009020:	4b45      	ldr	r3, [pc, #276]	; (8009138 <xTaskIncrementTick+0x160>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	60fb      	str	r3, [r7, #12]
 8009026:	4b45      	ldr	r3, [pc, #276]	; (800913c <xTaskIncrementTick+0x164>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a43      	ldr	r2, [pc, #268]	; (8009138 <xTaskIncrementTick+0x160>)
 800902c:	6013      	str	r3, [r2, #0]
 800902e:	4a43      	ldr	r2, [pc, #268]	; (800913c <xTaskIncrementTick+0x164>)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6013      	str	r3, [r2, #0]
 8009034:	4b42      	ldr	r3, [pc, #264]	; (8009140 <xTaskIncrementTick+0x168>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	3301      	adds	r3, #1
 800903a:	4a41      	ldr	r2, [pc, #260]	; (8009140 <xTaskIncrementTick+0x168>)
 800903c:	6013      	str	r3, [r2, #0]
 800903e:	f000 fb9d 	bl	800977c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009042:	4b40      	ldr	r3, [pc, #256]	; (8009144 <xTaskIncrementTick+0x16c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	429a      	cmp	r2, r3
 800904a:	d349      	bcc.n	80090e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800904c:	4b3a      	ldr	r3, [pc, #232]	; (8009138 <xTaskIncrementTick+0x160>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d104      	bne.n	8009060 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009056:	4b3b      	ldr	r3, [pc, #236]	; (8009144 <xTaskIncrementTick+0x16c>)
 8009058:	f04f 32ff 	mov.w	r2, #4294967295
 800905c:	601a      	str	r2, [r3, #0]
					break;
 800905e:	e03f      	b.n	80090e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009060:	4b35      	ldr	r3, [pc, #212]	; (8009138 <xTaskIncrementTick+0x160>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009070:	693a      	ldr	r2, [r7, #16]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	429a      	cmp	r2, r3
 8009076:	d203      	bcs.n	8009080 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009078:	4a32      	ldr	r2, [pc, #200]	; (8009144 <xTaskIncrementTick+0x16c>)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800907e:	e02f      	b.n	80090e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	3304      	adds	r3, #4
 8009084:	4618      	mov	r0, r3
 8009086:	f7fe fbd3 	bl	8007830 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800908e:	2b00      	cmp	r3, #0
 8009090:	d004      	beq.n	800909c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	3318      	adds	r3, #24
 8009096:	4618      	mov	r0, r3
 8009098:	f7fe fbca 	bl	8007830 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a0:	4b29      	ldr	r3, [pc, #164]	; (8009148 <xTaskIncrementTick+0x170>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d903      	bls.n	80090b0 <xTaskIncrementTick+0xd8>
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ac:	4a26      	ldr	r2, [pc, #152]	; (8009148 <xTaskIncrementTick+0x170>)
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b4:	4613      	mov	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	4a23      	ldr	r2, [pc, #140]	; (800914c <xTaskIncrementTick+0x174>)
 80090be:	441a      	add	r2, r3
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	3304      	adds	r3, #4
 80090c4:	4619      	mov	r1, r3
 80090c6:	4610      	mov	r0, r2
 80090c8:	f7fe fb55 	bl	8007776 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d0:	4b1f      	ldr	r3, [pc, #124]	; (8009150 <xTaskIncrementTick+0x178>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d3b8      	bcc.n	800904c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80090da:	2301      	movs	r3, #1
 80090dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090de:	e7b5      	b.n	800904c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090e0:	4b1b      	ldr	r3, [pc, #108]	; (8009150 <xTaskIncrementTick+0x178>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e6:	4919      	ldr	r1, [pc, #100]	; (800914c <xTaskIncrementTick+0x174>)
 80090e8:	4613      	mov	r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	4413      	add	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	440b      	add	r3, r1
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d901      	bls.n	80090fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80090f8:	2301      	movs	r3, #1
 80090fa:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80090fc:	4b15      	ldr	r3, [pc, #84]	; (8009154 <xTaskIncrementTick+0x17c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d101      	bne.n	8009108 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8009104:	f7f8 fae0 	bl	80016c8 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009108:	4b13      	ldr	r3, [pc, #76]	; (8009158 <xTaskIncrementTick+0x180>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d009      	beq.n	8009124 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8009110:	2301      	movs	r3, #1
 8009112:	617b      	str	r3, [r7, #20]
 8009114:	e006      	b.n	8009124 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009116:	4b0f      	ldr	r3, [pc, #60]	; (8009154 <xTaskIncrementTick+0x17c>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	3301      	adds	r3, #1
 800911c:	4a0d      	ldr	r2, [pc, #52]	; (8009154 <xTaskIncrementTick+0x17c>)
 800911e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8009120:	f7f8 fad2 	bl	80016c8 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8009124:	697b      	ldr	r3, [r7, #20]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3718      	adds	r7, #24
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	200050b8 	.word	0x200050b8
 8009134:	20005094 	.word	0x20005094
 8009138:	20005044 	.word	0x20005044
 800913c:	20005048 	.word	0x20005048
 8009140:	200050a8 	.word	0x200050a8
 8009144:	200050b0 	.word	0x200050b0
 8009148:	20005098 	.word	0x20005098
 800914c:	20004bbc 	.word	0x20004bbc
 8009150:	20004bb8 	.word	0x20004bb8
 8009154:	200050a0 	.word	0x200050a0
 8009158:	200050a4 	.word	0x200050a4

0800915c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009162:	4b4f      	ldr	r3, [pc, #316]	; (80092a0 <vTaskSwitchContext+0x144>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d003      	beq.n	8009172 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800916a:	4b4e      	ldr	r3, [pc, #312]	; (80092a4 <vTaskSwitchContext+0x148>)
 800916c:	2201      	movs	r2, #1
 800916e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009170:	e092      	b.n	8009298 <vTaskSwitchContext+0x13c>
		xYieldPending = pdFALSE;
 8009172:	4b4c      	ldr	r3, [pc, #304]	; (80092a4 <vTaskSwitchContext+0x148>)
 8009174:	2200      	movs	r2, #0
 8009176:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009178:	f7f8 fa97 	bl	80016aa <getRunTimeCounterValue>
 800917c:	4603      	mov	r3, r0
 800917e:	4a4a      	ldr	r2, [pc, #296]	; (80092a8 <vTaskSwitchContext+0x14c>)
 8009180:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009182:	4b49      	ldr	r3, [pc, #292]	; (80092a8 <vTaskSwitchContext+0x14c>)
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	4b49      	ldr	r3, [pc, #292]	; (80092ac <vTaskSwitchContext+0x150>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	429a      	cmp	r2, r3
 800918c:	d909      	bls.n	80091a2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800918e:	4b48      	ldr	r3, [pc, #288]	; (80092b0 <vTaskSwitchContext+0x154>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8009194:	4a44      	ldr	r2, [pc, #272]	; (80092a8 <vTaskSwitchContext+0x14c>)
 8009196:	6810      	ldr	r0, [r2, #0]
 8009198:	4a44      	ldr	r2, [pc, #272]	; (80092ac <vTaskSwitchContext+0x150>)
 800919a:	6812      	ldr	r2, [r2, #0]
 800919c:	1a82      	subs	r2, r0, r2
 800919e:	440a      	add	r2, r1
 80091a0:	65da      	str	r2, [r3, #92]	; 0x5c
			ulTaskSwitchedInTime = ulTotalRunTime;
 80091a2:	4b41      	ldr	r3, [pc, #260]	; (80092a8 <vTaskSwitchContext+0x14c>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a41      	ldr	r2, [pc, #260]	; (80092ac <vTaskSwitchContext+0x150>)
 80091a8:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80091aa:	4b41      	ldr	r3, [pc, #260]	; (80092b0 <vTaskSwitchContext+0x154>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b0:	613b      	str	r3, [r7, #16]
 80091b2:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80091b6:	60fb      	str	r3, [r7, #12]
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d111      	bne.n	80091e6 <vTaskSwitchContext+0x8a>
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	3304      	adds	r3, #4
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d10b      	bne.n	80091e6 <vTaskSwitchContext+0x8a>
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	3308      	adds	r3, #8
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d105      	bne.n	80091e6 <vTaskSwitchContext+0x8a>
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	330c      	adds	r3, #12
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d008      	beq.n	80091f8 <vTaskSwitchContext+0x9c>
 80091e6:	4b32      	ldr	r3, [pc, #200]	; (80092b0 <vTaskSwitchContext+0x154>)
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	4b31      	ldr	r3, [pc, #196]	; (80092b0 <vTaskSwitchContext+0x154>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	3334      	adds	r3, #52	; 0x34
 80091f0:	4619      	mov	r1, r3
 80091f2:	4610      	mov	r0, r2
 80091f4:	f7f8 fa6f 	bl	80016d6 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 80091f8:	4b2d      	ldr	r3, [pc, #180]	; (80092b0 <vTaskSwitchContext+0x154>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a2d      	ldr	r2, [pc, #180]	; (80092b4 <vTaskSwitchContext+0x158>)
 80091fe:	6812      	ldr	r2, [r2, #0]
 8009200:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009204:	4b2c      	ldr	r3, [pc, #176]	; (80092b8 <vTaskSwitchContext+0x15c>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	617b      	str	r3, [r7, #20]
 800920a:	e010      	b.n	800922e <vTaskSwitchContext+0xd2>
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d10a      	bne.n	8009228 <vTaskSwitchContext+0xcc>
	__asm volatile
 8009212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009216:	f383 8811 	msr	BASEPRI, r3
 800921a:	f3bf 8f6f 	isb	sy
 800921e:	f3bf 8f4f 	dsb	sy
 8009222:	607b      	str	r3, [r7, #4]
}
 8009224:	bf00      	nop
 8009226:	e7fe      	b.n	8009226 <vTaskSwitchContext+0xca>
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	3b01      	subs	r3, #1
 800922c:	617b      	str	r3, [r7, #20]
 800922e:	4923      	ldr	r1, [pc, #140]	; (80092bc <vTaskSwitchContext+0x160>)
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	4613      	mov	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	4413      	add	r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	440b      	add	r3, r1
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0e4      	beq.n	800920c <vTaskSwitchContext+0xb0>
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	4613      	mov	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4a1b      	ldr	r2, [pc, #108]	; (80092bc <vTaskSwitchContext+0x160>)
 800924e:	4413      	add	r3, r2
 8009250:	60bb      	str	r3, [r7, #8]
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	685a      	ldr	r2, [r3, #4]
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	605a      	str	r2, [r3, #4]
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	3308      	adds	r3, #8
 8009264:	429a      	cmp	r2, r3
 8009266:	d104      	bne.n	8009272 <vTaskSwitchContext+0x116>
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	605a      	str	r2, [r3, #4]
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	4a0d      	ldr	r2, [pc, #52]	; (80092b0 <vTaskSwitchContext+0x154>)
 800927a:	6013      	str	r3, [r2, #0]
 800927c:	4a0e      	ldr	r2, [pc, #56]	; (80092b8 <vTaskSwitchContext+0x15c>)
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 8009282:	4b0b      	ldr	r3, [pc, #44]	; (80092b0 <vTaskSwitchContext+0x154>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800928a:	4a0a      	ldr	r2, [pc, #40]	; (80092b4 <vTaskSwitchContext+0x158>)
 800928c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800928e:	4b08      	ldr	r3, [pc, #32]	; (80092b0 <vTaskSwitchContext+0x154>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	3360      	adds	r3, #96	; 0x60
 8009294:	4a0a      	ldr	r2, [pc, #40]	; (80092c0 <vTaskSwitchContext+0x164>)
 8009296:	6013      	str	r3, [r2, #0]
}
 8009298:	bf00      	nop
 800929a:	3718      	adds	r7, #24
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	200050b8 	.word	0x200050b8
 80092a4:	200050a4 	.word	0x200050a4
 80092a8:	200050c0 	.word	0x200050c0
 80092ac:	200050bc 	.word	0x200050bc
 80092b0:	20004bb8 	.word	0x20004bb8
 80092b4:	2000508c 	.word	0x2000508c
 80092b8:	20005098 	.word	0x20005098
 80092bc:	20004bbc 	.word	0x20004bbc
 80092c0:	20000010 	.word	0x20000010

080092c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10a      	bne.n	80092ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80092d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	60fb      	str	r3, [r7, #12]
}
 80092e6:	bf00      	nop
 80092e8:	e7fe      	b.n	80092e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092ea:	4b07      	ldr	r3, [pc, #28]	; (8009308 <vTaskPlaceOnEventList+0x44>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	3318      	adds	r3, #24
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7fe fa63 	bl	80077be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092f8:	2101      	movs	r1, #1
 80092fa:	6838      	ldr	r0, [r7, #0]
 80092fc:	f000 faea 	bl	80098d4 <prvAddCurrentTaskToDelayedList>
}
 8009300:	bf00      	nop
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	20004bb8 	.word	0x20004bb8

0800930c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10a      	bne.n	8009334 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800931e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	617b      	str	r3, [r7, #20]
}
 8009330:	bf00      	nop
 8009332:	e7fe      	b.n	8009332 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009334:	4b0a      	ldr	r3, [pc, #40]	; (8009360 <vTaskPlaceOnEventListRestricted+0x54>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	3318      	adds	r3, #24
 800933a:	4619      	mov	r1, r3
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f7fe fa1a 	bl	8007776 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d002      	beq.n	800934e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009348:	f04f 33ff 	mov.w	r3, #4294967295
 800934c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800934e:	6879      	ldr	r1, [r7, #4]
 8009350:	68b8      	ldr	r0, [r7, #8]
 8009352:	f000 fabf 	bl	80098d4 <prvAddCurrentTaskToDelayedList>
	}
 8009356:	bf00      	nop
 8009358:	3718      	adds	r7, #24
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	20004bb8 	.word	0x20004bb8

08009364 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d10a      	bne.n	8009390 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800937a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937e:	f383 8811 	msr	BASEPRI, r3
 8009382:	f3bf 8f6f 	isb	sy
 8009386:	f3bf 8f4f 	dsb	sy
 800938a:	60fb      	str	r3, [r7, #12]
}
 800938c:	bf00      	nop
 800938e:	e7fe      	b.n	800938e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	3318      	adds	r3, #24
 8009394:	4618      	mov	r0, r3
 8009396:	f7fe fa4b 	bl	8007830 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800939a:	4b1f      	ldr	r3, [pc, #124]	; (8009418 <xTaskRemoveFromEventList+0xb4>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d11f      	bne.n	80093e2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	3304      	adds	r3, #4
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7fe fa42 	bl	8007830 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b0:	4b1a      	ldr	r3, [pc, #104]	; (800941c <xTaskRemoveFromEventList+0xb8>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d903      	bls.n	80093c0 <xTaskRemoveFromEventList+0x5c>
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093bc:	4a17      	ldr	r2, [pc, #92]	; (800941c <xTaskRemoveFromEventList+0xb8>)
 80093be:	6013      	str	r3, [r2, #0]
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c4:	4613      	mov	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4413      	add	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	4a14      	ldr	r2, [pc, #80]	; (8009420 <xTaskRemoveFromEventList+0xbc>)
 80093ce:	441a      	add	r2, r3
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	3304      	adds	r3, #4
 80093d4:	4619      	mov	r1, r3
 80093d6:	4610      	mov	r0, r2
 80093d8:	f7fe f9cd 	bl	8007776 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 80093dc:	f000 f9ce 	bl	800977c <prvResetNextTaskUnblockTime>
 80093e0:	e005      	b.n	80093ee <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	3318      	adds	r3, #24
 80093e6:	4619      	mov	r1, r3
 80093e8:	480e      	ldr	r0, [pc, #56]	; (8009424 <xTaskRemoveFromEventList+0xc0>)
 80093ea:	f7fe f9c4 	bl	8007776 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f2:	4b0d      	ldr	r3, [pc, #52]	; (8009428 <xTaskRemoveFromEventList+0xc4>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d905      	bls.n	8009408 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80093fc:	2301      	movs	r3, #1
 80093fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009400:	4b0a      	ldr	r3, [pc, #40]	; (800942c <xTaskRemoveFromEventList+0xc8>)
 8009402:	2201      	movs	r2, #1
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	e001      	b.n	800940c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009408:	2300      	movs	r3, #0
 800940a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800940c:	697b      	ldr	r3, [r7, #20]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3718      	adds	r7, #24
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	200050b8 	.word	0x200050b8
 800941c:	20005098 	.word	0x20005098
 8009420:	20004bbc 	.word	0x20004bbc
 8009424:	2000504c 	.word	0x2000504c
 8009428:	20004bb8 	.word	0x20004bb8
 800942c:	200050a4 	.word	0x200050a4

08009430 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009438:	4b06      	ldr	r3, [pc, #24]	; (8009454 <vTaskInternalSetTimeOutState+0x24>)
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009440:	4b05      	ldr	r3, [pc, #20]	; (8009458 <vTaskInternalSetTimeOutState+0x28>)
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	605a      	str	r2, [r3, #4]
}
 8009448:	bf00      	nop
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr
 8009454:	200050a8 	.word	0x200050a8
 8009458:	20005094 	.word	0x20005094

0800945c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b088      	sub	sp, #32
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10a      	bne.n	8009482 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800946c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	613b      	str	r3, [r7, #16]
}
 800947e:	bf00      	nop
 8009480:	e7fe      	b.n	8009480 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10a      	bne.n	800949e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	60fb      	str	r3, [r7, #12]
}
 800949a:	bf00      	nop
 800949c:	e7fe      	b.n	800949c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800949e:	f7fe fb21 	bl	8007ae4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80094a2:	4b24      	ldr	r3, [pc, #144]	; (8009534 <xTaskCheckForTimeOut+0xd8>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	69ba      	ldr	r2, [r7, #24]
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 80094b2:	4b21      	ldr	r3, [pc, #132]	; (8009538 <xTaskCheckForTimeOut+0xdc>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d007      	beq.n	80094ce <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 80094be:	4b1e      	ldr	r3, [pc, #120]	; (8009538 <xTaskCheckForTimeOut+0xdc>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				xReturn = pdTRUE;
 80094c8:	2301      	movs	r3, #1
 80094ca:	61fb      	str	r3, [r7, #28]
 80094cc:	e02b      	b.n	8009526 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d6:	d102      	bne.n	80094de <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80094d8:	2300      	movs	r3, #0
 80094da:	61fb      	str	r3, [r7, #28]
 80094dc:	e023      	b.n	8009526 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	4b16      	ldr	r3, [pc, #88]	; (800953c <xTaskCheckForTimeOut+0xe0>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d007      	beq.n	80094fa <xTaskCheckForTimeOut+0x9e>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	69ba      	ldr	r2, [r7, #24]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d302      	bcc.n	80094fa <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80094f4:	2301      	movs	r3, #1
 80094f6:	61fb      	str	r3, [r7, #28]
 80094f8:	e015      	b.n	8009526 <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	429a      	cmp	r2, r3
 8009502:	d20b      	bcs.n	800951c <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	1ad2      	subs	r2, r2, r3
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f7ff ff8d 	bl	8009430 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009516:	2300      	movs	r3, #0
 8009518:	61fb      	str	r3, [r7, #28]
 800951a:	e004      	b.n	8009526 <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	2200      	movs	r2, #0
 8009520:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009522:	2301      	movs	r3, #1
 8009524:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009526:	f7fe fb0d 	bl	8007b44 <vPortExitCritical>

	return xReturn;
 800952a:	69fb      	ldr	r3, [r7, #28]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3720      	adds	r7, #32
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	20005094 	.word	0x20005094
 8009538:	20004bb8 	.word	0x20004bb8
 800953c:	200050a8 	.word	0x200050a8

08009540 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009540:	b480      	push	{r7}
 8009542:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009544:	4b03      	ldr	r3, [pc, #12]	; (8009554 <vTaskMissedYield+0x14>)
 8009546:	2201      	movs	r2, #1
 8009548:	601a      	str	r2, [r3, #0]
}
 800954a:	bf00      	nop
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	200050a4 	.word	0x200050a4

08009558 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009560:	f000 f8aa 	bl	80096b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009564:	4b19      	ldr	r3, [pc, #100]	; (80095cc <prvIdleTask+0x74>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d907      	bls.n	800957c <prvIdleTask+0x24>
			{
				taskYIELD();
 800956c:	4b18      	ldr	r3, [pc, #96]	; (80095d0 <prvIdleTask+0x78>)
 800956e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800957c:	f7f8 f89d 	bl	80016ba <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8009580:	f7ff fc1c 	bl	8008dbc <prvGetExpectedIdleTime>
 8009584:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2b01      	cmp	r3, #1
 800958a:	d9e9      	bls.n	8009560 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800958c:	f7ff fc08 	bl	8008da0 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8009590:	4b10      	ldr	r3, [pc, #64]	; (80095d4 <prvIdleTask+0x7c>)
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	4b10      	ldr	r3, [pc, #64]	; (80095d8 <prvIdleTask+0x80>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	429a      	cmp	r2, r3
 800959a:	d20a      	bcs.n	80095b2 <prvIdleTask+0x5a>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	60bb      	str	r3, [r7, #8]
}
 80095ae:	bf00      	nop
 80095b0:	e7fe      	b.n	80095b0 <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 80095b2:	f7ff fc03 	bl	8008dbc <prvGetExpectedIdleTime>
 80095b6:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d902      	bls.n	80095c4 <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f7fe fb44 	bl	8007c4c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 80095c4:	f7ff fc32 	bl	8008e2c <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 80095c8:	e7ca      	b.n	8009560 <prvIdleTask+0x8>
 80095ca:	bf00      	nop
 80095cc:	20004bbc 	.word	0x20004bbc
 80095d0:	e000ed04 	.word	0xe000ed04
 80095d4:	200050b0 	.word	0x200050b0
 80095d8:	20005094 	.word	0x20005094

080095dc <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 80095e2:	2301      	movs	r3, #1
 80095e4:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 80095e6:	2301      	movs	r3, #1
 80095e8:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 80095ea:	4b0f      	ldr	r3, [pc, #60]	; (8009628 <eTaskConfirmSleepModeStatus+0x4c>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d002      	beq.n	80095f8 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80095f2:	2300      	movs	r3, #0
 80095f4:	71fb      	strb	r3, [r7, #7]
 80095f6:	e010      	b.n	800961a <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 80095f8:	4b0c      	ldr	r3, [pc, #48]	; (800962c <eTaskConfirmSleepModeStatus+0x50>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8009600:	2300      	movs	r3, #0
 8009602:	71fb      	strb	r3, [r7, #7]
 8009604:	e009      	b.n	800961a <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8009606:	4b0a      	ldr	r3, [pc, #40]	; (8009630 <eTaskConfirmSleepModeStatus+0x54>)
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	4b0a      	ldr	r3, [pc, #40]	; (8009634 <eTaskConfirmSleepModeStatus+0x58>)
 800960c:	6819      	ldr	r1, [r3, #0]
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	1acb      	subs	r3, r1, r3
 8009612:	429a      	cmp	r2, r3
 8009614:	d101      	bne.n	800961a <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8009616:	2302      	movs	r3, #2
 8009618:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800961a:	79fb      	ldrb	r3, [r7, #7]
	}
 800961c:	4618      	mov	r0, r3
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	2000504c 	.word	0x2000504c
 800962c:	200050a4 	.word	0x200050a4
 8009630:	20005078 	.word	0x20005078
 8009634:	20005090 	.word	0x20005090

08009638 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800963e:	2300      	movs	r3, #0
 8009640:	607b      	str	r3, [r7, #4]
 8009642:	e00c      	b.n	800965e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	4613      	mov	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	4413      	add	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	4a12      	ldr	r2, [pc, #72]	; (8009698 <prvInitialiseTaskLists+0x60>)
 8009650:	4413      	add	r3, r2
 8009652:	4618      	mov	r0, r3
 8009654:	f7fe f862 	bl	800771c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	3301      	adds	r3, #1
 800965c:	607b      	str	r3, [r7, #4]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2b37      	cmp	r3, #55	; 0x37
 8009662:	d9ef      	bls.n	8009644 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009664:	480d      	ldr	r0, [pc, #52]	; (800969c <prvInitialiseTaskLists+0x64>)
 8009666:	f7fe f859 	bl	800771c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800966a:	480d      	ldr	r0, [pc, #52]	; (80096a0 <prvInitialiseTaskLists+0x68>)
 800966c:	f7fe f856 	bl	800771c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009670:	480c      	ldr	r0, [pc, #48]	; (80096a4 <prvInitialiseTaskLists+0x6c>)
 8009672:	f7fe f853 	bl	800771c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009676:	480c      	ldr	r0, [pc, #48]	; (80096a8 <prvInitialiseTaskLists+0x70>)
 8009678:	f7fe f850 	bl	800771c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800967c:	480b      	ldr	r0, [pc, #44]	; (80096ac <prvInitialiseTaskLists+0x74>)
 800967e:	f7fe f84d 	bl	800771c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009682:	4b0b      	ldr	r3, [pc, #44]	; (80096b0 <prvInitialiseTaskLists+0x78>)
 8009684:	4a05      	ldr	r2, [pc, #20]	; (800969c <prvInitialiseTaskLists+0x64>)
 8009686:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009688:	4b0a      	ldr	r3, [pc, #40]	; (80096b4 <prvInitialiseTaskLists+0x7c>)
 800968a:	4a05      	ldr	r2, [pc, #20]	; (80096a0 <prvInitialiseTaskLists+0x68>)
 800968c:	601a      	str	r2, [r3, #0]
}
 800968e:	bf00      	nop
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	20004bbc 	.word	0x20004bbc
 800969c:	2000501c 	.word	0x2000501c
 80096a0:	20005030 	.word	0x20005030
 80096a4:	2000504c 	.word	0x2000504c
 80096a8:	20005060 	.word	0x20005060
 80096ac:	20005078 	.word	0x20005078
 80096b0:	20005044 	.word	0x20005044
 80096b4:	20005048 	.word	0x20005048

080096b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096be:	e019      	b.n	80096f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80096c0:	f7fe fa10 	bl	8007ae4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096c4:	4b10      	ldr	r3, [pc, #64]	; (8009708 <prvCheckTasksWaitingTermination+0x50>)
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	3304      	adds	r3, #4
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7fe f8ad 	bl	8007830 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80096d6:	4b0d      	ldr	r3, [pc, #52]	; (800970c <prvCheckTasksWaitingTermination+0x54>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	3b01      	subs	r3, #1
 80096dc:	4a0b      	ldr	r2, [pc, #44]	; (800970c <prvCheckTasksWaitingTermination+0x54>)
 80096de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80096e0:	4b0b      	ldr	r3, [pc, #44]	; (8009710 <prvCheckTasksWaitingTermination+0x58>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	3b01      	subs	r3, #1
 80096e6:	4a0a      	ldr	r2, [pc, #40]	; (8009710 <prvCheckTasksWaitingTermination+0x58>)
 80096e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80096ea:	f7fe fa2b 	bl	8007b44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f810 	bl	8009714 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096f4:	4b06      	ldr	r3, [pc, #24]	; (8009710 <prvCheckTasksWaitingTermination+0x58>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d1e1      	bne.n	80096c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80096fc:	bf00      	nop
 80096fe:	bf00      	nop
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	20005060 	.word	0x20005060
 800970c:	20005090 	.word	0x20005090
 8009710:	20005074 	.word	0x20005074

08009714 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	3360      	adds	r3, #96	; 0x60
 8009720:	4618      	mov	r0, r3
 8009722:	f000 fd85 	bl	800a230 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800972c:	2b00      	cmp	r3, #0
 800972e:	d108      	bne.n	8009742 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009734:	4618      	mov	r0, r3
 8009736:	f7fd fed3 	bl	80074e0 <vPortFree>
				vPortFree( pxTCB );
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7fd fed0 	bl	80074e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009740:	e018      	b.n	8009774 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8009748:	2b01      	cmp	r3, #1
 800974a:	d103      	bne.n	8009754 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f7fd fec7 	bl	80074e0 <vPortFree>
	}
 8009752:	e00f      	b.n	8009774 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800975a:	2b02      	cmp	r3, #2
 800975c:	d00a      	beq.n	8009774 <prvDeleteTCB+0x60>
	__asm volatile
 800975e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	60fb      	str	r3, [r7, #12]
}
 8009770:	bf00      	nop
 8009772:	e7fe      	b.n	8009772 <prvDeleteTCB+0x5e>
	}
 8009774:	bf00      	nop
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009782:	4b0c      	ldr	r3, [pc, #48]	; (80097b4 <prvResetNextTaskUnblockTime+0x38>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d104      	bne.n	8009796 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800978c:	4b0a      	ldr	r3, [pc, #40]	; (80097b8 <prvResetNextTaskUnblockTime+0x3c>)
 800978e:	f04f 32ff 	mov.w	r2, #4294967295
 8009792:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009794:	e008      	b.n	80097a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009796:	4b07      	ldr	r3, [pc, #28]	; (80097b4 <prvResetNextTaskUnblockTime+0x38>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	4a04      	ldr	r2, [pc, #16]	; (80097b8 <prvResetNextTaskUnblockTime+0x3c>)
 80097a6:	6013      	str	r3, [r2, #0]
}
 80097a8:	bf00      	nop
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr
 80097b4:	20005044 	.word	0x20005044
 80097b8:	200050b0 	.word	0x200050b0

080097bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80097c2:	4b0b      	ldr	r3, [pc, #44]	; (80097f0 <xTaskGetSchedulerState+0x34>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d102      	bne.n	80097d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80097ca:	2301      	movs	r3, #1
 80097cc:	607b      	str	r3, [r7, #4]
 80097ce:	e008      	b.n	80097e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097d0:	4b08      	ldr	r3, [pc, #32]	; (80097f4 <xTaskGetSchedulerState+0x38>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d102      	bne.n	80097de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80097d8:	2302      	movs	r3, #2
 80097da:	607b      	str	r3, [r7, #4]
 80097dc:	e001      	b.n	80097e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80097de:	2300      	movs	r3, #0
 80097e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80097e2:	687b      	ldr	r3, [r7, #4]
	}
 80097e4:	4618      	mov	r0, r3
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	2000509c 	.word	0x2000509c
 80097f4:	200050b8 	.word	0x200050b8

080097f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009804:	2300      	movs	r3, #0
 8009806:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d056      	beq.n	80098bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800980e:	4b2e      	ldr	r3, [pc, #184]	; (80098c8 <xTaskPriorityDisinherit+0xd0>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	693a      	ldr	r2, [r7, #16]
 8009814:	429a      	cmp	r2, r3
 8009816:	d00a      	beq.n	800982e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981c:	f383 8811 	msr	BASEPRI, r3
 8009820:	f3bf 8f6f 	isb	sy
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	60fb      	str	r3, [r7, #12]
}
 800982a:	bf00      	nop
 800982c:	e7fe      	b.n	800982c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009832:	2b00      	cmp	r3, #0
 8009834:	d10a      	bne.n	800984c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	60bb      	str	r3, [r7, #8]
}
 8009848:	bf00      	nop
 800984a:	e7fe      	b.n	800984a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009850:	1e5a      	subs	r2, r3, #1
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800985e:	429a      	cmp	r2, r3
 8009860:	d02c      	beq.n	80098bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009866:	2b00      	cmp	r3, #0
 8009868:	d128      	bne.n	80098bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	3304      	adds	r3, #4
 800986e:	4618      	mov	r0, r3
 8009870:	f7fd ffde 	bl	8007830 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009880:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800988c:	4b0f      	ldr	r3, [pc, #60]	; (80098cc <xTaskPriorityDisinherit+0xd4>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	429a      	cmp	r2, r3
 8009892:	d903      	bls.n	800989c <xTaskPriorityDisinherit+0xa4>
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009898:	4a0c      	ldr	r2, [pc, #48]	; (80098cc <xTaskPriorityDisinherit+0xd4>)
 800989a:	6013      	str	r3, [r2, #0]
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a0:	4613      	mov	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	4413      	add	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4a09      	ldr	r2, [pc, #36]	; (80098d0 <xTaskPriorityDisinherit+0xd8>)
 80098aa:	441a      	add	r2, r3
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	3304      	adds	r3, #4
 80098b0:	4619      	mov	r1, r3
 80098b2:	4610      	mov	r0, r2
 80098b4:	f7fd ff5f 	bl	8007776 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80098b8:	2301      	movs	r3, #1
 80098ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80098bc:	697b      	ldr	r3, [r7, #20]
	}
 80098be:	4618      	mov	r0, r3
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	20004bb8 	.word	0x20004bb8
 80098cc:	20005098 	.word	0x20005098
 80098d0:	20004bbc 	.word	0x20004bbc

080098d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80098de:	4b24      	ldr	r3, [pc, #144]	; (8009970 <prvAddCurrentTaskToDelayedList+0x9c>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80098e4:	4b23      	ldr	r3, [pc, #140]	; (8009974 <prvAddCurrentTaskToDelayedList+0xa0>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098ee:	4b21      	ldr	r3, [pc, #132]	; (8009974 <prvAddCurrentTaskToDelayedList+0xa0>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	3304      	adds	r3, #4
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7fd ff9b 	bl	8007830 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009900:	d10a      	bne.n	8009918 <prvAddCurrentTaskToDelayedList+0x44>
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d007      	beq.n	8009918 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009908:	4b1a      	ldr	r3, [pc, #104]	; (8009974 <prvAddCurrentTaskToDelayedList+0xa0>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	3304      	adds	r3, #4
 800990e:	4619      	mov	r1, r3
 8009910:	4819      	ldr	r0, [pc, #100]	; (8009978 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009912:	f7fd ff30 	bl	8007776 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009916:	e026      	b.n	8009966 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4413      	add	r3, r2
 800991e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009920:	4b14      	ldr	r3, [pc, #80]	; (8009974 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	429a      	cmp	r2, r3
 800992e:	d209      	bcs.n	8009944 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009930:	4b12      	ldr	r3, [pc, #72]	; (800997c <prvAddCurrentTaskToDelayedList+0xa8>)
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	4b0f      	ldr	r3, [pc, #60]	; (8009974 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	3304      	adds	r3, #4
 800993a:	4619      	mov	r1, r3
 800993c:	4610      	mov	r0, r2
 800993e:	f7fd ff3e 	bl	80077be <vListInsert>
}
 8009942:	e010      	b.n	8009966 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009944:	4b0e      	ldr	r3, [pc, #56]	; (8009980 <prvAddCurrentTaskToDelayedList+0xac>)
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	4b0a      	ldr	r3, [pc, #40]	; (8009974 <prvAddCurrentTaskToDelayedList+0xa0>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	3304      	adds	r3, #4
 800994e:	4619      	mov	r1, r3
 8009950:	4610      	mov	r0, r2
 8009952:	f7fd ff34 	bl	80077be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009956:	4b0b      	ldr	r3, [pc, #44]	; (8009984 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	429a      	cmp	r2, r3
 800995e:	d202      	bcs.n	8009966 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 8009960:	4a08      	ldr	r2, [pc, #32]	; (8009984 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	6013      	str	r3, [r2, #0]
}
 8009966:	bf00      	nop
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	20005094 	.word	0x20005094
 8009974:	20004bb8 	.word	0x20004bb8
 8009978:	20005078 	.word	0x20005078
 800997c:	20005048 	.word	0x20005048
 8009980:	20005044 	.word	0x20005044
 8009984:	200050b0 	.word	0x200050b0

08009988 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b08a      	sub	sp, #40	; 0x28
 800998c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800998e:	2300      	movs	r3, #0
 8009990:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009992:	f000 fba3 	bl	800a0dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009996:	4b1c      	ldr	r3, [pc, #112]	; (8009a08 <xTimerCreateTimerTask+0x80>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d021      	beq.n	80099e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800999e:	2300      	movs	r3, #0
 80099a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80099a2:	2300      	movs	r3, #0
 80099a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80099a6:	1d3a      	adds	r2, r7, #4
 80099a8:	f107 0108 	add.w	r1, r7, #8
 80099ac:	f107 030c 	add.w	r3, r7, #12
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7fd fcab 	bl	800730c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80099b6:	6879      	ldr	r1, [r7, #4]
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	9202      	str	r2, [sp, #8]
 80099be:	9301      	str	r3, [sp, #4]
 80099c0:	2302      	movs	r3, #2
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	2300      	movs	r3, #0
 80099c6:	460a      	mov	r2, r1
 80099c8:	4910      	ldr	r1, [pc, #64]	; (8009a0c <xTimerCreateTimerTask+0x84>)
 80099ca:	4811      	ldr	r0, [pc, #68]	; (8009a10 <xTimerCreateTimerTask+0x88>)
 80099cc:	f7fe ff7c 	bl	80088c8 <xTaskCreateStatic>
 80099d0:	4603      	mov	r3, r0
 80099d2:	4a10      	ldr	r2, [pc, #64]	; (8009a14 <xTimerCreateTimerTask+0x8c>)
 80099d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80099d6:	4b0f      	ldr	r3, [pc, #60]	; (8009a14 <xTimerCreateTimerTask+0x8c>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80099de:	2301      	movs	r3, #1
 80099e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d10a      	bne.n	80099fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 80099e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ec:	f383 8811 	msr	BASEPRI, r3
 80099f0:	f3bf 8f6f 	isb	sy
 80099f4:	f3bf 8f4f 	dsb	sy
 80099f8:	613b      	str	r3, [r7, #16]
}
 80099fa:	bf00      	nop
 80099fc:	e7fe      	b.n	80099fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80099fe:	697b      	ldr	r3, [r7, #20]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3718      	adds	r7, #24
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	200050f4 	.word	0x200050f4
 8009a0c:	0800a3fc 	.word	0x0800a3fc
 8009a10:	08009c81 	.word	0x08009c81
 8009a14:	200050f8 	.word	0x200050f8

08009a18 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b088      	sub	sp, #32
 8009a1c:	af02      	add	r7, sp, #8
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
 8009a24:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009a26:	202c      	movs	r0, #44	; 0x2c
 8009a28:	f7fd fc8a 	bl	8007340 <pvPortMalloc>
 8009a2c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00d      	beq.n	8009a50 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	9301      	str	r3, [sp, #4]
 8009a40:	6a3b      	ldr	r3, [r7, #32]
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	68b9      	ldr	r1, [r7, #8]
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f000 f843 	bl	8009ad6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009a50:	697b      	ldr	r3, [r7, #20]
	}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3718      	adds	r7, #24
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b08a      	sub	sp, #40	; 0x28
 8009a5e:	af02      	add	r7, sp, #8
 8009a60:	60f8      	str	r0, [r7, #12]
 8009a62:	60b9      	str	r1, [r7, #8]
 8009a64:	607a      	str	r2, [r7, #4]
 8009a66:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009a68:	232c      	movs	r3, #44	; 0x2c
 8009a6a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	2b2c      	cmp	r3, #44	; 0x2c
 8009a70:	d00a      	beq.n	8009a88 <xTimerCreateStatic+0x2e>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	61bb      	str	r3, [r7, #24]
}
 8009a84:	bf00      	nop
 8009a86:	e7fe      	b.n	8009a86 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009a88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10a      	bne.n	8009aa6 <xTimerCreateStatic+0x4c>
	__asm volatile
 8009a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a94:	f383 8811 	msr	BASEPRI, r3
 8009a98:	f3bf 8f6f 	isb	sy
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	617b      	str	r3, [r7, #20]
}
 8009aa2:	bf00      	nop
 8009aa4:	e7fe      	b.n	8009aa4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8009aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00d      	beq.n	8009acc <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	9301      	str	r3, [sp, #4]
 8009abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	68b9      	ldr	r1, [r7, #8]
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f000 f805 	bl	8009ad6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009acc:	69fb      	ldr	r3, [r7, #28]
	}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3720      	adds	r7, #32
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b086      	sub	sp, #24
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	60f8      	str	r0, [r7, #12]
 8009ade:	60b9      	str	r1, [r7, #8]
 8009ae0:	607a      	str	r2, [r7, #4]
 8009ae2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10a      	bne.n	8009b00 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8009aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aee:	f383 8811 	msr	BASEPRI, r3
 8009af2:	f3bf 8f6f 	isb	sy
 8009af6:	f3bf 8f4f 	dsb	sy
 8009afa:	617b      	str	r3, [r7, #20]
}
 8009afc:	bf00      	nop
 8009afe:	e7fe      	b.n	8009afe <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d01e      	beq.n	8009b44 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009b06:	f000 fae9 	bl	800a0dc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	68ba      	ldr	r2, [r7, #8]
 8009b14:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1e:	6a3a      	ldr	r2, [r7, #32]
 8009b20:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b24:	3304      	adds	r3, #4
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fd fe18 	bl	800775c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d008      	beq.n	8009b44 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b38:	f043 0304 	orr.w	r3, r3, #4
 8009b3c:	b2da      	uxtb	r2, r3
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009b44:	bf00      	nop
 8009b46:	3718      	adds	r7, #24
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b08a      	sub	sp, #40	; 0x28
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
 8009b58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d10a      	bne.n	8009b7a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b68:	f383 8811 	msr	BASEPRI, r3
 8009b6c:	f3bf 8f6f 	isb	sy
 8009b70:	f3bf 8f4f 	dsb	sy
 8009b74:	623b      	str	r3, [r7, #32]
}
 8009b76:	bf00      	nop
 8009b78:	e7fe      	b.n	8009b78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009b7a:	4b1a      	ldr	r3, [pc, #104]	; (8009be4 <xTimerGenericCommand+0x98>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d02a      	beq.n	8009bd8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	2b05      	cmp	r3, #5
 8009b92:	dc18      	bgt.n	8009bc6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b94:	f7ff fe12 	bl	80097bc <xTaskGetSchedulerState>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d109      	bne.n	8009bb2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b9e:	4b11      	ldr	r3, [pc, #68]	; (8009be4 <xTimerGenericCommand+0x98>)
 8009ba0:	6818      	ldr	r0, [r3, #0]
 8009ba2:	f107 0110 	add.w	r1, r7, #16
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009baa:	f7fe faa5 	bl	80080f8 <xQueueGenericSend>
 8009bae:	6278      	str	r0, [r7, #36]	; 0x24
 8009bb0:	e012      	b.n	8009bd8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009bb2:	4b0c      	ldr	r3, [pc, #48]	; (8009be4 <xTimerGenericCommand+0x98>)
 8009bb4:	6818      	ldr	r0, [r3, #0]
 8009bb6:	f107 0110 	add.w	r1, r7, #16
 8009bba:	2300      	movs	r3, #0
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f7fe fa9b 	bl	80080f8 <xQueueGenericSend>
 8009bc2:	6278      	str	r0, [r7, #36]	; 0x24
 8009bc4:	e008      	b.n	8009bd8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009bc6:	4b07      	ldr	r3, [pc, #28]	; (8009be4 <xTimerGenericCommand+0x98>)
 8009bc8:	6818      	ldr	r0, [r3, #0]
 8009bca:	f107 0110 	add.w	r1, r7, #16
 8009bce:	2300      	movs	r3, #0
 8009bd0:	683a      	ldr	r2, [r7, #0]
 8009bd2:	f7fe fb8f 	bl	80082f4 <xQueueGenericSendFromISR>
 8009bd6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3728      	adds	r7, #40	; 0x28
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	200050f4 	.word	0x200050f4

08009be8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b088      	sub	sp, #32
 8009bec:	af02      	add	r7, sp, #8
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bf2:	4b22      	ldr	r3, [pc, #136]	; (8009c7c <prvProcessExpiredTimer+0x94>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	3304      	adds	r3, #4
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7fd fe15 	bl	8007830 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c0c:	f003 0304 	and.w	r3, r3, #4
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d022      	beq.n	8009c5a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	699a      	ldr	r2, [r3, #24]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	18d1      	adds	r1, r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	683a      	ldr	r2, [r7, #0]
 8009c20:	6978      	ldr	r0, [r7, #20]
 8009c22:	f000 f8d3 	bl	8009dcc <prvInsertTimerInActiveList>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d01f      	beq.n	8009c6c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	2300      	movs	r3, #0
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	2100      	movs	r1, #0
 8009c36:	6978      	ldr	r0, [r7, #20]
 8009c38:	f7ff ff88 	bl	8009b4c <xTimerGenericCommand>
 8009c3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d113      	bne.n	8009c6c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c48:	f383 8811 	msr	BASEPRI, r3
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	60fb      	str	r3, [r7, #12]
}
 8009c56:	bf00      	nop
 8009c58:	e7fe      	b.n	8009c58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c60:	f023 0301 	bic.w	r3, r3, #1
 8009c64:	b2da      	uxtb	r2, r3
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	6a1b      	ldr	r3, [r3, #32]
 8009c70:	6978      	ldr	r0, [r7, #20]
 8009c72:	4798      	blx	r3
}
 8009c74:	bf00      	nop
 8009c76:	3718      	adds	r7, #24
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	200050ec 	.word	0x200050ec

08009c80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 8009c88:	f7f7 fd37 	bl	80016fa <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c8c:	f107 0308 	add.w	r3, r7, #8
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 f857 	bl	8009d44 <prvGetNextExpireTime>
 8009c96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f000 f803 	bl	8009ca8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009ca2:	f000 f8d5 	bl	8009e50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ca6:	e7f1      	b.n	8009c8c <prvTimerTask+0xc>

08009ca8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009cb2:	f7ff f875 	bl	8008da0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009cb6:	f107 0308 	add.w	r3, r7, #8
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f000 f866 	bl	8009d8c <prvSampleTimeNow>
 8009cc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d130      	bne.n	8009d2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d10a      	bne.n	8009ce4 <prvProcessTimerOrBlockTask+0x3c>
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d806      	bhi.n	8009ce4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009cd6:	f7ff f8a9 	bl	8008e2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009cda:	68f9      	ldr	r1, [r7, #12]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f7ff ff83 	bl	8009be8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009ce2:	e024      	b.n	8009d2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d008      	beq.n	8009cfc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009cea:	4b13      	ldr	r3, [pc, #76]	; (8009d38 <prvProcessTimerOrBlockTask+0x90>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d101      	bne.n	8009cf8 <prvProcessTimerOrBlockTask+0x50>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e000      	b.n	8009cfa <prvProcessTimerOrBlockTask+0x52>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009cfc:	4b0f      	ldr	r3, [pc, #60]	; (8009d3c <prvProcessTimerOrBlockTask+0x94>)
 8009cfe:	6818      	ldr	r0, [r3, #0]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	4619      	mov	r1, r3
 8009d0a:	f7fe fda9 	bl	8008860 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d0e:	f7ff f88d 	bl	8008e2c <xTaskResumeAll>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10a      	bne.n	8009d2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d18:	4b09      	ldr	r3, [pc, #36]	; (8009d40 <prvProcessTimerOrBlockTask+0x98>)
 8009d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d1e:	601a      	str	r2, [r3, #0]
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	f3bf 8f6f 	isb	sy
}
 8009d28:	e001      	b.n	8009d2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d2a:	f7ff f87f 	bl	8008e2c <xTaskResumeAll>
}
 8009d2e:	bf00      	nop
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	200050f0 	.word	0x200050f0
 8009d3c:	200050f4 	.word	0x200050f4
 8009d40:	e000ed04 	.word	0xe000ed04

08009d44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d4c:	4b0e      	ldr	r3, [pc, #56]	; (8009d88 <prvGetNextExpireTime+0x44>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <prvGetNextExpireTime+0x16>
 8009d56:	2201      	movs	r2, #1
 8009d58:	e000      	b.n	8009d5c <prvGetNextExpireTime+0x18>
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d105      	bne.n	8009d74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d68:	4b07      	ldr	r3, [pc, #28]	; (8009d88 <prvGetNextExpireTime+0x44>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	60fb      	str	r3, [r7, #12]
 8009d72:	e001      	b.n	8009d78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009d74:	2300      	movs	r3, #0
 8009d76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009d78:	68fb      	ldr	r3, [r7, #12]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3714      	adds	r7, #20
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	200050ec 	.word	0x200050ec

08009d8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009d94:	f7ff f8e8 	bl	8008f68 <xTaskGetTickCount>
 8009d98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009d9a:	4b0b      	ldr	r3, [pc, #44]	; (8009dc8 <prvSampleTimeNow+0x3c>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d205      	bcs.n	8009db0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009da4:	f000 f936 	bl	800a014 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	601a      	str	r2, [r3, #0]
 8009dae:	e002      	b.n	8009db6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009db6:	4a04      	ldr	r2, [pc, #16]	; (8009dc8 <prvSampleTimeNow+0x3c>)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	200050fc 	.word	0x200050fc

08009dcc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
 8009dd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	68ba      	ldr	r2, [r7, #8]
 8009de2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d812      	bhi.n	8009e18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	1ad2      	subs	r2, r2, r3
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	699b      	ldr	r3, [r3, #24]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d302      	bcc.n	8009e06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e00:	2301      	movs	r3, #1
 8009e02:	617b      	str	r3, [r7, #20]
 8009e04:	e01b      	b.n	8009e3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e06:	4b10      	ldr	r3, [pc, #64]	; (8009e48 <prvInsertTimerInActiveList+0x7c>)
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	3304      	adds	r3, #4
 8009e0e:	4619      	mov	r1, r3
 8009e10:	4610      	mov	r0, r2
 8009e12:	f7fd fcd4 	bl	80077be <vListInsert>
 8009e16:	e012      	b.n	8009e3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d206      	bcs.n	8009e2e <prvInsertTimerInActiveList+0x62>
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d302      	bcc.n	8009e2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	617b      	str	r3, [r7, #20]
 8009e2c:	e007      	b.n	8009e3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e2e:	4b07      	ldr	r3, [pc, #28]	; (8009e4c <prvInsertTimerInActiveList+0x80>)
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	3304      	adds	r3, #4
 8009e36:	4619      	mov	r1, r3
 8009e38:	4610      	mov	r0, r2
 8009e3a:	f7fd fcc0 	bl	80077be <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e3e:	697b      	ldr	r3, [r7, #20]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3718      	adds	r7, #24
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	200050f0 	.word	0x200050f0
 8009e4c:	200050ec 	.word	0x200050ec

08009e50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b08e      	sub	sp, #56	; 0x38
 8009e54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e56:	e0ca      	b.n	8009fee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	da18      	bge.n	8009e90 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009e5e:	1d3b      	adds	r3, r7, #4
 8009e60:	3304      	adds	r3, #4
 8009e62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10a      	bne.n	8009e80 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	61fb      	str	r3, [r7, #28]
}
 8009e7c:	bf00      	nop
 8009e7e:	e7fe      	b.n	8009e7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e86:	6850      	ldr	r0, [r2, #4]
 8009e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e8a:	6892      	ldr	r2, [r2, #8]
 8009e8c:	4611      	mov	r1, r2
 8009e8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f2c0 80aa 	blt.w	8009fec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9e:	695b      	ldr	r3, [r3, #20]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d004      	beq.n	8009eae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7fd fcc1 	bl	8007830 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009eae:	463b      	mov	r3, r7
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7ff ff6b 	bl	8009d8c <prvSampleTimeNow>
 8009eb6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b09      	cmp	r3, #9
 8009ebc:	f200 8097 	bhi.w	8009fee <prvProcessReceivedCommands+0x19e>
 8009ec0:	a201      	add	r2, pc, #4	; (adr r2, 8009ec8 <prvProcessReceivedCommands+0x78>)
 8009ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec6:	bf00      	nop
 8009ec8:	08009ef1 	.word	0x08009ef1
 8009ecc:	08009ef1 	.word	0x08009ef1
 8009ed0:	08009ef1 	.word	0x08009ef1
 8009ed4:	08009f65 	.word	0x08009f65
 8009ed8:	08009f79 	.word	0x08009f79
 8009edc:	08009fc3 	.word	0x08009fc3
 8009ee0:	08009ef1 	.word	0x08009ef1
 8009ee4:	08009ef1 	.word	0x08009ef1
 8009ee8:	08009f65 	.word	0x08009f65
 8009eec:	08009f79 	.word	0x08009f79
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ef6:	f043 0301 	orr.w	r3, r3, #1
 8009efa:	b2da      	uxtb	r2, r3
 8009efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	18d1      	adds	r1, r2, r3
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f10:	f7ff ff5c 	bl	8009dcc <prvInsertTimerInActiveList>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d069      	beq.n	8009fee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1c:	6a1b      	ldr	r3, [r3, #32]
 8009f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f28:	f003 0304 	and.w	r3, r3, #4
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d05e      	beq.n	8009fee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f30:	68ba      	ldr	r2, [r7, #8]
 8009f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f34:	699b      	ldr	r3, [r3, #24]
 8009f36:	441a      	add	r2, r3
 8009f38:	2300      	movs	r3, #0
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	2100      	movs	r1, #0
 8009f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f42:	f7ff fe03 	bl	8009b4c <xTimerGenericCommand>
 8009f46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d14f      	bne.n	8009fee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	61bb      	str	r3, [r7, #24]
}
 8009f60:	bf00      	nop
 8009f62:	e7fe      	b.n	8009f62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f6a:	f023 0301 	bic.w	r3, r3, #1
 8009f6e:	b2da      	uxtb	r2, r3
 8009f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009f76:	e03a      	b.n	8009fee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f7e:	f043 0301 	orr.w	r3, r3, #1
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	617b      	str	r3, [r7, #20]
}
 8009faa:	bf00      	nop
 8009fac:	e7fe      	b.n	8009fac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb0:	699a      	ldr	r2, [r3, #24]
 8009fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb4:	18d1      	adds	r1, r2, r3
 8009fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fbc:	f7ff ff06 	bl	8009dcc <prvInsertTimerInActiveList>
					break;
 8009fc0:	e015      	b.n	8009fee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fc8:	f003 0302 	and.w	r3, r3, #2
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d103      	bne.n	8009fd8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009fd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fd2:	f7fd fa85 	bl	80074e0 <vPortFree>
 8009fd6:	e00a      	b.n	8009fee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fde:	f023 0301 	bic.w	r3, r3, #1
 8009fe2:	b2da      	uxtb	r2, r3
 8009fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009fea:	e000      	b.n	8009fee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009fec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fee:	4b08      	ldr	r3, [pc, #32]	; (800a010 <prvProcessReceivedCommands+0x1c0>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	1d39      	adds	r1, r7, #4
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7fe fa18 	bl	800842c <xQueueReceive>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f47f af2a 	bne.w	8009e58 <prvProcessReceivedCommands+0x8>
	}
}
 800a004:	bf00      	nop
 800a006:	bf00      	nop
 800a008:	3730      	adds	r7, #48	; 0x30
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	200050f4 	.word	0x200050f4

0800a014 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b088      	sub	sp, #32
 800a018:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a01a:	e048      	b.n	800a0ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a01c:	4b2d      	ldr	r3, [pc, #180]	; (800a0d4 <prvSwitchTimerLists+0xc0>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a026:	4b2b      	ldr	r3, [pc, #172]	; (800a0d4 <prvSwitchTimerLists+0xc0>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	3304      	adds	r3, #4
 800a034:	4618      	mov	r0, r3
 800a036:	f7fd fbfb 	bl	8007830 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6a1b      	ldr	r3, [r3, #32]
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a048:	f003 0304 	and.w	r3, r3, #4
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d02e      	beq.n	800a0ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	699b      	ldr	r3, [r3, #24]
 800a054:	693a      	ldr	r2, [r7, #16]
 800a056:	4413      	add	r3, r2
 800a058:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d90e      	bls.n	800a080 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a06e:	4b19      	ldr	r3, [pc, #100]	; (800a0d4 <prvSwitchTimerLists+0xc0>)
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	3304      	adds	r3, #4
 800a076:	4619      	mov	r1, r3
 800a078:	4610      	mov	r0, r2
 800a07a:	f7fd fba0 	bl	80077be <vListInsert>
 800a07e:	e016      	b.n	800a0ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a080:	2300      	movs	r3, #0
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	2300      	movs	r3, #0
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	2100      	movs	r1, #0
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f7ff fd5e 	bl	8009b4c <xTimerGenericCommand>
 800a090:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10a      	bne.n	800a0ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09c:	f383 8811 	msr	BASEPRI, r3
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	f3bf 8f4f 	dsb	sy
 800a0a8:	603b      	str	r3, [r7, #0]
}
 800a0aa:	bf00      	nop
 800a0ac:	e7fe      	b.n	800a0ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0ae:	4b09      	ldr	r3, [pc, #36]	; (800a0d4 <prvSwitchTimerLists+0xc0>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1b1      	bne.n	800a01c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a0b8:	4b06      	ldr	r3, [pc, #24]	; (800a0d4 <prvSwitchTimerLists+0xc0>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a0be:	4b06      	ldr	r3, [pc, #24]	; (800a0d8 <prvSwitchTimerLists+0xc4>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a04      	ldr	r2, [pc, #16]	; (800a0d4 <prvSwitchTimerLists+0xc0>)
 800a0c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a0c6:	4a04      	ldr	r2, [pc, #16]	; (800a0d8 <prvSwitchTimerLists+0xc4>)
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	6013      	str	r3, [r2, #0]
}
 800a0cc:	bf00      	nop
 800a0ce:	3718      	adds	r7, #24
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	200050ec 	.word	0x200050ec
 800a0d8:	200050f0 	.word	0x200050f0

0800a0dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a0e2:	f7fd fcff 	bl	8007ae4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a0e6:	4b15      	ldr	r3, [pc, #84]	; (800a13c <prvCheckForValidListAndQueue+0x60>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d120      	bne.n	800a130 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a0ee:	4814      	ldr	r0, [pc, #80]	; (800a140 <prvCheckForValidListAndQueue+0x64>)
 800a0f0:	f7fd fb14 	bl	800771c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a0f4:	4813      	ldr	r0, [pc, #76]	; (800a144 <prvCheckForValidListAndQueue+0x68>)
 800a0f6:	f7fd fb11 	bl	800771c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a0fa:	4b13      	ldr	r3, [pc, #76]	; (800a148 <prvCheckForValidListAndQueue+0x6c>)
 800a0fc:	4a10      	ldr	r2, [pc, #64]	; (800a140 <prvCheckForValidListAndQueue+0x64>)
 800a0fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a100:	4b12      	ldr	r3, [pc, #72]	; (800a14c <prvCheckForValidListAndQueue+0x70>)
 800a102:	4a10      	ldr	r2, [pc, #64]	; (800a144 <prvCheckForValidListAndQueue+0x68>)
 800a104:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a106:	2300      	movs	r3, #0
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	4b11      	ldr	r3, [pc, #68]	; (800a150 <prvCheckForValidListAndQueue+0x74>)
 800a10c:	4a11      	ldr	r2, [pc, #68]	; (800a154 <prvCheckForValidListAndQueue+0x78>)
 800a10e:	2110      	movs	r1, #16
 800a110:	200a      	movs	r0, #10
 800a112:	f7fd ff55 	bl	8007fc0 <xQueueGenericCreateStatic>
 800a116:	4603      	mov	r3, r0
 800a118:	4a08      	ldr	r2, [pc, #32]	; (800a13c <prvCheckForValidListAndQueue+0x60>)
 800a11a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a11c:	4b07      	ldr	r3, [pc, #28]	; (800a13c <prvCheckForValidListAndQueue+0x60>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d005      	beq.n	800a130 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a124:	4b05      	ldr	r3, [pc, #20]	; (800a13c <prvCheckForValidListAndQueue+0x60>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	490b      	ldr	r1, [pc, #44]	; (800a158 <prvCheckForValidListAndQueue+0x7c>)
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fe fb6e 	bl	800880c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a130:	f7fd fd08 	bl	8007b44 <vPortExitCritical>
}
 800a134:	bf00      	nop
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	200050f4 	.word	0x200050f4
 800a140:	200050c4 	.word	0x200050c4
 800a144:	200050d8 	.word	0x200050d8
 800a148:	200050ec 	.word	0x200050ec
 800a14c:	200050f0 	.word	0x200050f0
 800a150:	200051a0 	.word	0x200051a0
 800a154:	20005100 	.word	0x20005100
 800a158:	0800a404 	.word	0x0800a404

0800a15c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d10a      	bne.n	800a184 <pvTimerGetTimerID+0x28>
	__asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a172:	f383 8811 	msr	BASEPRI, r3
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	60fb      	str	r3, [r7, #12]
}
 800a180:	bf00      	nop
 800a182:	e7fe      	b.n	800a182 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800a184:	f7fd fcae 	bl	8007ae4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	69db      	ldr	r3, [r3, #28]
 800a18c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a18e:	f7fd fcd9 	bl	8007b44 <vPortExitCritical>

	return pvReturn;
 800a192:	693b      	ldr	r3, [r7, #16]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3718      	adds	r7, #24
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <__libc_init_array>:
 800a19c:	b570      	push	{r4, r5, r6, lr}
 800a19e:	4d0d      	ldr	r5, [pc, #52]	; (800a1d4 <__libc_init_array+0x38>)
 800a1a0:	4c0d      	ldr	r4, [pc, #52]	; (800a1d8 <__libc_init_array+0x3c>)
 800a1a2:	1b64      	subs	r4, r4, r5
 800a1a4:	10a4      	asrs	r4, r4, #2
 800a1a6:	2600      	movs	r6, #0
 800a1a8:	42a6      	cmp	r6, r4
 800a1aa:	d109      	bne.n	800a1c0 <__libc_init_array+0x24>
 800a1ac:	4d0b      	ldr	r5, [pc, #44]	; (800a1dc <__libc_init_array+0x40>)
 800a1ae:	4c0c      	ldr	r4, [pc, #48]	; (800a1e0 <__libc_init_array+0x44>)
 800a1b0:	f000 f8f2 	bl	800a398 <_init>
 800a1b4:	1b64      	subs	r4, r4, r5
 800a1b6:	10a4      	asrs	r4, r4, #2
 800a1b8:	2600      	movs	r6, #0
 800a1ba:	42a6      	cmp	r6, r4
 800a1bc:	d105      	bne.n	800a1ca <__libc_init_array+0x2e>
 800a1be:	bd70      	pop	{r4, r5, r6, pc}
 800a1c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1c4:	4798      	blx	r3
 800a1c6:	3601      	adds	r6, #1
 800a1c8:	e7ee      	b.n	800a1a8 <__libc_init_array+0xc>
 800a1ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1ce:	4798      	blx	r3
 800a1d0:	3601      	adds	r6, #1
 800a1d2:	e7f2      	b.n	800a1ba <__libc_init_array+0x1e>
 800a1d4:	0800a4c8 	.word	0x0800a4c8
 800a1d8:	0800a4c8 	.word	0x0800a4c8
 800a1dc:	0800a4c8 	.word	0x0800a4c8
 800a1e0:	0800a4cc 	.word	0x0800a4cc

0800a1e4 <__retarget_lock_acquire_recursive>:
 800a1e4:	4770      	bx	lr

0800a1e6 <__retarget_lock_release_recursive>:
 800a1e6:	4770      	bx	lr

0800a1e8 <memcpy>:
 800a1e8:	440a      	add	r2, r1
 800a1ea:	4291      	cmp	r1, r2
 800a1ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1f0:	d100      	bne.n	800a1f4 <memcpy+0xc>
 800a1f2:	4770      	bx	lr
 800a1f4:	b510      	push	{r4, lr}
 800a1f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1fe:	4291      	cmp	r1, r2
 800a200:	d1f9      	bne.n	800a1f6 <memcpy+0xe>
 800a202:	bd10      	pop	{r4, pc}

0800a204 <memset>:
 800a204:	4402      	add	r2, r0
 800a206:	4603      	mov	r3, r0
 800a208:	4293      	cmp	r3, r2
 800a20a:	d100      	bne.n	800a20e <memset+0xa>
 800a20c:	4770      	bx	lr
 800a20e:	f803 1b01 	strb.w	r1, [r3], #1
 800a212:	e7f9      	b.n	800a208 <memset+0x4>

0800a214 <cleanup_glue>:
 800a214:	b538      	push	{r3, r4, r5, lr}
 800a216:	460c      	mov	r4, r1
 800a218:	6809      	ldr	r1, [r1, #0]
 800a21a:	4605      	mov	r5, r0
 800a21c:	b109      	cbz	r1, 800a222 <cleanup_glue+0xe>
 800a21e:	f7ff fff9 	bl	800a214 <cleanup_glue>
 800a222:	4621      	mov	r1, r4
 800a224:	4628      	mov	r0, r5
 800a226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a22a:	f000 b869 	b.w	800a300 <_free_r>
	...

0800a230 <_reclaim_reent>:
 800a230:	4b2c      	ldr	r3, [pc, #176]	; (800a2e4 <_reclaim_reent+0xb4>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4283      	cmp	r3, r0
 800a236:	b570      	push	{r4, r5, r6, lr}
 800a238:	4604      	mov	r4, r0
 800a23a:	d051      	beq.n	800a2e0 <_reclaim_reent+0xb0>
 800a23c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a23e:	b143      	cbz	r3, 800a252 <_reclaim_reent+0x22>
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d14a      	bne.n	800a2dc <_reclaim_reent+0xac>
 800a246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a248:	6819      	ldr	r1, [r3, #0]
 800a24a:	b111      	cbz	r1, 800a252 <_reclaim_reent+0x22>
 800a24c:	4620      	mov	r0, r4
 800a24e:	f000 f857 	bl	800a300 <_free_r>
 800a252:	6961      	ldr	r1, [r4, #20]
 800a254:	b111      	cbz	r1, 800a25c <_reclaim_reent+0x2c>
 800a256:	4620      	mov	r0, r4
 800a258:	f000 f852 	bl	800a300 <_free_r>
 800a25c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a25e:	b111      	cbz	r1, 800a266 <_reclaim_reent+0x36>
 800a260:	4620      	mov	r0, r4
 800a262:	f000 f84d 	bl	800a300 <_free_r>
 800a266:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a268:	b111      	cbz	r1, 800a270 <_reclaim_reent+0x40>
 800a26a:	4620      	mov	r0, r4
 800a26c:	f000 f848 	bl	800a300 <_free_r>
 800a270:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a272:	b111      	cbz	r1, 800a27a <_reclaim_reent+0x4a>
 800a274:	4620      	mov	r0, r4
 800a276:	f000 f843 	bl	800a300 <_free_r>
 800a27a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a27c:	b111      	cbz	r1, 800a284 <_reclaim_reent+0x54>
 800a27e:	4620      	mov	r0, r4
 800a280:	f000 f83e 	bl	800a300 <_free_r>
 800a284:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a286:	b111      	cbz	r1, 800a28e <_reclaim_reent+0x5e>
 800a288:	4620      	mov	r0, r4
 800a28a:	f000 f839 	bl	800a300 <_free_r>
 800a28e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a290:	b111      	cbz	r1, 800a298 <_reclaim_reent+0x68>
 800a292:	4620      	mov	r0, r4
 800a294:	f000 f834 	bl	800a300 <_free_r>
 800a298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a29a:	b111      	cbz	r1, 800a2a2 <_reclaim_reent+0x72>
 800a29c:	4620      	mov	r0, r4
 800a29e:	f000 f82f 	bl	800a300 <_free_r>
 800a2a2:	69a3      	ldr	r3, [r4, #24]
 800a2a4:	b1e3      	cbz	r3, 800a2e0 <_reclaim_reent+0xb0>
 800a2a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	4798      	blx	r3
 800a2ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a2ae:	b1b9      	cbz	r1, 800a2e0 <_reclaim_reent+0xb0>
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2b6:	f7ff bfad 	b.w	800a214 <cleanup_glue>
 800a2ba:	5949      	ldr	r1, [r1, r5]
 800a2bc:	b941      	cbnz	r1, 800a2d0 <_reclaim_reent+0xa0>
 800a2be:	3504      	adds	r5, #4
 800a2c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2c2:	2d80      	cmp	r5, #128	; 0x80
 800a2c4:	68d9      	ldr	r1, [r3, #12]
 800a2c6:	d1f8      	bne.n	800a2ba <_reclaim_reent+0x8a>
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	f000 f819 	bl	800a300 <_free_r>
 800a2ce:	e7ba      	b.n	800a246 <_reclaim_reent+0x16>
 800a2d0:	680e      	ldr	r6, [r1, #0]
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f000 f814 	bl	800a300 <_free_r>
 800a2d8:	4631      	mov	r1, r6
 800a2da:	e7ef      	b.n	800a2bc <_reclaim_reent+0x8c>
 800a2dc:	2500      	movs	r5, #0
 800a2de:	e7ef      	b.n	800a2c0 <_reclaim_reent+0x90>
 800a2e0:	bd70      	pop	{r4, r5, r6, pc}
 800a2e2:	bf00      	nop
 800a2e4:	20000010 	.word	0x20000010

0800a2e8 <__malloc_lock>:
 800a2e8:	4801      	ldr	r0, [pc, #4]	; (800a2f0 <__malloc_lock+0x8>)
 800a2ea:	f7ff bf7b 	b.w	800a1e4 <__retarget_lock_acquire_recursive>
 800a2ee:	bf00      	nop
 800a2f0:	200051f0 	.word	0x200051f0

0800a2f4 <__malloc_unlock>:
 800a2f4:	4801      	ldr	r0, [pc, #4]	; (800a2fc <__malloc_unlock+0x8>)
 800a2f6:	f7ff bf76 	b.w	800a1e6 <__retarget_lock_release_recursive>
 800a2fa:	bf00      	nop
 800a2fc:	200051f0 	.word	0x200051f0

0800a300 <_free_r>:
 800a300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a302:	2900      	cmp	r1, #0
 800a304:	d044      	beq.n	800a390 <_free_r+0x90>
 800a306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a30a:	9001      	str	r0, [sp, #4]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f1a1 0404 	sub.w	r4, r1, #4
 800a312:	bfb8      	it	lt
 800a314:	18e4      	addlt	r4, r4, r3
 800a316:	f7ff ffe7 	bl	800a2e8 <__malloc_lock>
 800a31a:	4a1e      	ldr	r2, [pc, #120]	; (800a394 <_free_r+0x94>)
 800a31c:	9801      	ldr	r0, [sp, #4]
 800a31e:	6813      	ldr	r3, [r2, #0]
 800a320:	b933      	cbnz	r3, 800a330 <_free_r+0x30>
 800a322:	6063      	str	r3, [r4, #4]
 800a324:	6014      	str	r4, [r2, #0]
 800a326:	b003      	add	sp, #12
 800a328:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a32c:	f7ff bfe2 	b.w	800a2f4 <__malloc_unlock>
 800a330:	42a3      	cmp	r3, r4
 800a332:	d908      	bls.n	800a346 <_free_r+0x46>
 800a334:	6825      	ldr	r5, [r4, #0]
 800a336:	1961      	adds	r1, r4, r5
 800a338:	428b      	cmp	r3, r1
 800a33a:	bf01      	itttt	eq
 800a33c:	6819      	ldreq	r1, [r3, #0]
 800a33e:	685b      	ldreq	r3, [r3, #4]
 800a340:	1949      	addeq	r1, r1, r5
 800a342:	6021      	streq	r1, [r4, #0]
 800a344:	e7ed      	b.n	800a322 <_free_r+0x22>
 800a346:	461a      	mov	r2, r3
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	b10b      	cbz	r3, 800a350 <_free_r+0x50>
 800a34c:	42a3      	cmp	r3, r4
 800a34e:	d9fa      	bls.n	800a346 <_free_r+0x46>
 800a350:	6811      	ldr	r1, [r2, #0]
 800a352:	1855      	adds	r5, r2, r1
 800a354:	42a5      	cmp	r5, r4
 800a356:	d10b      	bne.n	800a370 <_free_r+0x70>
 800a358:	6824      	ldr	r4, [r4, #0]
 800a35a:	4421      	add	r1, r4
 800a35c:	1854      	adds	r4, r2, r1
 800a35e:	42a3      	cmp	r3, r4
 800a360:	6011      	str	r1, [r2, #0]
 800a362:	d1e0      	bne.n	800a326 <_free_r+0x26>
 800a364:	681c      	ldr	r4, [r3, #0]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	6053      	str	r3, [r2, #4]
 800a36a:	4421      	add	r1, r4
 800a36c:	6011      	str	r1, [r2, #0]
 800a36e:	e7da      	b.n	800a326 <_free_r+0x26>
 800a370:	d902      	bls.n	800a378 <_free_r+0x78>
 800a372:	230c      	movs	r3, #12
 800a374:	6003      	str	r3, [r0, #0]
 800a376:	e7d6      	b.n	800a326 <_free_r+0x26>
 800a378:	6825      	ldr	r5, [r4, #0]
 800a37a:	1961      	adds	r1, r4, r5
 800a37c:	428b      	cmp	r3, r1
 800a37e:	bf04      	itt	eq
 800a380:	6819      	ldreq	r1, [r3, #0]
 800a382:	685b      	ldreq	r3, [r3, #4]
 800a384:	6063      	str	r3, [r4, #4]
 800a386:	bf04      	itt	eq
 800a388:	1949      	addeq	r1, r1, r5
 800a38a:	6021      	streq	r1, [r4, #0]
 800a38c:	6054      	str	r4, [r2, #4]
 800a38e:	e7ca      	b.n	800a326 <_free_r+0x26>
 800a390:	b003      	add	sp, #12
 800a392:	bd30      	pop	{r4, r5, pc}
 800a394:	200051f4 	.word	0x200051f4

0800a398 <_init>:
 800a398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39a:	bf00      	nop
 800a39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a39e:	bc08      	pop	{r3}
 800a3a0:	469e      	mov	lr, r3
 800a3a2:	4770      	bx	lr

0800a3a4 <_fini>:
 800a3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a6:	bf00      	nop
 800a3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3aa:	bc08      	pop	{r3}
 800a3ac:	469e      	mov	lr, r3
 800a3ae:	4770      	bx	lr
