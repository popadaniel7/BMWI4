
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b368  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  0800b508  0800b508  0001b508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b894  0800b894  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b894  0800b894  0001b894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b89c  0800b89c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b89c  0800b89c  0001b89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8a0  0800b8a0  0001b8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b8a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007a6c  20000078  0800b91c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007ae4  0800b91c  00027ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002931c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000068f3  00000000  00000000  000493c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022f0  00000000  00000000  0004fcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002008  00000000  00000000  00051fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022761  00000000  00000000  00053fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035539  00000000  00000000  00076711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aeaab  00000000  00000000  000abc4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a6f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090a8  00000000  00000000  0015a748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b4f0 	.word	0x0800b4f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800b4f0 	.word	0x0800b4f0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
#include "main.h"

int main()
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0

	SystemManager_Init();
 80004e8:	f00a fd2b 	bl	800af42 <SystemManager_Init>

	osKernelInitialize();
 80004ec:	f006 fc12 	bl	8006d14 <osKernelInitialize>

	MX_FREERTOS_Init();
 80004f0:	f001 fade 	bl	8001ab0 <MX_FREERTOS_Init>

	osKernelStart();
 80004f4:	f006 fc32 	bl	8006d5c <osKernelStart>
 80004f8:	2300      	movs	r3, #0

}
 80004fa:	4618      	mov	r0, r3
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <Btc_EnableUart>:
void Btc_RxVal();
void Btc_EnableUart();
void Btc_IgnitionState();

void Btc_EnableUart()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0

	Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(&huart1, &Btc_RxData, 1);
 8000504:	2201      	movs	r2, #1
 8000506:	4903      	ldr	r1, [pc, #12]	; (8000514 <Btc_EnableUart+0x14>)
 8000508:	4803      	ldr	r0, [pc, #12]	; (8000518 <Btc_EnableUart+0x18>)
 800050a:	f009 ff91 	bl	800a430 <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>

}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000098 	.word	0x20000098
 8000518:	200006c0 	.word	0x200006c0

0800051c <Btc_IgnitionState>:

void Btc_IgnitionState()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0

	uint8 stateValue = STD_LOW;
 8000522:	2300      	movs	r3, #0
 8000524:	71fb      	strb	r3, [r7, #7]

	if(Btc_IgnitionStepOne == STD_LOW && Btc_IgnitionStepTwo == STD_LOW && Btc_IgnitionTurnOff == STD_LOW)
 8000526:	4b21      	ldr	r3, [pc, #132]	; (80005ac <Btc_IgnitionState+0x90>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d129      	bne.n	8000582 <Btc_IgnitionState+0x66>
 800052e:	4b20      	ldr	r3, [pc, #128]	; (80005b0 <Btc_IgnitionState+0x94>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d125      	bne.n	8000582 <Btc_IgnitionState+0x66>
 8000536:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <Btc_IgnitionState+0x98>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d121      	bne.n	8000582 <Btc_IgnitionState+0x66>
	{

		Btc_LightSwitch 		= STD_LOW;
 800053e:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <Btc_IgnitionState+0x9c>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
		Btc_HighBeam 			= STD_LOW;
 8000544:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <Btc_IgnitionState+0xa0>)
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]
		Btc_FlashHighBeam 		= STD_LOW;
 800054a:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <Btc_IgnitionState+0xa4>)
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
		Btc_FrontFogLight 		= STD_LOW;
 8000550:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <Btc_IgnitionState+0xa8>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
		Btc_TurnSignalLeft 		= STD_LOW;
 8000556:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <Btc_IgnitionState+0xac>)
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
		Btc_TurnSignalRight 	= STD_LOW;
 800055c:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <Btc_IgnitionState+0xb0>)
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
		Btc_HazardLight 		= STD_LOW;
 8000562:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <Btc_IgnitionState+0xb4>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
		Btc_BrakeLight 			= STD_LOW;
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <Btc_IgnitionState+0xb8>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
		Btc_RearFogLight 		= STD_LOW;
 800056e:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <Btc_IgnitionState+0xbc>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
		Btc_ReverseLight 		= STD_LOW;
 8000574:	4b19      	ldr	r3, [pc, #100]	; (80005dc <Btc_IgnitionState+0xc0>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
		Btc_IntLights 			= STD_LOW;
 800057a:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <Btc_IgnitionState+0xc4>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8000580:	e00f      	b.n	80005a2 <Btc_IgnitionState+0x86>
	else if(Btc_IgnitionStepOne == STD_HIGH)
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <Btc_IgnitionState+0x90>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d10b      	bne.n	80005a2 <Btc_IgnitionState+0x86>
		Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <Btc_IgnitionState+0x9c>)
 800058c:	2217      	movs	r2, #23
 800058e:	701a      	strb	r2, [r3, #0]
		stateValue = STD_LOW;
 8000590:	2300      	movs	r3, #0
 8000592:	71fb      	strb	r3, [r7, #7]
		Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(&stateValue);
 8000594:	1dfb      	adds	r3, r7, #7
 8000596:	4618      	mov	r0, r3
 8000598:	f009 fd48 	bl	800a02c <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 800059c:	4806      	ldr	r0, [pc, #24]	; (80005b8 <Btc_IgnitionState+0x9c>)
 800059e:	f009 fdf5 	bl	800a18c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000a7 	.word	0x200000a7
 80005b0:	200000a8 	.word	0x200000a8
 80005b4:	200000a9 	.word	0x200000a9
 80005b8:	2000009c 	.word	0x2000009c
 80005bc:	2000009d 	.word	0x2000009d
 80005c0:	2000009e 	.word	0x2000009e
 80005c4:	2000009f 	.word	0x2000009f
 80005c8:	200000a0 	.word	0x200000a0
 80005cc:	200000a1 	.word	0x200000a1
 80005d0:	200000a2 	.word	0x200000a2
 80005d4:	200000a3 	.word	0x200000a3
 80005d8:	200000a4 	.word	0x200000a4
 80005dc:	200000a5 	.word	0x200000a5
 80005e0:	200000a6 	.word	0x200000a6

080005e4 <Btc_RxVal>:
	return (E_OK);

}

void Btc_RxVal()
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0

	if(Rte_Call_Crc_R_CrcPort_Crc_VerifyUartData() == E_OK)
 80005e8:	f00a f80c 	bl	800a604 <Crc_VerifyUartData>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	f040 8125 	bne.w	800083e <Btc_RxVal+0x25a>
	{

		switch(Btc_ReceivedDataOnBluetooth)
 80005f4:	4b93      	ldr	r3, [pc, #588]	; (8000844 <Btc_RxVal+0x260>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	3b01      	subs	r3, #1
 80005fa:	2b1c      	cmp	r3, #28
 80005fc:	f200 811e 	bhi.w	800083c <Btc_RxVal+0x258>
 8000600:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <Btc_RxVal+0x24>)
 8000602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000606:	bf00      	nop
 8000608:	0800070d 	.word	0x0800070d
 800060c:	0800071b 	.word	0x0800071b
 8000610:	08000729 	.word	0x08000729
 8000614:	08000737 	.word	0x08000737
 8000618:	08000745 	.word	0x08000745
 800061c:	08000753 	.word	0x08000753
 8000620:	08000761 	.word	0x08000761
 8000624:	0800077b 	.word	0x0800077b
 8000628:	08000789 	.word	0x08000789
 800062c:	080007a3 	.word	0x080007a3
 8000630:	080007b1 	.word	0x080007b1
 8000634:	080007bf 	.word	0x080007bf
 8000638:	080007cd 	.word	0x080007cd
 800063c:	080007db 	.word	0x080007db
 8000640:	080007e9 	.word	0x080007e9
 8000644:	080007f7 	.word	0x080007f7
 8000648:	08000805 	.word	0x08000805
 800064c:	08000813 	.word	0x08000813
 8000650:	08000821 	.word	0x08000821
 8000654:	0800082f 	.word	0x0800082f
 8000658:	080006b9 	.word	0x080006b9
 800065c:	080006c7 	.word	0x080006c7
 8000660:	080006d5 	.word	0x080006d5
 8000664:	080006e3 	.word	0x080006e3
 8000668:	080006f1 	.word	0x080006f1
 800066c:	080006ff 	.word	0x080006ff
 8000670:	0800067d 	.word	0x0800067d
 8000674:	08000691 	.word	0x08000691
 8000678:	080006a5 	.word	0x080006a5
		{

			case BTC_RX_IGNITION_STEP_ONE:

				Btc_IgnitionStepOne = STD_HIGH;
 800067c:	4b72      	ldr	r3, [pc, #456]	; (8000848 <Btc_RxVal+0x264>)
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
				Btc_IgnitionStepTwo = STD_LOW;
 8000682:	4b72      	ldr	r3, [pc, #456]	; (800084c <Btc_RxVal+0x268>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
				Btc_IgnitionTurnOff = STD_LOW;
 8000688:	4b71      	ldr	r3, [pc, #452]	; (8000850 <Btc_RxVal+0x26c>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]

				break;
 800068e:	e0d6      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_IGNITION_STEP_TWO:

				Btc_IgnitionStepTwo = STD_HIGH;
 8000690:	4b6e      	ldr	r3, [pc, #440]	; (800084c <Btc_RxVal+0x268>)
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
				Btc_IgnitionStepOne = STD_LOW;
 8000696:	4b6c      	ldr	r3, [pc, #432]	; (8000848 <Btc_RxVal+0x264>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
				Btc_IgnitionTurnOff = STD_LOW;
 800069c:	4b6c      	ldr	r3, [pc, #432]	; (8000850 <Btc_RxVal+0x26c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]

				break;
 80006a2:	e0cc      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_IGNITION_TURN_OFF:

				Btc_IgnitionStepTwo = STD_LOW;
 80006a4:	4b69      	ldr	r3, [pc, #420]	; (800084c <Btc_RxVal+0x268>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
				Btc_IgnitionStepOne = STD_LOW;
 80006aa:	4b67      	ldr	r3, [pc, #412]	; (8000848 <Btc_RxVal+0x264>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
				Btc_IgnitionTurnOff = STD_HIGH;
 80006b0:	4b67      	ldr	r3, [pc, #412]	; (8000850 <Btc_RxVal+0x26c>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]

				break;
 80006b6:	e0c2      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:

				Btc_ReverseLight = STD_HIGH;
 80006b8:	4b66      	ldr	r3, [pc, #408]	; (8000854 <Btc_RxVal+0x270>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 80006be:	4865      	ldr	r0, [pc, #404]	; (8000854 <Btc_RxVal+0x270>)
 80006c0:	f009 fd22 	bl	800a108 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>

				break;
 80006c4:	e0bb      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:

				Btc_ReverseLight = STD_LOW;
 80006c6:	4b63      	ldr	r3, [pc, #396]	; (8000854 <Btc_RxVal+0x270>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 80006cc:	4861      	ldr	r0, [pc, #388]	; (8000854 <Btc_RxVal+0x270>)
 80006ce:	f009 fd1b 	bl	800a108 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>

				break;
 80006d2:	e0b4      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_POSITIONZERO:

				Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 80006d4:	4b60      	ldr	r3, [pc, #384]	; (8000858 <Btc_RxVal+0x274>)
 80006d6:	2217      	movs	r2, #23
 80006d8:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 80006da:	485f      	ldr	r0, [pc, #380]	; (8000858 <Btc_RxVal+0x274>)
 80006dc:	f009 fd56 	bl	800a18c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>

				break;
 80006e0:	e0ad      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:

				Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 80006e2:	4b5d      	ldr	r3, [pc, #372]	; (8000858 <Btc_RxVal+0x274>)
 80006e4:	2218      	movs	r2, #24
 80006e6:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 80006e8:	485b      	ldr	r0, [pc, #364]	; (8000858 <Btc_RxVal+0x274>)
 80006ea:	f009 fd4f 	bl	800a18c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>

				break;
 80006ee:	e0a6      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:

				Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 80006f0:	4b59      	ldr	r3, [pc, #356]	; (8000858 <Btc_RxVal+0x274>)
 80006f2:	2219      	movs	r2, #25
 80006f4:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 80006f6:	4858      	ldr	r0, [pc, #352]	; (8000858 <Btc_RxVal+0x274>)
 80006f8:	f009 fd48 	bl	800a18c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>

				break;
 80006fc:	e09f      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:

				Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 80006fe:	4b56      	ldr	r3, [pc, #344]	; (8000858 <Btc_RxVal+0x274>)
 8000700:	221a      	movs	r2, #26
 8000702:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000704:	4854      	ldr	r0, [pc, #336]	; (8000858 <Btc_RxVal+0x274>)
 8000706:	f009 fd41 	bl	800a18c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>

				break;
 800070a:	e098      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_CENLOC_ON:

				Btc_CenLoc = STD_HIGH;
 800070c:	4b53      	ldr	r3, [pc, #332]	; (800085c <Btc_RxVal+0x278>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 8000712:	4852      	ldr	r0, [pc, #328]	; (800085c <Btc_RxVal+0x278>)
 8000714:	f009 fc74 	bl	800a000 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>

				break;
 8000718:	e091      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_CENLOC_OFF:

				Btc_CenLoc = STD_LOW;
 800071a:	4b50      	ldr	r3, [pc, #320]	; (800085c <Btc_RxVal+0x278>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 8000720:	484e      	ldr	r0, [pc, #312]	; (800085c <Btc_RxVal+0x278>)
 8000722:	f009 fc6d 	bl	800a000 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>

				break;
 8000726:	e08a      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_HIGHBEAM_ON:

				Btc_HighBeam = STD_HIGH;
 8000728:	4b4d      	ldr	r3, [pc, #308]	; (8000860 <Btc_RxVal+0x27c>)
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 800072e:	484c      	ldr	r0, [pc, #304]	; (8000860 <Btc_RxVal+0x27c>)
 8000730:	f009 fd42 	bl	800a1b8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>

				break;
 8000734:	e083      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:

				Btc_HighBeam = STD_LOW;
 8000736:	4b4a      	ldr	r3, [pc, #296]	; (8000860 <Btc_RxVal+0x27c>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 800073c:	4848      	ldr	r0, [pc, #288]	; (8000860 <Btc_RxVal+0x27c>)
 800073e:	f009 fd3b 	bl	800a1b8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>

				break;
 8000742:	e07c      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON:

				Btc_FlashHighBeam = STD_HIGH;
 8000744:	4b47      	ldr	r3, [pc, #284]	; (8000864 <Btc_RxVal+0x280>)
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState(&Btc_FlashHighBeam);
 800074a:	4846      	ldr	r0, [pc, #280]	; (8000864 <Btc_RxVal+0x280>)
 800074c:	f009 fcf2 	bl	800a134 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState>

				break;
 8000750:	e075      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF:

				Btc_FlashHighBeam = STD_LOW;
 8000752:	4b44      	ldr	r3, [pc, #272]	; (8000864 <Btc_RxVal+0x280>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState(&Btc_FlashHighBeam);
 8000758:	4842      	ldr	r0, [pc, #264]	; (8000864 <Btc_RxVal+0x280>)
 800075a:	f009 fceb 	bl	800a134 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState>

				break;
 800075e:	e06e      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:

				Btc_TurnSignalLeft = STD_HIGH;
 8000760:	4b41      	ldr	r3, [pc, #260]	; (8000868 <Btc_RxVal+0x284>)
 8000762:	2201      	movs	r2, #1
 8000764:	701a      	strb	r2, [r3, #0]
				Btc_TurnSignalRight = STD_LOW;
 8000766:	4b41      	ldr	r3, [pc, #260]	; (800086c <Btc_RxVal+0x288>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 800076c:	483e      	ldr	r0, [pc, #248]	; (8000868 <Btc_RxVal+0x284>)
 800076e:	f009 fd4f 	bl	800a210 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8000772:	483e      	ldr	r0, [pc, #248]	; (800086c <Btc_RxVal+0x288>)
 8000774:	f009 fd62 	bl	800a23c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>

				break;
 8000778:	e061      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:

				Btc_TurnSignalLeft = STD_LOW;
 800077a:	4b3b      	ldr	r3, [pc, #236]	; (8000868 <Btc_RxVal+0x284>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8000780:	4839      	ldr	r0, [pc, #228]	; (8000868 <Btc_RxVal+0x284>)
 8000782:	f009 fd45 	bl	800a210 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>

				break;
 8000786:	e05a      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:

				Btc_TurnSignalRight = STD_HIGH;
 8000788:	4b38      	ldr	r3, [pc, #224]	; (800086c <Btc_RxVal+0x288>)
 800078a:	2201      	movs	r2, #1
 800078c:	701a      	strb	r2, [r3, #0]
				Btc_TurnSignalLeft = STD_LOW;
 800078e:	4b36      	ldr	r3, [pc, #216]	; (8000868 <Btc_RxVal+0x284>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8000794:	4834      	ldr	r0, [pc, #208]	; (8000868 <Btc_RxVal+0x284>)
 8000796:	f009 fd3b 	bl	800a210 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 800079a:	4834      	ldr	r0, [pc, #208]	; (800086c <Btc_RxVal+0x288>)
 800079c:	f009 fd4e 	bl	800a23c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>

				break;
 80007a0:	e04d      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:

				Btc_TurnSignalRight = STD_LOW;
 80007a2:	4b32      	ldr	r3, [pc, #200]	; (800086c <Btc_RxVal+0x288>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 80007a8:	4830      	ldr	r0, [pc, #192]	; (800086c <Btc_RxVal+0x288>)
 80007aa:	f009 fd47 	bl	800a23c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>

				break;
 80007ae:	e046      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:

				Btc_HazardLight = STD_HIGH;
 80007b0:	4b2f      	ldr	r3, [pc, #188]	; (8000870 <Btc_RxVal+0x28c>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 80007b6:	482e      	ldr	r0, [pc, #184]	; (8000870 <Btc_RxVal+0x28c>)
 80007b8:	f009 fd56 	bl	800a268 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>

				break;
 80007bc:	e03f      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:

				Btc_HazardLight = STD_LOW;
 80007be:	4b2c      	ldr	r3, [pc, #176]	; (8000870 <Btc_RxVal+0x28c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 80007c4:	482a      	ldr	r0, [pc, #168]	; (8000870 <Btc_RxVal+0x28c>)
 80007c6:	f009 fd4f 	bl	800a268 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>

				break;
 80007ca:	e038      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:

				Btc_FrontFogLight = STD_HIGH;
 80007cc:	4b29      	ldr	r3, [pc, #164]	; (8000874 <Btc_RxVal+0x290>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 80007d2:	4828      	ldr	r0, [pc, #160]	; (8000874 <Btc_RxVal+0x290>)
 80007d4:	f009 fd06 	bl	800a1e4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>

				break;
 80007d8:	e031      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:

				Btc_FrontFogLight = STD_LOW;
 80007da:	4b26      	ldr	r3, [pc, #152]	; (8000874 <Btc_RxVal+0x290>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 80007e0:	4824      	ldr	r0, [pc, #144]	; (8000874 <Btc_RxVal+0x290>)
 80007e2:	f009 fcff 	bl	800a1e4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>

				break;
 80007e6:	e02a      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:

				Btc_RearFogLight = STD_HIGH;
 80007e8:	4b23      	ldr	r3, [pc, #140]	; (8000878 <Btc_RxVal+0x294>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 80007ee:	4822      	ldr	r0, [pc, #136]	; (8000878 <Btc_RxVal+0x294>)
 80007f0:	f009 fd50 	bl	800a294 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>

				break;
 80007f4:	e023      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:

				Btc_RearFogLight = STD_LOW;
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <Btc_RxVal+0x294>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 80007fc:	481e      	ldr	r0, [pc, #120]	; (8000878 <Btc_RxVal+0x294>)
 80007fe:	f009 fd49 	bl	800a294 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>

				break;
 8000802:	e01c      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_BRAKELIGHTON:

				Btc_BrakeLight = STD_HIGH;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <Btc_RxVal+0x298>)
 8000806:	2201      	movs	r2, #1
 8000808:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 800080a:	481c      	ldr	r0, [pc, #112]	; (800087c <Btc_RxVal+0x298>)
 800080c:	f009 fca8 	bl	800a160 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>

				break;
 8000810:	e015      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:

				Btc_BrakeLight = STD_LOW;
 8000812:	4b1a      	ldr	r3, [pc, #104]	; (800087c <Btc_RxVal+0x298>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 8000818:	4818      	ldr	r0, [pc, #96]	; (800087c <Btc_RxVal+0x298>)
 800081a:	f009 fca1 	bl	800a160 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>

				break;
 800081e:	e00e      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:

				Btc_IntLights = STD_HIGH;
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <Btc_RxVal+0x29c>)
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]
				Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8000826:	4816      	ldr	r0, [pc, #88]	; (8000880 <Btc_RxVal+0x29c>)
 8000828:	f009 fd8c 	bl	800a344 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>

				break;
 800082c:	e007      	b.n	800083e <Btc_RxVal+0x25a>

			case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:

				Btc_IntLights = STD_LOW;
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <Btc_RxVal+0x29c>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
				Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8000834:	4812      	ldr	r0, [pc, #72]	; (8000880 <Btc_RxVal+0x29c>)
 8000836:	f009 fd85 	bl	800a344 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>

				break;
 800083a:	e000      	b.n	800083e <Btc_RxVal+0x25a>

			default:

				break;
 800083c:	bf00      	nop

		/* do nothing */

	}

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000009a 	.word	0x2000009a
 8000848:	200000a7 	.word	0x200000a7
 800084c:	200000a8 	.word	0x200000a8
 8000850:	200000a9 	.word	0x200000a9
 8000854:	200000a5 	.word	0x200000a5
 8000858:	2000009c 	.word	0x2000009c
 800085c:	2000009b 	.word	0x2000009b
 8000860:	2000009d 	.word	0x2000009d
 8000864:	2000009e 	.word	0x2000009e
 8000868:	200000a0 	.word	0x200000a0
 800086c:	200000a1 	.word	0x200000a1
 8000870:	200000a2 	.word	0x200000a2
 8000874:	2000009f 	.word	0x2000009f
 8000878:	200000a4 	.word	0x200000a4
 800087c:	200000a3 	.word	0x200000a3
 8000880:	200000a6 	.word	0x200000a6

08000884 <Btc_MainFunction>:

void Btc_MainFunction()
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

	Btc_EnableUart();
 8000888:	f7ff fe3a 	bl	8000500 <Btc_EnableUart>
	Btc_IgnitionState();
 800088c:	f7ff fe46 	bl	800051c <Btc_IgnitionState>
	Btc_RxVal();
 8000890:	f7ff fea8 	bl	80005e4 <Btc_RxVal>

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <CenLoc_State>:
	return E_OK;

}

void CenLoc_State()
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

	CenLoc_SecAlmStateToOff();
 800089c:	f000 f840 	bl	8000920 <CenLoc_SecAlmStateToOff>

	if(CenLoc_PreviousState != CenLoc_CurrentState)
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <CenLoc_State+0x68>)
 80008a2:	781a      	ldrb	r2, [r3, #0]
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <CenLoc_State+0x6c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d027      	beq.n	80008fc <CenLoc_State+0x64>
	{

		CenLoc_PreviousStateFlag 			= CenLoc_PreviousState;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <CenLoc_State+0x68>)
 80008ae:	781a      	ldrb	r2, [r3, #0]
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <CenLoc_State+0x70>)
 80008b2:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 				= CenLoc_CurrentState;
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <CenLoc_State+0x6c>)
 80008b6:	781a      	ldrb	r2, [r3, #0]
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <CenLoc_State+0x68>)
 80008ba:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim2IRQFlag 					= STD_LOW;
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <CenLoc_State+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim5IRQFlag 					= STD_LOW;
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <CenLoc_State+0x78>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim3IRQFlag					= STD_LOW;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <CenLoc_State+0x7c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim11IRQFlag					= STD_LOW;
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <CenLoc_State+0x80>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]

		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 80008d4:	f000 fe86 	bl	80015e4 <SecAlm_Init>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_CenLoc_LockUnlockSequence_TimerHandle, 250);
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <CenLoc_State+0x84>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	21fa      	movs	r1, #250	; 0xfa
 80008de:	4618      	mov	r0, r3
 80008e0:	f009 fddb 	bl	800a49a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag(&CenLoc_Tim2IRQFlag);
 80008e4:	4809      	ldr	r0, [pc, #36]	; (800090c <CenLoc_State+0x74>)
 80008e6:	f009 fe29 	bl	800a53c <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag>
		Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag(&CenLoc_Tim5IRQFlag);
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <CenLoc_State+0x78>)
 80008ec:	f009 fe3c 	bl	800a568 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag>
		Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag(&CenLoc_Tim3IRQFlag);
 80008f0:	4808      	ldr	r0, [pc, #32]	; (8000914 <CenLoc_State+0x7c>)
 80008f2:	f009 fe4f 	bl	800a594 <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag>
		Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag(&CenLoc_Tim11IRQFlag);
 80008f6:	4808      	ldr	r0, [pc, #32]	; (8000918 <CenLoc_State+0x80>)
 80008f8:	f009 fe62 	bl	800a5c0 <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag>

		/* do nothing */

	}

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200000ab 	.word	0x200000ab
 8000904:	200000aa 	.word	0x200000aa
 8000908:	200000ad 	.word	0x200000ad
 800090c:	200000ae 	.word	0x200000ae
 8000910:	200000b0 	.word	0x200000b0
 8000914:	200000af 	.word	0x200000af
 8000918:	200000b1 	.word	0x200000b1
 800091c:	200001bc 	.word	0x200001bc

08000920 <CenLoc_SecAlmStateToOff>:

void CenLoc_SecAlmStateToOff()
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH)
 8000924:	4b03      	ldr	r3, [pc, #12]	; (8000934 <CenLoc_SecAlmStateToOff+0x14>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d101      	bne.n	8000930 <CenLoc_SecAlmStateToOff+0x10>
	{

		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 800092c:	f000 fe5a 	bl	80015e4 <SecAlm_Init>

		/* do nothing */

	}

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200000aa 	.word	0x200000aa

08000938 <CenLoc_ToggleDoorLED>:

void CenLoc_ToggleDoorLED(uint8 PinState)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(CENLOC_DOOR_LED_PORT, CENLOC_DOOR_LED_PIN, PinState);
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	461a      	mov	r2, r3
 8000946:	2140      	movs	r1, #64	; 0x40
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <CenLoc_ToggleDoorLED+0x20>)
 800094a:	f009 fd83 	bl	800a454 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40020000 	.word	0x40020000

0800095c <CenLoc_FollowMeHome>:

void CenLoc_FollowMeHome()
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

	if(CenLoc_Tim5IRQFlag == 1)
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <CenLoc_FollowMeHome+0x3c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d103      	bne.n	8000970 <CenLoc_FollowMeHome+0x14>
	{

		CenLoc_FollowMeHomeState = STD_HIGH;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <CenLoc_FollowMeHome+0x40>)
 800096a:	2201      	movs	r2, #1
 800096c:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 800096e:	e011      	b.n	8000994 <CenLoc_FollowMeHome+0x38>
	else if(CenLoc_Tim5IRQFlag == 2)
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <CenLoc_FollowMeHome+0x3c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b02      	cmp	r3, #2
 8000976:	d10d      	bne.n	8000994 <CenLoc_FollowMeHome+0x38>
		CenLoc_FollowMeHomeState = STD_LOW;
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <CenLoc_FollowMeHome+0x40>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_FollowMeHome_TimerHandle);
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <CenLoc_FollowMeHome+0x44>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f009 fe32 	bl	800a5ec <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		CenLoc_Tim5IRQFlag = 2;
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <CenLoc_FollowMeHome+0x3c>)
 800098a:	2202      	movs	r2, #2
 800098c:	701a      	strb	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag(&CenLoc_Tim5IRQFlag);
 800098e:	4802      	ldr	r0, [pc, #8]	; (8000998 <CenLoc_FollowMeHome+0x3c>)
 8000990:	f009 fdea 	bl	800a568 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag>
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200000b0 	.word	0x200000b0
 800099c:	200000ac 	.word	0x200000ac
 80009a0:	200001c8 	.word	0x200001c8

080009a4 <CenLoc_UnlockSequence>:
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_TurnSignalRight(CenLoc_BlinkState);

}

void CenLoc_UnlockSequence()
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0

	Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLed_TurnOnCyclic_TimerHandle);
 80009a8:	4b36      	ldr	r3, [pc, #216]	; (8000a84 <CenLoc_UnlockSequence+0xe0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f009 fe1d 	bl	800a5ec <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>

	CenLoc_ToggleDoorLED(CenLoc_CurrentState);
 80009b2:	4b35      	ldr	r3, [pc, #212]	; (8000a88 <CenLoc_UnlockSequence+0xe4>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ffbe 	bl	8000938 <CenLoc_ToggleDoorLED>
	CenLoc_FollowMeHome();
 80009bc:	f7ff ffce 	bl	800095c <CenLoc_FollowMeHome>

	localPreviousState = STD_HIGH;
 80009c0:	4b32      	ldr	r3, [pc, #200]	; (8000a8c <CenLoc_UnlockSequence+0xe8>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	701a      	strb	r2, [r3, #0]

	if(CenLoc_Tim2IRQFlag <= 3)
 80009c6:	4b32      	ldr	r3, [pc, #200]	; (8000a90 <CenLoc_UnlockSequence+0xec>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d846      	bhi.n	8000a5c <CenLoc_UnlockSequence+0xb8>
	{

		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 80009ce:	4b31      	ldr	r3, [pc, #196]	; (8000a94 <CenLoc_UnlockSequence+0xf0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009d6:	4618      	mov	r0, r3
 80009d8:	f009 fd5f 	bl	800a49a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_FollowMeHome_TimerHandle, 10000);
 80009dc:	4b2e      	ldr	r3, [pc, #184]	; (8000a98 <CenLoc_UnlockSequence+0xf4>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f242 7110 	movw	r1, #10000	; 0x2710
 80009e4:	4618      	mov	r0, r3
 80009e6:	f009 fd58 	bl	800a49a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		CenLoc_Tim5IRQFlag = 1;
 80009ea:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <CenLoc_UnlockSequence+0xf8>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag(&CenLoc_Tim5IRQFlag);
 80009f0:	482a      	ldr	r0, [pc, #168]	; (8000a9c <CenLoc_UnlockSequence+0xf8>)
 80009f2:	f009 fdb9 	bl	800a568 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag>

		switch(CenLoc_Tim2IRQFlag)
 80009f6:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <CenLoc_UnlockSequence+0xec>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b03      	cmp	r3, #3
 80009fc:	d83e      	bhi.n	8000a7c <CenLoc_UnlockSequence+0xd8>
 80009fe:	a201      	add	r2, pc, #4	; (adr r2, 8000a04 <CenLoc_UnlockSequence+0x60>)
 8000a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a04:	08000a15 	.word	0x08000a15
 8000a08:	08000a27 	.word	0x08000a27
 8000a0c:	08000a39 	.word	0x08000a39
 8000a10:	08000a4b 	.word	0x08000a4b
		{

			case 0:

				CenLoc_BlinkState = STD_HIGH;
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <CenLoc_UnlockSequence+0xfc>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <CenLoc_UnlockSequence+0xfc>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f93c 	bl	8000c9c <CenLoc_ToggleBuzzer>

				break;
 8000a24:	e02b      	b.n	8000a7e <CenLoc_UnlockSequence+0xda>

			case 1:

				CenLoc_BlinkState = STD_LOW;
 8000a26:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <CenLoc_UnlockSequence+0xfc>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <CenLoc_UnlockSequence+0xfc>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 f933 	bl	8000c9c <CenLoc_ToggleBuzzer>

				break;
 8000a36:	e022      	b.n	8000a7e <CenLoc_UnlockSequence+0xda>

			case 2:

				CenLoc_BlinkState = STD_HIGH;
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <CenLoc_UnlockSequence+0xfc>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <CenLoc_UnlockSequence+0xfc>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f92a 	bl	8000c9c <CenLoc_ToggleBuzzer>

				break;
 8000a48:	e019      	b.n	8000a7e <CenLoc_UnlockSequence+0xda>

			case 3:

				CenLoc_BlinkState = STD_LOW;
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <CenLoc_UnlockSequence+0xfc>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <CenLoc_UnlockSequence+0xfc>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 f921 	bl	8000c9c <CenLoc_ToggleBuzzer>

				break;
 8000a5a:	e010      	b.n	8000a7e <CenLoc_UnlockSequence+0xda>
				break;

		}

	}
	else if(CenLoc_Tim2IRQFlag >= 3)
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <CenLoc_UnlockSequence+0xec>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d90c      	bls.n	8000a7e <CenLoc_UnlockSequence+0xda>
	{

		CenLoc_BlinkState = 2;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <CenLoc_UnlockSequence+0xfc>)
 8000a66:	2202      	movs	r2, #2
 8000a68:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim2IRQFlag = 6;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <CenLoc_UnlockSequence+0xec>)
 8000a6c:	2206      	movs	r2, #6
 8000a6e:	701a      	strb	r2, [r3, #0]
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_TurnSignals_TimerHandle);
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <CenLoc_UnlockSequence+0xf0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f009 fdb9 	bl	800a5ec <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>

		/* do nothing */

	}

}
 8000a7a:	e000      	b.n	8000a7e <CenLoc_UnlockSequence+0xda>
				break;
 8000a7c:	bf00      	nop
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200001c0 	.word	0x200001c0
 8000a88:	200000aa 	.word	0x200000aa
 8000a8c:	200000b2 	.word	0x200000b2
 8000a90:	200000ae 	.word	0x200000ae
 8000a94:	200001cc 	.word	0x200001cc
 8000a98:	200001c8 	.word	0x200001c8
 8000a9c:	200000b0 	.word	0x200000b0
 8000aa0:	20000000 	.word	0x20000000

08000aa4 <CenLoc_LockSequence>:

void CenLoc_LockSequence()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

	CenLoc_ToggleDoorLED(CenLoc_CurrentState);
 8000aa8:	4b2c      	ldr	r3, [pc, #176]	; (8000b5c <CenLoc_LockSequence+0xb8>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff43 	bl	8000938 <CenLoc_ToggleDoorLED>
	CenLoc_FollowMeHome();
 8000ab2:	f7ff ff53 	bl	800095c <CenLoc_FollowMeHome>

	if(CenLoc_Tim2IRQFlag <= 1 && localPreviousState == STD_HIGH)
 8000ab6:	4b2a      	ldr	r3, [pc, #168]	; (8000b60 <CenLoc_LockSequence+0xbc>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d835      	bhi.n	8000b2a <CenLoc_LockSequence+0x86>
 8000abe:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <CenLoc_LockSequence+0xc0>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d131      	bne.n	8000b2a <CenLoc_LockSequence+0x86>
	{

		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <CenLoc_LockSequence+0xc4>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f009 fce3 	bl	800a49a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_FollowMeHome_TimerHandle, 10000);
 8000ad4:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <CenLoc_LockSequence+0xc8>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f242 7110 	movw	r1, #10000	; 0x2710
 8000adc:	4618      	mov	r0, r3
 8000ade:	f009 fcdc 	bl	800a49a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		CenLoc_Tim5IRQFlag = 1;
 8000ae2:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <CenLoc_LockSequence+0xcc>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag(&CenLoc_Tim5IRQFlag);
 8000ae8:	4821      	ldr	r0, [pc, #132]	; (8000b70 <CenLoc_LockSequence+0xcc>)
 8000aea:	f009 fd3d 	bl	800a568 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag>

		switch(CenLoc_Tim2IRQFlag)
 8000aee:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <CenLoc_LockSequence+0xbc>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d002      	beq.n	8000afc <CenLoc_LockSequence+0x58>
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d009      	beq.n	8000b0e <CenLoc_LockSequence+0x6a>

				break;

			default:

				break;
 8000afa:	e014      	b.n	8000b26 <CenLoc_LockSequence+0x82>
				CenLoc_BlinkState = STD_HIGH;
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <CenLoc_LockSequence+0xd0>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <CenLoc_LockSequence+0xd0>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f8c8 	bl	8000c9c <CenLoc_ToggleBuzzer>
				break;
 8000b0c:	e00b      	b.n	8000b26 <CenLoc_LockSequence+0x82>
				CenLoc_BlinkState = STD_LOW;
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <CenLoc_LockSequence+0xd0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <CenLoc_LockSequence+0xd0>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 f8bf 	bl	8000c9c <CenLoc_ToggleBuzzer>
				localPreviousState = STD_LOW;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <CenLoc_LockSequence+0xc0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
				break;
 8000b24:	bf00      	nop
		switch(CenLoc_Tim2IRQFlag)
 8000b26:	bf00      	nop
	else
	{
		/* do nothing */
	}

}
 8000b28:	e016      	b.n	8000b58 <CenLoc_LockSequence+0xb4>
	else if(CenLoc_Tim2IRQFlag == 2)
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <CenLoc_LockSequence+0xbc>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d112      	bne.n	8000b58 <CenLoc_LockSequence+0xb4>
		CenLoc_BlinkState = 2;
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <CenLoc_LockSequence+0xd0>)
 8000b34:	2202      	movs	r2, #2
 8000b36:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim2IRQFlag = 4;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <CenLoc_LockSequence+0xbc>)
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	701a      	strb	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag(&CenLoc_Tim2IRQFlag);
 8000b3e:	4808      	ldr	r0, [pc, #32]	; (8000b60 <CenLoc_LockSequence+0xbc>)
 8000b40:	f009 fcfc 	bl	800a53c <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <CenLoc_LockSequence+0xd4>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f009 fd4f 	bl	800a5ec <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_TurnSignals_TimerHandle);
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <CenLoc_LockSequence+0xc4>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f009 fd4a 	bl	800a5ec <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200000aa 	.word	0x200000aa
 8000b60:	200000ae 	.word	0x200000ae
 8000b64:	200000b2 	.word	0x200000b2
 8000b68:	200001cc 	.word	0x200001cc
 8000b6c:	200001c8 	.word	0x200001c8
 8000b70:	200000b0 	.word	0x200000b0
 8000b74:	20000000 	.word	0x20000000
 8000b78:	200001bc 	.word	0x200001bc

08000b7c <CenLoc_ControlAlarmLed>:

void CenLoc_ControlAlarmLed()
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH)
 8000b80:	4b30      	ldr	r3, [pc, #192]	; (8000c44 <CenLoc_ControlAlarmLed+0xc8>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d10e      	bne.n	8000ba6 <CenLoc_ControlAlarmLed+0x2a>
	{

		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f000 fd5f 	bl	800164c <SecAlm_ToggleAlarmLed>
		CenLoc_Tim11IRQFlag = STD_LOW;
 8000b8e:	4b2e      	ldr	r3, [pc, #184]	; (8000c48 <CenLoc_ControlAlarmLed+0xcc>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag(&CenLoc_Tim11IRQFlag);
 8000b94:	482c      	ldr	r0, [pc, #176]	; (8000c48 <CenLoc_ControlAlarmLed+0xcc>)
 8000b96:	f009 fd13 	bl	800a5c0 <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 8000b9a:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <CenLoc_ControlAlarmLed+0xd0>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f009 fd24 	bl	800a5ec <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>

		}

	}

}
 8000ba4:	e04c      	b.n	8000c40 <CenLoc_ControlAlarmLed+0xc4>
	else if(CenLoc_CurrentState == STD_LOW)
 8000ba6:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <CenLoc_ControlAlarmLed+0xc8>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d148      	bne.n	8000c40 <CenLoc_ControlAlarmLed+0xc4>
		if(osTimerIsRunning(Os_SecAlmLed_TurnOnCyclic_TimerHandle) == 0 && osTimerIsRunning(Os_SecAlmLedTurnOn_TimerHandle) == 0)
 8000bae:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <CenLoc_ControlAlarmLed+0xd4>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f006 fa9d 	bl	80070f2 <osTimerIsRunning>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d10e      	bne.n	8000bdc <CenLoc_ControlAlarmLed+0x60>
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <CenLoc_ControlAlarmLed+0xd0>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f006 fa95 	bl	80070f2 <osTimerIsRunning>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d106      	bne.n	8000bdc <CenLoc_ControlAlarmLed+0x60>
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmLed_TurnOnCyclic_TimerHandle, 3750);
 8000bce:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <CenLoc_ControlAlarmLed+0xd4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f640 61a6 	movw	r1, #3750	; 0xea6
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f009 fc5f 	bl	800a49a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		if(CenLoc_Tim3IRQFlag == 1)
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <CenLoc_ControlAlarmLed+0xd8>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d12d      	bne.n	8000c40 <CenLoc_ControlAlarmLed+0xc4>
			if(osTimerIsRunning(Os_SecAlmLedTurnOn_TimerHandle) == 0)
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <CenLoc_ControlAlarmLed+0xd0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f006 fa82 	bl	80070f2 <osTimerIsRunning>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d105      	bne.n	8000c00 <CenLoc_ControlAlarmLed+0x84>
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmLedTurnOn_TimerHandle, 250);
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <CenLoc_ControlAlarmLed+0xd0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	21fa      	movs	r1, #250	; 0xfa
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f009 fc4d 	bl	800a49a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
			if(CenLoc_Tim11IRQFlag < 1)
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <CenLoc_ControlAlarmLed+0xcc>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d103      	bne.n	8000c10 <CenLoc_ControlAlarmLed+0x94>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_HIGH);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f000 fd1f 	bl	800164c <SecAlm_ToggleAlarmLed>
}
 8000c0e:	e017      	b.n	8000c40 <CenLoc_ControlAlarmLed+0xc4>
			else if(CenLoc_Tim11IRQFlag > 1)
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <CenLoc_ControlAlarmLed+0xcc>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d913      	bls.n	8000c40 <CenLoc_ControlAlarmLed+0xc4>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f000 fd17 	bl	800164c <SecAlm_ToggleAlarmLed>
				CenLoc_Tim11IRQFlag = 0;
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <CenLoc_ControlAlarmLed+0xcc>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
				CenLoc_Tim3IRQFlag = 0;
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <CenLoc_ControlAlarmLed+0xd8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag(&CenLoc_Tim11IRQFlag);
 8000c2a:	4807      	ldr	r0, [pc, #28]	; (8000c48 <CenLoc_ControlAlarmLed+0xcc>)
 8000c2c:	f009 fcc8 	bl	800a5c0 <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag>
				Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag(&CenLoc_Tim3IRQFlag);
 8000c30:	4808      	ldr	r0, [pc, #32]	; (8000c54 <CenLoc_ControlAlarmLed+0xd8>)
 8000c32:	f009 fcaf 	bl	800a594 <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag>
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <CenLoc_ControlAlarmLed+0xd0>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f009 fcd6 	bl	800a5ec <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200000aa 	.word	0x200000aa
 8000c48:	200000b1 	.word	0x200000b1
 8000c4c:	200001c4 	.word	0x200001c4
 8000c50:	200001c0 	.word	0x200001c0
 8000c54:	200000af 	.word	0x200000af

08000c58 <CenLoc_LockUnlockStates>:

void CenLoc_LockUnlockStates()
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH && SecAlm_Trigger == STD_LOW)
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <CenLoc_LockUnlockStates+0x3c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d108      	bne.n	8000c76 <CenLoc_LockUnlockStates+0x1e>
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <CenLoc_LockUnlockStates+0x40>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d104      	bne.n	8000c76 <CenLoc_LockUnlockStates+0x1e>
	{

		CenLoc_UnlockSequence();
 8000c6c:	f7ff fe9a 	bl	80009a4 <CenLoc_UnlockSequence>
		CenLoc_ControlAlarmLed();
 8000c70:	f7ff ff84 	bl	8000b7c <CenLoc_ControlAlarmLed>
		CenLoc_LockSequence();
		CenLoc_ControlAlarmLed();

	}

}
 8000c74:	e00b      	b.n	8000c8e <CenLoc_LockUnlockStates+0x36>
	else if(CenLoc_CurrentState == STD_LOW && SecAlm_Trigger == STD_LOW)
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <CenLoc_LockUnlockStates+0x3c>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d107      	bne.n	8000c8e <CenLoc_LockUnlockStates+0x36>
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <CenLoc_LockUnlockStates+0x40>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d103      	bne.n	8000c8e <CenLoc_LockUnlockStates+0x36>
		CenLoc_LockSequence();
 8000c86:	f7ff ff0d 	bl	8000aa4 <CenLoc_LockSequence>
		CenLoc_ControlAlarmLed();
 8000c8a:	f7ff ff77 	bl	8000b7c <CenLoc_ControlAlarmLed>
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200000aa 	.word	0x200000aa
 8000c98:	200000ce 	.word	0x200000ce

08000c9c <CenLoc_ToggleBuzzer>:

void CenLoc_ToggleBuzzer(uint8 PinState)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(CENLOC_BUZZER_PORT, CENLOC_BUZZER_PIN, PinState);
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	2104      	movs	r1, #4
 8000cac:	4803      	ldr	r0, [pc, #12]	; (8000cbc <CenLoc_ToggleBuzzer+0x20>)
 8000cae:	f009 fbd1 	bl	800a454 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40020400 	.word	0x40020400

08000cc0 <CenLoc_MainFunction>:

void CenLoc_MainFunction()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

	CenLoc_State();
 8000cc4:	f7ff fde8 	bl	8000898 <CenLoc_State>
	CenLoc_LockUnlockStates();
 8000cc8:	f7ff ffc6 	bl	8000c58 <CenLoc_LockUnlockStates>

}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <ExtLights_TurnSignalHazardLight>:
void ExtLights_PrevStateTSHL();
StdReturnType ExtLights_Init();
uint32 ExtLights_LightReadSensorValue();

void ExtLights_TurnSignalHazardLight()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0

	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8000cd4:	4b47      	ldr	r3, [pc, #284]	; (8000df4 <ExtLights_TurnSignalHazardLight+0x124>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d121      	bne.n	8000d20 <ExtLights_TurnSignalHazardLight+0x50>
	{

		if(osTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 8000cdc:	4b46      	ldr	r3, [pc, #280]	; (8000df8 <ExtLights_TurnSignalHazardLight+0x128>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f006 fa06 	bl	80070f2 <osTimerIsRunning>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d106      	bne.n	8000cfa <ExtLights_TurnSignalHazardLight+0x2a>
		{

			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8000cec:	4b42      	ldr	r3, [pc, #264]	; (8000df8 <ExtLights_TurnSignalHazardLight+0x128>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f009 fbd0 	bl	800a49a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>

			/* do nothing */

		}

		if(ExtLights_LTSFlag % 2 == 0)
 8000cfa:	4b40      	ldr	r3, [pc, #256]	; (8000dfc <ExtLights_TurnSignalHazardLight+0x12c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d103      	bne.n	8000d0e <ExtLights_TurnSignalHazardLight+0x3e>
		{

			ExtLights_TurnSignalLeft(STD_HIGH);
 8000d06:	2001      	movs	r0, #1
 8000d08:	f000 fa78 	bl	80011fc <ExtLights_TurnSignalLeft>
 8000d0c:	e008      	b.n	8000d20 <ExtLights_TurnSignalHazardLight+0x50>

		}
		else if(ExtLights_LTSFlag % 2 == STD_HIGH)
 8000d0e:	4b3b      	ldr	r3, [pc, #236]	; (8000dfc <ExtLights_TurnSignalHazardLight+0x12c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <ExtLights_TurnSignalHazardLight+0x50>
		{

			ExtLights_TurnSignalLeft(STD_LOW);
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f000 fa6e 	bl	80011fc <ExtLights_TurnSignalLeft>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8000d20:	4b37      	ldr	r3, [pc, #220]	; (8000e00 <ExtLights_TurnSignalHazardLight+0x130>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d121      	bne.n	8000d6c <ExtLights_TurnSignalHazardLight+0x9c>
	{

		if(osTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 8000d28:	4b33      	ldr	r3, [pc, #204]	; (8000df8 <ExtLights_TurnSignalHazardLight+0x128>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f006 f9e0 	bl	80070f2 <osTimerIsRunning>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d106      	bne.n	8000d46 <ExtLights_TurnSignalHazardLight+0x76>
		{

			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8000d38:	4b2f      	ldr	r3, [pc, #188]	; (8000df8 <ExtLights_TurnSignalHazardLight+0x128>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d40:	4618      	mov	r0, r3
 8000d42:	f009 fbaa 	bl	800a49a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>

			/* do nothing */

		}

		if(ExtLights_RTSFlag % 2 == STD_LOW)
 8000d46:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <ExtLights_TurnSignalHazardLight+0x134>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d103      	bne.n	8000d5a <ExtLights_TurnSignalHazardLight+0x8a>
		{

			ExtLights_TurnSignalRight(STD_HIGH);
 8000d52:	2001      	movs	r0, #1
 8000d54:	f000 fa64 	bl	8001220 <ExtLights_TurnSignalRight>
 8000d58:	e008      	b.n	8000d6c <ExtLights_TurnSignalHazardLight+0x9c>

		}
		else if(ExtLights_RTSFlag % 2 == STD_HIGH)
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <ExtLights_TurnSignalHazardLight+0x134>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d002      	beq.n	8000d6c <ExtLights_TurnSignalHazardLight+0x9c>
		{

			ExtLights_TurnSignalRight(STD_LOW);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f000 fa5a 	bl	8001220 <ExtLights_TurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 8000d6c:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <ExtLights_TurnSignalHazardLight+0x138>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d127      	bne.n	8000dc4 <ExtLights_TurnSignalHazardLight+0xf4>
	{

		if(osTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 8000d74:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <ExtLights_TurnSignalHazardLight+0x128>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f006 f9ba 	bl	80070f2 <osTimerIsRunning>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d106      	bne.n	8000d92 <ExtLights_TurnSignalHazardLight+0xc2>
		{

			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <ExtLights_TurnSignalHazardLight+0x128>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f009 fb84 	bl	800a49a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>

			/* do nothing */

		}

		if(ExtLights_HLFlag % 2 == STD_LOW)
 8000d92:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <ExtLights_TurnSignalHazardLight+0x13c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d106      	bne.n	8000dac <ExtLights_TurnSignalHazardLight+0xdc>
		{

			ExtLights_TurnSignalLeft(STD_HIGH);
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f000 fa2c 	bl	80011fc <ExtLights_TurnSignalLeft>
			ExtLights_TurnSignalRight(STD_HIGH);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f000 fa3b 	bl	8001220 <ExtLights_TurnSignalRight>
 8000daa:	e00b      	b.n	8000dc4 <ExtLights_TurnSignalHazardLight+0xf4>

		}
		else if(ExtLights_HLFlag % 2 == STD_HIGH)
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <ExtLights_TurnSignalHazardLight+0x13c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d005      	beq.n	8000dc4 <ExtLights_TurnSignalHazardLight+0xf4>
		{

			ExtLights_TurnSignalLeft(STD_LOW);
 8000db8:	2000      	movs	r0, #0
 8000dba:	f000 fa1f 	bl	80011fc <ExtLights_TurnSignalLeft>
			ExtLights_TurnSignalRight(STD_LOW);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f000 fa2e 	bl	8001220 <ExtLights_TurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <ExtLights_TurnSignalHazardLight+0x130>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d106      	bne.n	8000dda <ExtLights_TurnSignalHazardLight+0x10a>
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <ExtLights_TurnSignalHazardLight+0x138>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <ExtLights_TurnSignalHazardLight+0x10a>
	{

		ExtLights_TurnSignalRight(STD_LOW);
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f000 fa23 	bl	8001220 <ExtLights_TurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <ExtLights_TurnSignalHazardLight+0x124>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d106      	bne.n	8000df0 <ExtLights_TurnSignalHazardLight+0x120>
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <ExtLights_TurnSignalHazardLight+0x138>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d102      	bne.n	8000df0 <ExtLights_TurnSignalHazardLight+0x120>
	{

		ExtLights_TurnSignalLeft(STD_LOW);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f000 fa06 	bl	80011fc <ExtLights_TurnSignalLeft>

		/* do nothing */

	}

}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200000b9 	.word	0x200000b9
 8000df8:	200001cc 	.word	0x200001cc
 8000dfc:	200000c4 	.word	0x200000c4
 8000e00:	200000ba 	.word	0x200000ba
 8000e04:	200000c0 	.word	0x200000c0
 8000e08:	200000bb 	.word	0x200000bb
 8000e0c:	200000c8 	.word	0x200000c8

08000e10 <ExtLights_PrevStateTSHL>:

void ExtLights_PrevStateTSHL()
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0

	if(ExtLights_TurnSignalLeft_CurrentState != ExtLights_LTS_PrevState)
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <ExtLights_PrevStateTSHL+0x68>)
 8000e16:	781a      	ldrb	r2, [r3, #0]
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <ExtLights_PrevStateTSHL+0x6c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d009      	beq.n	8000e34 <ExtLights_PrevStateTSHL+0x24>
	{

		ExtLights_LTS_PrevState = ExtLights_TurnSignalLeft_CurrentState;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <ExtLights_PrevStateTSHL+0x68>)
 8000e22:	781a      	ldrb	r2, [r3, #0]
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <ExtLights_PrevStateTSHL+0x6c>)
 8000e26:	701a      	strb	r2, [r3, #0]
		ExtLights_LTSFlag = 0;
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <ExtLights_PrevStateTSHL+0x70>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag(&ExtLights_LTSFlag);
 8000e2e:	4814      	ldr	r0, [pc, #80]	; (8000e80 <ExtLights_PrevStateTSHL+0x70>)
 8000e30:	f009 fb42 	bl	800a4b8 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState != ExtLights_RTS_PrevState)
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <ExtLights_PrevStateTSHL+0x74>)
 8000e36:	781a      	ldrb	r2, [r3, #0]
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <ExtLights_PrevStateTSHL+0x78>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d009      	beq.n	8000e54 <ExtLights_PrevStateTSHL+0x44>
	{

		ExtLights_RTS_PrevState = ExtLights_TurnSignalRight_CurrentState;
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <ExtLights_PrevStateTSHL+0x74>)
 8000e42:	781a      	ldrb	r2, [r3, #0]
 8000e44:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <ExtLights_PrevStateTSHL+0x78>)
 8000e46:	701a      	strb	r2, [r3, #0]
		ExtLights_RTSFlag = 0;
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <ExtLights_PrevStateTSHL+0x7c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag(&ExtLights_RTSFlag);
 8000e4e:	480f      	ldr	r0, [pc, #60]	; (8000e8c <ExtLights_PrevStateTSHL+0x7c>)
 8000e50:	f009 fb48 	bl	800a4e4 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag>

		/* do nothing */

	}

	if(ExtLights_HazardLight_CurrentState != ExtLights_HL_PrevState)
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <ExtLights_PrevStateTSHL+0x80>)
 8000e56:	781a      	ldrb	r2, [r3, #0]
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <ExtLights_PrevStateTSHL+0x84>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d009      	beq.n	8000e74 <ExtLights_PrevStateTSHL+0x64>
	{

		ExtLights_HL_PrevState = ExtLights_HazardLight_CurrentState;
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <ExtLights_PrevStateTSHL+0x80>)
 8000e62:	781a      	ldrb	r2, [r3, #0]
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <ExtLights_PrevStateTSHL+0x84>)
 8000e66:	701a      	strb	r2, [r3, #0]
		ExtLights_HLFlag = 0;
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <ExtLights_PrevStateTSHL+0x88>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag(&ExtLights_HLFlag);
 8000e6e:	480a      	ldr	r0, [pc, #40]	; (8000e98 <ExtLights_PrevStateTSHL+0x88>)
 8000e70:	f009 fb4e 	bl	800a510 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag>

		/* do nothing */

	}

}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200000b9 	.word	0x200000b9
 8000e7c:	200000be 	.word	0x200000be
 8000e80:	200000c4 	.word	0x200000c4
 8000e84:	200000ba 	.word	0x200000ba
 8000e88:	200000bd 	.word	0x200000bd
 8000e8c:	200000c0 	.word	0x200000c0
 8000e90:	200000bb 	.word	0x200000bb
 8000e94:	200000bf 	.word	0x200000bf
 8000e98:	200000c8 	.word	0x200000c8

08000e9c <ExtLights_LightState>:

void ExtLights_LightState()
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0



	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 8000ea0:	4b5a      	ldr	r3, [pc, #360]	; (800100c <ExtLights_LightState+0x170>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d114      	bne.n	8000ed2 <ExtLights_LightState+0x36>
	{

		ExtLights_LowBeam(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000ea8:	4b58      	ldr	r3, [pc, #352]	; (800100c <ExtLights_LightState+0x170>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 f963 	bl	8001178 <ExtLights_LowBeam>
		ExtLights_DayTimeRunningLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000eb2:	4b56      	ldr	r3, [pc, #344]	; (800100c <ExtLights_LightState+0x170>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f982 	bl	80011c0 <ExtLights_DayTimeRunningLight>
		ExtLights_RearPositionLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000ebc:	4b53      	ldr	r3, [pc, #332]	; (800100c <ExtLights_LightState+0x170>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 f9bf 	bl	8001244 <ExtLights_RearPositionLight>
		ExtLights_LicensePlateLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000ec6:	4b51      	ldr	r3, [pc, #324]	; (800100c <ExtLights_LightState+0x170>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fa02 	bl	80012d4 <ExtLights_LicensePlateLight>
 8000ed0:	e01c      	b.n	8000f0c <ExtLights_LightState+0x70>

	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
 8000ed2:	4b4e      	ldr	r3, [pc, #312]	; (800100c <ExtLights_LightState+0x170>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d118      	bne.n	8000f0c <ExtLights_LightState+0x70>
	{

		ExtLights_LowBeam(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000eda:	4b4c      	ldr	r3, [pc, #304]	; (800100c <ExtLights_LightState+0x170>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f94a 	bl	8001178 <ExtLights_LowBeam>
		ExtLights_DayTimeRunningLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000ee4:	4b49      	ldr	r3, [pc, #292]	; (800100c <ExtLights_LightState+0x170>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 f969 	bl	80011c0 <ExtLights_DayTimeRunningLight>
		ExtLights_RearPositionLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000eee:	4b47      	ldr	r3, [pc, #284]	; (800100c <ExtLights_LightState+0x170>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 f9a6 	bl	8001244 <ExtLights_RearPositionLight>
		ExtLights_LicensePlateLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000ef8:	4b44      	ldr	r3, [pc, #272]	; (800100c <ExtLights_LightState+0x170>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f9e9 	bl	80012d4 <ExtLights_LicensePlateLight>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_FollowMeHome_TimerHandle);
 8000f02:	4b43      	ldr	r3, [pc, #268]	; (8001010 <ExtLights_LightState+0x174>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f009 fb70 	bl	800a5ec <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>

		/* do nothing */

	}

	if( ExtLights_ReverseLight_CurrentState == STD_HIGH ||
 8000f0c:	4b41      	ldr	r3, [pc, #260]	; (8001014 <ExtLights_LightState+0x178>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d023      	beq.n	8000f5c <ExtLights_LightState+0xc0>
		ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 8000f14:	4b40      	ldr	r3, [pc, #256]	; (8001018 <ExtLights_LightState+0x17c>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
	if( ExtLights_ReverseLight_CurrentState == STD_HIGH ||
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d01f      	beq.n	8000f5c <ExtLights_LightState+0xc0>
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 8000f1c:	4b3f      	ldr	r3, [pc, #252]	; (800101c <ExtLights_LightState+0x180>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
		ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d01b      	beq.n	8000f5c <ExtLights_LightState+0xc0>
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 8000f24:	4b3e      	ldr	r3, [pc, #248]	; (8001020 <ExtLights_LightState+0x184>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d117      	bne.n	8000f5c <ExtLights_LightState+0xc0>
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 8000f2c:	4b3d      	ldr	r3, [pc, #244]	; (8001024 <ExtLights_LightState+0x188>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d013      	beq.n	8000f5c <ExtLights_LightState+0xc0>
		ExtLights_FrontFogLight_CurrentState == STD_HIGH ||
 8000f34:	4b3c      	ldr	r3, [pc, #240]	; (8001028 <ExtLights_LightState+0x18c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d00f      	beq.n	8000f5c <ExtLights_LightState+0xc0>
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 8000f3c:	4b3b      	ldr	r3, [pc, #236]	; (800102c <ExtLights_LightState+0x190>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
		ExtLights_FrontFogLight_CurrentState == STD_HIGH ||
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d00b      	beq.n	8000f5c <ExtLights_LightState+0xc0>
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 8000f44:	4b3a      	ldr	r3, [pc, #232]	; (8001030 <ExtLights_LightState+0x194>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d007      	beq.n	8000f5c <ExtLights_LightState+0xc0>
		ExtLights_HazardLight_CurrentState == STD_HIGH ||
 8000f4c:	4b39      	ldr	r3, [pc, #228]	; (8001034 <ExtLights_LightState+0x198>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d003      	beq.n	8000f5c <ExtLights_LightState+0xc0>
		ExtLights_RearFogLight_CurrentState == STD_HIGH)
 8000f54:	4b38      	ldr	r3, [pc, #224]	; (8001038 <ExtLights_LightState+0x19c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
		ExtLights_HazardLight_CurrentState == STD_HIGH ||
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d105      	bne.n	8000f68 <ExtLights_LightState+0xcc>
	{

		CenLoc_FollowMeHomeState = STD_LOW;
 8000f5c:	4b2b      	ldr	r3, [pc, #172]	; (800100c <ExtLights_LightState+0x170>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim5IRQFlag = 2;
 8000f62:	4b36      	ldr	r3, [pc, #216]	; (800103c <ExtLights_LightState+0x1a0>)
 8000f64:	2202      	movs	r2, #2
 8000f66:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_HIGH)
 8000f68:	4b35      	ldr	r3, [pc, #212]	; (8001040 <ExtLights_LightState+0x1a4>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d10a      	bne.n	8000f86 <ExtLights_LightState+0xea>
	{

		ExtLights_TurnSignalLeft(CenLoc_BlinkState);
 8000f70:	4b33      	ldr	r3, [pc, #204]	; (8001040 <ExtLights_LightState+0x1a4>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 f941 	bl	80011fc <ExtLights_TurnSignalLeft>
		ExtLights_TurnSignalRight(CenLoc_BlinkState);
 8000f7a:	4b31      	ldr	r3, [pc, #196]	; (8001040 <ExtLights_LightState+0x1a4>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f94e 	bl	8001220 <ExtLights_TurnSignalRight>
 8000f84:	e018      	b.n	8000fb8 <ExtLights_LightState+0x11c>

	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_LOW)
 8000f86:	4b2e      	ldr	r3, [pc, #184]	; (8001040 <ExtLights_LightState+0x1a4>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10a      	bne.n	8000fa4 <ExtLights_LightState+0x108>
	{

		ExtLights_TurnSignalLeft(CenLoc_BlinkState);
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <ExtLights_LightState+0x1a4>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f932 	bl	80011fc <ExtLights_TurnSignalLeft>
		ExtLights_TurnSignalRight(CenLoc_BlinkState);
 8000f98:	4b29      	ldr	r3, [pc, #164]	; (8001040 <ExtLights_LightState+0x1a4>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 f93f 	bl	8001220 <ExtLights_TurnSignalRight>
 8000fa2:	e009      	b.n	8000fb8 <ExtLights_LightState+0x11c>

	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 2 || Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 4)
 8000fa4:	4b26      	ldr	r3, [pc, #152]	; (8001040 <ExtLights_LightState+0x1a4>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d003      	beq.n	8000fb4 <ExtLights_LightState+0x118>
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <ExtLights_LightState+0x1a4>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	d101      	bne.n	8000fb8 <ExtLights_LightState+0x11c>
	{

		ExtLights_TurnSignalHazardLight();
 8000fb4:	f7ff fe8c 	bl	8000cd0 <ExtLights_TurnSignalHazardLight>

		/* do nothing */

	}

	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <ExtLights_LightState+0x170>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <ExtLights_LightState+0x128>
	{

		ExtLights_LightSwitchMode();
 8000fc0:	f000 f848 	bl	8001054 <ExtLights_LightSwitchMode>

		/* do nothing */

	}

	if(ExtLights_HighBeam_CurrentState != STD_HIGH)
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <ExtLights_LightState+0x188>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d004      	beq.n	8000fd6 <ExtLights_LightState+0x13a>
	{

		ExtLights_HighBeam(ExtLights_FlashHighBeam_CurrentState);
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <ExtLights_LightState+0x180>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f8e3 	bl	800119c <ExtLights_HighBeam>

		/* do nothing */

	}

	ExtLights_ReverseLight(ExtLights_ReverseLight_CurrentState);
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <ExtLights_LightState+0x178>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f968 	bl	80012b0 <ExtLights_ReverseLight>
	ExtLights_BrakeLight(ExtLights_BrakeLight_CurrentState);
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <ExtLights_LightState+0x17c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f951 	bl	800128c <ExtLights_BrakeLight>
	ExtLights_HighBeam(ExtLights_HighBeam_CurrentState);
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <ExtLights_LightState+0x188>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f8d4 	bl	800119c <ExtLights_HighBeam>
	ExtLights_RearFogLight(ExtLights_RearFogLight_CurrentState);
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <ExtLights_LightState+0x19c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 f935 	bl	8001268 <ExtLights_RearFogLight>
	ExtLights_FrontFogLight(ExtLights_FrontFogLight_CurrentState);
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <ExtLights_LightState+0x18c>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f8e8 	bl	80011d8 <ExtLights_FrontFogLight>

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200000ac 	.word	0x200000ac
 8001010:	200001c8 	.word	0x200001c8
 8001014:	200000b3 	.word	0x200000b3
 8001018:	200000b4 	.word	0x200000b4
 800101c:	200000b5 	.word	0x200000b5
 8001020:	200000b6 	.word	0x200000b6
 8001024:	200000b7 	.word	0x200000b7
 8001028:	200000b8 	.word	0x200000b8
 800102c:	200000b9 	.word	0x200000b9
 8001030:	200000ba 	.word	0x200000ba
 8001034:	200000bb 	.word	0x200000bb
 8001038:	200000bc 	.word	0x200000bc
 800103c:	200000b0 	.word	0x200000b0
 8001040:	20000000 	.word	0x20000000

08001044 <ExtLights_MainFunction>:

void ExtLights_MainFunction()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0

	ExtLights_LightState();
 8001048:	f7ff ff28 	bl	8000e9c <ExtLights_LightState>
	ExtLights_PrevStateTSHL();
 800104c:	f7ff fee0 	bl	8000e10 <ExtLights_PrevStateTSHL>

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <ExtLights_LightSwitchMode>:

void ExtLights_LightSwitchMode()
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0

	switch(ExtLights_LightsSwitch_CurrentState)
 8001058:	4b31      	ldr	r3, [pc, #196]	; (8001120 <ExtLights_LightSwitchMode+0xcc>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	3b17      	subs	r3, #23
 800105e:	2b03      	cmp	r3, #3
 8001060:	d859      	bhi.n	8001116 <ExtLights_LightSwitchMode+0xc2>
 8001062:	a201      	add	r2, pc, #4	; (adr r2, 8001068 <ExtLights_LightSwitchMode+0x14>)
 8001064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001068:	08001079 	.word	0x08001079
 800106c:	08001093 	.word	0x08001093
 8001070:	080010e3 	.word	0x080010e3
 8001074:	080010fd 	.word	0x080010fd
	{
		case EXTLIGHTS_LIGHTSWITCH_STATEZERO:

			ExtLights_LowBeam(STD_LOW);
 8001078:	2000      	movs	r0, #0
 800107a:	f000 f87d 	bl	8001178 <ExtLights_LowBeam>
			ExtLights_DayTimeRunningLight(STD_LOW);
 800107e:	2000      	movs	r0, #0
 8001080:	f000 f89e 	bl	80011c0 <ExtLights_DayTimeRunningLight>
			ExtLights_RearPositionLight(STD_LOW);
 8001084:	2000      	movs	r0, #0
 8001086:	f000 f8dd 	bl	8001244 <ExtLights_RearPositionLight>
			ExtLights_LicensePlateLight(STD_LOW);
 800108a:	2000      	movs	r0, #0
 800108c:	f000 f922 	bl	80012d4 <ExtLights_LicensePlateLight>

			break;
 8001090:	e044      	b.n	800111c <ExtLights_LightSwitchMode+0xc8>

		case EXTLIGHTS_LIGHTSWITCH_STATEONE:

			lightSensorState = ExtLights_LightReadSensorValue();
 8001092:	f000 f849 	bl	8001128 <ExtLights_LightReadSensorValue>
 8001096:	4603      	mov	r3, r0
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4b22      	ldr	r3, [pc, #136]	; (8001124 <ExtLights_LightSwitchMode+0xd0>)
 800109c:	701a      	strb	r2, [r3, #0]

			if(lightSensorState == STD_HIGH)
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <ExtLights_LightSwitchMode+0xd0>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d10c      	bne.n	80010c0 <ExtLights_LightSwitchMode+0x6c>
			{

				ExtLights_LowBeam(STD_HIGH);
 80010a6:	2001      	movs	r0, #1
 80010a8:	f000 f866 	bl	8001178 <ExtLights_LowBeam>
				ExtLights_DayTimeRunningLight(STD_HIGH);
 80010ac:	2001      	movs	r0, #1
 80010ae:	f000 f887 	bl	80011c0 <ExtLights_DayTimeRunningLight>
				ExtLights_RearPositionLight(STD_HIGH);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f000 f8c6 	bl	8001244 <ExtLights_RearPositionLight>
				ExtLights_LicensePlateLight(STD_HIGH);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f000 f90b 	bl	80012d4 <ExtLights_LicensePlateLight>
				ExtLights_RearPositionLight(STD_LOW);
				ExtLights_LicensePlateLight(STD_LOW);

			}

			break;
 80010be:	e02c      	b.n	800111a <ExtLights_LightSwitchMode+0xc6>
			else if(lightSensorState == STD_LOW)
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <ExtLights_LightSwitchMode+0xd0>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d128      	bne.n	800111a <ExtLights_LightSwitchMode+0xc6>
				ExtLights_LowBeam(STD_LOW);
 80010c8:	2000      	movs	r0, #0
 80010ca:	f000 f855 	bl	8001178 <ExtLights_LowBeam>
				ExtLights_DayTimeRunningLight(STD_HIGH);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f000 f876 	bl	80011c0 <ExtLights_DayTimeRunningLight>
				ExtLights_RearPositionLight(STD_LOW);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f000 f8b5 	bl	8001244 <ExtLights_RearPositionLight>
				ExtLights_LicensePlateLight(STD_LOW);
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 f8fa 	bl	80012d4 <ExtLights_LicensePlateLight>
			break;
 80010e0:	e01b      	b.n	800111a <ExtLights_LightSwitchMode+0xc6>

		case EXTLIGHTS_LIGHTSWITCH_STATETWO:

			ExtLights_LowBeam(STD_LOW);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 f848 	bl	8001178 <ExtLights_LowBeam>
			ExtLights_DayTimeRunningLight(STD_HIGH);
 80010e8:	2001      	movs	r0, #1
 80010ea:	f000 f869 	bl	80011c0 <ExtLights_DayTimeRunningLight>
			ExtLights_RearPositionLight(STD_HIGH);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f000 f8a8 	bl	8001244 <ExtLights_RearPositionLight>
			ExtLights_LicensePlateLight(STD_HIGH);
 80010f4:	2001      	movs	r0, #1
 80010f6:	f000 f8ed 	bl	80012d4 <ExtLights_LicensePlateLight>

			break;
 80010fa:	e00f      	b.n	800111c <ExtLights_LightSwitchMode+0xc8>

		case EXTLIGHTS_LIGHTSWITCH_STATETHREE:

			ExtLights_LowBeam(STD_HIGH);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f000 f83b 	bl	8001178 <ExtLights_LowBeam>
			ExtLights_DayTimeRunningLight(STD_HIGH);
 8001102:	2001      	movs	r0, #1
 8001104:	f000 f85c 	bl	80011c0 <ExtLights_DayTimeRunningLight>
			ExtLights_RearPositionLight(STD_HIGH);
 8001108:	2001      	movs	r0, #1
 800110a:	f000 f89b 	bl	8001244 <ExtLights_RearPositionLight>
			ExtLights_LicensePlateLight(STD_HIGH);
 800110e:	2001      	movs	r0, #1
 8001110:	f000 f8e0 	bl	80012d4 <ExtLights_LicensePlateLight>

			break;
 8001114:	e002      	b.n	800111c <ExtLights_LightSwitchMode+0xc8>

		default:

			break;
 8001116:	bf00      	nop
 8001118:	e000      	b.n	800111c <ExtLights_LightSwitchMode+0xc8>
			break;
 800111a:	bf00      	nop

	}

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200000b6 	.word	0x200000b6
 8001124:	200000cc 	.word	0x200000cc

08001128 <ExtLights_LightReadSensorValue>:
	return E_OK;

}

uint32 ExtLights_LightReadSensorValue()
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
	uint8 sensorStatus = STD_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	71fb      	strb	r3, [r7, #7]
	uint32 sensorValue  = STD_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]


	Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA(&hadc1, Adc_ChannelOne_Buffer, ADC_BUFFER_LENGTH);
 8001136:	2210      	movs	r2, #16
 8001138:	490d      	ldr	r1, [pc, #52]	; (8001170 <ExtLights_LightReadSensorValue+0x48>)
 800113a:	480e      	ldr	r0, [pc, #56]	; (8001174 <ExtLights_LightReadSensorValue+0x4c>)
 800113c:	f009 f99d 	bl	800a47a <Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA>
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&sensorValue, RTE_P_ADC_BUFFER_LIGHTSEN);
 8001140:	463b      	mov	r3, r7
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f008 ff2b 	bl	8009fa0 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>

	if(sensorValue < 4000)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001150:	d202      	bcs.n	8001158 <ExtLights_LightReadSensorValue+0x30>
	{

		sensorStatus = STD_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	71fb      	strb	r3, [r7, #7]
 8001156:	e005      	b.n	8001164 <ExtLights_LightReadSensorValue+0x3c>

	}
	else if(sensorValue > 4000)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800115e:	d901      	bls.n	8001164 <ExtLights_LightReadSensorValue+0x3c>
	{

		sensorStatus = STD_HIGH;
 8001160:	2301      	movs	r3, #1
 8001162:	71fb      	strb	r3, [r7, #7]

		/* do nothing */

	}

	return sensorStatus;
 8001164:	79fb      	ldrb	r3, [r7, #7]

}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000780 	.word	0x20000780
 8001174:	200000d8 	.word	0x200000d8

08001178 <ExtLights_LowBeam>:

void ExtLights_LowBeam(uint8 PinState)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_LOWBEAM_PORT, EXTLIGHTS_LOWBEAM_PIN, PinState);
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	461a      	mov	r2, r3
 8001186:	2120      	movs	r1, #32
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <ExtLights_LowBeam+0x20>)
 800118a:	f009 f963 	bl	800a454 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40020000 	.word	0x40020000

0800119c <ExtLights_HighBeam>:

void ExtLights_HighBeam(uint8 PinState)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	461a      	mov	r2, r3
 80011aa:	2110      	movs	r1, #16
 80011ac:	4803      	ldr	r0, [pc, #12]	; (80011bc <ExtLights_HighBeam+0x20>)
 80011ae:	f009 f951 	bl	800a454 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40020000 	.word	0x40020000

080011c0 <ExtLights_DayTimeRunningLight>:

void ExtLights_DayTimeRunningLight(uint8 PinState)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]

	//Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_DAYTIMERUNNINGLIGHT_PORT, EXTLIGHTS_DAYTIMERUNNINGLIGHT_PIN, PinState);

}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <ExtLights_FrontFogLight>:

void ExtLights_FrontFogLight(uint8 PinState)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_FRONTFOGLIGHT_PORT, EXTLIGHTS_FRONTFOGLIGHT_PIN, PinState);
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	461a      	mov	r2, r3
 80011e6:	2101      	movs	r1, #1
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <ExtLights_FrontFogLight+0x20>)
 80011ea:	f009 f933 	bl	800a454 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40020400 	.word	0x40020400

080011fc <ExtLights_TurnSignalLeft>:

void ExtLights_TurnSignalLeft(uint8 PinState)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALLEFT_PORT, EXTLIGHTS_TURNSIGNALLEFT_PIN, PinState);
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	461a      	mov	r2, r3
 800120a:	2140      	movs	r1, #64	; 0x40
 800120c:	4803      	ldr	r0, [pc, #12]	; (800121c <ExtLights_TurnSignalLeft+0x20>)
 800120e:	f009 f921 	bl	800a454 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40020400 	.word	0x40020400

08001220 <ExtLights_TurnSignalRight>:

void ExtLights_TurnSignalRight(uint8 PinState)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALRIGHT_PORT, EXTLIGHTS_TURNSIGNALRIGHT_PIN, PinState);
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	461a      	mov	r2, r3
 800122e:	2180      	movs	r1, #128	; 0x80
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <ExtLights_TurnSignalRight+0x20>)
 8001232:	f009 f90f 	bl	800a454 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40020400 	.word	0x40020400

08001244 <ExtLights_RearPositionLight>:

void ExtLights_RearPositionLight(uint8 PinState)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REARPOSITIONLIGHT_PORT, EXTLIGHTS_REARPOSITIONLIGHT_PIN, PinState);
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	461a      	mov	r2, r3
 8001252:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001256:	4803      	ldr	r0, [pc, #12]	; (8001264 <ExtLights_RearPositionLight+0x20>)
 8001258:	f009 f8fc 	bl	800a454 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40020400 	.word	0x40020400

08001268 <ExtLights_RearFogLight>:

void ExtLights_RearFogLight(uint8 PinState)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REARFOGLIGHT_PORT, EXTLIGHTS_REARFOGLIGHT_PIN, PinState);
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	461a      	mov	r2, r3
 8001276:	2102      	movs	r1, #2
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <ExtLights_RearFogLight+0x20>)
 800127a:	f009 f8eb 	bl	800a454 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40020400 	.word	0x40020400

0800128c <ExtLights_BrakeLight>:

void ExtLights_BrakeLight(uint8 PinState)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_BRAKELIGHT_PORT, EXTLIGHTS_BRAKELIGHT_PIN, PinState);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	461a      	mov	r2, r3
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	4803      	ldr	r0, [pc, #12]	; (80012ac <ExtLights_BrakeLight+0x20>)
 800129e:	f009 f8d9 	bl	800a454 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40020000 	.word	0x40020000

080012b0 <ExtLights_ReverseLight>:

void ExtLights_ReverseLight(uint8 PinState)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	461a      	mov	r2, r3
 80012be:	2120      	movs	r1, #32
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <ExtLights_ReverseLight+0x20>)
 80012c2:	f009 f8c7 	bl	800a454 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40020800 	.word	0x40020800

080012d4 <ExtLights_LicensePlateLight>:

void ExtLights_LicensePlateLight(uint8 PinState)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]

	//Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_LICENSEPLATELIGHT_PORT, EXTLIGHTS_LICENSEPLATELIGHT_PIN, PinState);

}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <IntLights_RxBtcState>:
void IntLights_MainFunction();
void IntLights_ToggleIntLights(uint8 PinState);
void IntLights_RxBtcState();

void IntLights_RxBtcState()
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0

	uint8 lightsStateFromBtcCommand;

	Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&lightsStateFromBtcCommand);
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	4618      	mov	r0, r3
 80012f6:	f009 f885 	bl	800a404 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>

	switch(lightsStateFromBtcCommand)
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	2b13      	cmp	r3, #19
 8001300:	d83a      	bhi.n	8001378 <IntLights_RxBtcState+0x8c>
 8001302:	a201      	add	r2, pc, #4	; (adr r2, 8001308 <IntLights_RxBtcState+0x1c>)
 8001304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001308:	08001359 	.word	0x08001359
 800130c:	08001361 	.word	0x08001361
 8001310:	08001379 	.word	0x08001379
 8001314:	08001379 	.word	0x08001379
 8001318:	08001379 	.word	0x08001379
 800131c:	08001379 	.word	0x08001379
 8001320:	08001379 	.word	0x08001379
 8001324:	08001379 	.word	0x08001379
 8001328:	08001379 	.word	0x08001379
 800132c:	08001379 	.word	0x08001379
 8001330:	08001379 	.word	0x08001379
 8001334:	08001379 	.word	0x08001379
 8001338:	08001379 	.word	0x08001379
 800133c:	08001379 	.word	0x08001379
 8001340:	08001379 	.word	0x08001379
 8001344:	08001379 	.word	0x08001379
 8001348:	08001379 	.word	0x08001379
 800134c:	08001379 	.word	0x08001379
 8001350:	08001369 	.word	0x08001369
 8001354:	08001371 	.word	0x08001371
	{
		case LIGHTSON_CENLOCON:

			IntLights_CurrentState = STD_HIGH;
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <IntLights_RxBtcState+0x94>)
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]

			break;
 800135e:	e00b      	b.n	8001378 <IntLights_RxBtcState+0x8c>

		case LIGHTSOFF_CENLOCOFF:

			IntLights_CurrentState = STD_LOW;
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <IntLights_RxBtcState+0x94>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]

			break;
 8001366:	e007      	b.n	8001378 <IntLights_RxBtcState+0x8c>

		case LIGHTSON_INTLIGHTSON:

			IntLights_CurrentState = STD_HIGH;
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <IntLights_RxBtcState+0x94>)
 800136a:	2201      	movs	r2, #1
 800136c:	701a      	strb	r2, [r3, #0]

			break;
 800136e:	e003      	b.n	8001378 <IntLights_RxBtcState+0x8c>

		case LIGHTSOFF_INTLIGHTSOFF:

			IntLights_CurrentState = STD_LOW;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <IntLights_RxBtcState+0x94>)
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]

			break;
 8001376:	bf00      	nop

	}

}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200000cd 	.word	0x200000cd

08001384 <IntLights_MainFunction>:

void IntLights_MainFunction()
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0

	IntLights_RxBtcState();
 8001388:	f7ff ffb0 	bl	80012ec <IntLights_RxBtcState>
	IntLights_ToggleIntLights(IntLights_CurrentState);
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <IntLights_MainFunction+0x18>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f000 f805 	bl	80013a0 <IntLights_ToggleIntLights>

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200000cd 	.word	0x200000cd

080013a0 <IntLights_ToggleIntLights>:
	return E_OK;

}

void IntLights_ToggleIntLights(uint8 PinState)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(INTERIOR_LIGHT_PORT, INTERIOR_LIGHT_PIN, PinState);
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	461a      	mov	r2, r3
 80013ae:	2108      	movs	r1, #8
 80013b0:	4803      	ldr	r0, [pc, #12]	; (80013c0 <IntLights_ToggleIntLights+0x20>)
 80013b2:	f009 f84f 	bl	800a454 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40020400 	.word	0x40020400

080013c4 <SecAlm_LightsBuzzerControl>:
void SecAlm_LightsBuzzerControl();

uint8 SecAlm_TriggerPreviousState;

void SecAlm_LightsBuzzerControl()
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0

	uint32 sensorStatus = STD_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]

	sensorStatus = SecAlm_VibSenStatus();
 80013ce:	f000 f8a3 	bl	8001518 <SecAlm_VibSenStatus>
 80013d2:	4603      	mov	r3, r0
 80013d4:	607b      	str	r3, [r7, #4]

	if(SecAlm_TriggerPreviousState != SecAlm_Trigger && !SecAlm_Trigger)
 80013d6:	4b3b      	ldr	r3, [pc, #236]	; (80014c4 <SecAlm_LightsBuzzerControl+0x100>)
 80013d8:	781a      	ldrb	r2, [r3, #0]
 80013da:	4b3b      	ldr	r3, [pc, #236]	; (80014c8 <SecAlm_LightsBuzzerControl+0x104>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d006      	beq.n	80013f0 <SecAlm_LightsBuzzerControl+0x2c>
 80013e2:	4b39      	ldr	r3, [pc, #228]	; (80014c8 <SecAlm_LightsBuzzerControl+0x104>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d102      	bne.n	80013f0 <SecAlm_LightsBuzzerControl+0x2c>
	{

		SecAlm_TriggerIRQCounterForTimer4 = STD_LOW;
 80013ea:	4b38      	ldr	r3, [pc, #224]	; (80014cc <SecAlm_LightsBuzzerControl+0x108>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(SecAlm_TriggerIRQCounterForTimer4 >= 20)
 80013f0:	4b36      	ldr	r3, [pc, #216]	; (80014cc <SecAlm_LightsBuzzerControl+0x108>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b13      	cmp	r3, #19
 80013f6:	d922      	bls.n	800143e <SecAlm_LightsBuzzerControl+0x7a>
	{

		SecAlm_TriggerPreviousState 		= SecAlm_Trigger;
 80013f8:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <SecAlm_LightsBuzzerControl+0x104>)
 80013fa:	781a      	ldrb	r2, [r3, #0]
 80013fc:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <SecAlm_LightsBuzzerControl+0x100>)
 80013fe:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim3IRQFlag 					= STD_HIGH;
 8001400:	4b33      	ldr	r3, [pc, #204]	; (80014d0 <SecAlm_LightsBuzzerControl+0x10c>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim11IRQFlag 				= STD_LOW;
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <SecAlm_LightsBuzzerControl+0x110>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
		SecAlm_Trigger 						= STD_LOW;
 800140c:	4b2e      	ldr	r3, [pc, #184]	; (80014c8 <SecAlm_LightsBuzzerControl+0x104>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange 				= STD_LOW;
 8001412:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <SecAlm_LightsBuzzerControl+0x114>)
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
		SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 8001418:	4b2c      	ldr	r3, [pc, #176]	; (80014cc <SecAlm_LightsBuzzerControl+0x108>)
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
		SecAlm_SensorStatusCounter 			= STD_LOW;
 800141e:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <SecAlm_LightsBuzzerControl+0x118>)
 8001420:	2200      	movs	r2, #0
 8001422:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatus 				= STD_LOW;
 8001424:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <SecAlm_LightsBuzzerControl+0x11c>)
 8001426:	2200      	movs	r2, #0
 8001428:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatusCounter 			= STD_LOW;
 800142a:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <SecAlm_LightsBuzzerControl+0x118>)
 800142c:	2200      	movs	r2, #0
 800142e:	801a      	strh	r2, [r3, #0]

		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmAlarm_TimerHandle);
 8001430:	4b2c      	ldr	r3, [pc, #176]	; (80014e4 <SecAlm_LightsBuzzerControl+0x120>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f009 f8d9 	bl	800a5ec <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		SecAlm_TurnOnExtLights();
 800143a:	f000 f8a3 	bl	8001584 <SecAlm_TurnOnExtLights>

		/* do nothing */

	}

	if(SecAlm_SensorStatusCounter == STD_LOW)
 800143e:	4b27      	ldr	r3, [pc, #156]	; (80014dc <SecAlm_LightsBuzzerControl+0x118>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d107      	bne.n	8001456 <SecAlm_LightsBuzzerControl+0x92>
	{

		sensorStatus 	= STD_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
		SecAlm_Trigger 	= STD_LOW;
 800144a:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <SecAlm_LightsBuzzerControl+0x104>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange = STD_LOW;
 8001450:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <SecAlm_LightsBuzzerControl+0x114>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(sensorStatus == STD_HIGH)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d102      	bne.n	8001462 <SecAlm_LightsBuzzerControl+0x9e>
	{

		SecAlm_Trigger = STD_HIGH;
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <SecAlm_LightsBuzzerControl+0x104>)
 800145e:	2201      	movs	r2, #1
 8001460:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(SecAlm_Trigger == STD_HIGH)
 8001462:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <SecAlm_LightsBuzzerControl+0x104>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d120      	bne.n	80014ac <SecAlm_LightsBuzzerControl+0xe8>
	{

		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmAlarm_TimerHandle, 10000);
 800146a:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <SecAlm_LightsBuzzerControl+0x120>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f242 7110 	movw	r1, #10000	; 0x2710
 8001472:	4618      	mov	r0, r3
 8001474:	f009 f811 	bl	800a49a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>

		if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 1)
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <SecAlm_LightsBuzzerControl+0x108>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d005      	beq.n	8001492 <SecAlm_LightsBuzzerControl+0xce>
		{

			SecAlm_PinStateChange = STD_HIGH;
 8001486:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <SecAlm_LightsBuzzerControl+0x114>)
 8001488:	2201      	movs	r2, #1
 800148a:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 800148c:	f000 f87a 	bl	8001584 <SecAlm_TurnOnExtLights>

		/* do nothing */

	}

}
 8001490:	e013      	b.n	80014ba <SecAlm_LightsBuzzerControl+0xf6>
		else if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 0)
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <SecAlm_LightsBuzzerControl+0x108>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d10c      	bne.n	80014ba <SecAlm_LightsBuzzerControl+0xf6>
			SecAlm_PinStateChange = STD_LOW;
 80014a0:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <SecAlm_LightsBuzzerControl+0x114>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 80014a6:	f000 f86d 	bl	8001584 <SecAlm_TurnOnExtLights>
}
 80014aa:	e006      	b.n	80014ba <SecAlm_LightsBuzzerControl+0xf6>
	else if(SecAlm_Trigger == STD_LOW)
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <SecAlm_LightsBuzzerControl+0x104>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <SecAlm_LightsBuzzerControl+0xf6>
		SecAlm_ToggleAlarmBuzzer(STD_LOW);
 80014b4:	2000      	movs	r0, #0
 80014b6:	f000 f8b7 	bl	8001628 <SecAlm_ToggleAlarmBuzzer>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200000d6 	.word	0x200000d6
 80014c8:	200000ce 	.word	0x200000ce
 80014cc:	200000d0 	.word	0x200000d0
 80014d0:	200000af 	.word	0x200000af
 80014d4:	200000b1 	.word	0x200000b1
 80014d8:	200000cf 	.word	0x200000cf
 80014dc:	200000d2 	.word	0x200000d2
 80014e0:	200000d4 	.word	0x200000d4
 80014e4:	200001d0 	.word	0x200001d0

080014e8 <SecAlm_VibSenReadSensorValue>:


uint32 SecAlm_VibSenReadSensorValue()
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0

	uint32 sensorValue = STD_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]

	Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA(&hadc1, Adc_ChannelOne_Buffer, ADC_BUFFER_LENGTH);
 80014f2:	2210      	movs	r2, #16
 80014f4:	4906      	ldr	r1, [pc, #24]	; (8001510 <SecAlm_VibSenReadSensorValue+0x28>)
 80014f6:	4807      	ldr	r0, [pc, #28]	; (8001514 <SecAlm_VibSenReadSensorValue+0x2c>)
 80014f8:	f008 ffbf 	bl	800a47a <Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA>
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&sensorValue, RTE_P_ADC_BUFFER_VIBSEN);
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2101      	movs	r1, #1
 8001500:	4618      	mov	r0, r3
 8001502:	f008 fd4d 	bl	8009fa0 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>

	return sensorValue;
 8001506:	687b      	ldr	r3, [r7, #4]

}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000780 	.word	0x20000780
 8001514:	200000d8 	.word	0x200000d8

08001518 <SecAlm_VibSenStatus>:

StdReturnType SecAlm_VibSenStatus()
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0

	uint16 sensorValue 		= STD_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	80bb      	strh	r3, [r7, #4]
	uint16 sensorStatus 	= STD_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	80fb      	strh	r3, [r7, #6]

	sensorValue = SecAlm_VibSenReadSensorValue();
 8001526:	f7ff ffdf 	bl	80014e8 <SecAlm_VibSenReadSensorValue>
 800152a:	4603      	mov	r3, r0
 800152c:	80bb      	strh	r3, [r7, #4]

	if(sensorValue == 4095)
 800152e:	88bb      	ldrh	r3, [r7, #4]
 8001530:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001534:	4293      	cmp	r3, r2
 8001536:	d10c      	bne.n	8001552 <SecAlm_VibSenStatus+0x3a>
	{

		SecAlm_SensorStatusCounter = SecAlm_SensorStatusCounter + 1;
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <SecAlm_VibSenStatus+0x64>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	b29a      	uxth	r2, r3
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <SecAlm_VibSenStatus+0x64>)
 8001542:	801a      	strh	r2, [r3, #0]
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlm_AlarmResetHandle, 10000);
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <SecAlm_VibSenStatus+0x68>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f242 7110 	movw	r1, #10000	; 0x2710
 800154c:	4618      	mov	r0, r3
 800154e:	f008 ffa4 	bl	800a49a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>

		/* do nothing */

	}

	if(SecAlm_SensorStatusCounter >= 500)
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <SecAlm_VibSenStatus+0x64>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800155a:	d302      	bcc.n	8001562 <SecAlm_VibSenStatus+0x4a>
	{

		sensorStatus = STD_HIGH;
 800155c:	2301      	movs	r3, #1
 800155e:	80fb      	strh	r3, [r7, #6]
 8001560:	e006      	b.n	8001570 <SecAlm_VibSenStatus+0x58>

	}
	else if(SecAlm_SensorStatusCounter < 500)
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <SecAlm_VibSenStatus+0x64>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800156a:	d201      	bcs.n	8001570 <SecAlm_VibSenStatus+0x58>
	{

		sensorStatus = STD_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	80fb      	strh	r3, [r7, #6]

		/* do nothing */

	}

	return sensorStatus;
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	b2db      	uxtb	r3, r3

}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200000d2 	.word	0x200000d2
 8001580:	200001b8 	.word	0x200001b8

08001584 <SecAlm_TurnOnExtLights>:


void SecAlm_TurnOnExtLights()
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0

	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_LowBeam(SecAlm_PinStateChange);
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <SecAlm_TurnOnExtLights+0x50>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fdf3 	bl	8001178 <ExtLights_LowBeam>
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_RearPositionLight(SecAlm_PinStateChange);
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <SecAlm_TurnOnExtLights+0x50>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fe54 	bl	8001244 <ExtLights_RearPositionLight>
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_FrontFogLight(SecAlm_PinStateChange);
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <SecAlm_TurnOnExtLights+0x50>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fe19 	bl	80011d8 <ExtLights_FrontFogLight>
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_RearFogLight(SecAlm_PinStateChange);
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <SecAlm_TurnOnExtLights+0x50>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fe5c 	bl	8001268 <ExtLights_RearFogLight>
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_TurnSignalRight(SecAlm_PinStateChange);
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <SecAlm_TurnOnExtLights+0x50>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fe33 	bl	8001220 <ExtLights_TurnSignalRight>
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_TurnSignalLeft(SecAlm_PinStateChange);
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <SecAlm_TurnOnExtLights+0x50>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fe1c 	bl	80011fc <ExtLights_TurnSignalLeft>
	SecAlm_ToggleAlarmBuzzer(SecAlm_PinStateChange);
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <SecAlm_TurnOnExtLights+0x50>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 f82d 	bl	8001628 <SecAlm_ToggleAlarmBuzzer>

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200000cf 	.word	0x200000cf

080015d8 <SecAlm_MainFunction>:

void SecAlm_MainFunction()
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0

	SecAlm_LightsBuzzerControl();
 80015dc:	f7ff fef2 	bl	80013c4 <SecAlm_LightsBuzzerControl>

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <SecAlm_Init>:


StdReturnType SecAlm_Init()
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

	SecAlm_Trigger 						= STD_LOW;
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <SecAlm_Init+0x30>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
	SecAlm_PinStateChange 				= STD_LOW;
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <SecAlm_Init+0x34>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
	SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <SecAlm_Init+0x38>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
	SecAlm_SensorStatusCounter 			= STD_LOW;
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <SecAlm_Init+0x3c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	801a      	strh	r2, [r3, #0]
	SecAlm_SensorStatus 				= STD_LOW;
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <SecAlm_Init+0x40>)
 8001602:	2200      	movs	r2, #0
 8001604:	801a      	strh	r2, [r3, #0]

	return E_OK;
 8001606:	2300      	movs	r3, #0

}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	200000ce 	.word	0x200000ce
 8001618:	200000cf 	.word	0x200000cf
 800161c:	200000d0 	.word	0x200000d0
 8001620:	200000d2 	.word	0x200000d2
 8001624:	200000d4 	.word	0x200000d4

08001628 <SecAlm_ToggleAlarmBuzzer>:


void SecAlm_ToggleAlarmBuzzer(uint8 PinState)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	461a      	mov	r2, r3
 8001636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800163a:	4803      	ldr	r0, [pc, #12]	; (8001648 <SecAlm_ToggleAlarmBuzzer+0x20>)
 800163c:	f008 ff0a 	bl	800a454 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40020400 	.word	0x40020400

0800164c <SecAlm_ToggleAlarmLed>:


void SecAlm_ToggleAlarmLed(uint8 PinState)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	461a      	mov	r2, r3
 800165a:	2110      	movs	r1, #16
 800165c:	4803      	ldr	r0, [pc, #12]	; (800166c <SecAlm_ToggleAlarmLed+0x20>)
 800165e:	f008 fef9 	bl	800a454 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40020800 	.word	0x40020800

08001670 <Uart_Init>:
void Uart_MainFunction();
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);

StdReturnType Uart_Init()
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <Uart_Init+0x50>)
 8001676:	4a13      	ldr	r2, [pc, #76]	; (80016c4 <Uart_Init+0x54>)
 8001678:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <Uart_Init+0x50>)
 800167c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001680:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <Uart_Init+0x50>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <Uart_Init+0x50>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <Uart_Init+0x50>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <Uart_Init+0x50>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <Uart_Init+0x50>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <Uart_Init+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a6:	4806      	ldr	r0, [pc, #24]	; (80016c0 <Uart_Init+0x50>)
 80016a8:	f004 f9cc 	bl	8005a44 <HAL_UART_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d002      	beq.n	80016b8 <Uart_Init+0x48>
	{

		HAL_UART_ErrorCallback(&huart1);
 80016b2:	4803      	ldr	r0, [pc, #12]	; (80016c0 <Uart_Init+0x50>)
 80016b4:	f000 f826 	bl	8001704 <HAL_UART_ErrorCallback>

		/* do nothing */

	}

	return E_OK;
 80016b8:	2300      	movs	r3, #0

}
 80016ba:	4618      	mov	r0, r3
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200006c0 	.word	0x200006c0
 80016c4:	40011000 	.word	0x40011000

080016c8 <Uart_DeInit>:

StdReturnType Uart_DeInit()
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0

	HAL_UART_DeInit(&huart1);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <Uart_DeInit+0x10>)
 80016ce:	f004 fa13 	bl	8005af8 <HAL_UART_DeInit>

	return E_OK;
 80016d2:	2300      	movs	r3, #0

}
 80016d4:	4618      	mov	r0, r3
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200006c0 	.word	0x200006c0

080016dc <Uart_MainFunction>:

void Uart_MainFunction()
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0

	uint32 localState = HAL_UART_GetState(&huart1);
 80016e2:	4807      	ldr	r0, [pc, #28]	; (8001700 <Uart_MainFunction+0x24>)
 80016e4:	f004 faba 	bl	8005c5c <HAL_UART_GetState>
 80016e8:	4603      	mov	r3, r0
 80016ea:	607b      	str	r3, [r7, #4]

	if(localState == HAL_UART_STATE_ERROR)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2be0      	cmp	r3, #224	; 0xe0
 80016f0:	d102      	bne.n	80016f8 <Uart_MainFunction+0x1c>
	{

		HAL_UART_ErrorCallback(&huart1);
 80016f2:	4803      	ldr	r0, [pc, #12]	; (8001700 <Uart_MainFunction+0x24>)
 80016f4:	f000 f806 	bl	8001704 <HAL_UART_ErrorCallback>

		/* do nothing */

	}

}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200006c0 	.word	0x200006c0

08001704 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

	uint32 receivedValue = HAL_UART_GetError(huart);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f004 fac3 	bl	8005c98 <HAL_UART_GetError>
 8001712:	60f8      	str	r0, [r7, #12]

	switch(receivedValue)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b10      	cmp	r3, #16
 8001718:	d83c      	bhi.n	8001794 <HAL_UART_ErrorCallback+0x90>
 800171a:	a201      	add	r2, pc, #4	; (adr r2, 8001720 <HAL_UART_ErrorCallback+0x1c>)
 800171c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001720:	08001795 	.word	0x08001795
 8001724:	08001765 	.word	0x08001765
 8001728:	0800176d 	.word	0x0800176d
 800172c:	08001795 	.word	0x08001795
 8001730:	08001775 	.word	0x08001775
 8001734:	08001795 	.word	0x08001795
 8001738:	08001795 	.word	0x08001795
 800173c:	08001795 	.word	0x08001795
 8001740:	0800177d 	.word	0x0800177d
 8001744:	08001795 	.word	0x08001795
 8001748:	08001795 	.word	0x08001795
 800174c:	08001795 	.word	0x08001795
 8001750:	08001795 	.word	0x08001795
 8001754:	08001795 	.word	0x08001795
 8001758:	08001795 	.word	0x08001795
 800175c:	08001795 	.word	0x08001795
 8001760:	08001785 	.word	0x08001785

			break;

		case HAL_UART_ERROR_PE:

			SystemManager_Fault.fault[UART_ERROR_PE] = UART_ERROR_PE;
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <HAL_UART_ErrorCallback+0x9c>)
 8001766:	2218      	movs	r2, #24
 8001768:	661a      	str	r2, [r3, #96]	; 0x60

			break;
 800176a:	e014      	b.n	8001796 <HAL_UART_ErrorCallback+0x92>

		case HAL_UART_ERROR_NE:

			SystemManager_Fault.fault[UART_ERROR_NE] = UART_ERROR_NE;
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <HAL_UART_ErrorCallback+0x9c>)
 800176e:	2219      	movs	r2, #25
 8001770:	665a      	str	r2, [r3, #100]	; 0x64

			break;
 8001772:	e010      	b.n	8001796 <HAL_UART_ErrorCallback+0x92>

		case HAL_UART_ERROR_FE:

			SystemManager_Fault.fault[UART_ERROR_FE] = UART_ERROR_FE;
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_UART_ErrorCallback+0x9c>)
 8001776:	221a      	movs	r2, #26
 8001778:	669a      	str	r2, [r3, #104]	; 0x68

			break;
 800177a:	e00c      	b.n	8001796 <HAL_UART_ErrorCallback+0x92>

		case HAL_UART_ERROR_ORE:

			SystemManager_Fault.fault[UART_ERROR_ORE] = UART_ERROR_ORE;
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_UART_ErrorCallback+0x9c>)
 800177e:	221b      	movs	r2, #27
 8001780:	66da      	str	r2, [r3, #108]	; 0x6c

			break;
 8001782:	e008      	b.n	8001796 <HAL_UART_ErrorCallback+0x92>

		case HAL_UART_ERROR_DMA:

			SystemManager_Fault.fault[UART_ERROR_ORE] = UART_ERROR_ORE;
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_UART_ErrorCallback+0x9c>)
 8001786:	221b      	movs	r2, #27
 8001788:	66da      	str	r2, [r3, #108]	; 0x6c

			Uart_Init();
 800178a:	f7ff ff71 	bl	8001670 <Uart_Init>
			Uart_DeInit();
 800178e:	f7ff ff9b 	bl	80016c8 <Uart_DeInit>

			break;
 8001792:	e000      	b.n	8001796 <HAL_UART_ErrorCallback+0x92>

		default:

			break;
 8001794:	bf00      	nop

	}

}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20007a58 	.word	0x20007a58

080017a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a20      	ldr	r2, [pc, #128]	; (8001834 <HAL_UART_RxCpltCallback+0x90>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d13a      	bne.n	800182c <HAL_UART_RxCpltCallback+0x88>
	{

		if(Rte_P_Btc_BtcPort_Btc_RxData == '\n')
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <HAL_UART_RxCpltCallback+0x94>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b0a      	cmp	r3, #10
 80017bc:	d11a      	bne.n	80017f4 <HAL_UART_RxCpltCallback+0x50>
		{

			if(Rte_P_Btc_BtcPort_Btc_RxCount <= 3)
 80017be:	4b1f      	ldr	r3, [pc, #124]	; (800183c <HAL_UART_RxCpltCallback+0x98>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d80f      	bhi.n	80017e6 <HAL_UART_RxCpltCallback+0x42>
			{

				//char endChar = '\0';
				uint8 asciiToUint = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	73fb      	strb	r3, [r7, #15]

				//Rte_Write_Btc_BtcPort_Btc_DataBuffer((uint8*)&endChar, Rte_P_Btc_BtcPort_Btc_RxCount);

				asciiToUint = atoi((char*)Rte_P_Btc_BtcPort_Btc_DataBuffer);
 80017ca:	481d      	ldr	r0, [pc, #116]	; (8001840 <HAL_UART_RxCpltCallback+0x9c>)
 80017cc:	f009 fcfe 	bl	800b1cc <atoi>
 80017d0:	4603      	mov	r3, r0
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	73fb      	strb	r3, [r7, #15]

				Rte_Write_Btc_BtcPort_Btc_RxData(&asciiToUint);
 80017d6:	f107 030f 	add.w	r3, r7, #15
 80017da:	4618      	mov	r0, r3
 80017dc:	f008 fb9a 	bl	8009f14 <Rte_Write_Btc_BtcPort_Btc_RxData>
				Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&Btc_RxData);
 80017e0:	4815      	ldr	r0, [pc, #84]	; (8001838 <HAL_UART_RxCpltCallback+0x94>)
 80017e2:	f008 fbf7 	bl	8009fd4 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>

				/* do nothing */

			}

			UartCounter_Btc_RxCount = 0;
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <HAL_UART_RxCpltCallback+0xa0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(&UartCounter_Btc_RxCount);
 80017ec:	4815      	ldr	r0, [pc, #84]	; (8001844 <HAL_UART_RxCpltCallback+0xa0>)
 80017ee:	f008 fba7 	bl	8009f40 <Rte_Write_Btc_BtcPort_Btc_RxCount>
 80017f2:	e016      	b.n	8001822 <HAL_UART_RxCpltCallback+0x7e>

		}
		else if(Rte_P_Btc_BtcPort_Btc_RxCount < 3)
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <HAL_UART_RxCpltCallback+0x98>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d80c      	bhi.n	8001816 <HAL_UART_RxCpltCallback+0x72>
		{

			Rte_Write_Btc_BtcPort_Btc_DataBuffer(&Rte_P_Btc_BtcPort_Btc_RxData, UartCounter_Btc_RxCount);
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_UART_RxCpltCallback+0xa0>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4619      	mov	r1, r3
 8001802:	480d      	ldr	r0, [pc, #52]	; (8001838 <HAL_UART_RxCpltCallback+0x94>)
 8001804:	f008 fbb2 	bl	8009f6c <Rte_Write_Btc_BtcPort_Btc_DataBuffer>
			UartCounter_Btc_RxCount++;
 8001808:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <HAL_UART_RxCpltCallback+0xa0>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	b2da      	uxtb	r2, r3
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <HAL_UART_RxCpltCallback+0xa0>)
 8001812:	701a      	strb	r2, [r3, #0]
 8001814:	e005      	b.n	8001822 <HAL_UART_RxCpltCallback+0x7e>

		}
		else
		{

			UartCounter_Btc_RxCount = 0;
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_UART_RxCpltCallback+0xa0>)
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(&UartCounter_Btc_RxCount);
 800181c:	4809      	ldr	r0, [pc, #36]	; (8001844 <HAL_UART_RxCpltCallback+0xa0>)
 800181e:	f008 fb8f 	bl	8009f40 <Rte_Write_Btc_BtcPort_Btc_RxCount>

		}

		Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(&huart1, &Btc_RxData, 1);
 8001822:	2201      	movs	r2, #1
 8001824:	4904      	ldr	r1, [pc, #16]	; (8001838 <HAL_UART_RxCpltCallback+0x94>)
 8001826:	4808      	ldr	r0, [pc, #32]	; (8001848 <HAL_UART_RxCpltCallback+0xa4>)
 8001828:	f008 fe02 	bl	800a430 <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>

		/* do nothing */

	}

}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40011000 	.word	0x40011000
 8001838:	20000098 	.word	0x20000098
 800183c:	20000099 	.word	0x20000099
 8001840:	20000094 	.word	0x20000094
 8001844:	200000d7 	.word	0x200000d7
 8001848:	200006c0 	.word	0x200006c0

0800184c <HAL_ADC_MspInit>:
  /* USER CODE END ADC1_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	; 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a2e      	ldr	r2, [pc, #184]	; (8001924 <HAL_ADC_MspInit+0xd8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d156      	bne.n	800191c <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <HAL_ADC_MspInit+0xdc>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	4a2c      	ldr	r2, [pc, #176]	; (8001928 <HAL_ADC_MspInit+0xdc>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187c:	6453      	str	r3, [r2, #68]	; 0x44
 800187e:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <HAL_ADC_MspInit+0xdc>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	4b26      	ldr	r3, [pc, #152]	; (8001928 <HAL_ADC_MspInit+0xdc>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a25      	ldr	r2, [pc, #148]	; (8001928 <HAL_ADC_MspInit+0xdc>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b23      	ldr	r3, [pc, #140]	; (8001928 <HAL_ADC_MspInit+0xdc>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = VS_Pin|LS_Pin;
 80018a6:	2303      	movs	r3, #3
 80018a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018aa:	2303      	movs	r3, #3
 80018ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	4619      	mov	r1, r3
 80018b8:	481c      	ldr	r0, [pc, #112]	; (800192c <HAL_ADC_MspInit+0xe0>)
 80018ba:	f002 fc53 	bl	8004164 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80018be:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <HAL_ADC_MspInit+0xe4>)
 80018c0:	4a1c      	ldr	r2, [pc, #112]	; (8001934 <HAL_ADC_MspInit+0xe8>)
 80018c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018c4:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <HAL_ADC_MspInit+0xe4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_ADC_MspInit+0xe4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d0:	4b17      	ldr	r3, [pc, #92]	; (8001930 <HAL_ADC_MspInit+0xe4>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <HAL_ADC_MspInit+0xe4>)
 80018d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018de:	4b14      	ldr	r3, [pc, #80]	; (8001930 <HAL_ADC_MspInit+0xe4>)
 80018e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_ADC_MspInit+0xe4>)
 80018e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <HAL_ADC_MspInit+0xe4>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018f4:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_ADC_MspInit+0xe4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <HAL_ADC_MspInit+0xe4>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001900:	480b      	ldr	r0, [pc, #44]	; (8001930 <HAL_ADC_MspInit+0xe4>)
 8001902:	f001 feb9 	bl	8003678 <HAL_DMA_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800190c:	f009 fc42 	bl	800b194 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a07      	ldr	r2, [pc, #28]	; (8001930 <HAL_ADC_MspInit+0xe4>)
 8001914:	639a      	str	r2, [r3, #56]	; 0x38
 8001916:	4a06      	ldr	r2, [pc, #24]	; (8001930 <HAL_ADC_MspInit+0xe4>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800191c:	bf00      	nop
 800191e:	3728      	adds	r7, #40	; 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40012000 	.word	0x40012000
 8001928:	40023800 	.word	0x40023800
 800192c:	40020000 	.word	0x40020000
 8001930:	2000013c 	.word	0x2000013c
 8001934:	40026410 	.word	0x40026410

08001938 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0c      	ldr	r2, [pc, #48]	; (8001978 <HAL_ADC_MspDeInit+0x40>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d111      	bne.n	800196e <HAL_ADC_MspDeInit+0x36>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_ADC_MspDeInit+0x44>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <HAL_ADC_MspDeInit+0x44>)
 8001950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001954:	6453      	str	r3, [r2, #68]	; 0x44

    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    HAL_GPIO_DeInit(GPIOA, VS_Pin|LS_Pin);
 8001956:	2103      	movs	r1, #3
 8001958:	4809      	ldr	r0, [pc, #36]	; (8001980 <HAL_ADC_MspDeInit+0x48>)
 800195a:	f002 fd87 	bl	800446c <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001962:	4618      	mov	r0, r3
 8001964:	f001 ff36 	bl	80037d4 <HAL_DMA_DeInit>

    /* ADC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC_IRQn);
 8001968:	2012      	movs	r0, #18
 800196a:	f001 fde6 	bl	800353a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40012000 	.word	0x40012000
 800197c:	40023800 	.word	0x40023800
 8001980:	40020000 	.word	0x40020000

08001984 <HAL_CRC_MspInit>:
  /* USER CODE END CRC_Init 2 */

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <HAL_CRC_MspInit+0x3c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d10d      	bne.n	80019b2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_CRC_MspInit+0x40>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <HAL_CRC_MspInit+0x40>)
 80019a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <HAL_CRC_MspInit+0x40>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80019b2:	bf00      	nop
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40023000 	.word	0x40023000
 80019c4:	40023800 	.word	0x40023800

080019c8 <HAL_CRC_MspDeInit>:

void HAL_CRC_MspDeInit(CRC_HandleTypeDef* crcHandle)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <HAL_CRC_MspDeInit+0x2c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d105      	bne.n	80019e6 <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <HAL_CRC_MspDeInit+0x30>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a06      	ldr	r2, [pc, #24]	; (80019f8 <HAL_CRC_MspDeInit+0x30>)
 80019e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40023000 	.word	0x40023000
 80019f8:	40023800 	.word	0x40023800

080019fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MX_DMA_Init+0x30>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a08      	ldr	r2, [pc, #32]	; (8001a2c <MX_DMA_Init+0x30>)
 8001a0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <MX_DMA_Init+0x30>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]

}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800

08001a30 <vApplicationIdleHook>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */

void vApplicationIdleHook( void )
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */

void vApplicationTickHook( void )
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

	Os_Counter++;
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <vApplicationTickHook+0x18>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	4a03      	ldr	r2, [pc, #12]	; (8001a58 <vApplicationTickHook+0x18>)
 8001a4c:	6013      	str	r3, [r2, #0]

}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	200001a4 	.word	0x200001a4

08001a5c <vApplicationStackOverflowHook>:

/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
	SystemManager_PerformReset();
 8001a66:	f009 faa0 	bl	800afaa <SystemManager_PerformReset>
	SystemManager_SetFault(STACK_OVERFLOW_RESET);
 8001a6a:	200c      	movs	r0, #12
 8001a6c:	f009 fa74 	bl	800af58 <SystemManager_SetFault>

}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0

	SystemManager_SetFault(MALLOC_FAILED_RESET);
 8001a7c:	200d      	movs	r0, #13
 8001a7e:	f009 fa6b 	bl	800af58 <SystemManager_SetFault>
	//SystemManager_PerformReset();

}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <PreSleepProcessing>:

/* USER CODE END 5 */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Os_SecAlm_AlarmReset */
  Os_SecAlm_AlarmResetHandle = osTimerNew(Os_SecAlm_AlarmReset_Callback, osTimerPeriodic, NULL, &Os_SecAlm_AlarmReset_attributes);
 8001ab4:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <MX_FREERTOS_Init+0xc8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2101      	movs	r1, #1
 8001aba:	4830      	ldr	r0, [pc, #192]	; (8001b7c <MX_FREERTOS_Init+0xcc>)
 8001abc:	f005 fa38 	bl	8006f30 <osTimerNew>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4a2f      	ldr	r2, [pc, #188]	; (8001b80 <MX_FREERTOS_Init+0xd0>)
 8001ac4:	6013      	str	r3, [r2, #0]

  /* creation of Os_CenLoc_LockUnlockSequence_Timer */
  Os_CenLoc_LockUnlockSequence_TimerHandle = osTimerNew(Os_CenLoc_LockUnlockSequence_Timer_Callback, osTimerPeriodic, NULL, &Os_CenLoc_LockUnlockSequence_Timer_attributes);
 8001ac6:	4b2f      	ldr	r3, [pc, #188]	; (8001b84 <MX_FREERTOS_Init+0xd4>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2101      	movs	r1, #1
 8001acc:	482e      	ldr	r0, [pc, #184]	; (8001b88 <MX_FREERTOS_Init+0xd8>)
 8001ace:	f005 fa2f 	bl	8006f30 <osTimerNew>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4a2d      	ldr	r2, [pc, #180]	; (8001b8c <MX_FREERTOS_Init+0xdc>)
 8001ad6:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmLed_TurnOnCyclic_Timer */
  Os_SecAlmLed_TurnOnCyclic_TimerHandle = osTimerNew(Os_SecAlmLed_TurnOnCyclic_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLed_TurnOnCyclic_Timer_attributes);
 8001ad8:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <MX_FREERTOS_Init+0xe0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	2101      	movs	r1, #1
 8001ade:	482d      	ldr	r0, [pc, #180]	; (8001b94 <MX_FREERTOS_Init+0xe4>)
 8001ae0:	f005 fa26 	bl	8006f30 <osTimerNew>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4a2c      	ldr	r2, [pc, #176]	; (8001b98 <MX_FREERTOS_Init+0xe8>)
 8001ae8:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmLedTurnOn_Timer */
  Os_SecAlmLedTurnOn_TimerHandle = osTimerNew(Os_SecAlmLedTurnOn_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLedTurnOn_Timer_attributes);
 8001aea:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <MX_FREERTOS_Init+0xec>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	2101      	movs	r1, #1
 8001af0:	482b      	ldr	r0, [pc, #172]	; (8001ba0 <MX_FREERTOS_Init+0xf0>)
 8001af2:	f005 fa1d 	bl	8006f30 <osTimerNew>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4a2a      	ldr	r2, [pc, #168]	; (8001ba4 <MX_FREERTOS_Init+0xf4>)
 8001afa:	6013      	str	r3, [r2, #0]

  /* creation of Os_FollowMeHome_Timer */
  Os_FollowMeHome_TimerHandle = osTimerNew(Os_FollowMeHome_Timer_Callback, osTimerPeriodic, NULL, &Os_FollowMeHome_Timer_attributes);
 8001afc:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <MX_FREERTOS_Init+0xf8>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	2101      	movs	r1, #1
 8001b02:	482a      	ldr	r0, [pc, #168]	; (8001bac <MX_FREERTOS_Init+0xfc>)
 8001b04:	f005 fa14 	bl	8006f30 <osTimerNew>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4a29      	ldr	r2, [pc, #164]	; (8001bb0 <MX_FREERTOS_Init+0x100>)
 8001b0c:	6013      	str	r3, [r2, #0]

  /* creation of Os_TurnSignals_Timer */
  Os_TurnSignals_TimerHandle = osTimerNew(Os_TurnSignals_Timer_Callback, osTimerPeriodic, NULL, &Os_TurnSignals_Timer_attributes);
 8001b0e:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <MX_FREERTOS_Init+0x104>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	2101      	movs	r1, #1
 8001b14:	4828      	ldr	r0, [pc, #160]	; (8001bb8 <MX_FREERTOS_Init+0x108>)
 8001b16:	f005 fa0b 	bl	8006f30 <osTimerNew>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4a27      	ldr	r2, [pc, #156]	; (8001bbc <MX_FREERTOS_Init+0x10c>)
 8001b1e:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmAlarm_Timer */
  Os_SecAlmAlarm_TimerHandle = osTimerNew(Os_SecAlmAlarm_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmAlarm_Timer_attributes);
 8001b20:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <MX_FREERTOS_Init+0x110>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	2101      	movs	r1, #1
 8001b26:	4827      	ldr	r0, [pc, #156]	; (8001bc4 <MX_FREERTOS_Init+0x114>)
 8001b28:	f005 fa02 	bl	8006f30 <osTimerNew>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4a26      	ldr	r2, [pc, #152]	; (8001bc8 <MX_FREERTOS_Init+0x118>)
 8001b30:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OS_Init */
  OS_InitHandle = osThreadNew(OS_TASK_OS_INIT, NULL, &OS_Init_attributes);
 8001b32:	4a26      	ldr	r2, [pc, #152]	; (8001bcc <MX_FREERTOS_Init+0x11c>)
 8001b34:	2100      	movs	r1, #0
 8001b36:	4826      	ldr	r0, [pc, #152]	; (8001bd0 <MX_FREERTOS_Init+0x120>)
 8001b38:	f005 f936 	bl	8006da8 <osThreadNew>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4a25      	ldr	r2, [pc, #148]	; (8001bd4 <MX_FREERTOS_Init+0x124>)
 8001b40:	6013      	str	r3, [r2, #0]

  /* creation of OS_Run */
  OS_RunHandle = osThreadNew(OS_TASK_OS_RUN, NULL, &OS_Run_attributes);
 8001b42:	4a25      	ldr	r2, [pc, #148]	; (8001bd8 <MX_FREERTOS_Init+0x128>)
 8001b44:	2100      	movs	r1, #0
 8001b46:	4825      	ldr	r0, [pc, #148]	; (8001bdc <MX_FREERTOS_Init+0x12c>)
 8001b48:	f005 f92e 	bl	8006da8 <osThreadNew>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4a24      	ldr	r2, [pc, #144]	; (8001be0 <MX_FREERTOS_Init+0x130>)
 8001b50:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_Task */
  ASIL_APPL_TaskHandle = osThreadNew(OS_TASK_ASIL_APPL_Task, NULL, &ASIL_APPL_Task_attributes);
 8001b52:	4a24      	ldr	r2, [pc, #144]	; (8001be4 <MX_FREERTOS_Init+0x134>)
 8001b54:	2100      	movs	r1, #0
 8001b56:	4824      	ldr	r0, [pc, #144]	; (8001be8 <MX_FREERTOS_Init+0x138>)
 8001b58:	f005 f926 	bl	8006da8 <osThreadNew>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	4a23      	ldr	r2, [pc, #140]	; (8001bec <MX_FREERTOS_Init+0x13c>)
 8001b60:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_Task */
  QM_APPL_TaskHandle = osThreadNew(OS_TASK_QM_APPL_Task, NULL, &QM_APPL_Task_attributes);
 8001b62:	4a23      	ldr	r2, [pc, #140]	; (8001bf0 <MX_FREERTOS_Init+0x140>)
 8001b64:	2100      	movs	r1, #0
 8001b66:	4823      	ldr	r0, [pc, #140]	; (8001bf4 <MX_FREERTOS_Init+0x144>)
 8001b68:	f005 f91e 	bl	8006da8 <osThreadNew>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	4a22      	ldr	r2, [pc, #136]	; (8001bf8 <MX_FREERTOS_Init+0x148>)
 8001b70:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	0800b6a0 	.word	0x0800b6a0
 8001b7c:	08001d2d 	.word	0x08001d2d
 8001b80:	200001b8 	.word	0x200001b8
 8001b84:	0800b6b0 	.word	0x0800b6b0
 8001b88:	08001d45 	.word	0x08001d45
 8001b8c:	200001bc 	.word	0x200001bc
 8001b90:	0800b6c0 	.word	0x0800b6c0
 8001b94:	08001dad 	.word	0x08001dad
 8001b98:	200001c0 	.word	0x200001c0
 8001b9c:	0800b6d0 	.word	0x0800b6d0
 8001ba0:	08001dd5 	.word	0x08001dd5
 8001ba4:	200001c4 	.word	0x200001c4
 8001ba8:	0800b6e0 	.word	0x0800b6e0
 8001bac:	08001dfd 	.word	0x08001dfd
 8001bb0:	200001c8 	.word	0x200001c8
 8001bb4:	0800b6f0 	.word	0x0800b6f0
 8001bb8:	08001e25 	.word	0x08001e25
 8001bbc:	200001cc 	.word	0x200001cc
 8001bc0:	0800b700 	.word	0x0800b700
 8001bc4:	08001e95 	.word	0x08001e95
 8001bc8:	200001d0 	.word	0x200001d0
 8001bcc:	0800b610 	.word	0x0800b610
 8001bd0:	08001bfd 	.word	0x08001bfd
 8001bd4:	200001a8 	.word	0x200001a8
 8001bd8:	0800b634 	.word	0x0800b634
 8001bdc:	08001c17 	.word	0x08001c17
 8001be0:	200001ac 	.word	0x200001ac
 8001be4:	0800b658 	.word	0x0800b658
 8001be8:	08001c2d 	.word	0x08001c2d
 8001bec:	200001b0 	.word	0x200001b0
 8001bf0:	0800b67c 	.word	0x0800b67c
 8001bf4:	08001cb9 	.word	0x08001cb9
 8001bf8:	200001b4 	.word	0x200001b4

08001bfc <OS_TASK_OS_INIT>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_OS_TASK_OS_INIT */
void OS_TASK_OS_INIT(void *argument)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_OS_INIT */

	for(;;)
	{

		EcuM_DriverInit();
 8001c04:	f009 f974 	bl	800aef0 <EcuM_DriverInit>

		vTaskSuspend(NULL);
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f006 fe71 	bl	80088f0 <vTaskSuspend>
		osDelay(1);
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f005 f95d 	bl	8006ece <osDelay>
		EcuM_DriverInit();
 8001c14:	e7f6      	b.n	8001c04 <OS_TASK_OS_INIT+0x8>

08001c16 <OS_TASK_OS_RUN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_OS_RUN */
void OS_TASK_OS_RUN(void *argument)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_OS_RUN */

	for(;;)
	{

		Rte_Runnable_Wdg_MainFunction();
 8001c1e:	f008 f95a 	bl	8009ed6 <Rte_Runnable_Wdg_MainFunction>

		osDelay(1);
 8001c22:	2001      	movs	r0, #1
 8001c24:	f005 f953 	bl	8006ece <osDelay>
		Rte_Runnable_Wdg_MainFunction();
 8001c28:	e7f9      	b.n	8001c1e <OS_TASK_OS_RUN+0x8>
	...

08001c2c <OS_TASK_ASIL_APPL_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_ASIL_APPL_Task */
void OS_TASK_ASIL_APPL_Task(void *argument)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_Task */

	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001c34:	f007 f826 	bl	8008c84 <xTaskGetTickCount>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	60bb      	str	r3, [r7, #8]
	const TickType_t xTaskPeriod = 5 / portTICK_PERIOD_MS;
 8001c3c:	2305      	movs	r3, #5
 8001c3e:	60fb      	str	r3, [r7, #12]

	for(;;)
	{

		vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);
 8001c40:	f107 0308 	add.w	r3, r7, #8
 8001c44:	68f9      	ldr	r1, [r7, #12]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f006 fda0 	bl	800878c <vTaskDelayUntil>

		if (xLastWakeTime % (5 / portTICK_PERIOD_MS) == 0)
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <OS_TASK_ASIL_APPL_Task+0x88>)
 8001c50:	fba3 2301 	umull	r2, r3, r3, r1
 8001c54:	089a      	lsrs	r2, r3, #2
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	1aca      	subs	r2, r1, r3
 8001c5e:	2a00      	cmp	r2, #0
 8001c60:	d10d      	bne.n	8001c7e <OS_TASK_ASIL_APPL_Task+0x52>
		{

			Rte_Runnable_EcuM_MainFunction();
 8001c62:	f008 f926 	bl	8009eb2 <Rte_Runnable_EcuM_MainFunction>
			Rte_Runnable_SystemManager_MainFunction();
 8001c66:	f008 f92a 	bl	8009ebe <Rte_Runnable_SystemManager_MainFunction>
			Rte_Runnable_Crc_MainFunction();
 8001c6a:	f008 f92e 	bl	8009eca <Rte_Runnable_Crc_MainFunction>
			Rte_Runnable_Uart_MainFunction();
 8001c6e:	f008 f94b 	bl	8009f08 <Rte_Runnable_Uart_MainFunction>
			Rte_Runnable_Adc_MainFunction();
 8001c72:	f008 f936 	bl	8009ee2 <Rte_Runnable_Adc_MainFunction>
			Rte_Runnable_Spi_MainFunction();
 8001c76:	f008 f93a 	bl	8009eee <Rte_Runnable_Spi_MainFunction>
			Rte_Runnable_Tim_MainFunction();
 8001c7a:	f008 f93f 	bl	8009efc <Rte_Runnable_Tim_MainFunction>

			/* do nothing */

		}

		vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);
 8001c7e:	f107 0308 	add.w	r3, r7, #8
 8001c82:	68f9      	ldr	r1, [r7, #12]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f006 fd81 	bl	800878c <vTaskDelayUntil>

		if (xLastWakeTime % (10 / portTICK_PERIOD_MS) == 0)
 8001c8a:	68b9      	ldr	r1, [r7, #8]
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <OS_TASK_ASIL_APPL_Task+0x88>)
 8001c8e:	fba3 2301 	umull	r2, r3, r3, r1
 8001c92:	08da      	lsrs	r2, r3, #3
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	1aca      	subs	r2, r1, r3
 8001c9e:	2a00      	cmp	r2, #0
 8001ca0:	d103      	bne.n	8001caa <OS_TASK_ASIL_APPL_Task+0x7e>
		{

			Rte_Runnable_ExtLights_MainFunction();
 8001ca2:	f008 fb9d 	bl	800a3e0 <Rte_Runnable_ExtLights_MainFunction>
			Rte_Runnable_SecAlm_MainFunction();
 8001ca6:	f008 fba7 	bl	800a3f8 <Rte_Runnable_SecAlm_MainFunction>

			/* do nothing */

		}

		osDelay(1);
 8001caa:	2001      	movs	r0, #1
 8001cac:	f005 f90f 	bl	8006ece <osDelay>
		vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);
 8001cb0:	e7c6      	b.n	8001c40 <OS_TASK_ASIL_APPL_Task+0x14>
 8001cb2:	bf00      	nop
 8001cb4:	cccccccd 	.word	0xcccccccd

08001cb8 <OS_TASK_QM_APPL_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_QM_APPL_Task */
void OS_TASK_QM_APPL_Task(void *argument)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_Task */

	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001cc0:	f006 ffe0 	bl	8008c84 <xTaskGetTickCount>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	60bb      	str	r3, [r7, #8]
	const TickType_t xTaskPeriod = 5 / portTICK_PERIOD_MS;
 8001cc8:	2305      	movs	r3, #5
 8001cca:	60fb      	str	r3, [r7, #12]

	for(;;)
	{

		vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);
 8001ccc:	f107 0308 	add.w	r3, r7, #8
 8001cd0:	68f9      	ldr	r1, [r7, #12]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f006 fd5a 	bl	800878c <vTaskDelayUntil>

		if (xLastWakeTime % (5 / portTICK_PERIOD_MS) == 0)
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <OS_TASK_QM_APPL_Task+0x70>)
 8001cdc:	fba3 2301 	umull	r2, r3, r3, r1
 8001ce0:	089a      	lsrs	r2, r3, #2
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	1aca      	subs	r2, r1, r3
 8001cea:	2a00      	cmp	r2, #0
 8001cec:	d101      	bne.n	8001cf2 <OS_TASK_QM_APPL_Task+0x3a>
		{

			Rte_Runnable_Btc_MainFunction();
 8001cee:	f008 fb6b 	bl	800a3c8 <Rte_Runnable_Btc_MainFunction>

			/* do nothing */

		}

		vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);
 8001cf2:	f107 0308 	add.w	r3, r7, #8
 8001cf6:	68f9      	ldr	r1, [r7, #12]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f006 fd47 	bl	800878c <vTaskDelayUntil>

		if (xLastWakeTime % (10 / portTICK_PERIOD_MS) == 0)
 8001cfe:	68b9      	ldr	r1, [r7, #8]
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <OS_TASK_QM_APPL_Task+0x70>)
 8001d02:	fba3 2301 	umull	r2, r3, r3, r1
 8001d06:	08da      	lsrs	r2, r3, #3
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	1aca      	subs	r2, r1, r3
 8001d12:	2a00      	cmp	r2, #0
 8001d14:	d103      	bne.n	8001d1e <OS_TASK_QM_APPL_Task+0x66>
		{

			Rte_Runnable_CenLoc_MainFunction();
 8001d16:	f008 fb5d 	bl	800a3d4 <Rte_Runnable_CenLoc_MainFunction>
			Rte_Runnable_IntLights_MainFunction();
 8001d1a:	f008 fb67 	bl	800a3ec <Rte_Runnable_IntLights_MainFunction>

			/* do nothing */

		}

		osDelay(1);
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f005 f8d5 	bl	8006ece <osDelay>
		vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);
 8001d24:	e7d2      	b.n	8001ccc <OS_TASK_QM_APPL_Task+0x14>
 8001d26:	bf00      	nop
 8001d28:	cccccccd 	.word	0xcccccccd

08001d2c <Os_SecAlm_AlarmReset_Callback>:
  /* USER CODE END OS_TASK_QM_APPL_Task */
}

/* Os_SecAlm_AlarmReset_Callback function */
void Os_SecAlm_AlarmReset_Callback(void *argument)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlm_AlarmReset_Callback */

	Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter((uint16*)0);
 8001d34:	2000      	movs	r0, #0
 8001d36:	f008 fb31 	bl	800a39c <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>

  /* USER CODE END Os_SecAlm_AlarmReset_Callback */
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <Os_CenLoc_LockUnlockSequence_Timer_Callback>:

/* Os_CenLoc_LockUnlockSequence_Timer_Callback function */
void Os_CenLoc_LockUnlockSequence_Timer_Callback(void *argument)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_CenLoc_LockUnlockSequence_Timer_Callback */

	if(Timer2Counter_CenLoc_Tim2IRQFlag <= 6
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b06      	cmp	r3, #6
 8001d52:	d819      	bhi.n	8001d88 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
		&& ((Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_HIGH)
 8001d54:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d103      	bne.n	8001d64 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x20>
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d007      	beq.n	8001d74 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x30>
		|| (Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_LOW)))
 8001d64:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d10d      	bne.n	8001d88 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d109      	bne.n	8001d88 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
	{

		Timer2Counter_CenLoc_Tim2IRQFlag++;
 8001d74:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8001d7e:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag(&Timer2Counter_CenLoc_Tim2IRQFlag);
 8001d80:	4807      	ldr	r0, [pc, #28]	; (8001da0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8001d82:	f008 f969 	bl	800a058 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag>
 8001d86:	e006      	b.n	8001d96 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x52>

	}
	else
	{

		Timer2Counter_CenLoc_Tim2IRQFlag = 7;
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8001d8a:	2207      	movs	r2, #7
 8001d8c:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag(&Timer2Counter_CenLoc_Tim2IRQFlag);
 8001d8e:	4804      	ldr	r0, [pc, #16]	; (8001da0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8001d90:	f008 f962 	bl	800a058 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag>

	}

  /* USER CODE END Os_CenLoc_LockUnlockSequence_Timer_Callback */
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200007cc 	.word	0x200007cc
 8001da4:	200000aa 	.word	0x200000aa
 8001da8:	200000ad 	.word	0x200000ad

08001dac <Os_SecAlmLed_TurnOnCyclic_Timer_Callback>:

/* Os_SecAlmLed_TurnOnCyclic_Timer_Callback function */
void Os_SecAlmLed_TurnOnCyclic_Timer_Callback(void *argument)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmLed_TurnOnCyclic_Timer_Callback */
	Timer3Counter_CenLoc_Tim3IRQFlag++;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	3301      	adds	r3, #1
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8001dbe:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag(&Timer3Counter_CenLoc_Tim3IRQFlag);
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8001dc2:	f008 f95f 	bl	800a084 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag>
  /* USER CODE END Os_SecAlmLed_TurnOnCyclic_Timer_Callback */
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200007cf 	.word	0x200007cf

08001dd4 <Os_SecAlmLedTurnOn_Timer_Callback>:

/* Os_SecAlmLedTurnOn_Timer_Callback function */
void Os_SecAlmLedTurnOn_Timer_Callback(void *argument)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmLedTurnOn_Timer_Callback */

	Timer11Counter_CenLoc_Tim11IRQFlag++;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	3301      	adds	r3, #1
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8001de6:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag(&Timer11Counter_CenLoc_Tim11IRQFlag);
 8001de8:	4803      	ldr	r0, [pc, #12]	; (8001df8 <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8001dea:	f008 f977 	bl	800a0dc <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag>

  /* USER CODE END Os_SecAlmLedTurnOn_Timer_Callback */
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200007ce 	.word	0x200007ce

08001dfc <Os_FollowMeHome_Timer_Callback>:

/* Os_FollowMeHome_Timer_Callback function */
void Os_FollowMeHome_Timer_Callback(void *argument)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_FollowMeHome_Timer_Callback */

	Timer5Counter_CenLoc_Tim5IRQFlag++;
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <Os_FollowMeHome_Timer_Callback+0x24>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <Os_FollowMeHome_Timer_Callback+0x24>)
 8001e0e:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag(&Timer5Counter_CenLoc_Tim5IRQFlag);
 8001e10:	4803      	ldr	r0, [pc, #12]	; (8001e20 <Os_FollowMeHome_Timer_Callback+0x24>)
 8001e12:	f008 f94d 	bl	800a0b0 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag>

  /* USER CODE END Os_FollowMeHome_Timer_Callback */
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200007cd 	.word	0x200007cd

08001e24 <Os_TurnSignals_Timer_Callback>:

/* Os_TurnSignals_Timer_Callback function */
void Os_TurnSignals_Timer_Callback(void *argument)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_TurnSignals_Timer_Callback */

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <Os_TurnSignals_Timer_Callback+0x58>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d107      	bne.n	8001e44 <Os_TurnSignals_Timer_Callback+0x20>
	{

		Timer2Counter_ExtLights_LTSFlag++;
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <Os_TurnSignals_Timer_Callback+0x5c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <Os_TurnSignals_Timer_Callback+0x5c>)
 8001e3c:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(&Timer2Counter_ExtLights_LTSFlag);
 8001e3e:	4810      	ldr	r0, [pc, #64]	; (8001e80 <Os_TurnSignals_Timer_Callback+0x5c>)
 8001e40:	f008 fa54 	bl	800a2ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>

		/* do nothing */

	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <Os_TurnSignals_Timer_Callback+0x60>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d107      	bne.n	8001e5c <Os_TurnSignals_Timer_Callback+0x38>
	{

		Timer2Counter_ExtLights_RTSFlag++;
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <Os_TurnSignals_Timer_Callback+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	4a0d      	ldr	r2, [pc, #52]	; (8001e88 <Os_TurnSignals_Timer_Callback+0x64>)
 8001e54:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(&Timer2Counter_ExtLights_RTSFlag);
 8001e56:	480c      	ldr	r0, [pc, #48]	; (8001e88 <Os_TurnSignals_Timer_Callback+0x64>)
 8001e58:	f008 fa32 	bl	800a2c0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>

		/* do nothing */

	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState == STD_HIGH)
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <Os_TurnSignals_Timer_Callback+0x68>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d107      	bne.n	8001e74 <Os_TurnSignals_Timer_Callback+0x50>
	{

		Timer2Counter_ExtLights_HLFlag++;
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <Os_TurnSignals_Timer_Callback+0x6c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <Os_TurnSignals_Timer_Callback+0x6c>)
 8001e6c:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(&Timer2Counter_ExtLights_HLFlag);
 8001e6e:	4808      	ldr	r0, [pc, #32]	; (8001e90 <Os_TurnSignals_Timer_Callback+0x6c>)
 8001e70:	f008 fa52 	bl	800a318 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>
		/* do nothing */

	}

  /* USER CODE END Os_TurnSignals_Timer_Callback */
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	200000b9 	.word	0x200000b9
 8001e80:	200007c0 	.word	0x200007c0
 8001e84:	200000ba 	.word	0x200000ba
 8001e88:	200007c4 	.word	0x200007c4
 8001e8c:	200000bb 	.word	0x200000bb
 8001e90:	200007c8 	.word	0x200007c8

08001e94 <Os_SecAlmAlarm_Timer_Callback>:

/* Os_SecAlmAlarm_Timer_Callback function */
void Os_SecAlmAlarm_Timer_Callback(void *argument)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmAlarm_Timer_Callback */

  /* USER CODE END Os_SecAlmAlarm_Timer_Callback */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	; 0x28
 8001eac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	60da      	str	r2, [r3, #12]
 8001ebc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	4b5b      	ldr	r3, [pc, #364]	; (8002030 <MX_GPIO_Init+0x188>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a5a      	ldr	r2, [pc, #360]	; (8002030 <MX_GPIO_Init+0x188>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b58      	ldr	r3, [pc, #352]	; (8002030 <MX_GPIO_Init+0x188>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b54      	ldr	r3, [pc, #336]	; (8002030 <MX_GPIO_Init+0x188>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a53      	ldr	r2, [pc, #332]	; (8002030 <MX_GPIO_Init+0x188>)
 8001ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b51      	ldr	r3, [pc, #324]	; (8002030 <MX_GPIO_Init+0x188>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	4b4d      	ldr	r3, [pc, #308]	; (8002030 <MX_GPIO_Init+0x188>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a4c      	ldr	r2, [pc, #304]	; (8002030 <MX_GPIO_Init+0x188>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b4a      	ldr	r3, [pc, #296]	; (8002030 <MX_GPIO_Init+0x188>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	4b46      	ldr	r3, [pc, #280]	; (8002030 <MX_GPIO_Init+0x188>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a45      	ldr	r2, [pc, #276]	; (8002030 <MX_GPIO_Init+0x188>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b43      	ldr	r3, [pc, #268]	; (8002030 <MX_GPIO_Init+0x188>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	603b      	str	r3, [r7, #0]
 8001f32:	4b3f      	ldr	r3, [pc, #252]	; (8002030 <MX_GPIO_Init+0x188>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a3e      	ldr	r2, [pc, #248]	; (8002030 <MX_GPIO_Init+0x188>)
 8001f38:	f043 0308 	orr.w	r3, r3, #8
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b3c      	ldr	r3, [pc, #240]	; (8002030 <MX_GPIO_Init+0x188>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HB_Pin|LB_Pin|DL_Pin|BL_Pin, GPIO_PIN_RESET);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	21f0      	movs	r1, #240	; 0xf0
 8001f4e:	4839      	ldr	r0, [pc, #228]	; (8002034 <MX_GPIO_Init+0x18c>)
 8001f50:	f002 fb70 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AL_Pin|RL_Pin, GPIO_PIN_RESET);
 8001f54:	2200      	movs	r2, #0
 8001f56:	2130      	movs	r1, #48	; 0x30
 8001f58:	4837      	ldr	r0, [pc, #220]	; (8002038 <MX_GPIO_Init+0x190>)
 8001f5a:	f002 fb6b 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FFL_Pin|RFL_Pin|BUZZ1_Pin|POSL_Pin
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f241 41cf 	movw	r1, #5327	; 0x14cf
 8001f64:	4835      	ldr	r0, [pc, #212]	; (800203c <MX_GPIO_Init+0x194>)
 8001f66:	f002 fb65 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001f6a:	f64f 73cf 	movw	r3, #65487	; 0xffcf
 8001f6e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f70:	2303      	movs	r3, #3
 8001f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	482e      	ldr	r0, [pc, #184]	; (8002038 <MX_GPIO_Init+0x190>)
 8001f80:	f002 f8f0 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_11
 8001f84:	f649 130c 	movw	r3, #39180	; 0x990c
 8001f88:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	4619      	mov	r1, r3
 8001f98:	4826      	ldr	r0, [pc, #152]	; (8002034 <MX_GPIO_Init+0x18c>)
 8001f9a:	f002 f8e3 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = HB_Pin|LB_Pin|DL_Pin|BL_Pin;
 8001f9e:	23f0      	movs	r3, #240	; 0xf0
 8001fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001faa:	2300      	movs	r3, #0
 8001fac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	481f      	ldr	r0, [pc, #124]	; (8002034 <MX_GPIO_Init+0x18c>)
 8001fb6:	f002 f8d5 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AL_Pin|RL_Pin;
 8001fba:	2330      	movs	r3, #48	; 0x30
 8001fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4819      	ldr	r0, [pc, #100]	; (8002038 <MX_GPIO_Init+0x190>)
 8001fd2:	f002 f8c7 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = FFL_Pin|RFL_Pin|BUZZ1_Pin|POSL_Pin
 8001fd6:	f241 43cf 	movw	r3, #5327	; 0x14cf
 8001fda:	617b      	str	r3, [r7, #20]
                          |BUZZ2_Pin|IL_Pin|LTS_Pin|RTS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	4619      	mov	r1, r3
 8001fee:	4813      	ldr	r0, [pc, #76]	; (800203c <MX_GPIO_Init+0x194>)
 8001ff0:	f002 f8b8 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB4
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8001ff4:	f24e 3330 	movw	r3, #58160	; 0xe330
 8001ff8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002002:	f107 0314 	add.w	r3, r7, #20
 8002006:	4619      	mov	r1, r3
 8002008:	480c      	ldr	r0, [pc, #48]	; (800203c <MX_GPIO_Init+0x194>)
 800200a:	f002 f8ab 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800200e:	2304      	movs	r3, #4
 8002010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002012:	2303      	movs	r3, #3
 8002014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	4619      	mov	r1, r3
 8002020:	4807      	ldr	r0, [pc, #28]	; (8002040 <MX_GPIO_Init+0x198>)
 8002022:	f002 f89f 	bl	8004164 <HAL_GPIO_Init>

}
 8002026:	bf00      	nop
 8002028:	3728      	adds	r7, #40	; 0x28
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800
 8002034:	40020000 	.word	0x40020000
 8002038:	40020800 	.word	0x40020800
 800203c:	40020400 	.word	0x40020400
 8002040:	40020c00 	.word	0x40020c00

08002044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <HAL_MspInit+0x64>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <HAL_MspInit+0x64>)
 8002054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002058:	6453      	str	r3, [r2, #68]	; 0x44
 800205a:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <HAL_MspInit+0x64>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	603b      	str	r3, [r7, #0]
 800206a:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <HAL_MspInit+0x64>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	4a0e      	ldr	r2, [pc, #56]	; (80020a8 <HAL_MspInit+0x64>)
 8002070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002074:	6413      	str	r3, [r2, #64]	; 0x40
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <HAL_MspInit+0x64>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	210f      	movs	r1, #15
 8002086:	f06f 0001 	mvn.w	r0, #1
 800208a:	f001 fa2c 	bl	80034e6 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	2105      	movs	r1, #5
 8002092:	2051      	movs	r0, #81	; 0x51
 8002094:	f001 fa27 	bl	80034e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002098:	2051      	movs	r0, #81	; 0x51
 800209a:	f001 fa40 	bl	800351e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40023800 	.word	0x40023800

080020ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08c      	sub	sp, #48	; 0x30
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	4b2e      	ldr	r3, [pc, #184]	; (800217c <HAL_InitTick+0xd0>)
 80020c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c4:	4a2d      	ldr	r2, [pc, #180]	; (800217c <HAL_InitTick+0xd0>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6453      	str	r3, [r2, #68]	; 0x44
 80020cc:	4b2b      	ldr	r3, [pc, #172]	; (800217c <HAL_InitTick+0xd0>)
 80020ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020d8:	f107 020c 	add.w	r2, r7, #12
 80020dc:	f107 0310 	add.w	r3, r7, #16
 80020e0:	4611      	mov	r1, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f002 ff72 	bl	8004fcc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80020e8:	f002 ff5c 	bl	8004fa4 <HAL_RCC_GetPCLK2Freq>
 80020ec:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f0:	4a23      	ldr	r2, [pc, #140]	; (8002180 <HAL_InitTick+0xd4>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	0c9b      	lsrs	r3, r3, #18
 80020f8:	3b01      	subs	r3, #1
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80020fc:	4b21      	ldr	r3, [pc, #132]	; (8002184 <HAL_InitTick+0xd8>)
 80020fe:	4a22      	ldr	r2, [pc, #136]	; (8002188 <HAL_InitTick+0xdc>)
 8002100:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002102:	4b20      	ldr	r3, [pc, #128]	; (8002184 <HAL_InitTick+0xd8>)
 8002104:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002108:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800210a:	4a1e      	ldr	r2, [pc, #120]	; (8002184 <HAL_InitTick+0xd8>)
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002110:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <HAL_InitTick+0xd8>)
 8002112:	2200      	movs	r2, #0
 8002114:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002116:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <HAL_InitTick+0xd8>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_InitTick+0xd8>)
 800211e:	2200      	movs	r2, #0
 8002120:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002122:	4818      	ldr	r0, [pc, #96]	; (8002184 <HAL_InitTick+0xd8>)
 8002124:	f002 ff84 	bl	8005030 <HAL_TIM_Base_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800212e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002132:	2b00      	cmp	r3, #0
 8002134:	d11b      	bne.n	800216e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002136:	4813      	ldr	r0, [pc, #76]	; (8002184 <HAL_InitTick+0xd8>)
 8002138:	f002 ffd6 	bl	80050e8 <HAL_TIM_Base_Start_IT>
 800213c:	4603      	mov	r3, r0
 800213e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002142:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002146:	2b00      	cmp	r3, #0
 8002148:	d111      	bne.n	800216e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800214a:	2019      	movs	r0, #25
 800214c:	f001 f9e7 	bl	800351e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b0f      	cmp	r3, #15
 8002154:	d808      	bhi.n	8002168 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002156:	2200      	movs	r2, #0
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	2019      	movs	r0, #25
 800215c:	f001 f9c3 	bl	80034e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002160:	4a0a      	ldr	r2, [pc, #40]	; (800218c <HAL_InitTick+0xe0>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e002      	b.n	800216e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800216e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002172:	4618      	mov	r0, r3
 8002174:	3730      	adds	r7, #48	; 0x30
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800
 8002180:	431bde83 	.word	0x431bde83
 8002184:	200001d4 	.word	0x200001d4
 8002188:	40010000 	.word	0x40010000
 800218c:	20000008 	.word	0x20000008

08002190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	SystemManager_SetFault(NMI_RESET);
 8002194:	2008      	movs	r0, #8
 8002196:	f008 fedf 	bl	800af58 <SystemManager_SetFault>
	SystemManager_PerformReset();
 800219a:	f008 ff06 	bl	800afaa <SystemManager_PerformReset>

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800219e:	e7fe      	b.n	800219e <NMI_Handler+0xe>

080021a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	SystemManager_SetFault(HARDWARE_RESET);
 80021a4:	2006      	movs	r0, #6
 80021a6:	f008 fed7 	bl	800af58 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80021aa:	f008 fefe 	bl	800afaa <SystemManager_PerformReset>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ae:	e7fe      	b.n	80021ae <HardFault_Handler+0xe>

080021b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

	SystemManager_SetFault(MEMORY_FAULT_RESET);
 80021b4:	2009      	movs	r0, #9
 80021b6:	f008 fecf 	bl	800af58 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80021ba:	f008 fef6 	bl	800afaa <SystemManager_PerformReset>

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021be:	e7fe      	b.n	80021be <MemManage_Handler+0xe>

080021c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

	SystemManager_SetFault(BUS_FAULT_RESET);
 80021c4:	200b      	movs	r0, #11
 80021c6:	f008 fec7 	bl	800af58 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80021ca:	f008 feee 	bl	800afaa <SystemManager_PerformReset>

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ce:	e7fe      	b.n	80021ce <BusFault_Handler+0xe>

080021d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

	SystemManager_SetFault(USAGE_FAULT_RESET);
 80021d4:	200a      	movs	r0, #10
 80021d6:	f008 febf 	bl	800af58 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80021da:	f008 fee6 	bl	800afaa <SystemManager_PerformReset>

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <UsageFault_Handler+0xe>

080021e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

	SystemManager_SetFault(WATCHDOG_RESET);
 80021f4:	2003      	movs	r0, #3
 80021f6:	f008 feaf 	bl	800af58 <SystemManager_SetFault>

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 80021fa:	4802      	ldr	r0, [pc, #8]	; (8002204 <WWDG_IRQHandler+0x14>)
 80021fc:	f004 f88a 	bl	8006314 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000734 	.word	0x20000734

08002208 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

	SystemManager_PerformReset();
 800220c:	f008 fecd 	bl	800afaa <SystemManager_PerformReset>

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002210:	f002 fa2a 	bl	8004668 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}

08002218 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

	SystemManager_SetFault(FLASH_FAULT_RESET);
 800221c:	2007      	movs	r0, #7
 800221e:	f008 fe9b 	bl	800af58 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8002222:	f008 fec2 	bl	800afaa <SystemManager_PerformReset>

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002226:	f001 fdf5 	bl	8003e14 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}

0800222e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <ADC_IRQHandler+0x10>)
 8002242:	f000 fb65 	bl	8002910 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200000d8 	.word	0x200000d8

08002250 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002256:	f002 ffa9 	bl	80051ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000558 	.word	0x20000558

08002264 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800226a:	f002 ff9f 	bl	80051ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200001d4 	.word	0x200001d4

08002278 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800227e:	f002 ff95 	bl	80051ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	2000060c 	.word	0x2000060c

0800228c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <TIM2_IRQHandler+0x10>)
 8002292:	f002 ff8b 	bl	80051ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000288 	.word	0x20000288

080022a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022a4:	4802      	ldr	r0, [pc, #8]	; (80022b0 <TIM3_IRQHandler+0x10>)
 80022a6:	f002 ff81 	bl	80051ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	2000033c 	.word	0x2000033c

080022b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80022b8:	4802      	ldr	r0, [pc, #8]	; (80022c4 <TIM4_IRQHandler+0x10>)
 80022ba:	f002 ff77 	bl	80051ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	200003f0 	.word	0x200003f0

080022c8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <TIM5_IRQHandler+0x10>)
 80022ce:	f002 ff6d 	bl	80051ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200004a4 	.word	0x200004a4

080022dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <DMA2_Stream0_IRQHandler+0x10>)
 80022e2:	f001 fb2d 	bl	8003940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	2000013c 	.word	0x2000013c

080022f0 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <SystemInit+0x20>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <SystemInit+0x20>)
 800230c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM11_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002334:	d116      	bne.n	8002364 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	4b52      	ldr	r3, [pc, #328]	; (8002484 <HAL_TIM_Base_MspInit+0x160>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	4a51      	ldr	r2, [pc, #324]	; (8002484 <HAL_TIM_Base_MspInit+0x160>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6413      	str	r3, [r2, #64]	; 0x40
 8002346:	4b4f      	ldr	r3, [pc, #316]	; (8002484 <HAL_TIM_Base_MspInit+0x160>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	61fb      	str	r3, [r7, #28]
 8002350:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2105      	movs	r1, #5
 8002356:	201c      	movs	r0, #28
 8002358:	f001 f8c5 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800235c:	201c      	movs	r0, #28
 800235e:	f001 f8de 	bl	800351e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002362:	e08a      	b.n	800247a <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM3)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a47      	ldr	r2, [pc, #284]	; (8002488 <HAL_TIM_Base_MspInit+0x164>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d116      	bne.n	800239c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	4b44      	ldr	r3, [pc, #272]	; (8002484 <HAL_TIM_Base_MspInit+0x160>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4a43      	ldr	r2, [pc, #268]	; (8002484 <HAL_TIM_Base_MspInit+0x160>)
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	6413      	str	r3, [r2, #64]	; 0x40
 800237e:	4b41      	ldr	r3, [pc, #260]	; (8002484 <HAL_TIM_Base_MspInit+0x160>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	61bb      	str	r3, [r7, #24]
 8002388:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800238a:	2200      	movs	r2, #0
 800238c:	2105      	movs	r1, #5
 800238e:	201d      	movs	r0, #29
 8002390:	f001 f8a9 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002394:	201d      	movs	r0, #29
 8002396:	f001 f8c2 	bl	800351e <HAL_NVIC_EnableIRQ>
}
 800239a:	e06e      	b.n	800247a <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM4)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a3a      	ldr	r2, [pc, #232]	; (800248c <HAL_TIM_Base_MspInit+0x168>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d116      	bne.n	80023d4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	4b36      	ldr	r3, [pc, #216]	; (8002484 <HAL_TIM_Base_MspInit+0x160>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	4a35      	ldr	r2, [pc, #212]	; (8002484 <HAL_TIM_Base_MspInit+0x160>)
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	6413      	str	r3, [r2, #64]	; 0x40
 80023b6:	4b33      	ldr	r3, [pc, #204]	; (8002484 <HAL_TIM_Base_MspInit+0x160>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2105      	movs	r1, #5
 80023c6:	201e      	movs	r0, #30
 80023c8:	f001 f88d 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023cc:	201e      	movs	r0, #30
 80023ce:	f001 f8a6 	bl	800351e <HAL_NVIC_EnableIRQ>
}
 80023d2:	e052      	b.n	800247a <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM5)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a2d      	ldr	r2, [pc, #180]	; (8002490 <HAL_TIM_Base_MspInit+0x16c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d116      	bne.n	800240c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	4b28      	ldr	r3, [pc, #160]	; (8002484 <HAL_TIM_Base_MspInit+0x160>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	4a27      	ldr	r2, [pc, #156]	; (8002484 <HAL_TIM_Base_MspInit+0x160>)
 80023e8:	f043 0308 	orr.w	r3, r3, #8
 80023ec:	6413      	str	r3, [r2, #64]	; 0x40
 80023ee:	4b25      	ldr	r3, [pc, #148]	; (8002484 <HAL_TIM_Base_MspInit+0x160>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2105      	movs	r1, #5
 80023fe:	2032      	movs	r0, #50	; 0x32
 8002400:	f001 f871 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002404:	2032      	movs	r0, #50	; 0x32
 8002406:	f001 f88a 	bl	800351e <HAL_NVIC_EnableIRQ>
}
 800240a:	e036      	b.n	800247a <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM9)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a20      	ldr	r2, [pc, #128]	; (8002494 <HAL_TIM_Base_MspInit+0x170>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d116      	bne.n	8002444 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <HAL_TIM_Base_MspInit+0x160>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	4a19      	ldr	r2, [pc, #100]	; (8002484 <HAL_TIM_Base_MspInit+0x160>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002424:	6453      	str	r3, [r2, #68]	; 0x44
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <HAL_TIM_Base_MspInit+0x160>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002432:	2200      	movs	r2, #0
 8002434:	2105      	movs	r1, #5
 8002436:	2018      	movs	r0, #24
 8002438:	f001 f855 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800243c:	2018      	movs	r0, #24
 800243e:	f001 f86e 	bl	800351e <HAL_NVIC_EnableIRQ>
}
 8002442:	e01a      	b.n	800247a <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM11)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a13      	ldr	r2, [pc, #76]	; (8002498 <HAL_TIM_Base_MspInit+0x174>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d115      	bne.n	800247a <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <HAL_TIM_Base_MspInit+0x160>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <HAL_TIM_Base_MspInit+0x160>)
 8002458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800245c:	6453      	str	r3, [r2, #68]	; 0x44
 800245e:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_TIM_Base_MspInit+0x160>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2105      	movs	r1, #5
 800246e:	201a      	movs	r0, #26
 8002470:	f001 f839 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002474:	201a      	movs	r0, #26
 8002476:	f001 f852 	bl	800351e <HAL_NVIC_EnableIRQ>
}
 800247a:	bf00      	nop
 800247c:	3720      	adds	r7, #32
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800
 8002488:	40000400 	.word	0x40000400
 800248c:	40000800 	.word	0x40000800
 8002490:	40000c00 	.word	0x40000c00
 8002494:	40014000 	.word	0x40014000
 8002498:	40014800 	.word	0x40014800

0800249c <HAL_UART_MspInit>:
  /* USER CODE END USART1_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a19      	ldr	r2, [pc, #100]	; (8002520 <HAL_UART_MspInit+0x84>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d12c      	bne.n	8002518 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	4b18      	ldr	r3, [pc, #96]	; (8002524 <HAL_UART_MspInit+0x88>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	4a17      	ldr	r2, [pc, #92]	; (8002524 <HAL_UART_MspInit+0x88>)
 80024c8:	f043 0310 	orr.w	r3, r3, #16
 80024cc:	6453      	str	r3, [r2, #68]	; 0x44
 80024ce:	4b15      	ldr	r3, [pc, #84]	; (8002524 <HAL_UART_MspInit+0x88>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_UART_MspInit+0x88>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a10      	ldr	r2, [pc, #64]	; (8002524 <HAL_UART_MspInit+0x88>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <HAL_UART_MspInit+0x88>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002504:	2303      	movs	r3, #3
 8002506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002508:	2307      	movs	r3, #7
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	4619      	mov	r1, r3
 8002512:	4805      	ldr	r0, [pc, #20]	; (8002528 <HAL_UART_MspInit+0x8c>)
 8002514:	f001 fe26 	bl	8004164 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002518:	bf00      	nop
 800251a:	3728      	adds	r7, #40	; 0x28
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40011000 	.word	0x40011000
 8002524:	40023800 	.word	0x40023800
 8002528:	40020000 	.word	0x40020000

0800252c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a08      	ldr	r2, [pc, #32]	; (800255c <HAL_UART_MspDeInit+0x30>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d10a      	bne.n	8002554 <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800253e:	4b08      	ldr	r3, [pc, #32]	; (8002560 <HAL_UART_MspDeInit+0x34>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	4a07      	ldr	r2, [pc, #28]	; (8002560 <HAL_UART_MspDeInit+0x34>)
 8002544:	f023 0310 	bic.w	r3, r3, #16
 8002548:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800254a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800254e:	4805      	ldr	r0, [pc, #20]	; (8002564 <HAL_UART_MspDeInit+0x38>)
 8002550:	f001 ff8c 	bl	800446c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40011000 	.word	0x40011000
 8002560:	40023800 	.word	0x40023800
 8002564:	40020000 	.word	0x40020000

08002568 <MX_WWDG_Init>:

WWDG_HandleTypeDef hwwdg;

/* WWDG init function */
void MX_WWDG_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 800256c:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <MX_WWDG_Init+0x3c>)
 800256e:	4a0e      	ldr	r2, [pc, #56]	; (80025a8 <MX_WWDG_Init+0x40>)
 8002570:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 8002572:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <MX_WWDG_Init+0x3c>)
 8002574:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002578:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 127;
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <MX_WWDG_Init+0x3c>)
 800257c:	227f      	movs	r2, #127	; 0x7f
 800257e:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 127;
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <MX_WWDG_Init+0x3c>)
 8002582:	227f      	movs	r2, #127	; 0x7f
 8002584:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_ENABLE;
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <MX_WWDG_Init+0x3c>)
 8002588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800258c:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 800258e:	4805      	ldr	r0, [pc, #20]	; (80025a4 <MX_WWDG_Init+0x3c>)
 8002590:	f003 fe78 	bl	8006284 <HAL_WWDG_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_WWDG_Init+0x36>
  {
    Error_Handler();
 800259a:	f008 fdfb 	bl	800b194 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000734 	.word	0x20000734
 80025a8:	40002c00 	.word	0x40002c00

080025ac <HAL_WWDG_MspInit>:

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* wwdgHandle)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  if(wwdgHandle->Instance==WWDG)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0b      	ldr	r2, [pc, #44]	; (80025e8 <HAL_WWDG_MspInit+0x3c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d10d      	bne.n	80025da <HAL_WWDG_MspInit+0x2e>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* WWDG clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <HAL_WWDG_MspInit+0x40>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	4a09      	ldr	r2, [pc, #36]	; (80025ec <HAL_WWDG_MspInit+0x40>)
 80025c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025cc:	6413      	str	r3, [r2, #64]	; 0x40
 80025ce:	4b07      	ldr	r3, [pc, #28]	; (80025ec <HAL_WWDG_MspInit+0x40>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }
}
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40002c00 	.word	0x40002c00
 80025ec:	40023800 	.word	0x40023800

080025f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002628 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025f4:	480d      	ldr	r0, [pc, #52]	; (800262c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025f6:	490e      	ldr	r1, [pc, #56]	; (8002630 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025f8:	4a0e      	ldr	r2, [pc, #56]	; (8002634 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025fc:	e002      	b.n	8002604 <LoopCopyDataInit>

080025fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002602:	3304      	adds	r3, #4

08002604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002608:	d3f9      	bcc.n	80025fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800260a:	4a0b      	ldr	r2, [pc, #44]	; (8002638 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800260c:	4c0b      	ldr	r4, [pc, #44]	; (800263c <LoopFillZerobss+0x26>)
  movs r3, #0
 800260e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002610:	e001      	b.n	8002616 <LoopFillZerobss>

08002612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002614:	3204      	adds	r2, #4

08002616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002618:	d3fb      	bcc.n	8002612 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800261a:	f7ff fe71 	bl	8002300 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800261e:	f008 fddf 	bl	800b1e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002622:	f7fd ff5f 	bl	80004e4 <main>
  bx  lr    
 8002626:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002628:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800262c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002630:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002634:	0800b8a4 	.word	0x0800b8a4
  ldr r2, =_sbss
 8002638:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800263c:	20007ae4 	.word	0x20007ae4

08002640 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002640:	e7fe      	b.n	8002640 <DMA1_Stream0_IRQHandler>

08002642 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d104      	bne.n	800265a <stm32_lock_acquire+0x18>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002650:	b672      	cpsid	i
}
 8002652:	bf00      	nop
 8002654:	f008 fd9e 	bl	800b194 <Error_Handler>
 8002658:	e7fe      	b.n	8002658 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	7a1b      	ldrb	r3, [r3, #8]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d904      	bls.n	800266c <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002662:	b672      	cpsid	i
}
 8002664:	bf00      	nop
 8002666:	f008 fd95 	bl	800b194 <Error_Handler>
 800266a:	e7fe      	b.n	800266a <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	7a1b      	ldrb	r3, [r3, #8]
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	b2d1      	uxtb	r1, r2
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	7211      	strb	r1, [r2, #8]
 8002678:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800267a:	f3ef 8211 	mrs	r2, BASEPRI
 800267e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002682:	f383 8811 	msr	BASEPRI, r3
 8002686:	f3bf 8f6f 	isb	sy
 800268a:	f3bf 8f4f 	dsb	sy
 800268e:	60fa      	str	r2, [r7, #12]
 8002690:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d104      	bne.n	80026ba <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80026b0:	b672      	cpsid	i
}
 80026b2:	bf00      	nop
 80026b4:	f008 fd6e 	bl	800b194 <Error_Handler>
 80026b8:	e7fe      	b.n	80026b8 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	7a1b      	ldrb	r3, [r3, #8]
 80026be:	3b01      	subs	r3, #1
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	7a1b      	ldrb	r3, [r3, #8]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d904      	bls.n	80026d8 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80026ce:	b672      	cpsid	i
}
 80026d0:	bf00      	nop
 80026d2:	f008 fd5f 	bl	800b194 <Error_Handler>
 80026d6:	e7fe      	b.n	80026d6 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	7a1b      	ldrb	r3, [r3, #8]
 80026dc:	461a      	mov	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80026ec:	bf00      	nop
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d104      	bne.n	800270e <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002704:	b672      	cpsid	i
}
 8002706:	bf00      	nop
 8002708:	f008 fd44 	bl	800b194 <Error_Handler>
 800270c:	e7fe      	b.n	800270c <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff96 	bl	8002642 <stm32_lock_acquire>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d104      	bne.n	8002736 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800272c:	b672      	cpsid	i
}
 800272e:	bf00      	nop
 8002730:	f008 fd30 	bl	800b194 <Error_Handler>
 8002734:	e7fe      	b.n	8002734 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ffb2 	bl	80026a2 <stm32_lock_release>
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800274c:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <HAL_Init+0x40>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0d      	ldr	r2, [pc, #52]	; (8002788 <HAL_Init+0x40>)
 8002752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002756:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_Init+0x40>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <HAL_Init+0x40>)
 800275e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002762:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002764:	4b08      	ldr	r3, [pc, #32]	; (8002788 <HAL_Init+0x40>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a07      	ldr	r2, [pc, #28]	; (8002788 <HAL_Init+0x40>)
 800276a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002770:	2003      	movs	r0, #3
 8002772:	f000 fead 	bl	80034d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002776:	200f      	movs	r0, #15
 8002778:	f7ff fc98 	bl	80020ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800277c:	f7ff fc62 	bl	8002044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40023c00 	.word	0x40023c00

0800278c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_IncTick+0x20>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_IncTick+0x24>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4413      	add	r3, r2
 800279c:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <HAL_IncTick+0x24>)
 800279e:	6013      	str	r3, [r2, #0]
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	2000000c 	.word	0x2000000c
 80027b0:	2000075c 	.word	0x2000075c

080027b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return uwTick;
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <HAL_GetTick+0x14>)
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	2000075c 	.word	0x2000075c

080027cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e04a      	b.n	8002878 <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d120      	bne.n	800282c <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a24      	ldr	r2, [pc, #144]	; (8002880 <HAL_ADC_Init+0xb4>)
 80027ee:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a24      	ldr	r2, [pc, #144]	; (8002884 <HAL_ADC_Init+0xb8>)
 80027f4:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a23      	ldr	r2, [pc, #140]	; (8002888 <HAL_ADC_Init+0xbc>)
 80027fa:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a23      	ldr	r2, [pc, #140]	; (800288c <HAL_ADC_Init+0xc0>)
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a22      	ldr	r2, [pc, #136]	; (8002890 <HAL_ADC_Init+0xc4>)
 8002806:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280c:	2b00      	cmp	r3, #0
 800280e:	d102      	bne.n	8002816 <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a20      	ldr	r2, [pc, #128]	; (8002894 <HAL_ADC_Init+0xc8>)
 8002814:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	2b00      	cmp	r3, #0
 8002836:	d118      	bne.n	800286a <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002840:	f023 0302 	bic.w	r3, r3, #2
 8002844:	f043 0202 	orr.w	r2, r3, #2
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 fbcb 	bl	8002fe8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	f023 0303 	bic.w	r3, r3, #3
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	641a      	str	r2, [r3, #64]	; 0x40
 8002868:	e001      	b.n	800286e <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002876:	7bfb      	ldrb	r3, [r7, #15]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	08002d19 	.word	0x08002d19
 8002884:	08002d2d 	.word	0x08002d2d
 8002888:	08002d41 	.word	0x08002d41
 800288c:	08006355 	.word	0x08006355
 8002890:	080032ed 	.word	0x080032ed
 8002894:	0800184d 	.word	0x0800184d

08002898 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e02a      	b.n	8002904 <HAL_ADC_DeInit+0x6c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f043 0202 	orr.w	r2, r3, #2
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0201 	bic.w	r2, r2, #1
 80028c8:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d110      	bne.n	80028fa <HAL_ADC_DeInit+0x62>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  if (hadc->MspDeInitCallback == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <HAL_ADC_DeInit+0x4e>
  {
    hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a0a      	ldr	r2, [pc, #40]	; (800290c <HAL_ADC_DeInit+0x74>)
 80028e4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	4798      	blx	r3
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002902:	7bfb      	ldrb	r3, [r7, #15]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	08001939 	.word	0x08001939

08002910 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	2300      	movs	r3, #0
 800291e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d04a      	beq.n	80029dc <HAL_ADC_IRQHandler+0xcc>
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d047      	beq.n	80029dc <HAL_ADC_IRQHandler+0xcc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	2b00      	cmp	r3, #0
 8002956:	d105      	bne.n	8002964 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d12b      	bne.n	80029ca <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002976:	2b00      	cmp	r3, #0
 8002978:	d127      	bne.n	80029ca <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002984:	2b00      	cmp	r3, #0
 8002986:	d006      	beq.n	8002996 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002992:	2b00      	cmp	r3, #0
 8002994:	d119      	bne.n	80029ca <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0220 	bic.w	r2, r2, #32
 80029a4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d105      	bne.n	80029ca <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f06f 0212 	mvn.w	r2, #18
 80029da:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ea:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d058      	beq.n	8002aa4 <HAL_ADC_IRQHandler+0x194>
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d055      	beq.n	8002aa4 <HAL_ADC_IRQHandler+0x194>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d105      	bne.n	8002a10 <HAL_ADC_IRQHandler+0x100>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d139      	bne.n	8002a92 <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a24:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d006      	beq.n	8002a3a <HAL_ADC_IRQHandler+0x12a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d12b      	bne.n	8002a92 <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d124      	bne.n	8002a92 <HAL_ADC_IRQHandler+0x182>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d11d      	bne.n	8002a92 <HAL_ADC_IRQHandler+0x182>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d119      	bne.n	8002a92 <HAL_ADC_IRQHandler+0x182>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a6c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d105      	bne.n	8002a92 <HAL_ADC_IRQHandler+0x182>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f06f 020c 	mvn.w	r2, #12
 8002aa2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d018      	beq.n	8002aec <HAL_ADC_IRQHandler+0x1dc>
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d015      	beq.n	8002aec <HAL_ADC_IRQHandler+0x1dc>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d10e      	bne.n	8002aec <HAL_ADC_IRQHandler+0x1dc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f06f 0201 	mvn.w	r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002afa:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d016      	beq.n	8002b30 <HAL_ADC_IRQHandler+0x220>
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <HAL_ADC_IRQHandler+0x220>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0c:	f043 0202 	orr.w	r2, r3, #2
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0220 	mvn.w	r2, #32
 8002b1c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f06f 0220 	mvn.w	r2, #32
 8002b2e:	601a      	str	r2, [r3, #0]
  }
}
 8002b30:	bf00      	nop
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_ADC_Start_DMA+0x1e>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e0ce      	b.n	8002cf4 <HAL_ADC_Start_DMA+0x1bc>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d018      	beq.n	8002b9e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b7c:	4b5f      	ldr	r3, [pc, #380]	; (8002cfc <HAL_ADC_Start_DMA+0x1c4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a5f      	ldr	r2, [pc, #380]	; (8002d00 <HAL_ADC_Start_DMA+0x1c8>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	0c9a      	lsrs	r2, r3, #18
 8002b88:	4613      	mov	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	4413      	add	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002b90:	e002      	b.n	8002b98 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f9      	bne.n	8002b92 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bac:	d107      	bne.n	8002bbe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	f040 8086 	bne.w	8002cda <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bd6:	f023 0301 	bic.w	r3, r3, #1
 8002bda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d007      	beq.n	8002c00 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bf8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c0c:	d106      	bne.n	8002c1c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	f023 0206 	bic.w	r2, r3, #6
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	645a      	str	r2, [r3, #68]	; 0x44
 8002c1a:	e002      	b.n	8002c22 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c2a:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <HAL_ADC_Start_DMA+0x1cc>)
 8002c2c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c32:	4a35      	ldr	r2, [pc, #212]	; (8002d08 <HAL_ADC_Start_DMA+0x1d0>)
 8002c34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3a:	4a34      	ldr	r2, [pc, #208]	; (8002d0c <HAL_ADC_Start_DMA+0x1d4>)
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c42:	4a33      	ldr	r2, [pc, #204]	; (8002d10 <HAL_ADC_Start_DMA+0x1d8>)
 8002c44:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c4e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c5e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c6e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	334c      	adds	r3, #76	; 0x4c
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f000 fe06 	bl	8003890 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10f      	bne.n	8002cb0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d129      	bne.n	8002cf2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cac:	609a      	str	r2, [r3, #8]
 8002cae:	e020      	b.n	8002cf2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a17      	ldr	r2, [pc, #92]	; (8002d14 <HAL_ADC_Start_DMA+0x1dc>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d11b      	bne.n	8002cf2 <HAL_ADC_Start_DMA+0x1ba>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d114      	bne.n	8002cf2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	e00b      	b.n	8002cf2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f043 0210 	orr.w	r2, r3, #16
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	f043 0201 	orr.w	r2, r3, #1
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20000004 	.word	0x20000004
 8002d00:	431bde83 	.word	0x431bde83
 8002d04:	40012300 	.word	0x40012300
 8002d08:	080031e1 	.word	0x080031e1
 8002d0c:	0800329f 	.word	0x0800329f
 8002d10:	080032bd 	.word	0x080032bd
 8002d14:	40012000 	.word	0x40012000

08002d18 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x1c>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e113      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x244>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b09      	cmp	r3, #9
 8002d7e:	d925      	bls.n	8002dcc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68d9      	ldr	r1, [r3, #12]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	3b1e      	subs	r3, #30
 8002d96:	2207      	movs	r2, #7
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43da      	mvns	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	400a      	ands	r2, r1
 8002da4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68d9      	ldr	r1, [r3, #12]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	4618      	mov	r0, r3
 8002db8:	4603      	mov	r3, r0
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	4403      	add	r3, r0
 8002dbe:	3b1e      	subs	r3, #30
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	e022      	b.n	8002e12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6919      	ldr	r1, [r3, #16]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4613      	mov	r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4413      	add	r3, r2
 8002de0:	2207      	movs	r2, #7
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43da      	mvns	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	400a      	ands	r2, r1
 8002dee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6919      	ldr	r1, [r3, #16]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	4618      	mov	r0, r3
 8002e02:	4603      	mov	r3, r0
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	4403      	add	r3, r0
 8002e08:	409a      	lsls	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	d824      	bhi.n	8002e64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	3b05      	subs	r3, #5
 8002e2c:	221f      	movs	r2, #31
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43da      	mvns	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	400a      	ands	r2, r1
 8002e3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	4618      	mov	r0, r3
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	3b05      	subs	r3, #5
 8002e56:	fa00 f203 	lsl.w	r2, r0, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	635a      	str	r2, [r3, #52]	; 0x34
 8002e62:	e04c      	b.n	8002efe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b0c      	cmp	r3, #12
 8002e6a:	d824      	bhi.n	8002eb6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3b23      	subs	r3, #35	; 0x23
 8002e7e:	221f      	movs	r2, #31
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43da      	mvns	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	400a      	ands	r2, r1
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3b23      	subs	r3, #35	; 0x23
 8002ea8:	fa00 f203 	lsl.w	r2, r0, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
 8002eb4:	e023      	b.n	8002efe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3b41      	subs	r3, #65	; 0x41
 8002ec8:	221f      	movs	r2, #31
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	400a      	ands	r2, r1
 8002ed6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	3b41      	subs	r3, #65	; 0x41
 8002ef2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002efe:	4b29      	ldr	r3, [pc, #164]	; (8002fa4 <HAL_ADC_ConfigChannel+0x250>)
 8002f00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a28      	ldr	r2, [pc, #160]	; (8002fa8 <HAL_ADC_ConfigChannel+0x254>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d10f      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x1d8>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b12      	cmp	r3, #18
 8002f12:	d10b      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1d      	ldr	r2, [pc, #116]	; (8002fa8 <HAL_ADC_ConfigChannel+0x254>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d12b      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x23a>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a1c      	ldr	r2, [pc, #112]	; (8002fac <HAL_ADC_ConfigChannel+0x258>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d003      	beq.n	8002f48 <HAL_ADC_ConfigChannel+0x1f4>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b11      	cmp	r3, #17
 8002f46:	d122      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a11      	ldr	r2, [pc, #68]	; (8002fac <HAL_ADC_ConfigChannel+0x258>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d111      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f6a:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <HAL_ADC_ConfigChannel+0x25c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a11      	ldr	r2, [pc, #68]	; (8002fb4 <HAL_ADC_ConfigChannel+0x260>)
 8002f70:	fba2 2303 	umull	r2, r3, r2, r3
 8002f74:	0c9a      	lsrs	r2, r3, #18
 8002f76:	4613      	mov	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f80:	e002      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	3b01      	subs	r3, #1
 8002f86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f9      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	40012300 	.word	0x40012300
 8002fa8:	40012000 	.word	0x40012000
 8002fac:	10000012 	.word	0x10000012
 8002fb0:	20000004 	.word	0x20000004
 8002fb4:	431bde83 	.word	0x431bde83

08002fb8 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_ADC_GetError>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval ADC Error Code
  */
uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  return hadc->ErrorCode;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ff0:	4b79      	ldr	r3, [pc, #484]	; (80031d8 <ADC_Init+0x1f0>)
 8002ff2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	431a      	orrs	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800301c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	021a      	lsls	r2, r3, #8
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003040:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003062:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6899      	ldr	r1, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	4a58      	ldr	r2, [pc, #352]	; (80031dc <ADC_Init+0x1f4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d022      	beq.n	80030c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800308e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6899      	ldr	r1, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6899      	ldr	r1, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	e00f      	b.n	80030e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0202 	bic.w	r2, r2, #2
 80030f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6899      	ldr	r1, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	7e1b      	ldrb	r3, [r3, #24]
 8003100:	005a      	lsls	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d01b      	beq.n	800314c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003122:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003132:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6859      	ldr	r1, [r3, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	3b01      	subs	r3, #1
 8003140:	035a      	lsls	r2, r3, #13
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	e007      	b.n	800315c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800315a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800316a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	3b01      	subs	r3, #1
 8003178:	051a      	lsls	r2, r3, #20
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003190:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6899      	ldr	r1, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800319e:	025a      	lsls	r2, r3, #9
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6899      	ldr	r1, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	029a      	lsls	r2, r3, #10
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	609a      	str	r2, [r3, #8]
}
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	40012300 	.word	0x40012300
 80031dc:	0f000001 	.word	0x0f000001

080031e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d13d      	bne.n	8003276 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d12b      	bne.n	800326c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003218:	2b00      	cmp	r3, #0
 800321a:	d127      	bne.n	800326c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003226:	2b00      	cmp	r3, #0
 8003228:	d006      	beq.n	8003238 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003234:	2b00      	cmp	r3, #0
 8003236:	d119      	bne.n	800326c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0220 	bic.w	r2, r2, #32
 8003246:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d105      	bne.n	800326c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	f043 0201 	orr.w	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003274:	e00f      	b.n	8003296 <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	2b00      	cmp	r3, #0
 8003280:	d004      	beq.n	800328c <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	4798      	blx	r3
}
 800328a:	e004      	b.n	8003296 <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	4798      	blx	r3
}
 8003296:	bf00      	nop
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032aa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032b4:	bf00      	nop
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2240      	movs	r2, #64	; 0x40
 80032ce:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d4:	f043 0204 	orr.w	r2, r3, #4
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032e4:	bf00      	nop
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <__NVIC_SetPriorityGrouping+0x44>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800331c:	4013      	ands	r3, r2
 800331e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800332c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003332:	4a04      	ldr	r2, [pc, #16]	; (8003344 <__NVIC_SetPriorityGrouping+0x44>)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	60d3      	str	r3, [r2, #12]
}
 8003338:	bf00      	nop
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	e000ed00 	.word	0xe000ed00

08003348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800334c:	4b04      	ldr	r3, [pc, #16]	; (8003360 <__NVIC_GetPriorityGrouping+0x18>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	0a1b      	lsrs	r3, r3, #8
 8003352:	f003 0307 	and.w	r3, r3, #7
}
 8003356:	4618      	mov	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	e000ed00 	.word	0xe000ed00

08003364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003372:	2b00      	cmp	r3, #0
 8003374:	db0b      	blt.n	800338e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	f003 021f 	and.w	r2, r3, #31
 800337c:	4907      	ldr	r1, [pc, #28]	; (800339c <__NVIC_EnableIRQ+0x38>)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	2001      	movs	r0, #1
 8003386:	fa00 f202 	lsl.w	r2, r0, r2
 800338a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	e000e100 	.word	0xe000e100

080033a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	db12      	blt.n	80033d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	f003 021f 	and.w	r2, r3, #31
 80033b8:	490a      	ldr	r1, [pc, #40]	; (80033e4 <__NVIC_DisableIRQ+0x44>)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	2001      	movs	r0, #1
 80033c2:	fa00 f202 	lsl.w	r2, r0, r2
 80033c6:	3320      	adds	r3, #32
 80033c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80033cc:	f3bf 8f4f 	dsb	sy
}
 80033d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80033d2:	f3bf 8f6f 	isb	sy
}
 80033d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000e100 	.word	0xe000e100

080033e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	6039      	str	r1, [r7, #0]
 80033f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	db0a      	blt.n	8003412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	490c      	ldr	r1, [pc, #48]	; (8003434 <__NVIC_SetPriority+0x4c>)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	0112      	lsls	r2, r2, #4
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	440b      	add	r3, r1
 800340c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003410:	e00a      	b.n	8003428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	b2da      	uxtb	r2, r3
 8003416:	4908      	ldr	r1, [pc, #32]	; (8003438 <__NVIC_SetPriority+0x50>)
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	3b04      	subs	r3, #4
 8003420:	0112      	lsls	r2, r2, #4
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	440b      	add	r3, r1
 8003426:	761a      	strb	r2, [r3, #24]
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	e000e100 	.word	0xe000e100
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800343c:	b480      	push	{r7}
 800343e:	b089      	sub	sp, #36	; 0x24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f1c3 0307 	rsb	r3, r3, #7
 8003456:	2b04      	cmp	r3, #4
 8003458:	bf28      	it	cs
 800345a:	2304      	movcs	r3, #4
 800345c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3304      	adds	r3, #4
 8003462:	2b06      	cmp	r3, #6
 8003464:	d902      	bls.n	800346c <NVIC_EncodePriority+0x30>
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	3b03      	subs	r3, #3
 800346a:	e000      	b.n	800346e <NVIC_EncodePriority+0x32>
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	f04f 32ff 	mov.w	r2, #4294967295
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43da      	mvns	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	401a      	ands	r2, r3
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003484:	f04f 31ff 	mov.w	r1, #4294967295
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	fa01 f303 	lsl.w	r3, r1, r3
 800348e:	43d9      	mvns	r1, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003494:	4313      	orrs	r3, r2
         );
}
 8003496:	4618      	mov	r0, r3
 8003498:	3724      	adds	r7, #36	; 0x24
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
	...

080034a4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80034a8:	f3bf 8f4f 	dsb	sy
}
 80034ac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <__NVIC_SystemReset+0x24>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80034b6:	4904      	ldr	r1, [pc, #16]	; (80034c8 <__NVIC_SystemReset+0x24>)
 80034b8:	4b04      	ldr	r3, [pc, #16]	; (80034cc <__NVIC_SystemReset+0x28>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80034be:	f3bf 8f4f 	dsb	sy
}
 80034c2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80034c4:	bf00      	nop
 80034c6:	e7fd      	b.n	80034c4 <__NVIC_SystemReset+0x20>
 80034c8:	e000ed00 	.word	0xe000ed00
 80034cc:	05fa0004 	.word	0x05fa0004

080034d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff ff11 	bl	8003300 <__NVIC_SetPriorityGrouping>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b086      	sub	sp, #24
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	4603      	mov	r3, r0
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034f8:	f7ff ff26 	bl	8003348 <__NVIC_GetPriorityGrouping>
 80034fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	6978      	ldr	r0, [r7, #20]
 8003504:	f7ff ff9a 	bl	800343c <NVIC_EncodePriority>
 8003508:	4602      	mov	r2, r0
 800350a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350e:	4611      	mov	r1, r2
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff69 	bl	80033e8 <__NVIC_SetPriority>
}
 8003516:	bf00      	nop
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	4603      	mov	r3, r0
 8003526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff19 	bl	8003364 <__NVIC_EnableIRQ>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	4603      	mov	r3, r0
 8003542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff ff29 	bl	80033a0 <__NVIC_DisableIRQ>
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800355a:	f7ff ffa3 	bl	80034a4 <__NVIC_SystemReset>

0800355e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e00e      	b.n	800358e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	795b      	ldrb	r3, [r3, #5]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d105      	bne.n	8003586 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7fe f9ff 	bl	8001984 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e022      	b.n	80035ee <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	795b      	ldrb	r3, [r3, #5]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d101      	bne.n	80035b6 <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 80035b2:	2302      	movs	r3, #2
 80035b4:	e01b      	b.n	80035ee <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2202      	movs	r2, #2
 80035ba:	715a      	strb	r2, [r3, #5]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	791b      	ldrb	r3, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2200      	movs	r2, #0
 80035d8:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fe f9f4 	bl	80019c8 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	715a      	strb	r2, [r3, #5]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b087      	sub	sp, #28
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003602:	2300      	movs	r3, #0
 8003604:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2202      	movs	r2, #2
 800360a:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	e00a      	b.n	8003638 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	441a      	add	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6812      	ldr	r2, [r2, #0]
 8003630:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	3301      	adds	r3, #1
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	429a      	cmp	r2, r3
 800363e:	d3f0      	bcc.n	8003622 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800364e:	693b      	ldr	r3, [r7, #16]
}
 8003650:	4618      	mov	r0, r3
 8003652:	371c      	adds	r7, #28
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_CRC_GetState>:
  * @brief  Return the CRC handle state.
  * @param  hcrc CRC handle
  * @retval HAL state
  */
HAL_CRC_StateTypeDef HAL_CRC_GetState(CRC_HandleTypeDef *hcrc)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Return CRC handle state */
  return hcrc->State;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	795b      	ldrb	r3, [r3, #5]
 8003668:	b2db      	uxtb	r3, r3
}
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
	...

08003678 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003684:	f7ff f896 	bl	80027b4 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e099      	b.n	80037c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0201 	bic.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036b4:	e00f      	b.n	80036d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036b6:	f7ff f87d 	bl	80027b4 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b05      	cmp	r3, #5
 80036c2:	d908      	bls.n	80036d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2203      	movs	r2, #3
 80036ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e078      	b.n	80037c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e8      	bne.n	80036b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	4b38      	ldr	r3, [pc, #224]	; (80037d0 <HAL_DMA_Init+0x158>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003702:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800371a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	2b04      	cmp	r3, #4
 800372e:	d107      	bne.n	8003740 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	4313      	orrs	r3, r2
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f023 0307 	bic.w	r3, r3, #7
 8003756:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	4313      	orrs	r3, r2
 8003760:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	2b04      	cmp	r3, #4
 8003768:	d117      	bne.n	800379a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00e      	beq.n	800379a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 facd 	bl	8003d1c <DMA_CheckFifoParam>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2240      	movs	r2, #64	; 0x40
 800378c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003796:	2301      	movs	r3, #1
 8003798:	e016      	b.n	80037c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fa84 	bl	8003cb0 <DMA_CalcBaseAndBitshift>
 80037a8:	4603      	mov	r3, r0
 80037aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b0:	223f      	movs	r2, #63	; 0x3f
 80037b2:	409a      	lsls	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	f010803f 	.word	0xf010803f

080037d4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e050      	b.n	8003888 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d101      	bne.n	80037f6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80037f2:	2302      	movs	r3, #2
 80037f4:	e048      	b.n	8003888 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0201 	bic.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2200      	movs	r2, #0
 8003814:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2200      	movs	r2, #0
 800381c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2200      	movs	r2, #0
 8003824:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2200      	movs	r2, #0
 800382c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2221      	movs	r2, #33	; 0x21
 8003834:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fa3a 	bl	8003cb0 <DMA_CalcBaseAndBitshift>
 800383c:	4603      	mov	r3, r0
 800383e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003868:	223f      	movs	r2, #63	; 0x3f
 800386a:	409a      	lsls	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_DMA_Start_IT+0x26>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e040      	b.n	8003938 <HAL_DMA_Start_IT+0xa8>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d12f      	bne.n	800392a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2202      	movs	r2, #2
 80038ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f9b8 	bl	8003c54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e8:	223f      	movs	r2, #63	; 0x3f
 80038ea:	409a      	lsls	r2, r3
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0216 	orr.w	r2, r2, #22
 80038fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	d007      	beq.n	8003918 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0208 	orr.w	r2, r2, #8
 8003916:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e005      	b.n	8003936 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003932:	2302      	movs	r3, #2
 8003934:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003936:	7dfb      	ldrb	r3, [r7, #23]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800394c:	4b8e      	ldr	r3, [pc, #568]	; (8003b88 <HAL_DMA_IRQHandler+0x248>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a8e      	ldr	r2, [pc, #568]	; (8003b8c <HAL_DMA_IRQHandler+0x24c>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	0a9b      	lsrs	r3, r3, #10
 8003958:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396a:	2208      	movs	r2, #8
 800396c:	409a      	lsls	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4013      	ands	r3, r2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d01a      	beq.n	80039ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d013      	beq.n	80039ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0204 	bic.w	r2, r2, #4
 8003992:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003998:	2208      	movs	r2, #8
 800399a:	409a      	lsls	r2, r3
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	f043 0201 	orr.w	r2, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	2201      	movs	r2, #1
 80039b2:	409a      	lsls	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d012      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00b      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ce:	2201      	movs	r2, #1
 80039d0:	409a      	lsls	r2, r3
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039da:	f043 0202 	orr.w	r2, r3, #2
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e6:	2204      	movs	r2, #4
 80039e8:	409a      	lsls	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d012      	beq.n	8003a18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00b      	beq.n	8003a18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a04:	2204      	movs	r2, #4
 8003a06:	409a      	lsls	r2, r3
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a10:	f043 0204 	orr.w	r2, r3, #4
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1c:	2210      	movs	r2, #16
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d043      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d03c      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3a:	2210      	movs	r2, #16
 8003a3c:	409a      	lsls	r2, r3
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d018      	beq.n	8003a82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d108      	bne.n	8003a70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d024      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	4798      	blx	r3
 8003a6e:	e01f      	b.n	8003ab0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d01b      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	4798      	blx	r3
 8003a80:	e016      	b.n	8003ab0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d107      	bne.n	8003aa0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0208 	bic.w	r2, r2, #8
 8003a9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 808f 	beq.w	8003be0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 8087 	beq.w	8003be0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	409a      	lsls	r2, r3
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b05      	cmp	r3, #5
 8003ae8:	d136      	bne.n	8003b58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0216 	bic.w	r2, r2, #22
 8003af8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695a      	ldr	r2, [r3, #20]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d103      	bne.n	8003b1a <HAL_DMA_IRQHandler+0x1da>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d007      	beq.n	8003b2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0208 	bic.w	r2, r2, #8
 8003b28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2e:	223f      	movs	r2, #63	; 0x3f
 8003b30:	409a      	lsls	r2, r3
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d07e      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	4798      	blx	r3
        }
        return;
 8003b56:	e079      	b.n	8003c4c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d01d      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10d      	bne.n	8003b90 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d031      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	4798      	blx	r3
 8003b84:	e02c      	b.n	8003be0 <HAL_DMA_IRQHandler+0x2a0>
 8003b86:	bf00      	nop
 8003b88:	20000004 	.word	0x20000004
 8003b8c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d023      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	4798      	blx	r3
 8003ba0:	e01e      	b.n	8003be0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10f      	bne.n	8003bd0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0210 	bic.w	r2, r2, #16
 8003bbe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d032      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d022      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2205      	movs	r2, #5
 8003bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0201 	bic.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d307      	bcc.n	8003c28 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f2      	bne.n	8003c0c <HAL_DMA_IRQHandler+0x2cc>
 8003c26:	e000      	b.n	8003c2a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c28:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	4798      	blx	r3
 8003c4a:	e000      	b.n	8003c4e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c4c:	bf00      	nop
    }
  }
}
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b40      	cmp	r3, #64	; 0x40
 8003c80:	d108      	bne.n	8003c94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c92:	e007      	b.n	8003ca4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	60da      	str	r2, [r3, #12]
}
 8003ca4:	bf00      	nop
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	3b10      	subs	r3, #16
 8003cc0:	4a14      	ldr	r2, [pc, #80]	; (8003d14 <DMA_CalcBaseAndBitshift+0x64>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	091b      	lsrs	r3, r3, #4
 8003cc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cca:	4a13      	ldr	r2, [pc, #76]	; (8003d18 <DMA_CalcBaseAndBitshift+0x68>)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4413      	add	r3, r2
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d909      	bls.n	8003cf2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ce6:	f023 0303 	bic.w	r3, r3, #3
 8003cea:	1d1a      	adds	r2, r3, #4
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	659a      	str	r2, [r3, #88]	; 0x58
 8003cf0:	e007      	b.n	8003d02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cfa:	f023 0303 	bic.w	r3, r3, #3
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	aaaaaaab 	.word	0xaaaaaaab
 8003d18:	0800b728 	.word	0x0800b728

08003d1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d11f      	bne.n	8003d76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d856      	bhi.n	8003dea <DMA_CheckFifoParam+0xce>
 8003d3c:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <DMA_CheckFifoParam+0x28>)
 8003d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d42:	bf00      	nop
 8003d44:	08003d55 	.word	0x08003d55
 8003d48:	08003d67 	.word	0x08003d67
 8003d4c:	08003d55 	.word	0x08003d55
 8003d50:	08003deb 	.word	0x08003deb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d046      	beq.n	8003dee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d64:	e043      	b.n	8003dee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d6e:	d140      	bne.n	8003df2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d74:	e03d      	b.n	8003df2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d7e:	d121      	bne.n	8003dc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d837      	bhi.n	8003df6 <DMA_CheckFifoParam+0xda>
 8003d86:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <DMA_CheckFifoParam+0x70>)
 8003d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8c:	08003d9d 	.word	0x08003d9d
 8003d90:	08003da3 	.word	0x08003da3
 8003d94:	08003d9d 	.word	0x08003d9d
 8003d98:	08003db5 	.word	0x08003db5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003da0:	e030      	b.n	8003e04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d025      	beq.n	8003dfa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db2:	e022      	b.n	8003dfa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dbc:	d11f      	bne.n	8003dfe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dc2:	e01c      	b.n	8003dfe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d903      	bls.n	8003dd2 <DMA_CheckFifoParam+0xb6>
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d003      	beq.n	8003dd8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003dd0:	e018      	b.n	8003e04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd6:	e015      	b.n	8003e04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00e      	beq.n	8003e02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
      break;
 8003de8:	e00b      	b.n	8003e02 <DMA_CheckFifoParam+0xe6>
      break;
 8003dea:	bf00      	nop
 8003dec:	e00a      	b.n	8003e04 <DMA_CheckFifoParam+0xe8>
      break;
 8003dee:	bf00      	nop
 8003df0:	e008      	b.n	8003e04 <DMA_CheckFifoParam+0xe8>
      break;
 8003df2:	bf00      	nop
 8003df4:	e006      	b.n	8003e04 <DMA_CheckFifoParam+0xe8>
      break;
 8003df6:	bf00      	nop
 8003df8:	e004      	b.n	8003e04 <DMA_CheckFifoParam+0xe8>
      break;
 8003dfa:	bf00      	nop
 8003dfc:	e002      	b.n	8003e04 <DMA_CheckFifoParam+0xe8>
      break;   
 8003dfe:	bf00      	nop
 8003e00:	e000      	b.n	8003e04 <DMA_CheckFifoParam+0xe8>
      break;
 8003e02:	bf00      	nop
    }
  } 
  
  return status; 
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop

08003e14 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003e1e:	4b4b      	ldr	r3, [pc, #300]	; (8003f4c <HAL_FLASH_IRQHandler+0x138>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d020      	beq.n	8003e6c <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8003e2a:	4b49      	ldr	r3, [pc, #292]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d107      	bne.n	8003e44 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8003e34:	4b46      	ldr	r3, [pc, #280]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8003e3a:	4b45      	ldr	r3, [pc, #276]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	e00b      	b.n	8003e5c <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8003e44:	4b42      	ldr	r3, [pc, #264]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d103      	bne.n	8003e56 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8003e4e:	4b40      	ldr	r3, [pc, #256]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	607b      	str	r3, [r7, #4]
 8003e54:	e002      	b.n	8003e5c <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8003e56:	4b3e      	ldr	r3, [pc, #248]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8003e5c:	f000 f88e 	bl	8003f7c <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f881 	bl	8003f68 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003e66:	4b3a      	ldr	r3, [pc, #232]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003e6c:	4b37      	ldr	r3, [pc, #220]	; (8003f4c <HAL_FLASH_IRQHandler+0x138>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d04a      	beq.n	8003f0e <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003e78:	4b34      	ldr	r3, [pc, #208]	; (8003f4c <HAL_FLASH_IRQHandler+0x138>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8003e7e:	4b34      	ldr	r3, [pc, #208]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d12d      	bne.n	8003ee4 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8003e88:	4b31      	ldr	r3, [pc, #196]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	4a30      	ldr	r2, [pc, #192]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003e90:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8003e92:	4b2f      	ldr	r3, [pc, #188]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d015      	beq.n	8003ec6 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8003e9a:	4b2d      	ldr	r3, [pc, #180]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f857 	bl	8003f54 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8003ea6:	4b2a      	ldr	r3, [pc, #168]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	4a28      	ldr	r2, [pc, #160]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003eae:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8003eb0:	4b27      	ldr	r3, [pc, #156]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8003eb6:	4b26      	ldr	r3, [pc, #152]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003eb8:	7a1b      	ldrb	r3, [r3, #8]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f8c2 	bl	8004048 <FLASH_Erase_Sector>
 8003ec4:	e023      	b.n	8003f0e <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8003ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eca:	607b      	str	r3, [r7, #4]
 8003ecc:	4a20      	ldr	r2, [pc, #128]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003ed2:	4b1f      	ldr	r3, [pc, #124]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8003ed8:	f000 f8fe 	bl	80040d8 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f839 	bl	8003f54 <HAL_FLASH_EndOfOperationCallback>
 8003ee2:	e014      	b.n	8003f0e <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8003ee4:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d107      	bne.n	8003efe <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8003eee:	f000 f8f3 	bl	80040d8 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8003ef2:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f82c 	bl	8003f54 <HAL_FLASH_EndOfOperationCallback>
 8003efc:	e004      	b.n	8003f08 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8003efe:	4b14      	ldr	r3, [pc, #80]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 f826 	bl	8003f54 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003f08:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8003f0e:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d114      	bne.n	8003f42 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8003f18:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <HAL_FLASH_IRQHandler+0x138>)
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	4a0b      	ldr	r2, [pc, #44]	; (8003f4c <HAL_FLASH_IRQHandler+0x138>)
 8003f1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f22:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8003f24:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <HAL_FLASH_IRQHandler+0x138>)
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	4a08      	ldr	r2, [pc, #32]	; (8003f4c <HAL_FLASH_IRQHandler+0x138>)
 8003f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f2e:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8003f30:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <HAL_FLASH_IRQHandler+0x138>)
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	4a05      	ldr	r2, [pc, #20]	; (8003f4c <HAL_FLASH_IRQHandler+0x138>)
 8003f36:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003f3a:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8003f3c:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <HAL_FLASH_IRQHandler+0x13c>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	761a      	strb	r2, [r3, #24]
  }
}
 8003f42:	bf00      	nop
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40023c00 	.word	0x40023c00
 8003f50:	20000760 	.word	0x20000760

08003f54 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003f80:	4b2f      	ldr	r3, [pc, #188]	; (8004040 <FLASH_SetErrorCode+0xc4>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003f8c:	4b2d      	ldr	r3, [pc, #180]	; (8004044 <FLASH_SetErrorCode+0xc8>)
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f043 0310 	orr.w	r3, r3, #16
 8003f94:	4a2b      	ldr	r2, [pc, #172]	; (8004044 <FLASH_SetErrorCode+0xc8>)
 8003f96:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003f98:	4b29      	ldr	r3, [pc, #164]	; (8004040 <FLASH_SetErrorCode+0xc4>)
 8003f9a:	2210      	movs	r2, #16
 8003f9c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003f9e:	4b28      	ldr	r3, [pc, #160]	; (8004040 <FLASH_SetErrorCode+0xc4>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d008      	beq.n	8003fbc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003faa:	4b26      	ldr	r3, [pc, #152]	; (8004044 <FLASH_SetErrorCode+0xc8>)
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f043 0308 	orr.w	r3, r3, #8
 8003fb2:	4a24      	ldr	r2, [pc, #144]	; (8004044 <FLASH_SetErrorCode+0xc8>)
 8003fb4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003fb6:	4b22      	ldr	r3, [pc, #136]	; (8004040 <FLASH_SetErrorCode+0xc4>)
 8003fb8:	2220      	movs	r2, #32
 8003fba:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003fbc:	4b20      	ldr	r3, [pc, #128]	; (8004040 <FLASH_SetErrorCode+0xc4>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003fc8:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <FLASH_SetErrorCode+0xc8>)
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	f043 0304 	orr.w	r3, r3, #4
 8003fd0:	4a1c      	ldr	r2, [pc, #112]	; (8004044 <FLASH_SetErrorCode+0xc8>)
 8003fd2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003fd4:	4b1a      	ldr	r3, [pc, #104]	; (8004040 <FLASH_SetErrorCode+0xc4>)
 8003fd6:	2240      	movs	r2, #64	; 0x40
 8003fd8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003fda:	4b19      	ldr	r3, [pc, #100]	; (8004040 <FLASH_SetErrorCode+0xc4>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d008      	beq.n	8003ff8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003fe6:	4b17      	ldr	r3, [pc, #92]	; (8004044 <FLASH_SetErrorCode+0xc8>)
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f043 0302 	orr.w	r3, r3, #2
 8003fee:	4a15      	ldr	r2, [pc, #84]	; (8004044 <FLASH_SetErrorCode+0xc8>)
 8003ff0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003ff2:	4b13      	ldr	r3, [pc, #76]	; (8004040 <FLASH_SetErrorCode+0xc4>)
 8003ff4:	2280      	movs	r2, #128	; 0x80
 8003ff6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003ff8:	4b11      	ldr	r3, [pc, #68]	; (8004040 <FLASH_SetErrorCode+0xc4>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d009      	beq.n	8004018 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004004:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <FLASH_SetErrorCode+0xc8>)
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	4a0d      	ldr	r2, [pc, #52]	; (8004044 <FLASH_SetErrorCode+0xc8>)
 800400e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <FLASH_SetErrorCode+0xc4>)
 8004012:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004016:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004018:	4b09      	ldr	r3, [pc, #36]	; (8004040 <FLASH_SetErrorCode+0xc4>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004024:	4b07      	ldr	r3, [pc, #28]	; (8004044 <FLASH_SetErrorCode+0xc8>)
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	f043 0320 	orr.w	r3, r3, #32
 800402c:	4a05      	ldr	r2, [pc, #20]	; (8004044 <FLASH_SetErrorCode+0xc8>)
 800402e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004030:	4b03      	ldr	r3, [pc, #12]	; (8004040 <FLASH_SetErrorCode+0xc4>)
 8004032:	2202      	movs	r2, #2
 8004034:	60da      	str	r2, [r3, #12]
  }
}
 8004036:	bf00      	nop
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40023c00 	.word	0x40023c00
 8004044:	20000760 	.word	0x20000760

08004048 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	e010      	b.n	8004086 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d103      	bne.n	8004072 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800406a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	e009      	b.n	8004086 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d103      	bne.n	8004080 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	e002      	b.n	8004086 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004080:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004084:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004086:	4b13      	ldr	r3, [pc, #76]	; (80040d4 <FLASH_Erase_Sector+0x8c>)
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	4a12      	ldr	r2, [pc, #72]	; (80040d4 <FLASH_Erase_Sector+0x8c>)
 800408c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004090:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004092:	4b10      	ldr	r3, [pc, #64]	; (80040d4 <FLASH_Erase_Sector+0x8c>)
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	490f      	ldr	r1, [pc, #60]	; (80040d4 <FLASH_Erase_Sector+0x8c>)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800409e:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <FLASH_Erase_Sector+0x8c>)
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	4a0c      	ldr	r2, [pc, #48]	; (80040d4 <FLASH_Erase_Sector+0x8c>)
 80040a4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80040a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80040aa:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <FLASH_Erase_Sector+0x8c>)
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4313      	orrs	r3, r2
 80040b4:	4a07      	ldr	r2, [pc, #28]	; (80040d4 <FLASH_Erase_Sector+0x8c>)
 80040b6:	f043 0302 	orr.w	r3, r3, #2
 80040ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <FLASH_Erase_Sector+0x8c>)
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	4a04      	ldr	r2, [pc, #16]	; (80040d4 <FLASH_Erase_Sector+0x8c>)
 80040c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c6:	6113      	str	r3, [r2, #16]
}
 80040c8:	bf00      	nop
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	40023c00 	.word	0x40023c00

080040d8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80040dc:	4b20      	ldr	r3, [pc, #128]	; (8004160 <FLASH_FlushCaches+0x88>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d017      	beq.n	8004118 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80040e8:	4b1d      	ldr	r3, [pc, #116]	; (8004160 <FLASH_FlushCaches+0x88>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1c      	ldr	r2, [pc, #112]	; (8004160 <FLASH_FlushCaches+0x88>)
 80040ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040f2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80040f4:	4b1a      	ldr	r3, [pc, #104]	; (8004160 <FLASH_FlushCaches+0x88>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a19      	ldr	r2, [pc, #100]	; (8004160 <FLASH_FlushCaches+0x88>)
 80040fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	4b17      	ldr	r3, [pc, #92]	; (8004160 <FLASH_FlushCaches+0x88>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a16      	ldr	r2, [pc, #88]	; (8004160 <FLASH_FlushCaches+0x88>)
 8004106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800410a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800410c:	4b14      	ldr	r3, [pc, #80]	; (8004160 <FLASH_FlushCaches+0x88>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a13      	ldr	r2, [pc, #76]	; (8004160 <FLASH_FlushCaches+0x88>)
 8004112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004116:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004118:	4b11      	ldr	r3, [pc, #68]	; (8004160 <FLASH_FlushCaches+0x88>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004120:	2b00      	cmp	r3, #0
 8004122:	d017      	beq.n	8004154 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004124:	4b0e      	ldr	r3, [pc, #56]	; (8004160 <FLASH_FlushCaches+0x88>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a0d      	ldr	r2, [pc, #52]	; (8004160 <FLASH_FlushCaches+0x88>)
 800412a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800412e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <FLASH_FlushCaches+0x88>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a0a      	ldr	r2, [pc, #40]	; (8004160 <FLASH_FlushCaches+0x88>)
 8004136:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800413a:	6013      	str	r3, [r2, #0]
 800413c:	4b08      	ldr	r3, [pc, #32]	; (8004160 <FLASH_FlushCaches+0x88>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a07      	ldr	r2, [pc, #28]	; (8004160 <FLASH_FlushCaches+0x88>)
 8004142:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004146:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <FLASH_FlushCaches+0x88>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a04      	ldr	r2, [pc, #16]	; (8004160 <FLASH_FlushCaches+0x88>)
 800414e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004152:	6013      	str	r3, [r2, #0]
  }
}
 8004154:	bf00      	nop
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40023c00 	.word	0x40023c00

08004164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004164:	b480      	push	{r7}
 8004166:	b089      	sub	sp, #36	; 0x24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004172:	2300      	movs	r3, #0
 8004174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004176:	2300      	movs	r3, #0
 8004178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	e159      	b.n	8004434 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004180:	2201      	movs	r2, #1
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4013      	ands	r3, r2
 8004192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	429a      	cmp	r2, r3
 800419a:	f040 8148 	bne.w	800442e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d005      	beq.n	80041b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d130      	bne.n	8004218 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	2203      	movs	r2, #3
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43db      	mvns	r3, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4013      	ands	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041ec:	2201      	movs	r2, #1
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	43db      	mvns	r3, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4013      	ands	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 0201 	and.w	r2, r3, #1
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4313      	orrs	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f003 0303 	and.w	r3, r3, #3
 8004220:	2b03      	cmp	r3, #3
 8004222:	d017      	beq.n	8004254 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	2203      	movs	r2, #3
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	43db      	mvns	r3, r3
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4013      	ands	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4313      	orrs	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d123      	bne.n	80042a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	08da      	lsrs	r2, r3, #3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3208      	adds	r2, #8
 8004268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800426c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	220f      	movs	r2, #15
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	43db      	mvns	r3, r3
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4013      	ands	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4313      	orrs	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	08da      	lsrs	r2, r3, #3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3208      	adds	r2, #8
 80042a2:	69b9      	ldr	r1, [r7, #24]
 80042a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	2203      	movs	r2, #3
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	43db      	mvns	r3, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4013      	ands	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 0203 	and.w	r2, r3, #3
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80a2 	beq.w	800442e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	4b57      	ldr	r3, [pc, #348]	; (800444c <HAL_GPIO_Init+0x2e8>)
 80042f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f2:	4a56      	ldr	r2, [pc, #344]	; (800444c <HAL_GPIO_Init+0x2e8>)
 80042f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042f8:	6453      	str	r3, [r2, #68]	; 0x44
 80042fa:	4b54      	ldr	r3, [pc, #336]	; (800444c <HAL_GPIO_Init+0x2e8>)
 80042fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004306:	4a52      	ldr	r2, [pc, #328]	; (8004450 <HAL_GPIO_Init+0x2ec>)
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	089b      	lsrs	r3, r3, #2
 800430c:	3302      	adds	r3, #2
 800430e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	220f      	movs	r2, #15
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	43db      	mvns	r3, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4013      	ands	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a49      	ldr	r2, [pc, #292]	; (8004454 <HAL_GPIO_Init+0x2f0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d019      	beq.n	8004366 <HAL_GPIO_Init+0x202>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a48      	ldr	r2, [pc, #288]	; (8004458 <HAL_GPIO_Init+0x2f4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d013      	beq.n	8004362 <HAL_GPIO_Init+0x1fe>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a47      	ldr	r2, [pc, #284]	; (800445c <HAL_GPIO_Init+0x2f8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00d      	beq.n	800435e <HAL_GPIO_Init+0x1fa>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a46      	ldr	r2, [pc, #280]	; (8004460 <HAL_GPIO_Init+0x2fc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d007      	beq.n	800435a <HAL_GPIO_Init+0x1f6>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a45      	ldr	r2, [pc, #276]	; (8004464 <HAL_GPIO_Init+0x300>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d101      	bne.n	8004356 <HAL_GPIO_Init+0x1f2>
 8004352:	2304      	movs	r3, #4
 8004354:	e008      	b.n	8004368 <HAL_GPIO_Init+0x204>
 8004356:	2307      	movs	r3, #7
 8004358:	e006      	b.n	8004368 <HAL_GPIO_Init+0x204>
 800435a:	2303      	movs	r3, #3
 800435c:	e004      	b.n	8004368 <HAL_GPIO_Init+0x204>
 800435e:	2302      	movs	r3, #2
 8004360:	e002      	b.n	8004368 <HAL_GPIO_Init+0x204>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <HAL_GPIO_Init+0x204>
 8004366:	2300      	movs	r3, #0
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	f002 0203 	and.w	r2, r2, #3
 800436e:	0092      	lsls	r2, r2, #2
 8004370:	4093      	lsls	r3, r2
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	4313      	orrs	r3, r2
 8004376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004378:	4935      	ldr	r1, [pc, #212]	; (8004450 <HAL_GPIO_Init+0x2ec>)
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	089b      	lsrs	r3, r3, #2
 800437e:	3302      	adds	r3, #2
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004386:	4b38      	ldr	r3, [pc, #224]	; (8004468 <HAL_GPIO_Init+0x304>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	43db      	mvns	r3, r3
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4013      	ands	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043aa:	4a2f      	ldr	r2, [pc, #188]	; (8004468 <HAL_GPIO_Init+0x304>)
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043b0:	4b2d      	ldr	r3, [pc, #180]	; (8004468 <HAL_GPIO_Init+0x304>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	43db      	mvns	r3, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4013      	ands	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043d4:	4a24      	ldr	r2, [pc, #144]	; (8004468 <HAL_GPIO_Init+0x304>)
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043da:	4b23      	ldr	r3, [pc, #140]	; (8004468 <HAL_GPIO_Init+0x304>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	43db      	mvns	r3, r3
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	4013      	ands	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043fe:	4a1a      	ldr	r2, [pc, #104]	; (8004468 <HAL_GPIO_Init+0x304>)
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004404:	4b18      	ldr	r3, [pc, #96]	; (8004468 <HAL_GPIO_Init+0x304>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	43db      	mvns	r3, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4013      	ands	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004428:	4a0f      	ldr	r2, [pc, #60]	; (8004468 <HAL_GPIO_Init+0x304>)
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	3301      	adds	r3, #1
 8004432:	61fb      	str	r3, [r7, #28]
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	2b0f      	cmp	r3, #15
 8004438:	f67f aea2 	bls.w	8004180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800443c:	bf00      	nop
 800443e:	bf00      	nop
 8004440:	3724      	adds	r7, #36	; 0x24
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800
 8004450:	40013800 	.word	0x40013800
 8004454:	40020000 	.word	0x40020000
 8004458:	40020400 	.word	0x40020400
 800445c:	40020800 	.word	0x40020800
 8004460:	40020c00 	.word	0x40020c00
 8004464:	40021000 	.word	0x40021000
 8004468:	40013c00 	.word	0x40013c00

0800446c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004476:	2300      	movs	r3, #0
 8004478:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800447e:	2300      	movs	r3, #0
 8004480:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	e0bb      	b.n	8004600 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004488:	2201      	movs	r2, #1
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4013      	ands	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	429a      	cmp	r2, r3
 80044a0:	f040 80ab 	bne.w	80045fa <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80044a4:	4a5c      	ldr	r2, [pc, #368]	; (8004618 <HAL_GPIO_DeInit+0x1ac>)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	089b      	lsrs	r3, r3, #2
 80044aa:	3302      	adds	r3, #2
 80044ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	220f      	movs	r2, #15
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	4013      	ands	r3, r2
 80044c4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a54      	ldr	r2, [pc, #336]	; (800461c <HAL_GPIO_DeInit+0x1b0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d019      	beq.n	8004502 <HAL_GPIO_DeInit+0x96>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a53      	ldr	r2, [pc, #332]	; (8004620 <HAL_GPIO_DeInit+0x1b4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d013      	beq.n	80044fe <HAL_GPIO_DeInit+0x92>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a52      	ldr	r2, [pc, #328]	; (8004624 <HAL_GPIO_DeInit+0x1b8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00d      	beq.n	80044fa <HAL_GPIO_DeInit+0x8e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a51      	ldr	r2, [pc, #324]	; (8004628 <HAL_GPIO_DeInit+0x1bc>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d007      	beq.n	80044f6 <HAL_GPIO_DeInit+0x8a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a50      	ldr	r2, [pc, #320]	; (800462c <HAL_GPIO_DeInit+0x1c0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d101      	bne.n	80044f2 <HAL_GPIO_DeInit+0x86>
 80044ee:	2304      	movs	r3, #4
 80044f0:	e008      	b.n	8004504 <HAL_GPIO_DeInit+0x98>
 80044f2:	2307      	movs	r3, #7
 80044f4:	e006      	b.n	8004504 <HAL_GPIO_DeInit+0x98>
 80044f6:	2303      	movs	r3, #3
 80044f8:	e004      	b.n	8004504 <HAL_GPIO_DeInit+0x98>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e002      	b.n	8004504 <HAL_GPIO_DeInit+0x98>
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <HAL_GPIO_DeInit+0x98>
 8004502:	2300      	movs	r3, #0
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	f002 0203 	and.w	r2, r2, #3
 800450a:	0092      	lsls	r2, r2, #2
 800450c:	4093      	lsls	r3, r2
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	429a      	cmp	r2, r3
 8004512:	d132      	bne.n	800457a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004514:	4b46      	ldr	r3, [pc, #280]	; (8004630 <HAL_GPIO_DeInit+0x1c4>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	43db      	mvns	r3, r3
 800451c:	4944      	ldr	r1, [pc, #272]	; (8004630 <HAL_GPIO_DeInit+0x1c4>)
 800451e:	4013      	ands	r3, r2
 8004520:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004522:	4b43      	ldr	r3, [pc, #268]	; (8004630 <HAL_GPIO_DeInit+0x1c4>)
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	43db      	mvns	r3, r3
 800452a:	4941      	ldr	r1, [pc, #260]	; (8004630 <HAL_GPIO_DeInit+0x1c4>)
 800452c:	4013      	ands	r3, r2
 800452e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004530:	4b3f      	ldr	r3, [pc, #252]	; (8004630 <HAL_GPIO_DeInit+0x1c4>)
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	43db      	mvns	r3, r3
 8004538:	493d      	ldr	r1, [pc, #244]	; (8004630 <HAL_GPIO_DeInit+0x1c4>)
 800453a:	4013      	ands	r3, r2
 800453c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800453e:	4b3c      	ldr	r3, [pc, #240]	; (8004630 <HAL_GPIO_DeInit+0x1c4>)
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	43db      	mvns	r3, r3
 8004546:	493a      	ldr	r1, [pc, #232]	; (8004630 <HAL_GPIO_DeInit+0x1c4>)
 8004548:	4013      	ands	r3, r2
 800454a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	220f      	movs	r2, #15
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800455c:	4a2e      	ldr	r2, [pc, #184]	; (8004618 <HAL_GPIO_DeInit+0x1ac>)
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	089b      	lsrs	r3, r3, #2
 8004562:	3302      	adds	r3, #2
 8004564:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	43da      	mvns	r2, r3
 800456c:	482a      	ldr	r0, [pc, #168]	; (8004618 <HAL_GPIO_DeInit+0x1ac>)
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	089b      	lsrs	r3, r3, #2
 8004572:	400a      	ands	r2, r1
 8004574:	3302      	adds	r3, #2
 8004576:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	2103      	movs	r1, #3
 8004584:	fa01 f303 	lsl.w	r3, r1, r3
 8004588:	43db      	mvns	r3, r3
 800458a:	401a      	ands	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	08da      	lsrs	r2, r3, #3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3208      	adds	r2, #8
 8004598:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	220f      	movs	r2, #15
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43db      	mvns	r3, r3
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	08d2      	lsrs	r2, r2, #3
 80045b0:	4019      	ands	r1, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3208      	adds	r2, #8
 80045b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	2103      	movs	r1, #3
 80045c4:	fa01 f303 	lsl.w	r3, r1, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	401a      	ands	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	2101      	movs	r1, #1
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	fa01 f303 	lsl.w	r3, r1, r3
 80045dc:	43db      	mvns	r3, r3
 80045de:	401a      	ands	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	2103      	movs	r1, #3
 80045ee:	fa01 f303 	lsl.w	r3, r1, r3
 80045f2:	43db      	mvns	r3, r3
 80045f4:	401a      	ands	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	3301      	adds	r3, #1
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2b0f      	cmp	r3, #15
 8004604:	f67f af40 	bls.w	8004488 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004608:	bf00      	nop
 800460a:	bf00      	nop
 800460c:	371c      	adds	r7, #28
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40013800 	.word	0x40013800
 800461c:	40020000 	.word	0x40020000
 8004620:	40020400 	.word	0x40020400
 8004624:	40020800 	.word	0x40020800
 8004628:	40020c00 	.word	0x40020c00
 800462c:	40021000 	.word	0x40021000
 8004630:	40013c00 	.word	0x40013c00

08004634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	807b      	strh	r3, [r7, #2]
 8004640:	4613      	mov	r3, r2
 8004642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004644:	787b      	ldrb	r3, [r7, #1]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004650:	e003      	b.n	800465a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004652:	887b      	ldrh	r3, [r7, #2]
 8004654:	041a      	lsls	r2, r3, #16
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	619a      	str	r2, [r3, #24]
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800466c:	4b06      	ldr	r3, [pc, #24]	; (8004688 <HAL_PWR_PVD_IRQHandler+0x20>)
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004678:	f000 f808 	bl	800468c <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800467c:	4b02      	ldr	r3, [pc, #8]	; (8004688 <HAL_PWR_PVD_IRQHandler+0x20>)
 800467e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004682:	615a      	str	r2, [r3, #20]
  }
}
 8004684:	bf00      	nop
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40013c00 	.word	0x40013c00

0800468c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8004690:	bf00      	nop
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e267      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d075      	beq.n	80047a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046ba:	4b88      	ldr	r3, [pc, #544]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 030c 	and.w	r3, r3, #12
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d00c      	beq.n	80046e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046c6:	4b85      	ldr	r3, [pc, #532]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d112      	bne.n	80046f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046d2:	4b82      	ldr	r3, [pc, #520]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046de:	d10b      	bne.n	80046f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e0:	4b7e      	ldr	r3, [pc, #504]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d05b      	beq.n	80047a4 <HAL_RCC_OscConfig+0x108>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d157      	bne.n	80047a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e242      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004700:	d106      	bne.n	8004710 <HAL_RCC_OscConfig+0x74>
 8004702:	4b76      	ldr	r3, [pc, #472]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a75      	ldr	r2, [pc, #468]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	e01d      	b.n	800474c <HAL_RCC_OscConfig+0xb0>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004718:	d10c      	bne.n	8004734 <HAL_RCC_OscConfig+0x98>
 800471a:	4b70      	ldr	r3, [pc, #448]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a6f      	ldr	r2, [pc, #444]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	4b6d      	ldr	r3, [pc, #436]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a6c      	ldr	r2, [pc, #432]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 800472c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	e00b      	b.n	800474c <HAL_RCC_OscConfig+0xb0>
 8004734:	4b69      	ldr	r3, [pc, #420]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a68      	ldr	r2, [pc, #416]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 800473a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	4b66      	ldr	r3, [pc, #408]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a65      	ldr	r2, [pc, #404]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800474a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d013      	beq.n	800477c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004754:	f7fe f82e 	bl	80027b4 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800475c:	f7fe f82a 	bl	80027b4 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b64      	cmp	r3, #100	; 0x64
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e207      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476e:	4b5b      	ldr	r3, [pc, #364]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCC_OscConfig+0xc0>
 800477a:	e014      	b.n	80047a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477c:	f7fe f81a 	bl	80027b4 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004784:	f7fe f816 	bl	80027b4 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b64      	cmp	r3, #100	; 0x64
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e1f3      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004796:	4b51      	ldr	r3, [pc, #324]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f0      	bne.n	8004784 <HAL_RCC_OscConfig+0xe8>
 80047a2:	e000      	b.n	80047a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d063      	beq.n	800487a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047b2:	4b4a      	ldr	r3, [pc, #296]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00b      	beq.n	80047d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047be:	4b47      	ldr	r3, [pc, #284]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d11c      	bne.n	8004804 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ca:	4b44      	ldr	r3, [pc, #272]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d116      	bne.n	8004804 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d6:	4b41      	ldr	r3, [pc, #260]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d005      	beq.n	80047ee <HAL_RCC_OscConfig+0x152>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d001      	beq.n	80047ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e1c7      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ee:	4b3b      	ldr	r3, [pc, #236]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	4937      	ldr	r1, [pc, #220]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004802:	e03a      	b.n	800487a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d020      	beq.n	800484e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800480c:	4b34      	ldr	r3, [pc, #208]	; (80048e0 <HAL_RCC_OscConfig+0x244>)
 800480e:	2201      	movs	r2, #1
 8004810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004812:	f7fd ffcf 	bl	80027b4 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800481a:	f7fd ffcb 	bl	80027b4 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e1a8      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800482c:	4b2b      	ldr	r3, [pc, #172]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0f0      	beq.n	800481a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004838:	4b28      	ldr	r3, [pc, #160]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	4925      	ldr	r1, [pc, #148]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004848:	4313      	orrs	r3, r2
 800484a:	600b      	str	r3, [r1, #0]
 800484c:	e015      	b.n	800487a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800484e:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <HAL_RCC_OscConfig+0x244>)
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7fd ffae 	bl	80027b4 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800485c:	f7fd ffaa 	bl	80027b4 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e187      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800486e:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d036      	beq.n	80048f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d016      	beq.n	80048bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800488e:	4b15      	ldr	r3, [pc, #84]	; (80048e4 <HAL_RCC_OscConfig+0x248>)
 8004890:	2201      	movs	r2, #1
 8004892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004894:	f7fd ff8e 	bl	80027b4 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800489c:	f7fd ff8a 	bl	80027b4 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e167      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ae:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <HAL_RCC_OscConfig+0x240>)
 80048b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f0      	beq.n	800489c <HAL_RCC_OscConfig+0x200>
 80048ba:	e01b      	b.n	80048f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048bc:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <HAL_RCC_OscConfig+0x248>)
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c2:	f7fd ff77 	bl	80027b4 <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048c8:	e00e      	b.n	80048e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ca:	f7fd ff73 	bl	80027b4 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d907      	bls.n	80048e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e150      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
 80048dc:	40023800 	.word	0x40023800
 80048e0:	42470000 	.word	0x42470000
 80048e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e8:	4b88      	ldr	r3, [pc, #544]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 80048ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1ea      	bne.n	80048ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 8097 	beq.w	8004a30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004902:	2300      	movs	r3, #0
 8004904:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004906:	4b81      	ldr	r3, [pc, #516]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10f      	bne.n	8004932 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004912:	2300      	movs	r3, #0
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	4b7d      	ldr	r3, [pc, #500]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	4a7c      	ldr	r2, [pc, #496]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 800491c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004920:	6413      	str	r3, [r2, #64]	; 0x40
 8004922:	4b7a      	ldr	r3, [pc, #488]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492a:	60bb      	str	r3, [r7, #8]
 800492c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004932:	4b77      	ldr	r3, [pc, #476]	; (8004b10 <HAL_RCC_OscConfig+0x474>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d118      	bne.n	8004970 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800493e:	4b74      	ldr	r3, [pc, #464]	; (8004b10 <HAL_RCC_OscConfig+0x474>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a73      	ldr	r2, [pc, #460]	; (8004b10 <HAL_RCC_OscConfig+0x474>)
 8004944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800494a:	f7fd ff33 	bl	80027b4 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004952:	f7fd ff2f 	bl	80027b4 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e10c      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004964:	4b6a      	ldr	r3, [pc, #424]	; (8004b10 <HAL_RCC_OscConfig+0x474>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d106      	bne.n	8004986 <HAL_RCC_OscConfig+0x2ea>
 8004978:	4b64      	ldr	r3, [pc, #400]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 800497a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497c:	4a63      	ldr	r2, [pc, #396]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 800497e:	f043 0301 	orr.w	r3, r3, #1
 8004982:	6713      	str	r3, [r2, #112]	; 0x70
 8004984:	e01c      	b.n	80049c0 <HAL_RCC_OscConfig+0x324>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b05      	cmp	r3, #5
 800498c:	d10c      	bne.n	80049a8 <HAL_RCC_OscConfig+0x30c>
 800498e:	4b5f      	ldr	r3, [pc, #380]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004992:	4a5e      	ldr	r2, [pc, #376]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004994:	f043 0304 	orr.w	r3, r3, #4
 8004998:	6713      	str	r3, [r2, #112]	; 0x70
 800499a:	4b5c      	ldr	r3, [pc, #368]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 800499c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499e:	4a5b      	ldr	r2, [pc, #364]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	6713      	str	r3, [r2, #112]	; 0x70
 80049a6:	e00b      	b.n	80049c0 <HAL_RCC_OscConfig+0x324>
 80049a8:	4b58      	ldr	r3, [pc, #352]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 80049aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ac:	4a57      	ldr	r2, [pc, #348]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	6713      	str	r3, [r2, #112]	; 0x70
 80049b4:	4b55      	ldr	r3, [pc, #340]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 80049b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b8:	4a54      	ldr	r2, [pc, #336]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 80049ba:	f023 0304 	bic.w	r3, r3, #4
 80049be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d015      	beq.n	80049f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c8:	f7fd fef4 	bl	80027b4 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ce:	e00a      	b.n	80049e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d0:	f7fd fef0 	bl	80027b4 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f241 3288 	movw	r2, #5000	; 0x1388
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e0cb      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e6:	4b49      	ldr	r3, [pc, #292]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0ee      	beq.n	80049d0 <HAL_RCC_OscConfig+0x334>
 80049f2:	e014      	b.n	8004a1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f4:	f7fd fede 	bl	80027b4 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fa:	e00a      	b.n	8004a12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049fc:	f7fd feda 	bl	80027b4 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e0b5      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a12:	4b3e      	ldr	r3, [pc, #248]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1ee      	bne.n	80049fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a1e:	7dfb      	ldrb	r3, [r7, #23]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d105      	bne.n	8004a30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a24:	4b39      	ldr	r3, [pc, #228]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	4a38      	ldr	r2, [pc, #224]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004a2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 80a1 	beq.w	8004b7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a3a:	4b34      	ldr	r3, [pc, #208]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d05c      	beq.n	8004b00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d141      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a4e:	4b31      	ldr	r3, [pc, #196]	; (8004b14 <HAL_RCC_OscConfig+0x478>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a54:	f7fd feae 	bl	80027b4 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a5c:	f7fd feaa 	bl	80027b4 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e087      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a6e:	4b27      	ldr	r3, [pc, #156]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69da      	ldr	r2, [r3, #28]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	019b      	lsls	r3, r3, #6
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a90:	085b      	lsrs	r3, r3, #1
 8004a92:	3b01      	subs	r3, #1
 8004a94:	041b      	lsls	r3, r3, #16
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	061b      	lsls	r3, r3, #24
 8004a9e:	491b      	ldr	r1, [pc, #108]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aa4:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <HAL_RCC_OscConfig+0x478>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aaa:	f7fd fe83 	bl	80027b4 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab2:	f7fd fe7f 	bl	80027b4 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e05c      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac4:	4b11      	ldr	r3, [pc, #68]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f0      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x416>
 8004ad0:	e054      	b.n	8004b7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad2:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <HAL_RCC_OscConfig+0x478>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad8:	f7fd fe6c 	bl	80027b4 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae0:	f7fd fe68 	bl	80027b4 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e045      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af2:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <HAL_RCC_OscConfig+0x470>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f0      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x444>
 8004afe:	e03d      	b.n	8004b7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d107      	bne.n	8004b18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e038      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	40007000 	.word	0x40007000
 8004b14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b18:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <HAL_RCC_OscConfig+0x4ec>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d028      	beq.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d121      	bne.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d11a      	bne.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b48:	4013      	ands	r3, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d111      	bne.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	085b      	lsrs	r3, r3, #1
 8004b60:	3b01      	subs	r3, #1
 8004b62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d107      	bne.n	8004b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e000      	b.n	8004b7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40023800 	.word	0x40023800

08004b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0cc      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba0:	4b68      	ldr	r3, [pc, #416]	; (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d90c      	bls.n	8004bc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bae:	4b65      	ldr	r3, [pc, #404]	; (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb6:	4b63      	ldr	r3, [pc, #396]	; (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d001      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0b8      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d020      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004be0:	4b59      	ldr	r3, [pc, #356]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	4a58      	ldr	r2, [pc, #352]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004be6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bf8:	4b53      	ldr	r3, [pc, #332]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	4a52      	ldr	r2, [pc, #328]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c04:	4b50      	ldr	r3, [pc, #320]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	494d      	ldr	r1, [pc, #308]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d044      	beq.n	8004cac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d107      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2a:	4b47      	ldr	r3, [pc, #284]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d119      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e07f      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d003      	beq.n	8004c4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d107      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4a:	4b3f      	ldr	r3, [pc, #252]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e06f      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5a:	4b3b      	ldr	r3, [pc, #236]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e067      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c6a:	4b37      	ldr	r3, [pc, #220]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f023 0203 	bic.w	r2, r3, #3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	4934      	ldr	r1, [pc, #208]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c7c:	f7fd fd9a 	bl	80027b4 <HAL_GetTick>
 8004c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c82:	e00a      	b.n	8004c9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c84:	f7fd fd96 	bl	80027b4 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e04f      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9a:	4b2b      	ldr	r3, [pc, #172]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 020c 	and.w	r2, r3, #12
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d1eb      	bne.n	8004c84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cac:	4b25      	ldr	r3, [pc, #148]	; (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d20c      	bcs.n	8004cd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cba:	4b22      	ldr	r3, [pc, #136]	; (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc2:	4b20      	ldr	r3, [pc, #128]	; (8004d44 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e032      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce0:	4b19      	ldr	r3, [pc, #100]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	4916      	ldr	r1, [pc, #88]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d009      	beq.n	8004d12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cfe:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	490e      	ldr	r1, [pc, #56]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d12:	f000 f821 	bl	8004d58 <HAL_RCC_GetSysClockFreq>
 8004d16:	4602      	mov	r2, r0
 8004d18:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	091b      	lsrs	r3, r3, #4
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	490a      	ldr	r1, [pc, #40]	; (8004d4c <HAL_RCC_ClockConfig+0x1c0>)
 8004d24:	5ccb      	ldrb	r3, [r1, r3]
 8004d26:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2a:	4a09      	ldr	r2, [pc, #36]	; (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d2e:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fd f9ba 	bl	80020ac <HAL_InitTick>

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	40023c00 	.word	0x40023c00
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	0800b710 	.word	0x0800b710
 8004d50:	20000004 	.word	0x20000004
 8004d54:	20000008 	.word	0x20000008

08004d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d5c:	b094      	sub	sp, #80	; 0x50
 8004d5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	647b      	str	r3, [r7, #68]	; 0x44
 8004d64:	2300      	movs	r3, #0
 8004d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d68:	2300      	movs	r3, #0
 8004d6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d70:	4b79      	ldr	r3, [pc, #484]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 030c 	and.w	r3, r3, #12
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d00d      	beq.n	8004d98 <HAL_RCC_GetSysClockFreq+0x40>
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	f200 80e1 	bhi.w	8004f44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <HAL_RCC_GetSysClockFreq+0x34>
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d003      	beq.n	8004d92 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d8a:	e0db      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d8c:	4b73      	ldr	r3, [pc, #460]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d90:	e0db      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d92:	4b73      	ldr	r3, [pc, #460]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d96:	e0d8      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d98:	4b6f      	ldr	r3, [pc, #444]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004da0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004da2:	4b6d      	ldr	r3, [pc, #436]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d063      	beq.n	8004e76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dae:	4b6a      	ldr	r3, [pc, #424]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	099b      	lsrs	r3, r3, #6
 8004db4:	2200      	movs	r2, #0
 8004db6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004db8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc0:	633b      	str	r3, [r7, #48]	; 0x30
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004dca:	4622      	mov	r2, r4
 8004dcc:	462b      	mov	r3, r5
 8004dce:	f04f 0000 	mov.w	r0, #0
 8004dd2:	f04f 0100 	mov.w	r1, #0
 8004dd6:	0159      	lsls	r1, r3, #5
 8004dd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ddc:	0150      	lsls	r0, r2, #5
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4621      	mov	r1, r4
 8004de4:	1a51      	subs	r1, r2, r1
 8004de6:	6139      	str	r1, [r7, #16]
 8004de8:	4629      	mov	r1, r5
 8004dea:	eb63 0301 	sbc.w	r3, r3, r1
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dfc:	4659      	mov	r1, fp
 8004dfe:	018b      	lsls	r3, r1, #6
 8004e00:	4651      	mov	r1, sl
 8004e02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e06:	4651      	mov	r1, sl
 8004e08:	018a      	lsls	r2, r1, #6
 8004e0a:	4651      	mov	r1, sl
 8004e0c:	ebb2 0801 	subs.w	r8, r2, r1
 8004e10:	4659      	mov	r1, fp
 8004e12:	eb63 0901 	sbc.w	r9, r3, r1
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e2a:	4690      	mov	r8, r2
 8004e2c:	4699      	mov	r9, r3
 8004e2e:	4623      	mov	r3, r4
 8004e30:	eb18 0303 	adds.w	r3, r8, r3
 8004e34:	60bb      	str	r3, [r7, #8]
 8004e36:	462b      	mov	r3, r5
 8004e38:	eb49 0303 	adc.w	r3, r9, r3
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	024b      	lsls	r3, r1, #9
 8004e4e:	4621      	mov	r1, r4
 8004e50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e54:	4621      	mov	r1, r4
 8004e56:	024a      	lsls	r2, r1, #9
 8004e58:	4610      	mov	r0, r2
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e5e:	2200      	movs	r2, #0
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e68:	f7fb f9ba 	bl	80001e0 <__aeabi_uldivmod>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4613      	mov	r3, r2
 8004e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e74:	e058      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e76:	4b38      	ldr	r3, [pc, #224]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	099b      	lsrs	r3, r3, #6
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	4618      	mov	r0, r3
 8004e80:	4611      	mov	r1, r2
 8004e82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e86:	623b      	str	r3, [r7, #32]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e90:	4642      	mov	r2, r8
 8004e92:	464b      	mov	r3, r9
 8004e94:	f04f 0000 	mov.w	r0, #0
 8004e98:	f04f 0100 	mov.w	r1, #0
 8004e9c:	0159      	lsls	r1, r3, #5
 8004e9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ea2:	0150      	lsls	r0, r2, #5
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4641      	mov	r1, r8
 8004eaa:	ebb2 0a01 	subs.w	sl, r2, r1
 8004eae:	4649      	mov	r1, r9
 8004eb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ec0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ec4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ec8:	ebb2 040a 	subs.w	r4, r2, sl
 8004ecc:	eb63 050b 	sbc.w	r5, r3, fp
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	f04f 0300 	mov.w	r3, #0
 8004ed8:	00eb      	lsls	r3, r5, #3
 8004eda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ede:	00e2      	lsls	r2, r4, #3
 8004ee0:	4614      	mov	r4, r2
 8004ee2:	461d      	mov	r5, r3
 8004ee4:	4643      	mov	r3, r8
 8004ee6:	18e3      	adds	r3, r4, r3
 8004ee8:	603b      	str	r3, [r7, #0]
 8004eea:	464b      	mov	r3, r9
 8004eec:	eb45 0303 	adc.w	r3, r5, r3
 8004ef0:	607b      	str	r3, [r7, #4]
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	f04f 0300 	mov.w	r3, #0
 8004efa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004efe:	4629      	mov	r1, r5
 8004f00:	028b      	lsls	r3, r1, #10
 8004f02:	4621      	mov	r1, r4
 8004f04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f08:	4621      	mov	r1, r4
 8004f0a:	028a      	lsls	r2, r1, #10
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f12:	2200      	movs	r2, #0
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	61fa      	str	r2, [r7, #28]
 8004f18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f1c:	f7fb f960 	bl	80001e0 <__aeabi_uldivmod>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4613      	mov	r3, r2
 8004f26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f28:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	0c1b      	lsrs	r3, r3, #16
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	3301      	adds	r3, #1
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f42:	e002      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f44:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3750      	adds	r7, #80	; 0x50
 8004f50:	46bd      	mov	sp, r7
 8004f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f56:	bf00      	nop
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	00f42400 	.word	0x00f42400
 8004f60:	007a1200 	.word	0x007a1200

08004f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f68:	4b03      	ldr	r3, [pc, #12]	; (8004f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	20000004 	.word	0x20000004

08004f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f80:	f7ff fff0 	bl	8004f64 <HAL_RCC_GetHCLKFreq>
 8004f84:	4602      	mov	r2, r0
 8004f86:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	0a9b      	lsrs	r3, r3, #10
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	4903      	ldr	r1, [pc, #12]	; (8004fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f92:	5ccb      	ldrb	r3, [r1, r3]
 8004f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	0800b720 	.word	0x0800b720

08004fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fa8:	f7ff ffdc 	bl	8004f64 <HAL_RCC_GetHCLKFreq>
 8004fac:	4602      	mov	r2, r0
 8004fae:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	0b5b      	lsrs	r3, r3, #13
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	4903      	ldr	r1, [pc, #12]	; (8004fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fba:	5ccb      	ldrb	r3, [r1, r3]
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	0800b720 	.word	0x0800b720

08004fcc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	220f      	movs	r2, #15
 8004fda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fdc:	4b12      	ldr	r3, [pc, #72]	; (8005028 <HAL_RCC_GetClockConfig+0x5c>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 0203 	and.w	r2, r3, #3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004fe8:	4b0f      	ldr	r3, [pc, #60]	; (8005028 <HAL_RCC_GetClockConfig+0x5c>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ff4:	4b0c      	ldr	r3, [pc, #48]	; (8005028 <HAL_RCC_GetClockConfig+0x5c>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005000:	4b09      	ldr	r3, [pc, #36]	; (8005028 <HAL_RCC_GetClockConfig+0x5c>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	08db      	lsrs	r3, r3, #3
 8005006:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800500e:	4b07      	ldr	r3, [pc, #28]	; (800502c <HAL_RCC_GetClockConfig+0x60>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0207 	and.w	r2, r3, #7
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	601a      	str	r2, [r3, #0]
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40023800 	.word	0x40023800
 800502c:	40023c00 	.word	0x40023c00

08005030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e04c      	b.n	80050dc <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d111      	bne.n	8005072 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fc10 	bl	800587c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005060:	2b00      	cmp	r3, #0
 8005062:	d102      	bne.n	800506a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a1f      	ldr	r2, [pc, #124]	; (80050e4 <HAL_TIM_Base_Init+0xb4>)
 8005068:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2202      	movs	r2, #2
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3304      	adds	r3, #4
 8005082:	4619      	mov	r1, r3
 8005084:	4610      	mov	r0, r2
 8005086:	f000 fadf 	bl	8005648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	08002325 	.word	0x08002325

080050e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d001      	beq.n	8005100 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e044      	b.n	800518a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0201 	orr.w	r2, r2, #1
 8005116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a1e      	ldr	r2, [pc, #120]	; (8005198 <HAL_TIM_Base_Start_IT+0xb0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d018      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x6c>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512a:	d013      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x6c>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a1a      	ldr	r2, [pc, #104]	; (800519c <HAL_TIM_Base_Start_IT+0xb4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00e      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x6c>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a19      	ldr	r2, [pc, #100]	; (80051a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d009      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x6c>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a17      	ldr	r2, [pc, #92]	; (80051a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d004      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x6c>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a16      	ldr	r2, [pc, #88]	; (80051a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d111      	bne.n	8005178 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b06      	cmp	r3, #6
 8005164:	d010      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0201 	orr.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005176:	e007      	b.n	8005188 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40010000 	.word	0x40010000
 800519c:	40000400 	.word	0x40000400
 80051a0:	40000800 	.word	0x40000800
 80051a4:	40000c00 	.word	0x40000c00
 80051a8:	40014000 	.word	0x40014000

080051ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d128      	bne.n	8005214 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d121      	bne.n	8005214 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0202 	mvn.w	r2, #2
 80051d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d005      	beq.n	80051fa <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	4798      	blx	r3
 80051f8:	e009      	b.n	800520e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f003 0304 	and.w	r3, r3, #4
 800521e:	2b04      	cmp	r3, #4
 8005220:	d128      	bne.n	8005274 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b04      	cmp	r3, #4
 800522e:	d121      	bne.n	8005274 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0204 	mvn.w	r2, #4
 8005238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2202      	movs	r2, #2
 800523e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800524a:	2b00      	cmp	r3, #0
 800524c:	d005      	beq.n	800525a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	4798      	blx	r3
 8005258:	e009      	b.n	800526e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0308 	and.w	r3, r3, #8
 800527e:	2b08      	cmp	r3, #8
 8005280:	d128      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0308 	and.w	r3, r3, #8
 800528c:	2b08      	cmp	r3, #8
 800528e:	d121      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0208 	mvn.w	r2, #8
 8005298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2204      	movs	r2, #4
 800529e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d005      	beq.n	80052ba <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	4798      	blx	r3
 80052b8:	e009      	b.n	80052ce <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	2b10      	cmp	r3, #16
 80052e0:	d128      	bne.n	8005334 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	d121      	bne.n	8005334 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0210 	mvn.w	r2, #16
 80052f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2208      	movs	r2, #8
 80052fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800530a:	2b00      	cmp	r3, #0
 800530c:	d005      	beq.n	800531a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	4798      	blx	r3
 8005318:	e009      	b.n	800532e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b01      	cmp	r3, #1
 8005340:	d110      	bne.n	8005364 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b01      	cmp	r3, #1
 800534e:	d109      	bne.n	8005364 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0201 	mvn.w	r2, #1
 8005358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536e:	2b80      	cmp	r3, #128	; 0x80
 8005370:	d110      	bne.n	8005394 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537c:	2b80      	cmp	r3, #128	; 0x80
 800537e:	d109      	bne.n	8005394 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539e:	2b40      	cmp	r3, #64	; 0x40
 80053a0:	d110      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ac:	2b40      	cmp	r3, #64	; 0x40
 80053ae:	d109      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b20      	cmp	r3, #32
 80053d0:	d110      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b20      	cmp	r3, #32
 80053de:	d109      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0220 	mvn.w	r2, #32
 80053e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053f4:	bf00      	nop
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005406:	2300      	movs	r3, #0
 8005408:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <HAL_TIM_ConfigClockSource+0x1c>
 8005414:	2302      	movs	r3, #2
 8005416:	e0b4      	b.n	8005582 <HAL_TIM_ConfigClockSource+0x186>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800543e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005450:	d03e      	beq.n	80054d0 <HAL_TIM_ConfigClockSource+0xd4>
 8005452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005456:	f200 8087 	bhi.w	8005568 <HAL_TIM_ConfigClockSource+0x16c>
 800545a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545e:	f000 8086 	beq.w	800556e <HAL_TIM_ConfigClockSource+0x172>
 8005462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005466:	d87f      	bhi.n	8005568 <HAL_TIM_ConfigClockSource+0x16c>
 8005468:	2b70      	cmp	r3, #112	; 0x70
 800546a:	d01a      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0xa6>
 800546c:	2b70      	cmp	r3, #112	; 0x70
 800546e:	d87b      	bhi.n	8005568 <HAL_TIM_ConfigClockSource+0x16c>
 8005470:	2b60      	cmp	r3, #96	; 0x60
 8005472:	d050      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x11a>
 8005474:	2b60      	cmp	r3, #96	; 0x60
 8005476:	d877      	bhi.n	8005568 <HAL_TIM_ConfigClockSource+0x16c>
 8005478:	2b50      	cmp	r3, #80	; 0x50
 800547a:	d03c      	beq.n	80054f6 <HAL_TIM_ConfigClockSource+0xfa>
 800547c:	2b50      	cmp	r3, #80	; 0x50
 800547e:	d873      	bhi.n	8005568 <HAL_TIM_ConfigClockSource+0x16c>
 8005480:	2b40      	cmp	r3, #64	; 0x40
 8005482:	d058      	beq.n	8005536 <HAL_TIM_ConfigClockSource+0x13a>
 8005484:	2b40      	cmp	r3, #64	; 0x40
 8005486:	d86f      	bhi.n	8005568 <HAL_TIM_ConfigClockSource+0x16c>
 8005488:	2b30      	cmp	r3, #48	; 0x30
 800548a:	d064      	beq.n	8005556 <HAL_TIM_ConfigClockSource+0x15a>
 800548c:	2b30      	cmp	r3, #48	; 0x30
 800548e:	d86b      	bhi.n	8005568 <HAL_TIM_ConfigClockSource+0x16c>
 8005490:	2b20      	cmp	r3, #32
 8005492:	d060      	beq.n	8005556 <HAL_TIM_ConfigClockSource+0x15a>
 8005494:	2b20      	cmp	r3, #32
 8005496:	d867      	bhi.n	8005568 <HAL_TIM_ConfigClockSource+0x16c>
 8005498:	2b00      	cmp	r3, #0
 800549a:	d05c      	beq.n	8005556 <HAL_TIM_ConfigClockSource+0x15a>
 800549c:	2b10      	cmp	r3, #16
 800549e:	d05a      	beq.n	8005556 <HAL_TIM_ConfigClockSource+0x15a>
 80054a0:	e062      	b.n	8005568 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6818      	ldr	r0, [r3, #0]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	6899      	ldr	r1, [r3, #8]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f000 f9c3 	bl	800583c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	609a      	str	r2, [r3, #8]
      break;
 80054ce:	e04f      	b.n	8005570 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6818      	ldr	r0, [r3, #0]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	6899      	ldr	r1, [r3, #8]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f000 f9ac 	bl	800583c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054f2:	609a      	str	r2, [r3, #8]
      break;
 80054f4:	e03c      	b.n	8005570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6818      	ldr	r0, [r3, #0]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6859      	ldr	r1, [r3, #4]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	461a      	mov	r2, r3
 8005504:	f000 f920 	bl	8005748 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2150      	movs	r1, #80	; 0x50
 800550e:	4618      	mov	r0, r3
 8005510:	f000 f979 	bl	8005806 <TIM_ITRx_SetConfig>
      break;
 8005514:	e02c      	b.n	8005570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	6859      	ldr	r1, [r3, #4]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	461a      	mov	r2, r3
 8005524:	f000 f93f 	bl	80057a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2160      	movs	r1, #96	; 0x60
 800552e:	4618      	mov	r0, r3
 8005530:	f000 f969 	bl	8005806 <TIM_ITRx_SetConfig>
      break;
 8005534:	e01c      	b.n	8005570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	6859      	ldr	r1, [r3, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	461a      	mov	r2, r3
 8005544:	f000 f900 	bl	8005748 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2140      	movs	r1, #64	; 0x40
 800554e:	4618      	mov	r0, r3
 8005550:	f000 f959 	bl	8005806 <TIM_ITRx_SetConfig>
      break;
 8005554:	e00c      	b.n	8005570 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4619      	mov	r1, r3
 8005560:	4610      	mov	r0, r2
 8005562:	f000 f950 	bl	8005806 <TIM_ITRx_SetConfig>
      break;
 8005566:	e003      	b.n	8005570 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	73fb      	strb	r3, [r7, #15]
      break;
 800556c:	e000      	b.n	8005570 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800556e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005580:	7bfb      	ldrb	r3, [r7, #15]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005592:	bf00      	nop
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055ba:	bf00      	nop
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  return htim->State;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005638:	b2db      	uxtb	r3, r3
}
 800563a:	4618      	mov	r0, r3
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
	...

08005648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a34      	ldr	r2, [pc, #208]	; (800572c <TIM_Base_SetConfig+0xe4>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d00f      	beq.n	8005680 <TIM_Base_SetConfig+0x38>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005666:	d00b      	beq.n	8005680 <TIM_Base_SetConfig+0x38>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a31      	ldr	r2, [pc, #196]	; (8005730 <TIM_Base_SetConfig+0xe8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d007      	beq.n	8005680 <TIM_Base_SetConfig+0x38>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a30      	ldr	r2, [pc, #192]	; (8005734 <TIM_Base_SetConfig+0xec>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d003      	beq.n	8005680 <TIM_Base_SetConfig+0x38>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a2f      	ldr	r2, [pc, #188]	; (8005738 <TIM_Base_SetConfig+0xf0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d108      	bne.n	8005692 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a25      	ldr	r2, [pc, #148]	; (800572c <TIM_Base_SetConfig+0xe4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d01b      	beq.n	80056d2 <TIM_Base_SetConfig+0x8a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a0:	d017      	beq.n	80056d2 <TIM_Base_SetConfig+0x8a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a22      	ldr	r2, [pc, #136]	; (8005730 <TIM_Base_SetConfig+0xe8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d013      	beq.n	80056d2 <TIM_Base_SetConfig+0x8a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a21      	ldr	r2, [pc, #132]	; (8005734 <TIM_Base_SetConfig+0xec>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00f      	beq.n	80056d2 <TIM_Base_SetConfig+0x8a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a20      	ldr	r2, [pc, #128]	; (8005738 <TIM_Base_SetConfig+0xf0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00b      	beq.n	80056d2 <TIM_Base_SetConfig+0x8a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a1f      	ldr	r2, [pc, #124]	; (800573c <TIM_Base_SetConfig+0xf4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d007      	beq.n	80056d2 <TIM_Base_SetConfig+0x8a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a1e      	ldr	r2, [pc, #120]	; (8005740 <TIM_Base_SetConfig+0xf8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d003      	beq.n	80056d2 <TIM_Base_SetConfig+0x8a>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a1d      	ldr	r2, [pc, #116]	; (8005744 <TIM_Base_SetConfig+0xfc>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d108      	bne.n	80056e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a08      	ldr	r2, [pc, #32]	; (800572c <TIM_Base_SetConfig+0xe4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d103      	bne.n	8005718 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	615a      	str	r2, [r3, #20]
}
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40010000 	.word	0x40010000
 8005730:	40000400 	.word	0x40000400
 8005734:	40000800 	.word	0x40000800
 8005738:	40000c00 	.word	0x40000c00
 800573c:	40014000 	.word	0x40014000
 8005740:	40014400 	.word	0x40014400
 8005744:	40014800 	.word	0x40014800

08005748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	f023 0201 	bic.w	r2, r3, #1
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f023 030a 	bic.w	r3, r3, #10
 8005784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	621a      	str	r2, [r3, #32]
}
 800579a:	bf00      	nop
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b087      	sub	sp, #28
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	f023 0210 	bic.w	r2, r3, #16
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	031b      	lsls	r3, r3, #12
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4313      	orrs	r3, r2
 80057da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	621a      	str	r2, [r3, #32]
}
 80057fa:	bf00      	nop
 80057fc:	371c      	adds	r7, #28
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005806:	b480      	push	{r7}
 8005808:	b085      	sub	sp, #20
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	f043 0307 	orr.w	r3, r3, #7
 8005828:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	609a      	str	r2, [r3, #8]
}
 8005830:	bf00      	nop
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005856:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	021a      	lsls	r2, r3, #8
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	431a      	orrs	r2, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4313      	orrs	r3, r2
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	609a      	str	r2, [r3, #8]
}
 8005870:	bf00      	nop
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a1c      	ldr	r2, [pc, #112]	; (80058f8 <TIM_ResetCallback+0x7c>)
 8005888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a1b      	ldr	r2, [pc, #108]	; (80058fc <TIM_ResetCallback+0x80>)
 8005890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a1a      	ldr	r2, [pc, #104]	; (8005900 <TIM_ResetCallback+0x84>)
 8005898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a19      	ldr	r2, [pc, #100]	; (8005904 <TIM_ResetCallback+0x88>)
 80058a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a18      	ldr	r2, [pc, #96]	; (8005908 <TIM_ResetCallback+0x8c>)
 80058a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a17      	ldr	r2, [pc, #92]	; (800590c <TIM_ResetCallback+0x90>)
 80058b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a16      	ldr	r2, [pc, #88]	; (8005910 <TIM_ResetCallback+0x94>)
 80058b8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a15      	ldr	r2, [pc, #84]	; (8005914 <TIM_ResetCallback+0x98>)
 80058c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a14      	ldr	r2, [pc, #80]	; (8005918 <TIM_ResetCallback+0x9c>)
 80058c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a13      	ldr	r2, [pc, #76]	; (800591c <TIM_ResetCallback+0xa0>)
 80058d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a12      	ldr	r2, [pc, #72]	; (8005920 <TIM_ResetCallback+0xa4>)
 80058d8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a11      	ldr	r2, [pc, #68]	; (8005924 <TIM_ResetCallback+0xa8>)
 80058e0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a10      	ldr	r2, [pc, #64]	; (8005928 <TIM_ResetCallback+0xac>)
 80058e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	08006b65 	.word	0x08006b65
 80058fc:	0800558b 	.word	0x0800558b
 8005900:	08005603 	.word	0x08005603
 8005904:	08005617 	.word	0x08005617
 8005908:	080055b3 	.word	0x080055b3
 800590c:	080055c7 	.word	0x080055c7
 8005910:	0800559f 	.word	0x0800559f
 8005914:	080055db 	.word	0x080055db
 8005918:	080055ef 	.word	0x080055ef
 800591c:	080069d1 	.word	0x080069d1
 8005920:	08005a09 	.word	0x08005a09
 8005924:	08005a1d 	.word	0x08005a1d
 8005928:	08005a31 	.word	0x08005a31

0800592c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005940:	2302      	movs	r3, #2
 8005942:	e050      	b.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1c      	ldr	r2, [pc, #112]	; (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d018      	beq.n	80059ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005990:	d013      	beq.n	80059ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a18      	ldr	r2, [pc, #96]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00e      	beq.n	80059ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a16      	ldr	r2, [pc, #88]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d009      	beq.n	80059ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a15      	ldr	r2, [pc, #84]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d004      	beq.n	80059ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a13      	ldr	r2, [pc, #76]	; (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d10c      	bne.n	80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40010000 	.word	0x40010000
 80059f8:	40000400 	.word	0x40000400
 80059fc:	40000800 	.word	0x40000800
 8005a00:	40000c00 	.word	0x40000c00
 8005a04:	40014000 	.word	0x40014000

08005a08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e04a      	b.n	8005aec <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d111      	bne.n	8005a86 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f920 	bl	8005cb0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d102      	bne.n	8005a7e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a1e      	ldr	r2, [pc, #120]	; (8005af4 <HAL_UART_Init+0xb0>)
 8005a7c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2224      	movs	r2, #36	; 0x24
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a9c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f97c 	bl	8005d9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ab2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695a      	ldr	r2, [r3, #20]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ac2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ad2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	0800249d 	.word	0x0800249d

08005af8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e029      	b.n	8005b5e <HAL_UART_DeInit+0x66>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2224      	movs	r2, #36	; 0x24
 8005b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b20:	60da      	str	r2, [r3, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  if (huart->MspDeInitCallback == NULL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d102      	bne.n	8005b30 <HAL_UART_DeInit+0x38>
  {
    huart->MspDeInitCallback = HAL_UART_MspDeInit;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a0e      	ldr	r2, [pc, #56]	; (8005b68 <HAL_UART_DeInit+0x70>)
 8005b2e:	671a      	str	r2, [r3, #112]	; 0x70
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	4798      	blx	r3
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	0800252d 	.word	0x0800252d

08005b6c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	4613      	mov	r3, r2
 8005b78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b20      	cmp	r3, #32
 8005b84:	d11d      	bne.n	8005bc2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <HAL_UART_Receive_IT+0x26>
 8005b8c:	88fb      	ldrh	r3, [r7, #6]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e016      	b.n	8005bc4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d101      	bne.n	8005ba4 <HAL_UART_Receive_IT+0x38>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	e00f      	b.n	8005bc4 <HAL_UART_Receive_IT+0x58>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	68b9      	ldr	r1, [r7, #8]
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 f8b1 	bl	8005d20 <UART_Start_Receive_IT>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	e000      	b.n	8005bc4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005bc2:	2302      	movs	r3, #2
  }
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	b2db      	uxtb	r3, r3
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a10      	ldr	r2, [pc, #64]	; (8005cfc <UART_InitCallbacksToDefault+0x4c>)
 8005cbc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a0f      	ldr	r2, [pc, #60]	; (8005d00 <UART_InitCallbacksToDefault+0x50>)
 8005cc2:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a0f      	ldr	r2, [pc, #60]	; (8005d04 <UART_InitCallbacksToDefault+0x54>)
 8005cc8:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a0e      	ldr	r2, [pc, #56]	; (8005d08 <UART_InitCallbacksToDefault+0x58>)
 8005cce:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a0e      	ldr	r2, [pc, #56]	; (8005d0c <UART_InitCallbacksToDefault+0x5c>)
 8005cd4:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a0d      	ldr	r2, [pc, #52]	; (8005d10 <UART_InitCallbacksToDefault+0x60>)
 8005cda:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a0d      	ldr	r2, [pc, #52]	; (8005d14 <UART_InitCallbacksToDefault+0x64>)
 8005ce0:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a0c      	ldr	r2, [pc, #48]	; (8005d18 <UART_InitCallbacksToDefault+0x68>)
 8005ce6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a0c      	ldr	r2, [pc, #48]	; (8005d1c <UART_InitCallbacksToDefault+0x6c>)
 8005cec:	669a      	str	r2, [r3, #104]	; 0x68

}
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	08005be1 	.word	0x08005be1
 8005d00:	08005bcd 	.word	0x08005bcd
 8005d04:	08005bf5 	.word	0x08005bf5
 8005d08:	080017a5 	.word	0x080017a5
 8005d0c:	08001705 	.word	0x08001705
 8005d10:	08005c09 	.word	0x08005c09
 8005d14:	08005c1d 	.word	0x08005c1d
 8005d18:	08005c31 	.word	0x08005c31
 8005d1c:	08005c45 	.word	0x08005c45

08005d20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	88fa      	ldrh	r2, [r7, #6]
 8005d38:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	88fa      	ldrh	r2, [r7, #6]
 8005d3e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2222      	movs	r2, #34	; 0x22
 8005d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d007      	beq.n	8005d6e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d6c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	695a      	ldr	r2, [r3, #20]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0201 	orr.w	r2, r2, #1
 8005d7c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f042 0220 	orr.w	r2, r2, #32
 8005d8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005da0:	b0c0      	sub	sp, #256	; 0x100
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db8:	68d9      	ldr	r1, [r3, #12]
 8005dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	ea40 0301 	orr.w	r3, r0, r1
 8005dc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005df4:	f021 010c 	bic.w	r1, r1, #12
 8005df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e02:	430b      	orrs	r3, r1
 8005e04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e16:	6999      	ldr	r1, [r3, #24]
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	ea40 0301 	orr.w	r3, r0, r1
 8005e22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	4b8f      	ldr	r3, [pc, #572]	; (8006068 <UART_SetConfig+0x2cc>)
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d005      	beq.n	8005e3c <UART_SetConfig+0xa0>
 8005e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	4b8d      	ldr	r3, [pc, #564]	; (800606c <UART_SetConfig+0x2d0>)
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d104      	bne.n	8005e46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e3c:	f7ff f8b2 	bl	8004fa4 <HAL_RCC_GetPCLK2Freq>
 8005e40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e44:	e003      	b.n	8005e4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e46:	f7ff f899 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8005e4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e58:	f040 810c 	bne.w	8006074 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e60:	2200      	movs	r2, #0
 8005e62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e6e:	4622      	mov	r2, r4
 8005e70:	462b      	mov	r3, r5
 8005e72:	1891      	adds	r1, r2, r2
 8005e74:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e76:	415b      	adcs	r3, r3
 8005e78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e7e:	4621      	mov	r1, r4
 8005e80:	eb12 0801 	adds.w	r8, r2, r1
 8005e84:	4629      	mov	r1, r5
 8005e86:	eb43 0901 	adc.w	r9, r3, r1
 8005e8a:	f04f 0200 	mov.w	r2, #0
 8005e8e:	f04f 0300 	mov.w	r3, #0
 8005e92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e9e:	4690      	mov	r8, r2
 8005ea0:	4699      	mov	r9, r3
 8005ea2:	4623      	mov	r3, r4
 8005ea4:	eb18 0303 	adds.w	r3, r8, r3
 8005ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005eac:	462b      	mov	r3, r5
 8005eae:	eb49 0303 	adc.w	r3, r9, r3
 8005eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ec2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ec6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005eca:	460b      	mov	r3, r1
 8005ecc:	18db      	adds	r3, r3, r3
 8005ece:	653b      	str	r3, [r7, #80]	; 0x50
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	eb42 0303 	adc.w	r3, r2, r3
 8005ed6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ed8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005edc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ee0:	f7fa f97e 	bl	80001e0 <__aeabi_uldivmod>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4b61      	ldr	r3, [pc, #388]	; (8006070 <UART_SetConfig+0x2d4>)
 8005eea:	fba3 2302 	umull	r2, r3, r3, r2
 8005eee:	095b      	lsrs	r3, r3, #5
 8005ef0:	011c      	lsls	r4, r3, #4
 8005ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005efc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f04:	4642      	mov	r2, r8
 8005f06:	464b      	mov	r3, r9
 8005f08:	1891      	adds	r1, r2, r2
 8005f0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f0c:	415b      	adcs	r3, r3
 8005f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f14:	4641      	mov	r1, r8
 8005f16:	eb12 0a01 	adds.w	sl, r2, r1
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	eb43 0b01 	adc.w	fp, r3, r1
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	f04f 0300 	mov.w	r3, #0
 8005f28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f34:	4692      	mov	sl, r2
 8005f36:	469b      	mov	fp, r3
 8005f38:	4643      	mov	r3, r8
 8005f3a:	eb1a 0303 	adds.w	r3, sl, r3
 8005f3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f42:	464b      	mov	r3, r9
 8005f44:	eb4b 0303 	adc.w	r3, fp, r3
 8005f48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f60:	460b      	mov	r3, r1
 8005f62:	18db      	adds	r3, r3, r3
 8005f64:	643b      	str	r3, [r7, #64]	; 0x40
 8005f66:	4613      	mov	r3, r2
 8005f68:	eb42 0303 	adc.w	r3, r2, r3
 8005f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f76:	f7fa f933 	bl	80001e0 <__aeabi_uldivmod>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4611      	mov	r1, r2
 8005f80:	4b3b      	ldr	r3, [pc, #236]	; (8006070 <UART_SetConfig+0x2d4>)
 8005f82:	fba3 2301 	umull	r2, r3, r3, r1
 8005f86:	095b      	lsrs	r3, r3, #5
 8005f88:	2264      	movs	r2, #100	; 0x64
 8005f8a:	fb02 f303 	mul.w	r3, r2, r3
 8005f8e:	1acb      	subs	r3, r1, r3
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f96:	4b36      	ldr	r3, [pc, #216]	; (8006070 <UART_SetConfig+0x2d4>)
 8005f98:	fba3 2302 	umull	r2, r3, r3, r2
 8005f9c:	095b      	lsrs	r3, r3, #5
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fa4:	441c      	add	r4, r3
 8005fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005fb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005fb8:	4642      	mov	r2, r8
 8005fba:	464b      	mov	r3, r9
 8005fbc:	1891      	adds	r1, r2, r2
 8005fbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fc0:	415b      	adcs	r3, r3
 8005fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fc8:	4641      	mov	r1, r8
 8005fca:	1851      	adds	r1, r2, r1
 8005fcc:	6339      	str	r1, [r7, #48]	; 0x30
 8005fce:	4649      	mov	r1, r9
 8005fd0:	414b      	adcs	r3, r1
 8005fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005fe0:	4659      	mov	r1, fp
 8005fe2:	00cb      	lsls	r3, r1, #3
 8005fe4:	4651      	mov	r1, sl
 8005fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fea:	4651      	mov	r1, sl
 8005fec:	00ca      	lsls	r2, r1, #3
 8005fee:	4610      	mov	r0, r2
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	4642      	mov	r2, r8
 8005ff6:	189b      	adds	r3, r3, r2
 8005ff8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ffc:	464b      	mov	r3, r9
 8005ffe:	460a      	mov	r2, r1
 8006000:	eb42 0303 	adc.w	r3, r2, r3
 8006004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006014:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006018:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800601c:	460b      	mov	r3, r1
 800601e:	18db      	adds	r3, r3, r3
 8006020:	62bb      	str	r3, [r7, #40]	; 0x28
 8006022:	4613      	mov	r3, r2
 8006024:	eb42 0303 	adc.w	r3, r2, r3
 8006028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800602a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800602e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006032:	f7fa f8d5 	bl	80001e0 <__aeabi_uldivmod>
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	4b0d      	ldr	r3, [pc, #52]	; (8006070 <UART_SetConfig+0x2d4>)
 800603c:	fba3 1302 	umull	r1, r3, r3, r2
 8006040:	095b      	lsrs	r3, r3, #5
 8006042:	2164      	movs	r1, #100	; 0x64
 8006044:	fb01 f303 	mul.w	r3, r1, r3
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	3332      	adds	r3, #50	; 0x32
 800604e:	4a08      	ldr	r2, [pc, #32]	; (8006070 <UART_SetConfig+0x2d4>)
 8006050:	fba2 2303 	umull	r2, r3, r2, r3
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	f003 0207 	and.w	r2, r3, #7
 800605a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4422      	add	r2, r4
 8006062:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006064:	e105      	b.n	8006272 <UART_SetConfig+0x4d6>
 8006066:	bf00      	nop
 8006068:	40011000 	.word	0x40011000
 800606c:	40011400 	.word	0x40011400
 8006070:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006074:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006078:	2200      	movs	r2, #0
 800607a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800607e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006082:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006086:	4642      	mov	r2, r8
 8006088:	464b      	mov	r3, r9
 800608a:	1891      	adds	r1, r2, r2
 800608c:	6239      	str	r1, [r7, #32]
 800608e:	415b      	adcs	r3, r3
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
 8006092:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006096:	4641      	mov	r1, r8
 8006098:	1854      	adds	r4, r2, r1
 800609a:	4649      	mov	r1, r9
 800609c:	eb43 0501 	adc.w	r5, r3, r1
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	00eb      	lsls	r3, r5, #3
 80060aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060ae:	00e2      	lsls	r2, r4, #3
 80060b0:	4614      	mov	r4, r2
 80060b2:	461d      	mov	r5, r3
 80060b4:	4643      	mov	r3, r8
 80060b6:	18e3      	adds	r3, r4, r3
 80060b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060bc:	464b      	mov	r3, r9
 80060be:	eb45 0303 	adc.w	r3, r5, r3
 80060c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060d6:	f04f 0200 	mov.w	r2, #0
 80060da:	f04f 0300 	mov.w	r3, #0
 80060de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80060e2:	4629      	mov	r1, r5
 80060e4:	008b      	lsls	r3, r1, #2
 80060e6:	4621      	mov	r1, r4
 80060e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060ec:	4621      	mov	r1, r4
 80060ee:	008a      	lsls	r2, r1, #2
 80060f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80060f4:	f7fa f874 	bl	80001e0 <__aeabi_uldivmod>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4b60      	ldr	r3, [pc, #384]	; (8006280 <UART_SetConfig+0x4e4>)
 80060fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006102:	095b      	lsrs	r3, r3, #5
 8006104:	011c      	lsls	r4, r3, #4
 8006106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800610a:	2200      	movs	r2, #0
 800610c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006110:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006114:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006118:	4642      	mov	r2, r8
 800611a:	464b      	mov	r3, r9
 800611c:	1891      	adds	r1, r2, r2
 800611e:	61b9      	str	r1, [r7, #24]
 8006120:	415b      	adcs	r3, r3
 8006122:	61fb      	str	r3, [r7, #28]
 8006124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006128:	4641      	mov	r1, r8
 800612a:	1851      	adds	r1, r2, r1
 800612c:	6139      	str	r1, [r7, #16]
 800612e:	4649      	mov	r1, r9
 8006130:	414b      	adcs	r3, r1
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	f04f 0300 	mov.w	r3, #0
 800613c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006140:	4659      	mov	r1, fp
 8006142:	00cb      	lsls	r3, r1, #3
 8006144:	4651      	mov	r1, sl
 8006146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800614a:	4651      	mov	r1, sl
 800614c:	00ca      	lsls	r2, r1, #3
 800614e:	4610      	mov	r0, r2
 8006150:	4619      	mov	r1, r3
 8006152:	4603      	mov	r3, r0
 8006154:	4642      	mov	r2, r8
 8006156:	189b      	adds	r3, r3, r2
 8006158:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800615c:	464b      	mov	r3, r9
 800615e:	460a      	mov	r2, r1
 8006160:	eb42 0303 	adc.w	r3, r2, r3
 8006164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	67bb      	str	r3, [r7, #120]	; 0x78
 8006172:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006180:	4649      	mov	r1, r9
 8006182:	008b      	lsls	r3, r1, #2
 8006184:	4641      	mov	r1, r8
 8006186:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800618a:	4641      	mov	r1, r8
 800618c:	008a      	lsls	r2, r1, #2
 800618e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006192:	f7fa f825 	bl	80001e0 <__aeabi_uldivmod>
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	4b39      	ldr	r3, [pc, #228]	; (8006280 <UART_SetConfig+0x4e4>)
 800619c:	fba3 1302 	umull	r1, r3, r3, r2
 80061a0:	095b      	lsrs	r3, r3, #5
 80061a2:	2164      	movs	r1, #100	; 0x64
 80061a4:	fb01 f303 	mul.w	r3, r1, r3
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	3332      	adds	r3, #50	; 0x32
 80061ae:	4a34      	ldr	r2, [pc, #208]	; (8006280 <UART_SetConfig+0x4e4>)
 80061b0:	fba2 2303 	umull	r2, r3, r2, r3
 80061b4:	095b      	lsrs	r3, r3, #5
 80061b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061ba:	441c      	add	r4, r3
 80061bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061c0:	2200      	movs	r2, #0
 80061c2:	673b      	str	r3, [r7, #112]	; 0x70
 80061c4:	677a      	str	r2, [r7, #116]	; 0x74
 80061c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80061ca:	4642      	mov	r2, r8
 80061cc:	464b      	mov	r3, r9
 80061ce:	1891      	adds	r1, r2, r2
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	415b      	adcs	r3, r3
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061da:	4641      	mov	r1, r8
 80061dc:	1851      	adds	r1, r2, r1
 80061de:	6039      	str	r1, [r7, #0]
 80061e0:	4649      	mov	r1, r9
 80061e2:	414b      	adcs	r3, r1
 80061e4:	607b      	str	r3, [r7, #4]
 80061e6:	f04f 0200 	mov.w	r2, #0
 80061ea:	f04f 0300 	mov.w	r3, #0
 80061ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061f2:	4659      	mov	r1, fp
 80061f4:	00cb      	lsls	r3, r1, #3
 80061f6:	4651      	mov	r1, sl
 80061f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061fc:	4651      	mov	r1, sl
 80061fe:	00ca      	lsls	r2, r1, #3
 8006200:	4610      	mov	r0, r2
 8006202:	4619      	mov	r1, r3
 8006204:	4603      	mov	r3, r0
 8006206:	4642      	mov	r2, r8
 8006208:	189b      	adds	r3, r3, r2
 800620a:	66bb      	str	r3, [r7, #104]	; 0x68
 800620c:	464b      	mov	r3, r9
 800620e:	460a      	mov	r2, r1
 8006210:	eb42 0303 	adc.w	r3, r2, r3
 8006214:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	663b      	str	r3, [r7, #96]	; 0x60
 8006220:	667a      	str	r2, [r7, #100]	; 0x64
 8006222:	f04f 0200 	mov.w	r2, #0
 8006226:	f04f 0300 	mov.w	r3, #0
 800622a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800622e:	4649      	mov	r1, r9
 8006230:	008b      	lsls	r3, r1, #2
 8006232:	4641      	mov	r1, r8
 8006234:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006238:	4641      	mov	r1, r8
 800623a:	008a      	lsls	r2, r1, #2
 800623c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006240:	f7f9 ffce 	bl	80001e0 <__aeabi_uldivmod>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4b0d      	ldr	r3, [pc, #52]	; (8006280 <UART_SetConfig+0x4e4>)
 800624a:	fba3 1302 	umull	r1, r3, r3, r2
 800624e:	095b      	lsrs	r3, r3, #5
 8006250:	2164      	movs	r1, #100	; 0x64
 8006252:	fb01 f303 	mul.w	r3, r1, r3
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	011b      	lsls	r3, r3, #4
 800625a:	3332      	adds	r3, #50	; 0x32
 800625c:	4a08      	ldr	r2, [pc, #32]	; (8006280 <UART_SetConfig+0x4e4>)
 800625e:	fba2 2303 	umull	r2, r3, r2, r3
 8006262:	095b      	lsrs	r3, r3, #5
 8006264:	f003 020f 	and.w	r2, r3, #15
 8006268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4422      	add	r2, r4
 8006270:	609a      	str	r2, [r3, #8]
}
 8006272:	bf00      	nop
 8006274:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006278:	46bd      	mov	sp, r7
 800627a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800627e:	bf00      	nop
 8006280:	51eb851f 	.word	0x51eb851f

08006284 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e025      	b.n	80062e2 <HAL_WWDG_Init+0x5e>
  assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
  assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));

#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
  /* Reset Callback pointers */
  if (hwwdg->EwiCallback == NULL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d102      	bne.n	80062a4 <HAL_WWDG_Init+0x20>
  {
    hwwdg->EwiCallback = HAL_WWDG_EarlyWakeupCallback;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a12      	ldr	r2, [pc, #72]	; (80062ec <HAL_WWDG_Init+0x68>)
 80062a2:	615a      	str	r2, [r3, #20]
  }

  if (hwwdg->MspInitCallback == NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d102      	bne.n	80062b2 <HAL_WWDG_Init+0x2e>
  {
    hwwdg->MspInitCallback = HAL_WWDG_MspInit;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a10      	ldr	r2, [pc, #64]	; (80062f0 <HAL_WWDG_Init+0x6c>)
 80062b0:	619a      	str	r2, [r3, #24]
  }

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	4798      	blx	r3
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80062c6:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	691a      	ldr	r2, [r3, #16]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	ea42 0103 	orr.w	r1, r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	0800b1a3 	.word	0x0800b1a3
 80062f0:	080025ad 	.word	0x080025ad

080062f4 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	68d2      	ldr	r2, [r2, #12]
 8006304:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800632a:	d10f      	bne.n	800634c <HAL_WWDG_IRQHandler+0x38>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b01      	cmp	r3, #1
 8006338:	d108      	bne.n	800634c <HAL_WWDG_IRQHandler+0x38>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f06f 0201 	mvn.w	r2, #1
 8006342:	609a      	str	r2, [r3, #8]

#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	4798      	blx	r3
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 800634c:	bf00      	nop
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <HAL_ADC_ErrorCallback>:
void Adc_MainFunction();
StdReturnType Adc_Init();
StdReturnType Adc_DeInit();

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]

	uint32 receivedStatus = HAL_ADC_GetError(&hadc1);
 800635c:	4818      	ldr	r0, [pc, #96]	; (80063c0 <HAL_ADC_ErrorCallback+0x6c>)
 800635e:	f7fc fe37 	bl	8002fd0 <HAL_ADC_GetError>
 8006362:	60f8      	str	r0, [r7, #12]

	switch(receivedStatus)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b04      	cmp	r3, #4
 8006368:	d824      	bhi.n	80063b4 <HAL_ADC_ErrorCallback+0x60>
 800636a:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <HAL_ADC_ErrorCallback+0x1c>)
 800636c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006370:	080063b5 	.word	0x080063b5
 8006374:	08006385 	.word	0x08006385
 8006378:	08006395 	.word	0x08006395
 800637c:	080063b5 	.word	0x080063b5
 8006380:	080063a5 	.word	0x080063a5

			break;

		case HAL_ADC_ERROR_INTERNAL:

			SystemManager_Fault.fault[ADC_ERROR_INTERNAL] = ADC_ERROR_INTERNAL;
 8006384:	4b0f      	ldr	r3, [pc, #60]	; (80063c4 <HAL_ADC_ErrorCallback+0x70>)
 8006386:	220e      	movs	r2, #14
 8006388:	639a      	str	r2, [r3, #56]	; 0x38

			Adc_DeInit();
 800638a:	f000 f839 	bl	8006400 <Adc_DeInit>
			Adc_Init();
 800638e:	f000 f841 	bl	8006414 <Adc_Init>

			break;
 8006392:	e010      	b.n	80063b6 <HAL_ADC_ErrorCallback+0x62>

		case HAL_ADC_ERROR_OVR:

			SystemManager_Fault.fault[ADC_ERROR_OVR] = ADC_ERROR_OVR;
 8006394:	4b0b      	ldr	r3, [pc, #44]	; (80063c4 <HAL_ADC_ErrorCallback+0x70>)
 8006396:	220f      	movs	r2, #15
 8006398:	63da      	str	r2, [r3, #60]	; 0x3c

			Adc_DeInit();
 800639a:	f000 f831 	bl	8006400 <Adc_DeInit>
			Adc_Init();
 800639e:	f000 f839 	bl	8006414 <Adc_Init>

			break;
 80063a2:	e008      	b.n	80063b6 <HAL_ADC_ErrorCallback+0x62>

		case HAL_ADC_ERROR_DMA:

			SystemManager_Fault.fault[ADC_ERROR_DMA] = ADC_ERROR_DMA;
 80063a4:	4b07      	ldr	r3, [pc, #28]	; (80063c4 <HAL_ADC_ErrorCallback+0x70>)
 80063a6:	2210      	movs	r2, #16
 80063a8:	641a      	str	r2, [r3, #64]	; 0x40

			Adc_DeInit();
 80063aa:	f000 f829 	bl	8006400 <Adc_DeInit>
			Adc_Init();
 80063ae:	f000 f831 	bl	8006414 <Adc_Init>

			break;
 80063b2:	e000      	b.n	80063b6 <HAL_ADC_ErrorCallback+0x62>

		default:

			break;
 80063b4:	bf00      	nop

	}

}
 80063b6:	bf00      	nop
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	200000d8 	.word	0x200000d8
 80063c4:	20007a58 	.word	0x20007a58

080063c8 <Adc_MainFunction>:

void Adc_MainFunction()
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0

	uint32 statusValue = STD_LOW;
 80063ce:	2300      	movs	r3, #0
 80063d0:	607b      	str	r3, [r7, #4]

	statusValue = HAL_ADC_GetState(&hadc1);
 80063d2:	4809      	ldr	r0, [pc, #36]	; (80063f8 <Adc_MainFunction+0x30>)
 80063d4:	f7fc fdf0 	bl	8002fb8 <HAL_ADC_GetState>
 80063d8:	6078      	str	r0, [r7, #4]

	if(statusValue == HAL_ADC_STATE_ERROR)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b10      	cmp	r3, #16
 80063de:	d102      	bne.n	80063e6 <Adc_MainFunction+0x1e>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 80063e0:	4805      	ldr	r0, [pc, #20]	; (80063f8 <Adc_MainFunction+0x30>)
 80063e2:	f7ff ffb7 	bl	8006354 <HAL_ADC_ErrorCallback>

		/* do nothing */

	}

	HAL_ADC_Start_DMA(&hadc1, Adc_ChannelOne_Buffer, ADC_BUFFER_LENGTH);
 80063e6:	2210      	movs	r2, #16
 80063e8:	4904      	ldr	r1, [pc, #16]	; (80063fc <Adc_MainFunction+0x34>)
 80063ea:	4803      	ldr	r0, [pc, #12]	; (80063f8 <Adc_MainFunction+0x30>)
 80063ec:	f7fc fba4 	bl	8002b38 <HAL_ADC_Start_DMA>

}
 80063f0:	bf00      	nop
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	200000d8 	.word	0x200000d8
 80063fc:	20000780 	.word	0x20000780

08006400 <Adc_DeInit>:

StdReturnType Adc_DeInit()
{
 8006400:	b580      	push	{r7, lr}
 8006402:	af00      	add	r7, sp, #0

	HAL_ADC_DeInit(&hadc1);
 8006404:	4802      	ldr	r0, [pc, #8]	; (8006410 <Adc_DeInit+0x10>)
 8006406:	f7fc fa47 	bl	8002898 <HAL_ADC_DeInit>

	return E_OK;
 800640a:	2300      	movs	r3, #0

}
 800640c:	4618      	mov	r0, r3
 800640e:	bd80      	pop	{r7, pc}
 8006410:	200000d8 	.word	0x200000d8

08006414 <Adc_Init>:

StdReturnType Adc_Init()
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 800641a:	463b      	mov	r3, r7
 800641c:	2200      	movs	r2, #0
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	605a      	str	r2, [r3, #4]
 8006422:	609a      	str	r2, [r3, #8]
 8006424:	60da      	str	r2, [r3, #12]

	hadc1.Instance = ADC1;
 8006426:	4b93      	ldr	r3, [pc, #588]	; (8006674 <Adc_Init+0x260>)
 8006428:	4a93      	ldr	r2, [pc, #588]	; (8006678 <Adc_Init+0x264>)
 800642a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800642c:	4b91      	ldr	r3, [pc, #580]	; (8006674 <Adc_Init+0x260>)
 800642e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006432:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006434:	4b8f      	ldr	r3, [pc, #572]	; (8006674 <Adc_Init+0x260>)
 8006436:	2200      	movs	r2, #0
 8006438:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800643a:	4b8e      	ldr	r3, [pc, #568]	; (8006674 <Adc_Init+0x260>)
 800643c:	2201      	movs	r2, #1
 800643e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8006440:	4b8c      	ldr	r3, [pc, #560]	; (8006674 <Adc_Init+0x260>)
 8006442:	2201      	movs	r2, #1
 8006444:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006446:	4b8b      	ldr	r3, [pc, #556]	; (8006674 <Adc_Init+0x260>)
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800644e:	4b89      	ldr	r3, [pc, #548]	; (8006674 <Adc_Init+0x260>)
 8006450:	2200      	movs	r2, #0
 8006452:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006454:	4b87      	ldr	r3, [pc, #540]	; (8006674 <Adc_Init+0x260>)
 8006456:	4a89      	ldr	r2, [pc, #548]	; (800667c <Adc_Init+0x268>)
 8006458:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800645a:	4b86      	ldr	r3, [pc, #536]	; (8006674 <Adc_Init+0x260>)
 800645c:	2200      	movs	r2, #0
 800645e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 16;
 8006460:	4b84      	ldr	r3, [pc, #528]	; (8006674 <Adc_Init+0x260>)
 8006462:	2210      	movs	r2, #16
 8006464:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8006466:	4b83      	ldr	r3, [pc, #524]	; (8006674 <Adc_Init+0x260>)
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800646e:	4b81      	ldr	r3, [pc, #516]	; (8006674 <Adc_Init+0x260>)
 8006470:	2201      	movs	r2, #1
 8006472:	615a      	str	r2, [r3, #20]

	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006474:	487f      	ldr	r0, [pc, #508]	; (8006674 <Adc_Init+0x260>)
 8006476:	f7fc f9a9 	bl	80027cc <HAL_ADC_Init>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <Adc_Init+0x72>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 8006480:	487c      	ldr	r0, [pc, #496]	; (8006674 <Adc_Init+0x260>)
 8006482:	f7ff ff67 	bl	8006354 <HAL_ADC_ErrorCallback>

		/* do nothing */

	}

	sConfig.Channel = ADC_CHANNEL_0;
 8006486:	2300      	movs	r3, #0
 8006488:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800648a:	2301      	movs	r3, #1
 800648c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800648e:	2300      	movs	r3, #0
 8006490:	60bb      	str	r3, [r7, #8]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006492:	463b      	mov	r3, r7
 8006494:	4619      	mov	r1, r3
 8006496:	4877      	ldr	r0, [pc, #476]	; (8006674 <Adc_Init+0x260>)
 8006498:	f7fc fc5c 	bl	8002d54 <HAL_ADC_ConfigChannel>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <Adc_Init+0x94>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 80064a2:	4874      	ldr	r0, [pc, #464]	; (8006674 <Adc_Init+0x260>)
 80064a4:	f7ff ff56 	bl	8006354 <HAL_ADC_ErrorCallback>
		/* do nothing */

	}


	sConfig.Channel = ADC_CHANNEL_1;
 80064a8:	2301      	movs	r3, #1
 80064aa:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 80064ac:	2302      	movs	r3, #2
 80064ae:	607b      	str	r3, [r7, #4]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80064b0:	463b      	mov	r3, r7
 80064b2:	4619      	mov	r1, r3
 80064b4:	486f      	ldr	r0, [pc, #444]	; (8006674 <Adc_Init+0x260>)
 80064b6:	f7fc fc4d 	bl	8002d54 <HAL_ADC_ConfigChannel>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <Adc_Init+0xb2>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 80064c0:	486c      	ldr	r0, [pc, #432]	; (8006674 <Adc_Init+0x260>)
 80064c2:	f7ff ff47 	bl	8006354 <HAL_ADC_ErrorCallback>
		/* do nothing */

	}


	sConfig.Channel = ADC_CHANNEL_2;
 80064c6:	2302      	movs	r3, #2
 80064c8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 80064ca:	2303      	movs	r3, #3
 80064cc:	607b      	str	r3, [r7, #4]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80064ce:	463b      	mov	r3, r7
 80064d0:	4619      	mov	r1, r3
 80064d2:	4868      	ldr	r0, [pc, #416]	; (8006674 <Adc_Init+0x260>)
 80064d4:	f7fc fc3e 	bl	8002d54 <HAL_ADC_ConfigChannel>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <Adc_Init+0xd0>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 80064de:	4865      	ldr	r0, [pc, #404]	; (8006674 <Adc_Init+0x260>)
 80064e0:	f7ff ff38 	bl	8006354 <HAL_ADC_ErrorCallback>
		/* do nothing */

	}


	sConfig.Channel = ADC_CHANNEL_3;
 80064e4:	2303      	movs	r3, #3
 80064e6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 80064e8:	2304      	movs	r3, #4
 80064ea:	607b      	str	r3, [r7, #4]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80064ec:	463b      	mov	r3, r7
 80064ee:	4619      	mov	r1, r3
 80064f0:	4860      	ldr	r0, [pc, #384]	; (8006674 <Adc_Init+0x260>)
 80064f2:	f7fc fc2f 	bl	8002d54 <HAL_ADC_ConfigChannel>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <Adc_Init+0xee>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 80064fc:	485d      	ldr	r0, [pc, #372]	; (8006674 <Adc_Init+0x260>)
 80064fe:	f7ff ff29 	bl	8006354 <HAL_ADC_ErrorCallback>
		/* do nothing */

	}


	sConfig.Channel = ADC_CHANNEL_4;
 8006502:	2304      	movs	r3, #4
 8006504:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 5;
 8006506:	2305      	movs	r3, #5
 8006508:	607b      	str	r3, [r7, #4]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800650a:	463b      	mov	r3, r7
 800650c:	4619      	mov	r1, r3
 800650e:	4859      	ldr	r0, [pc, #356]	; (8006674 <Adc_Init+0x260>)
 8006510:	f7fc fc20 	bl	8002d54 <HAL_ADC_ConfigChannel>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <Adc_Init+0x10c>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 800651a:	4856      	ldr	r0, [pc, #344]	; (8006674 <Adc_Init+0x260>)
 800651c:	f7ff ff1a 	bl	8006354 <HAL_ADC_ErrorCallback>
		/* do nothing */

	}


	sConfig.Channel = ADC_CHANNEL_5;
 8006520:	2305      	movs	r3, #5
 8006522:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 6;
 8006524:	2306      	movs	r3, #6
 8006526:	607b      	str	r3, [r7, #4]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006528:	463b      	mov	r3, r7
 800652a:	4619      	mov	r1, r3
 800652c:	4851      	ldr	r0, [pc, #324]	; (8006674 <Adc_Init+0x260>)
 800652e:	f7fc fc11 	bl	8002d54 <HAL_ADC_ConfigChannel>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <Adc_Init+0x12a>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 8006538:	484e      	ldr	r0, [pc, #312]	; (8006674 <Adc_Init+0x260>)
 800653a:	f7ff ff0b 	bl	8006354 <HAL_ADC_ErrorCallback>
		/* do nothing */

	}


	sConfig.Channel = ADC_CHANNEL_6;
 800653e:	2306      	movs	r3, #6
 8006540:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 7;
 8006542:	2307      	movs	r3, #7
 8006544:	607b      	str	r3, [r7, #4]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006546:	463b      	mov	r3, r7
 8006548:	4619      	mov	r1, r3
 800654a:	484a      	ldr	r0, [pc, #296]	; (8006674 <Adc_Init+0x260>)
 800654c:	f7fc fc02 	bl	8002d54 <HAL_ADC_ConfigChannel>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d002      	beq.n	800655c <Adc_Init+0x148>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 8006556:	4847      	ldr	r0, [pc, #284]	; (8006674 <Adc_Init+0x260>)
 8006558:	f7ff fefc 	bl	8006354 <HAL_ADC_ErrorCallback>
		/* do nothing */

	}


	sConfig.Channel = ADC_CHANNEL_7;
 800655c:	2307      	movs	r3, #7
 800655e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 8;
 8006560:	2308      	movs	r3, #8
 8006562:	607b      	str	r3, [r7, #4]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006564:	463b      	mov	r3, r7
 8006566:	4619      	mov	r1, r3
 8006568:	4842      	ldr	r0, [pc, #264]	; (8006674 <Adc_Init+0x260>)
 800656a:	f7fc fbf3 	bl	8002d54 <HAL_ADC_ConfigChannel>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <Adc_Init+0x166>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 8006574:	483f      	ldr	r0, [pc, #252]	; (8006674 <Adc_Init+0x260>)
 8006576:	f7ff feed 	bl	8006354 <HAL_ADC_ErrorCallback>
		/* do nothing */

	}


	sConfig.Channel = ADC_CHANNEL_8;
 800657a:	2308      	movs	r3, #8
 800657c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 9;
 800657e:	2309      	movs	r3, #9
 8006580:	607b      	str	r3, [r7, #4]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006582:	463b      	mov	r3, r7
 8006584:	4619      	mov	r1, r3
 8006586:	483b      	ldr	r0, [pc, #236]	; (8006674 <Adc_Init+0x260>)
 8006588:	f7fc fbe4 	bl	8002d54 <HAL_ADC_ConfigChannel>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d002      	beq.n	8006598 <Adc_Init+0x184>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 8006592:	4838      	ldr	r0, [pc, #224]	; (8006674 <Adc_Init+0x260>)
 8006594:	f7ff fede 	bl	8006354 <HAL_ADC_ErrorCallback>
		/* do nothing */

	}


	sConfig.Channel = ADC_CHANNEL_9;
 8006598:	2309      	movs	r3, #9
 800659a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 10;
 800659c:	230a      	movs	r3, #10
 800659e:	607b      	str	r3, [r7, #4]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80065a0:	463b      	mov	r3, r7
 80065a2:	4619      	mov	r1, r3
 80065a4:	4833      	ldr	r0, [pc, #204]	; (8006674 <Adc_Init+0x260>)
 80065a6:	f7fc fbd5 	bl	8002d54 <HAL_ADC_ConfigChannel>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <Adc_Init+0x1a2>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 80065b0:	4830      	ldr	r0, [pc, #192]	; (8006674 <Adc_Init+0x260>)
 80065b2:	f7ff fecf 	bl	8006354 <HAL_ADC_ErrorCallback>
		/* do nothing */

	}


	sConfig.Channel = ADC_CHANNEL_10;
 80065b6:	230a      	movs	r3, #10
 80065b8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 11;
 80065ba:	230b      	movs	r3, #11
 80065bc:	607b      	str	r3, [r7, #4]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80065be:	463b      	mov	r3, r7
 80065c0:	4619      	mov	r1, r3
 80065c2:	482c      	ldr	r0, [pc, #176]	; (8006674 <Adc_Init+0x260>)
 80065c4:	f7fc fbc6 	bl	8002d54 <HAL_ADC_ConfigChannel>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <Adc_Init+0x1c0>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 80065ce:	4829      	ldr	r0, [pc, #164]	; (8006674 <Adc_Init+0x260>)
 80065d0:	f7ff fec0 	bl	8006354 <HAL_ADC_ErrorCallback>
		/* do nothing */

	}


	sConfig.Channel = ADC_CHANNEL_11;
 80065d4:	230b      	movs	r3, #11
 80065d6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 12;
 80065d8:	230c      	movs	r3, #12
 80065da:	607b      	str	r3, [r7, #4]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80065dc:	463b      	mov	r3, r7
 80065de:	4619      	mov	r1, r3
 80065e0:	4824      	ldr	r0, [pc, #144]	; (8006674 <Adc_Init+0x260>)
 80065e2:	f7fc fbb7 	bl	8002d54 <HAL_ADC_ConfigChannel>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <Adc_Init+0x1de>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 80065ec:	4821      	ldr	r0, [pc, #132]	; (8006674 <Adc_Init+0x260>)
 80065ee:	f7ff feb1 	bl	8006354 <HAL_ADC_ErrorCallback>
		/* do nothing */

	}


	sConfig.Channel = ADC_CHANNEL_12;
 80065f2:	230c      	movs	r3, #12
 80065f4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 13;
 80065f6:	230d      	movs	r3, #13
 80065f8:	607b      	str	r3, [r7, #4]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80065fa:	463b      	mov	r3, r7
 80065fc:	4619      	mov	r1, r3
 80065fe:	481d      	ldr	r0, [pc, #116]	; (8006674 <Adc_Init+0x260>)
 8006600:	f7fc fba8 	bl	8002d54 <HAL_ADC_ConfigChannel>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <Adc_Init+0x1fc>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 800660a:	481a      	ldr	r0, [pc, #104]	; (8006674 <Adc_Init+0x260>)
 800660c:	f7ff fea2 	bl	8006354 <HAL_ADC_ErrorCallback>
		/* do nothing */

	}


	sConfig.Channel = ADC_CHANNEL_13;
 8006610:	230d      	movs	r3, #13
 8006612:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 14;
 8006614:	230e      	movs	r3, #14
 8006616:	607b      	str	r3, [r7, #4]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006618:	463b      	mov	r3, r7
 800661a:	4619      	mov	r1, r3
 800661c:	4815      	ldr	r0, [pc, #84]	; (8006674 <Adc_Init+0x260>)
 800661e:	f7fc fb99 	bl	8002d54 <HAL_ADC_ConfigChannel>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <Adc_Init+0x21a>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 8006628:	4812      	ldr	r0, [pc, #72]	; (8006674 <Adc_Init+0x260>)
 800662a:	f7ff fe93 	bl	8006354 <HAL_ADC_ErrorCallback>
		/* do nothing */

	}


	sConfig.Channel = ADC_CHANNEL_14;
 800662e:	230e      	movs	r3, #14
 8006630:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 15;
 8006632:	230f      	movs	r3, #15
 8006634:	607b      	str	r3, [r7, #4]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006636:	463b      	mov	r3, r7
 8006638:	4619      	mov	r1, r3
 800663a:	480e      	ldr	r0, [pc, #56]	; (8006674 <Adc_Init+0x260>)
 800663c:	f7fc fb8a 	bl	8002d54 <HAL_ADC_ConfigChannel>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <Adc_Init+0x238>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 8006646:	480b      	ldr	r0, [pc, #44]	; (8006674 <Adc_Init+0x260>)
 8006648:	f7ff fe84 	bl	8006354 <HAL_ADC_ErrorCallback>
		/* do nothing */

	}


	sConfig.Channel = ADC_CHANNEL_15;
 800664c:	230f      	movs	r3, #15
 800664e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 16;
 8006650:	2310      	movs	r3, #16
 8006652:	607b      	str	r3, [r7, #4]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006654:	463b      	mov	r3, r7
 8006656:	4619      	mov	r1, r3
 8006658:	4806      	ldr	r0, [pc, #24]	; (8006674 <Adc_Init+0x260>)
 800665a:	f7fc fb7b 	bl	8002d54 <HAL_ADC_ConfigChannel>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d002      	beq.n	800666a <Adc_Init+0x256>
	{

		HAL_ADC_ErrorCallback(&hadc1);
 8006664:	4803      	ldr	r0, [pc, #12]	; (8006674 <Adc_Init+0x260>)
 8006666:	f7ff fe75 	bl	8006354 <HAL_ADC_ErrorCallback>

	}



	return E_OK;
 800666a:	2300      	movs	r3, #0

}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	200000d8 	.word	0x200000d8
 8006678:	40012000 	.word	0x40012000
 800667c:	0f000001 	.word	0x0f000001

08006680 <Tim_Init>:
void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void Tim_MainFunction();

StdReturnType Tim_Init(uint8 TimerChannel)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	4603      	mov	r3, r0
 8006688:	71fb      	strb	r3, [r7, #7]

	switch(TimerChannel)
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	3b02      	subs	r3, #2
 800668e:	2b09      	cmp	r3, #9
 8006690:	f200 8155 	bhi.w	800693e <Tim_Init+0x2be>
 8006694:	a201      	add	r2, pc, #4	; (adr r2, 800669c <Tim_Init+0x1c>)
 8006696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669a:	bf00      	nop
 800669c:	080066c5 	.word	0x080066c5
 80066a0:	08006741 	.word	0x08006741
 80066a4:	080067bb 	.word	0x080067bb
 80066a8:	08006835 	.word	0x08006835
 80066ac:	0800693f 	.word	0x0800693f
 80066b0:	0800693f 	.word	0x0800693f
 80066b4:	0800693f 	.word	0x0800693f
 80066b8:	080068ab 	.word	0x080068ab
 80066bc:	0800693f 	.word	0x0800693f
 80066c0:	08006903 	.word	0x08006903
	{

		case TIMER_TWO:

			htim2.Instance = TIM2;
 80066c4:	4ba3      	ldr	r3, [pc, #652]	; (8006954 <Tim_Init+0x2d4>)
 80066c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80066ca:	601a      	str	r2, [r3, #0]
			htim2.Init.Prescaler = 10000-1;
 80066cc:	4ba1      	ldr	r3, [pc, #644]	; (8006954 <Tim_Init+0x2d4>)
 80066ce:	f242 720f 	movw	r2, #9999	; 0x270f
 80066d2:	605a      	str	r2, [r3, #4]
			htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066d4:	4b9f      	ldr	r3, [pc, #636]	; (8006954 <Tim_Init+0x2d4>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	609a      	str	r2, [r3, #8]
			htim2.Init.Period = 5000-1;
 80066da:	4b9e      	ldr	r3, [pc, #632]	; (8006954 <Tim_Init+0x2d4>)
 80066dc:	f241 3287 	movw	r2, #4999	; 0x1387
 80066e0:	60da      	str	r2, [r3, #12]
			htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066e2:	4b9c      	ldr	r3, [pc, #624]	; (8006954 <Tim_Init+0x2d4>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	611a      	str	r2, [r3, #16]
			htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066e8:	4b9a      	ldr	r3, [pc, #616]	; (8006954 <Tim_Init+0x2d4>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	619a      	str	r2, [r3, #24]

			if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80066ee:	4899      	ldr	r0, [pc, #612]	; (8006954 <Tim_Init+0x2d4>)
 80066f0:	f7fe fc9e 	bl	8005030 <HAL_TIM_Base_Init>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <Tim_Init+0x80>
			{

				HAL_TIM_ErrorCallback(&htim2);
 80066fa:	4896      	ldr	r0, [pc, #600]	; (8006954 <Tim_Init+0x2d4>)
 80066fc:	f000 f968 	bl	80069d0 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			sClockSourceConfig2.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006700:	4b95      	ldr	r3, [pc, #596]	; (8006958 <Tim_Init+0x2d8>)
 8006702:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006706:	601a      	str	r2, [r3, #0]

			if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig2) != HAL_OK)
 8006708:	4993      	ldr	r1, [pc, #588]	; (8006958 <Tim_Init+0x2d8>)
 800670a:	4892      	ldr	r0, [pc, #584]	; (8006954 <Tim_Init+0x2d4>)
 800670c:	f7fe fe76 	bl	80053fc <HAL_TIM_ConfigClockSource>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d002      	beq.n	800671c <Tim_Init+0x9c>
			{

				HAL_TIM_ErrorCallback(&htim2);
 8006716:	488f      	ldr	r0, [pc, #572]	; (8006954 <Tim_Init+0x2d4>)
 8006718:	f000 f95a 	bl	80069d0 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			sMasterConfig2.MasterOutputTrigger = TIM_TRGO_RESET;
 800671c:	4b8f      	ldr	r3, [pc, #572]	; (800695c <Tim_Init+0x2dc>)
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]
			sMasterConfig2.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006722:	4b8e      	ldr	r3, [pc, #568]	; (800695c <Tim_Init+0x2dc>)
 8006724:	2200      	movs	r2, #0
 8006726:	605a      	str	r2, [r3, #4]

			if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig2) != HAL_OK)
 8006728:	498c      	ldr	r1, [pc, #560]	; (800695c <Tim_Init+0x2dc>)
 800672a:	488a      	ldr	r0, [pc, #552]	; (8006954 <Tim_Init+0x2d4>)
 800672c:	f7ff f8fe 	bl	800592c <HAL_TIMEx_MasterConfigSynchronization>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 8105 	beq.w	8006942 <Tim_Init+0x2c2>
			{

				HAL_TIM_ErrorCallback(&htim2);
 8006738:	4886      	ldr	r0, [pc, #536]	; (8006954 <Tim_Init+0x2d4>)
 800673a:	f000 f949 	bl	80069d0 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			break;
 800673e:	e100      	b.n	8006942 <Tim_Init+0x2c2>

		case TIMER_THREE:

			htim3.Instance = TIM3;
 8006740:	4b87      	ldr	r3, [pc, #540]	; (8006960 <Tim_Init+0x2e0>)
 8006742:	4a88      	ldr	r2, [pc, #544]	; (8006964 <Tim_Init+0x2e4>)
 8006744:	601a      	str	r2, [r3, #0]
			htim3.Init.Prescaler = 10000-1;
 8006746:	4b86      	ldr	r3, [pc, #536]	; (8006960 <Tim_Init+0x2e0>)
 8006748:	f242 720f 	movw	r2, #9999	; 0x270f
 800674c:	605a      	str	r2, [r3, #4]
			htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800674e:	4b84      	ldr	r3, [pc, #528]	; (8006960 <Tim_Init+0x2e0>)
 8006750:	2200      	movs	r2, #0
 8006752:	609a      	str	r2, [r3, #8]
			htim3.Init.Period = 40000-1;
 8006754:	4b82      	ldr	r3, [pc, #520]	; (8006960 <Tim_Init+0x2e0>)
 8006756:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800675a:	60da      	str	r2, [r3, #12]
			htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800675c:	4b80      	ldr	r3, [pc, #512]	; (8006960 <Tim_Init+0x2e0>)
 800675e:	2200      	movs	r2, #0
 8006760:	611a      	str	r2, [r3, #16]
			htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006762:	4b7f      	ldr	r3, [pc, #508]	; (8006960 <Tim_Init+0x2e0>)
 8006764:	2200      	movs	r2, #0
 8006766:	619a      	str	r2, [r3, #24]

			if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006768:	487d      	ldr	r0, [pc, #500]	; (8006960 <Tim_Init+0x2e0>)
 800676a:	f7fe fc61 	bl	8005030 <HAL_TIM_Base_Init>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d002      	beq.n	800677a <Tim_Init+0xfa>
			{

				HAL_TIM_ErrorCallback(&htim3);
 8006774:	487a      	ldr	r0, [pc, #488]	; (8006960 <Tim_Init+0x2e0>)
 8006776:	f000 f92b 	bl	80069d0 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			sClockSourceConfig3.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800677a:	4b7b      	ldr	r3, [pc, #492]	; (8006968 <Tim_Init+0x2e8>)
 800677c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006780:	601a      	str	r2, [r3, #0]

			if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig3) != HAL_OK)
 8006782:	4979      	ldr	r1, [pc, #484]	; (8006968 <Tim_Init+0x2e8>)
 8006784:	4876      	ldr	r0, [pc, #472]	; (8006960 <Tim_Init+0x2e0>)
 8006786:	f7fe fe39 	bl	80053fc <HAL_TIM_ConfigClockSource>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d002      	beq.n	8006796 <Tim_Init+0x116>
			{

				HAL_TIM_ErrorCallback(&htim3);
 8006790:	4873      	ldr	r0, [pc, #460]	; (8006960 <Tim_Init+0x2e0>)
 8006792:	f000 f91d 	bl	80069d0 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			sMasterConfig3.MasterOutputTrigger = TIM_TRGO_RESET;
 8006796:	4b75      	ldr	r3, [pc, #468]	; (800696c <Tim_Init+0x2ec>)
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]
			sMasterConfig3.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800679c:	4b73      	ldr	r3, [pc, #460]	; (800696c <Tim_Init+0x2ec>)
 800679e:	2200      	movs	r2, #0
 80067a0:	605a      	str	r2, [r3, #4]

			if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig3) != HAL_OK)
 80067a2:	4972      	ldr	r1, [pc, #456]	; (800696c <Tim_Init+0x2ec>)
 80067a4:	486e      	ldr	r0, [pc, #440]	; (8006960 <Tim_Init+0x2e0>)
 80067a6:	f7ff f8c1 	bl	800592c <HAL_TIMEx_MasterConfigSynchronization>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 80ca 	beq.w	8006946 <Tim_Init+0x2c6>
			{

				HAL_TIM_ErrorCallback(&htim3);
 80067b2:	486b      	ldr	r0, [pc, #428]	; (8006960 <Tim_Init+0x2e0>)
 80067b4:	f000 f90c 	bl	80069d0 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			break;
 80067b8:	e0c5      	b.n	8006946 <Tim_Init+0x2c6>

		case TIMER_FOUR:

			htim4.Instance = TIM4;
 80067ba:	4b6d      	ldr	r3, [pc, #436]	; (8006970 <Tim_Init+0x2f0>)
 80067bc:	4a6d      	ldr	r2, [pc, #436]	; (8006974 <Tim_Init+0x2f4>)
 80067be:	601a      	str	r2, [r3, #0]
			htim4.Init.Prescaler = 10000-1;
 80067c0:	4b6b      	ldr	r3, [pc, #428]	; (8006970 <Tim_Init+0x2f0>)
 80067c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80067c6:	605a      	str	r2, [r3, #4]
			htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067c8:	4b69      	ldr	r3, [pc, #420]	; (8006970 <Tim_Init+0x2f0>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	609a      	str	r2, [r3, #8]
			htim4.Init.Period = 5000-1;
 80067ce:	4b68      	ldr	r3, [pc, #416]	; (8006970 <Tim_Init+0x2f0>)
 80067d0:	f241 3287 	movw	r2, #4999	; 0x1387
 80067d4:	60da      	str	r2, [r3, #12]
			htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067d6:	4b66      	ldr	r3, [pc, #408]	; (8006970 <Tim_Init+0x2f0>)
 80067d8:	2200      	movs	r2, #0
 80067da:	611a      	str	r2, [r3, #16]
			htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067dc:	4b64      	ldr	r3, [pc, #400]	; (8006970 <Tim_Init+0x2f0>)
 80067de:	2200      	movs	r2, #0
 80067e0:	619a      	str	r2, [r3, #24]

			if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80067e2:	4863      	ldr	r0, [pc, #396]	; (8006970 <Tim_Init+0x2f0>)
 80067e4:	f7fe fc24 	bl	8005030 <HAL_TIM_Base_Init>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <Tim_Init+0x174>
			{

				HAL_TIM_ErrorCallback(&htim4);
 80067ee:	4860      	ldr	r0, [pc, #384]	; (8006970 <Tim_Init+0x2f0>)
 80067f0:	f000 f8ee 	bl	80069d0 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			sClockSourceConfig4.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80067f4:	4b60      	ldr	r3, [pc, #384]	; (8006978 <Tim_Init+0x2f8>)
 80067f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80067fa:	601a      	str	r2, [r3, #0]

			if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig4) != HAL_OK)
 80067fc:	495e      	ldr	r1, [pc, #376]	; (8006978 <Tim_Init+0x2f8>)
 80067fe:	485c      	ldr	r0, [pc, #368]	; (8006970 <Tim_Init+0x2f0>)
 8006800:	f7fe fdfc 	bl	80053fc <HAL_TIM_ConfigClockSource>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <Tim_Init+0x190>
			{

				HAL_TIM_ErrorCallback(&htim4);
 800680a:	4859      	ldr	r0, [pc, #356]	; (8006970 <Tim_Init+0x2f0>)
 800680c:	f000 f8e0 	bl	80069d0 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			sMasterConfig4.MasterOutputTrigger = TIM_TRGO_RESET;
 8006810:	4b5a      	ldr	r3, [pc, #360]	; (800697c <Tim_Init+0x2fc>)
 8006812:	2200      	movs	r2, #0
 8006814:	601a      	str	r2, [r3, #0]
			sMasterConfig4.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006816:	4b59      	ldr	r3, [pc, #356]	; (800697c <Tim_Init+0x2fc>)
 8006818:	2200      	movs	r2, #0
 800681a:	605a      	str	r2, [r3, #4]

			if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig4) != HAL_OK)
 800681c:	4957      	ldr	r1, [pc, #348]	; (800697c <Tim_Init+0x2fc>)
 800681e:	4854      	ldr	r0, [pc, #336]	; (8006970 <Tim_Init+0x2f0>)
 8006820:	f7ff f884 	bl	800592c <HAL_TIMEx_MasterConfigSynchronization>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 808f 	beq.w	800694a <Tim_Init+0x2ca>
			{

				HAL_TIM_ErrorCallback(&htim4);
 800682c:	4850      	ldr	r0, [pc, #320]	; (8006970 <Tim_Init+0x2f0>)
 800682e:	f000 f8cf 	bl	80069d0 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			break;
 8006832:	e08a      	b.n	800694a <Tim_Init+0x2ca>

		case TIMER_FIVE:

			htim5.Instance = TIM5;
 8006834:	4b52      	ldr	r3, [pc, #328]	; (8006980 <Tim_Init+0x300>)
 8006836:	4a53      	ldr	r2, [pc, #332]	; (8006984 <Tim_Init+0x304>)
 8006838:	601a      	str	r2, [r3, #0]
			htim5.Init.Prescaler = 10000-1;
 800683a:	4b51      	ldr	r3, [pc, #324]	; (8006980 <Tim_Init+0x300>)
 800683c:	f242 720f 	movw	r2, #9999	; 0x270f
 8006840:	605a      	str	r2, [r3, #4]
			htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006842:	4b4f      	ldr	r3, [pc, #316]	; (8006980 <Tim_Init+0x300>)
 8006844:	2200      	movs	r2, #0
 8006846:	609a      	str	r2, [r3, #8]
			htim5.Init.Period = 100000-1;
 8006848:	4b4d      	ldr	r3, [pc, #308]	; (8006980 <Tim_Init+0x300>)
 800684a:	4a4f      	ldr	r2, [pc, #316]	; (8006988 <Tim_Init+0x308>)
 800684c:	60da      	str	r2, [r3, #12]
			htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800684e:	4b4c      	ldr	r3, [pc, #304]	; (8006980 <Tim_Init+0x300>)
 8006850:	2200      	movs	r2, #0
 8006852:	611a      	str	r2, [r3, #16]
			htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006854:	4b4a      	ldr	r3, [pc, #296]	; (8006980 <Tim_Init+0x300>)
 8006856:	2200      	movs	r2, #0
 8006858:	619a      	str	r2, [r3, #24]

			if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800685a:	4849      	ldr	r0, [pc, #292]	; (8006980 <Tim_Init+0x300>)
 800685c:	f7fe fbe8 	bl	8005030 <HAL_TIM_Base_Init>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d002      	beq.n	800686c <Tim_Init+0x1ec>
			{

				HAL_TIM_ErrorCallback(&htim5);
 8006866:	4846      	ldr	r0, [pc, #280]	; (8006980 <Tim_Init+0x300>)
 8006868:	f000 f8b2 	bl	80069d0 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			sClockSourceConfig5.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800686c:	4b47      	ldr	r3, [pc, #284]	; (800698c <Tim_Init+0x30c>)
 800686e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006872:	601a      	str	r2, [r3, #0]

			if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig5) != HAL_OK)
 8006874:	4945      	ldr	r1, [pc, #276]	; (800698c <Tim_Init+0x30c>)
 8006876:	4842      	ldr	r0, [pc, #264]	; (8006980 <Tim_Init+0x300>)
 8006878:	f7fe fdc0 	bl	80053fc <HAL_TIM_ConfigClockSource>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <Tim_Init+0x208>
			{

				HAL_TIM_ErrorCallback(&htim5);
 8006882:	483f      	ldr	r0, [pc, #252]	; (8006980 <Tim_Init+0x300>)
 8006884:	f000 f8a4 	bl	80069d0 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			sMasterConfig5.MasterOutputTrigger = TIM_TRGO_RESET;
 8006888:	4b41      	ldr	r3, [pc, #260]	; (8006990 <Tim_Init+0x310>)
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]
			sMasterConfig5.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800688e:	4b40      	ldr	r3, [pc, #256]	; (8006990 <Tim_Init+0x310>)
 8006890:	2200      	movs	r2, #0
 8006892:	605a      	str	r2, [r3, #4]

			if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig5) != HAL_OK)
 8006894:	493e      	ldr	r1, [pc, #248]	; (8006990 <Tim_Init+0x310>)
 8006896:	483a      	ldr	r0, [pc, #232]	; (8006980 <Tim_Init+0x300>)
 8006898:	f7ff f848 	bl	800592c <HAL_TIMEx_MasterConfigSynchronization>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d055      	beq.n	800694e <Tim_Init+0x2ce>
			{

				HAL_TIM_ErrorCallback(&htim5);
 80068a2:	4837      	ldr	r0, [pc, #220]	; (8006980 <Tim_Init+0x300>)
 80068a4:	f000 f894 	bl	80069d0 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			break;
 80068a8:	e051      	b.n	800694e <Tim_Init+0x2ce>

		case TIMER_NINE:


			htim9.Instance = TIM9;
 80068aa:	4b3a      	ldr	r3, [pc, #232]	; (8006994 <Tim_Init+0x314>)
 80068ac:	4a3a      	ldr	r2, [pc, #232]	; (8006998 <Tim_Init+0x318>)
 80068ae:	601a      	str	r2, [r3, #0]
			htim9.Init.Prescaler = 10000-1;
 80068b0:	4b38      	ldr	r3, [pc, #224]	; (8006994 <Tim_Init+0x314>)
 80068b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80068b6:	605a      	str	r2, [r3, #4]
			htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068b8:	4b36      	ldr	r3, [pc, #216]	; (8006994 <Tim_Init+0x314>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	609a      	str	r2, [r3, #8]
			htim9.Init.Period = 10000-1;
 80068be:	4b35      	ldr	r3, [pc, #212]	; (8006994 <Tim_Init+0x314>)
 80068c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80068c4:	60da      	str	r2, [r3, #12]
			htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068c6:	4b33      	ldr	r3, [pc, #204]	; (8006994 <Tim_Init+0x314>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	611a      	str	r2, [r3, #16]
			htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068cc:	4b31      	ldr	r3, [pc, #196]	; (8006994 <Tim_Init+0x314>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	619a      	str	r2, [r3, #24]

			if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80068d2:	4830      	ldr	r0, [pc, #192]	; (8006994 <Tim_Init+0x314>)
 80068d4:	f7fe fbac 	bl	8005030 <HAL_TIM_Base_Init>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <Tim_Init+0x264>
			{

				HAL_TIM_ErrorCallback(&htim9);
 80068de:	482d      	ldr	r0, [pc, #180]	; (8006994 <Tim_Init+0x314>)
 80068e0:	f000 f876 	bl	80069d0 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			sClockSourceConfig9.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80068e4:	4b2d      	ldr	r3, [pc, #180]	; (800699c <Tim_Init+0x31c>)
 80068e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80068ea:	601a      	str	r2, [r3, #0]

			if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig9) != HAL_OK)
 80068ec:	492b      	ldr	r1, [pc, #172]	; (800699c <Tim_Init+0x31c>)
 80068ee:	4829      	ldr	r0, [pc, #164]	; (8006994 <Tim_Init+0x314>)
 80068f0:	f7fe fd84 	bl	80053fc <HAL_TIM_ConfigClockSource>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d056      	beq.n	80069a8 <Tim_Init+0x328>
			{

				HAL_TIM_ErrorCallback(&htim9);
 80068fa:	4826      	ldr	r0, [pc, #152]	; (8006994 <Tim_Init+0x314>)
 80068fc:	f000 f868 	bl	80069d0 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			break;
 8006900:	e052      	b.n	80069a8 <Tim_Init+0x328>
//
//			}

		case TIMER_ELEVEN:

			htim11.Instance = TIM11;
 8006902:	4b27      	ldr	r3, [pc, #156]	; (80069a0 <Tim_Init+0x320>)
 8006904:	4a27      	ldr	r2, [pc, #156]	; (80069a4 <Tim_Init+0x324>)
 8006906:	601a      	str	r2, [r3, #0]
			htim11.Init.Prescaler = 10000-1;
 8006908:	4b25      	ldr	r3, [pc, #148]	; (80069a0 <Tim_Init+0x320>)
 800690a:	f242 720f 	movw	r2, #9999	; 0x270f
 800690e:	605a      	str	r2, [r3, #4]
			htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006910:	4b23      	ldr	r3, [pc, #140]	; (80069a0 <Tim_Init+0x320>)
 8006912:	2200      	movs	r2, #0
 8006914:	609a      	str	r2, [r3, #8]
			htim11.Init.Period = 5000-1;
 8006916:	4b22      	ldr	r3, [pc, #136]	; (80069a0 <Tim_Init+0x320>)
 8006918:	f241 3287 	movw	r2, #4999	; 0x1387
 800691c:	60da      	str	r2, [r3, #12]
			htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800691e:	4b20      	ldr	r3, [pc, #128]	; (80069a0 <Tim_Init+0x320>)
 8006920:	2200      	movs	r2, #0
 8006922:	611a      	str	r2, [r3, #16]
			htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006924:	4b1e      	ldr	r3, [pc, #120]	; (80069a0 <Tim_Init+0x320>)
 8006926:	2200      	movs	r2, #0
 8006928:	619a      	str	r2, [r3, #24]

			if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800692a:	481d      	ldr	r0, [pc, #116]	; (80069a0 <Tim_Init+0x320>)
 800692c:	f7fe fb80 	bl	8005030 <HAL_TIM_Base_Init>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d03a      	beq.n	80069ac <Tim_Init+0x32c>
			{

				HAL_TIM_ErrorCallback(&htim11);
 8006936:	481a      	ldr	r0, [pc, #104]	; (80069a0 <Tim_Init+0x320>)
 8006938:	f000 f84a 	bl	80069d0 <HAL_TIM_ErrorCallback>

				/* do nothing */

			}

			break;
 800693c:	e036      	b.n	80069ac <Tim_Init+0x32c>

		default:

			break;
 800693e:	bf00      	nop
 8006940:	e035      	b.n	80069ae <Tim_Init+0x32e>
			break;
 8006942:	bf00      	nop
 8006944:	e033      	b.n	80069ae <Tim_Init+0x32e>
			break;
 8006946:	bf00      	nop
 8006948:	e031      	b.n	80069ae <Tim_Init+0x32e>
			break;
 800694a:	bf00      	nop
 800694c:	e02f      	b.n	80069ae <Tim_Init+0x32e>
			break;
 800694e:	bf00      	nop
 8006950:	e02d      	b.n	80069ae <Tim_Init+0x32e>
 8006952:	bf00      	nop
 8006954:	20000288 	.word	0x20000288
 8006958:	200007d0 	.word	0x200007d0
 800695c:	200007e0 	.word	0x200007e0
 8006960:	2000033c 	.word	0x2000033c
 8006964:	40000400 	.word	0x40000400
 8006968:	200007e8 	.word	0x200007e8
 800696c:	200007f8 	.word	0x200007f8
 8006970:	200003f0 	.word	0x200003f0
 8006974:	40000800 	.word	0x40000800
 8006978:	20000800 	.word	0x20000800
 800697c:	20000810 	.word	0x20000810
 8006980:	200004a4 	.word	0x200004a4
 8006984:	40000c00 	.word	0x40000c00
 8006988:	0001869f 	.word	0x0001869f
 800698c:	20000818 	.word	0x20000818
 8006990:	20000828 	.word	0x20000828
 8006994:	20000558 	.word	0x20000558
 8006998:	40014000 	.word	0x40014000
 800699c:	20000830 	.word	0x20000830
 80069a0:	2000060c 	.word	0x2000060c
 80069a4:	40014800 	.word	0x40014800
			break;
 80069a8:	bf00      	nop
 80069aa:	e000      	b.n	80069ae <Tim_Init+0x32e>
			break;
 80069ac:	bf00      	nop

	}

	return E_OK;
 80069ae:	2300      	movs	r3, #0

}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <Tim_DeInit>:

StdReturnType Tim_DeInit(uint8 TimerChannel)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	4603      	mov	r3, r0
 80069c0:	71fb      	strb	r3, [r7, #7]

	return E_OK;
 80069c2:	2300      	movs	r3, #0

}
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_TIM_ErrorCallback>:

void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e0:	d109      	bne.n	80069f6 <HAL_TIM_ErrorCallback+0x26>
	{

		SystemManager_Fault.fault[TIMER2_ERROR] = TIMER2_ERROR;
 80069e2:	4b2d      	ldr	r3, [pc, #180]	; (8006a98 <HAL_TIM_ErrorCallback+0xc8>)
 80069e4:	221d      	movs	r2, #29
 80069e6:	675a      	str	r2, [r3, #116]	; 0x74

		Tim_DeInit(TIMER_TWO);
 80069e8:	2002      	movs	r0, #2
 80069ea:	f7ff ffe5 	bl	80069b8 <Tim_DeInit>
		Tim_Init(TIMER_TWO);
 80069ee:	2002      	movs	r0, #2
 80069f0:	f7ff fe46 	bl	8006680 <Tim_Init>

		/* do nothing */

	}

}
 80069f4:	e04c      	b.n	8006a90 <HAL_TIM_ErrorCallback+0xc0>
	else if(htim->Instance == TIM3)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a28      	ldr	r2, [pc, #160]	; (8006a9c <HAL_TIM_ErrorCallback+0xcc>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d109      	bne.n	8006a14 <HAL_TIM_ErrorCallback+0x44>
		SystemManager_Fault.fault[TIMER3_ERROR] = TIMER3_ERROR;
 8006a00:	4b25      	ldr	r3, [pc, #148]	; (8006a98 <HAL_TIM_ErrorCallback+0xc8>)
 8006a02:	221e      	movs	r2, #30
 8006a04:	679a      	str	r2, [r3, #120]	; 0x78
		Tim_DeInit(TIMER_THREE);
 8006a06:	2003      	movs	r0, #3
 8006a08:	f7ff ffd6 	bl	80069b8 <Tim_DeInit>
		Tim_Init(TIMER_THREE);
 8006a0c:	2003      	movs	r0, #3
 8006a0e:	f7ff fe37 	bl	8006680 <Tim_Init>
}
 8006a12:	e03d      	b.n	8006a90 <HAL_TIM_ErrorCallback+0xc0>
	else if(htim->Instance == TIM4)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a21      	ldr	r2, [pc, #132]	; (8006aa0 <HAL_TIM_ErrorCallback+0xd0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d109      	bne.n	8006a32 <HAL_TIM_ErrorCallback+0x62>
		SystemManager_Fault.fault[TIMER4_ERROR] = TIMER4_ERROR;
 8006a1e:	4b1e      	ldr	r3, [pc, #120]	; (8006a98 <HAL_TIM_ErrorCallback+0xc8>)
 8006a20:	221f      	movs	r2, #31
 8006a22:	67da      	str	r2, [r3, #124]	; 0x7c
		Tim_DeInit(TIMER_FOUR);
 8006a24:	2004      	movs	r0, #4
 8006a26:	f7ff ffc7 	bl	80069b8 <Tim_DeInit>
		Tim_Init(TIMER_FOUR);
 8006a2a:	2004      	movs	r0, #4
 8006a2c:	f7ff fe28 	bl	8006680 <Tim_Init>
}
 8006a30:	e02e      	b.n	8006a90 <HAL_TIM_ErrorCallback+0xc0>
	else if(htim->Instance == TIM5)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a1b      	ldr	r2, [pc, #108]	; (8006aa4 <HAL_TIM_ErrorCallback+0xd4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d10a      	bne.n	8006a52 <HAL_TIM_ErrorCallback+0x82>
		SystemManager_Fault.fault[TIMER5_ERROR] = TIMER5_ERROR;
 8006a3c:	4b16      	ldr	r3, [pc, #88]	; (8006a98 <HAL_TIM_ErrorCallback+0xc8>)
 8006a3e:	2220      	movs	r2, #32
 8006a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		Tim_DeInit(TIMER_FIVE);
 8006a44:	2005      	movs	r0, #5
 8006a46:	f7ff ffb7 	bl	80069b8 <Tim_DeInit>
		Tim_Init(TIMER_FIVE);
 8006a4a:	2005      	movs	r0, #5
 8006a4c:	f7ff fe18 	bl	8006680 <Tim_Init>
}
 8006a50:	e01e      	b.n	8006a90 <HAL_TIM_ErrorCallback+0xc0>
	else if(htim->Instance == TIM9)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a14      	ldr	r2, [pc, #80]	; (8006aa8 <HAL_TIM_ErrorCallback+0xd8>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d10a      	bne.n	8006a72 <HAL_TIM_ErrorCallback+0xa2>
		SystemManager_Fault.fault[TIMER9_ERROR] = TIMER9_ERROR;
 8006a5c:	4b0e      	ldr	r3, [pc, #56]	; (8006a98 <HAL_TIM_ErrorCallback+0xc8>)
 8006a5e:	2221      	movs	r2, #33	; 0x21
 8006a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		Tim_DeInit(TIMER_NINE);
 8006a64:	2009      	movs	r0, #9
 8006a66:	f7ff ffa7 	bl	80069b8 <Tim_DeInit>
		Tim_Init(TIMER_NINE);
 8006a6a:	2009      	movs	r0, #9
 8006a6c:	f7ff fe08 	bl	8006680 <Tim_Init>
}
 8006a70:	e00e      	b.n	8006a90 <HAL_TIM_ErrorCallback+0xc0>
	else if(htim->Instance == TIM11)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a0d      	ldr	r2, [pc, #52]	; (8006aac <HAL_TIM_ErrorCallback+0xdc>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d109      	bne.n	8006a90 <HAL_TIM_ErrorCallback+0xc0>
		SystemManager_Fault.fault[TIMER11_ERROR] = TIMER11_ERROR;
 8006a7c:	4b06      	ldr	r3, [pc, #24]	; (8006a98 <HAL_TIM_ErrorCallback+0xc8>)
 8006a7e:	2222      	movs	r2, #34	; 0x22
 8006a80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		Tim_DeInit(TIMER_ELEVEN);
 8006a84:	200b      	movs	r0, #11
 8006a86:	f7ff ff97 	bl	80069b8 <Tim_DeInit>
		Tim_Init(TIMER_ELEVEN);
 8006a8a:	200b      	movs	r0, #11
 8006a8c:	f7ff fdf8 	bl	8006680 <Tim_Init>
}
 8006a90:	bf00      	nop
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	20007a58 	.word	0x20007a58
 8006a9c:	40000400 	.word	0x40000400
 8006aa0:	40000800 	.word	0x40000800
 8006aa4:	40000c00 	.word	0x40000c00
 8006aa8:	40014000 	.word	0x40014000
 8006aac:	40014800 	.word	0x40014800

08006ab0 <Tim_MainFunction>:

void Tim_MainFunction()
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0

	uint32 localStateTimerTwo = HAL_TIM_Base_GetState(&htim2);
 8006ab6:	4825      	ldr	r0, [pc, #148]	; (8006b4c <Tim_MainFunction+0x9c>)
 8006ab8:	f7fe fdb7 	bl	800562a <HAL_TIM_Base_GetState>
 8006abc:	4603      	mov	r3, r0
 8006abe:	617b      	str	r3, [r7, #20]
	uint32 localStateTimerThree = HAL_TIM_Base_GetState(&htim3);
 8006ac0:	4823      	ldr	r0, [pc, #140]	; (8006b50 <Tim_MainFunction+0xa0>)
 8006ac2:	f7fe fdb2 	bl	800562a <HAL_TIM_Base_GetState>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	613b      	str	r3, [r7, #16]
	uint32 localStateTimerFour = HAL_TIM_Base_GetState(&htim4);
 8006aca:	4822      	ldr	r0, [pc, #136]	; (8006b54 <Tim_MainFunction+0xa4>)
 8006acc:	f7fe fdad 	bl	800562a <HAL_TIM_Base_GetState>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	60fb      	str	r3, [r7, #12]
	uint32 localStateTimerFive = HAL_TIM_Base_GetState(&htim5);
 8006ad4:	4820      	ldr	r0, [pc, #128]	; (8006b58 <Tim_MainFunction+0xa8>)
 8006ad6:	f7fe fda8 	bl	800562a <HAL_TIM_Base_GetState>
 8006ada:	4603      	mov	r3, r0
 8006adc:	60bb      	str	r3, [r7, #8]
	uint32 localStateTimerNine = HAL_TIM_Base_GetState(&htim9);
 8006ade:	481f      	ldr	r0, [pc, #124]	; (8006b5c <Tim_MainFunction+0xac>)
 8006ae0:	f7fe fda3 	bl	800562a <HAL_TIM_Base_GetState>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	607b      	str	r3, [r7, #4]
	uint32 localStateTimerEleven = HAL_TIM_Base_GetState(&htim11);
 8006ae8:	481d      	ldr	r0, [pc, #116]	; (8006b60 <Tim_MainFunction+0xb0>)
 8006aea:	f7fe fd9e 	bl	800562a <HAL_TIM_Base_GetState>
 8006aee:	4603      	mov	r3, r0
 8006af0:	603b      	str	r3, [r7, #0]

	if(localStateTimerTwo == HAL_TIM_STATE_ERROR)
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d103      	bne.n	8006b00 <Tim_MainFunction+0x50>
	{

		HAL_TIM_ErrorCallback(&htim2);
 8006af8:	4814      	ldr	r0, [pc, #80]	; (8006b4c <Tim_MainFunction+0x9c>)
 8006afa:	f7ff ff69 	bl	80069d0 <HAL_TIM_ErrorCallback>

		/* do nothing */

	}

}
 8006afe:	e021      	b.n	8006b44 <Tim_MainFunction+0x94>
	else if(localStateTimerThree == HAL_TIM_STATE_ERROR)
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d103      	bne.n	8006b0e <Tim_MainFunction+0x5e>
		HAL_TIM_ErrorCallback(&htim3);
 8006b06:	4812      	ldr	r0, [pc, #72]	; (8006b50 <Tim_MainFunction+0xa0>)
 8006b08:	f7ff ff62 	bl	80069d0 <HAL_TIM_ErrorCallback>
}
 8006b0c:	e01a      	b.n	8006b44 <Tim_MainFunction+0x94>
	else if(localStateTimerFour == HAL_TIM_STATE_ERROR)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d103      	bne.n	8006b1c <Tim_MainFunction+0x6c>
		HAL_TIM_ErrorCallback(&htim4);
 8006b14:	480f      	ldr	r0, [pc, #60]	; (8006b54 <Tim_MainFunction+0xa4>)
 8006b16:	f7ff ff5b 	bl	80069d0 <HAL_TIM_ErrorCallback>
}
 8006b1a:	e013      	b.n	8006b44 <Tim_MainFunction+0x94>
	else if(localStateTimerFive == HAL_TIM_STATE_ERROR)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d103      	bne.n	8006b2a <Tim_MainFunction+0x7a>
		HAL_TIM_ErrorCallback(&htim5);
 8006b22:	480d      	ldr	r0, [pc, #52]	; (8006b58 <Tim_MainFunction+0xa8>)
 8006b24:	f7ff ff54 	bl	80069d0 <HAL_TIM_ErrorCallback>
}
 8006b28:	e00c      	b.n	8006b44 <Tim_MainFunction+0x94>
	else if(localStateTimerNine == HAL_TIM_STATE_ERROR)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d103      	bne.n	8006b38 <Tim_MainFunction+0x88>
		HAL_TIM_ErrorCallback(&htim9);
 8006b30:	480a      	ldr	r0, [pc, #40]	; (8006b5c <Tim_MainFunction+0xac>)
 8006b32:	f7ff ff4d 	bl	80069d0 <HAL_TIM_ErrorCallback>
}
 8006b36:	e005      	b.n	8006b44 <Tim_MainFunction+0x94>
	else if(localStateTimerEleven == HAL_TIM_STATE_ERROR)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	d102      	bne.n	8006b44 <Tim_MainFunction+0x94>
		HAL_TIM_ErrorCallback(&htim11);
 8006b3e:	4808      	ldr	r0, [pc, #32]	; (8006b60 <Tim_MainFunction+0xb0>)
 8006b40:	f7ff ff46 	bl	80069d0 <HAL_TIM_ErrorCallback>
}
 8006b44:	bf00      	nop
 8006b46:	3718      	adds	r7, #24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	20000288 	.word	0x20000288
 8006b50:	2000033c 	.word	0x2000033c
 8006b54:	200003f0 	.word	0x200003f0
 8006b58:	200004a4 	.word	0x200004a4
 8006b5c:	20000558 	.word	0x20000558
 8006b60:	2000060c 	.word	0x2000060c

08006b64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM3)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a37      	ldr	r2, [pc, #220]	; (8006c50 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d109      	bne.n	8006b8a <HAL_TIM_PeriodElapsedCallback+0x26>
	{

		Timer3Counter_CenLoc_Tim3IRQFlag++;
 8006b76:	4b37      	ldr	r3, [pc, #220]	; (8006c54 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	4b35      	ldr	r3, [pc, #212]	; (8006c54 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006b80:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag(&Timer3Counter_CenLoc_Tim3IRQFlag);
 8006b82:	4834      	ldr	r0, [pc, #208]	; (8006c54 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006b84:	f003 fa7e 	bl	800a084 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag>

		/* do nothing */

	}

}
 8006b88:	e05d      	b.n	8006c46 <HAL_TIM_PeriodElapsedCallback+0xe2>
	else if(htim->Instance == TIM4)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a32      	ldr	r2, [pc, #200]	; (8006c58 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d109      	bne.n	8006ba8 <HAL_TIM_PeriodElapsedCallback+0x44>
		SecAlm_TriggerIRQCounterForTimer4++;
 8006b94:	4b31      	ldr	r3, [pc, #196]	; (8006c5c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	4b2f      	ldr	r3, [pc, #188]	; (8006c5c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8006b9e:	701a      	strb	r2, [r3, #0]
		Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(&SecAlm_TriggerIRQCounterForTimer4);
 8006ba0:	482e      	ldr	r0, [pc, #184]	; (8006c5c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8006ba2:	f003 fbe5 	bl	800a370 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>
}
 8006ba6:	e04e      	b.n	8006c46 <HAL_TIM_PeriodElapsedCallback+0xe2>
	else if(htim->Instance == TIM5)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a2c      	ldr	r2, [pc, #176]	; (8006c60 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d109      	bne.n	8006bc6 <HAL_TIM_PeriodElapsedCallback+0x62>
		Timer5Counter_CenLoc_Tim5IRQFlag++;
 8006bb2:	4b2c      	ldr	r3, [pc, #176]	; (8006c64 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	b2da      	uxtb	r2, r3
 8006bba:	4b2a      	ldr	r3, [pc, #168]	; (8006c64 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8006bbc:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag(&Timer5Counter_CenLoc_Tim5IRQFlag);
 8006bbe:	4829      	ldr	r0, [pc, #164]	; (8006c64 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8006bc0:	f003 fa76 	bl	800a0b0 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag>
}
 8006bc4:	e03f      	b.n	8006c46 <HAL_TIM_PeriodElapsedCallback+0xe2>
	else if(htim->Instance == TIM11)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a27      	ldr	r2, [pc, #156]	; (8006c68 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d109      	bne.n	8006be4 <HAL_TIM_PeriodElapsedCallback+0x80>
		Timer11Counter_CenLoc_Tim11IRQFlag++;
 8006bd0:	4b26      	ldr	r3, [pc, #152]	; (8006c6c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	4b24      	ldr	r3, [pc, #144]	; (8006c6c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8006bda:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag(&Timer11Counter_CenLoc_Tim11IRQFlag);
 8006bdc:	4823      	ldr	r0, [pc, #140]	; (8006c6c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8006bde:	f003 fa7d 	bl	800a0dc <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag>
}
 8006be2:	e030      	b.n	8006c46 <HAL_TIM_PeriodElapsedCallback+0xe2>
	else if(htim->Instance == TIM2)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bec:	d124      	bne.n	8006c38 <HAL_TIM_PeriodElapsedCallback+0xd4>
		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8006bee:	4b20      	ldr	r3, [pc, #128]	; (8006c70 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d107      	bne.n	8006c06 <HAL_TIM_PeriodElapsedCallback+0xa2>
			Timer2Counter_ExtLights_LTSFlag++;
 8006bf6:	4b1f      	ldr	r3, [pc, #124]	; (8006c74 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	4a1d      	ldr	r2, [pc, #116]	; (8006c74 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8006bfe:	6013      	str	r3, [r2, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(&Timer2Counter_ExtLights_LTSFlag);
 8006c00:	481c      	ldr	r0, [pc, #112]	; (8006c74 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8006c02:	f003 fb73 	bl	800a2ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>
		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8006c06:	4b1c      	ldr	r3, [pc, #112]	; (8006c78 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d107      	bne.n	8006c1e <HAL_TIM_PeriodElapsedCallback+0xba>
			Timer2Counter_ExtLights_RTSFlag++;
 8006c0e:	4b1b      	ldr	r3, [pc, #108]	; (8006c7c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3301      	adds	r3, #1
 8006c14:	4a19      	ldr	r2, [pc, #100]	; (8006c7c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8006c16:	6013      	str	r3, [r2, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(&Timer2Counter_ExtLights_RTSFlag);
 8006c18:	4818      	ldr	r0, [pc, #96]	; (8006c7c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8006c1a:	f003 fb51 	bl	800a2c0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>
		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState == STD_HIGH)
 8006c1e:	4b18      	ldr	r3, [pc, #96]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d10f      	bne.n	8006c46 <HAL_TIM_PeriodElapsedCallback+0xe2>
			Timer2Counter_ExtLights_HLFlag++;
 8006c26:	4b17      	ldr	r3, [pc, #92]	; (8006c84 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	4a15      	ldr	r2, [pc, #84]	; (8006c84 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8006c2e:	6013      	str	r3, [r2, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(&Timer2Counter_ExtLights_HLFlag);
 8006c30:	4814      	ldr	r0, [pc, #80]	; (8006c84 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8006c32:	f003 fb71 	bl	800a318 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>
}
 8006c36:	e006      	b.n	8006c46 <HAL_TIM_PeriodElapsedCallback+0xe2>
	else if (htim->Instance == TIM1)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a12      	ldr	r2, [pc, #72]	; (8006c88 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d101      	bne.n	8006c46 <HAL_TIM_PeriodElapsedCallback+0xe2>
		HAL_IncTick();
 8006c42:	f7fb fda3 	bl	800278c <HAL_IncTick>
}
 8006c46:	bf00      	nop
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	40000400 	.word	0x40000400
 8006c54:	200007cf 	.word	0x200007cf
 8006c58:	40000800 	.word	0x40000800
 8006c5c:	200000d0 	.word	0x200000d0
 8006c60:	40000c00 	.word	0x40000c00
 8006c64:	200007cd 	.word	0x200007cd
 8006c68:	40014800 	.word	0x40014800
 8006c6c:	200007ce 	.word	0x200007ce
 8006c70:	200000b9 	.word	0x200000b9
 8006c74:	200007c0 	.word	0x200007c0
 8006c78:	200000ba 	.word	0x200000ba
 8006c7c:	200007c4 	.word	0x200007c4
 8006c80:	200000bb 	.word	0x200000bb
 8006c84:	200007c8 	.word	0x200007c8
 8006c88:	40010000 	.word	0x40010000

08006c8c <__NVIC_SetPriority>:
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	4603      	mov	r3, r0
 8006c94:	6039      	str	r1, [r7, #0]
 8006c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	db0a      	blt.n	8006cb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	490c      	ldr	r1, [pc, #48]	; (8006cd8 <__NVIC_SetPriority+0x4c>)
 8006ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006caa:	0112      	lsls	r2, r2, #4
 8006cac:	b2d2      	uxtb	r2, r2
 8006cae:	440b      	add	r3, r1
 8006cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006cb4:	e00a      	b.n	8006ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	4908      	ldr	r1, [pc, #32]	; (8006cdc <__NVIC_SetPriority+0x50>)
 8006cbc:	79fb      	ldrb	r3, [r7, #7]
 8006cbe:	f003 030f 	and.w	r3, r3, #15
 8006cc2:	3b04      	subs	r3, #4
 8006cc4:	0112      	lsls	r2, r2, #4
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	440b      	add	r3, r1
 8006cca:	761a      	strb	r2, [r3, #24]
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	e000e100 	.word	0xe000e100
 8006cdc:	e000ed00 	.word	0xe000ed00

08006ce0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006ce4:	4b05      	ldr	r3, [pc, #20]	; (8006cfc <SysTick_Handler+0x1c>)
 8006ce6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006ce8:	f002 fbc6 	bl	8009478 <xTaskGetSchedulerState>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d001      	beq.n	8006cf6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006cf2:	f000 fd21 	bl	8007738 <xPortSysTickHandler>
  }
}
 8006cf6:	bf00      	nop
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	e000e010 	.word	0xe000e010

08006d00 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006d04:	2100      	movs	r1, #0
 8006d06:	f06f 0004 	mvn.w	r0, #4
 8006d0a:	f7ff ffbf 	bl	8006c8c <__NVIC_SetPriority>
#endif
}
 8006d0e:	bf00      	nop
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d1a:	f3ef 8305 	mrs	r3, IPSR
 8006d1e:	603b      	str	r3, [r7, #0]
  return(result);
 8006d20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006d26:	f06f 0305 	mvn.w	r3, #5
 8006d2a:	607b      	str	r3, [r7, #4]
 8006d2c:	e00c      	b.n	8006d48 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006d2e:	4b0a      	ldr	r3, [pc, #40]	; (8006d58 <osKernelInitialize+0x44>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d105      	bne.n	8006d42 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006d36:	4b08      	ldr	r3, [pc, #32]	; (8006d58 <osKernelInitialize+0x44>)
 8006d38:	2201      	movs	r2, #1
 8006d3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	607b      	str	r3, [r7, #4]
 8006d40:	e002      	b.n	8006d48 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006d42:	f04f 33ff 	mov.w	r3, #4294967295
 8006d46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d48:	687b      	ldr	r3, [r7, #4]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	20000840 	.word	0x20000840

08006d5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d62:	f3ef 8305 	mrs	r3, IPSR
 8006d66:	603b      	str	r3, [r7, #0]
  return(result);
 8006d68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006d6e:	f06f 0305 	mvn.w	r3, #5
 8006d72:	607b      	str	r3, [r7, #4]
 8006d74:	e010      	b.n	8006d98 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006d76:	4b0b      	ldr	r3, [pc, #44]	; (8006da4 <osKernelStart+0x48>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d109      	bne.n	8006d92 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006d7e:	f7ff ffbf 	bl	8006d00 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006d82:	4b08      	ldr	r3, [pc, #32]	; (8006da4 <osKernelStart+0x48>)
 8006d84:	2202      	movs	r2, #2
 8006d86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006d88:	f001 fe28 	bl	80089dc <vTaskStartScheduler>
      stat = osOK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	607b      	str	r3, [r7, #4]
 8006d90:	e002      	b.n	8006d98 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006d92:	f04f 33ff 	mov.w	r3, #4294967295
 8006d96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d98:	687b      	ldr	r3, [r7, #4]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3708      	adds	r7, #8
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	20000840 	.word	0x20000840

08006da8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b08e      	sub	sp, #56	; 0x38
 8006dac:	af04      	add	r7, sp, #16
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006db4:	2300      	movs	r3, #0
 8006db6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006db8:	f3ef 8305 	mrs	r3, IPSR
 8006dbc:	617b      	str	r3, [r7, #20]
  return(result);
 8006dbe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d17f      	bne.n	8006ec4 <osThreadNew+0x11c>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d07c      	beq.n	8006ec4 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8006dca:	2380      	movs	r3, #128	; 0x80
 8006dcc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006dce:	2318      	movs	r3, #24
 8006dd0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d046      	beq.n	8006e70 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <osThreadNew+0x48>
        name = attr->name;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d008      	beq.n	8006e16 <osThreadNew+0x6e>
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	2b38      	cmp	r3, #56	; 0x38
 8006e08:	d805      	bhi.n	8006e16 <osThreadNew+0x6e>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <osThreadNew+0x72>
        return (NULL);
 8006e16:	2300      	movs	r3, #0
 8006e18:	e055      	b.n	8006ec6 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	089b      	lsrs	r3, r3, #2
 8006e28:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00f      	beq.n	8006e52 <osThreadNew+0xaa>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f5b3 7fda 	cmp.w	r3, #436	; 0x1b4
 8006e3a:	d30a      	bcc.n	8006e52 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d006      	beq.n	8006e52 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <osThreadNew+0xaa>
        mem = 1;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	61bb      	str	r3, [r7, #24]
 8006e50:	e010      	b.n	8006e74 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10c      	bne.n	8006e74 <osThreadNew+0xcc>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d108      	bne.n	8006e74 <osThreadNew+0xcc>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d104      	bne.n	8006e74 <osThreadNew+0xcc>
          mem = 0;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61bb      	str	r3, [r7, #24]
 8006e6e:	e001      	b.n	8006e74 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8006e70:	2300      	movs	r3, #0
 8006e72:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d110      	bne.n	8006e9c <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e82:	9202      	str	r2, [sp, #8]
 8006e84:	9301      	str	r3, [sp, #4]
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	6a3a      	ldr	r2, [r7, #32]
 8006e8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f001 fab1 	bl	80083f8 <xTaskCreateStatic>
 8006e96:	4603      	mov	r3, r0
 8006e98:	613b      	str	r3, [r7, #16]
 8006e9a:	e013      	b.n	8006ec4 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d110      	bne.n	8006ec4 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	f107 0310 	add.w	r3, r7, #16
 8006eaa:	9301      	str	r3, [sp, #4]
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f001 fafe 	bl	80084b6 <xTaskCreate>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d001      	beq.n	8006ec4 <osThreadNew+0x11c>
            hTask = NULL;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006ec4:	693b      	ldr	r3, [r7, #16]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3728      	adds	r7, #40	; 0x28
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ed6:	f3ef 8305 	mrs	r3, IPSR
 8006eda:	60bb      	str	r3, [r7, #8]
  return(result);
 8006edc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <osDelay+0x1c>
    stat = osErrorISR;
 8006ee2:	f06f 0305 	mvn.w	r3, #5
 8006ee6:	60fb      	str	r3, [r7, #12]
 8006ee8:	e007      	b.n	8006efa <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <osDelay+0x2c>
      vTaskDelay(ticks);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 fcc7 	bl	8008888 <vTaskDelay>
    }
  }

  return (stat);
 8006efa:	68fb      	ldr	r3, [r7, #12]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f002 ffb0 	bl	8009e72 <pvTimerGetTimerID>
 8006f12:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d005      	beq.n	8006f26 <TimerCallback+0x22>
    callb->func (callb->arg);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	6852      	ldr	r2, [r2, #4]
 8006f22:	4610      	mov	r0, r2
 8006f24:	4798      	blx	r3
  }
}
 8006f26:	bf00      	nop
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08c      	sub	sp, #48	; 0x30
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	607a      	str	r2, [r7, #4]
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8006f40:	2300      	movs	r3, #0
 8006f42:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f44:	f3ef 8305 	mrs	r3, IPSR
 8006f48:	613b      	str	r3, [r7, #16]
  return(result);
 8006f4a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d163      	bne.n	8007018 <osTimerNew+0xe8>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d060      	beq.n	8007018 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8006f56:	2008      	movs	r0, #8
 8006f58:	f000 f91c 	bl	8007194 <pvPortMalloc>
 8006f5c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d059      	beq.n	8007018 <osTimerNew+0xe8>
      callb->func = func;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8006f70:	7afb      	ldrb	r3, [r7, #11]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d102      	bne.n	8006f7c <osTimerNew+0x4c>
        reload = pdFALSE;
 8006f76:	2300      	movs	r3, #0
 8006f78:	61fb      	str	r3, [r7, #28]
 8006f7a:	e001      	b.n	8006f80 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8006f80:	f04f 33ff 	mov.w	r3, #4294967295
 8006f84:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8006f86:	2300      	movs	r3, #0
 8006f88:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d01c      	beq.n	8006fca <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <osTimerNew+0x6e>
          name = attr->name;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d006      	beq.n	8006fb4 <osTimerNew+0x84>
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	2b2b      	cmp	r3, #43	; 0x2b
 8006fac:	d902      	bls.n	8006fb4 <osTimerNew+0x84>
          mem = 1;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	61bb      	str	r3, [r7, #24]
 8006fb2:	e00c      	b.n	8006fce <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d108      	bne.n	8006fce <osTimerNew+0x9e>
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d104      	bne.n	8006fce <osTimerNew+0x9e>
            mem = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	61bb      	str	r3, [r7, #24]
 8006fc8:	e001      	b.n	8006fce <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d10c      	bne.n	8006fee <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	9301      	str	r3, [sp, #4]
 8006fda:	4b12      	ldr	r3, [pc, #72]	; (8007024 <osTimerNew+0xf4>)
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	69fa      	ldr	r2, [r7, #28]
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fe6:	f002 fb9c 	bl	8009722 <xTimerCreateStatic>
 8006fea:	6238      	str	r0, [r7, #32]
 8006fec:	e00b      	b.n	8007006 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d108      	bne.n	8007006 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8006ff4:	4b0b      	ldr	r3, [pc, #44]	; (8007024 <osTimerNew+0xf4>)
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	69fa      	ldr	r2, [r7, #28]
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007000:	f002 fb6e 	bl	80096e0 <xTimerCreate>
 8007004:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d105      	bne.n	8007018 <osTimerNew+0xe8>
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <osTimerNew+0xe8>
        vPortFree (callb);
 8007012:	6978      	ldr	r0, [r7, #20]
 8007014:	f000 f908 	bl	8007228 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007018:	6a3b      	ldr	r3, [r7, #32]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3728      	adds	r7, #40	; 0x28
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	08006f05 	.word	0x08006f05

08007028 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007028:	b580      	push	{r7, lr}
 800702a:	b088      	sub	sp, #32
 800702c:	af02      	add	r7, sp, #8
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007036:	f3ef 8305 	mrs	r3, IPSR
 800703a:	60fb      	str	r3, [r7, #12]
  return(result);
 800703c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <osTimerStart+0x22>
    stat = osErrorISR;
 8007042:	f06f 0305 	mvn.w	r3, #5
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	e017      	b.n	800707a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d103      	bne.n	8007058 <osTimerStart+0x30>
    stat = osErrorParameter;
 8007050:	f06f 0303 	mvn.w	r3, #3
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	e010      	b.n	800707a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007058:	2300      	movs	r3, #0
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	2300      	movs	r3, #0
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	2104      	movs	r1, #4
 8007062:	6938      	ldr	r0, [r7, #16]
 8007064:	f002 fbd6 	bl	8009814 <xTimerGenericCommand>
 8007068:	4603      	mov	r3, r0
 800706a:	2b01      	cmp	r3, #1
 800706c:	d102      	bne.n	8007074 <osTimerStart+0x4c>
      stat = osOK;
 800706e:	2300      	movs	r3, #0
 8007070:	617b      	str	r3, [r7, #20]
 8007072:	e002      	b.n	800707a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8007074:	f06f 0302 	mvn.w	r3, #2
 8007078:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800707a:	697b      	ldr	r3, [r7, #20]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af02      	add	r7, sp, #8
 800708a:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007090:	f3ef 8305 	mrs	r3, IPSR
 8007094:	60fb      	str	r3, [r7, #12]
  return(result);
 8007096:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <osTimerStop+0x20>
    stat = osErrorISR;
 800709c:	f06f 0305 	mvn.w	r3, #5
 80070a0:	617b      	str	r3, [r7, #20]
 80070a2:	e021      	b.n	80070e8 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d103      	bne.n	80070b2 <osTimerStop+0x2e>
    stat = osErrorParameter;
 80070aa:	f06f 0303 	mvn.w	r3, #3
 80070ae:	617b      	str	r3, [r7, #20]
 80070b0:	e01a      	b.n	80070e8 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 80070b2:	6938      	ldr	r0, [r7, #16]
 80070b4:	f002 feb4 	bl	8009e20 <xTimerIsTimerActive>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d103      	bne.n	80070c6 <osTimerStop+0x42>
      stat = osErrorResource;
 80070be:	f06f 0302 	mvn.w	r3, #2
 80070c2:	617b      	str	r3, [r7, #20]
 80070c4:	e010      	b.n	80070e8 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 80070c6:	2300      	movs	r3, #0
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	2300      	movs	r3, #0
 80070cc:	2200      	movs	r2, #0
 80070ce:	2103      	movs	r1, #3
 80070d0:	6938      	ldr	r0, [r7, #16]
 80070d2:	f002 fb9f 	bl	8009814 <xTimerGenericCommand>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d102      	bne.n	80070e2 <osTimerStop+0x5e>
        stat = osOK;
 80070dc:	2300      	movs	r3, #0
 80070de:	617b      	str	r3, [r7, #20]
 80070e0:	e002      	b.n	80070e8 <osTimerStop+0x64>
      } else {
        stat = osError;
 80070e2:	f04f 33ff 	mov.w	r3, #4294967295
 80070e6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80070e8:	697b      	ldr	r3, [r7, #20]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b086      	sub	sp, #24
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070fe:	f3ef 8305 	mrs	r3, IPSR
 8007102:	60fb      	str	r3, [r7, #12]
  return(result);
 8007104:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 8007106:	2b00      	cmp	r3, #0
 8007108:	d102      	bne.n	8007110 <osTimerIsRunning+0x1e>
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d102      	bne.n	8007116 <osTimerIsRunning+0x24>
    running = 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	617b      	str	r3, [r7, #20]
 8007114:	e004      	b.n	8007120 <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 8007116:	6938      	ldr	r0, [r7, #16]
 8007118:	f002 fe82 	bl	8009e20 <xTimerIsTimerActive>
 800711c:	4603      	mov	r3, r0
 800711e:	617b      	str	r3, [r7, #20]
  }

  return (running);
 8007120:	697b      	ldr	r3, [r7, #20]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3718      	adds	r7, #24
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
	...

0800712c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4a07      	ldr	r2, [pc, #28]	; (8007158 <vApplicationGetIdleTaskMemory+0x2c>)
 800713c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	4a06      	ldr	r2, [pc, #24]	; (800715c <vApplicationGetIdleTaskMemory+0x30>)
 8007142:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2280      	movs	r2, #128	; 0x80
 8007148:	601a      	str	r2, [r3, #0]
}
 800714a:	bf00      	nop
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	20000844 	.word	0x20000844
 800715c:	200009f8 	.word	0x200009f8

08007160 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4a07      	ldr	r2, [pc, #28]	; (800718c <vApplicationGetTimerTaskMemory+0x2c>)
 8007170:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	4a06      	ldr	r2, [pc, #24]	; (8007190 <vApplicationGetTimerTaskMemory+0x30>)
 8007176:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800717e:	601a      	str	r2, [r3, #0]
}
 8007180:	bf00      	nop
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	20000bf8 	.word	0x20000bf8
 8007190:	20000dac 	.word	0x20000dac

08007194 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d004      	beq.n	80071b4 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f023 0307 	bic.w	r3, r3, #7
 80071b0:	3308      	adds	r3, #8
 80071b2:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 80071b4:	f001 fc82 	bl	8008abc <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80071b8:	4b18      	ldr	r3, [pc, #96]	; (800721c <pvPortMalloc+0x88>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d105      	bne.n	80071cc <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80071c0:	4b17      	ldr	r3, [pc, #92]	; (8007220 <pvPortMalloc+0x8c>)
 80071c2:	f023 0307 	bic.w	r3, r3, #7
 80071c6:	461a      	mov	r2, r3
 80071c8:	4b14      	ldr	r3, [pc, #80]	; (800721c <pvPortMalloc+0x88>)
 80071ca:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80071cc:	4b15      	ldr	r3, [pc, #84]	; (8007224 <pvPortMalloc+0x90>)
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4413      	add	r3, r2
 80071d4:	f246 129f 	movw	r2, #24991	; 0x619f
 80071d8:	4293      	cmp	r3, r2
 80071da:	d813      	bhi.n	8007204 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80071dc:	4b11      	ldr	r3, [pc, #68]	; (8007224 <pvPortMalloc+0x90>)
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	441a      	add	r2, r3
 80071e4:	4b0f      	ldr	r3, [pc, #60]	; (8007224 <pvPortMalloc+0x90>)
 80071e6:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d90b      	bls.n	8007204 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80071ec:	4b0b      	ldr	r3, [pc, #44]	; (800721c <pvPortMalloc+0x88>)
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	4b0c      	ldr	r3, [pc, #48]	; (8007224 <pvPortMalloc+0x90>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4413      	add	r3, r2
 80071f6:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80071f8:	4b0a      	ldr	r3, [pc, #40]	; (8007224 <pvPortMalloc+0x90>)
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4413      	add	r3, r2
 8007200:	4a08      	ldr	r2, [pc, #32]	; (8007224 <pvPortMalloc+0x90>)
 8007202:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007204:	f001 fca0 	bl	8008b48 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800720e:	f7fa fc33 	bl	8001a78 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8007212:	68fb      	ldr	r3, [r7, #12]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	20007358 	.word	0x20007358
 8007220:	200011b4 	.word	0x200011b4
 8007224:	20007354 	.word	0x20007354

08007228 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <vPortFree+0x24>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	60fb      	str	r3, [r7, #12]
}
 8007248:	bf00      	nop
 800724a:	e7fe      	b.n	800724a <vPortFree+0x22>
}
 800724c:	bf00      	nop
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f103 0208 	add.w	r2, r3, #8
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f04f 32ff 	mov.w	r2, #4294967295
 8007270:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f103 0208 	add.w	r2, r3, #8
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f103 0208 	add.w	r2, r3, #8
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	689a      	ldr	r2, [r3, #8]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	1c5a      	adds	r2, r3, #1
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	601a      	str	r2, [r3, #0]
}
 80072ee:	bf00      	nop
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072fa:	b480      	push	{r7}
 80072fc:	b085      	sub	sp, #20
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007310:	d103      	bne.n	800731a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	60fb      	str	r3, [r7, #12]
 8007318:	e00c      	b.n	8007334 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3308      	adds	r3, #8
 800731e:	60fb      	str	r3, [r7, #12]
 8007320:	e002      	b.n	8007328 <vListInsert+0x2e>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	429a      	cmp	r2, r3
 8007332:	d2f6      	bcs.n	8007322 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	601a      	str	r2, [r3, #0]
}
 8007360:	bf00      	nop
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	6892      	ldr	r2, [r2, #8]
 8007382:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	6852      	ldr	r2, [r2, #4]
 800738c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	429a      	cmp	r2, r3
 8007396:	d103      	bne.n	80073a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	1e5a      	subs	r2, r3, #1
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3b04      	subs	r3, #4
 80073d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3b04      	subs	r3, #4
 80073de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f023 0201 	bic.w	r2, r3, #1
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3b04      	subs	r3, #4
 80073ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073f0:	4a0c      	ldr	r2, [pc, #48]	; (8007424 <pxPortInitialiseStack+0x64>)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	3b14      	subs	r3, #20
 80073fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	3b04      	subs	r3, #4
 8007406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f06f 0202 	mvn.w	r2, #2
 800740e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	3b20      	subs	r3, #32
 8007414:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007416:	68fb      	ldr	r3, [r7, #12]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	08007429 	.word	0x08007429

08007428 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800742e:	2300      	movs	r3, #0
 8007430:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007432:	4b12      	ldr	r3, [pc, #72]	; (800747c <prvTaskExitError+0x54>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743a:	d00a      	beq.n	8007452 <prvTaskExitError+0x2a>
	__asm volatile
 800743c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	60fb      	str	r3, [r7, #12]
}
 800744e:	bf00      	nop
 8007450:	e7fe      	b.n	8007450 <prvTaskExitError+0x28>
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	60bb      	str	r3, [r7, #8]
}
 8007464:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007466:	bf00      	nop
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d0fc      	beq.n	8007468 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800746e:	bf00      	nop
 8007470:	bf00      	nop
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	20000010 	.word	0x20000010

08007480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007480:	4b07      	ldr	r3, [pc, #28]	; (80074a0 <pxCurrentTCBConst2>)
 8007482:	6819      	ldr	r1, [r3, #0]
 8007484:	6808      	ldr	r0, [r1, #0]
 8007486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800748a:	f380 8809 	msr	PSP, r0
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f04f 0000 	mov.w	r0, #0
 8007496:	f380 8811 	msr	BASEPRI, r0
 800749a:	4770      	bx	lr
 800749c:	f3af 8000 	nop.w

080074a0 <pxCurrentTCBConst2>:
 80074a0:	200073b0 	.word	0x200073b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074a4:	bf00      	nop
 80074a6:	bf00      	nop

080074a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074a8:	4808      	ldr	r0, [pc, #32]	; (80074cc <prvPortStartFirstTask+0x24>)
 80074aa:	6800      	ldr	r0, [r0, #0]
 80074ac:	6800      	ldr	r0, [r0, #0]
 80074ae:	f380 8808 	msr	MSP, r0
 80074b2:	f04f 0000 	mov.w	r0, #0
 80074b6:	f380 8814 	msr	CONTROL, r0
 80074ba:	b662      	cpsie	i
 80074bc:	b661      	cpsie	f
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	df00      	svc	0
 80074c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074ca:	bf00      	nop
 80074cc:	e000ed08 	.word	0xe000ed08

080074d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80074d6:	4b46      	ldr	r3, [pc, #280]	; (80075f0 <xPortStartScheduler+0x120>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a46      	ldr	r2, [pc, #280]	; (80075f4 <xPortStartScheduler+0x124>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d10a      	bne.n	80074f6 <xPortStartScheduler+0x26>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	613b      	str	r3, [r7, #16]
}
 80074f2:	bf00      	nop
 80074f4:	e7fe      	b.n	80074f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80074f6:	4b3e      	ldr	r3, [pc, #248]	; (80075f0 <xPortStartScheduler+0x120>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a3f      	ldr	r2, [pc, #252]	; (80075f8 <xPortStartScheduler+0x128>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d10a      	bne.n	8007516 <xPortStartScheduler+0x46>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	60fb      	str	r3, [r7, #12]
}
 8007512:	bf00      	nop
 8007514:	e7fe      	b.n	8007514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007516:	4b39      	ldr	r3, [pc, #228]	; (80075fc <xPortStartScheduler+0x12c>)
 8007518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	b2db      	uxtb	r3, r3
 8007520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	22ff      	movs	r2, #255	; 0xff
 8007526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007530:	78fb      	ldrb	r3, [r7, #3]
 8007532:	b2db      	uxtb	r3, r3
 8007534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007538:	b2da      	uxtb	r2, r3
 800753a:	4b31      	ldr	r3, [pc, #196]	; (8007600 <xPortStartScheduler+0x130>)
 800753c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800753e:	4b31      	ldr	r3, [pc, #196]	; (8007604 <xPortStartScheduler+0x134>)
 8007540:	2207      	movs	r2, #7
 8007542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007544:	e009      	b.n	800755a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007546:	4b2f      	ldr	r3, [pc, #188]	; (8007604 <xPortStartScheduler+0x134>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3b01      	subs	r3, #1
 800754c:	4a2d      	ldr	r2, [pc, #180]	; (8007604 <xPortStartScheduler+0x134>)
 800754e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007550:	78fb      	ldrb	r3, [r7, #3]
 8007552:	b2db      	uxtb	r3, r3
 8007554:	005b      	lsls	r3, r3, #1
 8007556:	b2db      	uxtb	r3, r3
 8007558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800755a:	78fb      	ldrb	r3, [r7, #3]
 800755c:	b2db      	uxtb	r3, r3
 800755e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007562:	2b80      	cmp	r3, #128	; 0x80
 8007564:	d0ef      	beq.n	8007546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007566:	4b27      	ldr	r3, [pc, #156]	; (8007604 <xPortStartScheduler+0x134>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f1c3 0307 	rsb	r3, r3, #7
 800756e:	2b04      	cmp	r3, #4
 8007570:	d00a      	beq.n	8007588 <xPortStartScheduler+0xb8>
	__asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	60bb      	str	r3, [r7, #8]
}
 8007584:	bf00      	nop
 8007586:	e7fe      	b.n	8007586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007588:	4b1e      	ldr	r3, [pc, #120]	; (8007604 <xPortStartScheduler+0x134>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	021b      	lsls	r3, r3, #8
 800758e:	4a1d      	ldr	r2, [pc, #116]	; (8007604 <xPortStartScheduler+0x134>)
 8007590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007592:	4b1c      	ldr	r3, [pc, #112]	; (8007604 <xPortStartScheduler+0x134>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800759a:	4a1a      	ldr	r2, [pc, #104]	; (8007604 <xPortStartScheduler+0x134>)
 800759c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075a6:	4b18      	ldr	r3, [pc, #96]	; (8007608 <xPortStartScheduler+0x138>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a17      	ldr	r2, [pc, #92]	; (8007608 <xPortStartScheduler+0x138>)
 80075ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075b2:	4b15      	ldr	r3, [pc, #84]	; (8007608 <xPortStartScheduler+0x138>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a14      	ldr	r2, [pc, #80]	; (8007608 <xPortStartScheduler+0x138>)
 80075b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80075bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075be:	f000 f9a9 	bl	8007914 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075c2:	4b12      	ldr	r3, [pc, #72]	; (800760c <xPortStartScheduler+0x13c>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075c8:	f000 f9e0 	bl	800798c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075cc:	4b10      	ldr	r3, [pc, #64]	; (8007610 <xPortStartScheduler+0x140>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a0f      	ldr	r2, [pc, #60]	; (8007610 <xPortStartScheduler+0x140>)
 80075d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80075d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80075d8:	f7ff ff66 	bl	80074a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80075dc:	f001 fc4c 	bl	8008e78 <vTaskSwitchContext>
	prvTaskExitError();
 80075e0:	f7ff ff22 	bl	8007428 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	e000ed00 	.word	0xe000ed00
 80075f4:	410fc271 	.word	0x410fc271
 80075f8:	410fc270 	.word	0x410fc270
 80075fc:	e000e400 	.word	0xe000e400
 8007600:	20007368 	.word	0x20007368
 8007604:	2000736c 	.word	0x2000736c
 8007608:	e000ed20 	.word	0xe000ed20
 800760c:	20000010 	.word	0x20000010
 8007610:	e000ef34 	.word	0xe000ef34

08007614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
	__asm volatile
 800761a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	607b      	str	r3, [r7, #4]
}
 800762c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800762e:	4b0f      	ldr	r3, [pc, #60]	; (800766c <vPortEnterCritical+0x58>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3301      	adds	r3, #1
 8007634:	4a0d      	ldr	r2, [pc, #52]	; (800766c <vPortEnterCritical+0x58>)
 8007636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007638:	4b0c      	ldr	r3, [pc, #48]	; (800766c <vPortEnterCritical+0x58>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d10f      	bne.n	8007660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007640:	4b0b      	ldr	r3, [pc, #44]	; (8007670 <vPortEnterCritical+0x5c>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00a      	beq.n	8007660 <vPortEnterCritical+0x4c>
	__asm volatile
 800764a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	603b      	str	r3, [r7, #0]
}
 800765c:	bf00      	nop
 800765e:	e7fe      	b.n	800765e <vPortEnterCritical+0x4a>
	}
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	20000010 	.word	0x20000010
 8007670:	e000ed04 	.word	0xe000ed04

08007674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800767a:	4b12      	ldr	r3, [pc, #72]	; (80076c4 <vPortExitCritical+0x50>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10a      	bne.n	8007698 <vPortExitCritical+0x24>
	__asm volatile
 8007682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007686:	f383 8811 	msr	BASEPRI, r3
 800768a:	f3bf 8f6f 	isb	sy
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	607b      	str	r3, [r7, #4]
}
 8007694:	bf00      	nop
 8007696:	e7fe      	b.n	8007696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007698:	4b0a      	ldr	r3, [pc, #40]	; (80076c4 <vPortExitCritical+0x50>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	3b01      	subs	r3, #1
 800769e:	4a09      	ldr	r2, [pc, #36]	; (80076c4 <vPortExitCritical+0x50>)
 80076a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076a2:	4b08      	ldr	r3, [pc, #32]	; (80076c4 <vPortExitCritical+0x50>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d105      	bne.n	80076b6 <vPortExitCritical+0x42>
 80076aa:	2300      	movs	r3, #0
 80076ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	f383 8811 	msr	BASEPRI, r3
}
 80076b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076b6:	bf00      	nop
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	20000010 	.word	0x20000010
	...

080076d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076d0:	f3ef 8009 	mrs	r0, PSP
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	4b15      	ldr	r3, [pc, #84]	; (8007730 <pxCurrentTCBConst>)
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	f01e 0f10 	tst.w	lr, #16
 80076e0:	bf08      	it	eq
 80076e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80076e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ea:	6010      	str	r0, [r2, #0]
 80076ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80076f4:	f380 8811 	msr	BASEPRI, r0
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f001 fbba 	bl	8008e78 <vTaskSwitchContext>
 8007704:	f04f 0000 	mov.w	r0, #0
 8007708:	f380 8811 	msr	BASEPRI, r0
 800770c:	bc09      	pop	{r0, r3}
 800770e:	6819      	ldr	r1, [r3, #0]
 8007710:	6808      	ldr	r0, [r1, #0]
 8007712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007716:	f01e 0f10 	tst.w	lr, #16
 800771a:	bf08      	it	eq
 800771c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007720:	f380 8809 	msr	PSP, r0
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	f3af 8000 	nop.w

08007730 <pxCurrentTCBConst>:
 8007730:	200073b0 	.word	0x200073b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007734:	bf00      	nop
 8007736:	bf00      	nop

08007738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	607b      	str	r3, [r7, #4]
}
 8007750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007752:	f001 facf 	bl	8008cf4 <xTaskIncrementTick>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800775c:	4b06      	ldr	r3, [pc, #24]	; (8007778 <xPortSysTickHandler+0x40>)
 800775e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	2300      	movs	r3, #0
 8007766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	f383 8811 	msr	BASEPRI, r3
}
 800776e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007770:	bf00      	nop
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	e000ed04 	.word	0xe000ed04

0800777c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800777c:	b580      	push	{r7, lr}
 800777e:	b088      	sub	sp, #32
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8007784:	4b5d      	ldr	r3, [pc, #372]	; (80078fc <vPortSuppressTicksAndSleep+0x180>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	429a      	cmp	r2, r3
 800778c:	d902      	bls.n	8007794 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800778e:	4b5b      	ldr	r3, [pc, #364]	; (80078fc <vPortSuppressTicksAndSleep+0x180>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8007794:	4b5a      	ldr	r3, [pc, #360]	; (8007900 <vPortSuppressTicksAndSleep+0x184>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a59      	ldr	r2, [pc, #356]	; (8007900 <vPortSuppressTicksAndSleep+0x184>)
 800779a:	f023 0301 	bic.w	r3, r3, #1
 800779e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 80077a0:	4b58      	ldr	r3, [pc, #352]	; (8007904 <vPortSuppressTicksAndSleep+0x188>)
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	3b01      	subs	r3, #1
 80077a8:	4957      	ldr	r1, [pc, #348]	; (8007908 <vPortSuppressTicksAndSleep+0x18c>)
 80077aa:	6809      	ldr	r1, [r1, #0]
 80077ac:	fb01 f303 	mul.w	r3, r1, r3
 80077b0:	4413      	add	r3, r2
 80077b2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 80077b4:	4b55      	ldr	r3, [pc, #340]	; (800790c <vPortSuppressTicksAndSleep+0x190>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	69fa      	ldr	r2, [r7, #28]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d904      	bls.n	80077c8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 80077be:	4b53      	ldr	r3, [pc, #332]	; (800790c <vPortSuppressTicksAndSleep+0x190>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	69fa      	ldr	r2, [r7, #28]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 80077c8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 80077ca:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 80077ce:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 80077d2:	f001 fd5f 	bl	8009294 <eTaskConfirmSleepModeStatus>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d110      	bne.n	80077fe <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80077dc:	4b49      	ldr	r3, [pc, #292]	; (8007904 <vPortSuppressTicksAndSleep+0x188>)
 80077de:	4a4c      	ldr	r2, [pc, #304]	; (8007910 <vPortSuppressTicksAndSleep+0x194>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80077e4:	4b46      	ldr	r3, [pc, #280]	; (8007900 <vPortSuppressTicksAndSleep+0x184>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a45      	ldr	r2, [pc, #276]	; (8007900 <vPortSuppressTicksAndSleep+0x184>)
 80077ea:	f043 0301 	orr.w	r3, r3, #1
 80077ee:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 80077f0:	4b45      	ldr	r3, [pc, #276]	; (8007908 <vPortSuppressTicksAndSleep+0x18c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a46      	ldr	r2, [pc, #280]	; (8007910 <vPortSuppressTicksAndSleep+0x194>)
 80077f6:	3b01      	subs	r3, #1
 80077f8:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 80077fa:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 80077fc:	e079      	b.n	80078f2 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 80077fe:	4a44      	ldr	r2, [pc, #272]	; (8007910 <vPortSuppressTicksAndSleep+0x194>)
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007804:	4b3f      	ldr	r3, [pc, #252]	; (8007904 <vPortSuppressTicksAndSleep+0x188>)
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800780a:	4b3d      	ldr	r3, [pc, #244]	; (8007900 <vPortSuppressTicksAndSleep+0x184>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a3c      	ldr	r2, [pc, #240]	; (8007900 <vPortSuppressTicksAndSleep+0x184>)
 8007810:	f043 0301 	orr.w	r3, r3, #1
 8007814:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800781a:	2300      	movs	r3, #0
 800781c:	613b      	str	r3, [r7, #16]
 800781e:	6938      	ldr	r0, [r7, #16]
 8007820:	f7fa f931 	bl	8001a86 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d004      	beq.n	8007834 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800782a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800782e:	bf30      	wfi
				__asm volatile( "isb" );
 8007830:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f7fa f930 	bl	8001a9a <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800783a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800783c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8007840:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8007844:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8007846:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800784a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800784e:	4b2c      	ldr	r3, [pc, #176]	; (8007900 <vPortSuppressTicksAndSleep+0x184>)
 8007850:	2206      	movs	r2, #6
 8007852:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8007854:	4b2a      	ldr	r3, [pc, #168]	; (8007900 <vPortSuppressTicksAndSleep+0x184>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d01d      	beq.n	800789c <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8007860:	4b29      	ldr	r3, [pc, #164]	; (8007908 <vPortSuppressTicksAndSleep+0x18c>)
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	4b27      	ldr	r3, [pc, #156]	; (8007904 <vPortSuppressTicksAndSleep+0x188>)
 8007866:	6819      	ldr	r1, [r3, #0]
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	1acb      	subs	r3, r1, r3
 800786c:	4413      	add	r3, r2
 800786e:	3b01      	subs	r3, #1
 8007870:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8007872:	4b26      	ldr	r3, [pc, #152]	; (800790c <vPortSuppressTicksAndSleep+0x190>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	429a      	cmp	r2, r3
 800787a:	d304      	bcc.n	8007886 <vPortSuppressTicksAndSleep+0x10a>
 800787c:	4b22      	ldr	r3, [pc, #136]	; (8007908 <vPortSuppressTicksAndSleep+0x18c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	429a      	cmp	r2, r3
 8007884:	d903      	bls.n	800788e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8007886:	4b20      	ldr	r3, [pc, #128]	; (8007908 <vPortSuppressTicksAndSleep+0x18c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3b01      	subs	r3, #1
 800788c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800788e:	4a20      	ldr	r2, [pc, #128]	; (8007910 <vPortSuppressTicksAndSleep+0x194>)
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	3b01      	subs	r3, #1
 8007898:	61bb      	str	r3, [r7, #24]
 800789a:	e018      	b.n	80078ce <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800789c:	4b1a      	ldr	r3, [pc, #104]	; (8007908 <vPortSuppressTicksAndSleep+0x18c>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	fb03 f202 	mul.w	r2, r3, r2
 80078a6:	4b17      	ldr	r3, [pc, #92]	; (8007904 <vPortSuppressTicksAndSleep+0x188>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 80078ae:	4b16      	ldr	r3, [pc, #88]	; (8007908 <vPortSuppressTicksAndSleep+0x18c>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	3301      	adds	r3, #1
 80078be:	4a12      	ldr	r2, [pc, #72]	; (8007908 <vPortSuppressTicksAndSleep+0x18c>)
 80078c0:	6812      	ldr	r2, [r2, #0]
 80078c2:	fb03 f202 	mul.w	r2, r3, r2
 80078c6:	4912      	ldr	r1, [pc, #72]	; (8007910 <vPortSuppressTicksAndSleep+0x194>)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078ce:	4b0d      	ldr	r3, [pc, #52]	; (8007904 <vPortSuppressTicksAndSleep+0x188>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80078d4:	4b0a      	ldr	r3, [pc, #40]	; (8007900 <vPortSuppressTicksAndSleep+0x184>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a09      	ldr	r2, [pc, #36]	; (8007900 <vPortSuppressTicksAndSleep+0x184>)
 80078da:	f043 0301 	orr.w	r3, r3, #1
 80078de:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 80078e0:	69b8      	ldr	r0, [r7, #24]
 80078e2:	f001 f9df 	bl	8008ca4 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 80078e6:	4b08      	ldr	r3, [pc, #32]	; (8007908 <vPortSuppressTicksAndSleep+0x18c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a09      	ldr	r2, [pc, #36]	; (8007910 <vPortSuppressTicksAndSleep+0x194>)
 80078ec:	3b01      	subs	r3, #1
 80078ee:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 80078f0:	b662      	cpsie	i
	}
 80078f2:	bf00      	nop
 80078f4:	3720      	adds	r7, #32
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	20007360 	.word	0x20007360
 8007900:	e000e010 	.word	0xe000e010
 8007904:	e000e018 	.word	0xe000e018
 8007908:	2000735c 	.word	0x2000735c
 800790c:	20007364 	.word	0x20007364
 8007910:	e000e014 	.word	0xe000e014

08007914 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007914:	b480      	push	{r7}
 8007916:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8007918:	4b14      	ldr	r3, [pc, #80]	; (800796c <vPortSetupTimerInterrupt+0x58>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a14      	ldr	r2, [pc, #80]	; (8007970 <vPortSetupTimerInterrupt+0x5c>)
 800791e:	fba2 2303 	umull	r2, r3, r2, r3
 8007922:	099b      	lsrs	r3, r3, #6
 8007924:	4a13      	ldr	r2, [pc, #76]	; (8007974 <vPortSetupTimerInterrupt+0x60>)
 8007926:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8007928:	4b12      	ldr	r3, [pc, #72]	; (8007974 <vPortSetupTimerInterrupt+0x60>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8007930:	fbb2 f3f3 	udiv	r3, r2, r3
 8007934:	4a10      	ldr	r2, [pc, #64]	; (8007978 <vPortSetupTimerInterrupt+0x64>)
 8007936:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8007938:	4b10      	ldr	r3, [pc, #64]	; (800797c <vPortSetupTimerInterrupt+0x68>)
 800793a:	222d      	movs	r2, #45	; 0x2d
 800793c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800793e:	4b10      	ldr	r3, [pc, #64]	; (8007980 <vPortSetupTimerInterrupt+0x6c>)
 8007940:	2200      	movs	r2, #0
 8007942:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007944:	4b0f      	ldr	r3, [pc, #60]	; (8007984 <vPortSetupTimerInterrupt+0x70>)
 8007946:	2200      	movs	r2, #0
 8007948:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800794a:	4b08      	ldr	r3, [pc, #32]	; (800796c <vPortSetupTimerInterrupt+0x58>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a08      	ldr	r2, [pc, #32]	; (8007970 <vPortSetupTimerInterrupt+0x5c>)
 8007950:	fba2 2303 	umull	r2, r3, r2, r3
 8007954:	099b      	lsrs	r3, r3, #6
 8007956:	4a0c      	ldr	r2, [pc, #48]	; (8007988 <vPortSetupTimerInterrupt+0x74>)
 8007958:	3b01      	subs	r3, #1
 800795a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800795c:	4b08      	ldr	r3, [pc, #32]	; (8007980 <vPortSetupTimerInterrupt+0x6c>)
 800795e:	2207      	movs	r2, #7
 8007960:	601a      	str	r2, [r3, #0]
}
 8007962:	bf00      	nop
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	20000004 	.word	0x20000004
 8007970:	10624dd3 	.word	0x10624dd3
 8007974:	2000735c 	.word	0x2000735c
 8007978:	20007360 	.word	0x20007360
 800797c:	20007364 	.word	0x20007364
 8007980:	e000e010 	.word	0xe000e010
 8007984:	e000e018 	.word	0xe000e018
 8007988:	e000e014 	.word	0xe000e014

0800798c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800798c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800799c <vPortEnableVFP+0x10>
 8007990:	6801      	ldr	r1, [r0, #0]
 8007992:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007996:	6001      	str	r1, [r0, #0]
 8007998:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800799a:	bf00      	nop
 800799c:	e000ed88 	.word	0xe000ed88

080079a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079a6:	f3ef 8305 	mrs	r3, IPSR
 80079aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2b0f      	cmp	r3, #15
 80079b0:	d914      	bls.n	80079dc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079b2:	4a17      	ldr	r2, [pc, #92]	; (8007a10 <vPortValidateInterruptPriority+0x70>)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4413      	add	r3, r2
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079bc:	4b15      	ldr	r3, [pc, #84]	; (8007a14 <vPortValidateInterruptPriority+0x74>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	7afa      	ldrb	r2, [r7, #11]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d20a      	bcs.n	80079dc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80079c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ca:	f383 8811 	msr	BASEPRI, r3
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	607b      	str	r3, [r7, #4]
}
 80079d8:	bf00      	nop
 80079da:	e7fe      	b.n	80079da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80079dc:	4b0e      	ldr	r3, [pc, #56]	; (8007a18 <vPortValidateInterruptPriority+0x78>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80079e4:	4b0d      	ldr	r3, [pc, #52]	; (8007a1c <vPortValidateInterruptPriority+0x7c>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d90a      	bls.n	8007a02 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80079ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	603b      	str	r3, [r7, #0]
}
 80079fe:	bf00      	nop
 8007a00:	e7fe      	b.n	8007a00 <vPortValidateInterruptPriority+0x60>
	}
 8007a02:	bf00      	nop
 8007a04:	3714      	adds	r7, #20
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	e000e3f0 	.word	0xe000e3f0
 8007a14:	20007368 	.word	0x20007368
 8007a18:	e000ed0c 	.word	0xe000ed0c
 8007a1c:	2000736c 	.word	0x2000736c

08007a20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10a      	bne.n	8007a4a <xQueueGenericReset+0x2a>
	__asm volatile
 8007a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	60bb      	str	r3, [r7, #8]
}
 8007a46:	bf00      	nop
 8007a48:	e7fe      	b.n	8007a48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a4a:	f7ff fde3 	bl	8007614 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a56:	68f9      	ldr	r1, [r7, #12]
 8007a58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a5a:	fb01 f303 	mul.w	r3, r1, r3
 8007a5e:	441a      	add	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	68f9      	ldr	r1, [r7, #12]
 8007a7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a80:	fb01 f303 	mul.w	r3, r1, r3
 8007a84:	441a      	add	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	22ff      	movs	r2, #255	; 0xff
 8007a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	22ff      	movs	r2, #255	; 0xff
 8007a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d114      	bne.n	8007aca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d01a      	beq.n	8007ade <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	3310      	adds	r3, #16
 8007aac:	4618      	mov	r0, r3
 8007aae:	f001 fab5 	bl	800901c <xTaskRemoveFromEventList>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d012      	beq.n	8007ade <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ab8:	4b0c      	ldr	r3, [pc, #48]	; (8007aec <xQueueGenericReset+0xcc>)
 8007aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007abe:	601a      	str	r2, [r3, #0]
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	e009      	b.n	8007ade <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	3310      	adds	r3, #16
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff fbc2 	bl	8007258 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	3324      	adds	r3, #36	; 0x24
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7ff fbbd 	bl	8007258 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007ade:	f7ff fdc9 	bl	8007674 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007ae2:	2301      	movs	r3, #1
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	e000ed04 	.word	0xe000ed04

08007af0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b08e      	sub	sp, #56	; 0x38
 8007af4:	af02      	add	r7, sp, #8
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
 8007afc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10a      	bne.n	8007b1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b16:	bf00      	nop
 8007b18:	e7fe      	b.n	8007b18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d10a      	bne.n	8007b36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b24:	f383 8811 	msr	BASEPRI, r3
 8007b28:	f3bf 8f6f 	isb	sy
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b32:	bf00      	nop
 8007b34:	e7fe      	b.n	8007b34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <xQueueGenericCreateStatic+0x52>
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d001      	beq.n	8007b46 <xQueueGenericCreateStatic+0x56>
 8007b42:	2301      	movs	r3, #1
 8007b44:	e000      	b.n	8007b48 <xQueueGenericCreateStatic+0x58>
 8007b46:	2300      	movs	r3, #0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10a      	bne.n	8007b62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	623b      	str	r3, [r7, #32]
}
 8007b5e:	bf00      	nop
 8007b60:	e7fe      	b.n	8007b60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d102      	bne.n	8007b6e <xQueueGenericCreateStatic+0x7e>
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <xQueueGenericCreateStatic+0x82>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e000      	b.n	8007b74 <xQueueGenericCreateStatic+0x84>
 8007b72:	2300      	movs	r3, #0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10a      	bne.n	8007b8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7c:	f383 8811 	msr	BASEPRI, r3
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	61fb      	str	r3, [r7, #28]
}
 8007b8a:	bf00      	nop
 8007b8c:	e7fe      	b.n	8007b8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b8e:	2350      	movs	r3, #80	; 0x50
 8007b90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2b50      	cmp	r3, #80	; 0x50
 8007b96:	d00a      	beq.n	8007bae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9c:	f383 8811 	msr	BASEPRI, r3
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	61bb      	str	r3, [r7, #24]
}
 8007baa:	bf00      	nop
 8007bac:	e7fe      	b.n	8007bac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007bae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00d      	beq.n	8007bd6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bc2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	68b9      	ldr	r1, [r7, #8]
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 f805 	bl	8007be0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3730      	adds	r7, #48	; 0x30
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d103      	bne.n	8007bfc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	601a      	str	r2, [r3, #0]
 8007bfa:	e002      	b.n	8007c02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c0e:	2101      	movs	r1, #1
 8007c10:	69b8      	ldr	r0, [r7, #24]
 8007c12:	f7ff ff05 	bl	8007a20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	78fa      	ldrb	r2, [r7, #3]
 8007c1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c1e:	bf00      	nop
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
	...

08007c28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b08e      	sub	sp, #56	; 0x38
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c36:	2300      	movs	r3, #0
 8007c38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10a      	bne.n	8007c5a <xQueueGenericSend+0x32>
	__asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c56:	bf00      	nop
 8007c58:	e7fe      	b.n	8007c58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d103      	bne.n	8007c68 <xQueueGenericSend+0x40>
 8007c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <xQueueGenericSend+0x44>
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e000      	b.n	8007c6e <xQueueGenericSend+0x46>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10a      	bne.n	8007c88 <xQueueGenericSend+0x60>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c84:	bf00      	nop
 8007c86:	e7fe      	b.n	8007c86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d103      	bne.n	8007c96 <xQueueGenericSend+0x6e>
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d101      	bne.n	8007c9a <xQueueGenericSend+0x72>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e000      	b.n	8007c9c <xQueueGenericSend+0x74>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10a      	bne.n	8007cb6 <xQueueGenericSend+0x8e>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	623b      	str	r3, [r7, #32]
}
 8007cb2:	bf00      	nop
 8007cb4:	e7fe      	b.n	8007cb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cb6:	f001 fbdf 	bl	8009478 <xTaskGetSchedulerState>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d102      	bne.n	8007cc6 <xQueueGenericSend+0x9e>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d101      	bne.n	8007cca <xQueueGenericSend+0xa2>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e000      	b.n	8007ccc <xQueueGenericSend+0xa4>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10a      	bne.n	8007ce6 <xQueueGenericSend+0xbe>
	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	61fb      	str	r3, [r7, #28]
}
 8007ce2:	bf00      	nop
 8007ce4:	e7fe      	b.n	8007ce4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ce6:	f7ff fc95 	bl	8007614 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d302      	bcc.n	8007cfc <xQueueGenericSend+0xd4>
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d129      	bne.n	8007d50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	68b9      	ldr	r1, [r7, #8]
 8007d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d02:	f000 fa0b 	bl	800811c <prvCopyDataToQueue>
 8007d06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d010      	beq.n	8007d32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d12:	3324      	adds	r3, #36	; 0x24
 8007d14:	4618      	mov	r0, r3
 8007d16:	f001 f981 	bl	800901c <xTaskRemoveFromEventList>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d013      	beq.n	8007d48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d20:	4b3f      	ldr	r3, [pc, #252]	; (8007e20 <xQueueGenericSend+0x1f8>)
 8007d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d26:	601a      	str	r2, [r3, #0]
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	e00a      	b.n	8007d48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d007      	beq.n	8007d48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d38:	4b39      	ldr	r3, [pc, #228]	; (8007e20 <xQueueGenericSend+0x1f8>)
 8007d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d3e:	601a      	str	r2, [r3, #0]
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d48:	f7ff fc94 	bl	8007674 <vPortExitCritical>
				return pdPASS;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e063      	b.n	8007e18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d103      	bne.n	8007d5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d56:	f7ff fc8d 	bl	8007674 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	e05c      	b.n	8007e18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d106      	bne.n	8007d72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d64:	f107 0314 	add.w	r3, r7, #20
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f001 f9bd 	bl	80090e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d72:	f7ff fc7f 	bl	8007674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d76:	f000 fea1 	bl	8008abc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d7a:	f7ff fc4b 	bl	8007614 <vPortEnterCritical>
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d84:	b25b      	sxtb	r3, r3
 8007d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8a:	d103      	bne.n	8007d94 <xQueueGenericSend+0x16c>
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d9a:	b25b      	sxtb	r3, r3
 8007d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da0:	d103      	bne.n	8007daa <xQueueGenericSend+0x182>
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007daa:	f7ff fc63 	bl	8007674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dae:	1d3a      	adds	r2, r7, #4
 8007db0:	f107 0314 	add.w	r3, r7, #20
 8007db4:	4611      	mov	r1, r2
 8007db6:	4618      	mov	r0, r3
 8007db8:	f001 f9ac 	bl	8009114 <xTaskCheckForTimeOut>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d124      	bne.n	8007e0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007dc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dc4:	f000 faa2 	bl	800830c <prvIsQueueFull>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d018      	beq.n	8007e00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	3310      	adds	r3, #16
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	4611      	mov	r1, r2
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f001 f8d0 	bl	8008f7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dde:	f000 fa2d 	bl	800823c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007de2:	f000 feb1 	bl	8008b48 <xTaskResumeAll>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f47f af7c 	bne.w	8007ce6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007dee:	4b0c      	ldr	r3, [pc, #48]	; (8007e20 <xQueueGenericSend+0x1f8>)
 8007df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	e772      	b.n	8007ce6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e02:	f000 fa1b 	bl	800823c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e06:	f000 fe9f 	bl	8008b48 <xTaskResumeAll>
 8007e0a:	e76c      	b.n	8007ce6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e0e:	f000 fa15 	bl	800823c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e12:	f000 fe99 	bl	8008b48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3738      	adds	r7, #56	; 0x38
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	e000ed04 	.word	0xe000ed04

08007e24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b090      	sub	sp, #64	; 0x40
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10a      	bne.n	8007e52 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e4e:	bf00      	nop
 8007e50:	e7fe      	b.n	8007e50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d103      	bne.n	8007e60 <xQueueGenericSendFromISR+0x3c>
 8007e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <xQueueGenericSendFromISR+0x40>
 8007e60:	2301      	movs	r3, #1
 8007e62:	e000      	b.n	8007e66 <xQueueGenericSendFromISR+0x42>
 8007e64:	2300      	movs	r3, #0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10a      	bne.n	8007e80 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6e:	f383 8811 	msr	BASEPRI, r3
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e7c:	bf00      	nop
 8007e7e:	e7fe      	b.n	8007e7e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d103      	bne.n	8007e8e <xQueueGenericSendFromISR+0x6a>
 8007e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d101      	bne.n	8007e92 <xQueueGenericSendFromISR+0x6e>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e000      	b.n	8007e94 <xQueueGenericSendFromISR+0x70>
 8007e92:	2300      	movs	r3, #0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10a      	bne.n	8007eae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	623b      	str	r3, [r7, #32]
}
 8007eaa:	bf00      	nop
 8007eac:	e7fe      	b.n	8007eac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007eae:	f7ff fd77 	bl	80079a0 <vPortValidateInterruptPriority>
	__asm volatile
 8007eb2:	f3ef 8211 	mrs	r2, BASEPRI
 8007eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	61fa      	str	r2, [r7, #28]
 8007ec8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007eca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ecc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d302      	bcc.n	8007ee0 <xQueueGenericSendFromISR+0xbc>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d12f      	bne.n	8007f40 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	68b9      	ldr	r1, [r7, #8]
 8007ef4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ef6:	f000 f911 	bl	800811c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007efa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f02:	d112      	bne.n	8007f2a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d016      	beq.n	8007f3a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0e:	3324      	adds	r3, #36	; 0x24
 8007f10:	4618      	mov	r0, r3
 8007f12:	f001 f883 	bl	800901c <xTaskRemoveFromEventList>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00e      	beq.n	8007f3a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00b      	beq.n	8007f3a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	601a      	str	r2, [r3, #0]
 8007f28:	e007      	b.n	8007f3a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f2e:	3301      	adds	r3, #1
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	b25a      	sxtb	r2, r3
 8007f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007f3e:	e001      	b.n	8007f44 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f40:	2300      	movs	r3, #0
 8007f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f46:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f383 8811 	msr	BASEPRI, r3
}
 8007f4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3740      	adds	r7, #64	; 0x40
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
	...

08007f5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b08c      	sub	sp, #48	; 0x30
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10a      	bne.n	8007f8c <xQueueReceive+0x30>
	__asm volatile
 8007f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7a:	f383 8811 	msr	BASEPRI, r3
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	623b      	str	r3, [r7, #32]
}
 8007f88:	bf00      	nop
 8007f8a:	e7fe      	b.n	8007f8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d103      	bne.n	8007f9a <xQueueReceive+0x3e>
 8007f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <xQueueReceive+0x42>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e000      	b.n	8007fa0 <xQueueReceive+0x44>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10a      	bne.n	8007fba <xQueueReceive+0x5e>
	__asm volatile
 8007fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	61fb      	str	r3, [r7, #28]
}
 8007fb6:	bf00      	nop
 8007fb8:	e7fe      	b.n	8007fb8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fba:	f001 fa5d 	bl	8009478 <xTaskGetSchedulerState>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d102      	bne.n	8007fca <xQueueReceive+0x6e>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d101      	bne.n	8007fce <xQueueReceive+0x72>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e000      	b.n	8007fd0 <xQueueReceive+0x74>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10a      	bne.n	8007fea <xQueueReceive+0x8e>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	61bb      	str	r3, [r7, #24]
}
 8007fe6:	bf00      	nop
 8007fe8:	e7fe      	b.n	8007fe8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fea:	f7ff fb13 	bl	8007614 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d01f      	beq.n	800803a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ffa:	68b9      	ldr	r1, [r7, #8]
 8007ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ffe:	f000 f8f7 	bl	80081f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	1e5a      	subs	r2, r3, #1
 8008006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008008:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800800a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00f      	beq.n	8008032 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008014:	3310      	adds	r3, #16
 8008016:	4618      	mov	r0, r3
 8008018:	f001 f800 	bl	800901c <xTaskRemoveFromEventList>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d007      	beq.n	8008032 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008022:	4b3d      	ldr	r3, [pc, #244]	; (8008118 <xQueueReceive+0x1bc>)
 8008024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008032:	f7ff fb1f 	bl	8007674 <vPortExitCritical>
				return pdPASS;
 8008036:	2301      	movs	r3, #1
 8008038:	e069      	b.n	800810e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d103      	bne.n	8008048 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008040:	f7ff fb18 	bl	8007674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008044:	2300      	movs	r3, #0
 8008046:	e062      	b.n	800810e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804a:	2b00      	cmp	r3, #0
 800804c:	d106      	bne.n	800805c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800804e:	f107 0310 	add.w	r3, r7, #16
 8008052:	4618      	mov	r0, r3
 8008054:	f001 f848 	bl	80090e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008058:	2301      	movs	r3, #1
 800805a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800805c:	f7ff fb0a 	bl	8007674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008060:	f000 fd2c 	bl	8008abc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008064:	f7ff fad6 	bl	8007614 <vPortEnterCritical>
 8008068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800806e:	b25b      	sxtb	r3, r3
 8008070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008074:	d103      	bne.n	800807e <xQueueReceive+0x122>
 8008076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008078:	2200      	movs	r2, #0
 800807a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800807e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008080:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008084:	b25b      	sxtb	r3, r3
 8008086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808a:	d103      	bne.n	8008094 <xQueueReceive+0x138>
 800808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008094:	f7ff faee 	bl	8007674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008098:	1d3a      	adds	r2, r7, #4
 800809a:	f107 0310 	add.w	r3, r7, #16
 800809e:	4611      	mov	r1, r2
 80080a0:	4618      	mov	r0, r3
 80080a2:	f001 f837 	bl	8009114 <xTaskCheckForTimeOut>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d123      	bne.n	80080f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ae:	f000 f917 	bl	80082e0 <prvIsQueueEmpty>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d017      	beq.n	80080e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ba:	3324      	adds	r3, #36	; 0x24
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	4611      	mov	r1, r2
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 ff5b 	bl	8008f7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080c8:	f000 f8b8 	bl	800823c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080cc:	f000 fd3c 	bl	8008b48 <xTaskResumeAll>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d189      	bne.n	8007fea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80080d6:	4b10      	ldr	r3, [pc, #64]	; (8008118 <xQueueReceive+0x1bc>)
 80080d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	e780      	b.n	8007fea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80080e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ea:	f000 f8a7 	bl	800823c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080ee:	f000 fd2b 	bl	8008b48 <xTaskResumeAll>
 80080f2:	e77a      	b.n	8007fea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80080f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080f6:	f000 f8a1 	bl	800823c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080fa:	f000 fd25 	bl	8008b48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008100:	f000 f8ee 	bl	80082e0 <prvIsQueueEmpty>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	f43f af6f 	beq.w	8007fea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800810c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800810e:	4618      	mov	r0, r3
 8008110:	3730      	adds	r7, #48	; 0x30
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	e000ed04 	.word	0xe000ed04

0800811c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008128:	2300      	movs	r3, #0
 800812a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008130:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10d      	bne.n	8008156 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d14d      	bne.n	80081de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	4618      	mov	r0, r3
 8008148:	f001 f9b4 	bl	80094b4 <xTaskPriorityDisinherit>
 800814c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	609a      	str	r2, [r3, #8]
 8008154:	e043      	b.n	80081de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d119      	bne.n	8008190 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6858      	ldr	r0, [r3, #4]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008164:	461a      	mov	r2, r3
 8008166:	68b9      	ldr	r1, [r7, #8]
 8008168:	f003 f85e 	bl	800b228 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	685a      	ldr	r2, [r3, #4]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008174:	441a      	add	r2, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	429a      	cmp	r2, r3
 8008184:	d32b      	bcc.n	80081de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	605a      	str	r2, [r3, #4]
 800818e:	e026      	b.n	80081de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	68d8      	ldr	r0, [r3, #12]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008198:	461a      	mov	r2, r3
 800819a:	68b9      	ldr	r1, [r7, #8]
 800819c:	f003 f844 	bl	800b228 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	68da      	ldr	r2, [r3, #12]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a8:	425b      	negs	r3, r3
 80081aa:	441a      	add	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	68da      	ldr	r2, [r3, #12]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d207      	bcs.n	80081cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	689a      	ldr	r2, [r3, #8]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c4:	425b      	negs	r3, r3
 80081c6:	441a      	add	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d105      	bne.n	80081de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d002      	beq.n	80081de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	3b01      	subs	r3, #1
 80081dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80081e6:	697b      	ldr	r3, [r7, #20]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3718      	adds	r7, #24
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d018      	beq.n	8008234 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68da      	ldr	r2, [r3, #12]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820a:	441a      	add	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	68da      	ldr	r2, [r3, #12]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	429a      	cmp	r2, r3
 800821a:	d303      	bcc.n	8008224 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68d9      	ldr	r1, [r3, #12]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822c:	461a      	mov	r2, r3
 800822e:	6838      	ldr	r0, [r7, #0]
 8008230:	f002 fffa 	bl	800b228 <memcpy>
	}
}
 8008234:	bf00      	nop
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008244:	f7ff f9e6 	bl	8007614 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800824e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008250:	e011      	b.n	8008276 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008256:	2b00      	cmp	r3, #0
 8008258:	d012      	beq.n	8008280 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	3324      	adds	r3, #36	; 0x24
 800825e:	4618      	mov	r0, r3
 8008260:	f000 fedc 	bl	800901c <xTaskRemoveFromEventList>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800826a:	f000 ffc5 	bl	80091f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800826e:	7bfb      	ldrb	r3, [r7, #15]
 8008270:	3b01      	subs	r3, #1
 8008272:	b2db      	uxtb	r3, r3
 8008274:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800827a:	2b00      	cmp	r3, #0
 800827c:	dce9      	bgt.n	8008252 <prvUnlockQueue+0x16>
 800827e:	e000      	b.n	8008282 <prvUnlockQueue+0x46>
					break;
 8008280:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	22ff      	movs	r2, #255	; 0xff
 8008286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800828a:	f7ff f9f3 	bl	8007674 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800828e:	f7ff f9c1 	bl	8007614 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008298:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800829a:	e011      	b.n	80082c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d012      	beq.n	80082ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	3310      	adds	r3, #16
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 feb7 	bl	800901c <xTaskRemoveFromEventList>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80082b4:	f000 ffa0 	bl	80091f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	3b01      	subs	r3, #1
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	dce9      	bgt.n	800829c <prvUnlockQueue+0x60>
 80082c8:	e000      	b.n	80082cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80082ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	22ff      	movs	r2, #255	; 0xff
 80082d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80082d4:	f7ff f9ce 	bl	8007674 <vPortExitCritical>
}
 80082d8:	bf00      	nop
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082e8:	f7ff f994 	bl	8007614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d102      	bne.n	80082fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80082f4:	2301      	movs	r3, #1
 80082f6:	60fb      	str	r3, [r7, #12]
 80082f8:	e001      	b.n	80082fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80082fa:	2300      	movs	r3, #0
 80082fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082fe:	f7ff f9b9 	bl	8007674 <vPortExitCritical>

	return xReturn;
 8008302:	68fb      	ldr	r3, [r7, #12]
}
 8008304:	4618      	mov	r0, r3
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008314:	f7ff f97e 	bl	8007614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008320:	429a      	cmp	r2, r3
 8008322:	d102      	bne.n	800832a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008324:	2301      	movs	r3, #1
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	e001      	b.n	800832e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800832a:	2300      	movs	r3, #0
 800832c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800832e:	f7ff f9a1 	bl	8007674 <vPortExitCritical>

	return xReturn;
 8008332:	68fb      	ldr	r3, [r7, #12]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008346:	2300      	movs	r3, #0
 8008348:	60fb      	str	r3, [r7, #12]
 800834a:	e014      	b.n	8008376 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800834c:	4a0f      	ldr	r2, [pc, #60]	; (800838c <vQueueAddToRegistry+0x50>)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10b      	bne.n	8008370 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008358:	490c      	ldr	r1, [pc, #48]	; (800838c <vQueueAddToRegistry+0x50>)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	683a      	ldr	r2, [r7, #0]
 800835e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008362:	4a0a      	ldr	r2, [pc, #40]	; (800838c <vQueueAddToRegistry+0x50>)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	00db      	lsls	r3, r3, #3
 8008368:	4413      	add	r3, r2
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800836e:	e006      	b.n	800837e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	3301      	adds	r3, #1
 8008374:	60fb      	str	r3, [r7, #12]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2b07      	cmp	r3, #7
 800837a:	d9e7      	bls.n	800834c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800837c:	bf00      	nop
 800837e:	bf00      	nop
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	20007370 	.word	0x20007370

08008390 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083a0:	f7ff f938 	bl	8007614 <vPortEnterCritical>
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083aa:	b25b      	sxtb	r3, r3
 80083ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b0:	d103      	bne.n	80083ba <vQueueWaitForMessageRestricted+0x2a>
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083c0:	b25b      	sxtb	r3, r3
 80083c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c6:	d103      	bne.n	80083d0 <vQueueWaitForMessageRestricted+0x40>
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083d0:	f7ff f950 	bl	8007674 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d106      	bne.n	80083ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	3324      	adds	r3, #36	; 0x24
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	68b9      	ldr	r1, [r7, #8]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f000 fded 	bl	8008fc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80083ea:	6978      	ldr	r0, [r7, #20]
 80083ec:	f7ff ff26 	bl	800823c <prvUnlockQueue>
	}
 80083f0:	bf00      	nop
 80083f2:	3718      	adds	r7, #24
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b08e      	sub	sp, #56	; 0x38
 80083fc:	af04      	add	r7, sp, #16
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10a      	bne.n	8008422 <xTaskCreateStatic+0x2a>
	__asm volatile
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	623b      	str	r3, [r7, #32]
}
 800841e:	bf00      	nop
 8008420:	e7fe      	b.n	8008420 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10a      	bne.n	800843e <xTaskCreateStatic+0x46>
	__asm volatile
 8008428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	61fb      	str	r3, [r7, #28]
}
 800843a:	bf00      	nop
 800843c:	e7fe      	b.n	800843c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800843e:	f44f 73da 	mov.w	r3, #436	; 0x1b4
 8008442:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	f5b3 7fda 	cmp.w	r3, #436	; 0x1b4
 800844a:	d00a      	beq.n	8008462 <xTaskCreateStatic+0x6a>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	61bb      	str	r3, [r7, #24]
}
 800845e:	bf00      	nop
 8008460:	e7fe      	b.n	8008460 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008462:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008466:	2b00      	cmp	r3, #0
 8008468:	d01e      	beq.n	80084a8 <xTaskCreateStatic+0xb0>
 800846a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846c:	2b00      	cmp	r3, #0
 800846e:	d01b      	beq.n	80084a8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008472:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008478:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	2202      	movs	r2, #2
 800847e:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008482:	2300      	movs	r3, #0
 8008484:	9303      	str	r3, [sp, #12]
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	9302      	str	r3, [sp, #8]
 800848a:	f107 0314 	add.w	r3, r7, #20
 800848e:	9301      	str	r3, [sp, #4]
 8008490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	68b9      	ldr	r1, [r7, #8]
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f000 f852 	bl	8008544 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084a2:	f000 f903 	bl	80086ac <prvAddNewTaskToReadyList>
 80084a6:	e001      	b.n	80084ac <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80084a8:	2300      	movs	r3, #0
 80084aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084ac:	697b      	ldr	r3, [r7, #20]
	}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3728      	adds	r7, #40	; 0x28
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b08c      	sub	sp, #48	; 0x30
 80084ba:	af04      	add	r7, sp, #16
 80084bc:	60f8      	str	r0, [r7, #12]
 80084be:	60b9      	str	r1, [r7, #8]
 80084c0:	603b      	str	r3, [r7, #0]
 80084c2:	4613      	mov	r3, r2
 80084c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80084c6:	88fb      	ldrh	r3, [r7, #6]
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fe fe62 	bl	8007194 <pvPortMalloc>
 80084d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00f      	beq.n	80084f8 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80084d8:	f44f 70da 	mov.w	r0, #436	; 0x1b4
 80084dc:	f7fe fe5a 	bl	8007194 <pvPortMalloc>
 80084e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d003      	beq.n	80084f0 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	631a      	str	r2, [r3, #48]	; 0x30
 80084ee:	e005      	b.n	80084fc <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80084f0:	6978      	ldr	r0, [r7, #20]
 80084f2:	f7fe fe99 	bl	8007228 <vPortFree>
 80084f6:	e001      	b.n	80084fc <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80084f8:	2300      	movs	r3, #0
 80084fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d017      	beq.n	8008532 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800850a:	88fa      	ldrh	r2, [r7, #6]
 800850c:	2300      	movs	r3, #0
 800850e:	9303      	str	r3, [sp, #12]
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	9302      	str	r3, [sp, #8]
 8008514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008516:	9301      	str	r3, [sp, #4]
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	68b9      	ldr	r1, [r7, #8]
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f000 f80f 	bl	8008544 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008526:	69f8      	ldr	r0, [r7, #28]
 8008528:	f000 f8c0 	bl	80086ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800852c:	2301      	movs	r3, #1
 800852e:	61bb      	str	r3, [r7, #24]
 8008530:	e002      	b.n	8008538 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008532:	f04f 33ff 	mov.w	r3, #4294967295
 8008536:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008538:	69bb      	ldr	r3, [r7, #24]
	}
 800853a:	4618      	mov	r0, r3
 800853c:	3720      	adds	r7, #32
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
	...

08008544 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b088      	sub	sp, #32
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	461a      	mov	r2, r3
 800855c:	21a5      	movs	r1, #165	; 0xa5
 800855e:	f002 fe71 	bl	800b244 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800856c:	3b01      	subs	r3, #1
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	f023 0307 	bic.w	r3, r3, #7
 800857a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	f003 0307 	and.w	r3, r3, #7
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00a      	beq.n	800859c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	617b      	str	r3, [r7, #20]
}
 8008598:	bf00      	nop
 800859a:	e7fe      	b.n	800859a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d01f      	beq.n	80085e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085a2:	2300      	movs	r3, #0
 80085a4:	61fb      	str	r3, [r7, #28]
 80085a6:	e012      	b.n	80085ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	4413      	add	r3, r2
 80085ae:	7819      	ldrb	r1, [r3, #0]
 80085b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	4413      	add	r3, r2
 80085b6:	3334      	adds	r3, #52	; 0x34
 80085b8:	460a      	mov	r2, r1
 80085ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	4413      	add	r3, r2
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d006      	beq.n	80085d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	3301      	adds	r3, #1
 80085cc:	61fb      	str	r3, [r7, #28]
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	2bfe      	cmp	r3, #254	; 0xfe
 80085d2:	d9e9      	bls.n	80085a8 <prvInitialiseNewTask+0x64>
 80085d4:	e000      	b.n	80085d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80085d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 80085e0:	e003      	b.n	80085ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80085e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80085ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ec:	2b37      	cmp	r3, #55	; 0x37
 80085ee:	d901      	bls.n	80085f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80085f0:	2337      	movs	r3, #55	; 0x37
 80085f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80085f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80085fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085fe:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		pxNewTCB->uxMutexesHeld = 0;
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	2200      	movs	r2, #0
 8008606:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	3304      	adds	r3, #4
 800860e:	4618      	mov	r0, r3
 8008610:	f7fe fe42 	bl	8007298 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008616:	3318      	adds	r3, #24
 8008618:	4618      	mov	r0, r3
 800861a:	f7fe fe3d 	bl	8007298 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800861e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008622:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008632:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8008634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008636:	2200      	movs	r2, #0
 8008638:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800863c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863e:	2200      	movs	r2, #0
 8008640:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008646:	2200      	movs	r2, #0
 8008648:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800864c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8008652:	2260      	movs	r2, #96	; 0x60
 8008654:	2100      	movs	r1, #0
 8008656:	4618      	mov	r0, r3
 8008658:	f002 fdf4 	bl	800b244 <memset>
 800865c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865e:	4a10      	ldr	r2, [pc, #64]	; (80086a0 <prvInitialiseNewTask+0x15c>)
 8008660:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 8008664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008666:	4a0f      	ldr	r2, [pc, #60]	; (80086a4 <prvInitialiseNewTask+0x160>)
 8008668:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800866c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866e:	4a0e      	ldr	r2, [pc, #56]	; (80086a8 <prvInitialiseNewTask+0x164>)
 8008670:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8008674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008676:	2200      	movs	r2, #0
 8008678:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	68f9      	ldr	r1, [r7, #12]
 8008680:	69b8      	ldr	r0, [r7, #24]
 8008682:	f7fe fe9d 	bl	80073c0 <pxPortInitialiseStack>
 8008686:	4602      	mov	r2, r0
 8008688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800868c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868e:	2b00      	cmp	r3, #0
 8008690:	d002      	beq.n	8008698 <prvInitialiseNewTask+0x154>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008696:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008698:	bf00      	nop
 800869a:	3720      	adds	r7, #32
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	0800b750 	.word	0x0800b750
 80086a4:	0800b770 	.word	0x0800b770
 80086a8:	0800b730 	.word	0x0800b730

080086ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086b4:	f7fe ffae 	bl	8007614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086b8:	4b2d      	ldr	r3, [pc, #180]	; (8008770 <prvAddNewTaskToReadyList+0xc4>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3301      	adds	r3, #1
 80086be:	4a2c      	ldr	r2, [pc, #176]	; (8008770 <prvAddNewTaskToReadyList+0xc4>)
 80086c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80086c2:	4b2c      	ldr	r3, [pc, #176]	; (8008774 <prvAddNewTaskToReadyList+0xc8>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d109      	bne.n	80086de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086ca:	4a2a      	ldr	r2, [pc, #168]	; (8008774 <prvAddNewTaskToReadyList+0xc8>)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086d0:	4b27      	ldr	r3, [pc, #156]	; (8008770 <prvAddNewTaskToReadyList+0xc4>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d110      	bne.n	80086fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086d8:	f000 fe0a 	bl	80092f0 <prvInitialiseTaskLists>
 80086dc:	e00d      	b.n	80086fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086de:	4b26      	ldr	r3, [pc, #152]	; (8008778 <prvAddNewTaskToReadyList+0xcc>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d109      	bne.n	80086fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086e6:	4b23      	ldr	r3, [pc, #140]	; (8008774 <prvAddNewTaskToReadyList+0xc8>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d802      	bhi.n	80086fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80086f4:	4a1f      	ldr	r2, [pc, #124]	; (8008774 <prvAddNewTaskToReadyList+0xc8>)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80086fa:	4b20      	ldr	r3, [pc, #128]	; (800877c <prvAddNewTaskToReadyList+0xd0>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3301      	adds	r3, #1
 8008700:	4a1e      	ldr	r2, [pc, #120]	; (800877c <prvAddNewTaskToReadyList+0xd0>)
 8008702:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008704:	4b1d      	ldr	r3, [pc, #116]	; (800877c <prvAddNewTaskToReadyList+0xd0>)
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008712:	4b1b      	ldr	r3, [pc, #108]	; (8008780 <prvAddNewTaskToReadyList+0xd4>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	429a      	cmp	r2, r3
 8008718:	d903      	bls.n	8008722 <prvAddNewTaskToReadyList+0x76>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871e:	4a18      	ldr	r2, [pc, #96]	; (8008780 <prvAddNewTaskToReadyList+0xd4>)
 8008720:	6013      	str	r3, [r2, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008726:	4613      	mov	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4a15      	ldr	r2, [pc, #84]	; (8008784 <prvAddNewTaskToReadyList+0xd8>)
 8008730:	441a      	add	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	3304      	adds	r3, #4
 8008736:	4619      	mov	r1, r3
 8008738:	4610      	mov	r0, r2
 800873a:	f7fe fdba 	bl	80072b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800873e:	f7fe ff99 	bl	8007674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008742:	4b0d      	ldr	r3, [pc, #52]	; (8008778 <prvAddNewTaskToReadyList+0xcc>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00e      	beq.n	8008768 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800874a:	4b0a      	ldr	r3, [pc, #40]	; (8008774 <prvAddNewTaskToReadyList+0xc8>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008754:	429a      	cmp	r2, r3
 8008756:	d207      	bcs.n	8008768 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008758:	4b0b      	ldr	r3, [pc, #44]	; (8008788 <prvAddNewTaskToReadyList+0xdc>)
 800875a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800875e:	601a      	str	r2, [r3, #0]
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008768:	bf00      	nop
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	20007888 	.word	0x20007888
 8008774:	200073b0 	.word	0x200073b0
 8008778:	20007894 	.word	0x20007894
 800877c:	200078a4 	.word	0x200078a4
 8008780:	20007890 	.word	0x20007890
 8008784:	200073b4 	.word	0x200073b4
 8008788:	e000ed04 	.word	0xe000ed04

0800878c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800878c:	b580      	push	{r7, lr}
 800878e:	b08a      	sub	sp, #40	; 0x28
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008796:	2300      	movs	r3, #0
 8008798:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10a      	bne.n	80087b6 <vTaskDelayUntil+0x2a>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	617b      	str	r3, [r7, #20]
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d10a      	bne.n	80087d2 <vTaskDelayUntil+0x46>
	__asm volatile
 80087bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	613b      	str	r3, [r7, #16]
}
 80087ce:	bf00      	nop
 80087d0:	e7fe      	b.n	80087d0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80087d2:	4b2a      	ldr	r3, [pc, #168]	; (800887c <vTaskDelayUntil+0xf0>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00a      	beq.n	80087f0 <vTaskDelayUntil+0x64>
	__asm volatile
 80087da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	60fb      	str	r3, [r7, #12]
}
 80087ec:	bf00      	nop
 80087ee:	e7fe      	b.n	80087ee <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80087f0:	f000 f964 	bl	8008abc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80087f4:	4b22      	ldr	r3, [pc, #136]	; (8008880 <vTaskDelayUntil+0xf4>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	4413      	add	r3, r2
 8008802:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6a3a      	ldr	r2, [r7, #32]
 800880a:	429a      	cmp	r2, r3
 800880c:	d20b      	bcs.n	8008826 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	69fa      	ldr	r2, [r7, #28]
 8008814:	429a      	cmp	r2, r3
 8008816:	d211      	bcs.n	800883c <vTaskDelayUntil+0xb0>
 8008818:	69fa      	ldr	r2, [r7, #28]
 800881a:	6a3b      	ldr	r3, [r7, #32]
 800881c:	429a      	cmp	r2, r3
 800881e:	d90d      	bls.n	800883c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008820:	2301      	movs	r3, #1
 8008822:	627b      	str	r3, [r7, #36]	; 0x24
 8008824:	e00a      	b.n	800883c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	69fa      	ldr	r2, [r7, #28]
 800882c:	429a      	cmp	r2, r3
 800882e:	d303      	bcc.n	8008838 <vTaskDelayUntil+0xac>
 8008830:	69fa      	ldr	r2, [r7, #28]
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	429a      	cmp	r2, r3
 8008836:	d901      	bls.n	800883c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008838:	2301      	movs	r3, #1
 800883a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	69fa      	ldr	r2, [r7, #28]
 8008840:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	2b00      	cmp	r3, #0
 8008846:	d006      	beq.n	8008856 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008848:	69fa      	ldr	r2, [r7, #28]
 800884a:	6a3b      	ldr	r3, [r7, #32]
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	2100      	movs	r1, #0
 8008850:	4618      	mov	r0, r3
 8008852:	f000 fea3 	bl	800959c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008856:	f000 f977 	bl	8008b48 <xTaskResumeAll>
 800885a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d107      	bne.n	8008872 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8008862:	4b08      	ldr	r3, [pc, #32]	; (8008884 <vTaskDelayUntil+0xf8>)
 8008864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008868:	601a      	str	r2, [r3, #0]
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008872:	bf00      	nop
 8008874:	3728      	adds	r7, #40	; 0x28
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	200078b0 	.word	0x200078b0
 8008880:	2000788c 	.word	0x2000788c
 8008884:	e000ed04 	.word	0xe000ed04

08008888 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008890:	2300      	movs	r3, #0
 8008892:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d017      	beq.n	80088ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800889a:	4b13      	ldr	r3, [pc, #76]	; (80088e8 <vTaskDelay+0x60>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00a      	beq.n	80088b8 <vTaskDelay+0x30>
	__asm volatile
 80088a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	60bb      	str	r3, [r7, #8]
}
 80088b4:	bf00      	nop
 80088b6:	e7fe      	b.n	80088b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80088b8:	f000 f900 	bl	8008abc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088bc:	2100      	movs	r1, #0
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fe6c 	bl	800959c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80088c4:	f000 f940 	bl	8008b48 <xTaskResumeAll>
 80088c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d107      	bne.n	80088e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80088d0:	4b06      	ldr	r3, [pc, #24]	; (80088ec <vTaskDelay+0x64>)
 80088d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088d6:	601a      	str	r2, [r3, #0]
 80088d8:	f3bf 8f4f 	dsb	sy
 80088dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80088e0:	bf00      	nop
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	200078b0 	.word	0x200078b0
 80088ec:	e000ed04 	.word	0xe000ed04

080088f0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80088f8:	f7fe fe8c 	bl	8007614 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d102      	bne.n	8008908 <vTaskSuspend+0x18>
 8008902:	4b30      	ldr	r3, [pc, #192]	; (80089c4 <vTaskSuspend+0xd4>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	e000      	b.n	800890a <vTaskSuspend+0x1a>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	3304      	adds	r3, #4
 8008910:	4618      	mov	r0, r3
 8008912:	f7fe fd2b 	bl	800736c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891a:	2b00      	cmp	r3, #0
 800891c:	d004      	beq.n	8008928 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	3318      	adds	r3, #24
 8008922:	4618      	mov	r0, r3
 8008924:	f7fe fd22 	bl	800736c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	3304      	adds	r3, #4
 800892c:	4619      	mov	r1, r3
 800892e:	4826      	ldr	r0, [pc, #152]	; (80089c8 <vTaskSuspend+0xd8>)
 8008930:	f7fe fcbf 	bl	80072b2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b01      	cmp	r3, #1
 800893e:	d103      	bne.n	8008948 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8008948:	f7fe fe94 	bl	8007674 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800894c:	4b1f      	ldr	r3, [pc, #124]	; (80089cc <vTaskSuspend+0xdc>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d005      	beq.n	8008960 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8008954:	f7fe fe5e 	bl	8007614 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8008958:	f000 fd6e 	bl	8009438 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800895c:	f7fe fe8a 	bl	8007674 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8008960:	4b18      	ldr	r3, [pc, #96]	; (80089c4 <vTaskSuspend+0xd4>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	429a      	cmp	r2, r3
 8008968:	d127      	bne.n	80089ba <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800896a:	4b18      	ldr	r3, [pc, #96]	; (80089cc <vTaskSuspend+0xdc>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d017      	beq.n	80089a2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8008972:	4b17      	ldr	r3, [pc, #92]	; (80089d0 <vTaskSuspend+0xe0>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00a      	beq.n	8008990 <vTaskSuspend+0xa0>
	__asm volatile
 800897a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897e:	f383 8811 	msr	BASEPRI, r3
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	f3bf 8f4f 	dsb	sy
 800898a:	60bb      	str	r3, [r7, #8]
}
 800898c:	bf00      	nop
 800898e:	e7fe      	b.n	800898e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8008990:	4b10      	ldr	r3, [pc, #64]	; (80089d4 <vTaskSuspend+0xe4>)
 8008992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008996:	601a      	str	r2, [r3, #0]
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089a0:	e00b      	b.n	80089ba <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80089a2:	4b09      	ldr	r3, [pc, #36]	; (80089c8 <vTaskSuspend+0xd8>)
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	4b0c      	ldr	r3, [pc, #48]	; (80089d8 <vTaskSuspend+0xe8>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d103      	bne.n	80089b6 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80089ae:	4b05      	ldr	r3, [pc, #20]	; (80089c4 <vTaskSuspend+0xd4>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	601a      	str	r2, [r3, #0]
	}
 80089b4:	e001      	b.n	80089ba <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80089b6:	f000 fa5f 	bl	8008e78 <vTaskSwitchContext>
	}
 80089ba:	bf00      	nop
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	200073b0 	.word	0x200073b0
 80089c8:	20007870 	.word	0x20007870
 80089cc:	20007894 	.word	0x20007894
 80089d0:	200078b0 	.word	0x200078b0
 80089d4:	e000ed04 	.word	0xe000ed04
 80089d8:	20007888 	.word	0x20007888

080089dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b08a      	sub	sp, #40	; 0x28
 80089e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80089e2:	2300      	movs	r3, #0
 80089e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80089e6:	2300      	movs	r3, #0
 80089e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80089ea:	463a      	mov	r2, r7
 80089ec:	1d39      	adds	r1, r7, #4
 80089ee:	f107 0308 	add.w	r3, r7, #8
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fe fb9a 	bl	800712c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80089f8:	6839      	ldr	r1, [r7, #0]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	9202      	str	r2, [sp, #8]
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	2300      	movs	r3, #0
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	2300      	movs	r3, #0
 8008a08:	460a      	mov	r2, r1
 8008a0a:	4924      	ldr	r1, [pc, #144]	; (8008a9c <vTaskStartScheduler+0xc0>)
 8008a0c:	4824      	ldr	r0, [pc, #144]	; (8008aa0 <vTaskStartScheduler+0xc4>)
 8008a0e:	f7ff fcf3 	bl	80083f8 <xTaskCreateStatic>
 8008a12:	4603      	mov	r3, r0
 8008a14:	4a23      	ldr	r2, [pc, #140]	; (8008aa4 <vTaskStartScheduler+0xc8>)
 8008a16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a18:	4b22      	ldr	r3, [pc, #136]	; (8008aa4 <vTaskStartScheduler+0xc8>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a20:	2301      	movs	r3, #1
 8008a22:	617b      	str	r3, [r7, #20]
 8008a24:	e001      	b.n	8008a2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a26:	2300      	movs	r3, #0
 8008a28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d102      	bne.n	8008a36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008a30:	f000 fe0e 	bl	8009650 <xTimerCreateTimerTask>
 8008a34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d11c      	bne.n	8008a76 <vTaskStartScheduler+0x9a>
	__asm volatile
 8008a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a40:	f383 8811 	msr	BASEPRI, r3
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	613b      	str	r3, [r7, #16]
}
 8008a4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a50:	4b15      	ldr	r3, [pc, #84]	; (8008aa8 <vTaskStartScheduler+0xcc>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8008a58:	4a14      	ldr	r2, [pc, #80]	; (8008aac <vTaskStartScheduler+0xd0>)
 8008a5a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a5c:	4b14      	ldr	r3, [pc, #80]	; (8008ab0 <vTaskStartScheduler+0xd4>)
 8008a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a64:	4b13      	ldr	r3, [pc, #76]	; (8008ab4 <vTaskStartScheduler+0xd8>)
 8008a66:	2201      	movs	r2, #1
 8008a68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a6a:	4b13      	ldr	r3, [pc, #76]	; (8008ab8 <vTaskStartScheduler+0xdc>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a70:	f7fe fd2e 	bl	80074d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a74:	e00e      	b.n	8008a94 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a7c:	d10a      	bne.n	8008a94 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	60fb      	str	r3, [r7, #12]
}
 8008a90:	bf00      	nop
 8008a92:	e7fe      	b.n	8008a92 <vTaskStartScheduler+0xb6>
}
 8008a94:	bf00      	nop
 8008a96:	3718      	adds	r7, #24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	0800b5f8 	.word	0x0800b5f8
 8008aa0:	08009211 	.word	0x08009211
 8008aa4:	200078ac 	.word	0x200078ac
 8008aa8:	200073b0 	.word	0x200073b0
 8008aac:	20000014 	.word	0x20000014
 8008ab0:	200078a8 	.word	0x200078a8
 8008ab4:	20007894 	.word	0x20007894
 8008ab8:	2000788c 	.word	0x2000788c

08008abc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008abc:	b480      	push	{r7}
 8008abe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ac0:	4b04      	ldr	r3, [pc, #16]	; (8008ad4 <vTaskSuspendAll+0x18>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	4a03      	ldr	r2, [pc, #12]	; (8008ad4 <vTaskSuspendAll+0x18>)
 8008ac8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008aca:	bf00      	nop
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	200078b0 	.word	0x200078b0

08008ad8 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8008ae2:	4b14      	ldr	r3, [pc, #80]	; (8008b34 <prvGetExpectedIdleTime+0x5c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8008aea:	2301      	movs	r3, #1
 8008aec:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8008aee:	4b12      	ldr	r3, [pc, #72]	; (8008b38 <prvGetExpectedIdleTime+0x60>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d002      	beq.n	8008afe <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8008af8:	2300      	movs	r3, #0
 8008afa:	607b      	str	r3, [r7, #4]
 8008afc:	e012      	b.n	8008b24 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8008afe:	4b0f      	ldr	r3, [pc, #60]	; (8008b3c <prvGetExpectedIdleTime+0x64>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d902      	bls.n	8008b0c <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	607b      	str	r3, [r7, #4]
 8008b0a:	e00b      	b.n	8008b24 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d002      	beq.n	8008b18 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8008b12:	2300      	movs	r3, #0
 8008b14:	607b      	str	r3, [r7, #4]
 8008b16:	e005      	b.n	8008b24 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8008b18:	4b09      	ldr	r3, [pc, #36]	; (8008b40 <prvGetExpectedIdleTime+0x68>)
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	4b09      	ldr	r3, [pc, #36]	; (8008b44 <prvGetExpectedIdleTime+0x6c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8008b24:	687b      	ldr	r3, [r7, #4]
	}
 8008b26:	4618      	mov	r0, r3
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	20007890 	.word	0x20007890
 8008b38:	200073b0 	.word	0x200073b0
 8008b3c:	200073b4 	.word	0x200073b4
 8008b40:	200078a8 	.word	0x200078a8
 8008b44:	2000788c 	.word	0x2000788c

08008b48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b52:	2300      	movs	r3, #0
 8008b54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b56:	4b42      	ldr	r3, [pc, #264]	; (8008c60 <xTaskResumeAll+0x118>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10a      	bne.n	8008b74 <xTaskResumeAll+0x2c>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	603b      	str	r3, [r7, #0]
}
 8008b70:	bf00      	nop
 8008b72:	e7fe      	b.n	8008b72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b74:	f7fe fd4e 	bl	8007614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b78:	4b39      	ldr	r3, [pc, #228]	; (8008c60 <xTaskResumeAll+0x118>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	4a38      	ldr	r2, [pc, #224]	; (8008c60 <xTaskResumeAll+0x118>)
 8008b80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b82:	4b37      	ldr	r3, [pc, #220]	; (8008c60 <xTaskResumeAll+0x118>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d162      	bne.n	8008c50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b8a:	4b36      	ldr	r3, [pc, #216]	; (8008c64 <xTaskResumeAll+0x11c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d05e      	beq.n	8008c50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b92:	e02f      	b.n	8008bf4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b94:	4b34      	ldr	r3, [pc, #208]	; (8008c68 <xTaskResumeAll+0x120>)
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	3318      	adds	r3, #24
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7fe fbe3 	bl	800736c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	3304      	adds	r3, #4
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fe fbde 	bl	800736c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb4:	4b2d      	ldr	r3, [pc, #180]	; (8008c6c <xTaskResumeAll+0x124>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d903      	bls.n	8008bc4 <xTaskResumeAll+0x7c>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc0:	4a2a      	ldr	r2, [pc, #168]	; (8008c6c <xTaskResumeAll+0x124>)
 8008bc2:	6013      	str	r3, [r2, #0]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc8:	4613      	mov	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4a27      	ldr	r2, [pc, #156]	; (8008c70 <xTaskResumeAll+0x128>)
 8008bd2:	441a      	add	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4610      	mov	r0, r2
 8008bdc:	f7fe fb69 	bl	80072b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be4:	4b23      	ldr	r3, [pc, #140]	; (8008c74 <xTaskResumeAll+0x12c>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d302      	bcc.n	8008bf4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008bee:	4b22      	ldr	r3, [pc, #136]	; (8008c78 <xTaskResumeAll+0x130>)
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bf4:	4b1c      	ldr	r3, [pc, #112]	; (8008c68 <xTaskResumeAll+0x120>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1cb      	bne.n	8008b94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d001      	beq.n	8008c06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c02:	f000 fc19 	bl	8009438 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008c06:	4b1d      	ldr	r3, [pc, #116]	; (8008c7c <xTaskResumeAll+0x134>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d010      	beq.n	8008c34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c12:	f000 f86f 	bl	8008cf4 <xTaskIncrementTick>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d002      	beq.n	8008c22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008c1c:	4b16      	ldr	r3, [pc, #88]	; (8008c78 <xTaskResumeAll+0x130>)
 8008c1e:	2201      	movs	r2, #1
 8008c20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1f1      	bne.n	8008c12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008c2e:	4b13      	ldr	r3, [pc, #76]	; (8008c7c <xTaskResumeAll+0x134>)
 8008c30:	2200      	movs	r2, #0
 8008c32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c34:	4b10      	ldr	r3, [pc, #64]	; (8008c78 <xTaskResumeAll+0x130>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d009      	beq.n	8008c50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c40:	4b0f      	ldr	r3, [pc, #60]	; (8008c80 <xTaskResumeAll+0x138>)
 8008c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c46:	601a      	str	r2, [r3, #0]
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c50:	f7fe fd10 	bl	8007674 <vPortExitCritical>

	return xAlreadyYielded;
 8008c54:	68bb      	ldr	r3, [r7, #8]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	200078b0 	.word	0x200078b0
 8008c64:	20007888 	.word	0x20007888
 8008c68:	20007844 	.word	0x20007844
 8008c6c:	20007890 	.word	0x20007890
 8008c70:	200073b4 	.word	0x200073b4
 8008c74:	200073b0 	.word	0x200073b0
 8008c78:	2000789c 	.word	0x2000789c
 8008c7c:	20007898 	.word	0x20007898
 8008c80:	e000ed04 	.word	0xe000ed04

08008c84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c8a:	4b05      	ldr	r3, [pc, #20]	; (8008ca0 <xTaskGetTickCount+0x1c>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c90:	687b      	ldr	r3, [r7, #4]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	2000788c 	.word	0x2000788c

08008ca4 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8008cac:	4b0f      	ldr	r3, [pc, #60]	; (8008cec <vTaskStepTick+0x48>)
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	441a      	add	r2, r3
 8008cb4:	4b0e      	ldr	r3, [pc, #56]	; (8008cf0 <vTaskStepTick+0x4c>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d90a      	bls.n	8008cd2 <vTaskStepTick+0x2e>
	__asm volatile
 8008cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc0:	f383 8811 	msr	BASEPRI, r3
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	60fb      	str	r3, [r7, #12]
}
 8008cce:	bf00      	nop
 8008cd0:	e7fe      	b.n	8008cd0 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 8008cd2:	4b06      	ldr	r3, [pc, #24]	; (8008cec <vTaskStepTick+0x48>)
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4413      	add	r3, r2
 8008cda:	4a04      	ldr	r2, [pc, #16]	; (8008cec <vTaskStepTick+0x48>)
 8008cdc:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8008cde:	bf00      	nop
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	2000788c 	.word	0x2000788c
 8008cf0:	200078a8 	.word	0x200078a8

08008cf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cfe:	4b53      	ldr	r3, [pc, #332]	; (8008e4c <xTaskIncrementTick+0x158>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f040 8095 	bne.w	8008e32 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d08:	4b51      	ldr	r3, [pc, #324]	; (8008e50 <xTaskIncrementTick+0x15c>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d10:	4a4f      	ldr	r2, [pc, #316]	; (8008e50 <xTaskIncrementTick+0x15c>)
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d120      	bne.n	8008d5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d1c:	4b4d      	ldr	r3, [pc, #308]	; (8008e54 <xTaskIncrementTick+0x160>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00a      	beq.n	8008d3c <xTaskIncrementTick+0x48>
	__asm volatile
 8008d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	603b      	str	r3, [r7, #0]
}
 8008d38:	bf00      	nop
 8008d3a:	e7fe      	b.n	8008d3a <xTaskIncrementTick+0x46>
 8008d3c:	4b45      	ldr	r3, [pc, #276]	; (8008e54 <xTaskIncrementTick+0x160>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	60fb      	str	r3, [r7, #12]
 8008d42:	4b45      	ldr	r3, [pc, #276]	; (8008e58 <xTaskIncrementTick+0x164>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a43      	ldr	r2, [pc, #268]	; (8008e54 <xTaskIncrementTick+0x160>)
 8008d48:	6013      	str	r3, [r2, #0]
 8008d4a:	4a43      	ldr	r2, [pc, #268]	; (8008e58 <xTaskIncrementTick+0x164>)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6013      	str	r3, [r2, #0]
 8008d50:	4b42      	ldr	r3, [pc, #264]	; (8008e5c <xTaskIncrementTick+0x168>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	3301      	adds	r3, #1
 8008d56:	4a41      	ldr	r2, [pc, #260]	; (8008e5c <xTaskIncrementTick+0x168>)
 8008d58:	6013      	str	r3, [r2, #0]
 8008d5a:	f000 fb6d 	bl	8009438 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d5e:	4b40      	ldr	r3, [pc, #256]	; (8008e60 <xTaskIncrementTick+0x16c>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d349      	bcc.n	8008dfc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d68:	4b3a      	ldr	r3, [pc, #232]	; (8008e54 <xTaskIncrementTick+0x160>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d104      	bne.n	8008d7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d72:	4b3b      	ldr	r3, [pc, #236]	; (8008e60 <xTaskIncrementTick+0x16c>)
 8008d74:	f04f 32ff 	mov.w	r2, #4294967295
 8008d78:	601a      	str	r2, [r3, #0]
					break;
 8008d7a:	e03f      	b.n	8008dfc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d7c:	4b35      	ldr	r3, [pc, #212]	; (8008e54 <xTaskIncrementTick+0x160>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d203      	bcs.n	8008d9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d94:	4a32      	ldr	r2, [pc, #200]	; (8008e60 <xTaskIncrementTick+0x16c>)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d9a:	e02f      	b.n	8008dfc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	3304      	adds	r3, #4
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fe fae3 	bl	800736c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d004      	beq.n	8008db8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	3318      	adds	r3, #24
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fe fada 	bl	800736c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dbc:	4b29      	ldr	r3, [pc, #164]	; (8008e64 <xTaskIncrementTick+0x170>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d903      	bls.n	8008dcc <xTaskIncrementTick+0xd8>
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc8:	4a26      	ldr	r2, [pc, #152]	; (8008e64 <xTaskIncrementTick+0x170>)
 8008dca:	6013      	str	r3, [r2, #0]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	4413      	add	r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4a23      	ldr	r2, [pc, #140]	; (8008e68 <xTaskIncrementTick+0x174>)
 8008dda:	441a      	add	r2, r3
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	3304      	adds	r3, #4
 8008de0:	4619      	mov	r1, r3
 8008de2:	4610      	mov	r0, r2
 8008de4:	f7fe fa65 	bl	80072b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dec:	4b1f      	ldr	r3, [pc, #124]	; (8008e6c <xTaskIncrementTick+0x178>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d3b8      	bcc.n	8008d68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008df6:	2301      	movs	r3, #1
 8008df8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dfa:	e7b5      	b.n	8008d68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008dfc:	4b1b      	ldr	r3, [pc, #108]	; (8008e6c <xTaskIncrementTick+0x178>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e02:	4919      	ldr	r1, [pc, #100]	; (8008e68 <xTaskIncrementTick+0x174>)
 8008e04:	4613      	mov	r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4413      	add	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	440b      	add	r3, r1
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d901      	bls.n	8008e18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008e14:	2301      	movs	r3, #1
 8008e16:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8008e18:	4b15      	ldr	r3, [pc, #84]	; (8008e70 <xTaskIncrementTick+0x17c>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d101      	bne.n	8008e24 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8008e20:	f7f8 fe0e 	bl	8001a40 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008e24:	4b13      	ldr	r3, [pc, #76]	; (8008e74 <xTaskIncrementTick+0x180>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d009      	beq.n	8008e40 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	617b      	str	r3, [r7, #20]
 8008e30:	e006      	b.n	8008e40 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008e32:	4b0f      	ldr	r3, [pc, #60]	; (8008e70 <xTaskIncrementTick+0x17c>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	3301      	adds	r3, #1
 8008e38:	4a0d      	ldr	r2, [pc, #52]	; (8008e70 <xTaskIncrementTick+0x17c>)
 8008e3a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8008e3c:	f7f8 fe00 	bl	8001a40 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8008e40:	697b      	ldr	r3, [r7, #20]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3718      	adds	r7, #24
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	200078b0 	.word	0x200078b0
 8008e50:	2000788c 	.word	0x2000788c
 8008e54:	2000783c 	.word	0x2000783c
 8008e58:	20007840 	.word	0x20007840
 8008e5c:	200078a0 	.word	0x200078a0
 8008e60:	200078a8 	.word	0x200078a8
 8008e64:	20007890 	.word	0x20007890
 8008e68:	200073b4 	.word	0x200073b4
 8008e6c:	200073b0 	.word	0x200073b0
 8008e70:	20007898 	.word	0x20007898
 8008e74:	2000789c 	.word	0x2000789c

08008e78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e7e:	4b38      	ldr	r3, [pc, #224]	; (8008f60 <vTaskSwitchContext+0xe8>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d003      	beq.n	8008e8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e86:	4b37      	ldr	r3, [pc, #220]	; (8008f64 <vTaskSwitchContext+0xec>)
 8008e88:	2201      	movs	r2, #1
 8008e8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e8c:	e064      	b.n	8008f58 <vTaskSwitchContext+0xe0>
		xYieldPending = pdFALSE;
 8008e8e:	4b35      	ldr	r3, [pc, #212]	; (8008f64 <vTaskSwitchContext+0xec>)
 8008e90:	2200      	movs	r2, #0
 8008e92:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008e94:	4b34      	ldr	r3, [pc, #208]	; (8008f68 <vTaskSwitchContext+0xf0>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	4b33      	ldr	r3, [pc, #204]	; (8008f68 <vTaskSwitchContext+0xf0>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d808      	bhi.n	8008eb6 <vTaskSwitchContext+0x3e>
 8008ea4:	4b30      	ldr	r3, [pc, #192]	; (8008f68 <vTaskSwitchContext+0xf0>)
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	4b2f      	ldr	r3, [pc, #188]	; (8008f68 <vTaskSwitchContext+0xf0>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3334      	adds	r3, #52	; 0x34
 8008eae:	4619      	mov	r1, r3
 8008eb0:	4610      	mov	r0, r2
 8008eb2:	f7f8 fdd3 	bl	8001a5c <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 8008eb6:	4b2c      	ldr	r3, [pc, #176]	; (8008f68 <vTaskSwitchContext+0xf0>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a2c      	ldr	r2, [pc, #176]	; (8008f6c <vTaskSwitchContext+0xf4>)
 8008ebc:	6812      	ldr	r2, [r2, #0]
 8008ebe:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ec2:	4b2b      	ldr	r3, [pc, #172]	; (8008f70 <vTaskSwitchContext+0xf8>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	e010      	b.n	8008eec <vTaskSwitchContext+0x74>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d10a      	bne.n	8008ee6 <vTaskSwitchContext+0x6e>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	607b      	str	r3, [r7, #4]
}
 8008ee2:	bf00      	nop
 8008ee4:	e7fe      	b.n	8008ee4 <vTaskSwitchContext+0x6c>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	60fb      	str	r3, [r7, #12]
 8008eec:	4921      	ldr	r1, [pc, #132]	; (8008f74 <vTaskSwitchContext+0xfc>)
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	440b      	add	r3, r1
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d0e4      	beq.n	8008eca <vTaskSwitchContext+0x52>
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	4613      	mov	r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	4a1a      	ldr	r2, [pc, #104]	; (8008f74 <vTaskSwitchContext+0xfc>)
 8008f0c:	4413      	add	r3, r2
 8008f0e:	60bb      	str	r3, [r7, #8]
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	685a      	ldr	r2, [r3, #4]
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	605a      	str	r2, [r3, #4]
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	685a      	ldr	r2, [r3, #4]
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	3308      	adds	r3, #8
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d104      	bne.n	8008f30 <vTaskSwitchContext+0xb8>
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	685a      	ldr	r2, [r3, #4]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	605a      	str	r2, [r3, #4]
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	4a0c      	ldr	r2, [pc, #48]	; (8008f68 <vTaskSwitchContext+0xf0>)
 8008f38:	6013      	str	r3, [r2, #0]
 8008f3a:	4a0d      	ldr	r2, [pc, #52]	; (8008f70 <vTaskSwitchContext+0xf8>)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 8008f40:	4b09      	ldr	r3, [pc, #36]	; (8008f68 <vTaskSwitchContext+0xf0>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8008f48:	4a08      	ldr	r2, [pc, #32]	; (8008f6c <vTaskSwitchContext+0xf4>)
 8008f4a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f4c:	4b06      	ldr	r3, [pc, #24]	; (8008f68 <vTaskSwitchContext+0xf0>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8008f54:	4a08      	ldr	r2, [pc, #32]	; (8008f78 <vTaskSwitchContext+0x100>)
 8008f56:	6013      	str	r3, [r2, #0]
}
 8008f58:	bf00      	nop
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	200078b0 	.word	0x200078b0
 8008f64:	2000789c 	.word	0x2000789c
 8008f68:	200073b0 	.word	0x200073b0
 8008f6c:	20007884 	.word	0x20007884
 8008f70:	20007890 	.word	0x20007890
 8008f74:	200073b4 	.word	0x200073b4
 8008f78:	20000014 	.word	0x20000014

08008f7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10a      	bne.n	8008fa2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	60fb      	str	r3, [r7, #12]
}
 8008f9e:	bf00      	nop
 8008fa0:	e7fe      	b.n	8008fa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fa2:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <vTaskPlaceOnEventList+0x44>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3318      	adds	r3, #24
 8008fa8:	4619      	mov	r1, r3
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7fe f9a5 	bl	80072fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	6838      	ldr	r0, [r7, #0]
 8008fb4:	f000 faf2 	bl	800959c <prvAddCurrentTaskToDelayedList>
}
 8008fb8:	bf00      	nop
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	200073b0 	.word	0x200073b0

08008fc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d10a      	bne.n	8008fec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	617b      	str	r3, [r7, #20]
}
 8008fe8:	bf00      	nop
 8008fea:	e7fe      	b.n	8008fea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fec:	4b0a      	ldr	r3, [pc, #40]	; (8009018 <vTaskPlaceOnEventListRestricted+0x54>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3318      	adds	r3, #24
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f7fe f95c 	bl	80072b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d002      	beq.n	8009006 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009000:	f04f 33ff 	mov.w	r3, #4294967295
 8009004:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009006:	6879      	ldr	r1, [r7, #4]
 8009008:	68b8      	ldr	r0, [r7, #8]
 800900a:	f000 fac7 	bl	800959c <prvAddCurrentTaskToDelayedList>
	}
 800900e:	bf00      	nop
 8009010:	3718      	adds	r7, #24
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	200073b0 	.word	0x200073b0

0800901c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10a      	bne.n	8009048 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	60fb      	str	r3, [r7, #12]
}
 8009044:	bf00      	nop
 8009046:	e7fe      	b.n	8009046 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	3318      	adds	r3, #24
 800904c:	4618      	mov	r0, r3
 800904e:	f7fe f98d 	bl	800736c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009052:	4b1f      	ldr	r3, [pc, #124]	; (80090d0 <xTaskRemoveFromEventList+0xb4>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d11f      	bne.n	800909a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	3304      	adds	r3, #4
 800905e:	4618      	mov	r0, r3
 8009060:	f7fe f984 	bl	800736c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009068:	4b1a      	ldr	r3, [pc, #104]	; (80090d4 <xTaskRemoveFromEventList+0xb8>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	429a      	cmp	r2, r3
 800906e:	d903      	bls.n	8009078 <xTaskRemoveFromEventList+0x5c>
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009074:	4a17      	ldr	r2, [pc, #92]	; (80090d4 <xTaskRemoveFromEventList+0xb8>)
 8009076:	6013      	str	r3, [r2, #0]
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800907c:	4613      	mov	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	4a14      	ldr	r2, [pc, #80]	; (80090d8 <xTaskRemoveFromEventList+0xbc>)
 8009086:	441a      	add	r2, r3
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	3304      	adds	r3, #4
 800908c:	4619      	mov	r1, r3
 800908e:	4610      	mov	r0, r2
 8009090:	f7fe f90f 	bl	80072b2 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8009094:	f000 f9d0 	bl	8009438 <prvResetNextTaskUnblockTime>
 8009098:	e005      	b.n	80090a6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	3318      	adds	r3, #24
 800909e:	4619      	mov	r1, r3
 80090a0:	480e      	ldr	r0, [pc, #56]	; (80090dc <xTaskRemoveFromEventList+0xc0>)
 80090a2:	f7fe f906 	bl	80072b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090aa:	4b0d      	ldr	r3, [pc, #52]	; (80090e0 <xTaskRemoveFromEventList+0xc4>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d905      	bls.n	80090c0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80090b4:	2301      	movs	r3, #1
 80090b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80090b8:	4b0a      	ldr	r3, [pc, #40]	; (80090e4 <xTaskRemoveFromEventList+0xc8>)
 80090ba:	2201      	movs	r2, #1
 80090bc:	601a      	str	r2, [r3, #0]
 80090be:	e001      	b.n	80090c4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80090c0:	2300      	movs	r3, #0
 80090c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80090c4:	697b      	ldr	r3, [r7, #20]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3718      	adds	r7, #24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	200078b0 	.word	0x200078b0
 80090d4:	20007890 	.word	0x20007890
 80090d8:	200073b4 	.word	0x200073b4
 80090dc:	20007844 	.word	0x20007844
 80090e0:	200073b0 	.word	0x200073b0
 80090e4:	2000789c 	.word	0x2000789c

080090e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090f0:	4b06      	ldr	r3, [pc, #24]	; (800910c <vTaskInternalSetTimeOutState+0x24>)
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80090f8:	4b05      	ldr	r3, [pc, #20]	; (8009110 <vTaskInternalSetTimeOutState+0x28>)
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	605a      	str	r2, [r3, #4]
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr
 800910c:	200078a0 	.word	0x200078a0
 8009110:	2000788c 	.word	0x2000788c

08009114 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b088      	sub	sp, #32
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10a      	bne.n	800913a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009128:	f383 8811 	msr	BASEPRI, r3
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f3bf 8f4f 	dsb	sy
 8009134:	613b      	str	r3, [r7, #16]
}
 8009136:	bf00      	nop
 8009138:	e7fe      	b.n	8009138 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10a      	bne.n	8009156 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	60fb      	str	r3, [r7, #12]
}
 8009152:	bf00      	nop
 8009154:	e7fe      	b.n	8009154 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009156:	f7fe fa5d 	bl	8007614 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800915a:	4b24      	ldr	r3, [pc, #144]	; (80091ec <xTaskCheckForTimeOut+0xd8>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	69ba      	ldr	r2, [r7, #24]
 8009166:	1ad3      	subs	r3, r2, r3
 8009168:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800916a:	4b21      	ldr	r3, [pc, #132]	; (80091f0 <xTaskCheckForTimeOut+0xdc>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8009172:	2b00      	cmp	r3, #0
 8009174:	d007      	beq.n	8009186 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8009176:	4b1e      	ldr	r3, [pc, #120]	; (80091f0 <xTaskCheckForTimeOut+0xdc>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2200      	movs	r2, #0
 800917c:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
				xReturn = pdTRUE;
 8009180:	2301      	movs	r3, #1
 8009182:	61fb      	str	r3, [r7, #28]
 8009184:	e02b      	b.n	80091de <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800918e:	d102      	bne.n	8009196 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009190:	2300      	movs	r3, #0
 8009192:	61fb      	str	r3, [r7, #28]
 8009194:	e023      	b.n	80091de <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	4b16      	ldr	r3, [pc, #88]	; (80091f4 <xTaskCheckForTimeOut+0xe0>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d007      	beq.n	80091b2 <xTaskCheckForTimeOut+0x9e>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	69ba      	ldr	r2, [r7, #24]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d302      	bcc.n	80091b2 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80091ac:	2301      	movs	r3, #1
 80091ae:	61fb      	str	r3, [r7, #28]
 80091b0:	e015      	b.n	80091de <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d20b      	bcs.n	80091d4 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	1ad2      	subs	r2, r2, r3
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7ff ff8d 	bl	80090e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80091ce:	2300      	movs	r3, #0
 80091d0:	61fb      	str	r3, [r7, #28]
 80091d2:	e004      	b.n	80091de <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	2200      	movs	r2, #0
 80091d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80091da:	2301      	movs	r3, #1
 80091dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80091de:	f7fe fa49 	bl	8007674 <vPortExitCritical>

	return xReturn;
 80091e2:	69fb      	ldr	r3, [r7, #28]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3720      	adds	r7, #32
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	2000788c 	.word	0x2000788c
 80091f0:	200073b0 	.word	0x200073b0
 80091f4:	200078a0 	.word	0x200078a0

080091f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80091f8:	b480      	push	{r7}
 80091fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80091fc:	4b03      	ldr	r3, [pc, #12]	; (800920c <vTaskMissedYield+0x14>)
 80091fe:	2201      	movs	r2, #1
 8009200:	601a      	str	r2, [r3, #0]
}
 8009202:	bf00      	nop
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	2000789c 	.word	0x2000789c

08009210 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009218:	f000 f8aa 	bl	8009370 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800921c:	4b19      	ldr	r3, [pc, #100]	; (8009284 <prvIdleTask+0x74>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d907      	bls.n	8009234 <prvIdleTask+0x24>
			{
				taskYIELD();
 8009224:	4b18      	ldr	r3, [pc, #96]	; (8009288 <prvIdleTask+0x78>)
 8009226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800922a:	601a      	str	r2, [r3, #0]
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8009234:	f7f8 fbfc 	bl	8001a30 <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8009238:	f7ff fc4e 	bl	8008ad8 <prvGetExpectedIdleTime>
 800923c:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d9e9      	bls.n	8009218 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8009244:	f7ff fc3a 	bl	8008abc <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8009248:	4b10      	ldr	r3, [pc, #64]	; (800928c <prvIdleTask+0x7c>)
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	4b10      	ldr	r3, [pc, #64]	; (8009290 <prvIdleTask+0x80>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	429a      	cmp	r2, r3
 8009252:	d20a      	bcs.n	800926a <prvIdleTask+0x5a>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	60bb      	str	r3, [r7, #8]
}
 8009266:	bf00      	nop
 8009268:	e7fe      	b.n	8009268 <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800926a:	f7ff fc35 	bl	8008ad8 <prvGetExpectedIdleTime>
 800926e:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2b01      	cmp	r3, #1
 8009274:	d902      	bls.n	800927c <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f7fe fa80 	bl	800777c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800927c:	f7ff fc64 	bl	8008b48 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8009280:	e7ca      	b.n	8009218 <prvIdleTask+0x8>
 8009282:	bf00      	nop
 8009284:	200073b4 	.word	0x200073b4
 8009288:	e000ed04 	.word	0xe000ed04
 800928c:	200078a8 	.word	0x200078a8
 8009290:	2000788c 	.word	0x2000788c

08009294 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800929a:	2301      	movs	r3, #1
 800929c:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800929e:	2301      	movs	r3, #1
 80092a0:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 80092a2:	4b0f      	ldr	r3, [pc, #60]	; (80092e0 <eTaskConfirmSleepModeStatus+0x4c>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d002      	beq.n	80092b0 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80092aa:	2300      	movs	r3, #0
 80092ac:	71fb      	strb	r3, [r7, #7]
 80092ae:	e010      	b.n	80092d2 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 80092b0:	4b0c      	ldr	r3, [pc, #48]	; (80092e4 <eTaskConfirmSleepModeStatus+0x50>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d002      	beq.n	80092be <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80092b8:	2300      	movs	r3, #0
 80092ba:	71fb      	strb	r3, [r7, #7]
 80092bc:	e009      	b.n	80092d2 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 80092be:	4b0a      	ldr	r3, [pc, #40]	; (80092e8 <eTaskConfirmSleepModeStatus+0x54>)
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	4b0a      	ldr	r3, [pc, #40]	; (80092ec <eTaskConfirmSleepModeStatus+0x58>)
 80092c4:	6819      	ldr	r1, [r3, #0]
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	1acb      	subs	r3, r1, r3
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d101      	bne.n	80092d2 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 80092ce:	2302      	movs	r3, #2
 80092d0:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 80092d2:	79fb      	ldrb	r3, [r7, #7]
	}
 80092d4:	4618      	mov	r0, r3
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	20007844 	.word	0x20007844
 80092e4:	2000789c 	.word	0x2000789c
 80092e8:	20007870 	.word	0x20007870
 80092ec:	20007888 	.word	0x20007888

080092f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092f6:	2300      	movs	r3, #0
 80092f8:	607b      	str	r3, [r7, #4]
 80092fa:	e00c      	b.n	8009316 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	4613      	mov	r3, r2
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	4413      	add	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4a12      	ldr	r2, [pc, #72]	; (8009350 <prvInitialiseTaskLists+0x60>)
 8009308:	4413      	add	r3, r2
 800930a:	4618      	mov	r0, r3
 800930c:	f7fd ffa4 	bl	8007258 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	3301      	adds	r3, #1
 8009314:	607b      	str	r3, [r7, #4]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b37      	cmp	r3, #55	; 0x37
 800931a:	d9ef      	bls.n	80092fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800931c:	480d      	ldr	r0, [pc, #52]	; (8009354 <prvInitialiseTaskLists+0x64>)
 800931e:	f7fd ff9b 	bl	8007258 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009322:	480d      	ldr	r0, [pc, #52]	; (8009358 <prvInitialiseTaskLists+0x68>)
 8009324:	f7fd ff98 	bl	8007258 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009328:	480c      	ldr	r0, [pc, #48]	; (800935c <prvInitialiseTaskLists+0x6c>)
 800932a:	f7fd ff95 	bl	8007258 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800932e:	480c      	ldr	r0, [pc, #48]	; (8009360 <prvInitialiseTaskLists+0x70>)
 8009330:	f7fd ff92 	bl	8007258 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009334:	480b      	ldr	r0, [pc, #44]	; (8009364 <prvInitialiseTaskLists+0x74>)
 8009336:	f7fd ff8f 	bl	8007258 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800933a:	4b0b      	ldr	r3, [pc, #44]	; (8009368 <prvInitialiseTaskLists+0x78>)
 800933c:	4a05      	ldr	r2, [pc, #20]	; (8009354 <prvInitialiseTaskLists+0x64>)
 800933e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009340:	4b0a      	ldr	r3, [pc, #40]	; (800936c <prvInitialiseTaskLists+0x7c>)
 8009342:	4a05      	ldr	r2, [pc, #20]	; (8009358 <prvInitialiseTaskLists+0x68>)
 8009344:	601a      	str	r2, [r3, #0]
}
 8009346:	bf00      	nop
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	200073b4 	.word	0x200073b4
 8009354:	20007814 	.word	0x20007814
 8009358:	20007828 	.word	0x20007828
 800935c:	20007844 	.word	0x20007844
 8009360:	20007858 	.word	0x20007858
 8009364:	20007870 	.word	0x20007870
 8009368:	2000783c 	.word	0x2000783c
 800936c:	20007840 	.word	0x20007840

08009370 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009376:	e019      	b.n	80093ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009378:	f7fe f94c 	bl	8007614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800937c:	4b10      	ldr	r3, [pc, #64]	; (80093c0 <prvCheckTasksWaitingTermination+0x50>)
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	3304      	adds	r3, #4
 8009388:	4618      	mov	r0, r3
 800938a:	f7fd ffef 	bl	800736c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800938e:	4b0d      	ldr	r3, [pc, #52]	; (80093c4 <prvCheckTasksWaitingTermination+0x54>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	3b01      	subs	r3, #1
 8009394:	4a0b      	ldr	r2, [pc, #44]	; (80093c4 <prvCheckTasksWaitingTermination+0x54>)
 8009396:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009398:	4b0b      	ldr	r3, [pc, #44]	; (80093c8 <prvCheckTasksWaitingTermination+0x58>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3b01      	subs	r3, #1
 800939e:	4a0a      	ldr	r2, [pc, #40]	; (80093c8 <prvCheckTasksWaitingTermination+0x58>)
 80093a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80093a2:	f7fe f967 	bl	8007674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f810 	bl	80093cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093ac:	4b06      	ldr	r3, [pc, #24]	; (80093c8 <prvCheckTasksWaitingTermination+0x58>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1e1      	bne.n	8009378 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80093b4:	bf00      	nop
 80093b6:	bf00      	nop
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	20007858 	.word	0x20007858
 80093c4:	20007888 	.word	0x20007888
 80093c8:	2000786c 	.word	0x2000786c

080093cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80093da:	4618      	mov	r0, r3
 80093dc:	f001 ff94 	bl	800b308 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d108      	bne.n	80093fc <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fd ff1a 	bl	8007228 <vPortFree>
				vPortFree( pxTCB );
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f7fd ff17 	bl	8007228 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80093fa:	e018      	b.n	800942e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
 8009402:	2b01      	cmp	r3, #1
 8009404:	d103      	bne.n	800940e <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f7fd ff0e 	bl	8007228 <vPortFree>
	}
 800940c:	e00f      	b.n	800942e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
 8009414:	2b02      	cmp	r3, #2
 8009416:	d00a      	beq.n	800942e <prvDeleteTCB+0x62>
	__asm volatile
 8009418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941c:	f383 8811 	msr	BASEPRI, r3
 8009420:	f3bf 8f6f 	isb	sy
 8009424:	f3bf 8f4f 	dsb	sy
 8009428:	60fb      	str	r3, [r7, #12]
}
 800942a:	bf00      	nop
 800942c:	e7fe      	b.n	800942c <prvDeleteTCB+0x60>
	}
 800942e:	bf00      	nop
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
	...

08009438 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800943e:	4b0c      	ldr	r3, [pc, #48]	; (8009470 <prvResetNextTaskUnblockTime+0x38>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d104      	bne.n	8009452 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009448:	4b0a      	ldr	r3, [pc, #40]	; (8009474 <prvResetNextTaskUnblockTime+0x3c>)
 800944a:	f04f 32ff 	mov.w	r2, #4294967295
 800944e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009450:	e008      	b.n	8009464 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009452:	4b07      	ldr	r3, [pc, #28]	; (8009470 <prvResetNextTaskUnblockTime+0x38>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	4a04      	ldr	r2, [pc, #16]	; (8009474 <prvResetNextTaskUnblockTime+0x3c>)
 8009462:	6013      	str	r3, [r2, #0]
}
 8009464:	bf00      	nop
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	2000783c 	.word	0x2000783c
 8009474:	200078a8 	.word	0x200078a8

08009478 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800947e:	4b0b      	ldr	r3, [pc, #44]	; (80094ac <xTaskGetSchedulerState+0x34>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d102      	bne.n	800948c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009486:	2301      	movs	r3, #1
 8009488:	607b      	str	r3, [r7, #4]
 800948a:	e008      	b.n	800949e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800948c:	4b08      	ldr	r3, [pc, #32]	; (80094b0 <xTaskGetSchedulerState+0x38>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d102      	bne.n	800949a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009494:	2302      	movs	r3, #2
 8009496:	607b      	str	r3, [r7, #4]
 8009498:	e001      	b.n	800949e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800949a:	2300      	movs	r3, #0
 800949c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800949e:	687b      	ldr	r3, [r7, #4]
	}
 80094a0:	4618      	mov	r0, r3
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr
 80094ac:	20007894 	.word	0x20007894
 80094b0:	200078b0 	.word	0x200078b0

080094b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b086      	sub	sp, #24
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80094c0:	2300      	movs	r3, #0
 80094c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d05c      	beq.n	8009584 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80094ca:	4b31      	ldr	r3, [pc, #196]	; (8009590 <xTaskPriorityDisinherit+0xdc>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	693a      	ldr	r2, [r7, #16]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d00a      	beq.n	80094ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80094d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d8:	f383 8811 	msr	BASEPRI, r3
 80094dc:	f3bf 8f6f 	isb	sy
 80094e0:	f3bf 8f4f 	dsb	sy
 80094e4:	60fb      	str	r3, [r7, #12]
}
 80094e6:	bf00      	nop
 80094e8:	e7fe      	b.n	80094e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d10a      	bne.n	800950a <xTaskPriorityDisinherit+0x56>
	__asm volatile
 80094f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f8:	f383 8811 	msr	BASEPRI, r3
 80094fc:	f3bf 8f6f 	isb	sy
 8009500:	f3bf 8f4f 	dsb	sy
 8009504:	60bb      	str	r3, [r7, #8]
}
 8009506:	bf00      	nop
 8009508:	e7fe      	b.n	8009508 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009510:	1e5a      	subs	r2, r3, #1
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8009522:	429a      	cmp	r2, r3
 8009524:	d02e      	beq.n	8009584 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800952c:	2b00      	cmp	r3, #0
 800952e:	d129      	bne.n	8009584 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	3304      	adds	r3, #4
 8009534:	4618      	mov	r0, r3
 8009536:	f7fd ff19 	bl	800736c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009548:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009554:	4b0f      	ldr	r3, [pc, #60]	; (8009594 <xTaskPriorityDisinherit+0xe0>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	429a      	cmp	r2, r3
 800955a:	d903      	bls.n	8009564 <xTaskPriorityDisinherit+0xb0>
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009560:	4a0c      	ldr	r2, [pc, #48]	; (8009594 <xTaskPriorityDisinherit+0xe0>)
 8009562:	6013      	str	r3, [r2, #0]
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009568:	4613      	mov	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	4413      	add	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4a09      	ldr	r2, [pc, #36]	; (8009598 <xTaskPriorityDisinherit+0xe4>)
 8009572:	441a      	add	r2, r3
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	3304      	adds	r3, #4
 8009578:	4619      	mov	r1, r3
 800957a:	4610      	mov	r0, r2
 800957c:	f7fd fe99 	bl	80072b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009580:	2301      	movs	r3, #1
 8009582:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009584:	697b      	ldr	r3, [r7, #20]
	}
 8009586:	4618      	mov	r0, r3
 8009588:	3718      	adds	r7, #24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	200073b0 	.word	0x200073b0
 8009594:	20007890 	.word	0x20007890
 8009598:	200073b4 	.word	0x200073b4

0800959c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80095a6:	4b24      	ldr	r3, [pc, #144]	; (8009638 <prvAddCurrentTaskToDelayedList+0x9c>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80095ac:	4b23      	ldr	r3, [pc, #140]	; (800963c <prvAddCurrentTaskToDelayedList+0xa0>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095b6:	4b21      	ldr	r3, [pc, #132]	; (800963c <prvAddCurrentTaskToDelayedList+0xa0>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	3304      	adds	r3, #4
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fd fed5 	bl	800736c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c8:	d10a      	bne.n	80095e0 <prvAddCurrentTaskToDelayedList+0x44>
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d007      	beq.n	80095e0 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095d0:	4b1a      	ldr	r3, [pc, #104]	; (800963c <prvAddCurrentTaskToDelayedList+0xa0>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	3304      	adds	r3, #4
 80095d6:	4619      	mov	r1, r3
 80095d8:	4819      	ldr	r0, [pc, #100]	; (8009640 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095da:	f7fd fe6a 	bl	80072b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095de:	e026      	b.n	800962e <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4413      	add	r3, r2
 80095e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80095e8:	4b14      	ldr	r3, [pc, #80]	; (800963c <prvAddCurrentTaskToDelayedList+0xa0>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68ba      	ldr	r2, [r7, #8]
 80095ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d209      	bcs.n	800960c <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095f8:	4b12      	ldr	r3, [pc, #72]	; (8009644 <prvAddCurrentTaskToDelayedList+0xa8>)
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	4b0f      	ldr	r3, [pc, #60]	; (800963c <prvAddCurrentTaskToDelayedList+0xa0>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	3304      	adds	r3, #4
 8009602:	4619      	mov	r1, r3
 8009604:	4610      	mov	r0, r2
 8009606:	f7fd fe78 	bl	80072fa <vListInsert>
}
 800960a:	e010      	b.n	800962e <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800960c:	4b0e      	ldr	r3, [pc, #56]	; (8009648 <prvAddCurrentTaskToDelayedList+0xac>)
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	4b0a      	ldr	r3, [pc, #40]	; (800963c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	3304      	adds	r3, #4
 8009616:	4619      	mov	r1, r3
 8009618:	4610      	mov	r0, r2
 800961a:	f7fd fe6e 	bl	80072fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800961e:	4b0b      	ldr	r3, [pc, #44]	; (800964c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	429a      	cmp	r2, r3
 8009626:	d202      	bcs.n	800962e <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 8009628:	4a08      	ldr	r2, [pc, #32]	; (800964c <prvAddCurrentTaskToDelayedList+0xb0>)
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	6013      	str	r3, [r2, #0]
}
 800962e:	bf00      	nop
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	2000788c 	.word	0x2000788c
 800963c:	200073b0 	.word	0x200073b0
 8009640:	20007870 	.word	0x20007870
 8009644:	20007840 	.word	0x20007840
 8009648:	2000783c 	.word	0x2000783c
 800964c:	200078a8 	.word	0x200078a8

08009650 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b08a      	sub	sp, #40	; 0x28
 8009654:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009656:	2300      	movs	r3, #0
 8009658:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800965a:	f000 fba1 	bl	8009da0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800965e:	4b1c      	ldr	r3, [pc, #112]	; (80096d0 <xTimerCreateTimerTask+0x80>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d021      	beq.n	80096aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009666:	2300      	movs	r3, #0
 8009668:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800966a:	2300      	movs	r3, #0
 800966c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800966e:	1d3a      	adds	r2, r7, #4
 8009670:	f107 0108 	add.w	r1, r7, #8
 8009674:	f107 030c 	add.w	r3, r7, #12
 8009678:	4618      	mov	r0, r3
 800967a:	f7fd fd71 	bl	8007160 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	9202      	str	r2, [sp, #8]
 8009686:	9301      	str	r3, [sp, #4]
 8009688:	2302      	movs	r3, #2
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	2300      	movs	r3, #0
 800968e:	460a      	mov	r2, r1
 8009690:	4910      	ldr	r1, [pc, #64]	; (80096d4 <xTimerCreateTimerTask+0x84>)
 8009692:	4811      	ldr	r0, [pc, #68]	; (80096d8 <xTimerCreateTimerTask+0x88>)
 8009694:	f7fe feb0 	bl	80083f8 <xTaskCreateStatic>
 8009698:	4603      	mov	r3, r0
 800969a:	4a10      	ldr	r2, [pc, #64]	; (80096dc <xTimerCreateTimerTask+0x8c>)
 800969c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800969e:	4b0f      	ldr	r3, [pc, #60]	; (80096dc <xTimerCreateTimerTask+0x8c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80096a6:	2301      	movs	r3, #1
 80096a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d10a      	bne.n	80096c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80096b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	613b      	str	r3, [r7, #16]
}
 80096c2:	bf00      	nop
 80096c4:	e7fe      	b.n	80096c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80096c6:	697b      	ldr	r3, [r7, #20]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	200078e4 	.word	0x200078e4
 80096d4:	0800b600 	.word	0x0800b600
 80096d8:	08009949 	.word	0x08009949
 80096dc:	200078e8 	.word	0x200078e8

080096e0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b088      	sub	sp, #32
 80096e4:	af02      	add	r7, sp, #8
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
 80096ec:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80096ee:	202c      	movs	r0, #44	; 0x2c
 80096f0:	f7fd fd50 	bl	8007194 <pvPortMalloc>
 80096f4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00d      	beq.n	8009718 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	2200      	movs	r2, #0
 8009700:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	9301      	str	r3, [sp, #4]
 8009708:	6a3b      	ldr	r3, [r7, #32]
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	68b9      	ldr	r1, [r7, #8]
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f000 f843 	bl	800979e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009718:	697b      	ldr	r3, [r7, #20]
	}
 800971a:	4618      	mov	r0, r3
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009722:	b580      	push	{r7, lr}
 8009724:	b08a      	sub	sp, #40	; 0x28
 8009726:	af02      	add	r7, sp, #8
 8009728:	60f8      	str	r0, [r7, #12]
 800972a:	60b9      	str	r1, [r7, #8]
 800972c:	607a      	str	r2, [r7, #4]
 800972e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009730:	232c      	movs	r3, #44	; 0x2c
 8009732:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	2b2c      	cmp	r3, #44	; 0x2c
 8009738:	d00a      	beq.n	8009750 <xTimerCreateStatic+0x2e>
	__asm volatile
 800973a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973e:	f383 8811 	msr	BASEPRI, r3
 8009742:	f3bf 8f6f 	isb	sy
 8009746:	f3bf 8f4f 	dsb	sy
 800974a:	61bb      	str	r3, [r7, #24]
}
 800974c:	bf00      	nop
 800974e:	e7fe      	b.n	800974e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009750:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10a      	bne.n	800976e <xTimerCreateStatic+0x4c>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975c:	f383 8811 	msr	BASEPRI, r3
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	617b      	str	r3, [r7, #20]
}
 800976a:	bf00      	nop
 800976c:	e7fe      	b.n	800976c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800976e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009770:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00d      	beq.n	8009794 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	2202      	movs	r2, #2
 800977c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	68b9      	ldr	r1, [r7, #8]
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f000 f805 	bl	800979e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009794:	69fb      	ldr	r3, [r7, #28]
	}
 8009796:	4618      	mov	r0, r3
 8009798:	3720      	adds	r7, #32
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b086      	sub	sp, #24
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	60f8      	str	r0, [r7, #12]
 80097a6:	60b9      	str	r1, [r7, #8]
 80097a8:	607a      	str	r2, [r7, #4]
 80097aa:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10a      	bne.n	80097c8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80097b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b6:	f383 8811 	msr	BASEPRI, r3
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	617b      	str	r3, [r7, #20]
}
 80097c4:	bf00      	nop
 80097c6:	e7fe      	b.n	80097c6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80097c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d01e      	beq.n	800980c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80097ce:	f000 fae7 	bl	8009da0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80097d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80097e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e6:	6a3a      	ldr	r2, [r7, #32]
 80097e8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	3304      	adds	r3, #4
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7fd fd52 	bl	8007298 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d008      	beq.n	800980c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80097fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009800:	f043 0304 	orr.w	r3, r3, #4
 8009804:	b2da      	uxtb	r2, r3
 8009806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009808:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800980c:	bf00      	nop
 800980e:	3718      	adds	r7, #24
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b08a      	sub	sp, #40	; 0x28
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
 8009820:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009822:	2300      	movs	r3, #0
 8009824:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10a      	bne.n	8009842 <xTimerGenericCommand+0x2e>
	__asm volatile
 800982c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009830:	f383 8811 	msr	BASEPRI, r3
 8009834:	f3bf 8f6f 	isb	sy
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	623b      	str	r3, [r7, #32]
}
 800983e:	bf00      	nop
 8009840:	e7fe      	b.n	8009840 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009842:	4b1a      	ldr	r3, [pc, #104]	; (80098ac <xTimerGenericCommand+0x98>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d02a      	beq.n	80098a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	2b05      	cmp	r3, #5
 800985a:	dc18      	bgt.n	800988e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800985c:	f7ff fe0c 	bl	8009478 <xTaskGetSchedulerState>
 8009860:	4603      	mov	r3, r0
 8009862:	2b02      	cmp	r3, #2
 8009864:	d109      	bne.n	800987a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009866:	4b11      	ldr	r3, [pc, #68]	; (80098ac <xTimerGenericCommand+0x98>)
 8009868:	6818      	ldr	r0, [r3, #0]
 800986a:	f107 0110 	add.w	r1, r7, #16
 800986e:	2300      	movs	r3, #0
 8009870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009872:	f7fe f9d9 	bl	8007c28 <xQueueGenericSend>
 8009876:	6278      	str	r0, [r7, #36]	; 0x24
 8009878:	e012      	b.n	80098a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800987a:	4b0c      	ldr	r3, [pc, #48]	; (80098ac <xTimerGenericCommand+0x98>)
 800987c:	6818      	ldr	r0, [r3, #0]
 800987e:	f107 0110 	add.w	r1, r7, #16
 8009882:	2300      	movs	r3, #0
 8009884:	2200      	movs	r2, #0
 8009886:	f7fe f9cf 	bl	8007c28 <xQueueGenericSend>
 800988a:	6278      	str	r0, [r7, #36]	; 0x24
 800988c:	e008      	b.n	80098a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800988e:	4b07      	ldr	r3, [pc, #28]	; (80098ac <xTimerGenericCommand+0x98>)
 8009890:	6818      	ldr	r0, [r3, #0]
 8009892:	f107 0110 	add.w	r1, r7, #16
 8009896:	2300      	movs	r3, #0
 8009898:	683a      	ldr	r2, [r7, #0]
 800989a:	f7fe fac3 	bl	8007e24 <xQueueGenericSendFromISR>
 800989e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3728      	adds	r7, #40	; 0x28
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	200078e4 	.word	0x200078e4

080098b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b088      	sub	sp, #32
 80098b4:	af02      	add	r7, sp, #8
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ba:	4b22      	ldr	r3, [pc, #136]	; (8009944 <prvProcessExpiredTimer+0x94>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	3304      	adds	r3, #4
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fd fd4f 	bl	800736c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098d4:	f003 0304 	and.w	r3, r3, #4
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d022      	beq.n	8009922 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	699a      	ldr	r2, [r3, #24]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	18d1      	adds	r1, r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	6978      	ldr	r0, [r7, #20]
 80098ea:	f000 f8d1 	bl	8009a90 <prvInsertTimerInActiveList>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d01f      	beq.n	8009934 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098f4:	2300      	movs	r3, #0
 80098f6:	9300      	str	r3, [sp, #0]
 80098f8:	2300      	movs	r3, #0
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	2100      	movs	r1, #0
 80098fe:	6978      	ldr	r0, [r7, #20]
 8009900:	f7ff ff88 	bl	8009814 <xTimerGenericCommand>
 8009904:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d113      	bne.n	8009934 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800990c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009910:	f383 8811 	msr	BASEPRI, r3
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	60fb      	str	r3, [r7, #12]
}
 800991e:	bf00      	nop
 8009920:	e7fe      	b.n	8009920 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009928:	f023 0301 	bic.w	r3, r3, #1
 800992c:	b2da      	uxtb	r2, r3
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	6a1b      	ldr	r3, [r3, #32]
 8009938:	6978      	ldr	r0, [r7, #20]
 800993a:	4798      	blx	r3
}
 800993c:	bf00      	nop
 800993e:	3718      	adds	r7, #24
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	200078dc 	.word	0x200078dc

08009948 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009950:	f107 0308 	add.w	r3, r7, #8
 8009954:	4618      	mov	r0, r3
 8009956:	f000 f857 	bl	8009a08 <prvGetNextExpireTime>
 800995a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	4619      	mov	r1, r3
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f000 f803 	bl	800996c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009966:	f000 f8d5 	bl	8009b14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800996a:	e7f1      	b.n	8009950 <prvTimerTask+0x8>

0800996c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009976:	f7ff f8a1 	bl	8008abc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800997a:	f107 0308 	add.w	r3, r7, #8
 800997e:	4618      	mov	r0, r3
 8009980:	f000 f866 	bl	8009a50 <prvSampleTimeNow>
 8009984:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d130      	bne.n	80099ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10a      	bne.n	80099a8 <prvProcessTimerOrBlockTask+0x3c>
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	429a      	cmp	r2, r3
 8009998:	d806      	bhi.n	80099a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800999a:	f7ff f8d5 	bl	8008b48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800999e:	68f9      	ldr	r1, [r7, #12]
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f7ff ff85 	bl	80098b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80099a6:	e024      	b.n	80099f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d008      	beq.n	80099c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80099ae:	4b13      	ldr	r3, [pc, #76]	; (80099fc <prvProcessTimerOrBlockTask+0x90>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d101      	bne.n	80099bc <prvProcessTimerOrBlockTask+0x50>
 80099b8:	2301      	movs	r3, #1
 80099ba:	e000      	b.n	80099be <prvProcessTimerOrBlockTask+0x52>
 80099bc:	2300      	movs	r3, #0
 80099be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80099c0:	4b0f      	ldr	r3, [pc, #60]	; (8009a00 <prvProcessTimerOrBlockTask+0x94>)
 80099c2:	6818      	ldr	r0, [r3, #0]
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	4619      	mov	r1, r3
 80099ce:	f7fe fcdf 	bl	8008390 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80099d2:	f7ff f8b9 	bl	8008b48 <xTaskResumeAll>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d10a      	bne.n	80099f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80099dc:	4b09      	ldr	r3, [pc, #36]	; (8009a04 <prvProcessTimerOrBlockTask+0x98>)
 80099de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	f3bf 8f6f 	isb	sy
}
 80099ec:	e001      	b.n	80099f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80099ee:	f7ff f8ab 	bl	8008b48 <xTaskResumeAll>
}
 80099f2:	bf00      	nop
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	200078e0 	.word	0x200078e0
 8009a00:	200078e4 	.word	0x200078e4
 8009a04:	e000ed04 	.word	0xe000ed04

08009a08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009a10:	4b0e      	ldr	r3, [pc, #56]	; (8009a4c <prvGetNextExpireTime+0x44>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d101      	bne.n	8009a1e <prvGetNextExpireTime+0x16>
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	e000      	b.n	8009a20 <prvGetNextExpireTime+0x18>
 8009a1e:	2200      	movs	r2, #0
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d105      	bne.n	8009a38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a2c:	4b07      	ldr	r3, [pc, #28]	; (8009a4c <prvGetNextExpireTime+0x44>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	60fb      	str	r3, [r7, #12]
 8009a36:	e001      	b.n	8009a3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3714      	adds	r7, #20
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	200078dc 	.word	0x200078dc

08009a50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a58:	f7ff f914 	bl	8008c84 <xTaskGetTickCount>
 8009a5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009a5e:	4b0b      	ldr	r3, [pc, #44]	; (8009a8c <prvSampleTimeNow+0x3c>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d205      	bcs.n	8009a74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a68:	f000 f936 	bl	8009cd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	601a      	str	r2, [r3, #0]
 8009a72:	e002      	b.n	8009a7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a7a:	4a04      	ldr	r2, [pc, #16]	; (8009a8c <prvSampleTimeNow+0x3c>)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a80:	68fb      	ldr	r3, [r7, #12]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	200078ec 	.word	0x200078ec

08009a90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
 8009a9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	68ba      	ldr	r2, [r7, #8]
 8009aa6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d812      	bhi.n	8009adc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	1ad2      	subs	r2, r2, r3
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	699b      	ldr	r3, [r3, #24]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d302      	bcc.n	8009aca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	617b      	str	r3, [r7, #20]
 8009ac8:	e01b      	b.n	8009b02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009aca:	4b10      	ldr	r3, [pc, #64]	; (8009b0c <prvInsertTimerInActiveList+0x7c>)
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	3304      	adds	r3, #4
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	4610      	mov	r0, r2
 8009ad6:	f7fd fc10 	bl	80072fa <vListInsert>
 8009ada:	e012      	b.n	8009b02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d206      	bcs.n	8009af2 <prvInsertTimerInActiveList+0x62>
 8009ae4:	68ba      	ldr	r2, [r7, #8]
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d302      	bcc.n	8009af2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009aec:	2301      	movs	r3, #1
 8009aee:	617b      	str	r3, [r7, #20]
 8009af0:	e007      	b.n	8009b02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009af2:	4b07      	ldr	r3, [pc, #28]	; (8009b10 <prvInsertTimerInActiveList+0x80>)
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3304      	adds	r3, #4
 8009afa:	4619      	mov	r1, r3
 8009afc:	4610      	mov	r0, r2
 8009afe:	f7fd fbfc 	bl	80072fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009b02:	697b      	ldr	r3, [r7, #20]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3718      	adds	r7, #24
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	200078e0 	.word	0x200078e0
 8009b10:	200078dc 	.word	0x200078dc

08009b14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b08e      	sub	sp, #56	; 0x38
 8009b18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b1a:	e0ca      	b.n	8009cb2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	da18      	bge.n	8009b54 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009b22:	1d3b      	adds	r3, r7, #4
 8009b24:	3304      	adds	r3, #4
 8009b26:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d10a      	bne.n	8009b44 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b32:	f383 8811 	msr	BASEPRI, r3
 8009b36:	f3bf 8f6f 	isb	sy
 8009b3a:	f3bf 8f4f 	dsb	sy
 8009b3e:	61fb      	str	r3, [r7, #28]
}
 8009b40:	bf00      	nop
 8009b42:	e7fe      	b.n	8009b42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b4a:	6850      	ldr	r0, [r2, #4]
 8009b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b4e:	6892      	ldr	r2, [r2, #8]
 8009b50:	4611      	mov	r1, r2
 8009b52:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	f2c0 80aa 	blt.w	8009cb0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b62:	695b      	ldr	r3, [r3, #20]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d004      	beq.n	8009b72 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6a:	3304      	adds	r3, #4
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7fd fbfd 	bl	800736c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b72:	463b      	mov	r3, r7
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7ff ff6b 	bl	8009a50 <prvSampleTimeNow>
 8009b7a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2b09      	cmp	r3, #9
 8009b80:	f200 8097 	bhi.w	8009cb2 <prvProcessReceivedCommands+0x19e>
 8009b84:	a201      	add	r2, pc, #4	; (adr r2, 8009b8c <prvProcessReceivedCommands+0x78>)
 8009b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8a:	bf00      	nop
 8009b8c:	08009bb5 	.word	0x08009bb5
 8009b90:	08009bb5 	.word	0x08009bb5
 8009b94:	08009bb5 	.word	0x08009bb5
 8009b98:	08009c29 	.word	0x08009c29
 8009b9c:	08009c3d 	.word	0x08009c3d
 8009ba0:	08009c87 	.word	0x08009c87
 8009ba4:	08009bb5 	.word	0x08009bb5
 8009ba8:	08009bb5 	.word	0x08009bb5
 8009bac:	08009c29 	.word	0x08009c29
 8009bb0:	08009c3d 	.word	0x08009c3d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bba:	f043 0301 	orr.w	r3, r3, #1
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bca:	699b      	ldr	r3, [r3, #24]
 8009bcc:	18d1      	adds	r1, r2, r3
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bd4:	f7ff ff5c 	bl	8009a90 <prvInsertTimerInActiveList>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d069      	beq.n	8009cb2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be0:	6a1b      	ldr	r3, [r3, #32]
 8009be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009be4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bec:	f003 0304 	and.w	r3, r3, #4
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d05e      	beq.n	8009cb2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	441a      	add	r2, r3
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	2300      	movs	r3, #0
 8009c02:	2100      	movs	r1, #0
 8009c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c06:	f7ff fe05 	bl	8009814 <xTimerGenericCommand>
 8009c0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009c0c:	6a3b      	ldr	r3, [r7, #32]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d14f      	bne.n	8009cb2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c16:	f383 8811 	msr	BASEPRI, r3
 8009c1a:	f3bf 8f6f 	isb	sy
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	61bb      	str	r3, [r7, #24]
}
 8009c24:	bf00      	nop
 8009c26:	e7fe      	b.n	8009c26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c2e:	f023 0301 	bic.w	r3, r3, #1
 8009c32:	b2da      	uxtb	r2, r3
 8009c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009c3a:	e03a      	b.n	8009cb2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c42:	f043 0301 	orr.w	r3, r3, #1
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c4e:	68ba      	ldr	r2, [r7, #8]
 8009c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c52:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10a      	bne.n	8009c72 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c60:	f383 8811 	msr	BASEPRI, r3
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	617b      	str	r3, [r7, #20]
}
 8009c6e:	bf00      	nop
 8009c70:	e7fe      	b.n	8009c70 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c74:	699a      	ldr	r2, [r3, #24]
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	18d1      	adds	r1, r2, r3
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c80:	f7ff ff06 	bl	8009a90 <prvInsertTimerInActiveList>
					break;
 8009c84:	e015      	b.n	8009cb2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c8c:	f003 0302 	and.w	r3, r3, #2
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d103      	bne.n	8009c9c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009c94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c96:	f7fd fac7 	bl	8007228 <vPortFree>
 8009c9a:	e00a      	b.n	8009cb2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ca2:	f023 0301 	bic.w	r3, r3, #1
 8009ca6:	b2da      	uxtb	r2, r3
 8009ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009caa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009cae:	e000      	b.n	8009cb2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009cb0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cb2:	4b08      	ldr	r3, [pc, #32]	; (8009cd4 <prvProcessReceivedCommands+0x1c0>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	1d39      	adds	r1, r7, #4
 8009cb8:	2200      	movs	r2, #0
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7fe f94e 	bl	8007f5c <xQueueReceive>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f47f af2a 	bne.w	8009b1c <prvProcessReceivedCommands+0x8>
	}
}
 8009cc8:	bf00      	nop
 8009cca:	bf00      	nop
 8009ccc:	3730      	adds	r7, #48	; 0x30
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	200078e4 	.word	0x200078e4

08009cd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b088      	sub	sp, #32
 8009cdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009cde:	e048      	b.n	8009d72 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ce0:	4b2d      	ldr	r3, [pc, #180]	; (8009d98 <prvSwitchTimerLists+0xc0>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cea:	4b2b      	ldr	r3, [pc, #172]	; (8009d98 <prvSwitchTimerLists+0xc0>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	3304      	adds	r3, #4
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fd fb37 	bl	800736c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6a1b      	ldr	r3, [r3, #32]
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d0c:	f003 0304 	and.w	r3, r3, #4
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d02e      	beq.n	8009d72 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	699b      	ldr	r3, [r3, #24]
 8009d18:	693a      	ldr	r2, [r7, #16]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d90e      	bls.n	8009d44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d32:	4b19      	ldr	r3, [pc, #100]	; (8009d98 <prvSwitchTimerLists+0xc0>)
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	3304      	adds	r3, #4
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	f7fd fadc 	bl	80072fa <vListInsert>
 8009d42:	e016      	b.n	8009d72 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d44:	2300      	movs	r3, #0
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	2300      	movs	r3, #0
 8009d4a:	693a      	ldr	r2, [r7, #16]
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f7ff fd60 	bl	8009814 <xTimerGenericCommand>
 8009d54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10a      	bne.n	8009d72 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	603b      	str	r3, [r7, #0]
}
 8009d6e:	bf00      	nop
 8009d70:	e7fe      	b.n	8009d70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d72:	4b09      	ldr	r3, [pc, #36]	; (8009d98 <prvSwitchTimerLists+0xc0>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d1b1      	bne.n	8009ce0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d7c:	4b06      	ldr	r3, [pc, #24]	; (8009d98 <prvSwitchTimerLists+0xc0>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d82:	4b06      	ldr	r3, [pc, #24]	; (8009d9c <prvSwitchTimerLists+0xc4>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a04      	ldr	r2, [pc, #16]	; (8009d98 <prvSwitchTimerLists+0xc0>)
 8009d88:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d8a:	4a04      	ldr	r2, [pc, #16]	; (8009d9c <prvSwitchTimerLists+0xc4>)
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	6013      	str	r3, [r2, #0]
}
 8009d90:	bf00      	nop
 8009d92:	3718      	adds	r7, #24
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	200078dc 	.word	0x200078dc
 8009d9c:	200078e0 	.word	0x200078e0

08009da0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009da6:	f7fd fc35 	bl	8007614 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009daa:	4b15      	ldr	r3, [pc, #84]	; (8009e00 <prvCheckForValidListAndQueue+0x60>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d120      	bne.n	8009df4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009db2:	4814      	ldr	r0, [pc, #80]	; (8009e04 <prvCheckForValidListAndQueue+0x64>)
 8009db4:	f7fd fa50 	bl	8007258 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009db8:	4813      	ldr	r0, [pc, #76]	; (8009e08 <prvCheckForValidListAndQueue+0x68>)
 8009dba:	f7fd fa4d 	bl	8007258 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009dbe:	4b13      	ldr	r3, [pc, #76]	; (8009e0c <prvCheckForValidListAndQueue+0x6c>)
 8009dc0:	4a10      	ldr	r2, [pc, #64]	; (8009e04 <prvCheckForValidListAndQueue+0x64>)
 8009dc2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009dc4:	4b12      	ldr	r3, [pc, #72]	; (8009e10 <prvCheckForValidListAndQueue+0x70>)
 8009dc6:	4a10      	ldr	r2, [pc, #64]	; (8009e08 <prvCheckForValidListAndQueue+0x68>)
 8009dc8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009dca:	2300      	movs	r3, #0
 8009dcc:	9300      	str	r3, [sp, #0]
 8009dce:	4b11      	ldr	r3, [pc, #68]	; (8009e14 <prvCheckForValidListAndQueue+0x74>)
 8009dd0:	4a11      	ldr	r2, [pc, #68]	; (8009e18 <prvCheckForValidListAndQueue+0x78>)
 8009dd2:	2110      	movs	r1, #16
 8009dd4:	200a      	movs	r0, #10
 8009dd6:	f7fd fe8b 	bl	8007af0 <xQueueGenericCreateStatic>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	4a08      	ldr	r2, [pc, #32]	; (8009e00 <prvCheckForValidListAndQueue+0x60>)
 8009dde:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009de0:	4b07      	ldr	r3, [pc, #28]	; (8009e00 <prvCheckForValidListAndQueue+0x60>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d005      	beq.n	8009df4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009de8:	4b05      	ldr	r3, [pc, #20]	; (8009e00 <prvCheckForValidListAndQueue+0x60>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	490b      	ldr	r1, [pc, #44]	; (8009e1c <prvCheckForValidListAndQueue+0x7c>)
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7fe faa4 	bl	800833c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009df4:	f7fd fc3e 	bl	8007674 <vPortExitCritical>
}
 8009df8:	bf00      	nop
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	200078e4 	.word	0x200078e4
 8009e04:	200078b4 	.word	0x200078b4
 8009e08:	200078c8 	.word	0x200078c8
 8009e0c:	200078dc 	.word	0x200078dc
 8009e10:	200078e0 	.word	0x200078e0
 8009e14:	20007990 	.word	0x20007990
 8009e18:	200078f0 	.word	0x200078f0
 8009e1c:	0800b608 	.word	0x0800b608

08009e20 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b086      	sub	sp, #24
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10a      	bne.n	8009e48 <xTimerIsTimerActive+0x28>
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	60fb      	str	r3, [r7, #12]
}
 8009e44:	bf00      	nop
 8009e46:	e7fe      	b.n	8009e46 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8009e48:	f7fd fbe4 	bl	8007614 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e52:	f003 0301 	and.w	r3, r3, #1
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d102      	bne.n	8009e60 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	617b      	str	r3, [r7, #20]
 8009e5e:	e001      	b.n	8009e64 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 8009e60:	2301      	movs	r3, #1
 8009e62:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8009e64:	f7fd fc06 	bl	8007674 <vPortExitCritical>

	return xReturn;
 8009e68:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3718      	adds	r7, #24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b086      	sub	sp, #24
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d10a      	bne.n	8009e9a <pvTimerGetTimerID+0x28>
	__asm volatile
 8009e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	60fb      	str	r3, [r7, #12]
}
 8009e96:	bf00      	nop
 8009e98:	e7fe      	b.n	8009e98 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8009e9a:	f7fd fbbb 	bl	8007614 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	69db      	ldr	r3, [r3, #28]
 8009ea2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8009ea4:	f7fd fbe6 	bl	8007674 <vPortExitCritical>

	return pvReturn;
 8009ea8:	693b      	ldr	r3, [r7, #16]
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3718      	adds	r7, #24
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <Rte_Runnable_EcuM_MainFunction>:
void Rte_Runnable_Wdg_MainFunction();
void Rte_Runnable_EcuM_MainFunction();
void Rte_Runnable_SystemManager_MainFunction();

void Rte_Runnable_EcuM_MainFunction()
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	af00      	add	r7, sp, #0

	EcuM_MainFunction();
 8009eb6:	f001 f83c 	bl	800af32 <EcuM_MainFunction>

}
 8009eba:	bf00      	nop
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <Rte_Runnable_SystemManager_MainFunction>:

void Rte_Runnable_SystemManager_MainFunction()
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	af00      	add	r7, sp, #0

	SystemManager_MainFunction();
 8009ec2:	f001 f86b 	bl	800af9c <SystemManager_MainFunction>

}
 8009ec6:	bf00      	nop
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <Rte_Runnable_Crc_MainFunction>:

void Rte_Runnable_Crc_MainFunction()
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	af00      	add	r7, sp, #0

	Crc_MainFunction();
 8009ece:	f000 ff23 	bl	800ad18 <Crc_MainFunction>

}
 8009ed2:	bf00      	nop
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <Rte_Runnable_Wdg_MainFunction>:

void Rte_Runnable_Wdg_MainFunction()
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	af00      	add	r7, sp, #0

	Wdg_MainFunction();
 8009eda:	f001 f96d 	bl	800b1b8 <Wdg_MainFunction>

}
 8009ede:	bf00      	nop
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <Rte_Runnable_Adc_MainFunction>:

void Rte_Runnable_Adc_MainFunction()
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	af00      	add	r7, sp, #0

	Adc_MainFunction();
 8009ee6:	f7fc fa6f 	bl	80063c8 <Adc_MainFunction>

}
 8009eea:	bf00      	nop
 8009eec:	bd80      	pop	{r7, pc}

08009eee <Rte_Runnable_Spi_MainFunction>:

void Rte_Runnable_Spi_MainFunction()
{
 8009eee:	b480      	push	{r7}
 8009ef0:	af00      	add	r7, sp, #0

	//Spi_MainFunction();

}
 8009ef2:	bf00      	nop
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <Rte_Runnable_Tim_MainFunction>:

void Rte_Runnable_Tim_MainFunction()
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	af00      	add	r7, sp, #0

	Tim_MainFunction();
 8009f00:	f7fc fdd6 	bl	8006ab0 <Tim_MainFunction>

}
 8009f04:	bf00      	nop
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <Rte_Runnable_Uart_MainFunction>:

void Rte_Runnable_Uart_MainFunction()
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	af00      	add	r7, sp, #0

	Uart_MainFunction();
 8009f0c:	f7f7 fbe6 	bl	80016dc <Uart_MainFunction>

}
 8009f10:	bf00      	nop
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <Rte_Write_Btc_BtcPort_Btc_RxData>:

StdReturnType Rte_Write_Btc_BtcPort_Btc_RxData(uint8* data)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d101      	bne.n	8009f26 <Rte_Write_Btc_BtcPort_Btc_RxData+0x12>
	{

		return RTE_E_NOT_OK;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e004      	b.n	8009f30 <Rte_Write_Btc_BtcPort_Btc_RxData+0x1c>
		/* do nothing */

	}


	Btc_RxData = *data;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	781a      	ldrb	r2, [r3, #0]
 8009f2a:	4b04      	ldr	r3, [pc, #16]	; (8009f3c <Rte_Write_Btc_BtcPort_Btc_RxData+0x28>)
 8009f2c:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 8009f2e:	2300      	movs	r3, #0

}
 8009f30:	4618      	mov	r0, r3
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr
 8009f3c:	20000098 	.word	0x20000098

08009f40 <Rte_Write_Btc_BtcPort_Btc_RxCount>:

StdReturnType Rte_Write_Btc_BtcPort_Btc_RxCount(uint8* data)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <Rte_Write_Btc_BtcPort_Btc_RxCount+0x12>
	{

		return RTE_E_NOT_OK;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e004      	b.n	8009f5c <Rte_Write_Btc_BtcPort_Btc_RxCount+0x1c>
		/* do nothing */

	}


	Btc_RxCount = *data;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	781a      	ldrb	r2, [r3, #0]
 8009f56:	4b04      	ldr	r3, [pc, #16]	; (8009f68 <Rte_Write_Btc_BtcPort_Btc_RxCount+0x28>)
 8009f58:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 8009f5a:	2300      	movs	r3, #0

}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	20000099 	.word	0x20000099

08009f6c <Rte_Write_Btc_BtcPort_Btc_DataBuffer>:

StdReturnType Rte_Write_Btc_BtcPort_Btc_DataBuffer(uint8* data, uint8 position)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	460b      	mov	r3, r1
 8009f76:	70fb      	strb	r3, [r7, #3]

	if(data == NULL_PTR)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <Rte_Write_Btc_BtcPort_Btc_DataBuffer+0x16>
	{

		return RTE_E_NOT_OK;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e005      	b.n	8009f8e <Rte_Write_Btc_BtcPort_Btc_DataBuffer+0x22>
		/* do nothing */

	}


	Btc_DataBuffer[position] = *data;
 8009f82:	78fb      	ldrb	r3, [r7, #3]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	7811      	ldrb	r1, [r2, #0]
 8009f88:	4a04      	ldr	r2, [pc, #16]	; (8009f9c <Rte_Write_Btc_BtcPort_Btc_DataBuffer+0x30>)
 8009f8a:	54d1      	strb	r1, [r2, r3]

	return RTE_E_OK;
 8009f8c:	2300      	movs	r3, #0

}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	370c      	adds	r7, #12
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	20000094 	.word	0x20000094

08009fa0 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>:

StdReturnType Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(uint32* data, uint8 position)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	70fb      	strb	r3, [r7, #3]

	if(data == NULL_PTR)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d101      	bne.n	8009fb6 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer+0x16>
	{

		return RTE_E_NOT_OK;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e006      	b.n	8009fc4 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer+0x24>
		/* do nothing */

	}


	 *data = Adc_ChannelOne_Buffer[position];
 8009fb6:	78fb      	ldrb	r3, [r7, #3]
 8009fb8:	4a05      	ldr	r2, [pc, #20]	; (8009fd0 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer+0x30>)
 8009fba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	601a      	str	r2, [r3, #0]

	return RTE_E_OK;
 8009fc2:	2300      	movs	r3, #0

}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr
 8009fd0:	20000780 	.word	0x20000780

08009fd4 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:

StdReturnType Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d101      	bne.n	8009fe6 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x12>
	{

		return RTE_E_NOT_OK;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e004      	b.n	8009ff0 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>
		/* do nothing */

	}


	Btc_ReceivedDataOnBluetooth = *data;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	781a      	ldrb	r2, [r3, #0]
 8009fea:	4b04      	ldr	r3, [pc, #16]	; (8009ffc <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x28>)
 8009fec:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 8009fee:	2300      	movs	r3, #0

}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr
 8009ffc:	2000009a 	.word	0x2000009a

0800a000 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>:

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(uint8* data)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d101      	bne.n	800a012 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800a00e:	2301      	movs	r3, #1
 800a010:	e004      	b.n	800a01c <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState+0x1c>
		/* do nothing */

	}


	CenLoc_CurrentState = *data;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	781a      	ldrb	r2, [r3, #0]
 800a016:	4b04      	ldr	r3, [pc, #16]	; (800a028 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState+0x28>)
 800a018:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a01a:	2300      	movs	r3, #0

}
 800a01c:	4618      	mov	r0, r3
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr
 800a028:	200000aa 	.word	0x200000aa

0800a02c <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>:
	return RTE_E_OK;

}

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(uint8* data)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState+0x12>
	{

		return RTE_E_NOT_OK;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e004      	b.n	800a048 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState+0x1c>
		/* do nothing */

	}


	CenLoc_FollowMeHomeState = *data;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	781a      	ldrb	r2, [r3, #0]
 800a042:	4b04      	ldr	r3, [pc, #16]	; (800a054 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState+0x28>)
 800a044:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a046:	2300      	movs	r3, #0

}
 800a048:	4618      	mov	r0, r3
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr
 800a054:	200000ac 	.word	0x200000ac

0800a058 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag>:
	return RTE_E_OK;

}

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag(uint8* data)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d101      	bne.n	800a06a <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800a066:	2301      	movs	r3, #1
 800a068:	e004      	b.n	800a074 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag+0x1c>
		/* do nothing */

	}


	CenLoc_Tim2IRQFlag = *data;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	781a      	ldrb	r2, [r3, #0]
 800a06e:	4b04      	ldr	r3, [pc, #16]	; (800a080 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag+0x28>)
 800a070:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a072:	2300      	movs	r3, #0

}
 800a074:	4618      	mov	r0, r3
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr
 800a080:	200000ae 	.word	0x200000ae

0800a084 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag>:

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag(uint8* data)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d101      	bne.n	800a096 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800a092:	2301      	movs	r3, #1
 800a094:	e004      	b.n	800a0a0 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag+0x1c>
		/* do nothing */

	}


	CenLoc_Tim3IRQFlag = *data;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	781a      	ldrb	r2, [r3, #0]
 800a09a:	4b04      	ldr	r3, [pc, #16]	; (800a0ac <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag+0x28>)
 800a09c:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a09e:	2300      	movs	r3, #0

}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr
 800a0ac:	200000af 	.word	0x200000af

0800a0b0 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag>:

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag(uint8* data)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d101      	bne.n	800a0c2 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e004      	b.n	800a0cc <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag+0x1c>
		/* do nothing */

	}


	CenLoc_Tim5IRQFlag = *data;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	781a      	ldrb	r2, [r3, #0]
 800a0c6:	4b04      	ldr	r3, [pc, #16]	; (800a0d8 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag+0x28>)
 800a0c8:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a0ca:	2300      	movs	r3, #0

}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr
 800a0d8:	200000b0 	.word	0x200000b0

0800a0dc <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag>:

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag(uint8* data)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d101      	bne.n	800a0ee <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e004      	b.n	800a0f8 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag+0x1c>
		/* do nothing */

	}


	CenLoc_Tim11IRQFlag = *data;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	781a      	ldrb	r2, [r3, #0]
 800a0f2:	4b04      	ldr	r3, [pc, #16]	; (800a104 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag+0x28>)
 800a0f4:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a0f6:	2300      	movs	r3, #0

}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr
 800a104:	200000b1 	.word	0x200000b1

0800a108 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>:
	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(uint8* data)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d101      	bne.n	800a11a <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800a116:	2301      	movs	r3, #1
 800a118:	e004      	b.n	800a124 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_ReverseLight_CurrentState = *data;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	781a      	ldrb	r2, [r3, #0]
 800a11e:	4b04      	ldr	r3, [pc, #16]	; (800a130 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState+0x28>)
 800a120:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a122:	2300      	movs	r3, #0

}
 800a124:	4618      	mov	r0, r3
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	200000b3 	.word	0x200000b3

0800a134 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState(uint8* data)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d101      	bne.n	800a146 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800a142:	2301      	movs	r3, #1
 800a144:	e004      	b.n	800a150 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_FlashHighBeam_CurrentState = *data;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	781a      	ldrb	r2, [r3, #0]
 800a14a:	4b04      	ldr	r3, [pc, #16]	; (800a15c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState+0x28>)
 800a14c:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a14e:	2300      	movs	r3, #0

}
 800a150:	4618      	mov	r0, r3
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr
 800a15c:	200000b5 	.word	0x200000b5

0800a160 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(uint8* data)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d101      	bne.n	800a172 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800a16e:	2301      	movs	r3, #1
 800a170:	e004      	b.n	800a17c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_BrakeLight_CurrentState = *data;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	781a      	ldrb	r2, [r3, #0]
 800a176:	4b04      	ldr	r3, [pc, #16]	; (800a188 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState+0x28>)
 800a178:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a17a:	2300      	movs	r3, #0

}
 800a17c:	4618      	mov	r0, r3
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr
 800a188:	200000b4 	.word	0x200000b4

0800a18c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(uint8* data)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d101      	bne.n	800a19e <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e004      	b.n	800a1a8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_LightsSwitch_CurrentState = *data;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	781a      	ldrb	r2, [r3, #0]
 800a1a2:	4b04      	ldr	r3, [pc, #16]	; (800a1b4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState+0x28>)
 800a1a4:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a1a6:	2300      	movs	r3, #0

}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr
 800a1b4:	200000b6 	.word	0x200000b6

0800a1b8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(uint8* data)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d101      	bne.n	800a1ca <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e004      	b.n	800a1d4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_HighBeam_CurrentState = *data;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	781a      	ldrb	r2, [r3, #0]
 800a1ce:	4b04      	ldr	r3, [pc, #16]	; (800a1e0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState+0x28>)
 800a1d0:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a1d2:	2300      	movs	r3, #0

}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr
 800a1e0:	200000b7 	.word	0x200000b7

0800a1e4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(uint8* data)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d101      	bne.n	800a1f6 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e004      	b.n	800a200 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_FrontFogLight_CurrentState = *data;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	781a      	ldrb	r2, [r3, #0]
 800a1fa:	4b04      	ldr	r3, [pc, #16]	; (800a20c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState+0x28>)
 800a1fc:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a1fe:	2300      	movs	r3, #0

}
 800a200:	4618      	mov	r0, r3
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	200000b8 	.word	0x200000b8

0800a210 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(uint8* data)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d101      	bne.n	800a222 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800a21e:	2301      	movs	r3, #1
 800a220:	e004      	b.n	800a22c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_TurnSignalLeft_CurrentState = *data;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	781a      	ldrb	r2, [r3, #0]
 800a226:	4b04      	ldr	r3, [pc, #16]	; (800a238 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState+0x28>)
 800a228:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a22a:	2300      	movs	r3, #0

}
 800a22c:	4618      	mov	r0, r3
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr
 800a238:	200000b9 	.word	0x200000b9

0800a23c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(uint8* data)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d101      	bne.n	800a24e <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e004      	b.n	800a258 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_TurnSignalRight_CurrentState = *data;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	781a      	ldrb	r2, [r3, #0]
 800a252:	4b04      	ldr	r3, [pc, #16]	; (800a264 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState+0x28>)
 800a254:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a256:	2300      	movs	r3, #0

}
 800a258:	4618      	mov	r0, r3
 800a25a:	370c      	adds	r7, #12
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr
 800a264:	200000ba 	.word	0x200000ba

0800a268 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(uint8* data)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d101      	bne.n	800a27a <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800a276:	2301      	movs	r3, #1
 800a278:	e004      	b.n	800a284 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_HazardLight_CurrentState = *data;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	781a      	ldrb	r2, [r3, #0]
 800a27e:	4b04      	ldr	r3, [pc, #16]	; (800a290 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState+0x28>)
 800a280:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a282:	2300      	movs	r3, #0

}
 800a284:	4618      	mov	r0, r3
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr
 800a290:	200000bb 	.word	0x200000bb

0800a294 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(uint8* data)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d101      	bne.n	800a2a6 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e004      	b.n	800a2b0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_RearFogLight_CurrentState = *data;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	781a      	ldrb	r2, [r3, #0]
 800a2aa:	4b04      	ldr	r3, [pc, #16]	; (800a2bc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState+0x28>)
 800a2ac:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a2ae:	2300      	movs	r3, #0

}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr
 800a2bc:	200000bc 	.word	0x200000bc

0800a2c0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>:
	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(uint32* data)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d101      	bne.n	800a2d2 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e004      	b.n	800a2dc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag+0x1c>
		/* do nothing */

	}


	ExtLights_RTSFlag = *data;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a04      	ldr	r2, [pc, #16]	; (800a2e8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag+0x28>)
 800a2d8:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800a2da:	2300      	movs	r3, #0

}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr
 800a2e8:	200000c0 	.word	0x200000c0

0800a2ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(uint32* data)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d101      	bne.n	800a2fe <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e004      	b.n	800a308 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag+0x1c>
		/* do nothing */

	}


	ExtLights_LTSFlag = *data;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a04      	ldr	r2, [pc, #16]	; (800a314 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag+0x28>)
 800a304:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800a306:	2300      	movs	r3, #0

}
 800a308:	4618      	mov	r0, r3
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr
 800a314:	200000c4 	.word	0x200000c4

0800a318 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(uint32* data)
{
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d101      	bne.n	800a32a <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800a326:	2301      	movs	r3, #1
 800a328:	e004      	b.n	800a334 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag+0x1c>
		/* do nothing */

	}


	ExtLights_HLFlag = *data;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a04      	ldr	r2, [pc, #16]	; (800a340 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag+0x28>)
 800a330:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800a332:	2300      	movs	r3, #0

}
 800a334:	4618      	mov	r0, r3
 800a336:	370c      	adds	r7, #12
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	200000c8 	.word	0x200000c8

0800a344 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>:

StdReturnType Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(uint8* data)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800a352:	2301      	movs	r3, #1
 800a354:	e004      	b.n	800a360 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState+0x1c>
		/* do nothing */

	}


	IntLights_CurrentState = *data;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	781a      	ldrb	r2, [r3, #0]
 800a35a:	4b04      	ldr	r3, [pc, #16]	; (800a36c <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState+0x28>)
 800a35c:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a35e:	2300      	movs	r3, #0

}
 800a360:	4618      	mov	r0, r3
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr
 800a36c:	200000cd 	.word	0x200000cd

0800a370 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>:
	return RTE_E_OK;

}

StdReturnType Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(uint8* data)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d101      	bne.n	800a382 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4+0x12>
	{

		return RTE_E_NOT_OK;
 800a37e:	2301      	movs	r3, #1
 800a380:	e004      	b.n	800a38c <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4+0x1c>
		/* do nothing */

	}


	SecAlm_TriggerIRQCounterForTimer4 = *data;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	781a      	ldrb	r2, [r3, #0]
 800a386:	4b04      	ldr	r3, [pc, #16]	; (800a398 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4+0x28>)
 800a388:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a38a:	2300      	movs	r3, #0

}
 800a38c:	4618      	mov	r0, r3
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr
 800a398:	200000d0 	.word	0x200000d0

0800a39c <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>:

StdReturnType Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter(uint16* data)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d101      	bne.n	800a3ae <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter+0x12>
	{

		return RTE_E_NOT_OK;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e004      	b.n	800a3b8 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter+0x1c>
		/* do nothing */

	}


	SecAlm_SensorStatusCounter = *data;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	881a      	ldrh	r2, [r3, #0]
 800a3b2:	4b04      	ldr	r3, [pc, #16]	; (800a3c4 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter+0x28>)
 800a3b4:	801a      	strh	r2, [r3, #0]

	return RTE_E_OK;
 800a3b6:	2300      	movs	r3, #0

}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr
 800a3c4:	200000d2 	.word	0x200000d2

0800a3c8 <Rte_Runnable_Btc_MainFunction>:
	return RTE_E_OK;

}

void Rte_Runnable_Btc_MainFunction()
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	af00      	add	r7, sp, #0

	Btc_MainFunction();
 800a3cc:	f7f6 fa5a 	bl	8000884 <Btc_MainFunction>

}
 800a3d0:	bf00      	nop
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <Rte_Runnable_CenLoc_MainFunction>:

void Rte_Runnable_CenLoc_MainFunction()
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	af00      	add	r7, sp, #0

	CenLoc_MainFunction();
 800a3d8:	f7f6 fc72 	bl	8000cc0 <CenLoc_MainFunction>

}
 800a3dc:	bf00      	nop
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <Rte_Runnable_ExtLights_MainFunction>:

void Rte_Runnable_ExtLights_MainFunction()
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	af00      	add	r7, sp, #0

	ExtLights_MainFunction();
 800a3e4:	f7f6 fe2e 	bl	8001044 <ExtLights_MainFunction>

}
 800a3e8:	bf00      	nop
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <Rte_Runnable_IntLights_MainFunction>:

void Rte_Runnable_IntLights_MainFunction()
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	af00      	add	r7, sp, #0

	IntLights_MainFunction();
 800a3f0:	f7f6 ffc8 	bl	8001384 <IntLights_MainFunction>

}
 800a3f4:	bf00      	nop
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <Rte_Runnable_SecAlm_MainFunction>:

void Rte_Runnable_SecAlm_MainFunction()
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	af00      	add	r7, sp, #0

	SecAlm_MainFunction();
 800a3fc:	f7f7 f8ec 	bl	80015d8 <SecAlm_MainFunction>

}
 800a400:	bf00      	nop
 800a402:	bd80      	pop	{r7, pc}

0800a404 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:

StdReturnType Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d101      	bne.n	800a416 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x12>
	{

		return RTE_E_NOT_OK;
 800a412:	2301      	movs	r3, #1
 800a414:	e004      	b.n	800a420 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>
		/* do nothing */

	}


	*data = Btc_ReceivedDataOnBluetooth;
 800a416:	4b05      	ldr	r3, [pc, #20]	; (800a42c <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x28>)
 800a418:	781a      	ldrb	r2, [r3, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a41e:	2300      	movs	r3, #0

}
 800a420:	4618      	mov	r0, r3
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr
 800a42c:	2000009a 	.word	0x2000009a

0800a430 <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>:
	return RTE_E_OK;

}

StdReturnType Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	4613      	mov	r3, r2
 800a43c:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Receive_IT(huart, pData, Size);
 800a43e:	88fb      	ldrh	r3, [r7, #6]
 800a440:	461a      	mov	r2, r3
 800a442:	68b9      	ldr	r1, [r7, #8]
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f7fb fb91 	bl	8005b6c <HAL_UART_Receive_IT>

	return RTE_E_OK;
 800a44a:	2300      	movs	r3, #0

}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>:
	return RTE_E_OK;

}

StdReturnType Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	460b      	mov	r3, r1
 800a45e:	807b      	strh	r3, [r7, #2]
 800a460:	4613      	mov	r3, r2
 800a462:	707b      	strb	r3, [r7, #1]

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 800a464:	787a      	ldrb	r2, [r7, #1]
 800a466:	887b      	ldrh	r3, [r7, #2]
 800a468:	4619      	mov	r1, r3
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7fa f8e2 	bl	8004634 <HAL_GPIO_WritePin>

	return RTE_E_OK;
 800a470:	2300      	movs	r3, #0

}
 800a472:	4618      	mov	r0, r3
 800a474:	3708      	adds	r7, #8
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA>:

StdReturnType Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b084      	sub	sp, #16
 800a47e:	af00      	add	r7, sp, #0
 800a480:	60f8      	str	r0, [r7, #12]
 800a482:	60b9      	str	r1, [r7, #8]
 800a484:	607a      	str	r2, [r7, #4]

	HAL_ADC_Start_DMA(hadc, pData, Length);
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	68b9      	ldr	r1, [r7, #8]
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f7f8 fb54 	bl	8002b38 <HAL_ADC_Start_DMA>

	return RTE_E_OK;
 800a490:	2300      	movs	r3, #0

}
 800a492:	4618      	mov	r0, r3
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>:
	return RTE_E_OK;

}

StdReturnType Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(osTimerId_t timer_id, uint32_t ticks)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b082      	sub	sp, #8
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	6039      	str	r1, [r7, #0]

	osTimerStart(timer_id, ticks);
 800a4a4:	6839      	ldr	r1, [r7, #0]
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7fc fdbe 	bl	8007028 <osTimerStart>

	return RTE_E_OK;
 800a4ac:	2300      	movs	r3, #0

}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3708      	adds	r7, #8
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
	...

0800a4b8 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag>:

StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag(uint32* data)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e004      	b.n	800a4d4 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag+0x1c>
		/* do nothing */

	}


	Timer2Counter_ExtLights_LTSFlag = *data;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a04      	ldr	r2, [pc, #16]	; (800a4e0 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag+0x28>)
 800a4d0:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800a4d2:	2300      	movs	r3, #0


}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	200007c0 	.word	0x200007c0

0800a4e4 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag(uint32* data)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d101      	bne.n	800a4f6 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e004      	b.n	800a500 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag+0x1c>
		/* do nothing */

	}


	Timer2Counter_ExtLights_RTSFlag  = *data;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a04      	ldr	r2, [pc, #16]	; (800a50c <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag+0x28>)
 800a4fc:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800a4fe:	2300      	movs	r3, #0

}
 800a500:	4618      	mov	r0, r3
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr
 800a50c:	200007c4 	.word	0x200007c4

0800a510 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag(uint32* data)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d101      	bne.n	800a522 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800a51e:	2301      	movs	r3, #1
 800a520:	e004      	b.n	800a52c <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag+0x1c>
		/* do nothing */

	}


	Timer2Counter_ExtLights_HLFlag = *data;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a04      	ldr	r2, [pc, #16]	; (800a538 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag+0x28>)
 800a528:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800a52a:	2300      	movs	r3, #0

}
 800a52c:	4618      	mov	r0, r3
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr
 800a538:	200007c8 	.word	0x200007c8

0800a53c <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag(uint8* data)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d101      	bne.n	800a54e <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800a54a:	2301      	movs	r3, #1
 800a54c:	e004      	b.n	800a558 <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag+0x1c>
		/* do nothing */

	}


	Timer2Counter_CenLoc_Tim2IRQFlag = *data;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	781a      	ldrb	r2, [r3, #0]
 800a552:	4b04      	ldr	r3, [pc, #16]	; (800a564 <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag+0x28>)
 800a554:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a556:	2300      	movs	r3, #0

}
 800a558:	4618      	mov	r0, r3
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr
 800a564:	200007cc 	.word	0x200007cc

0800a568 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag(uint8* data)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d101      	bne.n	800a57a <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800a576:	2301      	movs	r3, #1
 800a578:	e004      	b.n	800a584 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag+0x1c>
		/* do nothing */

	}


	Timer5Counter_CenLoc_Tim5IRQFlag = *data;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	781a      	ldrb	r2, [r3, #0]
 800a57e:	4b04      	ldr	r3, [pc, #16]	; (800a590 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag+0x28>)
 800a580:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a582:	2300      	movs	r3, #0

}
 800a584:	4618      	mov	r0, r3
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	200007cd 	.word	0x200007cd

0800a594 <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag(uint8* data)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d101      	bne.n	800a5a6 <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e004      	b.n	800a5b0 <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag+0x1c>
		/* do nothing */

	}


	Timer3Counter_CenLoc_Tim3IRQFlag = *data;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	781a      	ldrb	r2, [r3, #0]
 800a5aa:	4b04      	ldr	r3, [pc, #16]	; (800a5bc <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag+0x28>)
 800a5ac:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a5ae:	2300      	movs	r3, #0

}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr
 800a5bc:	200007cf 	.word	0x200007cf

0800a5c0 <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag(uint8* data)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d101      	bne.n	800a5d2 <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e004      	b.n	800a5dc <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag+0x1c>
		/* do nothing */

	}


	Timer11Counter_CenLoc_Tim11IRQFlag = *data;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	781a      	ldrb	r2, [r3, #0]
 800a5d6:	4b04      	ldr	r3, [pc, #16]	; (800a5e8 <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag+0x28>)
 800a5d8:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800a5da:	2300      	movs	r3, #0

}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr
 800a5e8:	200007ce 	.word	0x200007ce

0800a5ec <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>:

StdReturnType Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(osTimerId_t timer_id)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]

	osTimerStop(timer_id);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7fc fd45 	bl	8007084 <osTimerStop>

	return RTE_E_OK;
 800a5fa:	2300      	movs	r3, #0

}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3708      	adds	r7, #8
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <Crc_VerifyUartData>:
void Crc_MainFunction();
void Crc_InitCrcValuesForUart();
void HAL_CRC_ErrorCallback(CRC_HandleTypeDef *hcrc);

StdReturnType Crc_VerifyUartData()
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0

	uint8 returnValue = E_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	73fb      	strb	r3, [r7, #15]
	uint8 receivedValue = STD_LOW;
 800a60e:	2300      	movs	r3, #0
 800a610:	71fb      	strb	r3, [r7, #7]
	uint32 calculatedCrc = STD_LOW;
 800a612:	2300      	movs	r3, #0
 800a614:	60bb      	str	r3, [r7, #8]

	Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&receivedValue);
 800a616:	1dfb      	adds	r3, r7, #7
 800a618:	4618      	mov	r0, r3
 800a61a:	f7ff fef3 	bl	800a404 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>

	calculatedCrc = HAL_CRC_Calculate(&hcrc, (uint32*)&receivedValue, 1);
 800a61e:	1dfb      	adds	r3, r7, #7
 800a620:	2201      	movs	r2, #1
 800a622:	4619      	mov	r1, r3
 800a624:	48a6      	ldr	r0, [pc, #664]	; (800a8c0 <Crc_VerifyUartData+0x2bc>)
 800a626:	f7f8 ffe6 	bl	80035f6 <HAL_CRC_Calculate>
 800a62a:	60b8      	str	r0, [r7, #8]

	switch(receivedValue)
 800a62c:	79fb      	ldrb	r3, [r7, #7]
 800a62e:	3b01      	subs	r3, #1
 800a630:	2b1c      	cmp	r3, #28
 800a632:	f200 81ae 	bhi.w	800a992 <Crc_VerifyUartData+0x38e>
 800a636:	a201      	add	r2, pc, #4	; (adr r2, 800a63c <Crc_VerifyUartData+0x38>)
 800a638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a63c:	0800a777 	.word	0x0800a777
 800a640:	0800a78d 	.word	0x0800a78d
 800a644:	0800a7a3 	.word	0x0800a7a3
 800a648:	0800a7b9 	.word	0x0800a7b9
 800a64c:	0800a7cf 	.word	0x0800a7cf
 800a650:	0800a7e5 	.word	0x0800a7e5
 800a654:	0800a7fb 	.word	0x0800a7fb
 800a658:	0800a811 	.word	0x0800a811
 800a65c:	0800a827 	.word	0x0800a827
 800a660:	0800a83d 	.word	0x0800a83d
 800a664:	0800a853 	.word	0x0800a853
 800a668:	0800a869 	.word	0x0800a869
 800a66c:	0800a87f 	.word	0x0800a87f
 800a670:	0800a895 	.word	0x0800a895
 800a674:	0800a8ab 	.word	0x0800a8ab
 800a678:	0800a925 	.word	0x0800a925
 800a67c:	0800a93b 	.word	0x0800a93b
 800a680:	0800a951 	.word	0x0800a951
 800a684:	0800a967 	.word	0x0800a967
 800a688:	0800a97d 	.word	0x0800a97d
 800a68c:	0800a6f3 	.word	0x0800a6f3
 800a690:	0800a709 	.word	0x0800a709
 800a694:	0800a71f 	.word	0x0800a71f
 800a698:	0800a735 	.word	0x0800a735
 800a69c:	0800a74b 	.word	0x0800a74b
 800a6a0:	0800a761 	.word	0x0800a761
 800a6a4:	0800a6b1 	.word	0x0800a6b1
 800a6a8:	0800a6c7 	.word	0x0800a6c7
 800a6ac:	0800a6dd 	.word	0x0800a6dd
	{

		case RTE_P_BTC_RX_IGNITION_STEP_ONE:

			if(calculatedCrc == Crc_Ignition_Step_One)
 800a6b0:	4b84      	ldr	r3, [pc, #528]	; (800a8c4 <Crc_VerifyUartData+0x2c0>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	68ba      	ldr	r2, [r7, #8]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d102      	bne.n	800a6c0 <Crc_VerifyUartData+0xbc>
			{

				returnValue = E_OK;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a6be:	e169      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	73fb      	strb	r3, [r7, #15]
			break;
 800a6c4:	e166      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_IGNITION_STEP_TWO:

			if(calculatedCrc == Crc_Ignition_Step_Two)
 800a6c6:	4b80      	ldr	r3, [pc, #512]	; (800a8c8 <Crc_VerifyUartData+0x2c4>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d102      	bne.n	800a6d6 <Crc_VerifyUartData+0xd2>
			{

				returnValue = E_OK;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a6d4:	e15e      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	73fb      	strb	r3, [r7, #15]
			break;
 800a6da:	e15b      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_IGNITION_TURN_OFF:

			if(calculatedCrc == Crc_Ignition_Turn_Off)
 800a6dc:	4b7b      	ldr	r3, [pc, #492]	; (800a8cc <Crc_VerifyUartData+0x2c8>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	68ba      	ldr	r2, [r7, #8]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d102      	bne.n	800a6ec <Crc_VerifyUartData+0xe8>
			{

				returnValue = E_OK;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a6ea:	e153      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	73fb      	strb	r3, [r7, #15]
			break;
 800a6f0:	e150      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:

			if(calculatedCrc == Crc_ExtLights_ReverseLight_On)
 800a6f2:	4b77      	ldr	r3, [pc, #476]	; (800a8d0 <Crc_VerifyUartData+0x2cc>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68ba      	ldr	r2, [r7, #8]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d102      	bne.n	800a702 <Crc_VerifyUartData+0xfe>
			{

				returnValue = E_OK;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a700:	e148      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a702:	2301      	movs	r3, #1
 800a704:	73fb      	strb	r3, [r7, #15]
			break;
 800a706:	e145      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:

			if(calculatedCrc == Crc_ExtLights_ReverseLight_Off)
 800a708:	4b72      	ldr	r3, [pc, #456]	; (800a8d4 <Crc_VerifyUartData+0x2d0>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d102      	bne.n	800a718 <Crc_VerifyUartData+0x114>
			{

				returnValue = E_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a716:	e13d      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a718:	2301      	movs	r3, #1
 800a71a:	73fb      	strb	r3, [r7, #15]
			break;
 800a71c:	e13a      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO:

			if(calculatedCrc == Crc_ExtLights_PositionZero)
 800a71e:	4b6e      	ldr	r3, [pc, #440]	; (800a8d8 <Crc_VerifyUartData+0x2d4>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	429a      	cmp	r2, r3
 800a726:	d102      	bne.n	800a72e <Crc_VerifyUartData+0x12a>
			{

				returnValue = E_OK;
 800a728:	2300      	movs	r3, #0
 800a72a:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a72c:	e132      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a72e:	2301      	movs	r3, #1
 800a730:	73fb      	strb	r3, [r7, #15]
			break;
 800a732:	e12f      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:

			if(calculatedCrc == Crc_ExtLights_AutomaticLights)
 800a734:	4b69      	ldr	r3, [pc, #420]	; (800a8dc <Crc_VerifyUartData+0x2d8>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	68ba      	ldr	r2, [r7, #8]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d102      	bne.n	800a744 <Crc_VerifyUartData+0x140>
			{

				returnValue = E_OK;
 800a73e:	2300      	movs	r3, #0
 800a740:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a742:	e127      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a744:	2301      	movs	r3, #1
 800a746:	73fb      	strb	r3, [r7, #15]
			break;
 800a748:	e124      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS:

			if(calculatedCrc == Crc_ExtLights_PositionLights)
 800a74a:	4b65      	ldr	r3, [pc, #404]	; (800a8e0 <Crc_VerifyUartData+0x2dc>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68ba      	ldr	r2, [r7, #8]
 800a750:	429a      	cmp	r2, r3
 800a752:	d102      	bne.n	800a75a <Crc_VerifyUartData+0x156>
			{

				returnValue = E_OK;
 800a754:	2300      	movs	r3, #0
 800a756:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a758:	e11c      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a75a:	2301      	movs	r3, #1
 800a75c:	73fb      	strb	r3, [r7, #15]
			break;
 800a75e:	e119      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:

			if(calculatedCrc == Crc_ExtLights_NightTimeLights)
 800a760:	4b60      	ldr	r3, [pc, #384]	; (800a8e4 <Crc_VerifyUartData+0x2e0>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	429a      	cmp	r2, r3
 800a768:	d102      	bne.n	800a770 <Crc_VerifyUartData+0x16c>
			{

				returnValue = E_OK;
 800a76a:	2300      	movs	r3, #0
 800a76c:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a76e:	e111      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a770:	2301      	movs	r3, #1
 800a772:	73fb      	strb	r3, [r7, #15]
			break;
 800a774:	e10e      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_CENLOC_ON:

			if(calculatedCrc == Crc_CenLoc_On)
 800a776:	4b5c      	ldr	r3, [pc, #368]	; (800a8e8 <Crc_VerifyUartData+0x2e4>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68ba      	ldr	r2, [r7, #8]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d102      	bne.n	800a786 <Crc_VerifyUartData+0x182>
			{

				returnValue = E_OK;
 800a780:	2300      	movs	r3, #0
 800a782:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a784:	e106      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a786:	2301      	movs	r3, #1
 800a788:	73fb      	strb	r3, [r7, #15]
			break;
 800a78a:	e103      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_CENLOC_OFF:

			if(calculatedCrc == Crc_CenLoc_Off)
 800a78c:	4b57      	ldr	r3, [pc, #348]	; (800a8ec <Crc_VerifyUartData+0x2e8>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	429a      	cmp	r2, r3
 800a794:	d102      	bne.n	800a79c <Crc_VerifyUartData+0x198>
			{

				returnValue = E_OK;
 800a796:	2300      	movs	r3, #0
 800a798:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a79a:	e0fb      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a79c:	2301      	movs	r3, #1
 800a79e:	73fb      	strb	r3, [r7, #15]
			break;
 800a7a0:	e0f8      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON:

			if(calculatedCrc == Crc_ExtLights_HighBeam_On)
 800a7a2:	4b53      	ldr	r3, [pc, #332]	; (800a8f0 <Crc_VerifyUartData+0x2ec>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68ba      	ldr	r2, [r7, #8]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d102      	bne.n	800a7b2 <Crc_VerifyUartData+0x1ae>
			{

				returnValue = E_OK;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a7b0:	e0f0      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	73fb      	strb	r3, [r7, #15]
			break;
 800a7b6:	e0ed      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:

			if(calculatedCrc == Crc_ExtLights_HighBeam_Off)
 800a7b8:	4b4e      	ldr	r3, [pc, #312]	; (800a8f4 <Crc_VerifyUartData+0x2f0>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68ba      	ldr	r2, [r7, #8]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d102      	bne.n	800a7c8 <Crc_VerifyUartData+0x1c4>
			{

				returnValue = E_OK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a7c6:	e0e5      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	73fb      	strb	r3, [r7, #15]
			break;
 800a7cc:	e0e2      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON:

			if(calculatedCrc == Crc_ExtLights_FlashHighBeam_On)
 800a7ce:	4b4a      	ldr	r3, [pc, #296]	; (800a8f8 <Crc_VerifyUartData+0x2f4>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d102      	bne.n	800a7de <Crc_VerifyUartData+0x1da>
			{

				returnValue = E_OK;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a7dc:	e0da      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	73fb      	strb	r3, [r7, #15]
			break;
 800a7e2:	e0d7      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF:

			if(calculatedCrc == Crc_ExtLights_FlashHighBeam_Off)
 800a7e4:	4b45      	ldr	r3, [pc, #276]	; (800a8fc <Crc_VerifyUartData+0x2f8>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d102      	bne.n	800a7f4 <Crc_VerifyUartData+0x1f0>
			{

				returnValue = E_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a7f2:	e0cf      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	73fb      	strb	r3, [r7, #15]
			break;
 800a7f8:	e0cc      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:

			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_On)
 800a7fa:	4b41      	ldr	r3, [pc, #260]	; (800a900 <Crc_VerifyUartData+0x2fc>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68ba      	ldr	r2, [r7, #8]
 800a800:	429a      	cmp	r2, r3
 800a802:	d102      	bne.n	800a80a <Crc_VerifyUartData+0x206>
			{

				returnValue = E_OK;
 800a804:	2300      	movs	r3, #0
 800a806:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a808:	e0c4      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a80a:	2301      	movs	r3, #1
 800a80c:	73fb      	strb	r3, [r7, #15]
			break;
 800a80e:	e0c1      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:

			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_Off)
 800a810:	4b3c      	ldr	r3, [pc, #240]	; (800a904 <Crc_VerifyUartData+0x300>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	429a      	cmp	r2, r3
 800a818:	d102      	bne.n	800a820 <Crc_VerifyUartData+0x21c>
			{

				returnValue = E_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a81e:	e0b9      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a820:	2301      	movs	r3, #1
 800a822:	73fb      	strb	r3, [r7, #15]
			break;
 800a824:	e0b6      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:

			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_On)
 800a826:	4b38      	ldr	r3, [pc, #224]	; (800a908 <Crc_VerifyUartData+0x304>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d102      	bne.n	800a836 <Crc_VerifyUartData+0x232>
			{

				returnValue = E_OK;
 800a830:	2300      	movs	r3, #0
 800a832:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a834:	e0ae      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a836:	2301      	movs	r3, #1
 800a838:	73fb      	strb	r3, [r7, #15]
			break;
 800a83a:	e0ab      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:

			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_Off)
 800a83c:	4b33      	ldr	r3, [pc, #204]	; (800a90c <Crc_VerifyUartData+0x308>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	68ba      	ldr	r2, [r7, #8]
 800a842:	429a      	cmp	r2, r3
 800a844:	d102      	bne.n	800a84c <Crc_VerifyUartData+0x248>
			{

				returnValue = E_OK;
 800a846:	2300      	movs	r3, #0
 800a848:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a84a:	e0a3      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a84c:	2301      	movs	r3, #1
 800a84e:	73fb      	strb	r3, [r7, #15]
			break;
 800a850:	e0a0      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:

			if(calculatedCrc == Crc_ExtLights_HazardLight_On)
 800a852:	4b2f      	ldr	r3, [pc, #188]	; (800a910 <Crc_VerifyUartData+0x30c>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	68ba      	ldr	r2, [r7, #8]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d102      	bne.n	800a862 <Crc_VerifyUartData+0x25e>
			{

				returnValue = E_OK;
 800a85c:	2300      	movs	r3, #0
 800a85e:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a860:	e098      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a862:	2301      	movs	r3, #1
 800a864:	73fb      	strb	r3, [r7, #15]
			break;
 800a866:	e095      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:

			if(calculatedCrc == Crc_ExtLights_HazardLight_Off)
 800a868:	4b2a      	ldr	r3, [pc, #168]	; (800a914 <Crc_VerifyUartData+0x310>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	68ba      	ldr	r2, [r7, #8]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d102      	bne.n	800a878 <Crc_VerifyUartData+0x274>
			{

				returnValue = E_OK;
 800a872:	2300      	movs	r3, #0
 800a874:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a876:	e08d      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a878:	2301      	movs	r3, #1
 800a87a:	73fb      	strb	r3, [r7, #15]
			break;
 800a87c:	e08a      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:

			if(calculatedCrc == Crc_ExtLights_FogLightFront_On)
 800a87e:	4b26      	ldr	r3, [pc, #152]	; (800a918 <Crc_VerifyUartData+0x314>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	429a      	cmp	r2, r3
 800a886:	d102      	bne.n	800a88e <Crc_VerifyUartData+0x28a>
			{

				returnValue = E_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a88c:	e082      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a88e:	2301      	movs	r3, #1
 800a890:	73fb      	strb	r3, [r7, #15]
			break;
 800a892:	e07f      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:

			if(calculatedCrc == Crc_ExtLights_FogLightFront_Off)
 800a894:	4b21      	ldr	r3, [pc, #132]	; (800a91c <Crc_VerifyUartData+0x318>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d102      	bne.n	800a8a4 <Crc_VerifyUartData+0x2a0>
			{

				returnValue = E_OK;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a8a2:	e077      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	73fb      	strb	r3, [r7, #15]
			break;
 800a8a8:	e074      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:

			if(calculatedCrc == Crc_ExtLights_FogLightRear_On)
 800a8aa:	4b1d      	ldr	r3, [pc, #116]	; (800a920 <Crc_VerifyUartData+0x31c>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d102      	bne.n	800a8ba <Crc_VerifyUartData+0x2b6>
			{

				returnValue = E_OK;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a8b8:	e06c      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	73fb      	strb	r3, [r7, #15]
			break;
 800a8be:	e069      	b.n	800a994 <Crc_VerifyUartData+0x390>
 800a8c0:	2000019c 	.word	0x2000019c
 800a8c4:	20007a40 	.word	0x20007a40
 800a8c8:	20007a44 	.word	0x20007a44
 800a8cc:	20007a48 	.word	0x20007a48
 800a8d0:	20007a28 	.word	0x20007a28
 800a8d4:	20007a2c 	.word	0x20007a2c
 800a8d8:	20007a30 	.word	0x20007a30
 800a8dc:	20007a34 	.word	0x20007a34
 800a8e0:	20007a38 	.word	0x20007a38
 800a8e4:	20007a3c 	.word	0x20007a3c
 800a8e8:	200079e0 	.word	0x200079e0
 800a8ec:	200079e4 	.word	0x200079e4
 800a8f0:	200079e8 	.word	0x200079e8
 800a8f4:	200079ec 	.word	0x200079ec
 800a8f8:	200079f0 	.word	0x200079f0
 800a8fc:	200079f4 	.word	0x200079f4
 800a900:	200079f8 	.word	0x200079f8
 800a904:	200079fc 	.word	0x200079fc
 800a908:	20007a00 	.word	0x20007a00
 800a90c:	20007a04 	.word	0x20007a04
 800a910:	20007a08 	.word	0x20007a08
 800a914:	20007a0c 	.word	0x20007a0c
 800a918:	20007a10 	.word	0x20007a10
 800a91c:	20007a14 	.word	0x20007a14
 800a920:	20007a18 	.word	0x20007a18

		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:

			if(calculatedCrc == Crc_ExtLights_FogLightRear_Off)
 800a924:	4b1e      	ldr	r3, [pc, #120]	; (800a9a0 <Crc_VerifyUartData+0x39c>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d102      	bne.n	800a934 <Crc_VerifyUartData+0x330>
			{

				returnValue = E_OK;
 800a92e:	2300      	movs	r3, #0
 800a930:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a932:	e02f      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a934:	2301      	movs	r3, #1
 800a936:	73fb      	strb	r3, [r7, #15]
			break;
 800a938:	e02c      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON:

			if(calculatedCrc == Crc_ExtLights_BrakeLight_On)
 800a93a:	4b1a      	ldr	r3, [pc, #104]	; (800a9a4 <Crc_VerifyUartData+0x3a0>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	68ba      	ldr	r2, [r7, #8]
 800a940:	429a      	cmp	r2, r3
 800a942:	d102      	bne.n	800a94a <Crc_VerifyUartData+0x346>
						{

							returnValue = E_OK;
 800a944:	2300      	movs	r3, #0
 800a946:	73fb      	strb	r3, [r7, #15]

							returnValue = E_NOT_OK;

						}

			break;
 800a948:	e024      	b.n	800a994 <Crc_VerifyUartData+0x390>
							returnValue = E_NOT_OK;
 800a94a:	2301      	movs	r3, #1
 800a94c:	73fb      	strb	r3, [r7, #15]
			break;
 800a94e:	e021      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:

			if(calculatedCrc == Crc_ExtLights_BrakeLight_Off)
 800a950:	4b15      	ldr	r3, [pc, #84]	; (800a9a8 <Crc_VerifyUartData+0x3a4>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68ba      	ldr	r2, [r7, #8]
 800a956:	429a      	cmp	r2, r3
 800a958:	d102      	bne.n	800a960 <Crc_VerifyUartData+0x35c>
			{

				returnValue = E_OK;
 800a95a:	2300      	movs	r3, #0
 800a95c:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a95e:	e019      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a960:	2301      	movs	r3, #1
 800a962:	73fb      	strb	r3, [r7, #15]
			break;
 800a964:	e016      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:

			if(calculatedCrc == Crc_IntLights_InteriorLight_On)
 800a966:	4b11      	ldr	r3, [pc, #68]	; (800a9ac <Crc_VerifyUartData+0x3a8>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d102      	bne.n	800a976 <Crc_VerifyUartData+0x372>
			{

				returnValue = E_OK;
 800a970:	2300      	movs	r3, #0
 800a972:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a974:	e00e      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a976:	2301      	movs	r3, #1
 800a978:	73fb      	strb	r3, [r7, #15]
			break;
 800a97a:	e00b      	b.n	800a994 <Crc_VerifyUartData+0x390>

		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:

			if(calculatedCrc == Crc_IntLights_InteriorLights_Off)
 800a97c:	4b0c      	ldr	r3, [pc, #48]	; (800a9b0 <Crc_VerifyUartData+0x3ac>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	429a      	cmp	r2, r3
 800a984:	d102      	bne.n	800a98c <Crc_VerifyUartData+0x388>
			{

				returnValue = E_OK;
 800a986:	2300      	movs	r3, #0
 800a988:	73fb      	strb	r3, [r7, #15]

				returnValue = E_NOT_OK;

			}

			break;
 800a98a:	e003      	b.n	800a994 <Crc_VerifyUartData+0x390>
				returnValue = E_NOT_OK;
 800a98c:	2301      	movs	r3, #1
 800a98e:	73fb      	strb	r3, [r7, #15]
			break;
 800a990:	e000      	b.n	800a994 <Crc_VerifyUartData+0x390>

		default:

			break;
 800a992:	bf00      	nop

	}

	return returnValue;
 800a994:	7bfb      	ldrb	r3, [r7, #15]

}
 800a996:	4618      	mov	r0, r3
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	20007a1c 	.word	0x20007a1c
 800a9a4:	20007a20 	.word	0x20007a20
 800a9a8:	20007a24 	.word	0x20007a24
 800a9ac:	20007a4c 	.word	0x20007a4c
 800a9b0:	20007a50 	.word	0x20007a50

0800a9b4 <Crc_InitCrcValuesForUart>:

void Crc_InitCrcValuesForUart()
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0

	uint32 value = 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	607b      	str	r3, [r7, #4]

	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON;
 800a9be:	230f      	movs	r3, #15
 800a9c0:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800a9c2:	1d3b      	adds	r3, r7, #4
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	489e      	ldr	r0, [pc, #632]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800a9ca:	f7f8 fe14 	bl	80035f6 <HAL_CRC_Calculate>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	4a9d      	ldr	r2, [pc, #628]	; (800ac48 <Crc_InitCrcValuesForUart+0x294>)
 800a9d2:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF;
 800a9d4:	2310      	movs	r3, #16
 800a9d6:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800a9d8:	1d3b      	adds	r3, r7, #4
 800a9da:	2201      	movs	r2, #1
 800a9dc:	4619      	mov	r1, r3
 800a9de:	4899      	ldr	r0, [pc, #612]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800a9e0:	f7f8 fe09 	bl	80035f6 <HAL_CRC_Calculate>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	4a99      	ldr	r2, [pc, #612]	; (800ac4c <Crc_InitCrcValuesForUart+0x298>)
 800a9e8:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_CENLOC_ON;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800a9ee:	1d3b      	adds	r3, r7, #4
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	4893      	ldr	r0, [pc, #588]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800a9f6:	f7f8 fdfe 	bl	80035f6 <HAL_CRC_Calculate>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	4a94      	ldr	r2, [pc, #592]	; (800ac50 <Crc_InitCrcValuesForUart+0x29c>)
 800a9fe:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_CENLOC_OFF;
 800aa00:	2302      	movs	r3, #2
 800aa02:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800aa04:	1d3b      	adds	r3, r7, #4
 800aa06:	2201      	movs	r2, #1
 800aa08:	4619      	mov	r1, r3
 800aa0a:	488e      	ldr	r0, [pc, #568]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800aa0c:	f7f8 fdf3 	bl	80035f6 <HAL_CRC_Calculate>
 800aa10:	4603      	mov	r3, r0
 800aa12:	4a90      	ldr	r2, [pc, #576]	; (800ac54 <Crc_InitCrcValuesForUart+0x2a0>)
 800aa14:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON;
 800aa16:	2303      	movs	r3, #3
 800aa18:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800aa1a:	1d3b      	adds	r3, r7, #4
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	4619      	mov	r1, r3
 800aa20:	4888      	ldr	r0, [pc, #544]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800aa22:	f7f8 fde8 	bl	80035f6 <HAL_CRC_Calculate>
 800aa26:	4603      	mov	r3, r0
 800aa28:	4a8b      	ldr	r2, [pc, #556]	; (800ac58 <Crc_InitCrcValuesForUart+0x2a4>)
 800aa2a:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF;
 800aa2c:	2304      	movs	r3, #4
 800aa2e:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800aa30:	1d3b      	adds	r3, r7, #4
 800aa32:	2201      	movs	r2, #1
 800aa34:	4619      	mov	r1, r3
 800aa36:	4883      	ldr	r0, [pc, #524]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800aa38:	f7f8 fddd 	bl	80035f6 <HAL_CRC_Calculate>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	4a87      	ldr	r2, [pc, #540]	; (800ac5c <Crc_InitCrcValuesForUart+0x2a8>)
 800aa40:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON;
 800aa42:	2305      	movs	r3, #5
 800aa44:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FlashHighBeam_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800aa46:	1d3b      	adds	r3, r7, #4
 800aa48:	2201      	movs	r2, #1
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	487d      	ldr	r0, [pc, #500]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800aa4e:	f7f8 fdd2 	bl	80035f6 <HAL_CRC_Calculate>
 800aa52:	4603      	mov	r3, r0
 800aa54:	4a82      	ldr	r2, [pc, #520]	; (800ac60 <Crc_InitCrcValuesForUart+0x2ac>)
 800aa56:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF;
 800aa58:	2306      	movs	r3, #6
 800aa5a:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FlashHighBeam_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800aa5c:	1d3b      	adds	r3, r7, #4
 800aa5e:	2201      	movs	r2, #1
 800aa60:	4619      	mov	r1, r3
 800aa62:	4878      	ldr	r0, [pc, #480]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800aa64:	f7f8 fdc7 	bl	80035f6 <HAL_CRC_Calculate>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	4a7e      	ldr	r2, [pc, #504]	; (800ac64 <Crc_InitCrcValuesForUart+0x2b0>)
 800aa6c:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON;
 800aa6e:	2307      	movs	r3, #7
 800aa70:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800aa72:	1d3b      	adds	r3, r7, #4
 800aa74:	2201      	movs	r2, #1
 800aa76:	4619      	mov	r1, r3
 800aa78:	4872      	ldr	r0, [pc, #456]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800aa7a:	f7f8 fdbc 	bl	80035f6 <HAL_CRC_Calculate>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	4a79      	ldr	r2, [pc, #484]	; (800ac68 <Crc_InitCrcValuesForUart+0x2b4>)
 800aa82:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF;
 800aa84:	2308      	movs	r3, #8
 800aa86:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800aa88:	1d3b      	adds	r3, r7, #4
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	486d      	ldr	r0, [pc, #436]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800aa90:	f7f8 fdb1 	bl	80035f6 <HAL_CRC_Calculate>
 800aa94:	4603      	mov	r3, r0
 800aa96:	4a75      	ldr	r2, [pc, #468]	; (800ac6c <Crc_InitCrcValuesForUart+0x2b8>)
 800aa98:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON;
 800aa9a:	2309      	movs	r3, #9
 800aa9c:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800aa9e:	1d3b      	adds	r3, r7, #4
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	4867      	ldr	r0, [pc, #412]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800aaa6:	f7f8 fda6 	bl	80035f6 <HAL_CRC_Calculate>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	4a70      	ldr	r2, [pc, #448]	; (800ac70 <Crc_InitCrcValuesForUart+0x2bc>)
 800aaae:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF;
 800aab0:	230a      	movs	r3, #10
 800aab2:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800aab4:	1d3b      	adds	r3, r7, #4
 800aab6:	2201      	movs	r2, #1
 800aab8:	4619      	mov	r1, r3
 800aaba:	4862      	ldr	r0, [pc, #392]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800aabc:	f7f8 fd9b 	bl	80035f6 <HAL_CRC_Calculate>
 800aac0:	4603      	mov	r3, r0
 800aac2:	4a6c      	ldr	r2, [pc, #432]	; (800ac74 <Crc_InitCrcValuesForUart+0x2c0>)
 800aac4:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON;
 800aac6:	230b      	movs	r3, #11
 800aac8:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800aaca:	1d3b      	adds	r3, r7, #4
 800aacc:	2201      	movs	r2, #1
 800aace:	4619      	mov	r1, r3
 800aad0:	485c      	ldr	r0, [pc, #368]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800aad2:	f7f8 fd90 	bl	80035f6 <HAL_CRC_Calculate>
 800aad6:	4603      	mov	r3, r0
 800aad8:	4a67      	ldr	r2, [pc, #412]	; (800ac78 <Crc_InitCrcValuesForUart+0x2c4>)
 800aada:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF;
 800aadc:	230c      	movs	r3, #12
 800aade:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800aae0:	1d3b      	adds	r3, r7, #4
 800aae2:	2201      	movs	r2, #1
 800aae4:	4619      	mov	r1, r3
 800aae6:	4857      	ldr	r0, [pc, #348]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800aae8:	f7f8 fd85 	bl	80035f6 <HAL_CRC_Calculate>
 800aaec:	4603      	mov	r3, r0
 800aaee:	4a63      	ldr	r2, [pc, #396]	; (800ac7c <Crc_InitCrcValuesForUart+0x2c8>)
 800aaf0:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON;
 800aaf2:	230d      	movs	r3, #13
 800aaf4:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800aaf6:	1d3b      	adds	r3, r7, #4
 800aaf8:	2201      	movs	r2, #1
 800aafa:	4619      	mov	r1, r3
 800aafc:	4851      	ldr	r0, [pc, #324]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800aafe:	f7f8 fd7a 	bl	80035f6 <HAL_CRC_Calculate>
 800ab02:	4603      	mov	r3, r0
 800ab04:	4a5e      	ldr	r2, [pc, #376]	; (800ac80 <Crc_InitCrcValuesForUart+0x2cc>)
 800ab06:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF;
 800ab08:	230e      	movs	r3, #14
 800ab0a:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ab0c:	1d3b      	adds	r3, r7, #4
 800ab0e:	2201      	movs	r2, #1
 800ab10:	4619      	mov	r1, r3
 800ab12:	484c      	ldr	r0, [pc, #304]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800ab14:	f7f8 fd6f 	bl	80035f6 <HAL_CRC_Calculate>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	4a5a      	ldr	r2, [pc, #360]	; (800ac84 <Crc_InitCrcValuesForUart+0x2d0>)
 800ab1c:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON;
 800ab1e:	2311      	movs	r3, #17
 800ab20:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ab22:	1d3b      	adds	r3, r7, #4
 800ab24:	2201      	movs	r2, #1
 800ab26:	4619      	mov	r1, r3
 800ab28:	4846      	ldr	r0, [pc, #280]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800ab2a:	f7f8 fd64 	bl	80035f6 <HAL_CRC_Calculate>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	4a55      	ldr	r2, [pc, #340]	; (800ac88 <Crc_InitCrcValuesForUart+0x2d4>)
 800ab32:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF;
 800ab34:	2312      	movs	r3, #18
 800ab36:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ab38:	1d3b      	adds	r3, r7, #4
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	4841      	ldr	r0, [pc, #260]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800ab40:	f7f8 fd59 	bl	80035f6 <HAL_CRC_Calculate>
 800ab44:	4603      	mov	r3, r0
 800ab46:	4a51      	ldr	r2, [pc, #324]	; (800ac8c <Crc_InitCrcValuesForUart+0x2d8>)
 800ab48:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON;
 800ab4a:	2315      	movs	r3, #21
 800ab4c:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ab4e:	1d3b      	adds	r3, r7, #4
 800ab50:	2201      	movs	r2, #1
 800ab52:	4619      	mov	r1, r3
 800ab54:	483b      	ldr	r0, [pc, #236]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800ab56:	f7f8 fd4e 	bl	80035f6 <HAL_CRC_Calculate>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	4a4c      	ldr	r2, [pc, #304]	; (800ac90 <Crc_InitCrcValuesForUart+0x2dc>)
 800ab5e:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF;
 800ab60:	2316      	movs	r3, #22
 800ab62:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ab64:	1d3b      	adds	r3, r7, #4
 800ab66:	2201      	movs	r2, #1
 800ab68:	4619      	mov	r1, r3
 800ab6a:	4836      	ldr	r0, [pc, #216]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800ab6c:	f7f8 fd43 	bl	80035f6 <HAL_CRC_Calculate>
 800ab70:	4603      	mov	r3, r0
 800ab72:	4a48      	ldr	r2, [pc, #288]	; (800ac94 <Crc_InitCrcValuesForUart+0x2e0>)
 800ab74:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO;
 800ab76:	2317      	movs	r3, #23
 800ab78:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionZero = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ab7a:	1d3b      	adds	r3, r7, #4
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	4619      	mov	r1, r3
 800ab80:	4830      	ldr	r0, [pc, #192]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800ab82:	f7f8 fd38 	bl	80035f6 <HAL_CRC_Calculate>
 800ab86:	4603      	mov	r3, r0
 800ab88:	4a43      	ldr	r2, [pc, #268]	; (800ac98 <Crc_InitCrcValuesForUart+0x2e4>)
 800ab8a:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 800ab8c:	2318      	movs	r3, #24
 800ab8e:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_AutomaticLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ab90:	1d3b      	adds	r3, r7, #4
 800ab92:	2201      	movs	r2, #1
 800ab94:	4619      	mov	r1, r3
 800ab96:	482b      	ldr	r0, [pc, #172]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800ab98:	f7f8 fd2d 	bl	80035f6 <HAL_CRC_Calculate>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	4a3f      	ldr	r2, [pc, #252]	; (800ac9c <Crc_InitCrcValuesForUart+0x2e8>)
 800aba0:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 800aba2:	2319      	movs	r3, #25
 800aba4:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 800aba6:	1d3b      	adds	r3, r7, #4
 800aba8:	2201      	movs	r2, #1
 800abaa:	4619      	mov	r1, r3
 800abac:	4825      	ldr	r0, [pc, #148]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800abae:	f7f8 fd22 	bl	80035f6 <HAL_CRC_Calculate>
 800abb2:	4603      	mov	r3, r0
 800abb4:	4a3a      	ldr	r2, [pc, #232]	; (800aca0 <Crc_InitCrcValuesForUart+0x2ec>)
 800abb6:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 800abb8:	231a      	movs	r3, #26
 800abba:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_NightTimeLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 800abbc:	1d3b      	adds	r3, r7, #4
 800abbe:	2201      	movs	r2, #1
 800abc0:	4619      	mov	r1, r3
 800abc2:	4820      	ldr	r0, [pc, #128]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800abc4:	f7f8 fd17 	bl	80035f6 <HAL_CRC_Calculate>
 800abc8:	4603      	mov	r3, r0
 800abca:	4a36      	ldr	r2, [pc, #216]	; (800aca4 <Crc_InitCrcValuesForUart+0x2f0>)
 800abcc:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_IGNITION_STEP_ONE;
 800abce:	231b      	movs	r3, #27
 800abd0:	607b      	str	r3, [r7, #4]
	Crc_Ignition_Step_One = HAL_CRC_Calculate(&hcrc, &value, 1);
 800abd2:	1d3b      	adds	r3, r7, #4
 800abd4:	2201      	movs	r2, #1
 800abd6:	4619      	mov	r1, r3
 800abd8:	481a      	ldr	r0, [pc, #104]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800abda:	f7f8 fd0c 	bl	80035f6 <HAL_CRC_Calculate>
 800abde:	4603      	mov	r3, r0
 800abe0:	4a31      	ldr	r2, [pc, #196]	; (800aca8 <Crc_InitCrcValuesForUart+0x2f4>)
 800abe2:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_IGNITION_STEP_TWO;
 800abe4:	231c      	movs	r3, #28
 800abe6:	607b      	str	r3, [r7, #4]
	Crc_Ignition_Step_Two = HAL_CRC_Calculate(&hcrc, &value, 1);
 800abe8:	1d3b      	adds	r3, r7, #4
 800abea:	2201      	movs	r2, #1
 800abec:	4619      	mov	r1, r3
 800abee:	4815      	ldr	r0, [pc, #84]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800abf0:	f7f8 fd01 	bl	80035f6 <HAL_CRC_Calculate>
 800abf4:	4603      	mov	r3, r0
 800abf6:	4a2d      	ldr	r2, [pc, #180]	; (800acac <Crc_InitCrcValuesForUart+0x2f8>)
 800abf8:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_IGNITION_TURN_OFF;
 800abfa:	231d      	movs	r3, #29
 800abfc:	607b      	str	r3, [r7, #4]
	Crc_Ignition_Turn_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800abfe:	1d3b      	adds	r3, r7, #4
 800ac00:	2201      	movs	r2, #1
 800ac02:	4619      	mov	r1, r3
 800ac04:	480f      	ldr	r0, [pc, #60]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800ac06:	f7f8 fcf6 	bl	80035f6 <HAL_CRC_Calculate>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	4a28      	ldr	r2, [pc, #160]	; (800acb0 <Crc_InitCrcValuesForUart+0x2fc>)
 800ac0e:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON;
 800ac10:	2313      	movs	r3, #19
 800ac12:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ac14:	1d3b      	adds	r3, r7, #4
 800ac16:	2201      	movs	r2, #1
 800ac18:	4619      	mov	r1, r3
 800ac1a:	480a      	ldr	r0, [pc, #40]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800ac1c:	f7f8 fceb 	bl	80035f6 <HAL_CRC_Calculate>
 800ac20:	4603      	mov	r3, r0
 800ac22:	4a24      	ldr	r2, [pc, #144]	; (800acb4 <Crc_InitCrcValuesForUart+0x300>)
 800ac24:	6013      	str	r3, [r2, #0]

	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF;
 800ac26:	2314      	movs	r3, #20
 800ac28:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLights_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ac2a:	1d3b      	adds	r3, r7, #4
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	4619      	mov	r1, r3
 800ac30:	4804      	ldr	r0, [pc, #16]	; (800ac44 <Crc_InitCrcValuesForUart+0x290>)
 800ac32:	f7f8 fce0 	bl	80035f6 <HAL_CRC_Calculate>
 800ac36:	4603      	mov	r3, r0
 800ac38:	4a1f      	ldr	r2, [pc, #124]	; (800acb8 <Crc_InitCrcValuesForUart+0x304>)
 800ac3a:	6013      	str	r3, [r2, #0]

}
 800ac3c:	bf00      	nop
 800ac3e:	3708      	adds	r7, #8
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	2000019c 	.word	0x2000019c
 800ac48:	20007a18 	.word	0x20007a18
 800ac4c:	20007a1c 	.word	0x20007a1c
 800ac50:	200079e0 	.word	0x200079e0
 800ac54:	200079e4 	.word	0x200079e4
 800ac58:	200079e8 	.word	0x200079e8
 800ac5c:	200079ec 	.word	0x200079ec
 800ac60:	200079f0 	.word	0x200079f0
 800ac64:	200079f4 	.word	0x200079f4
 800ac68:	200079f8 	.word	0x200079f8
 800ac6c:	200079fc 	.word	0x200079fc
 800ac70:	20007a00 	.word	0x20007a00
 800ac74:	20007a04 	.word	0x20007a04
 800ac78:	20007a08 	.word	0x20007a08
 800ac7c:	20007a0c 	.word	0x20007a0c
 800ac80:	20007a10 	.word	0x20007a10
 800ac84:	20007a14 	.word	0x20007a14
 800ac88:	20007a20 	.word	0x20007a20
 800ac8c:	20007a24 	.word	0x20007a24
 800ac90:	20007a28 	.word	0x20007a28
 800ac94:	20007a2c 	.word	0x20007a2c
 800ac98:	20007a30 	.word	0x20007a30
 800ac9c:	20007a34 	.word	0x20007a34
 800aca0:	20007a38 	.word	0x20007a38
 800aca4:	20007a3c 	.word	0x20007a3c
 800aca8:	20007a40 	.word	0x20007a40
 800acac:	20007a44 	.word	0x20007a44
 800acb0:	20007a48 	.word	0x20007a48
 800acb4:	20007a4c 	.word	0x20007a4c
 800acb8:	20007a50 	.word	0x20007a50

0800acbc <HAL_CRC_ErrorCallback>:

void HAL_CRC_ErrorCallback(CRC_HandleTypeDef *hcrc)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]

	Crc_DeInit();
 800acc4:	f000 f81e 	bl	800ad04 <Crc_DeInit>
	Crc_Init();
 800acc8:	f000 f804 	bl	800acd4 <Crc_Init>

}
 800accc:	bf00      	nop
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <Crc_Init>:

StdReturnType Crc_Init()
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	af00      	add	r7, sp, #0

	hcrc.Instance = CRC;
 800acd8:	4b08      	ldr	r3, [pc, #32]	; (800acfc <Crc_Init+0x28>)
 800acda:	4a09      	ldr	r2, [pc, #36]	; (800ad00 <Crc_Init+0x2c>)
 800acdc:	601a      	str	r2, [r3, #0]

	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800acde:	4807      	ldr	r0, [pc, #28]	; (800acfc <Crc_Init+0x28>)
 800ace0:	f7f8 fc3d 	bl	800355e <HAL_CRC_Init>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d002      	beq.n	800acf0 <Crc_Init+0x1c>
	{

		HAL_CRC_ErrorCallback(&hcrc);
 800acea:	4804      	ldr	r0, [pc, #16]	; (800acfc <Crc_Init+0x28>)
 800acec:	f7ff ffe6 	bl	800acbc <HAL_CRC_ErrorCallback>

		/* do nothing */

	}

	Crc_InitCrcValuesForUart();
 800acf0:	f7ff fe60 	bl	800a9b4 <Crc_InitCrcValuesForUart>

	return E_OK;
 800acf4:	2300      	movs	r3, #0

}
 800acf6:	4618      	mov	r0, r3
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	2000019c 	.word	0x2000019c
 800ad00:	40023000 	.word	0x40023000

0800ad04 <Crc_DeInit>:

StdReturnType Crc_DeInit()
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	af00      	add	r7, sp, #0

	HAL_CRC_DeInit(&hcrc);
 800ad08:	4802      	ldr	r0, [pc, #8]	; (800ad14 <Crc_DeInit+0x10>)
 800ad0a:	f7f8 fc44 	bl	8003596 <HAL_CRC_DeInit>

	return E_OK;
 800ad0e:	2300      	movs	r3, #0

}
 800ad10:	4618      	mov	r0, r3
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	2000019c 	.word	0x2000019c

0800ad18 <Crc_MainFunction>:

void Crc_MainFunction()
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0

	uint32 returnValue = HAL_CRC_GetState(&hcrc);
 800ad1e:	4808      	ldr	r0, [pc, #32]	; (800ad40 <Crc_MainFunction+0x28>)
 800ad20:	f7f8 fc9c 	bl	800365c <HAL_CRC_GetState>
 800ad24:	4603      	mov	r3, r0
 800ad26:	607b      	str	r3, [r7, #4]

	Crc_VerifyUartData();
 800ad28:	f7ff fc6c 	bl	800a604 <Crc_VerifyUartData>

	if(returnValue == HAL_CRC_STATE_ERROR)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2b04      	cmp	r3, #4
 800ad30:	d102      	bne.n	800ad38 <Crc_MainFunction+0x20>
	{

		HAL_CRC_ErrorCallback(&hcrc);
 800ad32:	4803      	ldr	r0, [pc, #12]	; (800ad40 <Crc_MainFunction+0x28>)
 800ad34:	f7ff ffc2 	bl	800acbc <HAL_CRC_ErrorCallback>

	}

}
 800ad38:	bf00      	nop
 800ad3a:	3708      	adds	r7, #8
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	2000019c 	.word	0x2000019c

0800ad44 <EcuM_CheckForWakeupEvent>:
void EcuM_SetWakeupSource(uint32 wakeupSource);
void EcuM_ProcessWakeupEvent();
void EcuM_CheckForWakeupEvent();

void EcuM_CheckForWakeupEvent()
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	af00      	add	r7, sp, #0

	if((PWR->CSR & RCC_CSR_PORRSTF) != 0)
 800ad48:	4b41      	ldr	r3, [pc, #260]	; (800ae50 <EcuM_CheckForWakeupEvent+0x10c>)
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d00f      	beq.n	800ad74 <EcuM_CheckForWakeupEvent+0x30>
	{

		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_POR);
 800ad54:	2000      	movs	r0, #0
 800ad56:	f000 f87f 	bl	800ae58 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_RMVF;
 800ad5a:	4b3e      	ldr	r3, [pc, #248]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800ad5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad5e:	4a3d      	ldr	r2, [pc, #244]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800ad60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad64:	6753      	str	r3, [r2, #116]	; 0x74
		RCC->CSR |= RCC_CSR_PORRSTF;
 800ad66:	4b3b      	ldr	r3, [pc, #236]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800ad68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad6a:	4a3a      	ldr	r2, [pc, #232]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800ad6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ad70:	6753      	str	r3, [r2, #116]	; 0x74

		/* do nothing */

	}

}
 800ad72:	e06a      	b.n	800ae4a <EcuM_CheckForWakeupEvent+0x106>
	else if((PWR->CSR & RCC_CSR_BORRSTF) != 0)
 800ad74:	4b36      	ldr	r3, [pc, #216]	; (800ae50 <EcuM_CheckForWakeupEvent+0x10c>)
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00f      	beq.n	800ada0 <EcuM_CheckForWakeupEvent+0x5c>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_BOR);
 800ad80:	2001      	movs	r0, #1
 800ad82:	f000 f869 	bl	800ae58 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_RMVF;
 800ad86:	4b33      	ldr	r3, [pc, #204]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800ad88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad8a:	4a32      	ldr	r2, [pc, #200]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800ad8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad90:	6753      	str	r3, [r2, #116]	; 0x74
		RCC->CSR |= RCC_CSR_BORRSTF;
 800ad92:	4b30      	ldr	r3, [pc, #192]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800ad94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad96:	4a2f      	ldr	r2, [pc, #188]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800ad98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ad9c:	6753      	str	r3, [r2, #116]	; 0x74
}
 800ad9e:	e054      	b.n	800ae4a <EcuM_CheckForWakeupEvent+0x106>
	else if((RCC->CSR & RCC_CSR_SFTRSTF) != 0)
 800ada0:	4b2c      	ldr	r3, [pc, #176]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800ada2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ada4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00f      	beq.n	800adcc <EcuM_CheckForWakeupEvent+0x88>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 800adac:	2002      	movs	r0, #2
 800adae:	f000 f853 	bl	800ae58 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_RMVF;
 800adb2:	4b28      	ldr	r3, [pc, #160]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800adb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adb6:	4a27      	ldr	r2, [pc, #156]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800adb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800adbc:	6753      	str	r3, [r2, #116]	; 0x74
		RCC->CSR |= RCC_CSR_SFTRSTF;
 800adbe:	4b25      	ldr	r3, [pc, #148]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800adc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adc2:	4a24      	ldr	r2, [pc, #144]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800adc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adc8:	6753      	str	r3, [r2, #116]	; 0x74
}
 800adca:	e03e      	b.n	800ae4a <EcuM_CheckForWakeupEvent+0x106>
	else if((RCC->CSR & RCC_CSR_WWDGRSTF) != 0)
 800adcc:	4b21      	ldr	r3, [pc, #132]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800adce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800add0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00f      	beq.n	800adf8 <EcuM_CheckForWakeupEvent+0xb4>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 800add8:	2003      	movs	r0, #3
 800adda:	f000 f83d 	bl	800ae58 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_RMVF;
 800adde:	4b1d      	ldr	r3, [pc, #116]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800ade0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ade2:	4a1c      	ldr	r2, [pc, #112]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800ade4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ade8:	6753      	str	r3, [r2, #116]	; 0x74
		RCC->CSR |= RCC_CSR_WWDGRSTF;
 800adea:	4b1a      	ldr	r3, [pc, #104]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800adec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adee:	4a19      	ldr	r2, [pc, #100]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800adf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800adf4:	6753      	str	r3, [r2, #116]	; 0x74
}
 800adf6:	e028      	b.n	800ae4a <EcuM_CheckForWakeupEvent+0x106>
	else if((RCC->CSR & RCC_CSR_LPWRRSTF) != 0)
 800adf8:	4b16      	ldr	r3, [pc, #88]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800adfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	da0f      	bge.n	800ae20 <EcuM_CheckForWakeupEvent+0xdc>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 800ae00:	2004      	movs	r0, #4
 800ae02:	f000 f829 	bl	800ae58 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_RMVF;
 800ae06:	4b13      	ldr	r3, [pc, #76]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800ae08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae0a:	4a12      	ldr	r2, [pc, #72]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800ae0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae10:	6753      	str	r3, [r2, #116]	; 0x74
		RCC->CSR |= RCC_CSR_LPWRRSTF;
 800ae12:	4b10      	ldr	r3, [pc, #64]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800ae14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae16:	4a0f      	ldr	r2, [pc, #60]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800ae18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae1c:	6753      	str	r3, [r2, #116]	; 0x74
}
 800ae1e:	e014      	b.n	800ae4a <EcuM_CheckForWakeupEvent+0x106>
	else if((RCC->CSR & RCC_CSR_PADRSTF) != 0)
 800ae20:	4b0c      	ldr	r3, [pc, #48]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800ae22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00e      	beq.n	800ae4a <EcuM_CheckForWakeupEvent+0x106>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_BUTTON_RESET);
 800ae2c:	2005      	movs	r0, #5
 800ae2e:	f000 f813 	bl	800ae58 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_RMVF;
 800ae32:	4b08      	ldr	r3, [pc, #32]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800ae34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae36:	4a07      	ldr	r2, [pc, #28]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800ae38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae3c:	6753      	str	r3, [r2, #116]	; 0x74
		RCC->CSR |= RCC_CSR_PADRSTF;
 800ae3e:	4b05      	ldr	r3, [pc, #20]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800ae40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae42:	4a04      	ldr	r2, [pc, #16]	; (800ae54 <EcuM_CheckForWakeupEvent+0x110>)
 800ae44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ae48:	6753      	str	r3, [r2, #116]	; 0x74
}
 800ae4a:	bf00      	nop
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	40007000 	.word	0x40007000
 800ae54:	40023800 	.word	0x40023800

0800ae58 <EcuM_SetWakeupSource>:

void EcuM_SetWakeupSource(uint32 wakeupSource)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]

	if(wakeupSource != NULL_PTR)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d003      	beq.n	800ae6e <EcuM_SetWakeupSource+0x16>
	{

		EcuM_GlobalState.currentState = wakeupSource;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	b2da      	uxtb	r2, r3
 800ae6a:	4b04      	ldr	r3, [pc, #16]	; (800ae7c <EcuM_SetWakeupSource+0x24>)
 800ae6c:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 800ae6e:	bf00      	nop
 800ae70:	370c      	adds	r7, #12
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop
 800ae7c:	20007a54 	.word	0x20007a54

0800ae80 <EcuM_ProcessWakeupEvent>:

void EcuM_ProcessWakeupEvent()
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0

	uint8 localWakeupEvent = EcuM_GlobalState.currentState;
 800ae86:	4b19      	ldr	r3, [pc, #100]	; (800aeec <EcuM_ProcessWakeupEvent+0x6c>)
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	71fb      	strb	r3, [r7, #7]

	switch(localWakeupEvent)
 800ae8c:	79fb      	ldrb	r3, [r7, #7]
 800ae8e:	2b05      	cmp	r3, #5
 800ae90:	d826      	bhi.n	800aee0 <EcuM_ProcessWakeupEvent+0x60>
 800ae92:	a201      	add	r2, pc, #4	; (adr r2, 800ae98 <EcuM_ProcessWakeupEvent+0x18>)
 800ae94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae98:	0800aeb1 	.word	0x0800aeb1
 800ae9c:	0800aeb9 	.word	0x0800aeb9
 800aea0:	0800aec1 	.word	0x0800aec1
 800aea4:	0800aec9 	.word	0x0800aec9
 800aea8:	0800aed1 	.word	0x0800aed1
 800aeac:	0800aed9 	.word	0x0800aed9
	{

		case ECUM_WAKEUPSOURCE_POR:

			SystemManager_SetFault(ECUM_WAKEUPSOURCE_POR);
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	f000 f851 	bl	800af58 <SystemManager_SetFault>

			break;
 800aeb6:	e014      	b.n	800aee2 <EcuM_ProcessWakeupEvent+0x62>

		case ECUM_WAKEUPSOURCE_BOR:

			SystemManager_SetFault(ECUM_WAKEUPSOURCE_BOR);
 800aeb8:	2001      	movs	r0, #1
 800aeba:	f000 f84d 	bl	800af58 <SystemManager_SetFault>

			break;
 800aebe:	e010      	b.n	800aee2 <EcuM_ProcessWakeupEvent+0x62>

		case ECUM_WAKEUPSOURCE_SOFTWARE_RESET:

			SystemManager_SetFault(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 800aec0:	2002      	movs	r0, #2
 800aec2:	f000 f849 	bl	800af58 <SystemManager_SetFault>

			break;
 800aec6:	e00c      	b.n	800aee2 <EcuM_ProcessWakeupEvent+0x62>

		case ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET:

			SystemManager_SetFault(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 800aec8:	2003      	movs	r0, #3
 800aeca:	f000 f845 	bl	800af58 <SystemManager_SetFault>

			break;
 800aece:	e008      	b.n	800aee2 <EcuM_ProcessWakeupEvent+0x62>

		case ECUM_WAKEUPSOURCE_LOWPOWER_RESET:

			SystemManager_SetFault(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 800aed0:	2004      	movs	r0, #4
 800aed2:	f000 f841 	bl	800af58 <SystemManager_SetFault>

			break;
 800aed6:	e004      	b.n	800aee2 <EcuM_ProcessWakeupEvent+0x62>

		case ECUM_WAKEUPSOURCE_BUTTON_RESET:

			SystemManager_SetFault(ECUM_WAKEUPSOURCE_BUTTON_RESET);
 800aed8:	2005      	movs	r0, #5
 800aeda:	f000 f83d 	bl	800af58 <SystemManager_SetFault>

			break;
 800aede:	e000      	b.n	800aee2 <EcuM_ProcessWakeupEvent+0x62>

		default:

			break;
 800aee0:	bf00      	nop

	}

}
 800aee2:	bf00      	nop
 800aee4:	3708      	adds	r7, #8
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	20007a54 	.word	0x20007a54

0800aef0 <EcuM_DriverInit>:

StdReturnType EcuM_DriverInit()
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	af00      	add	r7, sp, #0
//	Port_Init();
//	Wdg_Init();
//	MX_DMA_Init();
//	Crc_Init();
//	Uart_Init();
	Tim_Init(2);
 800aef4:	2002      	movs	r0, #2
 800aef6:	f7fb fbc3 	bl	8006680 <Tim_Init>
	Tim_Init(3);
 800aefa:	2003      	movs	r0, #3
 800aefc:	f7fb fbc0 	bl	8006680 <Tim_Init>
	Tim_Init(4);
 800af00:	2004      	movs	r0, #4
 800af02:	f7fb fbbd 	bl	8006680 <Tim_Init>
	Tim_Init(5);
 800af06:	2005      	movs	r0, #5
 800af08:	f7fb fbba 	bl	8006680 <Tim_Init>
	Tim_Init(9);
 800af0c:	2009      	movs	r0, #9
 800af0e:	f7fb fbb7 	bl	8006680 <Tim_Init>
	Tim_Init(11);
 800af12:	200b      	movs	r0, #11
 800af14:	f7fb fbb4 	bl	8006680 <Tim_Init>
//	Adc_Init();
//	Spi_Init(1);
//	Spi_Init(2);

	MX_GPIO_Init();
 800af18:	f7f6 ffc6 	bl	8001ea8 <MX_GPIO_Init>
	  MX_DMA_Init();
 800af1c:	f7f6 fd6e 	bl	80019fc <MX_DMA_Init>
	 // MX_TIM2_Init();
	  //MX_TIM3_Init();
	  //MX_TIM5_Init();
	  //MX_TIM4_Init();
	  Adc_Init();
 800af20:	f7fb fa78 	bl	8006414 <Adc_Init>
	  Crc_Init();
 800af24:	f7ff fed6 	bl	800acd4 <Crc_Init>
	  //MX_TIM9_Init();
	  //MX_TIM11_Init();
	  MX_WWDG_Init();
 800af28:	f7f7 fb1e 	bl	8002568 <MX_WWDG_Init>

	return E_OK;
 800af2c:	2300      	movs	r3, #0

}
 800af2e:	4618      	mov	r0, r3
 800af30:	bd80      	pop	{r7, pc}

0800af32 <EcuM_MainFunction>:
	return E_OK;

}

void EcuM_MainFunction()
{
 800af32:	b580      	push	{r7, lr}
 800af34:	af00      	add	r7, sp, #0

	EcuM_CheckForWakeupEvent();
 800af36:	f7ff ff05 	bl	800ad44 <EcuM_CheckForWakeupEvent>
	EcuM_ProcessWakeupEvent();
 800af3a:	f7ff ffa1 	bl	800ae80 <EcuM_ProcessWakeupEvent>

}
 800af3e:	bf00      	nop
 800af40:	bd80      	pop	{r7, pc}

0800af42 <SystemManager_Init>:
void SystemClock_Config(void);
void Error_Handler(void);
void MX_NVIC_Init(void);

void SystemManager_Init()
{
 800af42:	b580      	push	{r7, lr}
 800af44:	af00      	add	r7, sp, #0

	HAL_Init();
 800af46:	f7f7 fbff 	bl	8002748 <HAL_Init>
	SystemClock_Config();
 800af4a:	f000 f8b9 	bl	800b0c0 <SystemClock_Config>
	MX_NVIC_Init();
 800af4e:	f000 f832 	bl	800afb6 <MX_NVIC_Init>

}
 800af52:	bf00      	nop
 800af54:	bd80      	pop	{r7, pc}
	...

0800af58 <SystemManager_SetFault>:

StdReturnType SystemManager_SetFault(uint8 faultType)
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	4603      	mov	r3, r0
 800af60:	71fb      	strb	r3, [r7, #7]

	for(uint8 index = 0; index <= 13; index++)
 800af62:	2300      	movs	r3, #0
 800af64:	73fb      	strb	r3, [r7, #15]
 800af66:	e00d      	b.n	800af84 <SystemManager_SetFault+0x2c>
	{

		if(faultType == index)
 800af68:	79fa      	ldrb	r2, [r7, #7]
 800af6a:	7bfb      	ldrb	r3, [r7, #15]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d106      	bne.n	800af7e <SystemManager_SetFault+0x26>
		{

			SystemManager_Fault.fault[index] = index + 1;
 800af70:	7bfb      	ldrb	r3, [r7, #15]
 800af72:	1c5a      	adds	r2, r3, #1
 800af74:	7bfb      	ldrb	r3, [r7, #15]
 800af76:	4611      	mov	r1, r2
 800af78:	4a07      	ldr	r2, [pc, #28]	; (800af98 <SystemManager_SetFault+0x40>)
 800af7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8 index = 0; index <= 13; index++)
 800af7e:	7bfb      	ldrb	r3, [r7, #15]
 800af80:	3301      	adds	r3, #1
 800af82:	73fb      	strb	r3, [r7, #15]
 800af84:	7bfb      	ldrb	r3, [r7, #15]
 800af86:	2b0d      	cmp	r3, #13
 800af88:	d9ee      	bls.n	800af68 <SystemManager_SetFault+0x10>

		}

	}

	return E_OK;
 800af8a:	2300      	movs	r3, #0

}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3714      	adds	r7, #20
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr
 800af98:	20007a58 	.word	0x20007a58

0800af9c <SystemManager_MainFunction>:

void SystemManager_MainFunction()
{
 800af9c:	b480      	push	{r7}
 800af9e:	af00      	add	r7, sp, #0

}
 800afa0:	bf00      	nop
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr

0800afaa <SystemManager_PerformReset>:

void SystemManager_PerformReset()
{
 800afaa:	b580      	push	{r7, lr}
 800afac:	af00      	add	r7, sp, #0

	HAL_NVIC_SystemReset();
 800afae:	f7f8 fad2 	bl	8003556 <HAL_NVIC_SystemReset>

}
 800afb2:	bf00      	nop
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <MX_NVIC_Init>:

void MX_NVIC_Init(void)
{
 800afb6:	b580      	push	{r7, lr}
 800afb8:	af00      	add	r7, sp, #0

	HAL_NVIC_SetPriority(WWDG_IRQn, 5, 0);
 800afba:	2200      	movs	r2, #0
 800afbc:	2105      	movs	r1, #5
 800afbe:	2000      	movs	r0, #0
 800afc0:	f7f8 fa91 	bl	80034e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(WWDG_IRQn);
 800afc4:	2000      	movs	r0, #0
 800afc6:	f7f8 faaa 	bl	800351e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 800afca:	2200      	movs	r2, #0
 800afcc:	2105      	movs	r1, #5
 800afce:	2001      	movs	r0, #1
 800afd0:	f7f8 fa89 	bl	80034e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(PVD_IRQn);
 800afd4:	2001      	movs	r0, #1
 800afd6:	f7f8 faa2 	bl	800351e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 800afda:	2200      	movs	r2, #0
 800afdc:	2105      	movs	r1, #5
 800afde:	2003      	movs	r0, #3
 800afe0:	f7f8 fa81 	bl	80034e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800afe4:	2003      	movs	r0, #3
 800afe6:	f7f8 fa9a 	bl	800351e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 800afea:	2200      	movs	r2, #0
 800afec:	2105      	movs	r1, #5
 800afee:	2004      	movs	r0, #4
 800aff0:	f7f8 fa79 	bl	80034e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800aff4:	2004      	movs	r0, #4
 800aff6:	f7f8 fa92 	bl	800351e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800affa:	2200      	movs	r2, #0
 800affc:	2105      	movs	r1, #5
 800affe:	2005      	movs	r0, #5
 800b000:	f7f8 fa71 	bl	80034e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RCC_IRQn);
 800b004:	2005      	movs	r0, #5
 800b006:	f7f8 fa8a 	bl	800351e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800b00a:	2200      	movs	r2, #0
 800b00c:	2105      	movs	r1, #5
 800b00e:	2012      	movs	r0, #18
 800b010:	f7f8 fa69 	bl	80034e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 800b014:	2012      	movs	r0, #18
 800b016:	f7f8 fa82 	bl	800351e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800b01a:	2200      	movs	r2, #0
 800b01c:	2105      	movs	r1, #5
 800b01e:	201c      	movs	r0, #28
 800b020:	f7f8 fa61 	bl	80034e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b024:	201c      	movs	r0, #28
 800b026:	f7f8 fa7a 	bl	800351e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800b02a:	2200      	movs	r2, #0
 800b02c:	2105      	movs	r1, #5
 800b02e:	201d      	movs	r0, #29
 800b030:	f7f8 fa59 	bl	80034e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b034:	201d      	movs	r0, #29
 800b036:	f7f8 fa72 	bl	800351e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800b03a:	2200      	movs	r2, #0
 800b03c:	2105      	movs	r1, #5
 800b03e:	201e      	movs	r0, #30
 800b040:	f7f8 fa51 	bl	80034e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800b044:	201e      	movs	r0, #30
 800b046:	f7f8 fa6a 	bl	800351e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800b04a:	2200      	movs	r2, #0
 800b04c:	2105      	movs	r1, #5
 800b04e:	201f      	movs	r0, #31
 800b050:	f7f8 fa49 	bl	80034e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800b054:	201f      	movs	r0, #31
 800b056:	f7f8 fa62 	bl	800351e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800b05a:	2200      	movs	r2, #0
 800b05c:	2105      	movs	r1, #5
 800b05e:	2020      	movs	r0, #32
 800b060:	f7f8 fa41 	bl	80034e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800b064:	2020      	movs	r0, #32
 800b066:	f7f8 fa5a 	bl	800351e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800b06a:	2200      	movs	r2, #0
 800b06c:	2105      	movs	r1, #5
 800b06e:	2023      	movs	r0, #35	; 0x23
 800b070:	f7f8 fa39 	bl	80034e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800b074:	2023      	movs	r0, #35	; 0x23
 800b076:	f7f8 fa52 	bl	800351e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800b07a:	2200      	movs	r2, #0
 800b07c:	2105      	movs	r1, #5
 800b07e:	2024      	movs	r0, #36	; 0x24
 800b080:	f7f8 fa31 	bl	80034e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800b084:	2024      	movs	r0, #36	; 0x24
 800b086:	f7f8 fa4a 	bl	800351e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800b08a:	2200      	movs	r2, #0
 800b08c:	2105      	movs	r1, #5
 800b08e:	2025      	movs	r0, #37	; 0x25
 800b090:	f7f8 fa29 	bl	80034e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b094:	2025      	movs	r0, #37	; 0x25
 800b096:	f7f8 fa42 	bl	800351e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800b09a:	2200      	movs	r2, #0
 800b09c:	2105      	movs	r1, #5
 800b09e:	2032      	movs	r0, #50	; 0x32
 800b0a0:	f7f8 fa21 	bl	80034e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800b0a4:	2032      	movs	r0, #50	; 0x32
 800b0a6:	f7f8 fa3a 	bl	800351e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	2105      	movs	r1, #5
 800b0ae:	2038      	movs	r0, #56	; 0x38
 800b0b0:	f7f8 fa19 	bl	80034e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800b0b4:	2038      	movs	r0, #56	; 0x38
 800b0b6:	f7f8 fa32 	bl	800351e <HAL_NVIC_EnableIRQ>

}
 800b0ba:	bf00      	nop
 800b0bc:	bd80      	pop	{r7, pc}
	...

0800b0c0 <SystemClock_Config>:

void SystemClock_Config(void)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b094      	sub	sp, #80	; 0x50
 800b0c4:	af00      	add	r7, sp, #0

	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b0c6:	f107 0320 	add.w	r3, r7, #32
 800b0ca:	2230      	movs	r2, #48	; 0x30
 800b0cc:	2100      	movs	r1, #0
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f000 f8b8 	bl	800b244 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b0d4:	f107 030c 	add.w	r3, r7, #12
 800b0d8:	2200      	movs	r2, #0
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	605a      	str	r2, [r3, #4]
 800b0de:	609a      	str	r2, [r3, #8]
 800b0e0:	60da      	str	r2, [r3, #12]
 800b0e2:	611a      	str	r2, [r3, #16]
	__HAL_RCC_PWR_CLK_ENABLE();
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	60bb      	str	r3, [r7, #8]
 800b0e8:	4b28      	ldr	r3, [pc, #160]	; (800b18c <SystemClock_Config+0xcc>)
 800b0ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ec:	4a27      	ldr	r2, [pc, #156]	; (800b18c <SystemClock_Config+0xcc>)
 800b0ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0f2:	6413      	str	r3, [r2, #64]	; 0x40
 800b0f4:	4b25      	ldr	r3, [pc, #148]	; (800b18c <SystemClock_Config+0xcc>)
 800b0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0fc:	60bb      	str	r3, [r7, #8]
 800b0fe:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b100:	2300      	movs	r3, #0
 800b102:	607b      	str	r3, [r7, #4]
 800b104:	4b22      	ldr	r3, [pc, #136]	; (800b190 <SystemClock_Config+0xd0>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a21      	ldr	r2, [pc, #132]	; (800b190 <SystemClock_Config+0xd0>)
 800b10a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b10e:	6013      	str	r3, [r2, #0]
 800b110:	4b1f      	ldr	r3, [pc, #124]	; (800b190 <SystemClock_Config+0xd0>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b118:	607b      	str	r3, [r7, #4]
 800b11a:	687b      	ldr	r3, [r7, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800b11c:	2309      	movs	r3, #9
 800b11e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b120:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b124:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800b126:	2301      	movs	r3, #1
 800b128:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b12a:	2302      	movs	r3, #2
 800b12c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b12e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b132:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800b134:	2304      	movs	r3, #4
 800b136:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 800b138:	2364      	movs	r3, #100	; 0x64
 800b13a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b13c:	2302      	movs	r3, #2
 800b13e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800b140:	2304      	movs	r3, #4
 800b142:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b144:	f107 0320 	add.w	r3, r7, #32
 800b148:	4618      	mov	r0, r3
 800b14a:	f7f9 faa7 	bl	800469c <HAL_RCC_OscConfig>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b00      	cmp	r3, #0
 800b152:	d001      	beq.n	800b158 <SystemClock_Config+0x98>
	{

		Error_Handler();
 800b154:	f000 f81e 	bl	800b194 <Error_Handler>
		/* do nothing */

	}


	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 800b158:	230f      	movs	r3, #15
 800b15a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b15c:	2302      	movs	r3, #2
 800b15e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b160:	2300      	movs	r3, #0
 800b162:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800b164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b168:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b16a:	2300      	movs	r3, #0
 800b16c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800b16e:	f107 030c 	add.w	r3, r7, #12
 800b172:	2103      	movs	r1, #3
 800b174:	4618      	mov	r0, r3
 800b176:	f7f9 fd09 	bl	8004b8c <HAL_RCC_ClockConfig>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <SystemClock_Config+0xc4>
	{

		Error_Handler();
 800b180:	f000 f808 	bl	800b194 <Error_Handler>

		/* do nothing */

	}

}
 800b184:	bf00      	nop
 800b186:	3750      	adds	r7, #80	; 0x50
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	40023800 	.word	0x40023800
 800b190:	40007000 	.word	0x40007000

0800b194 <Error_Handler>:

void Error_Handler(void)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800b198:	b672      	cpsid	i
}
 800b19a:	bf00      	nop

	__disable_irq();

	SystemManager_PerformReset();
 800b19c:	f7ff ff05 	bl	800afaa <SystemManager_PerformReset>

	while (1)
 800b1a0:	e7fe      	b.n	800b1a0 <Error_Handler+0xc>

0800b1a2 <HAL_WWDG_EarlyWakeupCallback>:
StdReturnType Wdg_Init();
void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg);
void Wdg_MainFunction();

void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b082      	sub	sp, #8
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]

	SystemManager_SetFault(WATCHDOG_RESET);
 800b1aa:	2003      	movs	r0, #3
 800b1ac:	f7ff fed4 	bl	800af58 <SystemManager_SetFault>

}
 800b1b0:	bf00      	nop
 800b1b2:	3708      	adds	r7, #8
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <Wdg_MainFunction>:
	return E_OK;

}

void Wdg_MainFunction()
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	af00      	add	r7, sp, #0

	HAL_WWDG_Refresh(&hwwdg);
 800b1bc:	4802      	ldr	r0, [pc, #8]	; (800b1c8 <Wdg_MainFunction+0x10>)
 800b1be:	f7fb f899 	bl	80062f4 <HAL_WWDG_Refresh>

}
 800b1c2:	bf00      	nop
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	20000734 	.word	0x20000734

0800b1cc <atoi>:
 800b1cc:	220a      	movs	r2, #10
 800b1ce:	2100      	movs	r1, #0
 800b1d0:	f000 b978 	b.w	800b4c4 <strtol>

0800b1d4 <__errno>:
 800b1d4:	4b01      	ldr	r3, [pc, #4]	; (800b1dc <__errno+0x8>)
 800b1d6:	6818      	ldr	r0, [r3, #0]
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop
 800b1dc:	20000014 	.word	0x20000014

0800b1e0 <__libc_init_array>:
 800b1e0:	b570      	push	{r4, r5, r6, lr}
 800b1e2:	4d0d      	ldr	r5, [pc, #52]	; (800b218 <__libc_init_array+0x38>)
 800b1e4:	4c0d      	ldr	r4, [pc, #52]	; (800b21c <__libc_init_array+0x3c>)
 800b1e6:	1b64      	subs	r4, r4, r5
 800b1e8:	10a4      	asrs	r4, r4, #2
 800b1ea:	2600      	movs	r6, #0
 800b1ec:	42a6      	cmp	r6, r4
 800b1ee:	d109      	bne.n	800b204 <__libc_init_array+0x24>
 800b1f0:	4d0b      	ldr	r5, [pc, #44]	; (800b220 <__libc_init_array+0x40>)
 800b1f2:	4c0c      	ldr	r4, [pc, #48]	; (800b224 <__libc_init_array+0x44>)
 800b1f4:	f000 f97c 	bl	800b4f0 <_init>
 800b1f8:	1b64      	subs	r4, r4, r5
 800b1fa:	10a4      	asrs	r4, r4, #2
 800b1fc:	2600      	movs	r6, #0
 800b1fe:	42a6      	cmp	r6, r4
 800b200:	d105      	bne.n	800b20e <__libc_init_array+0x2e>
 800b202:	bd70      	pop	{r4, r5, r6, pc}
 800b204:	f855 3b04 	ldr.w	r3, [r5], #4
 800b208:	4798      	blx	r3
 800b20a:	3601      	adds	r6, #1
 800b20c:	e7ee      	b.n	800b1ec <__libc_init_array+0xc>
 800b20e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b212:	4798      	blx	r3
 800b214:	3601      	adds	r6, #1
 800b216:	e7f2      	b.n	800b1fe <__libc_init_array+0x1e>
 800b218:	0800b89c 	.word	0x0800b89c
 800b21c:	0800b89c 	.word	0x0800b89c
 800b220:	0800b89c 	.word	0x0800b89c
 800b224:	0800b8a0 	.word	0x0800b8a0

0800b228 <memcpy>:
 800b228:	440a      	add	r2, r1
 800b22a:	4291      	cmp	r1, r2
 800b22c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b230:	d100      	bne.n	800b234 <memcpy+0xc>
 800b232:	4770      	bx	lr
 800b234:	b510      	push	{r4, lr}
 800b236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b23a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b23e:	4291      	cmp	r1, r2
 800b240:	d1f9      	bne.n	800b236 <memcpy+0xe>
 800b242:	bd10      	pop	{r4, pc}

0800b244 <memset>:
 800b244:	4402      	add	r2, r0
 800b246:	4603      	mov	r3, r0
 800b248:	4293      	cmp	r3, r2
 800b24a:	d100      	bne.n	800b24e <memset+0xa>
 800b24c:	4770      	bx	lr
 800b24e:	f803 1b01 	strb.w	r1, [r3], #1
 800b252:	e7f9      	b.n	800b248 <memset+0x4>

0800b254 <_free_r>:
 800b254:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b256:	2900      	cmp	r1, #0
 800b258:	d044      	beq.n	800b2e4 <_free_r+0x90>
 800b25a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b25e:	9001      	str	r0, [sp, #4]
 800b260:	2b00      	cmp	r3, #0
 800b262:	f1a1 0404 	sub.w	r4, r1, #4
 800b266:	bfb8      	it	lt
 800b268:	18e4      	addlt	r4, r4, r3
 800b26a:	f000 f935 	bl	800b4d8 <__malloc_lock>
 800b26e:	4a1e      	ldr	r2, [pc, #120]	; (800b2e8 <_free_r+0x94>)
 800b270:	9801      	ldr	r0, [sp, #4]
 800b272:	6813      	ldr	r3, [r2, #0]
 800b274:	b933      	cbnz	r3, 800b284 <_free_r+0x30>
 800b276:	6063      	str	r3, [r4, #4]
 800b278:	6014      	str	r4, [r2, #0]
 800b27a:	b003      	add	sp, #12
 800b27c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b280:	f000 b930 	b.w	800b4e4 <__malloc_unlock>
 800b284:	42a3      	cmp	r3, r4
 800b286:	d908      	bls.n	800b29a <_free_r+0x46>
 800b288:	6825      	ldr	r5, [r4, #0]
 800b28a:	1961      	adds	r1, r4, r5
 800b28c:	428b      	cmp	r3, r1
 800b28e:	bf01      	itttt	eq
 800b290:	6819      	ldreq	r1, [r3, #0]
 800b292:	685b      	ldreq	r3, [r3, #4]
 800b294:	1949      	addeq	r1, r1, r5
 800b296:	6021      	streq	r1, [r4, #0]
 800b298:	e7ed      	b.n	800b276 <_free_r+0x22>
 800b29a:	461a      	mov	r2, r3
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	b10b      	cbz	r3, 800b2a4 <_free_r+0x50>
 800b2a0:	42a3      	cmp	r3, r4
 800b2a2:	d9fa      	bls.n	800b29a <_free_r+0x46>
 800b2a4:	6811      	ldr	r1, [r2, #0]
 800b2a6:	1855      	adds	r5, r2, r1
 800b2a8:	42a5      	cmp	r5, r4
 800b2aa:	d10b      	bne.n	800b2c4 <_free_r+0x70>
 800b2ac:	6824      	ldr	r4, [r4, #0]
 800b2ae:	4421      	add	r1, r4
 800b2b0:	1854      	adds	r4, r2, r1
 800b2b2:	42a3      	cmp	r3, r4
 800b2b4:	6011      	str	r1, [r2, #0]
 800b2b6:	d1e0      	bne.n	800b27a <_free_r+0x26>
 800b2b8:	681c      	ldr	r4, [r3, #0]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	6053      	str	r3, [r2, #4]
 800b2be:	4421      	add	r1, r4
 800b2c0:	6011      	str	r1, [r2, #0]
 800b2c2:	e7da      	b.n	800b27a <_free_r+0x26>
 800b2c4:	d902      	bls.n	800b2cc <_free_r+0x78>
 800b2c6:	230c      	movs	r3, #12
 800b2c8:	6003      	str	r3, [r0, #0]
 800b2ca:	e7d6      	b.n	800b27a <_free_r+0x26>
 800b2cc:	6825      	ldr	r5, [r4, #0]
 800b2ce:	1961      	adds	r1, r4, r5
 800b2d0:	428b      	cmp	r3, r1
 800b2d2:	bf04      	itt	eq
 800b2d4:	6819      	ldreq	r1, [r3, #0]
 800b2d6:	685b      	ldreq	r3, [r3, #4]
 800b2d8:	6063      	str	r3, [r4, #4]
 800b2da:	bf04      	itt	eq
 800b2dc:	1949      	addeq	r1, r1, r5
 800b2de:	6021      	streq	r1, [r4, #0]
 800b2e0:	6054      	str	r4, [r2, #4]
 800b2e2:	e7ca      	b.n	800b27a <_free_r+0x26>
 800b2e4:	b003      	add	sp, #12
 800b2e6:	bd30      	pop	{r4, r5, pc}
 800b2e8:	20007ae0 	.word	0x20007ae0

0800b2ec <cleanup_glue>:
 800b2ec:	b538      	push	{r3, r4, r5, lr}
 800b2ee:	460c      	mov	r4, r1
 800b2f0:	6809      	ldr	r1, [r1, #0]
 800b2f2:	4605      	mov	r5, r0
 800b2f4:	b109      	cbz	r1, 800b2fa <cleanup_glue+0xe>
 800b2f6:	f7ff fff9 	bl	800b2ec <cleanup_glue>
 800b2fa:	4621      	mov	r1, r4
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b302:	f7ff bfa7 	b.w	800b254 <_free_r>
	...

0800b308 <_reclaim_reent>:
 800b308:	4b2c      	ldr	r3, [pc, #176]	; (800b3bc <_reclaim_reent+0xb4>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4283      	cmp	r3, r0
 800b30e:	b570      	push	{r4, r5, r6, lr}
 800b310:	4604      	mov	r4, r0
 800b312:	d051      	beq.n	800b3b8 <_reclaim_reent+0xb0>
 800b314:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b316:	b143      	cbz	r3, 800b32a <_reclaim_reent+0x22>
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d14a      	bne.n	800b3b4 <_reclaim_reent+0xac>
 800b31e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b320:	6819      	ldr	r1, [r3, #0]
 800b322:	b111      	cbz	r1, 800b32a <_reclaim_reent+0x22>
 800b324:	4620      	mov	r0, r4
 800b326:	f7ff ff95 	bl	800b254 <_free_r>
 800b32a:	6961      	ldr	r1, [r4, #20]
 800b32c:	b111      	cbz	r1, 800b334 <_reclaim_reent+0x2c>
 800b32e:	4620      	mov	r0, r4
 800b330:	f7ff ff90 	bl	800b254 <_free_r>
 800b334:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b336:	b111      	cbz	r1, 800b33e <_reclaim_reent+0x36>
 800b338:	4620      	mov	r0, r4
 800b33a:	f7ff ff8b 	bl	800b254 <_free_r>
 800b33e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b340:	b111      	cbz	r1, 800b348 <_reclaim_reent+0x40>
 800b342:	4620      	mov	r0, r4
 800b344:	f7ff ff86 	bl	800b254 <_free_r>
 800b348:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b34a:	b111      	cbz	r1, 800b352 <_reclaim_reent+0x4a>
 800b34c:	4620      	mov	r0, r4
 800b34e:	f7ff ff81 	bl	800b254 <_free_r>
 800b352:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b354:	b111      	cbz	r1, 800b35c <_reclaim_reent+0x54>
 800b356:	4620      	mov	r0, r4
 800b358:	f7ff ff7c 	bl	800b254 <_free_r>
 800b35c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b35e:	b111      	cbz	r1, 800b366 <_reclaim_reent+0x5e>
 800b360:	4620      	mov	r0, r4
 800b362:	f7ff ff77 	bl	800b254 <_free_r>
 800b366:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b368:	b111      	cbz	r1, 800b370 <_reclaim_reent+0x68>
 800b36a:	4620      	mov	r0, r4
 800b36c:	f7ff ff72 	bl	800b254 <_free_r>
 800b370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b372:	b111      	cbz	r1, 800b37a <_reclaim_reent+0x72>
 800b374:	4620      	mov	r0, r4
 800b376:	f7ff ff6d 	bl	800b254 <_free_r>
 800b37a:	69a3      	ldr	r3, [r4, #24]
 800b37c:	b1e3      	cbz	r3, 800b3b8 <_reclaim_reent+0xb0>
 800b37e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b380:	4620      	mov	r0, r4
 800b382:	4798      	blx	r3
 800b384:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b386:	b1b9      	cbz	r1, 800b3b8 <_reclaim_reent+0xb0>
 800b388:	4620      	mov	r0, r4
 800b38a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b38e:	f7ff bfad 	b.w	800b2ec <cleanup_glue>
 800b392:	5949      	ldr	r1, [r1, r5]
 800b394:	b941      	cbnz	r1, 800b3a8 <_reclaim_reent+0xa0>
 800b396:	3504      	adds	r5, #4
 800b398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b39a:	2d80      	cmp	r5, #128	; 0x80
 800b39c:	68d9      	ldr	r1, [r3, #12]
 800b39e:	d1f8      	bne.n	800b392 <_reclaim_reent+0x8a>
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f7ff ff57 	bl	800b254 <_free_r>
 800b3a6:	e7ba      	b.n	800b31e <_reclaim_reent+0x16>
 800b3a8:	680e      	ldr	r6, [r1, #0]
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	f7ff ff52 	bl	800b254 <_free_r>
 800b3b0:	4631      	mov	r1, r6
 800b3b2:	e7ef      	b.n	800b394 <_reclaim_reent+0x8c>
 800b3b4:	2500      	movs	r5, #0
 800b3b6:	e7ef      	b.n	800b398 <_reclaim_reent+0x90>
 800b3b8:	bd70      	pop	{r4, r5, r6, pc}
 800b3ba:	bf00      	nop
 800b3bc:	20000014 	.word	0x20000014

0800b3c0 <_strtol_l.constprop.0>:
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3c6:	d001      	beq.n	800b3cc <_strtol_l.constprop.0+0xc>
 800b3c8:	2b24      	cmp	r3, #36	; 0x24
 800b3ca:	d906      	bls.n	800b3da <_strtol_l.constprop.0+0x1a>
 800b3cc:	f7ff ff02 	bl	800b1d4 <__errno>
 800b3d0:	2316      	movs	r3, #22
 800b3d2:	6003      	str	r3, [r0, #0]
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b4c0 <_strtol_l.constprop.0+0x100>
 800b3de:	460d      	mov	r5, r1
 800b3e0:	462e      	mov	r6, r5
 800b3e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3e6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b3ea:	f017 0708 	ands.w	r7, r7, #8
 800b3ee:	d1f7      	bne.n	800b3e0 <_strtol_l.constprop.0+0x20>
 800b3f0:	2c2d      	cmp	r4, #45	; 0x2d
 800b3f2:	d132      	bne.n	800b45a <_strtol_l.constprop.0+0x9a>
 800b3f4:	782c      	ldrb	r4, [r5, #0]
 800b3f6:	2701      	movs	r7, #1
 800b3f8:	1cb5      	adds	r5, r6, #2
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d05b      	beq.n	800b4b6 <_strtol_l.constprop.0+0xf6>
 800b3fe:	2b10      	cmp	r3, #16
 800b400:	d109      	bne.n	800b416 <_strtol_l.constprop.0+0x56>
 800b402:	2c30      	cmp	r4, #48	; 0x30
 800b404:	d107      	bne.n	800b416 <_strtol_l.constprop.0+0x56>
 800b406:	782c      	ldrb	r4, [r5, #0]
 800b408:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b40c:	2c58      	cmp	r4, #88	; 0x58
 800b40e:	d14d      	bne.n	800b4ac <_strtol_l.constprop.0+0xec>
 800b410:	786c      	ldrb	r4, [r5, #1]
 800b412:	2310      	movs	r3, #16
 800b414:	3502      	adds	r5, #2
 800b416:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b41a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b41e:	f04f 0c00 	mov.w	ip, #0
 800b422:	fbb8 f9f3 	udiv	r9, r8, r3
 800b426:	4666      	mov	r6, ip
 800b428:	fb03 8a19 	mls	sl, r3, r9, r8
 800b42c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b430:	f1be 0f09 	cmp.w	lr, #9
 800b434:	d816      	bhi.n	800b464 <_strtol_l.constprop.0+0xa4>
 800b436:	4674      	mov	r4, lr
 800b438:	42a3      	cmp	r3, r4
 800b43a:	dd24      	ble.n	800b486 <_strtol_l.constprop.0+0xc6>
 800b43c:	f1bc 0f00 	cmp.w	ip, #0
 800b440:	db1e      	blt.n	800b480 <_strtol_l.constprop.0+0xc0>
 800b442:	45b1      	cmp	r9, r6
 800b444:	d31c      	bcc.n	800b480 <_strtol_l.constprop.0+0xc0>
 800b446:	d101      	bne.n	800b44c <_strtol_l.constprop.0+0x8c>
 800b448:	45a2      	cmp	sl, r4
 800b44a:	db19      	blt.n	800b480 <_strtol_l.constprop.0+0xc0>
 800b44c:	fb06 4603 	mla	r6, r6, r3, r4
 800b450:	f04f 0c01 	mov.w	ip, #1
 800b454:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b458:	e7e8      	b.n	800b42c <_strtol_l.constprop.0+0x6c>
 800b45a:	2c2b      	cmp	r4, #43	; 0x2b
 800b45c:	bf04      	itt	eq
 800b45e:	782c      	ldrbeq	r4, [r5, #0]
 800b460:	1cb5      	addeq	r5, r6, #2
 800b462:	e7ca      	b.n	800b3fa <_strtol_l.constprop.0+0x3a>
 800b464:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b468:	f1be 0f19 	cmp.w	lr, #25
 800b46c:	d801      	bhi.n	800b472 <_strtol_l.constprop.0+0xb2>
 800b46e:	3c37      	subs	r4, #55	; 0x37
 800b470:	e7e2      	b.n	800b438 <_strtol_l.constprop.0+0x78>
 800b472:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b476:	f1be 0f19 	cmp.w	lr, #25
 800b47a:	d804      	bhi.n	800b486 <_strtol_l.constprop.0+0xc6>
 800b47c:	3c57      	subs	r4, #87	; 0x57
 800b47e:	e7db      	b.n	800b438 <_strtol_l.constprop.0+0x78>
 800b480:	f04f 3cff 	mov.w	ip, #4294967295
 800b484:	e7e6      	b.n	800b454 <_strtol_l.constprop.0+0x94>
 800b486:	f1bc 0f00 	cmp.w	ip, #0
 800b48a:	da05      	bge.n	800b498 <_strtol_l.constprop.0+0xd8>
 800b48c:	2322      	movs	r3, #34	; 0x22
 800b48e:	6003      	str	r3, [r0, #0]
 800b490:	4646      	mov	r6, r8
 800b492:	b942      	cbnz	r2, 800b4a6 <_strtol_l.constprop.0+0xe6>
 800b494:	4630      	mov	r0, r6
 800b496:	e79e      	b.n	800b3d6 <_strtol_l.constprop.0+0x16>
 800b498:	b107      	cbz	r7, 800b49c <_strtol_l.constprop.0+0xdc>
 800b49a:	4276      	negs	r6, r6
 800b49c:	2a00      	cmp	r2, #0
 800b49e:	d0f9      	beq.n	800b494 <_strtol_l.constprop.0+0xd4>
 800b4a0:	f1bc 0f00 	cmp.w	ip, #0
 800b4a4:	d000      	beq.n	800b4a8 <_strtol_l.constprop.0+0xe8>
 800b4a6:	1e69      	subs	r1, r5, #1
 800b4a8:	6011      	str	r1, [r2, #0]
 800b4aa:	e7f3      	b.n	800b494 <_strtol_l.constprop.0+0xd4>
 800b4ac:	2430      	movs	r4, #48	; 0x30
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d1b1      	bne.n	800b416 <_strtol_l.constprop.0+0x56>
 800b4b2:	2308      	movs	r3, #8
 800b4b4:	e7af      	b.n	800b416 <_strtol_l.constprop.0+0x56>
 800b4b6:	2c30      	cmp	r4, #48	; 0x30
 800b4b8:	d0a5      	beq.n	800b406 <_strtol_l.constprop.0+0x46>
 800b4ba:	230a      	movs	r3, #10
 800b4bc:	e7ab      	b.n	800b416 <_strtol_l.constprop.0+0x56>
 800b4be:	bf00      	nop
 800b4c0:	0800b791 	.word	0x0800b791

0800b4c4 <strtol>:
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	460a      	mov	r2, r1
 800b4c8:	4601      	mov	r1, r0
 800b4ca:	4802      	ldr	r0, [pc, #8]	; (800b4d4 <strtol+0x10>)
 800b4cc:	6800      	ldr	r0, [r0, #0]
 800b4ce:	f7ff bf77 	b.w	800b3c0 <_strtol_l.constprop.0>
 800b4d2:	bf00      	nop
 800b4d4:	20000014 	.word	0x20000014

0800b4d8 <__malloc_lock>:
 800b4d8:	4801      	ldr	r0, [pc, #4]	; (800b4e0 <__malloc_lock+0x8>)
 800b4da:	f7f7 b90c 	b.w	80026f6 <__retarget_lock_acquire_recursive>
 800b4de:	bf00      	nop
 800b4e0:	20000750 	.word	0x20000750

0800b4e4 <__malloc_unlock>:
 800b4e4:	4801      	ldr	r0, [pc, #4]	; (800b4ec <__malloc_unlock+0x8>)
 800b4e6:	f7f7 b91a 	b.w	800271e <__retarget_lock_release_recursive>
 800b4ea:	bf00      	nop
 800b4ec:	20000750 	.word	0x20000750

0800b4f0 <_init>:
 800b4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f2:	bf00      	nop
 800b4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4f6:	bc08      	pop	{r3}
 800b4f8:	469e      	mov	lr, r3
 800b4fa:	4770      	bx	lr

0800b4fc <_fini>:
 800b4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fe:	bf00      	nop
 800b500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b502:	bc08      	pop	{r3}
 800b504:	469e      	mov	lr, r3
 800b506:	4770      	bx	lr
