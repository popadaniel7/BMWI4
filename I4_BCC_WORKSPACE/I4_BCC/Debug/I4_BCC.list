
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f47c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800f61c  0800f61c  0001f61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb58  0800fb58  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb58  0800fb58  0001fb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb60  0800fb60  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb60  0800fb60  0001fb60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb64  0800fb64  0001fb64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800fb68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f84  20000090  0800fbf8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006014  0800fbf8  00026014  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002be4d  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006d86  00000000  00000000  0004bf0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002458  00000000  00000000  00052c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002120  00000000  00000000  000550f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226a1  00000000  00000000  00057210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003bfcf  00000000  00000000  000798b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af81e  00000000  00000000  000b5880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016509e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009648  00000000  00000000  001650f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f604 	.word	0x0800f604

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800f604 	.word	0x0800f604

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2uiz>:
 800098c:	004a      	lsls	r2, r1, #1
 800098e:	d211      	bcs.n	80009b4 <__aeabi_d2uiz+0x28>
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000994:	d211      	bcs.n	80009ba <__aeabi_d2uiz+0x2e>
 8000996:	d50d      	bpl.n	80009b4 <__aeabi_d2uiz+0x28>
 8000998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d40e      	bmi.n	80009c0 <__aeabi_d2uiz+0x34>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	fa23 f002 	lsr.w	r0, r3, r2
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009be:	d102      	bne.n	80009c6 <__aeabi_d2uiz+0x3a>
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	4770      	bx	lr
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	4770      	bx	lr

080009cc <__aeabi_uldivmod>:
 80009cc:	b953      	cbnz	r3, 80009e4 <__aeabi_uldivmod+0x18>
 80009ce:	b94a      	cbnz	r2, 80009e4 <__aeabi_uldivmod+0x18>
 80009d0:	2900      	cmp	r1, #0
 80009d2:	bf08      	it	eq
 80009d4:	2800      	cmpeq	r0, #0
 80009d6:	bf1c      	itt	ne
 80009d8:	f04f 31ff 	movne.w	r1, #4294967295
 80009dc:	f04f 30ff 	movne.w	r0, #4294967295
 80009e0:	f000 b974 	b.w	8000ccc <__aeabi_idiv0>
 80009e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009ec:	f000 f806 	bl	80009fc <__udivmoddi4>
 80009f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f8:	b004      	add	sp, #16
 80009fa:	4770      	bx	lr

080009fc <__udivmoddi4>:
 80009fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a00:	9d08      	ldr	r5, [sp, #32]
 8000a02:	4604      	mov	r4, r0
 8000a04:	468e      	mov	lr, r1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d14d      	bne.n	8000aa6 <__udivmoddi4+0xaa>
 8000a0a:	428a      	cmp	r2, r1
 8000a0c:	4694      	mov	ip, r2
 8000a0e:	d969      	bls.n	8000ae4 <__udivmoddi4+0xe8>
 8000a10:	fab2 f282 	clz	r2, r2
 8000a14:	b152      	cbz	r2, 8000a2c <__udivmoddi4+0x30>
 8000a16:	fa01 f302 	lsl.w	r3, r1, r2
 8000a1a:	f1c2 0120 	rsb	r1, r2, #32
 8000a1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a26:	ea41 0e03 	orr.w	lr, r1, r3
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a30:	0c21      	lsrs	r1, r4, #16
 8000a32:	fbbe f6f8 	udiv	r6, lr, r8
 8000a36:	fa1f f78c 	uxth.w	r7, ip
 8000a3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a42:	fb06 f107 	mul.w	r1, r6, r7
 8000a46:	4299      	cmp	r1, r3
 8000a48:	d90a      	bls.n	8000a60 <__udivmoddi4+0x64>
 8000a4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a52:	f080 811f 	bcs.w	8000c94 <__udivmoddi4+0x298>
 8000a56:	4299      	cmp	r1, r3
 8000a58:	f240 811c 	bls.w	8000c94 <__udivmoddi4+0x298>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	1a5b      	subs	r3, r3, r1
 8000a62:	b2a4      	uxth	r4, r4
 8000a64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a68:	fb08 3310 	mls	r3, r8, r0, r3
 8000a6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a70:	fb00 f707 	mul.w	r7, r0, r7
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	d90a      	bls.n	8000a8e <__udivmoddi4+0x92>
 8000a78:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a80:	f080 810a 	bcs.w	8000c98 <__udivmoddi4+0x29c>
 8000a84:	42a7      	cmp	r7, r4
 8000a86:	f240 8107 	bls.w	8000c98 <__udivmoddi4+0x29c>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a92:	1be4      	subs	r4, r4, r7
 8000a94:	2600      	movs	r6, #0
 8000a96:	b11d      	cbz	r5, 8000aa0 <__udivmoddi4+0xa4>
 8000a98:	40d4      	lsrs	r4, r2
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	d909      	bls.n	8000abe <__udivmoddi4+0xc2>
 8000aaa:	2d00      	cmp	r5, #0
 8000aac:	f000 80ef 	beq.w	8000c8e <__udivmoddi4+0x292>
 8000ab0:	2600      	movs	r6, #0
 8000ab2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ab6:	4630      	mov	r0, r6
 8000ab8:	4631      	mov	r1, r6
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	fab3 f683 	clz	r6, r3
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d14a      	bne.n	8000b5c <__udivmoddi4+0x160>
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d302      	bcc.n	8000ad0 <__udivmoddi4+0xd4>
 8000aca:	4282      	cmp	r2, r0
 8000acc:	f200 80f9 	bhi.w	8000cc2 <__udivmoddi4+0x2c6>
 8000ad0:	1a84      	subs	r4, r0, r2
 8000ad2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	469e      	mov	lr, r3
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d0e0      	beq.n	8000aa0 <__udivmoddi4+0xa4>
 8000ade:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ae2:	e7dd      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000ae4:	b902      	cbnz	r2, 8000ae8 <__udivmoddi4+0xec>
 8000ae6:	deff      	udf	#255	; 0xff
 8000ae8:	fab2 f282 	clz	r2, r2
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	f040 8092 	bne.w	8000c16 <__udivmoddi4+0x21a>
 8000af2:	eba1 010c 	sub.w	r1, r1, ip
 8000af6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afa:	fa1f fe8c 	uxth.w	lr, ip
 8000afe:	2601      	movs	r6, #1
 8000b00:	0c20      	lsrs	r0, r4, #16
 8000b02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b06:	fb07 1113 	mls	r1, r7, r3, r1
 8000b0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b0e:	fb0e f003 	mul.w	r0, lr, r3
 8000b12:	4288      	cmp	r0, r1
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x12c>
 8000b16:	eb1c 0101 	adds.w	r1, ip, r1
 8000b1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x12a>
 8000b20:	4288      	cmp	r0, r1
 8000b22:	f200 80cb 	bhi.w	8000cbc <__udivmoddi4+0x2c0>
 8000b26:	4643      	mov	r3, r8
 8000b28:	1a09      	subs	r1, r1, r0
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b30:	fb07 1110 	mls	r1, r7, r0, r1
 8000b34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b38:	fb0e fe00 	mul.w	lr, lr, r0
 8000b3c:	45a6      	cmp	lr, r4
 8000b3e:	d908      	bls.n	8000b52 <__udivmoddi4+0x156>
 8000b40:	eb1c 0404 	adds.w	r4, ip, r4
 8000b44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b48:	d202      	bcs.n	8000b50 <__udivmoddi4+0x154>
 8000b4a:	45a6      	cmp	lr, r4
 8000b4c:	f200 80bb 	bhi.w	8000cc6 <__udivmoddi4+0x2ca>
 8000b50:	4608      	mov	r0, r1
 8000b52:	eba4 040e 	sub.w	r4, r4, lr
 8000b56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b5a:	e79c      	b.n	8000a96 <__udivmoddi4+0x9a>
 8000b5c:	f1c6 0720 	rsb	r7, r6, #32
 8000b60:	40b3      	lsls	r3, r6
 8000b62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b72:	431c      	orrs	r4, r3
 8000b74:	40f9      	lsrs	r1, r7
 8000b76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b82:	0c20      	lsrs	r0, r4, #16
 8000b84:	fa1f fe8c 	uxth.w	lr, ip
 8000b88:	fb09 1118 	mls	r1, r9, r8, r1
 8000b8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b90:	fb08 f00e 	mul.w	r0, r8, lr
 8000b94:	4288      	cmp	r0, r1
 8000b96:	fa02 f206 	lsl.w	r2, r2, r6
 8000b9a:	d90b      	bls.n	8000bb4 <__udivmoddi4+0x1b8>
 8000b9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ba4:	f080 8088 	bcs.w	8000cb8 <__udivmoddi4+0x2bc>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f240 8085 	bls.w	8000cb8 <__udivmoddi4+0x2bc>
 8000bae:	f1a8 0802 	sub.w	r8, r8, #2
 8000bb2:	4461      	add	r1, ip
 8000bb4:	1a09      	subs	r1, r1, r0
 8000bb6:	b2a4      	uxth	r4, r4
 8000bb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000bc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc8:	458e      	cmp	lr, r1
 8000bca:	d908      	bls.n	8000bde <__udivmoddi4+0x1e2>
 8000bcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bd4:	d26c      	bcs.n	8000cb0 <__udivmoddi4+0x2b4>
 8000bd6:	458e      	cmp	lr, r1
 8000bd8:	d96a      	bls.n	8000cb0 <__udivmoddi4+0x2b4>
 8000bda:	3802      	subs	r0, #2
 8000bdc:	4461      	add	r1, ip
 8000bde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000be2:	fba0 9402 	umull	r9, r4, r0, r2
 8000be6:	eba1 010e 	sub.w	r1, r1, lr
 8000bea:	42a1      	cmp	r1, r4
 8000bec:	46c8      	mov	r8, r9
 8000bee:	46a6      	mov	lr, r4
 8000bf0:	d356      	bcc.n	8000ca0 <__udivmoddi4+0x2a4>
 8000bf2:	d053      	beq.n	8000c9c <__udivmoddi4+0x2a0>
 8000bf4:	b15d      	cbz	r5, 8000c0e <__udivmoddi4+0x212>
 8000bf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000bfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000c02:	fa22 f306 	lsr.w	r3, r2, r6
 8000c06:	40f1      	lsrs	r1, r6
 8000c08:	431f      	orrs	r7, r3
 8000c0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c0e:	2600      	movs	r6, #0
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	f1c2 0320 	rsb	r3, r2, #32
 8000c1a:	40d8      	lsrs	r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	fa21 f303 	lsr.w	r3, r1, r3
 8000c24:	4091      	lsls	r1, r2
 8000c26:	4301      	orrs	r1, r0
 8000c28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2c:	fa1f fe8c 	uxth.w	lr, ip
 8000c30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c34:	fb07 3610 	mls	r6, r7, r0, r3
 8000c38:	0c0b      	lsrs	r3, r1, #16
 8000c3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c42:	429e      	cmp	r6, r3
 8000c44:	fa04 f402 	lsl.w	r4, r4, r2
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x260>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c52:	d22f      	bcs.n	8000cb4 <__udivmoddi4+0x2b8>
 8000c54:	429e      	cmp	r6, r3
 8000c56:	d92d      	bls.n	8000cb4 <__udivmoddi4+0x2b8>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1b9b      	subs	r3, r3, r6
 8000c5e:	b289      	uxth	r1, r1
 8000c60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c64:	fb07 3316 	mls	r3, r7, r6, r3
 8000c68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c70:	428b      	cmp	r3, r1
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x28a>
 8000c74:	eb1c 0101 	adds.w	r1, ip, r1
 8000c78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c7c:	d216      	bcs.n	8000cac <__udivmoddi4+0x2b0>
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d914      	bls.n	8000cac <__udivmoddi4+0x2b0>
 8000c82:	3e02      	subs	r6, #2
 8000c84:	4461      	add	r1, ip
 8000c86:	1ac9      	subs	r1, r1, r3
 8000c88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c8c:	e738      	b.n	8000b00 <__udivmoddi4+0x104>
 8000c8e:	462e      	mov	r6, r5
 8000c90:	4628      	mov	r0, r5
 8000c92:	e705      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000c94:	4606      	mov	r6, r0
 8000c96:	e6e3      	b.n	8000a60 <__udivmoddi4+0x64>
 8000c98:	4618      	mov	r0, r3
 8000c9a:	e6f8      	b.n	8000a8e <__udivmoddi4+0x92>
 8000c9c:	454b      	cmp	r3, r9
 8000c9e:	d2a9      	bcs.n	8000bf4 <__udivmoddi4+0x1f8>
 8000ca0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ca4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ca8:	3801      	subs	r0, #1
 8000caa:	e7a3      	b.n	8000bf4 <__udivmoddi4+0x1f8>
 8000cac:	4646      	mov	r6, r8
 8000cae:	e7ea      	b.n	8000c86 <__udivmoddi4+0x28a>
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	e794      	b.n	8000bde <__udivmoddi4+0x1e2>
 8000cb4:	4640      	mov	r0, r8
 8000cb6:	e7d1      	b.n	8000c5c <__udivmoddi4+0x260>
 8000cb8:	46d0      	mov	r8, sl
 8000cba:	e77b      	b.n	8000bb4 <__udivmoddi4+0x1b8>
 8000cbc:	3b02      	subs	r3, #2
 8000cbe:	4461      	add	r1, ip
 8000cc0:	e732      	b.n	8000b28 <__udivmoddi4+0x12c>
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	e709      	b.n	8000ada <__udivmoddi4+0xde>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	e742      	b.n	8000b52 <__udivmoddi4+0x156>

08000ccc <__aeabi_idiv0>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <main>:
/***********************************************************************************
* Function: main														   		   *
* Description: Defined in the linker file as the start of the application.         *
************************************************************************************/
int main()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	/* Calls for system initialization. */
	SystemManager_Init();
 8000cd4:	f00e f9d6 	bl	800f084 <SystemManager_Init>
	/* Initialize the kernel of FreeRTOS. */
	osKernelInitialize();
 8000cd8:	f009 fa30 	bl	800a13c <osKernelInitialize>
	/* Initialize the FreeRTOS with all its objects.*/
	MX_FREERTOS_Init();
 8000cdc:	f001 fee4 	bl	8002aa8 <MX_FREERTOS_Init>
	/* Start the kernel and the scheduler and FreeRTOS takes
	 * control of the application execution. */
	osKernelStart();
 8000ce0:	f009 fa50 	bl	800a184 <osKernelStart>
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <Btc_RequestState>:
/***********************************************************************************
* Function: Btc_RequestState													   *
* Description: Process bluetooth command for request state 					       *
************************************************************************************/
VOID Btc_RequestState()
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	if(Btc_ReceivedDataOnBluetooth == 99)
 8000cf0:	4b66      	ldr	r3, [pc, #408]	; (8000e8c <Btc_RequestState+0x1a0>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b63      	cmp	r3, #99	; 0x63
 8000cf6:	d101      	bne.n	8000cfc <Btc_RequestState+0x10>
	{
		SystemManager_PerformReset();
 8000cf8:	f00e f9fa 	bl	800f0f0 <SystemManager_PerformReset>
	}
	else
	{
		/* do nothing */
	}
	if(Btc_ReceivedDataOnBluetooth == 90)
 8000cfc:	4b63      	ldr	r3, [pc, #396]	; (8000e8c <Btc_RequestState+0x1a0>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b5a      	cmp	r3, #90	; 0x5a
 8000d02:	f040 80c0 	bne.w	8000e86 <Btc_RequestState+0x19a>
	{
		Btc_DtcMessageLength = strlen(Btc_DtcMessage);
 8000d06:	4b62      	ldr	r3, [pc, #392]	; (8000e90 <Btc_RequestState+0x1a4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fa68 	bl	80001e0 <strlen>
 8000d10:	4603      	mov	r3, r0
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	4b5f      	ldr	r3, [pc, #380]	; (8000e94 <Btc_RequestState+0x1a8>)
 8000d16:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcMessage, Btc_DtcMessageLength);
 8000d18:	4b5d      	ldr	r3, [pc, #372]	; (8000e90 <Btc_RequestState+0x1a4>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a5d      	ldr	r2, [pc, #372]	; (8000e94 <Btc_RequestState+0x1a8>)
 8000d1e:	8812      	ldrh	r2, [r2, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	485d      	ldr	r0, [pc, #372]	; (8000e98 <Btc_RequestState+0x1ac>)
 8000d24:	f007 fb28 	bl	8008378 <HAL_UART_Transmit_IT>
		Btc_DtcDescriptionLength1 = strlen(Btc_DtcLightSensor);
 8000d28:	4b5c      	ldr	r3, [pc, #368]	; (8000e9c <Btc_RequestState+0x1b0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fa57 	bl	80001e0 <strlen>
 8000d32:	4603      	mov	r3, r0
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	4b5a      	ldr	r3, [pc, #360]	; (8000ea0 <Btc_RequestState+0x1b4>)
 8000d38:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength2 = strlen(Btc_DtcVibrationSensor);
 8000d3a:	4b5a      	ldr	r3, [pc, #360]	; (8000ea4 <Btc_RequestState+0x1b8>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fa4e 	bl	80001e0 <strlen>
 8000d44:	4603      	mov	r3, r0
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	4b57      	ldr	r3, [pc, #348]	; (8000ea8 <Btc_RequestState+0x1bc>)
 8000d4a:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength3 = strlen(Btc_DtcRearParkingSensor);
 8000d4c:	4b57      	ldr	r3, [pc, #348]	; (8000eac <Btc_RequestState+0x1c0>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fa45 	bl	80001e0 <strlen>
 8000d56:	4603      	mov	r3, r0
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	4b55      	ldr	r3, [pc, #340]	; (8000eb0 <Btc_RequestState+0x1c4>)
 8000d5c:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength4 = strlen(Btc_DtcFrontParkingSensor);
 8000d5e:	4b55      	ldr	r3, [pc, #340]	; (8000eb4 <Btc_RequestState+0x1c8>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fa3c 	bl	80001e0 <strlen>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	4b52      	ldr	r3, [pc, #328]	; (8000eb8 <Btc_RequestState+0x1cc>)
 8000d6e:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength5 = strlen(Btc_DtcHardware);
 8000d70:	4b52      	ldr	r3, [pc, #328]	; (8000ebc <Btc_RequestState+0x1d0>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fa33 	bl	80001e0 <strlen>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	4b50      	ldr	r3, [pc, #320]	; (8000ec0 <Btc_RequestState+0x1d4>)
 8000d80:	801a      	strh	r2, [r3, #0]
		Btc_DtcDescriptionLength6 = strlen(Btc_DtcBtc);
 8000d82:	4b50      	ldr	r3, [pc, #320]	; (8000ec4 <Btc_RequestState+0x1d8>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fa2a 	bl	80001e0 <strlen>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	4b4d      	ldr	r3, [pc, #308]	; (8000ec8 <Btc_RequestState+0x1dc>)
 8000d92:	801a      	strh	r2, [r3, #0]
		if(Dem_DtcArray[4] != 0)
 8000d94:	4b4d      	ldr	r3, [pc, #308]	; (8000ecc <Btc_RequestState+0x1e0>)
 8000d96:	791b      	ldrb	r3, [r3, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00d      	beq.n	8000db8 <Btc_RequestState+0xcc>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcBtc, Btc_DtcDescriptionLength6) == HAL_BUSY);
 8000d9c:	bf00      	nop
 8000d9e:	4b49      	ldr	r3, [pc, #292]	; (8000ec4 <Btc_RequestState+0x1d8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a49      	ldr	r2, [pc, #292]	; (8000ec8 <Btc_RequestState+0x1dc>)
 8000da4:	8812      	ldrh	r2, [r2, #0]
 8000da6:	4619      	mov	r1, r3
 8000da8:	483b      	ldr	r0, [pc, #236]	; (8000e98 <Btc_RequestState+0x1ac>)
 8000daa:	f007 fae5 	bl	8008378 <HAL_UART_Transmit_IT>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d0f4      	beq.n	8000d9e <Btc_RequestState+0xb2>
			Rte_Runnable_Wdg_MainFunction();
 8000db4:	f00d fa72 	bl	800e29c <Rte_Runnable_Wdg_MainFunction>
		{
			/* do nothing */
		}


		if(Dem_DtcArray[0] != 0)
 8000db8:	4b44      	ldr	r3, [pc, #272]	; (8000ecc <Btc_RequestState+0x1e0>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d00d      	beq.n	8000ddc <Btc_RequestState+0xf0>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcLightSensor, Btc_DtcDescriptionLength1) == HAL_BUSY);
 8000dc0:	bf00      	nop
 8000dc2:	4b36      	ldr	r3, [pc, #216]	; (8000e9c <Btc_RequestState+0x1b0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a36      	ldr	r2, [pc, #216]	; (8000ea0 <Btc_RequestState+0x1b4>)
 8000dc8:	8812      	ldrh	r2, [r2, #0]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4832      	ldr	r0, [pc, #200]	; (8000e98 <Btc_RequestState+0x1ac>)
 8000dce:	f007 fad3 	bl	8008378 <HAL_UART_Transmit_IT>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d0f4      	beq.n	8000dc2 <Btc_RequestState+0xd6>
			Rte_Runnable_Wdg_MainFunction();
 8000dd8:	f00d fa60 	bl	800e29c <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[1] != 0)
 8000ddc:	4b3b      	ldr	r3, [pc, #236]	; (8000ecc <Btc_RequestState+0x1e0>)
 8000dde:	785b      	ldrb	r3, [r3, #1]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d00d      	beq.n	8000e00 <Btc_RequestState+0x114>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcVibrationSensor, Btc_DtcDescriptionLength2) == HAL_BUSY);
 8000de4:	bf00      	nop
 8000de6:	4b2f      	ldr	r3, [pc, #188]	; (8000ea4 <Btc_RequestState+0x1b8>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a2f      	ldr	r2, [pc, #188]	; (8000ea8 <Btc_RequestState+0x1bc>)
 8000dec:	8812      	ldrh	r2, [r2, #0]
 8000dee:	4619      	mov	r1, r3
 8000df0:	4829      	ldr	r0, [pc, #164]	; (8000e98 <Btc_RequestState+0x1ac>)
 8000df2:	f007 fac1 	bl	8008378 <HAL_UART_Transmit_IT>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d0f4      	beq.n	8000de6 <Btc_RequestState+0xfa>
			Rte_Runnable_Wdg_MainFunction();
 8000dfc:	f00d fa4e 	bl	800e29c <Rte_Runnable_Wdg_MainFunction>
		else
		{
			/* do nothing */
		}

		if(Dem_DtcArray[2] != 0)
 8000e00:	4b32      	ldr	r3, [pc, #200]	; (8000ecc <Btc_RequestState+0x1e0>)
 8000e02:	789b      	ldrb	r3, [r3, #2]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00d      	beq.n	8000e24 <Btc_RequestState+0x138>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcRearParkingSensor, Btc_DtcDescriptionLength3) == HAL_BUSY);
 8000e08:	bf00      	nop
 8000e0a:	4b28      	ldr	r3, [pc, #160]	; (8000eac <Btc_RequestState+0x1c0>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a28      	ldr	r2, [pc, #160]	; (8000eb0 <Btc_RequestState+0x1c4>)
 8000e10:	8812      	ldrh	r2, [r2, #0]
 8000e12:	4619      	mov	r1, r3
 8000e14:	4820      	ldr	r0, [pc, #128]	; (8000e98 <Btc_RequestState+0x1ac>)
 8000e16:	f007 faaf 	bl	8008378 <HAL_UART_Transmit_IT>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d0f4      	beq.n	8000e0a <Btc_RequestState+0x11e>
			Rte_Runnable_Wdg_MainFunction();
 8000e20:	f00d fa3c 	bl	800e29c <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		if(Dem_DtcArray[3] != 0)
 8000e24:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <Btc_RequestState+0x1e0>)
 8000e26:	78db      	ldrb	r3, [r3, #3]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d00d      	beq.n	8000e48 <Btc_RequestState+0x15c>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcFrontParkingSensor, Btc_DtcDescriptionLength4) == HAL_BUSY);
 8000e2c:	bf00      	nop
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <Btc_RequestState+0x1c8>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a21      	ldr	r2, [pc, #132]	; (8000eb8 <Btc_RequestState+0x1cc>)
 8000e34:	8812      	ldrh	r2, [r2, #0]
 8000e36:	4619      	mov	r1, r3
 8000e38:	4817      	ldr	r0, [pc, #92]	; (8000e98 <Btc_RequestState+0x1ac>)
 8000e3a:	f007 fa9d 	bl	8008378 <HAL_UART_Transmit_IT>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d0f4      	beq.n	8000e2e <Btc_RequestState+0x142>
			Rte_Runnable_Wdg_MainFunction();
 8000e44:	f00d fa2a 	bl	800e29c <Rte_Runnable_Wdg_MainFunction>
		else
		{
			/* do nothing */
		}

		if(Dem_DtcArray[5] != 0 || Dem_DtcArray[6] != 0 || Dem_DtcArray[7] != 0)
 8000e48:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <Btc_RequestState+0x1e0>)
 8000e4a:	795b      	ldrb	r3, [r3, #5]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d107      	bne.n	8000e60 <Btc_RequestState+0x174>
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <Btc_RequestState+0x1e0>)
 8000e52:	799b      	ldrb	r3, [r3, #6]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d103      	bne.n	8000e60 <Btc_RequestState+0x174>
 8000e58:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <Btc_RequestState+0x1e0>)
 8000e5a:	79db      	ldrb	r3, [r3, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d00d      	beq.n	8000e7c <Btc_RequestState+0x190>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Btc_DtcHardware, Btc_DtcDescriptionLength5) == HAL_BUSY);
 8000e60:	bf00      	nop
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <Btc_RequestState+0x1d0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a16      	ldr	r2, [pc, #88]	; (8000ec0 <Btc_RequestState+0x1d4>)
 8000e68:	8812      	ldrh	r2, [r2, #0]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480a      	ldr	r0, [pc, #40]	; (8000e98 <Btc_RequestState+0x1ac>)
 8000e6e:	f007 fa83 	bl	8008378 <HAL_UART_Transmit_IT>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d0f4      	beq.n	8000e62 <Btc_RequestState+0x176>
			Rte_Runnable_Wdg_MainFunction();
 8000e78:	f00d fa10 	bl	800e29c <Rte_Runnable_Wdg_MainFunction>
		}
		else
		{
			/* do nothing */
		}
		Rte_Runnable_Wdg_MainFunction();
 8000e7c:	f00d fa0e 	bl	800e29c <Rte_Runnable_Wdg_MainFunction>
		Btc_ReceivedDataOnBluetooth = 0;
 8000e80:	4b02      	ldr	r3, [pc, #8]	; (8000e8c <Btc_RequestState+0x1a0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200000b2 	.word	0x200000b2
 8000e90:	20000000 	.word	0x20000000
 8000e94:	200000c0 	.word	0x200000c0
 8000e98:	200005fc 	.word	0x200005fc
 8000e9c:	20000004 	.word	0x20000004
 8000ea0:	200000c2 	.word	0x200000c2
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	200000c4 	.word	0x200000c4
 8000eac:	2000000c 	.word	0x2000000c
 8000eb0:	200000c6 	.word	0x200000c6
 8000eb4:	20000010 	.word	0x20000010
 8000eb8:	200000c8 	.word	0x200000c8
 8000ebc:	20000014 	.word	0x20000014
 8000ec0:	200000ca 	.word	0x200000ca
 8000ec4:	20000018 	.word	0x20000018
 8000ec8:	200000cc 	.word	0x200000cc
 8000ecc:	20000674 	.word	0x20000674

08000ed0 <Btc_RxVal>:
/***********************************************************************************
* Function: Btc_RxVal													   		   *
* Description: Process bluetooth commands.	 		   							   *
************************************************************************************/
VOID Btc_RxVal()
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	if(Rte_Call_Crc_R_CrcPort_Crc_VerifyUartData() == E_OK)
 8000ed4:	f00d fbe6 	bl	800e6a4 <Crc_VerifyUartData>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f040 81a7 	bne.w	800122e <Btc_RxVal+0x35e>
	{

		/* Process the command on each case and update the respective variable. */
		switch(Btc_ReceivedDataOnBluetooth)
 8000ee0:	4bb0      	ldr	r3, [pc, #704]	; (80011a4 <Btc_RxVal+0x2d4>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	2b19      	cmp	r3, #25
 8000ee8:	f200 8157 	bhi.w	800119a <Btc_RxVal+0x2ca>
 8000eec:	a201      	add	r2, pc, #4	; (adr r2, 8000ef4 <Btc_RxVal+0x24>)
 8000eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef2:	bf00      	nop
 8000ef4:	08000fed 	.word	0x08000fed
 8000ef8:	08000ffb 	.word	0x08000ffb
 8000efc:	08001009 	.word	0x08001009
 8000f00:	08001027 	.word	0x08001027
 8000f04:	0800119b 	.word	0x0800119b
 8000f08:	0800119b 	.word	0x0800119b
 8000f0c:	0800103f 	.word	0x0800103f
 8000f10:	08001063 	.word	0x08001063
 8000f14:	0800107b 	.word	0x0800107b
 8000f18:	0800109f 	.word	0x0800109f
 8000f1c:	080010b7 	.word	0x080010b7
 8000f20:	080010cf 	.word	0x080010cf
 8000f24:	080010e7 	.word	0x080010e7
 8000f28:	080010ff 	.word	0x080010ff
 8000f2c:	08001117 	.word	0x08001117
 8000f30:	0800112d 	.word	0x0800112d
 8000f34:	08001143 	.word	0x08001143
 8000f38:	08001159 	.word	0x08001159
 8000f3c:	0800116f 	.word	0x0800116f
 8000f40:	08001185 	.word	0x08001185
 8000f44:	08000f5d 	.word	0x08000f5d
 8000f48:	08000f75 	.word	0x08000f75
 8000f4c:	08000f8d 	.word	0x08000f8d
 8000f50:	08000fa5 	.word	0x08000fa5
 8000f54:	08000fbd 	.word	0x08000fbd
 8000f58:	08000fd5 	.word	0x08000fd5
		{
			case BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f5c:	4b92      	ldr	r3, [pc, #584]	; (80011a8 <Btc_RxVal+0x2d8>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	f040 811c 	bne.w	800119e <Btc_RxVal+0x2ce>
				{
					Btc_ReverseLight = STD_HIGH;
 8000f66:	4b91      	ldr	r3, [pc, #580]	; (80011ac <Btc_RxVal+0x2dc>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 8000f6c:	488f      	ldr	r0, [pc, #572]	; (80011ac <Btc_RxVal+0x2dc>)
 8000f6e:	f00d fa3f 	bl	800e3f0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f72:	e114      	b.n	800119e <Btc_RxVal+0x2ce>
			case BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f74:	4b8c      	ldr	r3, [pc, #560]	; (80011a8 <Btc_RxVal+0x2d8>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	f040 812f 	bne.w	80011dc <Btc_RxVal+0x30c>
				{
					Btc_ReverseLight = STD_LOW;
 8000f7e:	4b8b      	ldr	r3, [pc, #556]	; (80011ac <Btc_RxVal+0x2dc>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 8000f84:	4889      	ldr	r0, [pc, #548]	; (80011ac <Btc_RxVal+0x2dc>)
 8000f86:	f00d fa33 	bl	800e3f0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f8a:	e127      	b.n	80011dc <Btc_RxVal+0x30c>
			case BTC_RX_EXTLIGHTS_POSITIONZERO:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f8c:	4b86      	ldr	r3, [pc, #536]	; (80011a8 <Btc_RxVal+0x2d8>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	f040 8125 	bne.w	80011e0 <Btc_RxVal+0x310>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 8000f96:	4b86      	ldr	r3, [pc, #536]	; (80011b0 <Btc_RxVal+0x2e0>)
 8000f98:	2217      	movs	r2, #23
 8000f9a:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000f9c:	4884      	ldr	r0, [pc, #528]	; (80011b0 <Btc_RxVal+0x2e0>)
 8000f9e:	f00d fa47 	bl	800e430 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000fa2:	e11d      	b.n	80011e0 <Btc_RxVal+0x310>
			case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000fa4:	4b80      	ldr	r3, [pc, #512]	; (80011a8 <Btc_RxVal+0x2d8>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	f040 811b 	bne.w	80011e4 <Btc_RxVal+0x314>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 8000fae:	4b80      	ldr	r3, [pc, #512]	; (80011b0 <Btc_RxVal+0x2e0>)
 8000fb0:	2218      	movs	r2, #24
 8000fb2:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000fb4:	487e      	ldr	r0, [pc, #504]	; (80011b0 <Btc_RxVal+0x2e0>)
 8000fb6:	f00d fa3b 	bl	800e430 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000fba:	e113      	b.n	80011e4 <Btc_RxVal+0x314>
			case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000fbc:	4b7a      	ldr	r3, [pc, #488]	; (80011a8 <Btc_RxVal+0x2d8>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	f040 8111 	bne.w	80011e8 <Btc_RxVal+0x318>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 8000fc6:	4b7a      	ldr	r3, [pc, #488]	; (80011b0 <Btc_RxVal+0x2e0>)
 8000fc8:	2219      	movs	r2, #25
 8000fca:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000fcc:	4878      	ldr	r0, [pc, #480]	; (80011b0 <Btc_RxVal+0x2e0>)
 8000fce:	f00d fa2f 	bl	800e430 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000fd2:	e109      	b.n	80011e8 <Btc_RxVal+0x318>
			case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000fd4:	4b74      	ldr	r3, [pc, #464]	; (80011a8 <Btc_RxVal+0x2d8>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	f040 8107 	bne.w	80011ec <Btc_RxVal+0x31c>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 8000fde:	4b74      	ldr	r3, [pc, #464]	; (80011b0 <Btc_RxVal+0x2e0>)
 8000fe0:	221a      	movs	r2, #26
 8000fe2:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000fe4:	4872      	ldr	r0, [pc, #456]	; (80011b0 <Btc_RxVal+0x2e0>)
 8000fe6:	f00d fa23 	bl	800e430 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000fea:	e0ff      	b.n	80011ec <Btc_RxVal+0x31c>
			case BTC_RX_CENLOC_ON:
				Btc_CenLoc = STD_HIGH;
 8000fec:	4b71      	ldr	r3, [pc, #452]	; (80011b4 <Btc_RxVal+0x2e4>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 8000ff2:	4870      	ldr	r0, [pc, #448]	; (80011b4 <Btc_RxVal+0x2e4>)
 8000ff4:	f00d f9dc 	bl	800e3b0 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>
				break;
 8000ff8:	e119      	b.n	800122e <Btc_RxVal+0x35e>
			case BTC_RX_CENLOC_OFF:
				Btc_CenLoc = STD_LOW;
 8000ffa:	4b6e      	ldr	r3, [pc, #440]	; (80011b4 <Btc_RxVal+0x2e4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 8001000:	486c      	ldr	r0, [pc, #432]	; (80011b4 <Btc_RxVal+0x2e4>)
 8001002:	f00d f9d5 	bl	800e3b0 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>
				break;
 8001006:	e112      	b.n	800122e <Btc_RxVal+0x35e>
			case BTC_RX_EXTLIGHTS_HIGHBEAM_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001008:	4b67      	ldr	r3, [pc, #412]	; (80011a8 <Btc_RxVal+0x2d8>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	f040 80ef 	bne.w	80011f0 <Btc_RxVal+0x320>
				{
					Btc_HighBeam = STD_HIGH;
 8001012:	4b69      	ldr	r3, [pc, #420]	; (80011b8 <Btc_RxVal+0x2e8>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
					Btc_FlashHighBeam = STD_LOW;
 8001018:	4b68      	ldr	r3, [pc, #416]	; (80011bc <Btc_RxVal+0x2ec>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 800101e:	4866      	ldr	r0, [pc, #408]	; (80011b8 <Btc_RxVal+0x2e8>)
 8001020:	f00d fa16 	bl	800e450 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001024:	e0e4      	b.n	80011f0 <Btc_RxVal+0x320>
			case BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001026:	4b60      	ldr	r3, [pc, #384]	; (80011a8 <Btc_RxVal+0x2d8>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b01      	cmp	r3, #1
 800102c:	f040 80e2 	bne.w	80011f4 <Btc_RxVal+0x324>
				{
					Btc_HighBeam = STD_LOW;
 8001030:	4b61      	ldr	r3, [pc, #388]	; (80011b8 <Btc_RxVal+0x2e8>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 8001036:	4860      	ldr	r0, [pc, #384]	; (80011b8 <Btc_RxVal+0x2e8>)
 8001038:	f00d fa0a 	bl	800e450 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800103c:	e0da      	b.n	80011f4 <Btc_RxVal+0x324>
			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800103e:	4b5a      	ldr	r3, [pc, #360]	; (80011a8 <Btc_RxVal+0x2d8>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b01      	cmp	r3, #1
 8001044:	f040 80d8 	bne.w	80011f8 <Btc_RxVal+0x328>
				{
					Btc_TurnSignalLeft = STD_HIGH;
 8001048:	4b5d      	ldr	r3, [pc, #372]	; (80011c0 <Btc_RxVal+0x2f0>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
					Btc_TurnSignalRight = STD_LOW;
 800104e:	4b5d      	ldr	r3, [pc, #372]	; (80011c4 <Btc_RxVal+0x2f4>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8001054:	485a      	ldr	r0, [pc, #360]	; (80011c0 <Btc_RxVal+0x2f0>)
 8001056:	f00d fa1b 	bl	800e490 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 800105a:	485a      	ldr	r0, [pc, #360]	; (80011c4 <Btc_RxVal+0x2f4>)
 800105c:	f00d fa28 	bl	800e4b0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001060:	e0ca      	b.n	80011f8 <Btc_RxVal+0x328>
			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001062:	4b51      	ldr	r3, [pc, #324]	; (80011a8 <Btc_RxVal+0x2d8>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b01      	cmp	r3, #1
 8001068:	f040 80c8 	bne.w	80011fc <Btc_RxVal+0x32c>
				{
					Btc_TurnSignalLeft = STD_LOW;
 800106c:	4b54      	ldr	r3, [pc, #336]	; (80011c0 <Btc_RxVal+0x2f0>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8001072:	4853      	ldr	r0, [pc, #332]	; (80011c0 <Btc_RxVal+0x2f0>)
 8001074:	f00d fa0c 	bl	800e490 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001078:	e0c0      	b.n	80011fc <Btc_RxVal+0x32c>
			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800107a:	4b4b      	ldr	r3, [pc, #300]	; (80011a8 <Btc_RxVal+0x2d8>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	f040 80be 	bne.w	8001200 <Btc_RxVal+0x330>
				{
					Btc_TurnSignalRight = STD_HIGH;
 8001084:	4b4f      	ldr	r3, [pc, #316]	; (80011c4 <Btc_RxVal+0x2f4>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
					Btc_TurnSignalLeft = STD_LOW;
 800108a:	4b4d      	ldr	r3, [pc, #308]	; (80011c0 <Btc_RxVal+0x2f0>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8001090:	484b      	ldr	r0, [pc, #300]	; (80011c0 <Btc_RxVal+0x2f0>)
 8001092:	f00d f9fd 	bl	800e490 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8001096:	484b      	ldr	r0, [pc, #300]	; (80011c4 <Btc_RxVal+0x2f4>)
 8001098:	f00d fa0a 	bl	800e4b0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800109c:	e0b0      	b.n	8001200 <Btc_RxVal+0x330>
			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800109e:	4b42      	ldr	r3, [pc, #264]	; (80011a8 <Btc_RxVal+0x2d8>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	f040 80ae 	bne.w	8001204 <Btc_RxVal+0x334>
				{
					Btc_TurnSignalRight = STD_LOW;
 80010a8:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <Btc_RxVal+0x2f4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 80010ae:	4845      	ldr	r0, [pc, #276]	; (80011c4 <Btc_RxVal+0x2f4>)
 80010b0:	f00d f9fe 	bl	800e4b0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80010b4:	e0a6      	b.n	8001204 <Btc_RxVal+0x334>
			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80010b6:	4b3c      	ldr	r3, [pc, #240]	; (80011a8 <Btc_RxVal+0x2d8>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	f040 80a4 	bne.w	8001208 <Btc_RxVal+0x338>
				{
					Btc_HazardLight = STD_HIGH;
 80010c0:	4b41      	ldr	r3, [pc, #260]	; (80011c8 <Btc_RxVal+0x2f8>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 80010c6:	4840      	ldr	r0, [pc, #256]	; (80011c8 <Btc_RxVal+0x2f8>)
 80010c8:	f00d fa02 	bl	800e4d0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80010cc:	e09c      	b.n	8001208 <Btc_RxVal+0x338>
			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80010ce:	4b36      	ldr	r3, [pc, #216]	; (80011a8 <Btc_RxVal+0x2d8>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	f040 809a 	bne.w	800120c <Btc_RxVal+0x33c>
				{
					Btc_HazardLight = STD_LOW;
 80010d8:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <Btc_RxVal+0x2f8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 80010de:	483a      	ldr	r0, [pc, #232]	; (80011c8 <Btc_RxVal+0x2f8>)
 80010e0:	f00d f9f6 	bl	800e4d0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80010e4:	e092      	b.n	800120c <Btc_RxVal+0x33c>
			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80010e6:	4b30      	ldr	r3, [pc, #192]	; (80011a8 <Btc_RxVal+0x2d8>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	f040 8090 	bne.w	8001210 <Btc_RxVal+0x340>
				{
					Btc_FrontFogLight = STD_HIGH;
 80010f0:	4b36      	ldr	r3, [pc, #216]	; (80011cc <Btc_RxVal+0x2fc>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 80010f6:	4835      	ldr	r0, [pc, #212]	; (80011cc <Btc_RxVal+0x2fc>)
 80010f8:	f00d f9ba 	bl	800e470 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 80010fc:	e088      	b.n	8001210 <Btc_RxVal+0x340>
			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 80010fe:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <Btc_RxVal+0x2d8>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b01      	cmp	r3, #1
 8001104:	f040 8086 	bne.w	8001214 <Btc_RxVal+0x344>
				{
					Btc_FrontFogLight = STD_LOW;
 8001108:	4b30      	ldr	r3, [pc, #192]	; (80011cc <Btc_RxVal+0x2fc>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 800110e:	482f      	ldr	r0, [pc, #188]	; (80011cc <Btc_RxVal+0x2fc>)
 8001110:	f00d f9ae 	bl	800e470 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001114:	e07e      	b.n	8001214 <Btc_RxVal+0x344>
			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <Btc_RxVal+0x2d8>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d17c      	bne.n	8001218 <Btc_RxVal+0x348>
				{
					Btc_RearFogLight = STD_HIGH;
 800111e:	4b2c      	ldr	r3, [pc, #176]	; (80011d0 <Btc_RxVal+0x300>)
 8001120:	2201      	movs	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 8001124:	482a      	ldr	r0, [pc, #168]	; (80011d0 <Btc_RxVal+0x300>)
 8001126:	f00d f9e3 	bl	800e4f0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800112a:	e075      	b.n	8001218 <Btc_RxVal+0x348>
			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800112c:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <Btc_RxVal+0x2d8>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d173      	bne.n	800121c <Btc_RxVal+0x34c>
				{
					Btc_RearFogLight = STD_LOW;
 8001134:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <Btc_RxVal+0x300>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 800113a:	4825      	ldr	r0, [pc, #148]	; (80011d0 <Btc_RxVal+0x300>)
 800113c:	f00d f9d8 	bl	800e4f0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001140:	e06c      	b.n	800121c <Btc_RxVal+0x34c>
			case BTC_RX_EXTLIGHTS_BRAKELIGHTON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <Btc_RxVal+0x2d8>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d16a      	bne.n	8001220 <Btc_RxVal+0x350>
				{
					Btc_BrakeLight = STD_HIGH;
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <Btc_RxVal+0x304>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 8001150:	4820      	ldr	r0, [pc, #128]	; (80011d4 <Btc_RxVal+0x304>)
 8001152:	f00d f95d 	bl	800e410 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001156:	e063      	b.n	8001220 <Btc_RxVal+0x350>
			case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <Btc_RxVal+0x2d8>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d161      	bne.n	8001224 <Btc_RxVal+0x354>
				{
					Btc_BrakeLight = STD_LOW;
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <Btc_RxVal+0x304>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 8001166:	481b      	ldr	r0, [pc, #108]	; (80011d4 <Btc_RxVal+0x304>)
 8001168:	f00d f952 	bl	800e410 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 800116c:	e05a      	b.n	8001224 <Btc_RxVal+0x354>
			case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <Btc_RxVal+0x2d8>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d158      	bne.n	8001228 <Btc_RxVal+0x358>
				{
					Btc_IntLights = STD_HIGH;
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <Btc_RxVal+0x308>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
					Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 800117c:	4816      	ldr	r0, [pc, #88]	; (80011d8 <Btc_RxVal+0x308>)
 800117e:	f00d f9f7 	bl	800e570 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001182:	e051      	b.n	8001228 <Btc_RxVal+0x358>
			case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <Btc_RxVal+0x2d8>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d14f      	bne.n	800122c <Btc_RxVal+0x35c>
				{
					Btc_IntLights = STD_LOW;
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <Btc_RxVal+0x308>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
					Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8001192:	4811      	ldr	r0, [pc, #68]	; (80011d8 <Btc_RxVal+0x308>)
 8001194:	f00d f9ec 	bl	800e570 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8001198:	e048      	b.n	800122c <Btc_RxVal+0x35c>
			default:
				break;
 800119a:	bf00      	nop
 800119c:	e047      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 800119e:	bf00      	nop
 80011a0:	e045      	b.n	800122e <Btc_RxVal+0x35e>
 80011a2:	bf00      	nop
 80011a4:	200000b2 	.word	0x200000b2
 80011a8:	200000ce 	.word	0x200000ce
 80011ac:	200000bd 	.word	0x200000bd
 80011b0:	200000b4 	.word	0x200000b4
 80011b4:	200000b3 	.word	0x200000b3
 80011b8:	200000b5 	.word	0x200000b5
 80011bc:	200000b6 	.word	0x200000b6
 80011c0:	200000b8 	.word	0x200000b8
 80011c4:	200000b9 	.word	0x200000b9
 80011c8:	200000ba 	.word	0x200000ba
 80011cc:	200000b7 	.word	0x200000b7
 80011d0:	200000bc 	.word	0x200000bc
 80011d4:	200000bb 	.word	0x200000bb
 80011d8:	200000be 	.word	0x200000be
				break;
 80011dc:	bf00      	nop
 80011de:	e026      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 80011e0:	bf00      	nop
 80011e2:	e024      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 80011e4:	bf00      	nop
 80011e6:	e022      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 80011e8:	bf00      	nop
 80011ea:	e020      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 80011ec:	bf00      	nop
 80011ee:	e01e      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 80011f0:	bf00      	nop
 80011f2:	e01c      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 80011f4:	bf00      	nop
 80011f6:	e01a      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 80011f8:	bf00      	nop
 80011fa:	e018      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 80011fc:	bf00      	nop
 80011fe:	e016      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 8001200:	bf00      	nop
 8001202:	e014      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 8001204:	bf00      	nop
 8001206:	e012      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 8001208:	bf00      	nop
 800120a:	e010      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 800120c:	bf00      	nop
 800120e:	e00e      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 8001210:	bf00      	nop
 8001212:	e00c      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 8001214:	bf00      	nop
 8001216:	e00a      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 8001218:	bf00      	nop
 800121a:	e008      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 800121c:	bf00      	nop
 800121e:	e006      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 8001220:	bf00      	nop
 8001222:	e004      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 8001224:	bf00      	nop
 8001226:	e002      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 8001228:	bf00      	nop
 800122a:	e000      	b.n	800122e <Btc_RxVal+0x35e>
				break;
 800122c:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop

08001234 <Btc_MainFunction>:
/***********************************************************************************
* Function: Btc_MainFunction											 		   *
* Description: Process bluetooth communication states.					           *
************************************************************************************/
VOID Btc_MainFunction()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	Btc_RxVal();
 8001238:	f7ff fe4a 	bl	8000ed0 <Btc_RxVal>
	Btc_RequestState();
 800123c:	f7ff fd56 	bl	8000cec <Btc_RequestState>
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <CenLoc_State>:
/***********************************************************************************
* Function: CenLoc_State													   	   *
* Description: Process the current and previous state of the central lock.		   *
************************************************************************************/
VOID CenLoc_State()
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	/* Every time the state of the central lock changes
	 * set the alarm to off. */
	CenLoc_SecAlmStateToOff();
 8001248:	f000 f840 	bl	80012cc <CenLoc_SecAlmStateToOff>
	/* If the current state is different than the previous state
	 * update the variables respectively.
	 * Initialize the security alarm application.
	 * Calls for start of OS timer for lock unlock sequence.*/
	if(CenLoc_PreviousState != CenLoc_CurrentState)
 800124c:	4b17      	ldr	r3, [pc, #92]	; (80012ac <CenLoc_State+0x68>)
 800124e:	781a      	ldrb	r2, [r3, #0]
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <CenLoc_State+0x6c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d027      	beq.n	80012a8 <CenLoc_State+0x64>
	{
		CenLoc_PreviousStateFlag 	= CenLoc_PreviousState;
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <CenLoc_State+0x68>)
 800125a:	781a      	ldrb	r2, [r3, #0]
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <CenLoc_State+0x70>)
 800125e:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 		= CenLoc_CurrentState;
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <CenLoc_State+0x6c>)
 8001262:	781a      	ldrb	r2, [r3, #0]
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <CenLoc_State+0x68>)
 8001266:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter 		= STD_LOW;
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <CenLoc_State+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
		CenLoc_FollowMeHomeCounter 	= STD_LOW;
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <CenLoc_State+0x78>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
		CenLoc_CyclicAlarmCounter	= STD_LOW;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <CenLoc_State+0x7c>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
		CenLoc_TurnOnLedCounter		= STD_LOW;
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <CenLoc_State+0x80>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 8001280:	f001 f8b6 	bl	80023f0 <SecAlm_Init>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_CenLoc_LockUnlockSequence_TimerHandle, 250);
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <CenLoc_State+0x84>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	21fa      	movs	r1, #250	; 0xfa
 800128a:	4618      	mov	r0, r3
 800128c:	f00d f9e0 	bl	800e650 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(&CenLoc_BlinkCounter);
 8001290:	4809      	ldr	r0, [pc, #36]	; (80012b8 <CenLoc_State+0x74>)
 8001292:	f00c ff81 	bl	800e198 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>
		Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(&CenLoc_CyclicAlarmCounter);
 8001296:	480a      	ldr	r0, [pc, #40]	; (80012c0 <CenLoc_State+0x7c>)
 8001298:	f00c ff8e 	bl	800e1b8 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>
		Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(&CenLoc_TurnOnLedCounter);
 800129c:	4809      	ldr	r0, [pc, #36]	; (80012c4 <CenLoc_State+0x80>)
 800129e:	f00c ff9b 	bl	800e1d8 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 80012a2:	4806      	ldr	r0, [pc, #24]	; (80012bc <CenLoc_State+0x78>)
 80012a4:	f00c ffa8 	bl	800e1f8 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
	}
	else
	{
		/* do nothing */
	}
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200000cf 	.word	0x200000cf
 80012b0:	200000ce 	.word	0x200000ce
 80012b4:	200000d6 	.word	0x200000d6
 80012b8:	200000d2 	.word	0x200000d2
 80012bc:	200000d4 	.word	0x200000d4
 80012c0:	200000d3 	.word	0x200000d3
 80012c4:	200000d5 	.word	0x200000d5
 80012c8:	2000023c 	.word	0x2000023c

080012cc <CenLoc_SecAlmStateToOff>:
/***********************************************************************************
* Function: CenLoc_SecAlmStateToOff												   *
* Description: Turn off the security alarm.										   *
************************************************************************************/
VOID CenLoc_SecAlmStateToOff()
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	/* The central lock is on, the security alarm goes off. */
	if(CenLoc_CurrentState == STD_HIGH)
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <CenLoc_SecAlmStateToOff+0x14>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d101      	bne.n	80012dc <CenLoc_SecAlmStateToOff+0x10>
	{
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 80012d8:	f001 f88a 	bl	80023f0 <SecAlm_Init>
	}
	else
	{
		/* do nothing */
	}
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200000ce 	.word	0x200000ce

080012e4 <CenLoc_FollowMeHome>:
/***********************************************************************************
* Function: CenLoc_FollowMeHome												       *
* Description: Process the state of the follow me home.					 		   *
************************************************************************************/
VOID CenLoc_FollowMeHome()
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	/* Follow me home is on as long as the timer is on. */
	if(CenLoc_FollowMeHomeCounter == 1)
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <CenLoc_FollowMeHome+0x3c>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d103      	bne.n	80012f8 <CenLoc_FollowMeHome+0x14>
	{
		CenLoc_FollowMeHomeState = STD_HIGH;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <CenLoc_FollowMeHome+0x40>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 80012f6:	e011      	b.n	800131c <CenLoc_FollowMeHome+0x38>
	else if(CenLoc_FollowMeHomeCounter == 2)
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <CenLoc_FollowMeHome+0x3c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d10d      	bne.n	800131c <CenLoc_FollowMeHome+0x38>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_FollowMeHome_TimerHandle);
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <CenLoc_FollowMeHome+0x44>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f00d f9b0 	bl	800e66a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		CenLoc_FollowMeHomeState = STD_LOW;
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <CenLoc_FollowMeHome+0x40>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
		CenLoc_FollowMeHomeCounter = 2;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <CenLoc_FollowMeHome+0x3c>)
 8001312:	2202      	movs	r2, #2
 8001314:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 8001316:	4802      	ldr	r0, [pc, #8]	; (8001320 <CenLoc_FollowMeHome+0x3c>)
 8001318:	f00c ff6e 	bl	800e1f8 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200000d4 	.word	0x200000d4
 8001324:	200000d0 	.word	0x200000d0
 8001328:	20000248 	.word	0x20000248

0800132c <CenLoc_UnlockSequence>:
/***********************************************************************************
* Function: CenLoc_UnlockSequence												   *
* Description: Process the unlock sequence. 		   							   *
************************************************************************************/
VOID CenLoc_UnlockSequence()
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	/* Stop the timer used for the security alarm LED. */
	Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLed_TurnOnCyclic_TimerHandle);
 8001330:	4b48      	ldr	r3, [pc, #288]	; (8001454 <CenLoc_UnlockSequence+0x128>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f00d f998 	bl	800e66a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
	/* Process follow me home state. */
	CenLoc_FollowMeHome();
 800133a:	f7ff ffd3 	bl	80012e4 <CenLoc_FollowMeHome>
	/* Sets previous state to high so that on locking it is taken into consideration. */
	localPreviousState = STD_HIGH;
 800133e:	4b46      	ldr	r3, [pc, #280]	; (8001458 <CenLoc_UnlockSequence+0x12c>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
	/* Unlocking sequence consists of triggering the hazard lights twice on and twice off.*/
	if(CenLoc_BlinkCounter <= 3)
 8001344:	4b45      	ldr	r3, [pc, #276]	; (800145c <CenLoc_UnlockSequence+0x130>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b03      	cmp	r3, #3
 800134a:	d86f      	bhi.n	800142c <CenLoc_UnlockSequence+0x100>
	{
		/* On and off period for the hazard lights and buzzer is defined in the OS timer start call. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 800134c:	4b44      	ldr	r3, [pc, #272]	; (8001460 <CenLoc_UnlockSequence+0x134>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001354:	4618      	mov	r0, r3
 8001356:	f00d f97b 	bl	800e650 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		/* Start the OS timer for the follow me home. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_FollowMeHome_TimerHandle) == 0)
 800135a:	4b42      	ldr	r3, [pc, #264]	; (8001464 <CenLoc_UnlockSequence+0x138>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f009 f8c1 	bl	800a4e6 <osTimerIsRunning>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d106      	bne.n	8001378 <CenLoc_UnlockSequence+0x4c>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_FollowMeHome_TimerHandle, 20000);
 800136a:	4b3e      	ldr	r3, [pc, #248]	; (8001464 <CenLoc_UnlockSequence+0x138>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001372:	4618      	mov	r0, r3
 8001374:	f00d f96c 	bl	800e650 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		{
			/* do nothing */
		}
		/* Set the follow me home timer state variable to one to prevent activation of the follow me home
		 * when it is not requested. Upon expiration, the timer callback increments this variable. */
		CenLoc_FollowMeHomeCounter = 1;
 8001378:	4b3b      	ldr	r3, [pc, #236]	; (8001468 <CenLoc_UnlockSequence+0x13c>)
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 800137e:	483a      	ldr	r0, [pc, #232]	; (8001468 <CenLoc_UnlockSequence+0x13c>)
 8001380:	f00c ff3a 	bl	800e1f8 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		/* Process the on off states of the hazard lights and the buzzer. */
		switch(CenLoc_BlinkCounter)
 8001384:	4b35      	ldr	r3, [pc, #212]	; (800145c <CenLoc_UnlockSequence+0x130>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b03      	cmp	r3, #3
 800138a:	d85f      	bhi.n	800144c <CenLoc_UnlockSequence+0x120>
 800138c:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <CenLoc_UnlockSequence+0x68>)
 800138e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001392:	bf00      	nop
 8001394:	080013a5 	.word	0x080013a5
 8001398:	080013c7 	.word	0x080013c7
 800139c:	080013e9 	.word	0x080013e9
 80013a0:	0800140b 	.word	0x0800140b
		{
			case 0:
				CenLoc_BlinkState = STD_HIGH;
 80013a4:	4b31      	ldr	r3, [pc, #196]	; (800146c <CenLoc_UnlockSequence+0x140>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80013aa:	2108      	movs	r1, #8
 80013ac:	4830      	ldr	r0, [pc, #192]	; (8001470 <CenLoc_UnlockSequence+0x144>)
 80013ae:	f00c ff8d 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80013b2:	210c      	movs	r1, #12
 80013b4:	482e      	ldr	r0, [pc, #184]	; (8001470 <CenLoc_UnlockSequence+0x144>)
 80013b6:	f00c ff89 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 80013ba:	4b2c      	ldr	r3, [pc, #176]	; (800146c <CenLoc_UnlockSequence+0x140>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f962 	bl	8001688 <CenLoc_ToggleBuzzer>
				break;
 80013c4:	e043      	b.n	800144e <CenLoc_UnlockSequence+0x122>
			case 1:
				CenLoc_BlinkState = STD_LOW;
 80013c6:	4b29      	ldr	r3, [pc, #164]	; (800146c <CenLoc_UnlockSequence+0x140>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80013cc:	2108      	movs	r1, #8
 80013ce:	4828      	ldr	r0, [pc, #160]	; (8001470 <CenLoc_UnlockSequence+0x144>)
 80013d0:	f00c ff7c 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80013d4:	210c      	movs	r1, #12
 80013d6:	4826      	ldr	r0, [pc, #152]	; (8001470 <CenLoc_UnlockSequence+0x144>)
 80013d8:	f00c ff78 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 80013dc:	4b23      	ldr	r3, [pc, #140]	; (800146c <CenLoc_UnlockSequence+0x140>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 f951 	bl	8001688 <CenLoc_ToggleBuzzer>
				break;
 80013e6:	e032      	b.n	800144e <CenLoc_UnlockSequence+0x122>
			case 2:
				CenLoc_BlinkState = STD_HIGH;
 80013e8:	4b20      	ldr	r3, [pc, #128]	; (800146c <CenLoc_UnlockSequence+0x140>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80013ee:	2108      	movs	r1, #8
 80013f0:	481f      	ldr	r0, [pc, #124]	; (8001470 <CenLoc_UnlockSequence+0x144>)
 80013f2:	f00c ff6b 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80013f6:	210c      	movs	r1, #12
 80013f8:	481d      	ldr	r0, [pc, #116]	; (8001470 <CenLoc_UnlockSequence+0x144>)
 80013fa:	f00c ff67 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <CenLoc_UnlockSequence+0x140>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f940 	bl	8001688 <CenLoc_ToggleBuzzer>
				break;
 8001408:	e021      	b.n	800144e <CenLoc_UnlockSequence+0x122>
			case 3:
				CenLoc_BlinkState = STD_LOW;
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <CenLoc_UnlockSequence+0x140>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001410:	2108      	movs	r1, #8
 8001412:	4817      	ldr	r0, [pc, #92]	; (8001470 <CenLoc_UnlockSequence+0x144>)
 8001414:	f00c ff5a 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001418:	210c      	movs	r1, #12
 800141a:	4815      	ldr	r0, [pc, #84]	; (8001470 <CenLoc_UnlockSequence+0x144>)
 800141c:	f00c ff56 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <CenLoc_UnlockSequence+0x140>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f000 f92f 	bl	8001688 <CenLoc_ToggleBuzzer>
				break;
 800142a:	e010      	b.n	800144e <CenLoc_UnlockSequence+0x122>
			default:
				break;
		}
	}/* After the sequence is completed, stop the timers and set the variables related to this sequence to out of bounds values to prevent triggering when not requested. */
	else if(CenLoc_BlinkCounter >= 3)
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <CenLoc_UnlockSequence+0x130>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d90c      	bls.n	800144e <CenLoc_UnlockSequence+0x122>
	{
		CenLoc_BlinkState = 2;
 8001434:	4b0d      	ldr	r3, [pc, #52]	; (800146c <CenLoc_UnlockSequence+0x140>)
 8001436:	2202      	movs	r2, #2
 8001438:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter = 6;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <CenLoc_UnlockSequence+0x130>)
 800143c:	2206      	movs	r2, #6
 800143e:	701a      	strb	r2, [r3, #0]
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <CenLoc_UnlockSequence+0x148>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f00d f910 	bl	800e66a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
	}
	else
	{
		/* do nothing */
	}
}
 800144a:	e000      	b.n	800144e <CenLoc_UnlockSequence+0x122>
				break;
 800144c:	bf00      	nop
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000240 	.word	0x20000240
 8001458:	200000d7 	.word	0x200000d7
 800145c:	200000d2 	.word	0x200000d2
 8001460:	2000024c 	.word	0x2000024c
 8001464:	20000248 	.word	0x20000248
 8001468:	200000d4 	.word	0x200000d4
 800146c:	200000d1 	.word	0x200000d1
 8001470:	20000494 	.word	0x20000494
 8001474:	2000023c 	.word	0x2000023c

08001478 <CenLoc_LockSequence>:
/***********************************************************************************
* Function: CenLoc_LockSequence													   *
* Description: Process the lock sequence.								 		   *
************************************************************************************/
VOID CenLoc_LockSequence()
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	/* Process follow me home state.*/
	CenLoc_FollowMeHome();
 800147c:	f7ff ff32 	bl	80012e4 <CenLoc_FollowMeHome>
	/* If the central lock has been on previously
	 * and the variable related to the state of the timer is less than the value of
	 * how many times the hazard lights should turn on on locking, proceed with the processing. */
	if(CenLoc_BlinkCounter <= 1 && localPreviousState == STD_HIGH)
 8001480:	4b32      	ldr	r3, [pc, #200]	; (800154c <CenLoc_LockSequence+0xd4>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d84d      	bhi.n	8001524 <CenLoc_LockSequence+0xac>
 8001488:	4b31      	ldr	r3, [pc, #196]	; (8001550 <CenLoc_LockSequence+0xd8>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d149      	bne.n	8001524 <CenLoc_LockSequence+0xac>
	{
		/* On and off period for the hazard lights and buzzer is defined in the OS timer start call. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8001490:	4b30      	ldr	r3, [pc, #192]	; (8001554 <CenLoc_LockSequence+0xdc>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001498:	4618      	mov	r0, r3
 800149a:	f00d f8d9 	bl	800e650 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		/* Start the OS timer for the follow me home. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_FollowMeHome_TimerHandle) == 0)
 800149e:	4b2e      	ldr	r3, [pc, #184]	; (8001558 <CenLoc_LockSequence+0xe0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f009 f81f 	bl	800a4e6 <osTimerIsRunning>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d106      	bne.n	80014bc <CenLoc_LockSequence+0x44>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_FollowMeHome_TimerHandle, 20000);
 80014ae:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <CenLoc_LockSequence+0xe0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f644 6120 	movw	r1, #20000	; 0x4e20
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00d f8ca 	bl	800e650 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		{
			/* do nothing */
		}
		/* Set the follow me home timer state variable to one to prevent activation of the follow me home
		 * when it is not requested. Upon expiration, the timer callback increments this variable. */
		CenLoc_FollowMeHomeCounter = 1;
 80014bc:	4b27      	ldr	r3, [pc, #156]	; (800155c <CenLoc_LockSequence+0xe4>)
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(&CenLoc_FollowMeHomeCounter);
 80014c2:	4826      	ldr	r0, [pc, #152]	; (800155c <CenLoc_LockSequence+0xe4>)
 80014c4:	f00c fe98 	bl	800e1f8 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		/* Process the on off states of the hazard lights and buzzer. */
		switch(CenLoc_BlinkCounter)
 80014c8:	4b20      	ldr	r3, [pc, #128]	; (800154c <CenLoc_LockSequence+0xd4>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <CenLoc_LockSequence+0x5e>
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d011      	beq.n	80014f8 <CenLoc_LockSequence+0x80>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
				localPreviousState = STD_LOW;
				break;
			default:
				break;
 80014d4:	e024      	b.n	8001520 <CenLoc_LockSequence+0xa8>
				CenLoc_BlinkState = STD_HIGH;
 80014d6:	4b22      	ldr	r3, [pc, #136]	; (8001560 <CenLoc_LockSequence+0xe8>)
 80014d8:	2201      	movs	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80014dc:	2108      	movs	r1, #8
 80014de:	4821      	ldr	r0, [pc, #132]	; (8001564 <CenLoc_LockSequence+0xec>)
 80014e0:	f00c fef4 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80014e4:	210c      	movs	r1, #12
 80014e6:	481f      	ldr	r0, [pc, #124]	; (8001564 <CenLoc_LockSequence+0xec>)
 80014e8:	f00c fef0 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 80014ec:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <CenLoc_LockSequence+0xe8>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 f8c9 	bl	8001688 <CenLoc_ToggleBuzzer>
				break;
 80014f6:	e013      	b.n	8001520 <CenLoc_LockSequence+0xa8>
				CenLoc_BlinkState = STD_LOW;
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <CenLoc_LockSequence+0xe8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80014fe:	2108      	movs	r1, #8
 8001500:	4818      	ldr	r0, [pc, #96]	; (8001564 <CenLoc_LockSequence+0xec>)
 8001502:	f00c fee3 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001506:	210c      	movs	r1, #12
 8001508:	4816      	ldr	r0, [pc, #88]	; (8001564 <CenLoc_LockSequence+0xec>)
 800150a:	f00c fedf 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <CenLoc_LockSequence+0xe8>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f8b8 	bl	8001688 <CenLoc_ToggleBuzzer>
				localPreviousState = STD_LOW;
 8001518:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <CenLoc_LockSequence+0xd8>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
				break;
 800151e:	bf00      	nop
		switch(CenLoc_BlinkCounter)
 8001520:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
}
 8001522:	e011      	b.n	8001548 <CenLoc_LockSequence+0xd0>
	else if(CenLoc_BlinkCounter == 2)
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <CenLoc_LockSequence+0xd4>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d10d      	bne.n	8001548 <CenLoc_LockSequence+0xd0>
		CenLoc_BlinkState = 2;
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <CenLoc_LockSequence+0xe8>)
 800152e:	2202      	movs	r2, #2
 8001530:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter = 4;
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <CenLoc_LockSequence+0xd4>)
 8001534:	2204      	movs	r2, #4
 8001536:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(&CenLoc_BlinkCounter);
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <CenLoc_LockSequence+0xd4>)
 800153a:	f00c fe2d 	bl	800e198 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <CenLoc_LockSequence+0xf0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f00d f891 	bl	800e66a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200000d2 	.word	0x200000d2
 8001550:	200000d7 	.word	0x200000d7
 8001554:	2000024c 	.word	0x2000024c
 8001558:	20000248 	.word	0x20000248
 800155c:	200000d4 	.word	0x200000d4
 8001560:	200000d1 	.word	0x200000d1
 8001564:	20000494 	.word	0x20000494
 8001568:	2000023c 	.word	0x2000023c

0800156c <CenLoc_ControlAlarmLed>:
/***********************************************************************************
* Function: CenLoc_ControlAlarmLed												   *
* Description: Controls the security alarm LED 		   							   *
************************************************************************************/
VOID CenLoc_ControlAlarmLed()
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	/* Check if the central lock state is set to high. */
	if(CenLoc_CurrentState == STD_HIGH)
 8001570:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <CenLoc_ControlAlarmLed+0xc4>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d10b      	bne.n	8001590 <CenLoc_ControlAlarmLed+0x24>
	{
		/* Set the security alarm LED to off. */
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 8001578:	2000      	movs	r0, #0
 800157a:	f000 ff71 	bl	8002460 <SecAlm_ToggleAlarmLed>
		/* Set the timer flag to 0. */
		CenLoc_TurnOnLedCounter = STD_LOW;
 800157e:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <CenLoc_ControlAlarmLed+0xc8>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
		/* Stop the timer related to the LED cyclic trigger. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 8001584:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <CenLoc_ControlAlarmLed+0xcc>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f00d f86e 	bl	800e66a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		else
		{
			/* do nothing */
		}
	}
}
 800158e:	e04c      	b.n	800162a <CenLoc_ControlAlarmLed+0xbe>
	else if(CenLoc_CurrentState == STD_LOW)
 8001590:	4b27      	ldr	r3, [pc, #156]	; (8001630 <CenLoc_ControlAlarmLed+0xc4>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d148      	bne.n	800162a <CenLoc_ControlAlarmLed+0xbe>
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLed_TurnOnCyclic_TimerHandle) == 0 && Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLedTurnOn_TimerHandle) == 0)
 8001598:	4b28      	ldr	r3, [pc, #160]	; (800163c <CenLoc_ControlAlarmLed+0xd0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f008 ffa2 	bl	800a4e6 <osTimerIsRunning>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10e      	bne.n	80015c6 <CenLoc_ControlAlarmLed+0x5a>
 80015a8:	4b23      	ldr	r3, [pc, #140]	; (8001638 <CenLoc_ControlAlarmLed+0xcc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f008 ff9a 	bl	800a4e6 <osTimerIsRunning>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d106      	bne.n	80015c6 <CenLoc_ControlAlarmLed+0x5a>
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmLed_TurnOnCyclic_TimerHandle, 3750);
 80015b8:	4b20      	ldr	r3, [pc, #128]	; (800163c <CenLoc_ControlAlarmLed+0xd0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f640 61a6 	movw	r1, #3750	; 0xea6
 80015c0:	4618      	mov	r0, r3
 80015c2:	f00d f845 	bl	800e650 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		if(CenLoc_CyclicAlarmCounter == 1)
 80015c6:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <CenLoc_ControlAlarmLed+0xd4>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d12d      	bne.n	800162a <CenLoc_ControlAlarmLed+0xbe>
			if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLedTurnOn_TimerHandle) == 0)
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <CenLoc_ControlAlarmLed+0xcc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f008 ff87 	bl	800a4e6 <osTimerIsRunning>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d105      	bne.n	80015ea <CenLoc_ControlAlarmLed+0x7e>
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmLedTurnOn_TimerHandle, 250);
 80015de:	4b16      	ldr	r3, [pc, #88]	; (8001638 <CenLoc_ControlAlarmLed+0xcc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	21fa      	movs	r1, #250	; 0xfa
 80015e4:	4618      	mov	r0, r3
 80015e6:	f00d f833 	bl	800e650 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
			if(CenLoc_TurnOnLedCounter < 1)
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <CenLoc_ControlAlarmLed+0xc8>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d103      	bne.n	80015fa <CenLoc_ControlAlarmLed+0x8e>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_HIGH);
 80015f2:	2001      	movs	r0, #1
 80015f4:	f000 ff34 	bl	8002460 <SecAlm_ToggleAlarmLed>
}
 80015f8:	e017      	b.n	800162a <CenLoc_ControlAlarmLed+0xbe>
			else if(CenLoc_TurnOnLedCounter == 1)
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <CenLoc_ControlAlarmLed+0xc8>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d113      	bne.n	800162a <CenLoc_ControlAlarmLed+0xbe>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 8001602:	2000      	movs	r0, #0
 8001604:	f000 ff2c 	bl	8002460 <SecAlm_ToggleAlarmLed>
				CenLoc_TurnOnLedCounter = 0;
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <CenLoc_ControlAlarmLed+0xc8>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
				CenLoc_CyclicAlarmCounter = 0;
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <CenLoc_ControlAlarmLed+0xd4>)
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
				Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(&CenLoc_CyclicAlarmCounter);
 8001614:	480a      	ldr	r0, [pc, #40]	; (8001640 <CenLoc_ControlAlarmLed+0xd4>)
 8001616:	f00c fdcf 	bl	800e1b8 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>
				Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(&CenLoc_TurnOnLedCounter);
 800161a:	4806      	ldr	r0, [pc, #24]	; (8001634 <CenLoc_ControlAlarmLed+0xc8>)
 800161c:	f00c fddc 	bl	800e1d8 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <CenLoc_ControlAlarmLed+0xcc>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f00d f820 	bl	800e66a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200000ce 	.word	0x200000ce
 8001634:	200000d5 	.word	0x200000d5
 8001638:	20000244 	.word	0x20000244
 800163c:	20000240 	.word	0x20000240
 8001640:	200000d3 	.word	0x200000d3

08001644 <CenLoc_LockUnlockStates>:
/***********************************************************************************
* Function: CenLoc_LockUnlockStates												   *
* Description: Check for the state of the central lock.					 		   *
************************************************************************************/
VOID CenLoc_LockUnlockStates()
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	/* If the central lock state is set to high and the security alarm is set to off. */
	if(CenLoc_CurrentState == STD_HIGH && Rte_P_SecAlm_SecAlmPort_SecAlm_Trigger == STD_LOW)
 8001648:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <CenLoc_LockUnlockStates+0x3c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d108      	bne.n	8001662 <CenLoc_LockUnlockStates+0x1e>
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <CenLoc_LockUnlockStates+0x40>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d104      	bne.n	8001662 <CenLoc_LockUnlockStates+0x1e>
	{
		/* Perform the related activities. */
		CenLoc_UnlockSequence();
 8001658:	f7ff fe68 	bl	800132c <CenLoc_UnlockSequence>
		CenLoc_ControlAlarmLed();
 800165c:	f7ff ff86 	bl	800156c <CenLoc_ControlAlarmLed>
	}
	else
	{
		/* do nothing */
	}
}
 8001660:	e00b      	b.n	800167a <CenLoc_LockUnlockStates+0x36>
	else if(CenLoc_CurrentState == STD_LOW && Rte_P_SecAlm_SecAlmPort_SecAlm_Trigger == STD_LOW)
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <CenLoc_LockUnlockStates+0x3c>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d107      	bne.n	800167a <CenLoc_LockUnlockStates+0x36>
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <CenLoc_LockUnlockStates+0x40>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d103      	bne.n	800167a <CenLoc_LockUnlockStates+0x36>
		CenLoc_LockSequence();
 8001672:	f7ff ff01 	bl	8001478 <CenLoc_LockSequence>
		CenLoc_ControlAlarmLed();
 8001676:	f7ff ff79 	bl	800156c <CenLoc_ControlAlarmLed>
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200000ce 	.word	0x200000ce
 8001684:	20000114 	.word	0x20000114

08001688 <CenLoc_ToggleBuzzer>:
/***********************************************************************************
* Function: CenLoc_ToggleBuzzer													   *
* Description: Trigger central lock buzzer. 		   							   *
************************************************************************************/
VOID CenLoc_ToggleBuzzer(uint8 PinState)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(CENLOC_BUZZER_PORT, CENLOC_BUZZER_PIN, PinState);
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	461a      	mov	r2, r3
 8001696:	2104      	movs	r1, #4
 8001698:	4803      	ldr	r0, [pc, #12]	; (80016a8 <CenLoc_ToggleBuzzer+0x20>)
 800169a:	f00c ffc7 	bl	800e62c <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40020400 	.word	0x40020400

080016ac <CenLoc_MainFunction>:
/***********************************************************************************
* Function: CenLoc_MainFunction													   *
* Description: Central lock main function. Process the states of the application.  *
************************************************************************************/
VOID CenLoc_MainFunction()
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	CenLoc_State();
 80016b0:	f7ff fdc8 	bl	8001244 <CenLoc_State>
	CenLoc_LockUnlockStates();
 80016b4:	f7ff ffc6 	bl	8001644 <CenLoc_LockUnlockStates>
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <DiagCtrl_MainFunction>:
/***********************************************************************************
* Function: DiagCtrl_MainFunction										   		   *
* Description: Application main function.		 		   						   *
************************************************************************************/
VOID DiagCtrl_MainFunction()
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	DiagCtrl_ProcessRequestedData();
 80016c0:	f000 f802 	bl	80016c8 <DiagCtrl_ProcessRequestedData>
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <DiagCtrl_ProcessRequestedData>:
/***********************************************************************************
* Function: DiagCtrl_ProcessRequestedData										   *
* Description: Process the measured requested data.		 		   				   *
************************************************************************************/
VOID DiagCtrl_ProcessRequestedData()
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	static uint32 VibrationSensor_RequestedValue = 0;
	static uint8 BtcUart_FaultValue_One = 0;
	static uint8 BtcUart_FaultValue_Two = 0;
	static uint8 BtcUart_FaultValue_Three = 0;
	static uint8 BtcUart_FaultValue_Four = 0;
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&LightSensor_RequestedValue, 0);
 80016cc:	2100      	movs	r1, #0
 80016ce:	4824      	ldr	r0, [pc, #144]	; (8001760 <DiagCtrl_ProcessRequestedData+0x98>)
 80016d0:	f00c fe4a 	bl	800e368 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&VibrationSensor_RequestedValue, 1);
 80016d4:	2101      	movs	r1, #1
 80016d6:	4823      	ldr	r0, [pc, #140]	; (8001764 <DiagCtrl_ProcessRequestedData+0x9c>)
 80016d8:	f00c fe46 	bl	800e368 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_One, 17);
 80016dc:	2111      	movs	r1, #17
 80016de:	4822      	ldr	r0, [pc, #136]	; (8001768 <DiagCtrl_ProcessRequestedData+0xa0>)
 80016e0:	f00c fcce 	bl	800e080 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Two, 18);
 80016e4:	2112      	movs	r1, #18
 80016e6:	4821      	ldr	r0, [pc, #132]	; (800176c <DiagCtrl_ProcessRequestedData+0xa4>)
 80016e8:	f00c fcca 	bl	800e080 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Three, 19);
 80016ec:	2113      	movs	r1, #19
 80016ee:	4820      	ldr	r0, [pc, #128]	; (8001770 <DiagCtrl_ProcessRequestedData+0xa8>)
 80016f0:	f00c fcc6 	bl	800e080 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Four, 20);
 80016f4:	2114      	movs	r1, #20
 80016f6:	481f      	ldr	r0, [pc, #124]	; (8001774 <DiagCtrl_ProcessRequestedData+0xac>)
 80016f8:	f00c fcc2 	bl	800e080 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	if(BtcUart_FaultValue_One != 0 ||
 80016fc:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <DiagCtrl_ProcessRequestedData+0xa0>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d10b      	bne.n	800171c <DiagCtrl_ProcessRequestedData+0x54>
			BtcUart_FaultValue_Two != 0 ||
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <DiagCtrl_ProcessRequestedData+0xa4>)
 8001706:	781b      	ldrb	r3, [r3, #0]
	if(BtcUart_FaultValue_One != 0 ||
 8001708:	2b00      	cmp	r3, #0
 800170a:	d107      	bne.n	800171c <DiagCtrl_ProcessRequestedData+0x54>
			BtcUart_FaultValue_Three != 0 ||
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <DiagCtrl_ProcessRequestedData+0xa8>)
 800170e:	781b      	ldrb	r3, [r3, #0]
			BtcUart_FaultValue_Two != 0 ||
 8001710:	2b00      	cmp	r3, #0
 8001712:	d103      	bne.n	800171c <DiagCtrl_ProcessRequestedData+0x54>
			BtcUart_FaultValue_Four != 0)
 8001714:	4b17      	ldr	r3, [pc, #92]	; (8001774 <DiagCtrl_ProcessRequestedData+0xac>)
 8001716:	781b      	ldrb	r3, [r3, #0]
			BtcUart_FaultValue_Three != 0 ||
 8001718:	2b00      	cmp	r3, #0
 800171a:	d002      	beq.n	8001722 <DiagCtrl_ProcessRequestedData+0x5a>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_BLUETOOTH_MODULE_MALFUNCTION);
 800171c:	2022      	movs	r0, #34	; 0x22
 800171e:	f002 fa0d 	bl	8003b3c <Dem_ReceiveFault>
	}
	else
	{
		/* do nothing */
	}
	if(LightSensor_RequestedValue < 100)
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <DiagCtrl_ProcessRequestedData+0x98>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b63      	cmp	r3, #99	; 0x63
 8001728:	d802      	bhi.n	8001730 <DiagCtrl_ProcessRequestedData+0x68>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_LIGHT_SENSOR_MALFUNCTION);
 800172a:	2003      	movs	r0, #3
 800172c:	f002 fa06 	bl	8003b3c <Dem_ReceiveFault>
	}
	else
	{
		/* do nothing */
	}
	if(VibrationSensor_RequestedValue < 100)
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <DiagCtrl_ProcessRequestedData+0x9c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b63      	cmp	r3, #99	; 0x63
 8001736:	d802      	bhi.n	800173e <DiagCtrl_ProcessRequestedData+0x76>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_VIBRATION_SENSOR_MALFUNCTION);
 8001738:	2013      	movs	r0, #19
 800173a:	f002 f9ff 	bl	8003b3c <Dem_ReceiveFault>
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree == 0)
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <DiagCtrl_ProcessRequestedData+0xb0>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d102      	bne.n	800174c <DiagCtrl_ProcessRequestedData+0x84>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION);
 8001746:	2012      	movs	r0, #18
 8001748:	f002 f9f8 	bl	8003b3c <Dem_ReceiveFault>
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour == 0)
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <DiagCtrl_ProcessRequestedData+0xb4>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <DiagCtrl_ProcessRequestedData+0x92>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION);
 8001754:	2002      	movs	r0, #2
 8001756:	f002 f9f1 	bl	8003b3c <Dem_ReceiveFault>
	}
	else
	{
		/* do nothing */
	}
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200000d8 	.word	0x200000d8
 8001764:	200000dc 	.word	0x200000dc
 8001768:	200000e0 	.word	0x200000e0
 800176c:	200000e1 	.word	0x200000e1
 8001770:	200000e2 	.word	0x200000e2
 8001774:	200000e3 	.word	0x200000e3
 8001778:	200006c1 	.word	0x200006c1
 800177c:	200006d1 	.word	0x200006d1

08001780 <ExtLights_TurnSignalHazardLight>:
/***********************************************************************************
* Function: ExtLights_TurnSignalHazardLight										   *
* Description: Process the turn signals and hazard lights states. 		   		   *
************************************************************************************/
VOID ExtLights_TurnSignalHazardLight()
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	/* If the turn signal left is set on. */
	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8001784:	4b4c      	ldr	r3, [pc, #304]	; (80018b8 <ExtLights_TurnSignalHazardLight+0x138>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d123      	bne.n	80017d4 <ExtLights_TurnSignalHazardLight+0x54>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 800178c:	4b4b      	ldr	r3, [pc, #300]	; (80018bc <ExtLights_TurnSignalHazardLight+0x13c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f008 fea8 	bl	800a4e6 <osTimerIsRunning>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d106      	bne.n	80017aa <ExtLights_TurnSignalHazardLight+0x2a>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 800179c:	4b47      	ldr	r3, [pc, #284]	; (80018bc <ExtLights_TurnSignalHazardLight+0x13c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80017a4:	4618      	mov	r0, r3
 80017a6:	f00c ff53 	bl	800e650 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_LTSFlag % 2 == 1)
 80017aa:	4b45      	ldr	r3, [pc, #276]	; (80018c0 <ExtLights_TurnSignalHazardLight+0x140>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d004      	beq.n	80017c0 <ExtLights_TurnSignalHazardLight+0x40>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80017b6:	2108      	movs	r1, #8
 80017b8:	4842      	ldr	r0, [pc, #264]	; (80018c4 <ExtLights_TurnSignalHazardLight+0x144>)
 80017ba:	f00c fd87 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 80017be:	e009      	b.n	80017d4 <ExtLights_TurnSignalHazardLight+0x54>
		}
		else if(ExtLights_LTSFlag % 2 == 0)
 80017c0:	4b3f      	ldr	r3, [pc, #252]	; (80018c0 <ExtLights_TurnSignalHazardLight+0x140>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d103      	bne.n	80017d4 <ExtLights_TurnSignalHazardLight+0x54>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80017cc:	2108      	movs	r1, #8
 80017ce:	483d      	ldr	r0, [pc, #244]	; (80018c4 <ExtLights_TurnSignalHazardLight+0x144>)
 80017d0:	f00c fd89 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* If the turn signal right is set on. */
	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 80017d4:	4b3c      	ldr	r3, [pc, #240]	; (80018c8 <ExtLights_TurnSignalHazardLight+0x148>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d123      	bne.n	8001824 <ExtLights_TurnSignalHazardLight+0xa4>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 80017dc:	4b37      	ldr	r3, [pc, #220]	; (80018bc <ExtLights_TurnSignalHazardLight+0x13c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f008 fe80 	bl	800a4e6 <osTimerIsRunning>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d106      	bne.n	80017fa <ExtLights_TurnSignalHazardLight+0x7a>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 80017ec:	4b33      	ldr	r3, [pc, #204]	; (80018bc <ExtLights_TurnSignalHazardLight+0x13c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80017f4:	4618      	mov	r0, r3
 80017f6:	f00c ff2b 	bl	800e650 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_RTSFlag % 2 == 1)
 80017fa:	4b34      	ldr	r3, [pc, #208]	; (80018cc <ExtLights_TurnSignalHazardLight+0x14c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d004      	beq.n	8001810 <ExtLights_TurnSignalHazardLight+0x90>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001806:	210c      	movs	r1, #12
 8001808:	482e      	ldr	r0, [pc, #184]	; (80018c4 <ExtLights_TurnSignalHazardLight+0x144>)
 800180a:	f00c fd5f 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 800180e:	e009      	b.n	8001824 <ExtLights_TurnSignalHazardLight+0xa4>
		}
		else if(ExtLights_RTSFlag % 2 == 0)
 8001810:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <ExtLights_TurnSignalHazardLight+0x14c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d103      	bne.n	8001824 <ExtLights_TurnSignalHazardLight+0xa4>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800181c:	210c      	movs	r1, #12
 800181e:	4829      	ldr	r0, [pc, #164]	; (80018c4 <ExtLights_TurnSignalHazardLight+0x144>)
 8001820:	f00c fd61 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* If the hazard light is set on. */
	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 8001824:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <ExtLights_TurnSignalHazardLight+0x150>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d12b      	bne.n	8001884 <ExtLights_TurnSignalHazardLight+0x104>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 800182c:	4b23      	ldr	r3, [pc, #140]	; (80018bc <ExtLights_TurnSignalHazardLight+0x13c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f008 fe58 	bl	800a4e6 <osTimerIsRunning>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d106      	bne.n	800184a <ExtLights_TurnSignalHazardLight+0xca>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 800183c:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <ExtLights_TurnSignalHazardLight+0x13c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001844:	4618      	mov	r0, r3
 8001846:	f00c ff03 	bl	800e650 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_HLFlag % 2 == 1)
 800184a:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <ExtLights_TurnSignalHazardLight+0x154>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d008      	beq.n	8001868 <ExtLights_TurnSignalHazardLight+0xe8>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001856:	2108      	movs	r1, #8
 8001858:	481a      	ldr	r0, [pc, #104]	; (80018c4 <ExtLights_TurnSignalHazardLight+0x144>)
 800185a:	f00c fd37 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800185e:	210c      	movs	r1, #12
 8001860:	4818      	ldr	r0, [pc, #96]	; (80018c4 <ExtLights_TurnSignalHazardLight+0x144>)
 8001862:	f00c fd33 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001866:	e00d      	b.n	8001884 <ExtLights_TurnSignalHazardLight+0x104>
		}
		else if(ExtLights_HLFlag % 2 == 0)
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <ExtLights_TurnSignalHazardLight+0x154>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b00      	cmp	r3, #0
 8001872:	d107      	bne.n	8001884 <ExtLights_TurnSignalHazardLight+0x104>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001874:	2108      	movs	r1, #8
 8001876:	4813      	ldr	r0, [pc, #76]	; (80018c4 <ExtLights_TurnSignalHazardLight+0x144>)
 8001878:	f00c fd35 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800187c:	210c      	movs	r1, #12
 800187e:	4811      	ldr	r0, [pc, #68]	; (80018c4 <ExtLights_TurnSignalHazardLight+0x144>)
 8001880:	f00c fd31 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Only one pair of turn signals can be on at a time. Set on one pair and the other off. */
	if(ExtLights_TurnSignalRight_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <ExtLights_TurnSignalHazardLight+0x148>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d107      	bne.n	800189c <ExtLights_TurnSignalHazardLight+0x11c>
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <ExtLights_TurnSignalHazardLight+0x150>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d103      	bne.n	800189c <ExtLights_TurnSignalHazardLight+0x11c>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001894:	210c      	movs	r1, #12
 8001896:	480b      	ldr	r0, [pc, #44]	; (80018c4 <ExtLights_TurnSignalHazardLight+0x144>)
 8001898:	f00c fd25 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Only one pair of turn signals can be on at a time. Set on one pair and the other off. */
	if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <ExtLights_TurnSignalHazardLight+0x138>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d107      	bne.n	80018b4 <ExtLights_TurnSignalHazardLight+0x134>
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <ExtLights_TurnSignalHazardLight+0x150>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d103      	bne.n	80018b4 <ExtLights_TurnSignalHazardLight+0x134>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80018ac:	2108      	movs	r1, #8
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <ExtLights_TurnSignalHazardLight+0x144>)
 80018b0:	f00c fd19 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	}
	else
	{
		/* do nothing */
	}
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200000ea 	.word	0x200000ea
 80018bc:	2000024c 	.word	0x2000024c
 80018c0:	200000f8 	.word	0x200000f8
 80018c4:	20000494 	.word	0x20000494
 80018c8:	200000eb 	.word	0x200000eb
 80018cc:	200000f4 	.word	0x200000f4
 80018d0:	200000ee 	.word	0x200000ee
 80018d4:	200000fc 	.word	0x200000fc

080018d8 <ExtLights_PrevStateTSHL>:
* Function: ExtLights_PrevStateTSHL										           *
* Description: Checks the current state and previous state of turn signals and     *
* 			   hazard lights. 		   											   *
************************************************************************************/
VOID ExtLights_PrevStateTSHL()
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	/* Change the variables related to states. */
	if(ExtLights_TurnSignalLeft_CurrentState != ExtLights_LTS_PrevState)
 80018dc:	4b18      	ldr	r3, [pc, #96]	; (8001940 <ExtLights_PrevStateTSHL+0x68>)
 80018de:	781a      	ldrb	r2, [r3, #0]
 80018e0:	4b18      	ldr	r3, [pc, #96]	; (8001944 <ExtLights_PrevStateTSHL+0x6c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d009      	beq.n	80018fc <ExtLights_PrevStateTSHL+0x24>
	{
		ExtLights_LTS_PrevState = ExtLights_TurnSignalLeft_CurrentState;
 80018e8:	4b15      	ldr	r3, [pc, #84]	; (8001940 <ExtLights_PrevStateTSHL+0x68>)
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	4b15      	ldr	r3, [pc, #84]	; (8001944 <ExtLights_PrevStateTSHL+0x6c>)
 80018ee:	701a      	strb	r2, [r3, #0]
		ExtLights_LTSFlag = 0;
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <ExtLights_PrevStateTSHL+0x70>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_Lts_Counter(&ExtLights_LTSFlag);
 80018f6:	4814      	ldr	r0, [pc, #80]	; (8001948 <ExtLights_PrevStateTSHL+0x70>)
 80018f8:	f00c fc8e 	bl	800e218 <Rte_Write_Os_R_OsPort_Os_Lts_Counter>
	else
	{
		/* do nothing */
	}
	/* Change the variables related to states. */
	if(ExtLights_TurnSignalRight_CurrentState != ExtLights_RTS_PrevState)
 80018fc:	4b13      	ldr	r3, [pc, #76]	; (800194c <ExtLights_PrevStateTSHL+0x74>)
 80018fe:	781a      	ldrb	r2, [r3, #0]
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <ExtLights_PrevStateTSHL+0x78>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d009      	beq.n	800191c <ExtLights_PrevStateTSHL+0x44>
	{
		ExtLights_RTS_PrevState = ExtLights_TurnSignalRight_CurrentState;
 8001908:	4b10      	ldr	r3, [pc, #64]	; (800194c <ExtLights_PrevStateTSHL+0x74>)
 800190a:	781a      	ldrb	r2, [r3, #0]
 800190c:	4b10      	ldr	r3, [pc, #64]	; (8001950 <ExtLights_PrevStateTSHL+0x78>)
 800190e:	701a      	strb	r2, [r3, #0]
		ExtLights_RTSFlag = 0;
 8001910:	4b10      	ldr	r3, [pc, #64]	; (8001954 <ExtLights_PrevStateTSHL+0x7c>)
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_Rts_Counter(&ExtLights_RTSFlag);
 8001916:	480f      	ldr	r0, [pc, #60]	; (8001954 <ExtLights_PrevStateTSHL+0x7c>)
 8001918:	f00c fc8e 	bl	800e238 <Rte_Write_Os_R_OsPort_Os_Rts_Counter>
	else
	{
		/* do nothing */
	}
	/* Change the variables related to states. */
	if(ExtLights_HazardLight_CurrentState != ExtLights_HL_PrevState)
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <ExtLights_PrevStateTSHL+0x80>)
 800191e:	781a      	ldrb	r2, [r3, #0]
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <ExtLights_PrevStateTSHL+0x84>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d009      	beq.n	800193c <ExtLights_PrevStateTSHL+0x64>
	{
		ExtLights_HL_PrevState = ExtLights_HazardLight_CurrentState;
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <ExtLights_PrevStateTSHL+0x80>)
 800192a:	781a      	ldrb	r2, [r3, #0]
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <ExtLights_PrevStateTSHL+0x84>)
 800192e:	701a      	strb	r2, [r3, #0]
		ExtLights_HLFlag = 0;
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <ExtLights_PrevStateTSHL+0x88>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_HL_Counter(&ExtLights_HLFlag);
 8001936:	480a      	ldr	r0, [pc, #40]	; (8001960 <ExtLights_PrevStateTSHL+0x88>)
 8001938:	f00c fc8e 	bl	800e258 <Rte_Write_Os_R_OsPort_Os_HL_Counter>
	}
	else
	{
		/* do nothing */
	}
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200000ea 	.word	0x200000ea
 8001944:	200000f1 	.word	0x200000f1
 8001948:	200000f8 	.word	0x200000f8
 800194c:	200000eb 	.word	0x200000eb
 8001950:	200000f0 	.word	0x200000f0
 8001954:	200000f4 	.word	0x200000f4
 8001958:	200000ee 	.word	0x200000ee
 800195c:	200000f2 	.word	0x200000f2
 8001960:	200000fc 	.word	0x200000fc

08001964 <ExtLights_LightState>:
/***********************************************************************************
* Function: ExtLights_LightState										   		   *
* Description: Controls the lights states.								 		   *
************************************************************************************/
VOID ExtLights_LightState()
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	/* Process turn signals state. */
	ExtLights_PrevStateTSHL();
 8001968:	f7ff ffb6 	bl	80018d8 <ExtLights_PrevStateTSHL>
	/* Follow me home is on, then turn on the respective lights. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 800196c:	4b88      	ldr	r3, [pc, #544]	; (8001b90 <ExtLights_LightState+0x22c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d110      	bne.n	8001996 <ExtLights_LightState+0x32>
	{
		ExtLights_LightSwitchMode();
 8001974:	f000 f978 	bl	8001c68 <ExtLights_LightSwitchMode>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001978:	2100      	movs	r1, #0
 800197a:	4886      	ldr	r0, [pc, #536]	; (8001b94 <ExtLights_LightState+0x230>)
 800197c:	f00c fca6 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001980:	2104      	movs	r1, #4
 8001982:	4884      	ldr	r0, [pc, #528]	; (8001b94 <ExtLights_LightState+0x230>)
 8001984:	f00c fca2 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		ExtLights_LowBeam_CurrentState = STD_HIGH;
 8001988:	4b83      	ldr	r3, [pc, #524]	; (8001b98 <ExtLights_LightState+0x234>)
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
		ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 800198e:	4b83      	ldr	r3, [pc, #524]	; (8001b9c <ExtLights_LightState+0x238>)
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
 8001994:	e017      	b.n	80019c6 <ExtLights_LightState+0x62>
	}/* Follow me home is off, turn off the lights.*/
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
 8001996:	4b7e      	ldr	r3, [pc, #504]	; (8001b90 <ExtLights_LightState+0x22c>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d113      	bne.n	80019c6 <ExtLights_LightState+0x62>
	{
		ExtLights_LightSwitchMode();
 800199e:	f000 f963 	bl	8001c68 <ExtLights_LightSwitchMode>
		if(ExtLights_LightsSwitch_CurrentState == STD_LOW)
 80019a2:	4b7f      	ldr	r3, [pc, #508]	; (8001ba0 <ExtLights_LightState+0x23c>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10d      	bne.n	80019c6 <ExtLights_LightState+0x62>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80019aa:	2100      	movs	r1, #0
 80019ac:	4879      	ldr	r0, [pc, #484]	; (8001b94 <ExtLights_LightState+0x230>)
 80019ae:	f00c fc9a 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 80019b2:	2104      	movs	r1, #4
 80019b4:	4877      	ldr	r0, [pc, #476]	; (8001b94 <ExtLights_LightState+0x230>)
 80019b6:	f00c fc96 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 80019ba:	4b77      	ldr	r3, [pc, #476]	; (8001b98 <ExtLights_LightState+0x234>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 80019c0:	4b76      	ldr	r3, [pc, #472]	; (8001b9c <ExtLights_LightState+0x238>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If any light state is set to on, then stop the follow me home. */
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 80019c6:	4b77      	ldr	r3, [pc, #476]	; (8001ba4 <ExtLights_LightState+0x240>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d017      	beq.n	80019fe <ExtLights_LightState+0x9a>
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 80019ce:	4b76      	ldr	r3, [pc, #472]	; (8001ba8 <ExtLights_LightState+0x244>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d013      	beq.n	80019fe <ExtLights_LightState+0x9a>
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 80019d6:	4b72      	ldr	r3, [pc, #456]	; (8001ba0 <ExtLights_LightState+0x23c>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10f      	bne.n	80019fe <ExtLights_LightState+0x9a>
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 80019de:	4b73      	ldr	r3, [pc, #460]	; (8001bac <ExtLights_LightState+0x248>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d00b      	beq.n	80019fe <ExtLights_LightState+0x9a>
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 80019e6:	4b72      	ldr	r3, [pc, #456]	; (8001bb0 <ExtLights_LightState+0x24c>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d007      	beq.n	80019fe <ExtLights_LightState+0x9a>
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 80019ee:	4b71      	ldr	r3, [pc, #452]	; (8001bb4 <ExtLights_LightState+0x250>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d003      	beq.n	80019fe <ExtLights_LightState+0x9a>
		ExtLights_HazardLight_CurrentState == STD_HIGH)
 80019f6:	4b70      	ldr	r3, [pc, #448]	; (8001bb8 <ExtLights_LightState+0x254>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d11a      	bne.n	8001a34 <ExtLights_LightState+0xd0>
	{
		if(ExtLights_LightsSwitch_CurrentState == STD_LOW)
 80019fe:	4b68      	ldr	r3, [pc, #416]	; (8001ba0 <ExtLights_LightState+0x23c>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d116      	bne.n	8001a34 <ExtLights_LightState+0xd0>
		{
			Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(STD_LOW);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f00c fce2 	bl	800e3d0 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>
			Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter((uint8*)2);
 8001a0c:	2002      	movs	r0, #2
 8001a0e:	f00c fb83 	bl	800e118 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>
			Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter((uint8*)2);
 8001a12:	2002      	movs	r0, #2
 8001a14:	f00c fbf0 	bl	800e1f8 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001a18:	2100      	movs	r1, #0
 8001a1a:	485e      	ldr	r0, [pc, #376]	; (8001b94 <ExtLights_LightState+0x230>)
 8001a1c:	f00c fc63 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001a20:	2104      	movs	r1, #4
 8001a22:	485c      	ldr	r0, [pc, #368]	; (8001b94 <ExtLights_LightState+0x230>)
 8001a24:	f00c fc5f 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8001a28:	4b5b      	ldr	r3, [pc, #364]	; (8001b98 <ExtLights_LightState+0x234>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001a2e:	4b5b      	ldr	r3, [pc, #364]	; (8001b9c <ExtLights_LightState+0x238>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* Control the turn signals for the central lock lock unlock sequence when requested. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_HIGH)
 8001a34:	4b61      	ldr	r3, [pc, #388]	; (8001bbc <ExtLights_LightState+0x258>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d108      	bne.n	8001a4e <ExtLights_LightState+0xea>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001a3c:	2108      	movs	r1, #8
 8001a3e:	4860      	ldr	r0, [pc, #384]	; (8001bc0 <ExtLights_LightState+0x25c>)
 8001a40:	f00c fc44 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001a44:	210c      	movs	r1, #12
 8001a46:	485e      	ldr	r0, [pc, #376]	; (8001bc0 <ExtLights_LightState+0x25c>)
 8001a48:	f00c fc40 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001a4c:	e016      	b.n	8001a7c <ExtLights_LightState+0x118>
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_LOW)
 8001a4e:	4b5b      	ldr	r3, [pc, #364]	; (8001bbc <ExtLights_LightState+0x258>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d108      	bne.n	8001a68 <ExtLights_LightState+0x104>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001a56:	2108      	movs	r1, #8
 8001a58:	4859      	ldr	r0, [pc, #356]	; (8001bc0 <ExtLights_LightState+0x25c>)
 8001a5a:	f00c fc44 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001a5e:	210c      	movs	r1, #12
 8001a60:	4857      	ldr	r0, [pc, #348]	; (8001bc0 <ExtLights_LightState+0x25c>)
 8001a62:	f00c fc40 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
 8001a66:	e009      	b.n	8001a7c <ExtLights_LightState+0x118>
	}/* Allows for turning on the hazard lights or turn signals independently of other states in the system. */
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 2 || Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 4)
 8001a68:	4b54      	ldr	r3, [pc, #336]	; (8001bbc <ExtLights_LightState+0x258>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d003      	beq.n	8001a78 <ExtLights_LightState+0x114>
 8001a70:	4b52      	ldr	r3, [pc, #328]	; (8001bbc <ExtLights_LightState+0x258>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d101      	bne.n	8001a7c <ExtLights_LightState+0x118>
	{
		ExtLights_TurnSignalHazardLight();
 8001a78:	f7ff fe82 	bl	8001780 <ExtLights_TurnSignalHazardLight>
	else
	{
		/* do nothing */
	}
	/* Turn on/off high beam. */
	if(ExtLights_FlashHighBeam_CurrentState == STD_HIGH)
 8001a7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ba8 <ExtLights_LightState+0x244>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d103      	bne.n	8001a8c <ExtLights_LightState+0x128>
	{
		ExtLights_HighBeam(STD_HIGH);
 8001a84:	2001      	movs	r0, #1
 8001a86:	f000 f9df 	bl	8001e48 <ExtLights_HighBeam>
 8001a8a:	e006      	b.n	8001a9a <ExtLights_LightState+0x136>
	}
	else if(ExtLights_FlashHighBeam_CurrentState == STD_LOW)
 8001a8c:	4b46      	ldr	r3, [pc, #280]	; (8001ba8 <ExtLights_LightState+0x244>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <ExtLights_LightState+0x136>
	{
		ExtLights_HighBeam(STD_LOW);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f000 f9d7 	bl	8001e48 <ExtLights_HighBeam>
	else
	{
		/* do nothing */
	}
	/* Turn on/off high beam. */
	if(ExtLights_HighBeam_CurrentState == STD_HIGH)
 8001a9a:	4b44      	ldr	r3, [pc, #272]	; (8001bac <ExtLights_LightState+0x248>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d103      	bne.n	8001aaa <ExtLights_LightState+0x146>
	{
		ExtLights_HighBeam(STD_HIGH);
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f000 f9d0 	bl	8001e48 <ExtLights_HighBeam>
 8001aa8:	e006      	b.n	8001ab8 <ExtLights_LightState+0x154>
	}
	else if(ExtLights_HighBeam_CurrentState == STD_LOW)
 8001aaa:	4b40      	ldr	r3, [pc, #256]	; (8001bac <ExtLights_LightState+0x248>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <ExtLights_LightState+0x154>
	{
		ExtLights_HighBeam(STD_LOW);
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f000 f9c8 	bl	8001e48 <ExtLights_HighBeam>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the brake lights. */
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH)
 8001ab8:	4b3a      	ldr	r3, [pc, #232]	; (8001ba4 <ExtLights_LightState+0x240>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d111      	bne.n	8001ae4 <ExtLights_LightState+0x180>
	{
		if(ExtLights_BrakeLight_CurrentState != ExtLights_Previous_BrakeLight_CurrentState)
 8001ac0:	4b38      	ldr	r3, [pc, #224]	; (8001ba4 <ExtLights_LightState+0x240>)
 8001ac2:	781a      	ldrb	r2, [r3, #0]
 8001ac4:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <ExtLights_LightState+0x260>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d006      	beq.n	8001ada <ExtLights_LightState+0x176>
		{
			ExtLights_Previous_BrakeLight_CurrentState = ExtLights_BrakeLight_CurrentState;
 8001acc:	4b35      	ldr	r3, [pc, #212]	; (8001ba4 <ExtLights_LightState+0x240>)
 8001ace:	781a      	ldrb	r2, [r3, #0]
 8001ad0:	4b3c      	ldr	r3, [pc, #240]	; (8001bc4 <ExtLights_LightState+0x260>)
 8001ad2:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr2(0);
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f00c fa85 	bl	800dfe4 <Rte_Write_TimH_TimHPort_Tim3Ccr2>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel2);
 8001ada:	2104      	movs	r1, #4
 8001adc:	483a      	ldr	r0, [pc, #232]	; (8001bc8 <ExtLights_LightState+0x264>)
 8001ade:	f00c fbf5 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001ae2:	e014      	b.n	8001b0e <ExtLights_LightState+0x1aa>
	}
	else if(ExtLights_BrakeLight_CurrentState == STD_LOW)
 8001ae4:	4b2f      	ldr	r3, [pc, #188]	; (8001ba4 <ExtLights_LightState+0x240>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d110      	bne.n	8001b0e <ExtLights_LightState+0x1aa>
	{
		if(ExtLights_BrakeLight_CurrentState != ExtLights_Previous_BrakeLight_CurrentState)
 8001aec:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <ExtLights_LightState+0x240>)
 8001aee:	781a      	ldrb	r2, [r3, #0]
 8001af0:	4b34      	ldr	r3, [pc, #208]	; (8001bc4 <ExtLights_LightState+0x260>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d006      	beq.n	8001b06 <ExtLights_LightState+0x1a2>
		{
			ExtLights_Previous_BrakeLight_CurrentState = ExtLights_BrakeLight_CurrentState;
 8001af8:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <ExtLights_LightState+0x240>)
 8001afa:	781a      	ldrb	r2, [r3, #0]
 8001afc:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <ExtLights_LightState+0x260>)
 8001afe:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr2(0);
 8001b00:	2000      	movs	r0, #0
 8001b02:	f00c fa6f 	bl	800dfe4 <Rte_Write_TimH_TimHPort_Tim3Ccr2>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel2);
 8001b06:	2104      	movs	r1, #4
 8001b08:	482f      	ldr	r0, [pc, #188]	; (8001bc8 <ExtLights_LightState+0x264>)
 8001b0a:	f00c fbec 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the rear fog lights. */
	if(ExtLights_RearFogLight_CurrentState == STD_HIGH)
 8001b0e:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <ExtLights_LightState+0x268>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d111      	bne.n	8001b3a <ExtLights_LightState+0x1d6>
	{
		if(ExtLights_RearFogLight_CurrentState != ExtLights_Previous_RearFogLight_CurrentState)
 8001b16:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <ExtLights_LightState+0x268>)
 8001b18:	781a      	ldrb	r2, [r3, #0]
 8001b1a:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <ExtLights_LightState+0x26c>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d006      	beq.n	8001b30 <ExtLights_LightState+0x1cc>
		{
			ExtLights_Previous_RearFogLight_CurrentState = ExtLights_RearFogLight_CurrentState;
 8001b22:	4b2a      	ldr	r3, [pc, #168]	; (8001bcc <ExtLights_LightState+0x268>)
 8001b24:	781a      	ldrb	r2, [r3, #0]
 8001b26:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <ExtLights_LightState+0x26c>)
 8001b28:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr4(0);
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f00c fa7a 	bl	800e024 <Rte_Write_TimH_TimHPort_Tim3Ccr4>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 8001b30:	210c      	movs	r1, #12
 8001b32:	4825      	ldr	r0, [pc, #148]	; (8001bc8 <ExtLights_LightState+0x264>)
 8001b34:	f00c fbca 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001b38:	e014      	b.n	8001b64 <ExtLights_LightState+0x200>
	}
	else if(ExtLights_RearFogLight_CurrentState == STD_LOW)
 8001b3a:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <ExtLights_LightState+0x268>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d110      	bne.n	8001b64 <ExtLights_LightState+0x200>
	{
		if(ExtLights_RearFogLight_CurrentState != ExtLights_Previous_RearFogLight_CurrentState)
 8001b42:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <ExtLights_LightState+0x268>)
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <ExtLights_LightState+0x26c>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d006      	beq.n	8001b5c <ExtLights_LightState+0x1f8>
		{
			ExtLights_Previous_RearFogLight_CurrentState = ExtLights_RearFogLight_CurrentState;
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <ExtLights_LightState+0x268>)
 8001b50:	781a      	ldrb	r2, [r3, #0]
 8001b52:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <ExtLights_LightState+0x26c>)
 8001b54:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr4(0);
 8001b56:	2000      	movs	r0, #0
 8001b58:	f00c fa64 	bl	800e024 <Rte_Write_TimH_TimHPort_Tim3Ccr4>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 8001b5c:	210c      	movs	r1, #12
 8001b5e:	481a      	ldr	r0, [pc, #104]	; (8001bc8 <ExtLights_LightState+0x264>)
 8001b60:	f00c fbc1 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the front fog lights. */
	if(ExtLights_FrontFogLight_CurrentState == STD_HIGH)
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <ExtLights_LightState+0x270>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d137      	bne.n	8001bdc <ExtLights_LightState+0x278>
	{
		if(ExtLights_FrontFogLight_CurrentState != ExtLights_Previous_FrontFogLight_CurrentState)
 8001b6c:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <ExtLights_LightState+0x270>)
 8001b6e:	781a      	ldrb	r2, [r3, #0]
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <ExtLights_LightState+0x274>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d006      	beq.n	8001b86 <ExtLights_LightState+0x222>
		{
			ExtLights_Previous_FrontFogLight_CurrentState = ExtLights_FrontFogLight_CurrentState;
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <ExtLights_LightState+0x270>)
 8001b7a:	781a      	ldrb	r2, [r3, #0]
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <ExtLights_LightState+0x274>)
 8001b7e:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr3(0);
 8001b80:	2000      	movs	r0, #0
 8001b82:	f00c fa3f 	bl	800e004 <Rte_Write_TimH_TimHPort_Tim3Ccr3>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 8001b86:	2108      	movs	r1, #8
 8001b88:	480f      	ldr	r0, [pc, #60]	; (8001bc8 <ExtLights_LightState+0x264>)
 8001b8a:	f00c fb9f 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001b8e:	e03a      	b.n	8001c06 <ExtLights_LightState+0x2a2>
 8001b90:	200000d0 	.word	0x200000d0
 8001b94:	2000032c 	.word	0x2000032c
 8001b98:	200000ec 	.word	0x200000ec
 8001b9c:	200000ed 	.word	0x200000ed
 8001ba0:	200000e7 	.word	0x200000e7
 8001ba4:	200000e6 	.word	0x200000e6
 8001ba8:	200000e5 	.word	0x200000e5
 8001bac:	200000e8 	.word	0x200000e8
 8001bb0:	200000ea 	.word	0x200000ea
 8001bb4:	200000eb 	.word	0x200000eb
 8001bb8:	200000ee 	.word	0x200000ee
 8001bbc:	200000d1 	.word	0x200000d1
 8001bc0:	20000494 	.word	0x20000494
 8001bc4:	20000106 	.word	0x20000106
 8001bc8:	200003e0 	.word	0x200003e0
 8001bcc:	200000ef 	.word	0x200000ef
 8001bd0:	20000104 	.word	0x20000104
 8001bd4:	200000e9 	.word	0x200000e9
 8001bd8:	20000105 	.word	0x20000105
	}
	else if(ExtLights_FrontFogLight_CurrentState == STD_LOW)
 8001bdc:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <ExtLights_LightState+0x2d8>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d110      	bne.n	8001c06 <ExtLights_LightState+0x2a2>
	{
		if(ExtLights_FrontFogLight_CurrentState != ExtLights_Previous_FrontFogLight_CurrentState)
 8001be4:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <ExtLights_LightState+0x2d8>)
 8001be6:	781a      	ldrb	r2, [r3, #0]
 8001be8:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <ExtLights_LightState+0x2dc>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d006      	beq.n	8001bfe <ExtLights_LightState+0x29a>
		{
			ExtLights_Previous_FrontFogLight_CurrentState = ExtLights_FrontFogLight_CurrentState;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <ExtLights_LightState+0x2d8>)
 8001bf2:	781a      	ldrb	r2, [r3, #0]
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <ExtLights_LightState+0x2dc>)
 8001bf6:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr3(0);
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f00c fa03 	bl	800e004 <Rte_Write_TimH_TimHPort_Tim3Ccr3>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 8001bfe:	2108      	movs	r1, #8
 8001c00:	4810      	ldr	r0, [pc, #64]	; (8001c44 <ExtLights_LightState+0x2e0>)
 8001c02:	f00c fb70 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on the reverse light. */
	ExtLights_ReverseLight(ExtLights_ReverseLight_CurrentState);
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <ExtLights_LightState+0x2e4>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f92e 	bl	8001e6c <ExtLights_ReverseLight>

	if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW)
 8001c10:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <ExtLights_LightState+0x2e8>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10e      	bne.n	8001c36 <ExtLights_LightState+0x2d2>
	{
		ExtLights_ReverseLight_CurrentState = STD_LOW;
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <ExtLights_LightState+0x2e4>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
		ExtLights_RearFogLight_CurrentState = STD_LOW;
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <ExtLights_LightState+0x2ec>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
		ExtLights_FrontFogLight_CurrentState = STD_LOW;
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <ExtLights_LightState+0x2d8>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
		ExtLights_HighBeam_CurrentState = STD_LOW;
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <ExtLights_LightState+0x2f0>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
		ExtLights_BrakeLight_CurrentState = STD_LOW;
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <ExtLights_LightState+0x2f4>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200000e9 	.word	0x200000e9
 8001c40:	20000105 	.word	0x20000105
 8001c44:	200003e0 	.word	0x200003e0
 8001c48:	200000e4 	.word	0x200000e4
 8001c4c:	200000ce 	.word	0x200000ce
 8001c50:	200000ef 	.word	0x200000ef
 8001c54:	200000e8 	.word	0x200000e8
 8001c58:	200000e6 	.word	0x200000e6

08001c5c <ExtLights_MainFunction>:
* Function: ExtLights_MainFunction										   		   *
* Description: Exterior lights application main function. Controls application	   *
* 			   states. 		   													   *
************************************************************************************/
VOID ExtLights_MainFunction()
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
	ExtLights_LightState();
 8001c60:	f7ff fe80 	bl	8001964 <ExtLights_LightState>
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <ExtLights_LightSwitchMode>:
/***********************************************************************************
* Function: ExtLights_LightSwitchMode										   	   *
* Description: Control the light switch.								 		   *
************************************************************************************/
VOID ExtLights_LightSwitchMode()
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	/* Switch through the light switch states. */
	switch(ExtLights_LightsSwitch_CurrentState)
 8001c6c:	4b6e      	ldr	r3, [pc, #440]	; (8001e28 <ExtLights_LightSwitchMode+0x1c0>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	3b17      	subs	r3, #23
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	f200 80d3 	bhi.w	8001e1e <ExtLights_LightSwitchMode+0x1b6>
 8001c78:	a201      	add	r2, pc, #4	; (adr r2, 8001c80 <ExtLights_LightSwitchMode+0x18>)
 8001c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7e:	bf00      	nop
 8001c80:	08001c91 	.word	0x08001c91
 8001c84:	08001cdb 	.word	0x08001cdb
 8001c88:	08001d7b 	.word	0x08001d7b
 8001c8c:	08001dd5 	.word	0x08001dd5
	{
		/* Switch is on position zero, turn off the lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATEZERO:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8001c90:	4b66      	ldr	r3, [pc, #408]	; (8001e2c <ExtLights_LightSwitchMode+0x1c4>)
 8001c92:	781a      	ldrb	r2, [r3, #0]
 8001c94:	4b64      	ldr	r3, [pc, #400]	; (8001e28 <ExtLights_LightSwitchMode+0x1c0>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d00f      	beq.n	8001cbc <ExtLights_LightSwitchMode+0x54>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8001c9c:	4b62      	ldr	r3, [pc, #392]	; (8001e28 <ExtLights_LightSwitchMode+0x1c0>)
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	4b62      	ldr	r3, [pc, #392]	; (8001e2c <ExtLights_LightSwitchMode+0x1c4>)
 8001ca2:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f00c f9cd 	bl	800e044 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8001caa:	2000      	movs	r0, #0
 8001cac:	f00c f9d9 	bl	800e062 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001cb0:	4b5f      	ldr	r3, [pc, #380]	; (8001e30 <ExtLights_LightSwitchMode+0x1c8>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001cb6:	4b5f      	ldr	r3, [pc, #380]	; (8001e34 <ExtLights_LightSwitchMode+0x1cc>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	485e      	ldr	r0, [pc, #376]	; (8001e38 <ExtLights_LightSwitchMode+0x1d0>)
 8001cc0:	f00c fb11 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	485c      	ldr	r0, [pc, #368]	; (8001e38 <ExtLights_LightSwitchMode+0x1d0>)
 8001cc8:	f00c fb0d 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8001ccc:	4b58      	ldr	r3, [pc, #352]	; (8001e30 <ExtLights_LightSwitchMode+0x1c8>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001cd2:	4b58      	ldr	r3, [pc, #352]	; (8001e34 <ExtLights_LightSwitchMode+0x1cc>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
			break;
 8001cd8:	e0a4      	b.n	8001e24 <ExtLights_LightSwitchMode+0x1bc>
		/* Switch is on position one, turn automatic lights controlled by sensor's input. */
		case EXTLIGHTS_LIGHTSWITCH_STATEONE:
			/* Read the sensor status. */
			if(Rte_P_Os_OsPort_Os_Counter % 39 == 0)
 8001cda:	4b58      	ldr	r3, [pc, #352]	; (8001e3c <ExtLights_LightSwitchMode+0x1d4>)
 8001cdc:	6819      	ldr	r1, [r3, #0]
 8001cde:	4b58      	ldr	r3, [pc, #352]	; (8001e40 <ExtLights_LightSwitchMode+0x1d8>)
 8001ce0:	fba3 2301 	umull	r2, r3, r3, r1
 8001ce4:	1aca      	subs	r2, r1, r3
 8001ce6:	0852      	lsrs	r2, r2, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	095a      	lsrs	r2, r3, #5
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	1aca      	subs	r2, r1, r3
 8001cf8:	2a00      	cmp	r2, #0
 8001cfa:	d102      	bne.n	8001d02 <ExtLights_LightSwitchMode+0x9a>
			{
				Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(EXTLIGHTS_LS_REQUEST);
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f000 fbc1 	bl	8002484 <SenCtrl_ProcessSensorValue>
			}
			else
			{
				/* do nothing */
			}
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8001d02:	4b4a      	ldr	r3, [pc, #296]	; (8001e2c <ExtLights_LightSwitchMode+0x1c4>)
 8001d04:	781a      	ldrb	r2, [r3, #0]
 8001d06:	4b48      	ldr	r3, [pc, #288]	; (8001e28 <ExtLights_LightSwitchMode+0x1c0>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d00f      	beq.n	8001d2e <ExtLights_LightSwitchMode+0xc6>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8001d0e:	4b46      	ldr	r3, [pc, #280]	; (8001e28 <ExtLights_LightSwitchMode+0x1c0>)
 8001d10:	781a      	ldrb	r2, [r3, #0]
 8001d12:	4b46      	ldr	r3, [pc, #280]	; (8001e2c <ExtLights_LightSwitchMode+0x1c4>)
 8001d14:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8001d16:	2000      	movs	r0, #0
 8001d18:	f00c f994 	bl	800e044 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f00c f9a0 	bl	800e062 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001d22:	4b43      	ldr	r3, [pc, #268]	; (8001e30 <ExtLights_LightSwitchMode+0x1c8>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001d28:	4b42      	ldr	r3, [pc, #264]	; (8001e34 <ExtLights_LightSwitchMode+0x1cc>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
			else
			{
				/* do nothing */
			}
			/* If the sensor status is on, turn on the lights to on. */
			if(ExtLights_LightSensorState == 1)
 8001d2e:	4b45      	ldr	r3, [pc, #276]	; (8001e44 <ExtLights_LightSwitchMode+0x1dc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d10e      	bne.n	8001d54 <ExtLights_LightSwitchMode+0xec>
			{
				ExtLights_LowBeam_CurrentState = STD_HIGH;
 8001d36:	4b3e      	ldr	r3, [pc, #248]	; (8001e30 <ExtLights_LightSwitchMode+0x1c8>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8001d3c:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <ExtLights_LightSwitchMode+0x1cc>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001d42:	2100      	movs	r1, #0
 8001d44:	483c      	ldr	r0, [pc, #240]	; (8001e38 <ExtLights_LightSwitchMode+0x1d0>)
 8001d46:	f00c fac1 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	483a      	ldr	r0, [pc, #232]	; (8001e38 <ExtLights_LightSwitchMode+0x1d0>)
 8001d4e:	f00c fabd 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				ExtLights_LowBeam_CurrentState = STD_LOW;
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
			}
			break;
 8001d52:	e066      	b.n	8001e22 <ExtLights_LightSwitchMode+0x1ba>
			else if(ExtLights_LightSensorState != 1)
 8001d54:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <ExtLights_LightSwitchMode+0x1dc>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d062      	beq.n	8001e22 <ExtLights_LightSwitchMode+0x1ba>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001d5c:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <ExtLights_LightSwitchMode+0x1c8>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001d62:	4b34      	ldr	r3, [pc, #208]	; (8001e34 <ExtLights_LightSwitchMode+0x1cc>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4833      	ldr	r0, [pc, #204]	; (8001e38 <ExtLights_LightSwitchMode+0x1d0>)
 8001d6c:	f00c fabb 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001d70:	2104      	movs	r1, #4
 8001d72:	4831      	ldr	r0, [pc, #196]	; (8001e38 <ExtLights_LightSwitchMode+0x1d0>)
 8001d74:	f00c fab7 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			break;
 8001d78:	e053      	b.n	8001e22 <ExtLights_LightSwitchMode+0x1ba>
		/* Switch is on position three, turn on position lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATETWO:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8001d7a:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <ExtLights_LightSwitchMode+0x1c4>)
 8001d7c:	781a      	ldrb	r2, [r3, #0]
 8001d7e:	4b2a      	ldr	r3, [pc, #168]	; (8001e28 <ExtLights_LightSwitchMode+0x1c0>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d00f      	beq.n	8001da6 <ExtLights_LightSwitchMode+0x13e>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8001d86:	4b28      	ldr	r3, [pc, #160]	; (8001e28 <ExtLights_LightSwitchMode+0x1c0>)
 8001d88:	781a      	ldrb	r2, [r3, #0]
 8001d8a:	4b28      	ldr	r3, [pc, #160]	; (8001e2c <ExtLights_LightSwitchMode+0x1c4>)
 8001d8c:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f00c f958 	bl	800e044 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8001d94:	2000      	movs	r0, #0
 8001d96:	f00c f964 	bl	800e062 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001d9a:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <ExtLights_LightSwitchMode+0x1c8>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001da0:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <ExtLights_LightSwitchMode+0x1cc>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001da6:	2100      	movs	r1, #0
 8001da8:	4823      	ldr	r0, [pc, #140]	; (8001e38 <ExtLights_LightSwitchMode+0x1d0>)
 8001daa:	f00c fa8f 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001dae:	2104      	movs	r1, #4
 8001db0:	4821      	ldr	r0, [pc, #132]	; (8001e38 <ExtLights_LightSwitchMode+0x1d0>)
 8001db2:	f00c fa8b 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Write_TimH_TimHPort_Tim2Ccr1(750);
 8001db6:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001dba:	f00c f943 	bl	800e044 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
			Rte_Write_TimH_TimHPort_Tim2Ccr2(1500);
 8001dbe:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001dc2:	f00c f94e 	bl	800e062 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <ExtLights_LightSwitchMode+0x1c8>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <ExtLights_LightSwitchMode+0x1cc>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
			break;
 8001dd2:	e027      	b.n	8001e24 <ExtLights_LightSwitchMode+0x1bc>
		/* Switch is on position four, turn on night time lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATETHREE:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8001dd4:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <ExtLights_LightSwitchMode+0x1c4>)
 8001dd6:	781a      	ldrb	r2, [r3, #0]
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <ExtLights_LightSwitchMode+0x1c0>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d00f      	beq.n	8001e00 <ExtLights_LightSwitchMode+0x198>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <ExtLights_LightSwitchMode+0x1c0>)
 8001de2:	781a      	ldrb	r2, [r3, #0]
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <ExtLights_LightSwitchMode+0x1c4>)
 8001de6:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8001de8:	2000      	movs	r0, #0
 8001dea:	f00c f92b 	bl	800e044 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8001dee:	2000      	movs	r0, #0
 8001df0:	f00c f937 	bl	800e062 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001df4:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <ExtLights_LightSwitchMode+0x1c8>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <ExtLights_LightSwitchMode+0x1cc>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001e00:	2100      	movs	r1, #0
 8001e02:	480d      	ldr	r0, [pc, #52]	; (8001e38 <ExtLights_LightSwitchMode+0x1d0>)
 8001e04:	f00c fa62 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001e08:	2104      	movs	r1, #4
 8001e0a:	480b      	ldr	r0, [pc, #44]	; (8001e38 <ExtLights_LightSwitchMode+0x1d0>)
 8001e0c:	f00c fa5e 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			ExtLights_LowBeam_CurrentState = STD_HIGH;
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <ExtLights_LightSwitchMode+0x1c8>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <ExtLights_LightSwitchMode+0x1cc>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
			break;
 8001e1c:	e002      	b.n	8001e24 <ExtLights_LightSwitchMode+0x1bc>
		default:
			break;
 8001e1e:	bf00      	nop
 8001e20:	e000      	b.n	8001e24 <ExtLights_LightSwitchMode+0x1bc>
			break;
 8001e22:	bf00      	nop
	}
}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	200000e7 	.word	0x200000e7
 8001e2c:	20000107 	.word	0x20000107
 8001e30:	200000ec 	.word	0x200000ec
 8001e34:	200000ed 	.word	0x200000ed
 8001e38:	2000032c 	.word	0x2000032c
 8001e3c:	200001fc 	.word	0x200001fc
 8001e40:	a41a41a5 	.word	0xa41a41a5
 8001e44:	20000100 	.word	0x20000100

08001e48 <ExtLights_HighBeam>:
/***********************************************************************************
* Function: ExtLights_HighBeam										   			   *
* Description: High beam trigger. 		  										   *
************************************************************************************/
VOID ExtLights_HighBeam(uint8 PinState)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	461a      	mov	r2, r3
 8001e56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e5a:	4803      	ldr	r0, [pc, #12]	; (8001e68 <ExtLights_HighBeam+0x20>)
 8001e5c:	f00c fbe6 	bl	800e62c <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40020000 	.word	0x40020000

08001e6c <ExtLights_ReverseLight>:
/***********************************************************************************
* Function: ExtLights_ReverseLight										   		   *
* Description: Reverse light trigger. 		   									   *
************************************************************************************/
VOID ExtLights_ReverseLight(uint8 PinState)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e7e:	4803      	ldr	r0, [pc, #12]	; (8001e8c <ExtLights_ReverseLight+0x20>)
 8001e80:	f00c fbd4 	bl	800e62c <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40020400 	.word	0x40020400

08001e90 <IntLights_RxBtcState>:
/***********************************************************************************
* Function: IntLights_RxBtcState										   		   *
* Description: Process command. 		   		   						           *
************************************************************************************/
VOID IntLights_RxBtcState()
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	/* Process the state of the interior lights according to system state. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <IntLights_RxBtcState+0x4c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d102      	bne.n	8001ea2 <IntLights_RxBtcState+0x12>
	{
		IntLights_CurrentState = STD_HIGH;
 8001e9c:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <IntLights_RxBtcState+0x50>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW && Rte_P_Btc_BtcPort_Btc_IntLights == STD_LOW)
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <IntLights_RxBtcState+0x4c>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <IntLights_RxBtcState+0x28>
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <IntLights_RxBtcState+0x54>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d102      	bne.n	8001eb8 <IntLights_RxBtcState+0x28>
	{
		IntLights_CurrentState = STD_LOW;
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <IntLights_RxBtcState+0x50>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW && Rte_P_Btc_BtcPort_Btc_IntLights == STD_HIGH)
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <IntLights_RxBtcState+0x4c>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d106      	bne.n	8001ece <IntLights_RxBtcState+0x3e>
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <IntLights_RxBtcState+0x54>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d102      	bne.n	8001ece <IntLights_RxBtcState+0x3e>
	{
		IntLights_CurrentState = STD_HIGH;
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <IntLights_RxBtcState+0x50>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel3);
 8001ece:	2108      	movs	r1, #8
 8001ed0:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <IntLights_RxBtcState+0x58>)
 8001ed2:	f00c f9fb 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200000d0 	.word	0x200000d0
 8001ee0:	20000108 	.word	0x20000108
 8001ee4:	200000be 	.word	0x200000be
 8001ee8:	2000032c 	.word	0x2000032c

08001eec <IntLights_MainFunction>:
/***********************************************************************************
* Function: IntLights_MainFunction										           *
* Description: Interior lights main function for the application and state process.*
************************************************************************************/
VOID IntLights_MainFunction()
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	IntLights_RxBtcState();
 8001ef0:	f7ff ffce 	bl	8001e90 <IntLights_RxBtcState>
}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <Pdc_MainFunction>:
/***********************************************************************************
* Function: Pdc_MainFunction													   *
* Description: Main function application. 		   			                       *
************************************************************************************/
VOID Pdc_MainFunction()
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	if(Btc_ReverseLight == STD_HIGH)
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <Pdc_MainFunction+0x18>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d103      	bne.n	8001f0c <Pdc_MainFunction+0x14>
	{
		Pdc_Front_ProcessData();
 8001f04:	f000 f838 	bl	8001f78 <Pdc_Front_ProcessData>
		Pdc_Rear_ProcessData();
 8001f08:	f000 f804 	bl	8001f14 <Pdc_Rear_ProcessData>
	}
	else
	{
		/* do nothing */
	}
}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	200000bd 	.word	0x200000bd

08001f14 <Pdc_Rear_ProcessData>:
/***********************************************************************************
* Function: Pdc_Rear_ProcessData												   *
* Description: Process distance data.		   			                           *
************************************************************************************/
VOID Pdc_Rear_ProcessData()
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
	/* Store the distance measured. */
	Pdc_Rear_Distance = (3 * Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour) / 4;
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <Pdc_Rear_ProcessData+0x50>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	da00      	bge.n	8001f2a <Pdc_Rear_ProcessData+0x16>
 8001f28:	3303      	adds	r3, #3
 8001f2a:	109b      	asrs	r3, r3, #2
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <Pdc_Rear_ProcessData+0x54>)
 8001f30:	701a      	strb	r2, [r3, #0]
	/* Trigger the buzzer according to the distance measured. */
	if(Pdc_Rear_Distance <= PDC_MAX_DISTANCE)
 8001f32:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <Pdc_Rear_ProcessData+0x54>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b14      	cmp	r3, #20
 8001f38:	d801      	bhi.n	8001f3e <Pdc_Rear_ProcessData+0x2a>
	{
		Pdc_Rear_TriggerBuzzer();
 8001f3a:	f000 f851 	bl	8001fe0 <Pdc_Rear_TriggerBuzzer>
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance >= PDC_MAX_DISTANCE)
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <Pdc_Rear_ProcessData+0x54>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b13      	cmp	r3, #19
 8001f44:	d90c      	bls.n	8001f60 <Pdc_Rear_ProcessData+0x4c>
	{
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN, STD_LOW);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2120      	movs	r1, #32
 8001f4a:	4808      	ldr	r0, [pc, #32]	; (8001f6c <Pdc_Rear_ProcessData+0x58>)
 8001f4c:	f00c fb6e 	bl	800e62c <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcR_Buzzer_TimerHandle);
 8001f50:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <Pdc_Rear_ProcessData+0x5c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00c fb88 	bl	800e66a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcR_DistanceRange = 0;
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <Pdc_Rear_ProcessData+0x60>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200006d1 	.word	0x200006d1
 8001f68:	20000109 	.word	0x20000109
 8001f6c:	40020400 	.word	0x40020400
 8001f70:	20000254 	.word	0x20000254
 8001f74:	2000010c 	.word	0x2000010c

08001f78 <Pdc_Front_ProcessData>:
/***********************************************************************************
* Function: Pdc_Front_ProcessData												   *
* Description: Process distance data. 		   			                           *
************************************************************************************/
VOID Pdc_Front_ProcessData()
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	/* Store the distance measured. */
	Pdc_Front_Distance = (3 * Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree) / 4;
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <Pdc_Front_ProcessData+0x54>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	461a      	mov	r2, r3
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	da00      	bge.n	8001f8e <Pdc_Front_ProcessData+0x16>
 8001f8c:	3303      	adds	r3, #3
 8001f8e:	109b      	asrs	r3, r3, #2
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <Pdc_Front_ProcessData+0x58>)
 8001f94:	701a      	strb	r2, [r3, #0]
	/* Trigger the buzzer according to the distance measured. */
	if(Pdc_Front_Distance <= PDC_MAX_DISTANCE)
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <Pdc_Front_ProcessData+0x58>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b14      	cmp	r3, #20
 8001f9c:	d801      	bhi.n	8001fa2 <Pdc_Front_ProcessData+0x2a>
	{
		Pdc_Front_TriggerBuzzer();
 8001f9e:	f000 f893 	bl	80020c8 <Pdc_Front_TriggerBuzzer>
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance >= PDC_MAX_DISTANCE)
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <Pdc_Front_ProcessData+0x58>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b13      	cmp	r3, #19
 8001fa8:	d90d      	bls.n	8001fc6 <Pdc_Front_ProcessData+0x4e>
	{
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCF_BUZZER_PORT, PDCF_BUZZER_PIN, STD_LOW);
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fb0:	4808      	ldr	r0, [pc, #32]	; (8001fd4 <Pdc_Front_ProcessData+0x5c>)
 8001fb2:	f00c fb3b 	bl	800e62c <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcF_Buzzer_TimerHandle);
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <Pdc_Front_ProcessData+0x60>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f00c fb55 	bl	800e66a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcF_DistanceRange = 0;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <Pdc_Front_ProcessData+0x64>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200006c1 	.word	0x200006c1
 8001fd0:	2000010a 	.word	0x2000010a
 8001fd4:	40020800 	.word	0x40020800
 8001fd8:	20000258 	.word	0x20000258
 8001fdc:	20000110 	.word	0x20000110

08001fe0 <Pdc_Rear_TriggerBuzzer>:
/***********************************************************************************
* Function: Pdc_Rear_TriggerBuzzer												   *
* Description: Control buzzer.		   			                                   *
************************************************************************************/
VOID Pdc_Rear_TriggerBuzzer()
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
	if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcR_Buzzer_TimerHandle) == 0)
 8001fe4:	4b35      	ldr	r3, [pc, #212]	; (80020bc <Pdc_Rear_TriggerBuzzer+0xdc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f008 fa7c 	bl	800a4e6 <osTimerIsRunning>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d139      	bne.n	8002068 <Pdc_Rear_TriggerBuzzer+0x88>
	{
		switch(PdcR_DistanceRange)
 8001ff4:	4b32      	ldr	r3, [pc, #200]	; (80020c0 <Pdc_Rear_TriggerBuzzer+0xe0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d833      	bhi.n	8002066 <Pdc_Rear_TriggerBuzzer+0x86>
 8001ffe:	a201      	add	r2, pc, #4	; (adr r2, 8002004 <Pdc_Rear_TriggerBuzzer+0x24>)
 8002000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002004:	08002015 	.word	0x08002015
 8002008:	0800202b 	.word	0x0800202b
 800200c:	0800203f 	.word	0x0800203f
 8002010:	08002053 	.word	0x08002053
		{
			case 1:
				PdcR_DistanceRange = 0;
 8002014:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <Pdc_Rear_TriggerBuzzer+0xe0>)
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_ONE);
 800201a:	4b28      	ldr	r3, [pc, #160]	; (80020bc <Pdc_Rear_TriggerBuzzer+0xdc>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002022:	4618      	mov	r0, r3
 8002024:	f00c fb14 	bl	800e650 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002028:	e01e      	b.n	8002068 <Pdc_Rear_TriggerBuzzer+0x88>
			case 2:
				PdcR_DistanceRange = 0;
 800202a:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <Pdc_Rear_TriggerBuzzer+0xe0>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_TWO);
 8002030:	4b22      	ldr	r3, [pc, #136]	; (80020bc <Pdc_Rear_TriggerBuzzer+0xdc>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	21fa      	movs	r1, #250	; 0xfa
 8002036:	4618      	mov	r0, r3
 8002038:	f00c fb0a 	bl	800e650 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 800203c:	e014      	b.n	8002068 <Pdc_Rear_TriggerBuzzer+0x88>
			case 3:
				PdcR_DistanceRange = 0;
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <Pdc_Rear_TriggerBuzzer+0xe0>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_THREE);
 8002044:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <Pdc_Rear_TriggerBuzzer+0xdc>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	217d      	movs	r1, #125	; 0x7d
 800204a:	4618      	mov	r0, r3
 800204c:	f00c fb00 	bl	800e650 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002050:	e00a      	b.n	8002068 <Pdc_Rear_TriggerBuzzer+0x88>
			case 4:
				PdcR_DistanceRange = 0;
 8002052:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <Pdc_Rear_TriggerBuzzer+0xe0>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_FOUR);
 8002058:	4b18      	ldr	r3, [pc, #96]	; (80020bc <Pdc_Rear_TriggerBuzzer+0xdc>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	214b      	movs	r1, #75	; 0x4b
 800205e:	4618      	mov	r0, r3
 8002060:	f00c faf6 	bl	800e650 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002064:	e000      	b.n	8002068 <Pdc_Rear_TriggerBuzzer+0x88>
			default:
				break;
 8002066:	bf00      	nop
	else
	{
		/* do nothing */
	}
	/* Trigger the buzzer for each case and type of safety distance. */
	if(Pdc_Rear_Distance <= PDC_MAX_DISTANCE && Pdc_Rear_Distance >= PDC_FIRST_SAFE_DISTANCE)
 8002068:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <Pdc_Rear_TriggerBuzzer+0xe4>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b14      	cmp	r3, #20
 800206e:	d806      	bhi.n	800207e <Pdc_Rear_TriggerBuzzer+0x9e>
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b10      	cmp	r3, #16
 8002076:	d902      	bls.n	800207e <Pdc_Rear_TriggerBuzzer+0x9e>
	{
		PdcR_DistanceRange = 1;
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <Pdc_Rear_TriggerBuzzer+0xe0>)
 800207a:	2201      	movs	r2, #1
 800207c:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_FIRST_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_SECOND_SAFE_DISTANCE)
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b11      	cmp	r3, #17
 8002084:	d806      	bhi.n	8002094 <Pdc_Rear_TriggerBuzzer+0xb4>
 8002086:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b0d      	cmp	r3, #13
 800208c:	d902      	bls.n	8002094 <Pdc_Rear_TriggerBuzzer+0xb4>
	{
		PdcR_DistanceRange = 2;
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <Pdc_Rear_TriggerBuzzer+0xe0>)
 8002090:	2202      	movs	r2, #2
 8002092:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_SECOND_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_THIRD_SAFE_DISTANCE)
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b0e      	cmp	r3, #14
 800209a:	d806      	bhi.n	80020aa <Pdc_Rear_TriggerBuzzer+0xca>
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <Pdc_Rear_TriggerBuzzer+0xe4>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b0a      	cmp	r3, #10
 80020a2:	d902      	bls.n	80020aa <Pdc_Rear_TriggerBuzzer+0xca>
	{
		PdcR_DistanceRange = 3;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <Pdc_Rear_TriggerBuzzer+0xe0>)
 80020a6:	2203      	movs	r2, #3
 80020a8:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_THIRD_SAFE_DISTANCE)
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <Pdc_Rear_TriggerBuzzer+0xe4>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b0b      	cmp	r3, #11
 80020b0:	d802      	bhi.n	80020b8 <Pdc_Rear_TriggerBuzzer+0xd8>
	{
		PdcR_DistanceRange = 4;
 80020b2:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <Pdc_Rear_TriggerBuzzer+0xe0>)
 80020b4:	2204      	movs	r2, #4
 80020b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000254 	.word	0x20000254
 80020c0:	2000010c 	.word	0x2000010c
 80020c4:	20000109 	.word	0x20000109

080020c8 <Pdc_Front_TriggerBuzzer>:
/***********************************************************************************
* Function: Pdc_Front_TriggerBuzzer												   *
* Description: Control buzzer		   			   								   *
************************************************************************************/
VOID Pdc_Front_TriggerBuzzer()
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
	if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcF_Buzzer_TimerHandle) == 0)
 80020cc:	4b35      	ldr	r3, [pc, #212]	; (80021a4 <Pdc_Front_TriggerBuzzer+0xdc>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f008 fa08 	bl	800a4e6 <osTimerIsRunning>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d139      	bne.n	8002150 <Pdc_Front_TriggerBuzzer+0x88>
	{
		switch(PdcF_DistanceRange)
 80020dc:	4b32      	ldr	r3, [pc, #200]	; (80021a8 <Pdc_Front_TriggerBuzzer+0xe0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d833      	bhi.n	800214e <Pdc_Front_TriggerBuzzer+0x86>
 80020e6:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <Pdc_Front_TriggerBuzzer+0x24>)
 80020e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ec:	080020fd 	.word	0x080020fd
 80020f0:	08002113 	.word	0x08002113
 80020f4:	08002127 	.word	0x08002127
 80020f8:	0800213b 	.word	0x0800213b
		{
			case 1:
				PdcF_DistanceRange = 0;
 80020fc:	4b2a      	ldr	r3, [pc, #168]	; (80021a8 <Pdc_Front_TriggerBuzzer+0xe0>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_ONE);
 8002102:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <Pdc_Front_TriggerBuzzer+0xdc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800210a:	4618      	mov	r0, r3
 800210c:	f00c faa0 	bl	800e650 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002110:	e01e      	b.n	8002150 <Pdc_Front_TriggerBuzzer+0x88>
			case 2:
				PdcF_DistanceRange = 0;
 8002112:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <Pdc_Front_TriggerBuzzer+0xe0>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_TWO);
 8002118:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <Pdc_Front_TriggerBuzzer+0xdc>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	21fa      	movs	r1, #250	; 0xfa
 800211e:	4618      	mov	r0, r3
 8002120:	f00c fa96 	bl	800e650 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002124:	e014      	b.n	8002150 <Pdc_Front_TriggerBuzzer+0x88>
			case 3:
				PdcF_DistanceRange = 0;
 8002126:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <Pdc_Front_TriggerBuzzer+0xe0>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_THREE);
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <Pdc_Front_TriggerBuzzer+0xdc>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	217d      	movs	r1, #125	; 0x7d
 8002132:	4618      	mov	r0, r3
 8002134:	f00c fa8c 	bl	800e650 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002138:	e00a      	b.n	8002150 <Pdc_Front_TriggerBuzzer+0x88>
			case 4:
				PdcF_DistanceRange = 0;
 800213a:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <Pdc_Front_TriggerBuzzer+0xe0>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_FOUR);
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <Pdc_Front_TriggerBuzzer+0xdc>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	214b      	movs	r1, #75	; 0x4b
 8002146:	4618      	mov	r0, r3
 8002148:	f00c fa82 	bl	800e650 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 800214c:	e000      	b.n	8002150 <Pdc_Front_TriggerBuzzer+0x88>
			default:
				break;
 800214e:	bf00      	nop
	else
	{
		/* do nothing */
	}
	/* Trigger the buzzer for each case and type of safety distance. */
	if(Pdc_Front_Distance <= PDC_MAX_DISTANCE && Pdc_Front_Distance >= PDC_FIRST_SAFE_DISTANCE)
 8002150:	4b16      	ldr	r3, [pc, #88]	; (80021ac <Pdc_Front_TriggerBuzzer+0xe4>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b14      	cmp	r3, #20
 8002156:	d806      	bhi.n	8002166 <Pdc_Front_TriggerBuzzer+0x9e>
 8002158:	4b14      	ldr	r3, [pc, #80]	; (80021ac <Pdc_Front_TriggerBuzzer+0xe4>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b10      	cmp	r3, #16
 800215e:	d902      	bls.n	8002166 <Pdc_Front_TriggerBuzzer+0x9e>
	{
		PdcF_DistanceRange = 1;
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <Pdc_Front_TriggerBuzzer+0xe0>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_FIRST_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_SECOND_SAFE_DISTANCE)
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <Pdc_Front_TriggerBuzzer+0xe4>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b11      	cmp	r3, #17
 800216c:	d806      	bhi.n	800217c <Pdc_Front_TriggerBuzzer+0xb4>
 800216e:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <Pdc_Front_TriggerBuzzer+0xe4>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b0d      	cmp	r3, #13
 8002174:	d902      	bls.n	800217c <Pdc_Front_TriggerBuzzer+0xb4>
	{
		PdcF_DistanceRange = 2;
 8002176:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <Pdc_Front_TriggerBuzzer+0xe0>)
 8002178:	2202      	movs	r2, #2
 800217a:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_SECOND_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_THIRD_SAFE_DISTANCE)
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <Pdc_Front_TriggerBuzzer+0xe4>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b0e      	cmp	r3, #14
 8002182:	d806      	bhi.n	8002192 <Pdc_Front_TriggerBuzzer+0xca>
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <Pdc_Front_TriggerBuzzer+0xe4>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b0a      	cmp	r3, #10
 800218a:	d902      	bls.n	8002192 <Pdc_Front_TriggerBuzzer+0xca>
	{
		PdcF_DistanceRange = 3;
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <Pdc_Front_TriggerBuzzer+0xe0>)
 800218e:	2203      	movs	r2, #3
 8002190:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_THIRD_SAFE_DISTANCE)
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <Pdc_Front_TriggerBuzzer+0xe4>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b0b      	cmp	r3, #11
 8002198:	d802      	bhi.n	80021a0 <Pdc_Front_TriggerBuzzer+0xd8>
	{
		PdcF_DistanceRange = 4;
 800219a:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <Pdc_Front_TriggerBuzzer+0xe0>)
 800219c:	2204      	movs	r2, #4
 800219e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000258 	.word	0x20000258
 80021a8:	20000110 	.word	0x20000110
 80021ac:	2000010a 	.word	0x2000010a

080021b0 <SecAlm_LightsBuzzerControl>:
/***********************************************************************************
* Function: SecAlm_LightsBuzzerControl										       *
* Description: Controls the lights and buzzer in case of alarm trigger. 		   *
************************************************************************************/
VOID SecAlm_LightsBuzzerControl()
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
	/* Local variable for sensor status. */
	uint32 sensorStatus = STD_LOW;
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]
	/* Get the sensor status. */
	sensorStatus = SecAlm_VibSenStatus();
 80021ba:	f000 f895 	bl	80022e8 <SecAlm_VibSenStatus>
 80021be:	4603      	mov	r3, r0
 80021c0:	607b      	str	r3, [r7, #4]
	/* If the trigger was previously on and now it is off. */
	if(SecAlm_TriggerPreviousState != SecAlm_Trigger && !SecAlm_Trigger)
 80021c2:	4b40      	ldr	r3, [pc, #256]	; (80022c4 <SecAlm_LightsBuzzerControl+0x114>)
 80021c4:	781a      	ldrb	r2, [r3, #0]
 80021c6:	4b40      	ldr	r3, [pc, #256]	; (80022c8 <SecAlm_LightsBuzzerControl+0x118>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d006      	beq.n	80021dc <SecAlm_LightsBuzzerControl+0x2c>
 80021ce:	4b3e      	ldr	r3, [pc, #248]	; (80022c8 <SecAlm_LightsBuzzerControl+0x118>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d102      	bne.n	80021dc <SecAlm_LightsBuzzerControl+0x2c>
	{
		/* Reset the counter. */
		SecAlm_TriggerIRQCounterForTimer4 = STD_LOW;
 80021d6:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <SecAlm_LightsBuzzerControl+0x11c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the counter exceeded the maximum value, reset the variables. */
	if(SecAlm_TriggerIRQCounterForTimer4 >= 20)
 80021dc:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <SecAlm_LightsBuzzerControl+0x11c>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b13      	cmp	r3, #19
 80021e2:	d922      	bls.n	800222a <SecAlm_LightsBuzzerControl+0x7a>
	{
		SecAlm_TriggerPreviousState 						= SecAlm_Trigger;
 80021e4:	4b38      	ldr	r3, [pc, #224]	; (80022c8 <SecAlm_LightsBuzzerControl+0x118>)
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	4b36      	ldr	r3, [pc, #216]	; (80022c4 <SecAlm_LightsBuzzerControl+0x114>)
 80021ea:	701a      	strb	r2, [r3, #0]
		Rte_P_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter	= STD_HIGH;
 80021ec:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <SecAlm_LightsBuzzerControl+0x120>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	701a      	strb	r2, [r3, #0]
		Rte_P_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter 	= STD_LOW;
 80021f2:	4b38      	ldr	r3, [pc, #224]	; (80022d4 <SecAlm_LightsBuzzerControl+0x124>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
		SecAlm_Trigger 										= STD_LOW;
 80021f8:	4b33      	ldr	r3, [pc, #204]	; (80022c8 <SecAlm_LightsBuzzerControl+0x118>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange 								= STD_LOW;
 80021fe:	4b36      	ldr	r3, [pc, #216]	; (80022d8 <SecAlm_LightsBuzzerControl+0x128>)
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
		SecAlm_TriggerIRQCounterForTimer4 					= STD_LOW;
 8002204:	4b31      	ldr	r3, [pc, #196]	; (80022cc <SecAlm_LightsBuzzerControl+0x11c>)
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
		SecAlm_SensorStatusCounter 							= STD_LOW;
 800220a:	4b34      	ldr	r3, [pc, #208]	; (80022dc <SecAlm_LightsBuzzerControl+0x12c>)
 800220c:	2200      	movs	r2, #0
 800220e:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatus 								= STD_LOW;
 8002210:	4b33      	ldr	r3, [pc, #204]	; (80022e0 <SecAlm_LightsBuzzerControl+0x130>)
 8002212:	2200      	movs	r2, #0
 8002214:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatusCounter 							= STD_LOW;
 8002216:	4b31      	ldr	r3, [pc, #196]	; (80022dc <SecAlm_LightsBuzzerControl+0x12c>)
 8002218:	2200      	movs	r2, #0
 800221a:	801a      	strh	r2, [r3, #0]
		/* Stop the os timer assigned to security alarm trigger. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmAlarm_TimerHandle);
 800221c:	4b31      	ldr	r3, [pc, #196]	; (80022e4 <SecAlm_LightsBuzzerControl+0x134>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f00c fa22 	bl	800e66a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		/* Turn off the lights to make sure their state is off before any other action. */
		SecAlm_TurnOnExtLights();
 8002226:	f000 f893 	bl	8002350 <SecAlm_TurnOnExtLights>
		/* do nothing */
	}
	/* The counter resets every 10 seconds, if a reset of the timer
	 * occurs, then reset the variables related to the security
	 * alarm trigger. */
	if(SecAlm_SensorStatusCounter == STD_LOW)
 800222a:	4b2c      	ldr	r3, [pc, #176]	; (80022dc <SecAlm_LightsBuzzerControl+0x12c>)
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d107      	bne.n	8002242 <SecAlm_LightsBuzzerControl+0x92>
	{
		sensorStatus 	= STD_LOW;
 8002232:	2300      	movs	r3, #0
 8002234:	607b      	str	r3, [r7, #4]
		SecAlm_Trigger 	= STD_LOW;
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <SecAlm_LightsBuzzerControl+0x118>)
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange = STD_LOW;
 800223c:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <SecAlm_LightsBuzzerControl+0x128>)
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the sensor status is high, trigger the alarm. */
	if(sensorStatus == STD_HIGH)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d102      	bne.n	800224e <SecAlm_LightsBuzzerControl+0x9e>
	{
		SecAlm_Trigger = STD_HIGH;
 8002248:	4b1f      	ldr	r3, [pc, #124]	; (80022c8 <SecAlm_LightsBuzzerControl+0x118>)
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the trigger is set to high, perform alarm triggering. */
	if(SecAlm_Trigger == STD_HIGH)
 800224e:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <SecAlm_LightsBuzzerControl+0x118>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d12b      	bne.n	80022ae <SecAlm_LightsBuzzerControl+0xfe>
	{
		SecAlm_ToggleAlarmLed(STD_LOW);
 8002256:	2000      	movs	r0, #0
 8002258:	f000 f902 	bl	8002460 <SecAlm_ToggleAlarmLed>
		/* One alarm cycle is performed consisting of 10 seconds. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmAlarm_TimerHandle) == 0)
 800225c:	4b21      	ldr	r3, [pc, #132]	; (80022e4 <SecAlm_LightsBuzzerControl+0x134>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f008 f940 	bl	800a4e6 <osTimerIsRunning>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d106      	bne.n	800227a <SecAlm_LightsBuzzerControl+0xca>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmAlarm_TimerHandle, 500);
 800226c:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <SecAlm_LightsBuzzerControl+0x134>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002274:	4618      	mov	r0, r3
 8002276:	f00c f9eb 	bl	800e650 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Cycle between on and off states of buzzer and lights. */
		if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 1)
 800227a:	4b14      	ldr	r3, [pc, #80]	; (80022cc <SecAlm_LightsBuzzerControl+0x11c>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <SecAlm_LightsBuzzerControl+0xe4>
		{
			SecAlm_PinStateChange = STD_HIGH;
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <SecAlm_LightsBuzzerControl+0x128>)
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 800228e:	f000 f85f 	bl	8002350 <SecAlm_TurnOnExtLights>
	}
	else
	{
		/* do nothing */
	}
}
 8002292:	e013      	b.n	80022bc <SecAlm_LightsBuzzerControl+0x10c>
		else if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 0)
 8002294:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <SecAlm_LightsBuzzerControl+0x11c>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10c      	bne.n	80022bc <SecAlm_LightsBuzzerControl+0x10c>
			SecAlm_PinStateChange = STD_LOW;
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <SecAlm_LightsBuzzerControl+0x128>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 80022a8:	f000 f852 	bl	8002350 <SecAlm_TurnOnExtLights>
}
 80022ac:	e006      	b.n	80022bc <SecAlm_LightsBuzzerControl+0x10c>
	else if(SecAlm_Trigger == STD_LOW)
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <SecAlm_LightsBuzzerControl+0x118>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d102      	bne.n	80022bc <SecAlm_LightsBuzzerControl+0x10c>
		SecAlm_ToggleAlarmBuzzer(STD_LOW);
 80022b6:	2000      	movs	r0, #0
 80022b8:	f000 f8c0 	bl	800243c <SecAlm_ToggleAlarmBuzzer>
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	2000011d 	.word	0x2000011d
 80022c8:	20000114 	.word	0x20000114
 80022cc:	20000116 	.word	0x20000116
 80022d0:	200000d3 	.word	0x200000d3
 80022d4:	200000d5 	.word	0x200000d5
 80022d8:	20000115 	.word	0x20000115
 80022dc:	20000118 	.word	0x20000118
 80022e0:	2000011a 	.word	0x2000011a
 80022e4:	20000250 	.word	0x20000250

080022e8 <SecAlm_VibSenStatus>:
/***********************************************************************************
* Function: SecAlm_VibSenStatus										               *
* Description: Updates the vibration sensor status based on measurements.		   *
************************************************************************************/
StdReturnType SecAlm_VibSenStatus()
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
	/* Local variable for sensor status. */
	uint16 sensorStatus = STD_LOW;
 80022ee:	2300      	movs	r3, #0
 80022f0:	80fb      	strh	r3, [r7, #6]
	/* Read the sensor value. */
	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(SECALM_VS_REQUEST);
 80022f2:	2001      	movs	r0, #1
 80022f4:	f000 f8c6 	bl	8002484 <SenCtrl_ProcessSensorValue>
	/* If the sensor was triggered. */
	if(SecAlm_SensorState == STD_HIGH)
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <SecAlm_VibSenStatus+0x5c>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d10c      	bne.n	800231a <SecAlm_VibSenStatus+0x32>
	{
		/* Count for how long it has been triggered. */
		SecAlm_SensorStatusCounter = SecAlm_SensorStatusCounter + 1;
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <SecAlm_VibSenStatus+0x60>)
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	3301      	adds	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <SecAlm_VibSenStatus+0x60>)
 800230a:	801a      	strh	r2, [r3, #0]
		/* Start the reset timer for the counter variable. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlm_AlarmResetHandle, 10000);
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <SecAlm_VibSenStatus+0x64>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f242 7110 	movw	r1, #10000	; 0x2710
 8002314:	4618      	mov	r0, r3
 8002316:	f00c f99b 	bl	800e650 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
	else
	{
		/* do nothing */
	}
	/* If the sensor was triggered enough times. */
	if(SecAlm_SensorStatusCounter >= 300)
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <SecAlm_VibSenStatus+0x60>)
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002322:	d302      	bcc.n	800232a <SecAlm_VibSenStatus+0x42>
	{
		/* Set the sensor status to high. */
		sensorStatus = STD_HIGH;
 8002324:	2301      	movs	r3, #1
 8002326:	80fb      	strh	r3, [r7, #6]
 8002328:	e006      	b.n	8002338 <SecAlm_VibSenStatus+0x50>
	}
	else if(SecAlm_SensorStatusCounter < 300)
 800232a:	4b07      	ldr	r3, [pc, #28]	; (8002348 <SecAlm_VibSenStatus+0x60>)
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002332:	d201      	bcs.n	8002338 <SecAlm_VibSenStatus+0x50>
	{
		/* Set the sensor status to low. */
		sensorStatus = STD_LOW;
 8002334:	2300      	movs	r3, #0
 8002336:	80fb      	strh	r3, [r7, #6]
	else
	{
		/* do nothing */
	}
	/* Return sensor status. */
	return sensorStatus;
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	b2db      	uxtb	r3, r3
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	2000011c 	.word	0x2000011c
 8002348:	20000118 	.word	0x20000118
 800234c:	20000238 	.word	0x20000238

08002350 <SecAlm_TurnOnExtLights>:
/***********************************************************************************
* Function: SecAlm_TurnOnExtLights										           *
* Description: Trigger the exterior lights and buzzer.							   *
************************************************************************************/
VOID SecAlm_TurnOnExtLights()
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
	/* Turn on the lights and the buzzer. */
	if(SecAlm_PinStateChange == STD_HIGH)
 8002354:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <SecAlm_TurnOnExtLights+0x84>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d118      	bne.n	800238e <SecAlm_TurnOnExtLights+0x3e>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 800235c:	2100      	movs	r1, #0
 800235e:	481e      	ldr	r0, [pc, #120]	; (80023d8 <SecAlm_TurnOnExtLights+0x88>)
 8002360:	f00b ffb4 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8002364:	2104      	movs	r1, #4
 8002366:	481c      	ldr	r0, [pc, #112]	; (80023d8 <SecAlm_TurnOnExtLights+0x88>)
 8002368:	f00b ffb0 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 800236c:	2108      	movs	r1, #8
 800236e:	481b      	ldr	r0, [pc, #108]	; (80023dc <SecAlm_TurnOnExtLights+0x8c>)
 8002370:	f00b ffac 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 8002374:	210c      	movs	r1, #12
 8002376:	4819      	ldr	r0, [pc, #100]	; (80023dc <SecAlm_TurnOnExtLights+0x8c>)
 8002378:	f00b ffa8 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 800237c:	2108      	movs	r1, #8
 800237e:	4818      	ldr	r0, [pc, #96]	; (80023e0 <SecAlm_TurnOnExtLights+0x90>)
 8002380:	f00b ffa4 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8002384:	210c      	movs	r1, #12
 8002386:	4816      	ldr	r0, [pc, #88]	; (80023e0 <SecAlm_TurnOnExtLights+0x90>)
 8002388:	f00b ffa0 	bl	800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 800238c:	e01b      	b.n	80023c6 <SecAlm_TurnOnExtLights+0x76>
	}
	else if(SecAlm_PinStateChange == STD_LOW)
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <SecAlm_TurnOnExtLights+0x84>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d117      	bne.n	80023c6 <SecAlm_TurnOnExtLights+0x76>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8002396:	2100      	movs	r1, #0
 8002398:	480f      	ldr	r0, [pc, #60]	; (80023d8 <SecAlm_TurnOnExtLights+0x88>)
 800239a:	f00b ffa4 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 800239e:	2104      	movs	r1, #4
 80023a0:	480d      	ldr	r0, [pc, #52]	; (80023d8 <SecAlm_TurnOnExtLights+0x88>)
 80023a2:	f00b ffa0 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 80023a6:	2108      	movs	r1, #8
 80023a8:	480c      	ldr	r0, [pc, #48]	; (80023dc <SecAlm_TurnOnExtLights+0x8c>)
 80023aa:	f00b ff9c 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 80023ae:	210c      	movs	r1, #12
 80023b0:	480a      	ldr	r0, [pc, #40]	; (80023dc <SecAlm_TurnOnExtLights+0x8c>)
 80023b2:	f00b ff98 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80023b6:	2108      	movs	r1, #8
 80023b8:	4809      	ldr	r0, [pc, #36]	; (80023e0 <SecAlm_TurnOnExtLights+0x90>)
 80023ba:	f00b ff94 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80023be:	210c      	movs	r1, #12
 80023c0:	4807      	ldr	r0, [pc, #28]	; (80023e0 <SecAlm_TurnOnExtLights+0x90>)
 80023c2:	f00b ff90 	bl	800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	}
	SecAlm_ToggleAlarmBuzzer(SecAlm_PinStateChange);
 80023c6:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <SecAlm_TurnOnExtLights+0x84>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f836 	bl	800243c <SecAlm_ToggleAlarmBuzzer>
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000115 	.word	0x20000115
 80023d8:	2000032c 	.word	0x2000032c
 80023dc:	200003e0 	.word	0x200003e0
 80023e0:	20000494 	.word	0x20000494

080023e4 <SecAlm_MainFunction>:
/***********************************************************************************
* Function: SecAlm_MainFunction										           	   *
* Description: Process application states.										   *
************************************************************************************/
VOID SecAlm_MainFunction()
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
	SecAlm_LightsBuzzerControl();
 80023e8:	f7ff fee2 	bl	80021b0 <SecAlm_LightsBuzzerControl>
}
 80023ec:	bf00      	nop
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <SecAlm_Init>:
/***********************************************************************************
* Function: SecAlm_Init										                       *
* Description: Initialize the application.										   *
************************************************************************************/
StdReturnType SecAlm_Init()
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
	/* Set the variables to 0. */
	SecAlm_Trigger 						= STD_LOW;
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <SecAlm_Init+0x34>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
	SecAlm_PinStateChange 				= STD_LOW;
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <SecAlm_Init+0x38>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
	SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <SecAlm_Init+0x3c>)
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
	SecAlm_SensorStatusCounter 			= STD_LOW;
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <SecAlm_Init+0x40>)
 8002408:	2200      	movs	r2, #0
 800240a:	801a      	strh	r2, [r3, #0]
	SecAlm_SensorStatus 				= STD_LOW;
 800240c:	4b09      	ldr	r3, [pc, #36]	; (8002434 <SecAlm_Init+0x44>)
 800240e:	2200      	movs	r2, #0
 8002410:	801a      	strh	r2, [r3, #0]
	SecAlm_TriggerPreviousState 		= STD_LOW;
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <SecAlm_Init+0x48>)
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
	SecAlm_ToggleAlarmLed(STD_LOW);
 8002418:	2000      	movs	r0, #0
 800241a:	f000 f821 	bl	8002460 <SecAlm_ToggleAlarmLed>
	return E_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000114 	.word	0x20000114
 8002428:	20000115 	.word	0x20000115
 800242c:	20000116 	.word	0x20000116
 8002430:	20000118 	.word	0x20000118
 8002434:	2000011a 	.word	0x2000011a
 8002438:	2000011d 	.word	0x2000011d

0800243c <SecAlm_ToggleAlarmBuzzer>:
/***********************************************************************************
* Function: SecAlm_ToggleAlarmBuzzer										       *
* Description: Alarm buzzer trigger.                                               *
************************************************************************************/
VOID SecAlm_ToggleAlarmBuzzer(uint8 PinState)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	461a      	mov	r2, r3
 800244a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800244e:	4803      	ldr	r0, [pc, #12]	; (800245c <SecAlm_ToggleAlarmBuzzer+0x20>)
 8002450:	f00c f8ec 	bl	800e62c <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40020400 	.word	0x40020400

08002460 <SecAlm_ToggleAlarmLed>:
/***********************************************************************************
* Function: SecAlm_ToggleAlarmLed										           *
* Description: Alarm LED trigger.												   *
************************************************************************************/
VOID SecAlm_ToggleAlarmLed(uint8 PinState)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	461a      	mov	r2, r3
 800246e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002472:	4803      	ldr	r0, [pc, #12]	; (8002480 <SecAlm_ToggleAlarmLed+0x20>)
 8002474:	f00c f8da 	bl	800e62c <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40020400 	.word	0x40020400

08002484 <SenCtrl_ProcessSensorValue>:
/***********************************************************************************
* Function: SenCtrl_ProcessSensorValue									   	       *
* Description: Process the request for the sensor value. 	                       *
************************************************************************************/
VOID SenCtrl_ProcessSensorValue(uint8 request)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
	/* Store request into local variable. */
	uint8 localRequest = request;
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	77fb      	strb	r3, [r7, #31]
	/* Process sensor request. */
	switch(localRequest)
 8002492:	7ffb      	ldrb	r3, [r7, #31]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <SenCtrl_ProcessSensorValue+0x1a>
 8002498:	2b01      	cmp	r3, #1
 800249a:	d01a      	beq.n	80024d2 <SenCtrl_ProcessSensorValue+0x4e>
			{
				/* do nothing */
			}
			break;
		default:
			break;
 800249c:	e038      	b.n	8002510 <SenCtrl_ProcessSensorValue+0x8c>
			if(SenCtrl_MeasuredValues[SENCTRL_EXTLIGHTS_LS_POSITION] >= 4000)
 800249e:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <SenCtrl_ProcessSensorValue+0x94>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80024a6:	d307      	bcc.n	80024b8 <SenCtrl_ProcessSensorValue+0x34>
				uint32 localls = 1;
 80024a8:	2301      	movs	r3, #1
 80024aa:	61bb      	str	r3, [r7, #24]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(&localls);
 80024ac:	f107 0318 	add.w	r3, r7, #24
 80024b0:	4618      	mov	r0, r3
 80024b2:	f00b fe0b 	bl	800e0cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>
			break;
 80024b6:	e028      	b.n	800250a <SenCtrl_ProcessSensorValue+0x86>
			else if(SenCtrl_MeasuredValues[SENCTRL_EXTLIGHTS_LS_POSITION] < 4000)
 80024b8:	4b17      	ldr	r3, [pc, #92]	; (8002518 <SenCtrl_ProcessSensorValue+0x94>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80024c0:	d223      	bcs.n	800250a <SenCtrl_ProcessSensorValue+0x86>
				uint32 localls = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(&localls);
 80024c6:	f107 0314 	add.w	r3, r7, #20
 80024ca:	4618      	mov	r0, r3
 80024cc:	f00b fdfe 	bl	800e0cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>
			break;
 80024d0:	e01b      	b.n	800250a <SenCtrl_ProcessSensorValue+0x86>
			if(SenCtrl_MeasuredValues[SENCTRL_SECALM_VS_REQUEST] == 4095)
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <SenCtrl_ProcessSensorValue+0x94>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80024da:	4293      	cmp	r3, r2
 80024dc:	d107      	bne.n	80024ee <SenCtrl_ProcessSensorValue+0x6a>
				uint32 localvs = STD_HIGH;
 80024de:	2301      	movs	r3, #1
 80024e0:	613b      	str	r3, [r7, #16]
				Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(&localvs);
 80024e2:	f107 0310 	add.w	r3, r7, #16
 80024e6:	4618      	mov	r0, r3
 80024e8:	f00b fdde 	bl	800e0a8 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>
			break;
 80024ec:	e00f      	b.n	800250e <SenCtrl_ProcessSensorValue+0x8a>
			else if(SenCtrl_MeasuredValues[SENCTRL_SECALM_VS_REQUEST] < 4095)
 80024ee:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <SenCtrl_ProcessSensorValue+0x94>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d809      	bhi.n	800250e <SenCtrl_ProcessSensorValue+0x8a>
				uint32 localvs = STD_LOW;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
				Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(&localvs);
 80024fe:	f107 030c 	add.w	r3, r7, #12
 8002502:	4618      	mov	r0, r3
 8002504:	f00b fdd0 	bl	800e0a8 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>
			break;
 8002508:	e001      	b.n	800250e <SenCtrl_ProcessSensorValue+0x8a>
			break;
 800250a:	bf00      	nop
 800250c:	e000      	b.n	8002510 <SenCtrl_ProcessSensorValue+0x8c>
			break;
 800250e:	bf00      	nop
	}
}
 8002510:	bf00      	nop
 8002512:	3720      	adds	r7, #32
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000120 	.word	0x20000120

0800251c <Uart_Init>:
/***********************************************************************************
* Function: Uart_Init										       				   *
* Description: Initialize the protocol.									 		   *
************************************************************************************/
StdReturnType Uart_Init()
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
	/* Set the instance. */
	huart1.Instance = USART1;
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <Uart_Init+0x50>)
 8002522:	4a13      	ldr	r2, [pc, #76]	; (8002570 <Uart_Init+0x54>)
 8002524:	601a      	str	r2, [r3, #0]
	/* Set the baud rate for the protocol. */
	huart1.Init.BaudRate = 9600;
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <Uart_Init+0x50>)
 8002528:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800252c:	605a      	str	r2, [r3, #4]
	/* Set the number of data bits transmitted or received. */
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <Uart_Init+0x50>)
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]
	/* Set the number of stop bits transmitted. */
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002534:	4b0d      	ldr	r3, [pc, #52]	; (800256c <Uart_Init+0x50>)
 8002536:	2200      	movs	r2, #0
 8002538:	60da      	str	r2, [r3, #12]
	/* Set the parity mode. */
	huart1.Init.Parity = UART_PARITY_NONE;
 800253a:	4b0c      	ldr	r3, [pc, #48]	; (800256c <Uart_Init+0x50>)
 800253c:	2200      	movs	r2, #0
 800253e:	611a      	str	r2, [r3, #16]
	/* Set the protocol mode. */
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <Uart_Init+0x50>)
 8002542:	220c      	movs	r2, #12
 8002544:	615a      	str	r2, [r3, #20]
	/* Set the hardware flow control. */
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <Uart_Init+0x50>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
	/* Set the over sampling value. */
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800254c:	4b07      	ldr	r3, [pc, #28]	; (800256c <Uart_Init+0x50>)
 800254e:	2200      	movs	r2, #0
 8002550:	61da      	str	r2, [r3, #28]
	/* Call for error callback if the initialization is not performed accordingly. */
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002552:	4806      	ldr	r0, [pc, #24]	; (800256c <Uart_Init+0x50>)
 8002554:	f005 fe7c 	bl	8008250 <HAL_UART_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <Uart_Init+0x48>
	{
		HAL_UART_ErrorCallback(&huart1);
 800255e:	4803      	ldr	r0, [pc, #12]	; (800256c <Uart_Init+0x50>)
 8002560:	f000 f8ae 	bl	80026c0 <HAL_UART_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200005fc 	.word	0x200005fc
 8002570:	40011000 	.word	0x40011000

08002574 <Uart_DeInit>:
/***********************************************************************************
* Function: Uart_DeInit										   					   *
* Description: De-initialize the protocol.									       *
************************************************************************************/
StdReturnType Uart_DeInit()
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
	/* Call for protocol de-init function. */
	HAL_UART_DeInit(&huart1);
 8002578:	4802      	ldr	r0, [pc, #8]	; (8002584 <Uart_DeInit+0x10>)
 800257a:	f005 fec3 	bl	8008304 <HAL_UART_DeInit>
	return E_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}
 8002584:	200005fc 	.word	0x200005fc

08002588 <Uart_MainFunction>:
/***********************************************************************************
* Function: Uart_MainFunction										   			   *
* Description: Protocol main function.									           *
************************************************************************************/
VOID Uart_MainFunction()
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
	/* Get the error status in local variable. */
	uint32 localState = HAL_UART_GetState(&huart1);
 800258e:	4849      	ldr	r0, [pc, #292]	; (80026b4 <Uart_MainFunction+0x12c>)
 8002590:	f006 fa42 	bl	8008a18 <HAL_UART_GetState>
 8002594:	4603      	mov	r3, r0
 8002596:	607b      	str	r3, [r7, #4]
	switch(localState)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2be0      	cmp	r3, #224	; 0xe0
 800259c:	d07e      	beq.n	800269c <Uart_MainFunction+0x114>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2be0      	cmp	r3, #224	; 0xe0
 80025a2:	f200 8082 	bhi.w	80026aa <Uart_MainFunction+0x122>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b24      	cmp	r3, #36	; 0x24
 80025aa:	d84f      	bhi.n	800264c <Uart_MainFunction+0xc4>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b24      	cmp	r3, #36	; 0x24
 80025b0:	d87b      	bhi.n	80026aa <Uart_MainFunction+0x122>
 80025b2:	a201      	add	r2, pc, #4	; (adr r2, 80025b8 <Uart_MainFunction+0x30>)
 80025b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b8:	08002655 	.word	0x08002655
 80025bc:	080026ab 	.word	0x080026ab
 80025c0:	080026ab 	.word	0x080026ab
 80025c4:	080026ab 	.word	0x080026ab
 80025c8:	080026ab 	.word	0x080026ab
 80025cc:	080026ab 	.word	0x080026ab
 80025d0:	080026ab 	.word	0x080026ab
 80025d4:	080026ab 	.word	0x080026ab
 80025d8:	080026ab 	.word	0x080026ab
 80025dc:	080026ab 	.word	0x080026ab
 80025e0:	080026ab 	.word	0x080026ab
 80025e4:	080026ab 	.word	0x080026ab
 80025e8:	080026ab 	.word	0x080026ab
 80025ec:	080026ab 	.word	0x080026ab
 80025f0:	080026ab 	.word	0x080026ab
 80025f4:	080026ab 	.word	0x080026ab
 80025f8:	080026ab 	.word	0x080026ab
 80025fc:	080026ab 	.word	0x080026ab
 8002600:	080026ab 	.word	0x080026ab
 8002604:	080026ab 	.word	0x080026ab
 8002608:	080026ab 	.word	0x080026ab
 800260c:	080026ab 	.word	0x080026ab
 8002610:	080026ab 	.word	0x080026ab
 8002614:	080026ab 	.word	0x080026ab
 8002618:	080026ab 	.word	0x080026ab
 800261c:	080026ab 	.word	0x080026ab
 8002620:	080026ab 	.word	0x080026ab
 8002624:	080026ab 	.word	0x080026ab
 8002628:	080026ab 	.word	0x080026ab
 800262c:	080026ab 	.word	0x080026ab
 8002630:	080026ab 	.word	0x080026ab
 8002634:	080026ab 	.word	0x080026ab
 8002638:	0800265d 	.word	0x0800265d
 800263c:	08002677 	.word	0x08002677
 8002640:	0800267f 	.word	0x0800267f
 8002644:	08002687 	.word	0x08002687
 8002648:	0800266f 	.word	0x0800266f
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2ba0      	cmp	r3, #160	; 0xa0
 8002650:	d01d      	beq.n	800268e <Uart_MainFunction+0x106>
		case HAL_UART_STATE_ERROR:
			Uart_BswState = localState;
			HAL_UART_ErrorCallback(&huart1);
			break;
		default:
			break;
 8002652:	e02a      	b.n	80026aa <Uart_MainFunction+0x122>
			Uart_BswState = localState;
 8002654:	4a18      	ldr	r2, [pc, #96]	; (80026b8 <Uart_MainFunction+0x130>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6013      	str	r3, [r2, #0]
			break;
 800265a:	e027      	b.n	80026ac <Uart_MainFunction+0x124>
			HAL_UART_Receive_IT(&huart1, &Rte_P_Btc_BtcPort_Btc_RxData, 1);
 800265c:	2201      	movs	r2, #1
 800265e:	4917      	ldr	r1, [pc, #92]	; (80026bc <Uart_MainFunction+0x134>)
 8002660:	4814      	ldr	r0, [pc, #80]	; (80026b4 <Uart_MainFunction+0x12c>)
 8002662:	f005 fece 	bl	8008402 <HAL_UART_Receive_IT>
			Uart_BswState = localState;
 8002666:	4a14      	ldr	r2, [pc, #80]	; (80026b8 <Uart_MainFunction+0x130>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6013      	str	r3, [r2, #0]
			break;
 800266c:	e01e      	b.n	80026ac <Uart_MainFunction+0x124>
			Uart_BswState = localState;
 800266e:	4a12      	ldr	r2, [pc, #72]	; (80026b8 <Uart_MainFunction+0x130>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6013      	str	r3, [r2, #0]
			break;
 8002674:	e01a      	b.n	80026ac <Uart_MainFunction+0x124>
			Uart_BswState = localState;
 8002676:	4a10      	ldr	r2, [pc, #64]	; (80026b8 <Uart_MainFunction+0x130>)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6013      	str	r3, [r2, #0]
			break;
 800267c:	e016      	b.n	80026ac <Uart_MainFunction+0x124>
			Uart_BswState = localState;
 800267e:	4a0e      	ldr	r2, [pc, #56]	; (80026b8 <Uart_MainFunction+0x130>)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6013      	str	r3, [r2, #0]
			break;
 8002684:	e012      	b.n	80026ac <Uart_MainFunction+0x124>
			Uart_BswState = localState;
 8002686:	4a0c      	ldr	r2, [pc, #48]	; (80026b8 <Uart_MainFunction+0x130>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6013      	str	r3, [r2, #0]
			break;
 800268c:	e00e      	b.n	80026ac <Uart_MainFunction+0x124>
			Uart_BswState = localState;
 800268e:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <Uart_MainFunction+0x130>)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6013      	str	r3, [r2, #0]
			HAL_UART_ErrorCallback(&huart1);
 8002694:	4807      	ldr	r0, [pc, #28]	; (80026b4 <Uart_MainFunction+0x12c>)
 8002696:	f000 f813 	bl	80026c0 <HAL_UART_ErrorCallback>
			break;
 800269a:	e007      	b.n	80026ac <Uart_MainFunction+0x124>
			Uart_BswState = localState;
 800269c:	4a06      	ldr	r2, [pc, #24]	; (80026b8 <Uart_MainFunction+0x130>)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6013      	str	r3, [r2, #0]
			HAL_UART_ErrorCallback(&huart1);
 80026a2:	4804      	ldr	r0, [pc, #16]	; (80026b4 <Uart_MainFunction+0x12c>)
 80026a4:	f000 f80c 	bl	80026c0 <HAL_UART_ErrorCallback>
			break;
 80026a8:	e000      	b.n	80026ac <Uart_MainFunction+0x124>
			break;
 80026aa:	bf00      	nop
	}
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	200005fc 	.word	0x200005fc
 80026b8:	20000128 	.word	0x20000128
 80026bc:	200000b0 	.word	0x200000b0

080026c0 <HAL_UART_ErrorCallback>:
/***********************************************************************************
* Function: HAL_UART_ErrorCallback										   		   *
* Description: Process error callback.								               *
************************************************************************************/
VOID HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	/* Get error status in local variable. */
	uint32 receivedValue = HAL_UART_GetError(huart);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f006 f9c3 	bl	8008a54 <HAL_UART_GetError>
 80026ce:	60f8      	str	r0, [r7, #12]
	/* Process each error.
	 * Store each in error in the system manager fault array.
	 * In case of DMA error re-initialize the protocol. */
	switch(receivedValue)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b10      	cmp	r3, #16
 80026d4:	d847      	bhi.n	8002766 <HAL_UART_ErrorCallback+0xa6>
 80026d6:	a201      	add	r2, pc, #4	; (adr r2, 80026dc <HAL_UART_ErrorCallback+0x1c>)
 80026d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026dc:	08002767 	.word	0x08002767
 80026e0:	08002721 	.word	0x08002721
 80026e4:	0800272f 	.word	0x0800272f
 80026e8:	08002767 	.word	0x08002767
 80026ec:	0800273d 	.word	0x0800273d
 80026f0:	08002767 	.word	0x08002767
 80026f4:	08002767 	.word	0x08002767
 80026f8:	08002767 	.word	0x08002767
 80026fc:	0800274b 	.word	0x0800274b
 8002700:	08002767 	.word	0x08002767
 8002704:	08002767 	.word	0x08002767
 8002708:	08002767 	.word	0x08002767
 800270c:	08002767 	.word	0x08002767
 8002710:	08002767 	.word	0x08002767
 8002714:	08002767 	.word	0x08002767
 8002718:	08002767 	.word	0x08002767
 800271c:	08002759 	.word	0x08002759
	{
		case HAL_UART_ERROR_NONE:
			/* do nothing */
			break;
		case HAL_UART_ERROR_PE:
			SystemManager_Fault[UART_ERROR_PE]++;
 8002720:	4b13      	ldr	r3, [pc, #76]	; (8002770 <HAL_UART_ErrorCallback+0xb0>)
 8002722:	7c5b      	ldrb	r3, [r3, #17]
 8002724:	3301      	adds	r3, #1
 8002726:	b2da      	uxtb	r2, r3
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_UART_ErrorCallback+0xb0>)
 800272a:	745a      	strb	r2, [r3, #17]
			break;
 800272c:	e01c      	b.n	8002768 <HAL_UART_ErrorCallback+0xa8>
		case HAL_UART_ERROR_NE:
			SystemManager_Fault[UART_ERROR_NE]++;
 800272e:	4b10      	ldr	r3, [pc, #64]	; (8002770 <HAL_UART_ErrorCallback+0xb0>)
 8002730:	7c9b      	ldrb	r3, [r3, #18]
 8002732:	3301      	adds	r3, #1
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <HAL_UART_ErrorCallback+0xb0>)
 8002738:	749a      	strb	r2, [r3, #18]
			break;
 800273a:	e015      	b.n	8002768 <HAL_UART_ErrorCallback+0xa8>
		case HAL_UART_ERROR_FE:
			SystemManager_Fault[UART_ERROR_FE]++;
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <HAL_UART_ErrorCallback+0xb0>)
 800273e:	7cdb      	ldrb	r3, [r3, #19]
 8002740:	3301      	adds	r3, #1
 8002742:	b2da      	uxtb	r2, r3
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <HAL_UART_ErrorCallback+0xb0>)
 8002746:	74da      	strb	r2, [r3, #19]
			break;
 8002748:	e00e      	b.n	8002768 <HAL_UART_ErrorCallback+0xa8>
		case HAL_UART_ERROR_ORE:
			SystemManager_Fault[UART_ERROR_ORE]++;
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_UART_ErrorCallback+0xb0>)
 800274c:	7d1b      	ldrb	r3, [r3, #20]
 800274e:	3301      	adds	r3, #1
 8002750:	b2da      	uxtb	r2, r3
 8002752:	4b07      	ldr	r3, [pc, #28]	; (8002770 <HAL_UART_ErrorCallback+0xb0>)
 8002754:	751a      	strb	r2, [r3, #20]
			break;
 8002756:	e007      	b.n	8002768 <HAL_UART_ErrorCallback+0xa8>
		case HAL_UART_ERROR_DMA:
			SystemManager_Fault[UART_ERROR_ORE]++;
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_UART_ErrorCallback+0xb0>)
 800275a:	7d1b      	ldrb	r3, [r3, #20]
 800275c:	3301      	adds	r3, #1
 800275e:	b2da      	uxtb	r2, r3
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <HAL_UART_ErrorCallback+0xb0>)
 8002762:	751a      	strb	r2, [r3, #20]
			break;
 8002764:	e000      	b.n	8002768 <HAL_UART_ErrorCallback+0xa8>
		default:
			break;
 8002766:	bf00      	nop
	}
}
 8002768:	bf00      	nop
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20005ff4 	.word	0x20005ff4

08002774 <HAL_UART_RxCpltCallback>:
/***********************************************************************************
* Function: HAL_UART_RxCpltCallback										           *
* Description: Process received data.									   		   *
************************************************************************************/
VOID HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	/* If the UART 1 is calling the callback. */
	if(huart->Instance == USART1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a23      	ldr	r2, [pc, #140]	; (8002810 <HAL_UART_RxCpltCallback+0x9c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d140      	bne.n	8002808 <HAL_UART_RxCpltCallback+0x94>
	{
		/* If the data received is not nullptr. */
		if(Rte_P_Btc_BtcPort_Btc_RxData == '\n')
 8002786:	4b23      	ldr	r3, [pc, #140]	; (8002814 <HAL_UART_RxCpltCallback+0xa0>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b0a      	cmp	r3, #10
 800278c:	d11c      	bne.n	80027c8 <HAL_UART_RxCpltCallback+0x54>
		{
			/* If the buffer length counter is less than maximum value. */
			if(Rte_P_Btc_BtcPort_Btc_RxCount <= 3)
 800278e:	4b22      	ldr	r3, [pc, #136]	; (8002818 <HAL_UART_RxCpltCallback+0xa4>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b03      	cmp	r3, #3
 8002794:	d80f      	bhi.n	80027b6 <HAL_UART_RxCpltCallback+0x42>
			{
				/* Convert the data received to uint8.*/
				uint8 asciiToUint = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
				asciiToUint = atoi((char*)Rte_P_Btc_BtcPort_Btc_DataBuffer);
 800279a:	4820      	ldr	r0, [pc, #128]	; (800281c <HAL_UART_RxCpltCallback+0xa8>)
 800279c:	f00c fda0 	bl	800f2e0 <atoi>
 80027a0:	4603      	mov	r3, r0
 80027a2:	73fb      	strb	r3, [r7, #15]
				Rte_Write_Btc_BtcPort_Btc_RxData(asciiToUint);
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f00b fdaa 	bl	800e300 <Rte_Write_Btc_BtcPort_Btc_RxData>
				Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(Rte_P_Btc_BtcPort_Btc_RxData);
 80027ac:	4b19      	ldr	r3, [pc, #100]	; (8002814 <HAL_UART_RxCpltCallback+0xa0>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f00b fded 	bl	800e390 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
			else
			{
				/* do nothing */
			}
			/* Set the counter to 0 if it is more than maximum value. */
			UartCounter_Btc_RxCount = 0;
 80027b6:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <HAL_UART_RxCpltCallback+0xac>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(UartCounter_Btc_RxCount);
 80027bc:	4b18      	ldr	r3, [pc, #96]	; (8002820 <HAL_UART_RxCpltCallback+0xac>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f00b fdad 	bl	800e320 <Rte_Write_Btc_BtcPort_Btc_RxCount>
 80027c6:	e01a      	b.n	80027fe <HAL_UART_RxCpltCallback+0x8a>
		}/* If the message was not fully processed, continue with the processing into the buffer. */
		else if(Rte_P_Btc_BtcPort_Btc_RxCount < 3)
 80027c8:	4b13      	ldr	r3, [pc, #76]	; (8002818 <HAL_UART_RxCpltCallback+0xa4>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d80e      	bhi.n	80027ee <HAL_UART_RxCpltCallback+0x7a>
		{
			Rte_Write_Btc_BtcPort_Btc_DataBuffer(Rte_P_Btc_BtcPort_Btc_RxData, UartCounter_Btc_RxCount);
 80027d0:	4b10      	ldr	r3, [pc, #64]	; (8002814 <HAL_UART_RxCpltCallback+0xa0>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	4a12      	ldr	r2, [pc, #72]	; (8002820 <HAL_UART_RxCpltCallback+0xac>)
 80027d6:	7812      	ldrb	r2, [r2, #0]
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f00b fdb0 	bl	800e340 <Rte_Write_Btc_BtcPort_Btc_DataBuffer>
			UartCounter_Btc_RxCount++;
 80027e0:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <HAL_UART_RxCpltCallback+0xac>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	3301      	adds	r3, #1
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <HAL_UART_RxCpltCallback+0xac>)
 80027ea:	701a      	strb	r2, [r3, #0]
 80027ec:	e007      	b.n	80027fe <HAL_UART_RxCpltCallback+0x8a>
		}
		else
		{
			/* Set the counter to 0 otherwise. */
			UartCounter_Btc_RxCount = 0;
 80027ee:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <HAL_UART_RxCpltCallback+0xac>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(UartCounter_Btc_RxCount);
 80027f4:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <HAL_UART_RxCpltCallback+0xac>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f00b fd91 	bl	800e320 <Rte_Write_Btc_BtcPort_Btc_RxCount>
		}
		/* Re-enable data transmission throuhg the protocol in interrupt mode. */
		HAL_UART_Receive_IT(&huart1, &Btc_RxData, 1);
 80027fe:	2201      	movs	r2, #1
 8002800:	4904      	ldr	r1, [pc, #16]	; (8002814 <HAL_UART_RxCpltCallback+0xa0>)
 8002802:	4808      	ldr	r0, [pc, #32]	; (8002824 <HAL_UART_RxCpltCallback+0xb0>)
 8002804:	f005 fdfd 	bl	8008402 <HAL_UART_Receive_IT>
	}
	else
	{
		/* do nothing */
	}
}
 8002808:	bf00      	nop
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40011000 	.word	0x40011000
 8002814:	200000b0 	.word	0x200000b0
 8002818:	200000b1 	.word	0x200000b1
 800281c:	200000ac 	.word	0x200000ac
 8002820:	2000012c 	.word	0x2000012c
 8002824:	200005fc 	.word	0x200005fc

08002828 <HAL_ADC_MspInit>:
  /* USER CODE END ADC1_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a34      	ldr	r2, [pc, #208]	; (8002918 <HAL_ADC_MspInit+0xf0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d161      	bne.n	800290e <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	4b33      	ldr	r3, [pc, #204]	; (800291c <HAL_ADC_MspInit+0xf4>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	4a32      	ldr	r2, [pc, #200]	; (800291c <HAL_ADC_MspInit+0xf4>)
 8002854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002858:	6453      	str	r3, [r2, #68]	; 0x44
 800285a:	4b30      	ldr	r3, [pc, #192]	; (800291c <HAL_ADC_MspInit+0xf4>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	4b2c      	ldr	r3, [pc, #176]	; (800291c <HAL_ADC_MspInit+0xf4>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4a2b      	ldr	r2, [pc, #172]	; (800291c <HAL_ADC_MspInit+0xf4>)
 8002870:	f043 0304 	orr.w	r3, r3, #4
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	4b29      	ldr	r3, [pc, #164]	; (800291c <HAL_ADC_MspInit+0xf4>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = VS_Pin|LS_Pin;
 8002882:	230c      	movs	r3, #12
 8002884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002886:	2303      	movs	r3, #3
 8002888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	4619      	mov	r1, r3
 8002894:	4822      	ldr	r0, [pc, #136]	; (8002920 <HAL_ADC_MspInit+0xf8>)
 8002896:	f003 f801 	bl	800589c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800289a:	4b22      	ldr	r3, [pc, #136]	; (8002924 <HAL_ADC_MspInit+0xfc>)
 800289c:	4a22      	ldr	r2, [pc, #136]	; (8002928 <HAL_ADC_MspInit+0x100>)
 800289e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80028a0:	4b20      	ldr	r3, [pc, #128]	; (8002924 <HAL_ADC_MspInit+0xfc>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028a6:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <HAL_ADC_MspInit+0xfc>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ac:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <HAL_ADC_MspInit+0xfc>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80028b2:	4b1c      	ldr	r3, [pc, #112]	; (8002924 <HAL_ADC_MspInit+0xfc>)
 80028b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028ba:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <HAL_ADC_MspInit+0xfc>)
 80028bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028c2:	4b18      	ldr	r3, [pc, #96]	; (8002924 <HAL_ADC_MspInit+0xfc>)
 80028c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80028ca:	4b16      	ldr	r3, [pc, #88]	; (8002924 <HAL_ADC_MspInit+0xfc>)
 80028cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028d0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028d2:	4b14      	ldr	r3, [pc, #80]	; (8002924 <HAL_ADC_MspInit+0xfc>)
 80028d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80028d8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80028da:	4b12      	ldr	r3, [pc, #72]	; (8002924 <HAL_ADC_MspInit+0xfc>)
 80028dc:	2204      	movs	r2, #4
 80028de:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80028e0:	4b10      	ldr	r3, [pc, #64]	; (8002924 <HAL_ADC_MspInit+0xfc>)
 80028e2:	2203      	movs	r2, #3
 80028e4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80028e6:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <HAL_ADC_MspInit+0xfc>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80028ec:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <HAL_ADC_MspInit+0xfc>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028f2:	480c      	ldr	r0, [pc, #48]	; (8002924 <HAL_ADC_MspInit+0xfc>)
 80028f4:	f002 f9ca 	bl	8004c8c <HAL_DMA_Init>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_ADC_MspInit+0xda>
    {
      Error_Handler();
 80028fe:	f00c fcc3 	bl	800f288 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a07      	ldr	r2, [pc, #28]	; (8002924 <HAL_ADC_MspInit+0xfc>)
 8002906:	639a      	str	r2, [r3, #56]	; 0x38
 8002908:	4a06      	ldr	r2, [pc, #24]	; (8002924 <HAL_ADC_MspInit+0xfc>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800290e:	bf00      	nop
 8002910:	3728      	adds	r7, #40	; 0x28
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40012000 	.word	0x40012000
 800291c:	40023800 	.word	0x40023800
 8002920:	40020800 	.word	0x40020800
 8002924:	20000194 	.word	0x20000194
 8002928:	40026410 	.word	0x40026410

0800292c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0c      	ldr	r2, [pc, #48]	; (800296c <HAL_ADC_MspDeInit+0x40>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d111      	bne.n	8002962 <HAL_ADC_MspDeInit+0x36>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <HAL_ADC_MspDeInit+0x44>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	4a0b      	ldr	r2, [pc, #44]	; (8002970 <HAL_ADC_MspDeInit+0x44>)
 8002944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002948:	6453      	str	r3, [r2, #68]	; 0x44

    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    HAL_GPIO_DeInit(GPIOC, VS_Pin|LS_Pin);
 800294a:	210c      	movs	r1, #12
 800294c:	4809      	ldr	r0, [pc, #36]	; (8002974 <HAL_ADC_MspDeInit+0x48>)
 800294e:	f003 f929 	bl	8005ba4 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002956:	4618      	mov	r0, r3
 8002958:	f002 fa46 	bl	8004de8 <HAL_DMA_DeInit>

    /* ADC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC_IRQn);
 800295c:	2012      	movs	r0, #18
 800295e:	f002 f8f6 	bl	8004b4e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40012000 	.word	0x40012000
 8002970:	40023800 	.word	0x40023800
 8002974:	40020800 	.word	0x40020800

08002978 <HAL_CRC_MspInit>:
  /* USER CODE END CRC_Init 2 */

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0b      	ldr	r2, [pc, #44]	; (80029b4 <HAL_CRC_MspInit+0x3c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d10d      	bne.n	80029a6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <HAL_CRC_MspInit+0x40>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	4a09      	ldr	r2, [pc, #36]	; (80029b8 <HAL_CRC_MspInit+0x40>)
 8002994:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002998:	6313      	str	r3, [r2, #48]	; 0x30
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <HAL_CRC_MspInit+0x40>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40023000 	.word	0x40023000
 80029b8:	40023800 	.word	0x40023800

080029bc <HAL_CRC_MspDeInit>:

void HAL_CRC_MspDeInit(CRC_HandleTypeDef* crcHandle)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a07      	ldr	r2, [pc, #28]	; (80029e8 <HAL_CRC_MspDeInit+0x2c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d105      	bne.n	80029da <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 80029ce:	4b07      	ldr	r3, [pc, #28]	; (80029ec <HAL_CRC_MspDeInit+0x30>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	4a06      	ldr	r2, [pc, #24]	; (80029ec <HAL_CRC_MspDeInit+0x30>)
 80029d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029d8:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40023000 	.word	0x40023000
 80029ec:	40023800 	.word	0x40023800

080029f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <MX_DMA_Init+0x30>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4a08      	ldr	r2, [pc, #32]	; (8002a20 <MX_DMA_Init+0x30>)
 8002a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a04:	6313      	str	r3, [r2, #48]	; 0x30
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <MX_DMA_Init+0x30>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0e:	607b      	str	r3, [r7, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]

}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800

08002a24 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
	Os_Counter++;
 8002a38:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <vApplicationTickHook+0x18>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	4a03      	ldr	r2, [pc, #12]	; (8002a4c <vApplicationTickHook+0x18>)
 8002a40:	6013      	str	r3, [r2, #0]
}
 8002a42:	bf00      	nop
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	200001fc 	.word	0x200001fc

08002a50 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
   SystemManager_SetFault(STACK_OVERFLOW_RESET);
 8002a5a:	200c      	movs	r0, #12
 8002a5c:	f00c fb20 	bl	800f0a0 <SystemManager_SetFault>
   SystemManager_PerformReset();
 8002a60:	f00c fb46 	bl	800f0f0 <SystemManager_PerformReset>
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
	SystemManager_SetFault(MALLOC_FAILED_RESET);
 8002a70:	200d      	movs	r0, #13
 8002a72:	f00c fb15 	bl	800f0a0 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8002a76:	f00c fb3b 	bl	800f0f0 <SystemManager_PerformReset>
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <PreSleepProcessing>:
/* USER CODE END 5 */

/* USER CODE BEGIN PREPOSTSLEEP */
void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <PostSleepProcessing>:

void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_MUTEX */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Sph_ASIL_APPL */
  Sph_ASIL_APPLHandle = osSemaphoreNew(1, 1, &Sph_ASIL_APPL_attributes);
 8002aac:	4a4d      	ldr	r2, [pc, #308]	; (8002be4 <MX_FREERTOS_Init+0x13c>)
 8002aae:	2101      	movs	r1, #1
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	f007 fd34 	bl	800a51e <osSemaphoreNew>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4a4b      	ldr	r2, [pc, #300]	; (8002be8 <MX_FREERTOS_Init+0x140>)
 8002aba:	6013      	str	r3, [r2, #0]

  /* creation of Sph_QM_APPL */
  Sph_QM_APPLHandle = osSemaphoreNew(1, 1, &Sph_QM_APPL_attributes);
 8002abc:	4a4b      	ldr	r2, [pc, #300]	; (8002bec <MX_FREERTOS_Init+0x144>)
 8002abe:	2101      	movs	r1, #1
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f007 fd2c 	bl	800a51e <osSemaphoreNew>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4a49      	ldr	r2, [pc, #292]	; (8002bf0 <MX_FREERTOS_Init+0x148>)
 8002aca:	6013      	str	r3, [r2, #0]

  /* creation of Sph_ASIL_BSW */
  Sph_ASIL_BSWHandle = osSemaphoreNew(1, 1, &Sph_ASIL_BSW_attributes);
 8002acc:	4a49      	ldr	r2, [pc, #292]	; (8002bf4 <MX_FREERTOS_Init+0x14c>)
 8002ace:	2101      	movs	r1, #1
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	f007 fd24 	bl	800a51e <osSemaphoreNew>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4a47      	ldr	r2, [pc, #284]	; (8002bf8 <MX_FREERTOS_Init+0x150>)
 8002ada:	6013      	str	r3, [r2, #0]

  /* creation of Sph_QM_BSW */
  Sph_QM_BSWHandle = osSemaphoreNew(1, 1, &Sph_QM_BSW_attributes);
 8002adc:	4a47      	ldr	r2, [pc, #284]	; (8002bfc <MX_FREERTOS_Init+0x154>)
 8002ade:	2101      	movs	r1, #1
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	f007 fd1c 	bl	800a51e <osSemaphoreNew>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4a45      	ldr	r2, [pc, #276]	; (8002c00 <MX_FREERTOS_Init+0x158>)
 8002aea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Os_SecAlm_AlarmReset */
  Os_SecAlm_AlarmResetHandle = osTimerNew(Os_SecAlm_AlarmReset_Callback, osTimerPeriodic, NULL, &Os_SecAlm_AlarmReset_attributes);
 8002aec:	4b45      	ldr	r3, [pc, #276]	; (8002c04 <MX_FREERTOS_Init+0x15c>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	2101      	movs	r1, #1
 8002af2:	4845      	ldr	r0, [pc, #276]	; (8002c08 <MX_FREERTOS_Init+0x160>)
 8002af4:	f007 fc16 	bl	800a324 <osTimerNew>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4a44      	ldr	r2, [pc, #272]	; (8002c0c <MX_FREERTOS_Init+0x164>)
 8002afc:	6013      	str	r3, [r2, #0]

  /* creation of Os_CenLoc_LockUnlockSequence_Timer */
  Os_CenLoc_LockUnlockSequence_TimerHandle = osTimerNew(Os_CenLoc_LockUnlockSequence_Timer_Callback, osTimerPeriodic, NULL, &Os_CenLoc_LockUnlockSequence_Timer_attributes);
 8002afe:	4b44      	ldr	r3, [pc, #272]	; (8002c10 <MX_FREERTOS_Init+0x168>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	2101      	movs	r1, #1
 8002b04:	4843      	ldr	r0, [pc, #268]	; (8002c14 <MX_FREERTOS_Init+0x16c>)
 8002b06:	f007 fc0d 	bl	800a324 <osTimerNew>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	4a42      	ldr	r2, [pc, #264]	; (8002c18 <MX_FREERTOS_Init+0x170>)
 8002b0e:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmLed_TurnOnCyclic_Timer */
  Os_SecAlmLed_TurnOnCyclic_TimerHandle = osTimerNew(Os_SecAlmLed_TurnOnCyclic_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLed_TurnOnCyclic_Timer_attributes);
 8002b10:	4b42      	ldr	r3, [pc, #264]	; (8002c1c <MX_FREERTOS_Init+0x174>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	2101      	movs	r1, #1
 8002b16:	4842      	ldr	r0, [pc, #264]	; (8002c20 <MX_FREERTOS_Init+0x178>)
 8002b18:	f007 fc04 	bl	800a324 <osTimerNew>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4a41      	ldr	r2, [pc, #260]	; (8002c24 <MX_FREERTOS_Init+0x17c>)
 8002b20:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmLedTurnOn_Timer */
  Os_SecAlmLedTurnOn_TimerHandle = osTimerNew(Os_SecAlmLedTurnOn_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLedTurnOn_Timer_attributes);
 8002b22:	4b41      	ldr	r3, [pc, #260]	; (8002c28 <MX_FREERTOS_Init+0x180>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	2101      	movs	r1, #1
 8002b28:	4840      	ldr	r0, [pc, #256]	; (8002c2c <MX_FREERTOS_Init+0x184>)
 8002b2a:	f007 fbfb 	bl	800a324 <osTimerNew>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	4a3f      	ldr	r2, [pc, #252]	; (8002c30 <MX_FREERTOS_Init+0x188>)
 8002b32:	6013      	str	r3, [r2, #0]

  /* creation of Os_FollowMeHome_Timer */
  Os_FollowMeHome_TimerHandle = osTimerNew(Os_FollowMeHome_Timer_Callback, osTimerPeriodic, NULL, &Os_FollowMeHome_Timer_attributes);
 8002b34:	4b3f      	ldr	r3, [pc, #252]	; (8002c34 <MX_FREERTOS_Init+0x18c>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	2101      	movs	r1, #1
 8002b3a:	483f      	ldr	r0, [pc, #252]	; (8002c38 <MX_FREERTOS_Init+0x190>)
 8002b3c:	f007 fbf2 	bl	800a324 <osTimerNew>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4a3e      	ldr	r2, [pc, #248]	; (8002c3c <MX_FREERTOS_Init+0x194>)
 8002b44:	6013      	str	r3, [r2, #0]

  /* creation of Os_TurnSignals_Timer */
  Os_TurnSignals_TimerHandle = osTimerNew(Os_TurnSignals_Timer_Callback, osTimerPeriodic, NULL, &Os_TurnSignals_Timer_attributes);
 8002b46:	4b3e      	ldr	r3, [pc, #248]	; (8002c40 <MX_FREERTOS_Init+0x198>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	483d      	ldr	r0, [pc, #244]	; (8002c44 <MX_FREERTOS_Init+0x19c>)
 8002b4e:	f007 fbe9 	bl	800a324 <osTimerNew>
 8002b52:	4603      	mov	r3, r0
 8002b54:	4a3c      	ldr	r2, [pc, #240]	; (8002c48 <MX_FREERTOS_Init+0x1a0>)
 8002b56:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmAlarm_Timer */
  Os_SecAlmAlarm_TimerHandle = osTimerNew(Os_SecAlmAlarm_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmAlarm_Timer_attributes);
 8002b58:	4b3c      	ldr	r3, [pc, #240]	; (8002c4c <MX_FREERTOS_Init+0x1a4>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	483c      	ldr	r0, [pc, #240]	; (8002c50 <MX_FREERTOS_Init+0x1a8>)
 8002b60:	f007 fbe0 	bl	800a324 <osTimerNew>
 8002b64:	4603      	mov	r3, r0
 8002b66:	4a3b      	ldr	r2, [pc, #236]	; (8002c54 <MX_FREERTOS_Init+0x1ac>)
 8002b68:	6013      	str	r3, [r2, #0]

  /* creation of Os_PdcR_Buzzer_Timer */
  Os_PdcR_Buzzer_TimerHandle = osTimerNew(Os_PdcR_Buzzer_Timer_Callback, osTimerOnce, NULL, &Os_PdcR_Buzzer_Timer_attributes);
 8002b6a:	4b3b      	ldr	r3, [pc, #236]	; (8002c58 <MX_FREERTOS_Init+0x1b0>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2100      	movs	r1, #0
 8002b70:	483a      	ldr	r0, [pc, #232]	; (8002c5c <MX_FREERTOS_Init+0x1b4>)
 8002b72:	f007 fbd7 	bl	800a324 <osTimerNew>
 8002b76:	4603      	mov	r3, r0
 8002b78:	4a39      	ldr	r2, [pc, #228]	; (8002c60 <MX_FREERTOS_Init+0x1b8>)
 8002b7a:	6013      	str	r3, [r2, #0]

  /* creation of Os_PdcF_Buzzer_Timer */
  Os_PdcF_Buzzer_TimerHandle = osTimerNew(Os_PdcF_Buzzer_Timer_Callback, osTimerOnce, NULL, &Os_PdcF_Buzzer_Timer_attributes);
 8002b7c:	4b39      	ldr	r3, [pc, #228]	; (8002c64 <MX_FREERTOS_Init+0x1bc>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2100      	movs	r1, #0
 8002b82:	4839      	ldr	r0, [pc, #228]	; (8002c68 <MX_FREERTOS_Init+0x1c0>)
 8002b84:	f007 fbce 	bl	800a324 <osTimerNew>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	4a38      	ldr	r2, [pc, #224]	; (8002c6c <MX_FREERTOS_Init+0x1c4>)
 8002b8c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OS_Init */
  OS_InitHandle = osThreadNew(OS_TASK_OS_INIT, NULL, &OS_Init_attributes);
 8002b8e:	4a38      	ldr	r2, [pc, #224]	; (8002c70 <MX_FREERTOS_Init+0x1c8>)
 8002b90:	2100      	movs	r1, #0
 8002b92:	4838      	ldr	r0, [pc, #224]	; (8002c74 <MX_FREERTOS_Init+0x1cc>)
 8002b94:	f007 fb1c 	bl	800a1d0 <osThreadNew>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	4a37      	ldr	r2, [pc, #220]	; (8002c78 <MX_FREERTOS_Init+0x1d0>)
 8002b9c:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_Main */
  ASIL_APPL_MainHandle = osThreadNew(OS_TASK_ASIL_APPL_Main, NULL, &ASIL_APPL_Main_attributes);
 8002b9e:	4a37      	ldr	r2, [pc, #220]	; (8002c7c <MX_FREERTOS_Init+0x1d4>)
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4837      	ldr	r0, [pc, #220]	; (8002c80 <MX_FREERTOS_Init+0x1d8>)
 8002ba4:	f007 fb14 	bl	800a1d0 <osThreadNew>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	4a36      	ldr	r2, [pc, #216]	; (8002c84 <MX_FREERTOS_Init+0x1dc>)
 8002bac:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_Main */
  QM_APPL_MainHandle = osThreadNew(OS_TASK_QM_APPL_Main, NULL, &QM_APPL_Main_attributes);
 8002bae:	4a36      	ldr	r2, [pc, #216]	; (8002c88 <MX_FREERTOS_Init+0x1e0>)
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4836      	ldr	r0, [pc, #216]	; (8002c8c <MX_FREERTOS_Init+0x1e4>)
 8002bb4:	f007 fb0c 	bl	800a1d0 <osThreadNew>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4a35      	ldr	r2, [pc, #212]	; (8002c90 <MX_FREERTOS_Init+0x1e8>)
 8002bbc:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_Main */
  ASIL_BSW_MainHandle = osThreadNew(OS_TASK_ASIL_BSW_Main, NULL, &ASIL_BSW_Main_attributes);
 8002bbe:	4a35      	ldr	r2, [pc, #212]	; (8002c94 <MX_FREERTOS_Init+0x1ec>)
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4835      	ldr	r0, [pc, #212]	; (8002c98 <MX_FREERTOS_Init+0x1f0>)
 8002bc4:	f007 fb04 	bl	800a1d0 <osThreadNew>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4a34      	ldr	r2, [pc, #208]	; (8002c9c <MX_FREERTOS_Init+0x1f4>)
 8002bcc:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_Main */
  QM_BSW_MainHandle = osThreadNew(OS_TASK_QM_BSW_Main, NULL, &QM_BSW_Main_attributes);
 8002bce:	4a34      	ldr	r2, [pc, #208]	; (8002ca0 <MX_FREERTOS_Init+0x1f8>)
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4834      	ldr	r0, [pc, #208]	; (8002ca4 <MX_FREERTOS_Init+0x1fc>)
 8002bd4:	f007 fafc 	bl	800a1d0 <osThreadNew>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	4a33      	ldr	r2, [pc, #204]	; (8002ca8 <MX_FREERTOS_Init+0x200>)
 8002bdc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	0800f994 	.word	0x0800f994
 8002be8:	2000025c 	.word	0x2000025c
 8002bec:	0800f9a4 	.word	0x0800f9a4
 8002bf0:	20000260 	.word	0x20000260
 8002bf4:	0800f9b4 	.word	0x0800f9b4
 8002bf8:	20000264 	.word	0x20000264
 8002bfc:	0800f9c4 	.word	0x0800f9c4
 8002c00:	20000268 	.word	0x20000268
 8002c04:	0800f904 	.word	0x0800f904
 8002c08:	08002ddd 	.word	0x08002ddd
 8002c0c:	20000238 	.word	0x20000238
 8002c10:	0800f914 	.word	0x0800f914
 8002c14:	08002dfd 	.word	0x08002dfd
 8002c18:	2000023c 	.word	0x2000023c
 8002c1c:	0800f924 	.word	0x0800f924
 8002c20:	08002e65 	.word	0x08002e65
 8002c24:	20000240 	.word	0x20000240
 8002c28:	0800f934 	.word	0x0800f934
 8002c2c:	08002e8d 	.word	0x08002e8d
 8002c30:	20000244 	.word	0x20000244
 8002c34:	0800f944 	.word	0x0800f944
 8002c38:	08002eb5 	.word	0x08002eb5
 8002c3c:	20000248 	.word	0x20000248
 8002c40:	0800f954 	.word	0x0800f954
 8002c44:	08002edd 	.word	0x08002edd
 8002c48:	2000024c 	.word	0x2000024c
 8002c4c:	0800f964 	.word	0x0800f964
 8002c50:	08002f4d 	.word	0x08002f4d
 8002c54:	20000250 	.word	0x20000250
 8002c58:	0800f974 	.word	0x0800f974
 8002c5c:	08002f85 	.word	0x08002f85
 8002c60:	20000254 	.word	0x20000254
 8002c64:	0800f984 	.word	0x0800f984
 8002c68:	08002fa1 	.word	0x08002fa1
 8002c6c:	20000258 	.word	0x20000258
 8002c70:	0800f850 	.word	0x0800f850
 8002c74:	08002cad 	.word	0x08002cad
 8002c78:	20000224 	.word	0x20000224
 8002c7c:	0800f874 	.word	0x0800f874
 8002c80:	08002cc1 	.word	0x08002cc1
 8002c84:	20000228 	.word	0x20000228
 8002c88:	0800f898 	.word	0x0800f898
 8002c8c:	08002d09 	.word	0x08002d09
 8002c90:	2000022c 	.word	0x2000022c
 8002c94:	0800f8bc 	.word	0x0800f8bc
 8002c98:	08002d4d 	.word	0x08002d4d
 8002c9c:	20000230 	.word	0x20000230
 8002ca0:	0800f8e0 	.word	0x0800f8e0
 8002ca4:	08002d95 	.word	0x08002d95
 8002ca8:	20000234 	.word	0x20000234

08002cac <OS_TASK_OS_INIT>:

/* USER CODE BEGIN Header_OS_TASK_OS_INIT */
/* USER CODE END Header_OS_TASK_OS_INIT */
void OS_TASK_OS_INIT(void *argument)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_OS_INIT */
	for(;;)
	{
		EcuM_DriverInit();
 8002cb4:	f00c f900 	bl	800eeb8 <EcuM_DriverInit>
		vTaskSuspend(NULL);
 8002cb8:	2000      	movs	r0, #0
 8002cba:	f009 fdb3 	bl	800c824 <vTaskSuspend>
		EcuM_DriverInit();
 8002cbe:	e7f9      	b.n	8002cb4 <OS_TASK_OS_INIT+0x8>

08002cc0 <OS_TASK_ASIL_APPL_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_APPL_Main */
/* USER CODE END Header_OS_TASK_ASIL_APPL_Main */
void OS_TASK_ASIL_APPL_Main(void *argument)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_Main */
	for(;;)
	{
		osSemaphoreAcquire(Sph_ASIL_APPLHandle, osWaitForever);
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <OS_TASK_ASIL_APPL_Main+0x3c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f007 fcad 	bl	800a630 <osSemaphoreAcquire>
		Rte_Runnable_Btc_MainFunction();
 8002cd6:	f00b fc7b 	bl	800e5d0 <Rte_Runnable_Btc_MainFunction>
		Rte_Runnable_CenLoc_MainFunction();
 8002cda:	f00b fc7f 	bl	800e5dc <Rte_Runnable_CenLoc_MainFunction>
		Rte_Runnable_ExtLights_MainFunction();
 8002cde:	f00b fc83 	bl	800e5e8 <Rte_Runnable_ExtLights_MainFunction>
		Rte_Runnable_IntLights_MainFunction();
 8002ce2:	f00b fc87 	bl	800e5f4 <Rte_Runnable_IntLights_MainFunction>
		osSemaphoreRelease(Sph_QM_APPLHandle);
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <OS_TASK_ASIL_APPL_Main+0x40>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f007 fcf2 	bl	800a6d4 <osSemaphoreRelease>
		vTaskDelayUntil(&ASIL_APPL_Main, pdMS_TO_TICKS(5));
 8002cf0:	2105      	movs	r1, #5
 8002cf2:	4804      	ldr	r0, [pc, #16]	; (8002d04 <OS_TASK_ASIL_APPL_Main+0x44>)
 8002cf4:	f009 fd18 	bl	800c728 <vTaskDelayUntil>
		osSemaphoreAcquire(Sph_ASIL_APPLHandle, osWaitForever);
 8002cf8:	e7e6      	b.n	8002cc8 <OS_TASK_ASIL_APPL_Main+0x8>
 8002cfa:	bf00      	nop
 8002cfc:	2000025c 	.word	0x2000025c
 8002d00:	20000260 	.word	0x20000260
 8002d04:	20000214 	.word	0x20000214

08002d08 <OS_TASK_QM_APPL_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_Main */
/* USER CODE END Header_OS_TASK_QM_APPL_Main */
void OS_TASK_QM_APPL_Main(void *argument)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_Main */
	for(;;)
	{
		osSemaphoreAcquire(Sph_QM_APPLHandle, osWaitForever);
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <OS_TASK_QM_APPL_Main+0x38>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f04f 31ff 	mov.w	r1, #4294967295
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f007 fc89 	bl	800a630 <osSemaphoreAcquire>
		Rte_Runnable_SecAlm_MainFunction();
 8002d1e:	f00b fc6f 	bl	800e600 <Rte_Runnable_SecAlm_MainFunction>
		Rte_Runnable_Pdc_MainFunction();
 8002d22:	f00b fcb3 	bl	800e68c <Rte_Runnable_Pdc_MainFunction>
		Rte_Runnable_DiagCtrl_MainFunction();
 8002d26:	f00b fcab 	bl	800e680 <Rte_Runnable_DiagCtrl_MainFunction>
		osSemaphoreRelease(Sph_ASIL_BSWHandle);
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <OS_TASK_QM_APPL_Main+0x3c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f007 fcd0 	bl	800a6d4 <osSemaphoreRelease>
		vTaskDelayUntil(&QM_APPL_Main, pdMS_TO_TICKS(5));
 8002d34:	2105      	movs	r1, #5
 8002d36:	4804      	ldr	r0, [pc, #16]	; (8002d48 <OS_TASK_QM_APPL_Main+0x40>)
 8002d38:	f009 fcf6 	bl	800c728 <vTaskDelayUntil>
		osSemaphoreAcquire(Sph_QM_APPLHandle, osWaitForever);
 8002d3c:	e7e8      	b.n	8002d10 <OS_TASK_QM_APPL_Main+0x8>
 8002d3e:	bf00      	nop
 8002d40:	20000260 	.word	0x20000260
 8002d44:	20000264 	.word	0x20000264
 8002d48:	20000218 	.word	0x20000218

08002d4c <OS_TASK_ASIL_BSW_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_Main */
/* USER CODE END Header_OS_TASK_ASIL_BSW_Main */
void OS_TASK_ASIL_BSW_Main(void *argument)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_Main */
	for(;;)
	{
		osSemaphoreAcquire(Sph_ASIL_BSWHandle, osWaitForever);
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <OS_TASK_ASIL_BSW_Main+0x3c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f04f 31ff 	mov.w	r1, #4294967295
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f007 fc67 	bl	800a630 <osSemaphoreAcquire>
		Rte_Runnable_Wdg_MainFunction();
 8002d62:	f00b fa9b 	bl	800e29c <Rte_Runnable_Wdg_MainFunction>
		Rte_Runnable_Uart_MainFunction();
 8002d66:	f00b faab 	bl	800e2c0 <Rte_Runnable_Uart_MainFunction>
		Rte_Runnable_Crc_MainFunction();
 8002d6a:	f00b fa91 	bl	800e290 <Rte_Runnable_Crc_MainFunction>
		Rte_Runnable_Tim_MainFunction();
 8002d6e:	f00b faa1 	bl	800e2b4 <Rte_Runnable_Tim_MainFunction>
		osSemaphoreRelease(Sph_QM_BSWHandle);
 8002d72:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <OS_TASK_ASIL_BSW_Main+0x40>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f007 fcac 	bl	800a6d4 <osSemaphoreRelease>
		vTaskDelayUntil(&ASIL_BSW_Main, pdMS_TO_TICKS(5));
 8002d7c:	2105      	movs	r1, #5
 8002d7e:	4804      	ldr	r0, [pc, #16]	; (8002d90 <OS_TASK_ASIL_BSW_Main+0x44>)
 8002d80:	f009 fcd2 	bl	800c728 <vTaskDelayUntil>
		osSemaphoreAcquire(Sph_ASIL_BSWHandle, osWaitForever);
 8002d84:	e7e6      	b.n	8002d54 <OS_TASK_ASIL_BSW_Main+0x8>
 8002d86:	bf00      	nop
 8002d88:	20000264 	.word	0x20000264
 8002d8c:	20000268 	.word	0x20000268
 8002d90:	2000021c 	.word	0x2000021c

08002d94 <OS_TASK_QM_BSW_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_Main */
/* USER CODE END Header_OS_TASK_QM_BSW_Main */
void OS_TASK_QM_BSW_Main(void *argument)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_Main */
	for(;;)
	{
		osSemaphoreAcquire(Sph_QM_BSWHandle, osWaitForever);
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <OS_TASK_QM_BSW_Main+0x3c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f04f 31ff 	mov.w	r1, #4294967295
 8002da4:	4618      	mov	r0, r3
 8002da6:	f007 fc43 	bl	800a630 <osSemaphoreAcquire>
		Rte_Runnable_EcuM_MainFunction();
 8002daa:	f00b fa65 	bl	800e278 <Rte_Runnable_EcuM_MainFunction>
		Rte_Runnable_SystemManager_MainFunction();
 8002dae:	f00b fa69 	bl	800e284 <Rte_Runnable_SystemManager_MainFunction>
		Rte_Runnable_Adc_MainFunction();
 8002db2:	f00b fa79 	bl	800e2a8 <Rte_Runnable_Adc_MainFunction>
		Rte_Runnable_Dem_MainFunction();
 8002db6:	f00b fc6f 	bl	800e698 <Rte_Runnable_Dem_MainFunction>
		osSemaphoreRelease(Sph_ASIL_APPLHandle);
 8002dba:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <OS_TASK_QM_BSW_Main+0x40>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f007 fc88 	bl	800a6d4 <osSemaphoreRelease>
		vTaskDelayUntil(&QM_BSW_Main, pdMS_TO_TICKS(5));
 8002dc4:	2105      	movs	r1, #5
 8002dc6:	4804      	ldr	r0, [pc, #16]	; (8002dd8 <OS_TASK_QM_BSW_Main+0x44>)
 8002dc8:	f009 fcae 	bl	800c728 <vTaskDelayUntil>
		osSemaphoreAcquire(Sph_QM_BSWHandle, osWaitForever);
 8002dcc:	e7e6      	b.n	8002d9c <OS_TASK_QM_BSW_Main+0x8>
 8002dce:	bf00      	nop
 8002dd0:	20000268 	.word	0x20000268
 8002dd4:	2000025c 	.word	0x2000025c
 8002dd8:	20000220 	.word	0x20000220

08002ddc <Os_SecAlm_AlarmReset_Callback>:
  /* USER CODE END OS_TASK_QM_BSW_Main */
}

/* Os_SecAlm_AlarmReset_Callback function */
void Os_SecAlm_AlarmReset_Callback(void *argument)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlm_AlarmReset_Callback */
	/* Reset the security alarm counter trigger. */
	uint16 local = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	81fb      	strh	r3, [r7, #14]
	Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter(&local);
 8002de8:	f107 030e 	add.w	r3, r7, #14
 8002dec:	4618      	mov	r0, r3
 8002dee:	f00b fbdf 	bl	800e5b0 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>
  /* USER CODE END Os_SecAlm_AlarmReset_Callback */
}
 8002df2:	bf00      	nop
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <Os_CenLoc_LockUnlockSequence_Timer_Callback>:

/* Os_CenLoc_LockUnlockSequence_Timer_Callback function */
void Os_CenLoc_LockUnlockSequence_Timer_Callback(void *argument)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_CenLoc_LockUnlockSequence_Timer_Callback */
	/* If the counter variable for the lock unlock turn signals sequence is less than or equal to 6
	 * Then if there is either a lock or an unlock sequence increase the counter to process the states
	 * in the application. */
	if(Os_LockUnlockSequence_Counter <= 6
 8002e04:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b06      	cmp	r3, #6
 8002e0a:	d819      	bhi.n	8002e40 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
		&& ((Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_HIGH)
 8002e0c:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d103      	bne.n	8002e1c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x20>
 8002e14:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d007      	beq.n	8002e2c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x30>
		|| (Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_LOW)))
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d10d      	bne.n	8002e40 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
 8002e24:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d109      	bne.n	8002e40 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
	{
		Os_LockUnlockSequence_Counter = Os_LockUnlockSequence_Counter + 1;
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002e36:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(&Os_LockUnlockSequence_Counter);
 8002e38:	4807      	ldr	r0, [pc, #28]	; (8002e58 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002e3a:	f00b f99d 	bl	800e178 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>
 8002e3e:	e006      	b.n	8002e4e <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x52>
	}
	else
	{
		/* Update the counter with out of bounds value to prevent unexpected triggering. */
		Os_LockUnlockSequence_Counter = 7;
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002e42:	2207      	movs	r2, #7
 8002e44:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(&Os_LockUnlockSequence_Counter);
 8002e46:	4804      	ldr	r0, [pc, #16]	; (8002e58 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002e48:	f00b f996 	bl	800e178 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>
	}

  /* USER CODE END Os_CenLoc_LockUnlockSequence_Timer_Callback */
}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000200 	.word	0x20000200
 8002e5c:	200000ce 	.word	0x200000ce
 8002e60:	200000d6 	.word	0x200000d6

08002e64 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback>:

/* Os_SecAlmLed_TurnOnCyclic_Timer_Callback function */
void Os_SecAlmLed_TurnOnCyclic_Timer_Callback(void *argument)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmLed_TurnOnCyclic_Timer_Callback */
	/* Increase the counter variable used in the timer for the alarm LED
	 * that expires every 3,75 seconds. */
	Os_TurnOnCyclic_Counter = Os_TurnOnCyclic_Counter + 1;
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	3301      	adds	r3, #1
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8002e76:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter(&Os_TurnOnCyclic_Counter);
 8002e78:	4803      	ldr	r0, [pc, #12]	; (8002e88 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8002e7a:	f00b f96d 	bl	800e158 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter>
  /* USER CODE END Os_SecAlmLed_TurnOnCyclic_Timer_Callback */
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000201 	.word	0x20000201

08002e8c <Os_SecAlmLedTurnOn_Timer_Callback>:

/* Os_SecAlmLedTurnOn_Timer_Callback function */
void Os_SecAlmLedTurnOn_Timer_Callback(void *argument)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmLedTurnOn_Timer_Callback */
	/* Increase the counter variable used in the turning on the alarm LED for 0,25 seconds. */
	Os_TurnOnLed_Counter = Os_TurnOnLed_Counter + 1;
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8002e9e:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter(&Os_TurnOnLed_Counter);
 8002ea0:	4803      	ldr	r0, [pc, #12]	; (8002eb0 <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8002ea2:	f00b f949 	bl	800e138 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter>
  /* USER CODE END Os_SecAlmLedTurnOn_Timer_Callback */
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000202 	.word	0x20000202

08002eb4 <Os_FollowMeHome_Timer_Callback>:

/* Os_FollowMeHome_Timer_Callback function */
void Os_FollowMeHome_Timer_Callback(void *argument)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_FollowMeHome_Timer_Callback */
	/* Increase the counter variable used in the follow me home concept when the timer
	 * period expires for the lights to go off. */
	Os_FollowMeHome_Counter = Os_FollowMeHome_Counter + 1;
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <Os_FollowMeHome_Timer_Callback+0x24>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <Os_FollowMeHome_Timer_Callback+0x24>)
 8002ec6:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter(&Os_FollowMeHome_Counter);
 8002ec8:	4803      	ldr	r0, [pc, #12]	; (8002ed8 <Os_FollowMeHome_Timer_Callback+0x24>)
 8002eca:	f00b f925 	bl	800e118 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>
  /* USER CODE END Os_FollowMeHome_Timer_Callback */
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000203 	.word	0x20000203

08002edc <Os_TurnSignals_Timer_Callback>:

/* Os_TurnSignals_Timer_Callback function */
void Os_TurnSignals_Timer_Callback(void *argument)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_TurnSignals_Timer_Callback */
	/* Increase the respective counter on request from the specific light in turn signals. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8002ee4:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <Os_TurnSignals_Timer_Callback+0x58>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d107      	bne.n	8002efc <Os_TurnSignals_Timer_Callback+0x20>
	{
		Os_Lts_Counter = Os_Lts_Counter + 1;
 8002eec:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <Os_TurnSignals_Timer_Callback+0x5c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	4a11      	ldr	r2, [pc, #68]	; (8002f38 <Os_TurnSignals_Timer_Callback+0x5c>)
 8002ef4:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(&Os_Lts_Counter);
 8002ef6:	4810      	ldr	r0, [pc, #64]	; (8002f38 <Os_TurnSignals_Timer_Callback+0x5c>)
 8002ef8:	f00b fb1a 	bl	800e530 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8002efc:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <Os_TurnSignals_Timer_Callback+0x60>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d107      	bne.n	8002f14 <Os_TurnSignals_Timer_Callback+0x38>
	{
		Os_Rts_Counter = Os_Rts_Counter + 1;
 8002f04:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <Os_TurnSignals_Timer_Callback+0x64>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	4a0d      	ldr	r2, [pc, #52]	; (8002f40 <Os_TurnSignals_Timer_Callback+0x64>)
 8002f0c:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(&Os_Rts_Counter);
 8002f0e:	480c      	ldr	r0, [pc, #48]	; (8002f40 <Os_TurnSignals_Timer_Callback+0x64>)
 8002f10:	f00b fafe 	bl	800e510 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState == STD_HIGH)
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <Os_TurnSignals_Timer_Callback+0x68>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d107      	bne.n	8002f2c <Os_TurnSignals_Timer_Callback+0x50>
	{
		Os_HL_Counter = Os_HL_Counter + 1;
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <Os_TurnSignals_Timer_Callback+0x6c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3301      	adds	r3, #1
 8002f22:	4a09      	ldr	r2, [pc, #36]	; (8002f48 <Os_TurnSignals_Timer_Callback+0x6c>)
 8002f24:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(&Os_HL_Counter);
 8002f26:	4808      	ldr	r0, [pc, #32]	; (8002f48 <Os_TurnSignals_Timer_Callback+0x6c>)
 8002f28:	f00b fb12 	bl	800e550 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>
	else
	{
		/* do nothing */
	}
  /* USER CODE END Os_TurnSignals_Timer_Callback */
}
 8002f2c:	bf00      	nop
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	200000ea 	.word	0x200000ea
 8002f38:	20000204 	.word	0x20000204
 8002f3c:	200000eb 	.word	0x200000eb
 8002f40:	20000208 	.word	0x20000208
 8002f44:	200000ee 	.word	0x200000ee
 8002f48:	2000020c 	.word	0x2000020c

08002f4c <Os_SecAlmAlarm_Timer_Callback>:

/* Os_SecAlmAlarm_Timer_Callback function */
void Os_SecAlmAlarm_Timer_Callback(void *argument)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmAlarm_Timer_Callback */
	/* Increase the security alarm trigger counter when the alarm is on. */
	if(Rte_P_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4 == STD_LOW)
 8002f54:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <Os_SecAlmAlarm_Timer_Callback+0x30>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <Os_SecAlmAlarm_Timer_Callback+0x16>
	{
		Os_Alarm_Counter = STD_LOW;
 8002f5c:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <Os_SecAlmAlarm_Timer_Callback+0x34>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	Os_Alarm_Counter = Os_Alarm_Counter + 1;
 8002f62:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <Os_SecAlmAlarm_Timer_Callback+0x34>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	3301      	adds	r3, #1
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <Os_SecAlmAlarm_Timer_Callback+0x34>)
 8002f6c:	701a      	strb	r2, [r3, #0]
	Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(&Os_Alarm_Counter);
 8002f6e:	4804      	ldr	r0, [pc, #16]	; (8002f80 <Os_SecAlmAlarm_Timer_Callback+0x34>)
 8002f70:	f00b fb0e 	bl	800e590 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>
  /* USER CODE END Os_SecAlmAlarm_Timer_Callback */
}
 8002f74:	bf00      	nop
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20000116 	.word	0x20000116
 8002f80:	20000210 	.word	0x20000210

08002f84 <Os_PdcR_Buzzer_Timer_Callback>:

/* Os_PdcR_Buzzer_Timer_Callback function */
void Os_PdcR_Buzzer_Timer_Callback(void *argument)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_PdcR_Buzzer_Timer_Callback */
	HAL_GPIO_TogglePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN);
 8002f8c:	2120      	movs	r1, #32
 8002f8e:	4803      	ldr	r0, [pc, #12]	; (8002f9c <Os_PdcR_Buzzer_Timer_Callback+0x18>)
 8002f90:	f002 ff05 	bl	8005d9e <HAL_GPIO_TogglePin>
  /* USER CODE END Os_PdcR_Buzzer_Timer_Callback */
}
 8002f94:	bf00      	nop
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40020400 	.word	0x40020400

08002fa0 <Os_PdcF_Buzzer_Timer_Callback>:

/* Os_PdcF_Buzzer_Timer_Callback function */
void Os_PdcF_Buzzer_Timer_Callback(void *argument)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_PdcF_Buzzer_Timer_Callback */
	HAL_GPIO_TogglePin(PDCF_BUZZER_PORT, PDCF_BUZZER_PIN);
 8002fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fac:	4803      	ldr	r0, [pc, #12]	; (8002fbc <Os_PdcF_Buzzer_Timer_Callback+0x1c>)
 8002fae:	f002 fef6 	bl	8005d9e <HAL_GPIO_TogglePin>
  /* USER CODE END Os_PdcF_Buzzer_Timer_Callback */
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40020800 	.word	0x40020800

08002fc0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	; 0x28
 8002fc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc6:	f107 0314 	add.w	r3, r7, #20
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
 8002fd2:	60da      	str	r2, [r3, #12]
 8002fd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	4b4d      	ldr	r3, [pc, #308]	; (8003110 <MX_GPIO_Init+0x150>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	4a4c      	ldr	r2, [pc, #304]	; (8003110 <MX_GPIO_Init+0x150>)
 8002fe0:	f043 0304 	orr.w	r3, r3, #4
 8002fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe6:	4b4a      	ldr	r3, [pc, #296]	; (8003110 <MX_GPIO_Init+0x150>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	4b46      	ldr	r3, [pc, #280]	; (8003110 <MX_GPIO_Init+0x150>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	4a45      	ldr	r2, [pc, #276]	; (8003110 <MX_GPIO_Init+0x150>)
 8002ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003000:	6313      	str	r3, [r2, #48]	; 0x30
 8003002:	4b43      	ldr	r3, [pc, #268]	; (8003110 <MX_GPIO_Init+0x150>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	4b3f      	ldr	r3, [pc, #252]	; (8003110 <MX_GPIO_Init+0x150>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	4a3e      	ldr	r2, [pc, #248]	; (8003110 <MX_GPIO_Init+0x150>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	6313      	str	r3, [r2, #48]	; 0x30
 800301e:	4b3c      	ldr	r3, [pc, #240]	; (8003110 <MX_GPIO_Init+0x150>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	4b38      	ldr	r3, [pc, #224]	; (8003110 <MX_GPIO_Init+0x150>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a37      	ldr	r2, [pc, #220]	; (8003110 <MX_GPIO_Init+0x150>)
 8003034:	f043 0302 	orr.w	r3, r3, #2
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b35      	ldr	r3, [pc, #212]	; (8003110 <MX_GPIO_Init+0x150>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	603b      	str	r3, [r7, #0]
 800304a:	4b31      	ldr	r3, [pc, #196]	; (8003110 <MX_GPIO_Init+0x150>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a30      	ldr	r2, [pc, #192]	; (8003110 <MX_GPIO_Init+0x150>)
 8003050:	f043 0308 	orr.w	r3, r3, #8
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b2e      	ldr	r3, [pc, #184]	; (8003110 <MX_GPIO_Init+0x150>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PDCF_BUZZER_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8003062:	2200      	movs	r2, #0
 8003064:	f64f 4173 	movw	r1, #64627	; 0xfc73
 8003068:	482a      	ldr	r0, [pc, #168]	; (8003114 <MX_GPIO_Init+0x154>)
 800306a:	f002 fe7f 	bl	8005d6c <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800306e:	2200      	movs	r2, #0
 8003070:	f641 11fc 	movw	r1, #6652	; 0x19fc
 8003074:	4828      	ldr	r0, [pc, #160]	; (8003118 <MX_GPIO_Init+0x158>)
 8003076:	f002 fe79 	bl	8005d6c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|PDCF_TRIG_Pin
                          |HB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|CENLOC_BUZZER_Pin|SECALM_BUZZER_Pin
 800307a:	2200      	movs	r2, #0
 800307c:	f24f 01f7 	movw	r1, #61687	; 0xf0f7
 8003080:	4826      	ldr	r0, [pc, #152]	; (800311c <MX_GPIO_Init+0x15c>)
 8003082:	f002 fe73 	bl	8005d6c <HAL_GPIO_WritePin>
                          |PDCR_TRIG_Pin|AL_Pin|RL_Pin|GPIO_PIN_4
                          |PDCR_BUZZER_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8003086:	2200      	movs	r2, #0
 8003088:	2104      	movs	r1, #4
 800308a:	4825      	ldr	r0, [pc, #148]	; (8003120 <MX_GPIO_Init+0x160>)
 800308c:	f002 fe6e 	bl	8005d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC14 PC15 PC0
                           PC1 PC4 PC5 PC6
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = PDCF_BUZZER_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8003090:	f64f 4373 	movw	r3, #64627	; 0xfc73
 8003094:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003096:	2301      	movs	r3, #1
 8003098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309a:	2300      	movs	r3, #0
 800309c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309e:	2300      	movs	r3, #0
 80030a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030a2:	f107 0314 	add.w	r3, r7, #20
 80030a6:	4619      	mov	r1, r3
 80030a8:	481a      	ldr	r0, [pc, #104]	; (8003114 <MX_GPIO_Init+0x154>)
 80030aa:	f002 fbf7 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 PA8 PAPin
                           PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80030ae:	f641 13fc 	movw	r3, #6652	; 0x19fc
 80030b2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|PDCF_TRIG_Pin
                          |HB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b4:	2301      	movs	r3, #1
 80030b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030bc:	2300      	movs	r3, #0
 80030be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c0:	f107 0314 	add.w	r3, r7, #20
 80030c4:	4619      	mov	r1, r3
 80030c6:	4814      	ldr	r0, [pc, #80]	; (8003118 <MX_GPIO_Init+0x158>)
 80030c8:	f002 fbe8 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PBPin PBPin
                           PBPin PBPin PBPin PB4
                           PBPin PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|CENLOC_BUZZER_Pin|SECALM_BUZZER_Pin
 80030cc:	f24f 03f7 	movw	r3, #61687	; 0xf0f7
 80030d0:	617b      	str	r3, [r7, #20]
                          |PDCR_TRIG_Pin|AL_Pin|RL_Pin|GPIO_PIN_4
                          |PDCR_BUZZER_Pin|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d2:	2301      	movs	r3, #1
 80030d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030da:	2300      	movs	r3, #0
 80030dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030de:	f107 0314 	add.w	r3, r7, #20
 80030e2:	4619      	mov	r1, r3
 80030e4:	480d      	ldr	r0, [pc, #52]	; (800311c <MX_GPIO_Init+0x15c>)
 80030e6:	f002 fbd9 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030ea:	2304      	movs	r3, #4
 80030ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ee:	2301      	movs	r3, #1
 80030f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f6:	2300      	movs	r3, #0
 80030f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030fa:	f107 0314 	add.w	r3, r7, #20
 80030fe:	4619      	mov	r1, r3
 8003100:	4807      	ldr	r0, [pc, #28]	; (8003120 <MX_GPIO_Init+0x160>)
 8003102:	f002 fbcb 	bl	800589c <HAL_GPIO_Init>

}
 8003106:	bf00      	nop
 8003108:	3728      	adds	r7, #40	; 0x28
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800
 8003114:	40020800 	.word	0x40020800
 8003118:	40020000 	.word	0x40020000
 800311c:	40020400 	.word	0x40020400
 8003120:	40020c00 	.word	0x40020c00

08003124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	607b      	str	r3, [r7, #4]
 800312e:	4b21      	ldr	r3, [pc, #132]	; (80031b4 <HAL_MspInit+0x90>)
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	4a20      	ldr	r2, [pc, #128]	; (80031b4 <HAL_MspInit+0x90>)
 8003134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003138:	6453      	str	r3, [r2, #68]	; 0x44
 800313a:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <HAL_MspInit+0x90>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003142:	607b      	str	r3, [r7, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	603b      	str	r3, [r7, #0]
 800314a:	4b1a      	ldr	r3, [pc, #104]	; (80031b4 <HAL_MspInit+0x90>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	4a19      	ldr	r2, [pc, #100]	; (80031b4 <HAL_MspInit+0x90>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003154:	6413      	str	r3, [r2, #64]	; 0x40
 8003156:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <HAL_MspInit+0x90>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 15, 0);
 8003162:	2200      	movs	r2, #0
 8003164:	210f      	movs	r1, #15
 8003166:	f06f 000b 	mvn.w	r0, #11
 800316a:	f001 fcc6 	bl	8004afa <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 15, 0);
 800316e:	2200      	movs	r2, #0
 8003170:	210f      	movs	r1, #15
 8003172:	f06f 000a 	mvn.w	r0, #10
 8003176:	f001 fcc0 	bl	8004afa <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 15, 0);
 800317a:	2200      	movs	r2, #0
 800317c:	210f      	movs	r1, #15
 800317e:	f06f 0009 	mvn.w	r0, #9
 8003182:	f001 fcba 	bl	8004afa <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 8003186:	2200      	movs	r2, #0
 8003188:	210f      	movs	r1, #15
 800318a:	f06f 0004 	mvn.w	r0, #4
 800318e:	f001 fcb4 	bl	8004afa <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8003192:	2200      	movs	r2, #0
 8003194:	210f      	movs	r1, #15
 8003196:	f06f 0003 	mvn.w	r0, #3
 800319a:	f001 fcae 	bl	8004afa <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800319e:	2200      	movs	r2, #0
 80031a0:	210f      	movs	r1, #15
 80031a2:	f06f 0001 	mvn.w	r0, #1
 80031a6:	f001 fca8 	bl	8004afa <HAL_NVIC_SetPriority>
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800

080031b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08c      	sub	sp, #48	; 0x30
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80031c8:	2300      	movs	r3, #0
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	4b2e      	ldr	r3, [pc, #184]	; (8003288 <HAL_InitTick+0xd0>)
 80031ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d0:	4a2d      	ldr	r2, [pc, #180]	; (8003288 <HAL_InitTick+0xd0>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6453      	str	r3, [r2, #68]	; 0x44
 80031d8:	4b2b      	ldr	r3, [pc, #172]	; (8003288 <HAL_InitTick+0xd0>)
 80031da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80031e4:	f107 020c 	add.w	r2, r7, #12
 80031e8:	f107 0310 	add.w	r3, r7, #16
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f003 faf4 	bl	80067dc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80031f4:	f003 fade 	bl	80067b4 <HAL_RCC_GetPCLK2Freq>
 80031f8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	4a23      	ldr	r2, [pc, #140]	; (800328c <HAL_InitTick+0xd4>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	0c9b      	lsrs	r3, r3, #18
 8003204:	3b01      	subs	r3, #1
 8003206:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003208:	4b21      	ldr	r3, [pc, #132]	; (8003290 <HAL_InitTick+0xd8>)
 800320a:	4a22      	ldr	r2, [pc, #136]	; (8003294 <HAL_InitTick+0xdc>)
 800320c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800320e:	4b20      	ldr	r3, [pc, #128]	; (8003290 <HAL_InitTick+0xd8>)
 8003210:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003214:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003216:	4a1e      	ldr	r2, [pc, #120]	; (8003290 <HAL_InitTick+0xd8>)
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800321c:	4b1c      	ldr	r3, [pc, #112]	; (8003290 <HAL_InitTick+0xd8>)
 800321e:	2200      	movs	r2, #0
 8003220:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003222:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <HAL_InitTick+0xd8>)
 8003224:	2200      	movs	r2, #0
 8003226:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003228:	4b19      	ldr	r3, [pc, #100]	; (8003290 <HAL_InitTick+0xd8>)
 800322a:	2200      	movs	r2, #0
 800322c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800322e:	4818      	ldr	r0, [pc, #96]	; (8003290 <HAL_InitTick+0xd8>)
 8003230:	f003 fb06 	bl	8006840 <HAL_TIM_Base_Init>
 8003234:	4603      	mov	r3, r0
 8003236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800323a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800323e:	2b00      	cmp	r3, #0
 8003240:	d11b      	bne.n	800327a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003242:	4813      	ldr	r0, [pc, #76]	; (8003290 <HAL_InitTick+0xd8>)
 8003244:	f003 fb58 	bl	80068f8 <HAL_TIM_Base_Start_IT>
 8003248:	4603      	mov	r3, r0
 800324a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800324e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003252:	2b00      	cmp	r3, #0
 8003254:	d111      	bne.n	800327a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003256:	2019      	movs	r0, #25
 8003258:	f001 fc6b 	bl	8004b32 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b0f      	cmp	r3, #15
 8003260:	d808      	bhi.n	8003274 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003262:	2200      	movs	r2, #0
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	2019      	movs	r0, #25
 8003268:	f001 fc47 	bl	8004afa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800326c:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <HAL_InitTick+0xe0>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e002      	b.n	800327a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800327a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800327e:	4618      	mov	r0, r3
 8003280:	3730      	adds	r7, #48	; 0x30
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800
 800328c:	431bde83 	.word	0x431bde83
 8003290:	20000278 	.word	0x20000278
 8003294:	40010000 	.word	0x40010000
 8003298:	20000020 	.word	0x20000020

0800329c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	SystemManager_SetFault(NMI_RESET);
 80032a0:	2008      	movs	r0, #8
 80032a2:	f00b fefd 	bl	800f0a0 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80032a6:	f00b ff23 	bl	800f0f0 <SystemManager_PerformReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032aa:	e7fe      	b.n	80032aa <NMI_Handler+0xe>

080032ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	SystemManager_SetFault(HARDWARE_RESET);
 80032b0:	2006      	movs	r0, #6
 80032b2:	f00b fef5 	bl	800f0a0 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80032b6:	f00b ff1b 	bl	800f0f0 <SystemManager_PerformReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ba:	e7fe      	b.n	80032ba <HardFault_Handler+0xe>

080032bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	SystemManager_SetFault(MEMORY_FAULT_RESET);
 80032c0:	2009      	movs	r0, #9
 80032c2:	f00b feed 	bl	800f0a0 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80032c6:	f00b ff13 	bl	800f0f0 <SystemManager_PerformReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032ca:	e7fe      	b.n	80032ca <MemManage_Handler+0xe>

080032cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	SystemManager_SetFault(BUS_FAULT_RESET);
 80032d0:	200b      	movs	r0, #11
 80032d2:	f00b fee5 	bl	800f0a0 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80032d6:	f00b ff0b 	bl	800f0f0 <SystemManager_PerformReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032da:	e7fe      	b.n	80032da <BusFault_Handler+0xe>

080032dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	SystemManager_SetFault(USAGE_FAULT_RESET);
 80032e0:	200a      	movs	r0, #10
 80032e2:	f00b fedd 	bl	800f0a0 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80032e6:	f00b ff03 	bl	800f0f0 <SystemManager_PerformReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032ea:	e7fe      	b.n	80032ea <UsageFault_Handler+0xe>

080032ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032f0:	bf00      	nop
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80032fe:	f002 fdbb 	bl	8005e78 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}

08003306 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800330a:	f002 f91f 	bl	800554c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}

08003312 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003312:	b480      	push	{r7}
 8003314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_IRQn 0 */
  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */
  /* USER CODE END RCC_IRQn 1 */
}
 8003316:	bf00      	nop
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003324:	4802      	ldr	r0, [pc, #8]	; (8003330 <ADC_IRQHandler+0x10>)
 8003326:	f000 fda7 	bl	8003e78 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */
  /* USER CODE END ADC_IRQn 1 */
}
 800332a:	bf00      	nop
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20000130 	.word	0x20000130

08003334 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003338:	4802      	ldr	r0, [pc, #8]	; (8003344 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800333a:	f003 fed5 	bl	80070e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800333e:	bf00      	nop
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000278 	.word	0x20000278

08003348 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	/* When alarm is on turn on the LEDs at full duty cycle for the designated time. */
	if(Rte_P_SecAlm_SecAlmPort_SecAlm_PinStateChange == STD_HIGH)
 800334c:	4b46      	ldr	r3, [pc, #280]	; (8003468 <TIM2_IRQHandler+0x120>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d10b      	bne.n	800336c <TIM2_IRQHandler+0x24>
	{
		TIM2->CCR1 = TIM2->ARR;
 8003354:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003358:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->CCR2 = TIM2->ARR;
 8003360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003364:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	6393      	str	r3, [r2, #56]	; 0x38
		/* do nothing */
	}
	/* Upon timer interrupt generation
	 * proceed to increase the PWM duty cycle
	 * for the low beam light until 75%. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LowBeam_CurrentState == STD_HIGH)
 800336c:	4b3f      	ldr	r3, [pc, #252]	; (800346c <TIM2_IRQHandler+0x124>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d11a      	bne.n	80033aa <TIM2_IRQHandler+0x62>
	{
		if(TIM2->CCR1 < 1999)
 8003374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337a:	f240 72ce 	movw	r2, #1998	; 0x7ce
 800337e:	4293      	cmp	r3, r2
 8003380:	d807      	bhi.n	8003392 <TIM2_IRQHandler+0x4a>
		{
			TIM2->CCR1 = TIM2->CCR1 + 20;
 8003382:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003388:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800338c:	3314      	adds	r3, #20
 800338e:	6353      	str	r3, [r2, #52]	; 0x34
 8003390:	e00b      	b.n	80033aa <TIM2_IRQHandler+0x62>
		}
		else if(TIM2->CCR1 >= 1999)
 8003392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003398:	f240 72ce 	movw	r2, #1998	; 0x7ce
 800339c:	4293      	cmp	r3, r2
 800339e:	d904      	bls.n	80033aa <TIM2_IRQHandler+0x62>
		{
			TIM2->CCR1 = 1999;
 80033a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033a4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80033a8:	635a      	str	r2, [r3, #52]	; 0x34
		/* do nothing */
	}
	/* Upon timer interrupt generation
	 * proceed to increase the PWM duty cycle
	 * for the rear position light until 75%. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearPositionLights_CurrentState == STD_HIGH)
 80033aa:	4b31      	ldr	r3, [pc, #196]	; (8003470 <TIM2_IRQHandler+0x128>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d11a      	bne.n	80033e8 <TIM2_IRQHandler+0xa0>
	{
		if(TIM2->CCR2 < 1999)
 80033b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b8:	f240 72ce 	movw	r2, #1998	; 0x7ce
 80033bc:	4293      	cmp	r3, r2
 80033be:	d807      	bhi.n	80033d0 <TIM2_IRQHandler+0x88>
		{
			TIM2->CCR2 = TIM2->CCR2 + 1;
 80033c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033ca:	3301      	adds	r3, #1
 80033cc:	6393      	str	r3, [r2, #56]	; 0x38
 80033ce:	e00b      	b.n	80033e8 <TIM2_IRQHandler+0xa0>
		}
		else if(TIM2->CCR2 >= 1999)
 80033d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	f240 72ce 	movw	r2, #1998	; 0x7ce
 80033da:	4293      	cmp	r3, r2
 80033dc:	d904      	bls.n	80033e8 <TIM2_IRQHandler+0xa0>
		{
			TIM2->CCR2 = 1999;
 80033de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033e2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80033e6:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_IntLights_IntLightsPort_IntLights_CurrentState == STD_HIGH)
 80033e8:	4b22      	ldr	r3, [pc, #136]	; (8003474 <TIM2_IRQHandler+0x12c>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d11b      	bne.n	8003428 <TIM2_IRQHandler+0xe0>
	{
		if(TIM2->CCR3 < 1999)
 80033f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f6:	f240 72ce 	movw	r2, #1998	; 0x7ce
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d807      	bhi.n	800340e <TIM2_IRQHandler+0xc6>
		{
			TIM2->CCR3 = TIM2->CCR3 + 20;
 80033fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003404:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003408:	3314      	adds	r3, #20
 800340a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800340c:	e026      	b.n	800345c <TIM2_IRQHandler+0x114>
		}
		else if(TIM2->CCR3 >= 1999)
 800340e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003414:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8003418:	4293      	cmp	r3, r2
 800341a:	d91f      	bls.n	800345c <TIM2_IRQHandler+0x114>
		{
			TIM2->CCR3 = 1999;
 800341c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003420:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003424:	63da      	str	r2, [r3, #60]	; 0x3c
 8003426:	e019      	b.n	800345c <TIM2_IRQHandler+0x114>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_IntLights_IntLightsPort_IntLights_CurrentState == STD_LOW)
 8003428:	4b12      	ldr	r3, [pc, #72]	; (8003474 <TIM2_IRQHandler+0x12c>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d115      	bne.n	800345c <TIM2_IRQHandler+0x114>
	{
		if(TIM2->CCR3 > 20)
 8003430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003436:	2b14      	cmp	r3, #20
 8003438:	d907      	bls.n	800344a <TIM2_IRQHandler+0x102>
		{
			TIM2->CCR3 = TIM2->CCR3 - 20;
 800343a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800343e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003440:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003444:	3b14      	subs	r3, #20
 8003446:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003448:	e008      	b.n	800345c <TIM2_IRQHandler+0x114>
		}
		else if(TIM2->CCR3 <= 20)
 800344a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800344e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003450:	2b14      	cmp	r3, #20
 8003452:	d803      	bhi.n	800345c <TIM2_IRQHandler+0x114>
		{
			TIM2->CCR3 = 0;
 8003454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003458:	2200      	movs	r2, #0
 800345a:	63da      	str	r2, [r3, #60]	; 0x3c
	else
	{
		/* do nothing */
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800345c:	4806      	ldr	r0, [pc, #24]	; (8003478 <TIM2_IRQHandler+0x130>)
 800345e:	f003 fe43 	bl	80070e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000115 	.word	0x20000115
 800346c:	200000ec 	.word	0x200000ec
 8003470:	200000ed 	.word	0x200000ed
 8003474:	20000108 	.word	0x20000108
 8003478:	2000032c 	.word	0x2000032c

0800347c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
	/* On central lock set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the central lock is set to low, set duty cycle to 0. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8003480:	4b34      	ldr	r3, [pc, #208]	; (8003554 <TIM3_IRQHandler+0xd8>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d104      	bne.n	8003492 <TIM3_IRQHandler+0x16>
	{
		TIM3->CCR1 = TIM3->ARR;
 8003488:	4b33      	ldr	r3, [pc, #204]	; (8003558 <TIM3_IRQHandler+0xdc>)
 800348a:	4a33      	ldr	r2, [pc, #204]	; (8003558 <TIM3_IRQHandler+0xdc>)
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	6353      	str	r3, [r2, #52]	; 0x34
 8003490:	e006      	b.n	80034a0 <TIM3_IRQHandler+0x24>
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW)
 8003492:	4b30      	ldr	r3, [pc, #192]	; (8003554 <TIM3_IRQHandler+0xd8>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d102      	bne.n	80034a0 <TIM3_IRQHandler+0x24>
	{
		TIM3->CCR1 = 0;
 800349a:	4b2f      	ldr	r3, [pc, #188]	; (8003558 <TIM3_IRQHandler+0xdc>)
 800349c:	2200      	movs	r2, #0
 800349e:	635a      	str	r2, [r3, #52]	; 0x34
	/* On brake lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the brake lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_HIGH)
 80034a0:	4b2e      	ldr	r3, [pc, #184]	; (800355c <TIM3_IRQHandler+0xe0>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d104      	bne.n	80034b2 <TIM3_IRQHandler+0x36>
	{
		TIM3->CCR2 = TIM3->ARR;
 80034a8:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <TIM3_IRQHandler+0xdc>)
 80034aa:	4a2b      	ldr	r2, [pc, #172]	; (8003558 <TIM3_IRQHandler+0xdc>)
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	6393      	str	r3, [r2, #56]	; 0x38
 80034b0:	e006      	b.n	80034c0 <TIM3_IRQHandler+0x44>
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_LOW)
 80034b2:	4b2a      	ldr	r3, [pc, #168]	; (800355c <TIM3_IRQHandler+0xe0>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d102      	bne.n	80034c0 <TIM3_IRQHandler+0x44>
	{
		TIM3->CCR2 = 0;
 80034ba:	4b27      	ldr	r3, [pc, #156]	; (8003558 <TIM3_IRQHandler+0xdc>)
 80034bc:	2200      	movs	r2, #0
 80034be:	639a      	str	r2, [r3, #56]	; 0x38
	/* On front fog lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the front fog lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState == STD_HIGH)
 80034c0:	4b27      	ldr	r3, [pc, #156]	; (8003560 <TIM3_IRQHandler+0xe4>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d116      	bne.n	80034f6 <TIM3_IRQHandler+0x7a>
	{
		if(TIM3->CCR3 < 1999)
 80034c8:	4b23      	ldr	r3, [pc, #140]	; (8003558 <TIM3_IRQHandler+0xdc>)
 80034ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034cc:	f240 72ce 	movw	r2, #1998	; 0x7ce
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d805      	bhi.n	80034e0 <TIM3_IRQHandler+0x64>
		{
			TIM3->CCR3 = TIM3->CCR3 + 20;
 80034d4:	4b20      	ldr	r3, [pc, #128]	; (8003558 <TIM3_IRQHandler+0xdc>)
 80034d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d8:	4a1f      	ldr	r2, [pc, #124]	; (8003558 <TIM3_IRQHandler+0xdc>)
 80034da:	3314      	adds	r3, #20
 80034dc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80034de:	e011      	b.n	8003504 <TIM3_IRQHandler+0x88>
		}
		else if(TIM3->CCR3 >= 1999)
 80034e0:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <TIM3_IRQHandler+0xdc>)
 80034e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e4:	f240 72ce 	movw	r2, #1998	; 0x7ce
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d90b      	bls.n	8003504 <TIM3_IRQHandler+0x88>
		{
			TIM3->CCR3 = 1999;
 80034ec:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <TIM3_IRQHandler+0xdc>)
 80034ee:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80034f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80034f4:	e006      	b.n	8003504 <TIM3_IRQHandler+0x88>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState == STD_LOW)
 80034f6:	4b1a      	ldr	r3, [pc, #104]	; (8003560 <TIM3_IRQHandler+0xe4>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <TIM3_IRQHandler+0x88>
	{
		TIM3->CCR3 = 0;
 80034fe:	4b16      	ldr	r3, [pc, #88]	; (8003558 <TIM3_IRQHandler+0xdc>)
 8003500:	2200      	movs	r2, #0
 8003502:	63da      	str	r2, [r3, #60]	; 0x3c
	/* On rear fog lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the rear fog lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_HIGH)
 8003504:	4b17      	ldr	r3, [pc, #92]	; (8003564 <TIM3_IRQHandler+0xe8>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d116      	bne.n	800353a <TIM3_IRQHandler+0xbe>
	{
		if(TIM3->CCR4 < 1999)
 800350c:	4b12      	ldr	r3, [pc, #72]	; (8003558 <TIM3_IRQHandler+0xdc>)
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8003514:	4293      	cmp	r3, r2
 8003516:	d805      	bhi.n	8003524 <TIM3_IRQHandler+0xa8>
		{
			TIM3->CCR4 = TIM3->CCR4 + 20;
 8003518:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <TIM3_IRQHandler+0xdc>)
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	4a0e      	ldr	r2, [pc, #56]	; (8003558 <TIM3_IRQHandler+0xdc>)
 800351e:	3314      	adds	r3, #20
 8003520:	6413      	str	r3, [r2, #64]	; 0x40
 8003522:	e011      	b.n	8003548 <TIM3_IRQHandler+0xcc>
		}
		else if(TIM3->CCR4 >= 1999)
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <TIM3_IRQHandler+0xdc>)
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	f240 72ce 	movw	r2, #1998	; 0x7ce
 800352c:	4293      	cmp	r3, r2
 800352e:	d90b      	bls.n	8003548 <TIM3_IRQHandler+0xcc>
		{
			TIM3->CCR4 = 1999;
 8003530:	4b09      	ldr	r3, [pc, #36]	; (8003558 <TIM3_IRQHandler+0xdc>)
 8003532:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003536:	641a      	str	r2, [r3, #64]	; 0x40
 8003538:	e006      	b.n	8003548 <TIM3_IRQHandler+0xcc>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_LOW)
 800353a:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <TIM3_IRQHandler+0xe8>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d102      	bne.n	8003548 <TIM3_IRQHandler+0xcc>
	{
		TIM3->CCR4 = 0;
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <TIM3_IRQHandler+0xdc>)
 8003544:	2200      	movs	r2, #0
 8003546:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		/* do nothing */
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003548:	4807      	ldr	r0, [pc, #28]	; (8003568 <TIM3_IRQHandler+0xec>)
 800354a:	f003 fdcd 	bl	80070e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	200000ce 	.word	0x200000ce
 8003558:	40000400 	.word	0x40000400
 800355c:	200000e6 	.word	0x200000e6
 8003560:	200000e9 	.word	0x200000e9
 8003564:	200000ef 	.word	0x200000ef
 8003568:	200003e0 	.word	0x200003e0

0800356c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003570:	4802      	ldr	r0, [pc, #8]	; (800357c <TIM4_IRQHandler+0x10>)
 8003572:	f003 fdb9 	bl	80070e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  /* USER CODE END TIM4_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000494 	.word	0x20000494

08003580 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003584:	4802      	ldr	r0, [pc, #8]	; (8003590 <USART1_IRQHandler+0x10>)
 8003586:	f004 ff6d 	bl	8008464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  /* USER CODE END USART1_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	200005fc 	.word	0x200005fc

08003594 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003598:	4802      	ldr	r0, [pc, #8]	; (80035a4 <TIM5_IRQHandler+0x10>)
 800359a:	f003 fda5 	bl	80070e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  /* USER CODE END TIM5_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000548 	.word	0x20000548

080035a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035ac:	4802      	ldr	r0, [pc, #8]	; (80035b8 <DMA2_Stream0_IRQHandler+0x10>)
 80035ae:	f001 fd63 	bl	8005078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000194 	.word	0x20000194

080035bc <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <SystemInit+0x20>)
 80035d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d6:	4a05      	ldr	r2, [pc, #20]	; (80035ec <SystemInit+0x20>)
 80035d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	e000ed00 	.word	0xe000ed00

080035f0 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM5_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08c      	sub	sp, #48	; 0x30
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f8:	f107 031c 	add.w	r3, r7, #28
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003610:	d10e      	bne.n	8003630 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	4b35      	ldr	r3, [pc, #212]	; (80036ec <HAL_TIM_Base_MspInit+0xfc>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	4a34      	ldr	r2, [pc, #208]	; (80036ec <HAL_TIM_Base_MspInit+0xfc>)
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	6413      	str	r3, [r2, #64]	; 0x40
 8003622:	4b32      	ldr	r3, [pc, #200]	; (80036ec <HAL_TIM_Base_MspInit+0xfc>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	61bb      	str	r3, [r7, #24]
 800362c:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800362e:	e058      	b.n	80036e2 <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM3)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a2e      	ldr	r2, [pc, #184]	; (80036f0 <HAL_TIM_Base_MspInit+0x100>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d10e      	bne.n	8003658 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	4b2b      	ldr	r3, [pc, #172]	; (80036ec <HAL_TIM_Base_MspInit+0xfc>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	4a2a      	ldr	r2, [pc, #168]	; (80036ec <HAL_TIM_Base_MspInit+0xfc>)
 8003644:	f043 0302 	orr.w	r3, r3, #2
 8003648:	6413      	str	r3, [r2, #64]	; 0x40
 800364a:	4b28      	ldr	r3, [pc, #160]	; (80036ec <HAL_TIM_Base_MspInit+0xfc>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	697b      	ldr	r3, [r7, #20]
}
 8003656:	e044      	b.n	80036e2 <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM4)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a25      	ldr	r2, [pc, #148]	; (80036f4 <HAL_TIM_Base_MspInit+0x104>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d10e      	bne.n	8003680 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	4b21      	ldr	r3, [pc, #132]	; (80036ec <HAL_TIM_Base_MspInit+0xfc>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	4a20      	ldr	r2, [pc, #128]	; (80036ec <HAL_TIM_Base_MspInit+0xfc>)
 800366c:	f043 0304 	orr.w	r3, r3, #4
 8003670:	6413      	str	r3, [r2, #64]	; 0x40
 8003672:	4b1e      	ldr	r3, [pc, #120]	; (80036ec <HAL_TIM_Base_MspInit+0xfc>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	693b      	ldr	r3, [r7, #16]
}
 800367e:	e030      	b.n	80036e2 <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM5)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1c      	ldr	r2, [pc, #112]	; (80036f8 <HAL_TIM_Base_MspInit+0x108>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d12b      	bne.n	80036e2 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	4b17      	ldr	r3, [pc, #92]	; (80036ec <HAL_TIM_Base_MspInit+0xfc>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	4a16      	ldr	r2, [pc, #88]	; (80036ec <HAL_TIM_Base_MspInit+0xfc>)
 8003694:	f043 0308 	orr.w	r3, r3, #8
 8003698:	6413      	str	r3, [r2, #64]	; 0x40
 800369a:	4b14      	ldr	r3, [pc, #80]	; (80036ec <HAL_TIM_Base_MspInit+0xfc>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	4b10      	ldr	r3, [pc, #64]	; (80036ec <HAL_TIM_Base_MspInit+0xfc>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	4a0f      	ldr	r2, [pc, #60]	; (80036ec <HAL_TIM_Base_MspInit+0xfc>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6313      	str	r3, [r2, #48]	; 0x30
 80036b6:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <HAL_TIM_Base_MspInit+0xfc>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PDCF_IC_Pin|PDCR_IC_Pin;
 80036c2:	2303      	movs	r3, #3
 80036c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c6:	2302      	movs	r3, #2
 80036c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ce:	2300      	movs	r3, #0
 80036d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80036d2:	2302      	movs	r3, #2
 80036d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d6:	f107 031c 	add.w	r3, r7, #28
 80036da:	4619      	mov	r1, r3
 80036dc:	4807      	ldr	r0, [pc, #28]	; (80036fc <HAL_TIM_Base_MspInit+0x10c>)
 80036de:	f002 f8dd 	bl	800589c <HAL_GPIO_Init>
}
 80036e2:	bf00      	nop
 80036e4:	3730      	adds	r7, #48	; 0x30
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40000800 	.word	0x40000800
 80036f8:	40000c00 	.word	0x40000c00
 80036fc:	40020000 	.word	0x40020000

08003700 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08c      	sub	sp, #48	; 0x30
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003708:	f107 031c 	add.w	r3, r7, #28
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003720:	d13e      	bne.n	80037a0 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
 8003726:	4b45      	ldr	r3, [pc, #276]	; (800383c <HAL_TIM_MspPostInit+0x13c>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	4a44      	ldr	r2, [pc, #272]	; (800383c <HAL_TIM_MspPostInit+0x13c>)
 800372c:	f043 0302 	orr.w	r3, r3, #2
 8003730:	6313      	str	r3, [r2, #48]	; 0x30
 8003732:	4b42      	ldr	r3, [pc, #264]	; (800383c <HAL_TIM_MspPostInit+0x13c>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	61bb      	str	r3, [r7, #24]
 800373c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	4b3e      	ldr	r3, [pc, #248]	; (800383c <HAL_TIM_MspPostInit+0x13c>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	4a3d      	ldr	r2, [pc, #244]	; (800383c <HAL_TIM_MspPostInit+0x13c>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6313      	str	r3, [r2, #48]	; 0x30
 800374e:	4b3b      	ldr	r3, [pc, #236]	; (800383c <HAL_TIM_MspPostInit+0x13c>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = IL_PWM_Pin|RPL_PWM_Pin;
 800375a:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800375e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003760:	2302      	movs	r3, #2
 8003762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003764:	2300      	movs	r3, #0
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003768:	2300      	movs	r3, #0
 800376a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800376c:	2301      	movs	r3, #1
 800376e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003770:	f107 031c 	add.w	r3, r7, #28
 8003774:	4619      	mov	r1, r3
 8003776:	4832      	ldr	r0, [pc, #200]	; (8003840 <HAL_TIM_MspPostInit+0x140>)
 8003778:	f002 f890 	bl	800589c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LB_PWM_Pin;
 800377c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003782:	2302      	movs	r3, #2
 8003784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003786:	2300      	movs	r3, #0
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378a:	2300      	movs	r3, #0
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800378e:	2301      	movs	r3, #1
 8003790:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LB_PWM_GPIO_Port, &GPIO_InitStruct);
 8003792:	f107 031c 	add.w	r3, r7, #28
 8003796:	4619      	mov	r1, r3
 8003798:	482a      	ldr	r0, [pc, #168]	; (8003844 <HAL_TIM_MspPostInit+0x144>)
 800379a:	f002 f87f 	bl	800589c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800379e:	e048      	b.n	8003832 <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM3)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a28      	ldr	r2, [pc, #160]	; (8003848 <HAL_TIM_MspPostInit+0x148>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d11f      	bne.n	80037ea <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	4b23      	ldr	r3, [pc, #140]	; (800383c <HAL_TIM_MspPostInit+0x13c>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	4a22      	ldr	r2, [pc, #136]	; (800383c <HAL_TIM_MspPostInit+0x13c>)
 80037b4:	f043 0304 	orr.w	r3, r3, #4
 80037b8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ba:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_TIM_MspPostInit+0x13c>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BL_PWM_Pin|FFL_PWM_Pin|RFL_PWM_Pin;
 80037c6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80037ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037cc:	2302      	movs	r3, #2
 80037ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d4:	2300      	movs	r3, #0
 80037d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037d8:	2302      	movs	r3, #2
 80037da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037dc:	f107 031c 	add.w	r3, r7, #28
 80037e0:	4619      	mov	r1, r3
 80037e2:	481a      	ldr	r0, [pc, #104]	; (800384c <HAL_TIM_MspPostInit+0x14c>)
 80037e4:	f002 f85a 	bl	800589c <HAL_GPIO_Init>
}
 80037e8:	e023      	b.n	8003832 <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM4)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a18      	ldr	r2, [pc, #96]	; (8003850 <HAL_TIM_MspPostInit+0x150>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d11e      	bne.n	8003832 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	4b10      	ldr	r3, [pc, #64]	; (800383c <HAL_TIM_MspPostInit+0x13c>)
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	4a0f      	ldr	r2, [pc, #60]	; (800383c <HAL_TIM_MspPostInit+0x13c>)
 80037fe:	f043 0302 	orr.w	r3, r3, #2
 8003802:	6313      	str	r3, [r2, #48]	; 0x30
 8003804:	4b0d      	ldr	r3, [pc, #52]	; (800383c <HAL_TIM_MspPostInit+0x13c>)
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LTS_PWM_Pin|RTS_PWM_Pin;
 8003810:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003816:	2302      	movs	r3, #2
 8003818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381a:	2300      	movs	r3, #0
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381e:	2300      	movs	r3, #0
 8003820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003822:	2302      	movs	r3, #2
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003826:	f107 031c 	add.w	r3, r7, #28
 800382a:	4619      	mov	r1, r3
 800382c:	4804      	ldr	r0, [pc, #16]	; (8003840 <HAL_TIM_MspPostInit+0x140>)
 800382e:	f002 f835 	bl	800589c <HAL_GPIO_Init>
}
 8003832:	bf00      	nop
 8003834:	3730      	adds	r7, #48	; 0x30
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023800 	.word	0x40023800
 8003840:	40020400 	.word	0x40020400
 8003844:	40020000 	.word	0x40020000
 8003848:	40000400 	.word	0x40000400
 800384c:	40020800 	.word	0x40020800
 8003850:	40000800 	.word	0x40000800

08003854 <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003864:	d109      	bne.n	800387a <HAL_TIM_Base_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 8003866:	4b1f      	ldr	r3, [pc, #124]	; (80038e4 <HAL_TIM_Base_MspDeInit+0x90>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	4a1e      	ldr	r2, [pc, #120]	; (80038e4 <HAL_TIM_Base_MspDeInit+0x90>)
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	6413      	str	r3, [r2, #64]	; 0x40

    /* TIM2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8003872:	201c      	movs	r0, #28
 8003874:	f001 f96b 	bl	8004b4e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspDeInit 1 */

  /* USER CODE END TIM5_MspDeInit 1 */
  }
}
 8003878:	e02f      	b.n	80038da <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM3)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1a      	ldr	r2, [pc, #104]	; (80038e8 <HAL_TIM_Base_MspDeInit+0x94>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d109      	bne.n	8003898 <HAL_TIM_Base_MspDeInit+0x44>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8003884:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <HAL_TIM_Base_MspDeInit+0x90>)
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	4a16      	ldr	r2, [pc, #88]	; (80038e4 <HAL_TIM_Base_MspDeInit+0x90>)
 800388a:	f023 0302 	bic.w	r3, r3, #2
 800388e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8003890:	201d      	movs	r0, #29
 8003892:	f001 f95c 	bl	8004b4e <HAL_NVIC_DisableIRQ>
}
 8003896:	e020      	b.n	80038da <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM4)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a13      	ldr	r2, [pc, #76]	; (80038ec <HAL_TIM_Base_MspDeInit+0x98>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d109      	bne.n	80038b6 <HAL_TIM_Base_MspDeInit+0x62>
    __HAL_RCC_TIM4_CLK_DISABLE();
 80038a2:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <HAL_TIM_Base_MspDeInit+0x90>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	4a0f      	ldr	r2, [pc, #60]	; (80038e4 <HAL_TIM_Base_MspDeInit+0x90>)
 80038a8:	f023 0304 	bic.w	r3, r3, #4
 80038ac:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 80038ae:	201e      	movs	r0, #30
 80038b0:	f001 f94d 	bl	8004b4e <HAL_NVIC_DisableIRQ>
}
 80038b4:	e011      	b.n	80038da <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM5)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a0d      	ldr	r2, [pc, #52]	; (80038f0 <HAL_TIM_Base_MspDeInit+0x9c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d10c      	bne.n	80038da <HAL_TIM_Base_MspDeInit+0x86>
    __HAL_RCC_TIM5_CLK_DISABLE();
 80038c0:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <HAL_TIM_Base_MspDeInit+0x90>)
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	4a07      	ldr	r2, [pc, #28]	; (80038e4 <HAL_TIM_Base_MspDeInit+0x90>)
 80038c6:	f023 0308 	bic.w	r3, r3, #8
 80038ca:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PDCF_IC_Pin|PDCR_IC_Pin);
 80038cc:	2103      	movs	r1, #3
 80038ce:	4809      	ldr	r0, [pc, #36]	; (80038f4 <HAL_TIM_Base_MspDeInit+0xa0>)
 80038d0:	f002 f968 	bl	8005ba4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
 80038d4:	2032      	movs	r0, #50	; 0x32
 80038d6:	f001 f93a 	bl	8004b4e <HAL_NVIC_DisableIRQ>
}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40000400 	.word	0x40000400
 80038ec:	40000800 	.word	0x40000800
 80038f0:	40000c00 	.word	0x40000c00
 80038f4:	40020000 	.word	0x40020000

080038f8 <HAL_UART_MspInit>:
  /* USER CODE END USART1_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08a      	sub	sp, #40	; 0x28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	f107 0314 	add.w	r3, r7, #20
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a19      	ldr	r2, [pc, #100]	; (800397c <HAL_UART_MspInit+0x84>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d12c      	bne.n	8003974 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	4b18      	ldr	r3, [pc, #96]	; (8003980 <HAL_UART_MspInit+0x88>)
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	4a17      	ldr	r2, [pc, #92]	; (8003980 <HAL_UART_MspInit+0x88>)
 8003924:	f043 0310 	orr.w	r3, r3, #16
 8003928:	6453      	str	r3, [r2, #68]	; 0x44
 800392a:	4b15      	ldr	r3, [pc, #84]	; (8003980 <HAL_UART_MspInit+0x88>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	4b11      	ldr	r3, [pc, #68]	; (8003980 <HAL_UART_MspInit+0x88>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	4a10      	ldr	r2, [pc, #64]	; (8003980 <HAL_UART_MspInit+0x88>)
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	6313      	str	r3, [r2, #48]	; 0x30
 8003946:	4b0e      	ldr	r3, [pc, #56]	; (8003980 <HAL_UART_MspInit+0x88>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003952:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003958:	2302      	movs	r3, #2
 800395a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003960:	2303      	movs	r3, #3
 8003962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003964:	2307      	movs	r3, #7
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	4619      	mov	r1, r3
 800396e:	4805      	ldr	r0, [pc, #20]	; (8003984 <HAL_UART_MspInit+0x8c>)
 8003970:	f001 ff94 	bl	800589c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003974:	bf00      	nop
 8003976:	3728      	adds	r7, #40	; 0x28
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40011000 	.word	0x40011000
 8003980:	40023800 	.word	0x40023800
 8003984:	40020000 	.word	0x40020000

08003988 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <HAL_UART_MspDeInit+0x38>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d10d      	bne.n	80039b6 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800399a:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <HAL_UART_MspDeInit+0x3c>)
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	4a09      	ldr	r2, [pc, #36]	; (80039c4 <HAL_UART_MspDeInit+0x3c>)
 80039a0:	f023 0310 	bic.w	r3, r3, #16
 80039a4:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80039a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80039aa:	4807      	ldr	r0, [pc, #28]	; (80039c8 <HAL_UART_MspDeInit+0x40>)
 80039ac:	f002 f8fa 	bl	8005ba4 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80039b0:	2025      	movs	r0, #37	; 0x25
 80039b2:	f001 f8cc 	bl	8004b4e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40011000 	.word	0x40011000
 80039c4:	40023800 	.word	0x40023800
 80039c8:	40020000 	.word	0x40020000

080039cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80039cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039d0:	480d      	ldr	r0, [pc, #52]	; (8003a08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80039d2:	490e      	ldr	r1, [pc, #56]	; (8003a0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80039d4:	4a0e      	ldr	r2, [pc, #56]	; (8003a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039d8:	e002      	b.n	80039e0 <LoopCopyDataInit>

080039da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039de:	3304      	adds	r3, #4

080039e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039e4:	d3f9      	bcc.n	80039da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039e6:	4a0b      	ldr	r2, [pc, #44]	; (8003a14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80039e8:	4c0b      	ldr	r4, [pc, #44]	; (8003a18 <LoopFillZerobss+0x26>)
  movs r3, #0
 80039ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039ec:	e001      	b.n	80039f2 <LoopFillZerobss>

080039ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039f0:	3204      	adds	r2, #4

080039f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039f4:	d3fb      	bcc.n	80039ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80039f6:	f7ff fde9 	bl	80035cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039fa:	f00b fc7b 	bl	800f2f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039fe:	f7fd f967 	bl	8000cd0 <main>
  bx  lr    
 8003a02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a0c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003a10:	0800fb68 	.word	0x0800fb68
  ldr r2, =_sbss
 8003a14:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003a18:	20006014 	.word	0x20006014

08003a1c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a1c:	e7fe      	b.n	8003a1c <DMA1_Stream0_IRQHandler>

08003a1e <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b084      	sub	sp, #16
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d104      	bne.n	8003a36 <stm32_lock_acquire+0x18>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a2c:	b672      	cpsid	i
}
 8003a2e:	bf00      	nop
 8003a30:	f00b fc2a 	bl	800f288 <Error_Handler>
 8003a34:	e7fe      	b.n	8003a34 <stm32_lock_acquire+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a36:	f3ef 8305 	mrs	r3, IPSR
 8003a3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
  STM32_LOCK_BLOCK_IF_INTERRUPT_CONTEXT();
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d004      	beq.n	8003a4c <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8003a42:	b672      	cpsid	i
}
 8003a44:	bf00      	nop
 8003a46:	f00b fc1f 	bl	800f288 <Error_Handler>
 8003a4a:	e7fe      	b.n	8003a4a <stm32_lock_acquire+0x2c>
  vTaskSuspendAll();
 8003a4c:	f008 ffd0 	bl	800c9f0 <vTaskSuspendAll>
}
 8003a50:	bf00      	nop
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d104      	bne.n	8003a70 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003a66:	b672      	cpsid	i
}
 8003a68:	bf00      	nop
 8003a6a:	f00b fc0d 	bl	800f288 <Error_Handler>
 8003a6e:	e7fe      	b.n	8003a6e <stm32_lock_release+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a70:	f3ef 8305 	mrs	r3, IPSR
 8003a74:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a76:	68fb      	ldr	r3, [r7, #12]
  STM32_LOCK_BLOCK_IF_INTERRUPT_CONTEXT();
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d004      	beq.n	8003a86 <stm32_lock_release+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8003a7c:	b672      	cpsid	i
}
 8003a7e:	bf00      	nop
 8003a80:	f00b fc02 	bl	800f288 <Error_Handler>
 8003a84:	e7fe      	b.n	8003a84 <stm32_lock_release+0x2c>
  xTaskResumeAll();
 8003a86:	f008 fff9 	bl	800ca7c <xTaskResumeAll>
}
 8003a8a:	bf00      	nop
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d104      	bne.n	8003aaa <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003aa0:	b672      	cpsid	i
}
 8003aa2:	bf00      	nop
 8003aa4:	f00b fbf0 	bl	800f288 <Error_Handler>
 8003aa8:	e7fe      	b.n	8003aa8 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff ffb6 	bl	8003a1e <stm32_lock_acquire>
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d104      	bne.n	8003ad2 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003ac8:	b672      	cpsid	i
}
 8003aca:	bf00      	nop
 8003acc:	f00b fbdc 	bl	800f288 <Error_Handler>
 8003ad0:	e7fe      	b.n	8003ad0 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ffbf 	bl	8003a58 <stm32_lock_release>
}
 8003ada:	bf00      	nop
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <Dem_MainFunction>:
/***********************************************************************************
* Function: Dem_MainFunction													   *
* Description: Module main function.									 		   *
************************************************************************************/
VOID Dem_MainFunction()
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	af00      	add	r7, sp, #0
	Dem_ProcessFault();
 8003ae6:	f000 f803 	bl	8003af0 <Dem_ProcessFault>
}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <Dem_ProcessFault>:
/***********************************************************************************
* Function: Dem_ProcessFault													   *
* Description: Process fault from application.							 		   *
************************************************************************************/
VOID Dem_ProcessFault()
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour != STD_LOW || Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState == STD_LOW)
 8003af4:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <Dem_ProcessFault+0x3c>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d103      	bne.n	8003b04 <Dem_ProcessFault+0x14>
 8003afc:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <Dem_ProcessFault+0x40>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d102      	bne.n	8003b0a <Dem_ProcessFault+0x1a>
	{
		Dem_DtcArray[POSITION_DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION] = STD_LOW;
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <Dem_ProcessFault+0x44>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	709a      	strb	r2, [r3, #2]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree != STD_LOW || Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState == STD_LOW)
 8003b0a:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <Dem_ProcessFault+0x48>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d103      	bne.n	8003b1a <Dem_ProcessFault+0x2a>
 8003b12:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <Dem_ProcessFault+0x40>)
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d102      	bne.n	8003b20 <Dem_ProcessFault+0x30>
	{
		Dem_DtcArray[POSITION_DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION] = STD_LOW;
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <Dem_ProcessFault+0x44>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	70da      	strb	r2, [r3, #3]
	}
	else
	{
		/* do nothing */
	}
}
 8003b20:	bf00      	nop
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	200006d1 	.word	0x200006d1
 8003b30:	200000e4 	.word	0x200000e4
 8003b34:	20000674 	.word	0x20000674
 8003b38:	200006c1 	.word	0x200006c1

08003b3c <Dem_ReceiveFault>:
/***********************************************************************************
* Function: Dem_ReceiveFault													   *
* Description: Receives fault from application.							 		   *
************************************************************************************/
VOID Dem_ReceiveFault(uint8 faultValue)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	71fb      	strb	r3, [r7, #7]
	switch(faultValue)
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	2b99      	cmp	r3, #153	; 0x99
 8003b4a:	d070      	beq.n	8003c2e <Dem_ReceiveFault+0xf2>
 8003b4c:	2b99      	cmp	r3, #153	; 0x99
 8003b4e:	dc72      	bgt.n	8003c36 <Dem_ReceiveFault+0xfa>
 8003b50:	2b56      	cmp	r3, #86	; 0x56
 8003b52:	d068      	beq.n	8003c26 <Dem_ReceiveFault+0xea>
 8003b54:	2b56      	cmp	r3, #86	; 0x56
 8003b56:	dc6e      	bgt.n	8003c36 <Dem_ReceiveFault+0xfa>
 8003b58:	2b22      	cmp	r3, #34	; 0x22
 8003b5a:	dc49      	bgt.n	8003bf0 <Dem_ReceiveFault+0xb4>
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	db6a      	blt.n	8003c36 <Dem_ReceiveFault+0xfa>
 8003b60:	3b02      	subs	r3, #2
 8003b62:	2b20      	cmp	r3, #32
 8003b64:	d867      	bhi.n	8003c36 <Dem_ReceiveFault+0xfa>
 8003b66:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <Dem_ReceiveFault+0x30>)
 8003b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6c:	08003c07 	.word	0x08003c07
 8003b70:	08003bf7 	.word	0x08003bf7
 8003b74:	08003c37 	.word	0x08003c37
 8003b78:	08003c37 	.word	0x08003c37
 8003b7c:	08003c37 	.word	0x08003c37
 8003b80:	08003c37 	.word	0x08003c37
 8003b84:	08003c37 	.word	0x08003c37
 8003b88:	08003c37 	.word	0x08003c37
 8003b8c:	08003c37 	.word	0x08003c37
 8003b90:	08003c37 	.word	0x08003c37
 8003b94:	08003c37 	.word	0x08003c37
 8003b98:	08003c37 	.word	0x08003c37
 8003b9c:	08003c37 	.word	0x08003c37
 8003ba0:	08003c37 	.word	0x08003c37
 8003ba4:	08003c37 	.word	0x08003c37
 8003ba8:	08003c37 	.word	0x08003c37
 8003bac:	08003c0f 	.word	0x08003c0f
 8003bb0:	08003bff 	.word	0x08003bff
 8003bb4:	08003c37 	.word	0x08003c37
 8003bb8:	08003c37 	.word	0x08003c37
 8003bbc:	08003c37 	.word	0x08003c37
 8003bc0:	08003c37 	.word	0x08003c37
 8003bc4:	08003c37 	.word	0x08003c37
 8003bc8:	08003c37 	.word	0x08003c37
 8003bcc:	08003c37 	.word	0x08003c37
 8003bd0:	08003c37 	.word	0x08003c37
 8003bd4:	08003c37 	.word	0x08003c37
 8003bd8:	08003c37 	.word	0x08003c37
 8003bdc:	08003c37 	.word	0x08003c37
 8003be0:	08003c37 	.word	0x08003c37
 8003be4:	08003c37 	.word	0x08003c37
 8003be8:	08003c37 	.word	0x08003c37
 8003bec:	08003c17 	.word	0x08003c17
 8003bf0:	2b35      	cmp	r3, #53	; 0x35
 8003bf2:	d014      	beq.n	8003c1e <Dem_ReceiveFault+0xe2>
			break;
		case DTC_PERIPHERAL_ERROR:
			Dem_DtcArray[POSITION_DTC_PERIPHERAL_ERROR] = DTC_PERIPHERAL_ERROR;
			break;
		default:
			break;
 8003bf4:	e01f      	b.n	8003c36 <Dem_ReceiveFault+0xfa>
			Dem_DtcArray[POSITION_DTC_LIGHT_SENSOR_MALFUNCTION] = DTC_LIGHT_SENSOR_MALFUNCTION;
 8003bf6:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <Dem_ReceiveFault+0x108>)
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	701a      	strb	r2, [r3, #0]
			break;
 8003bfc:	e01c      	b.n	8003c38 <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_VIBRATION_SENSOR_MALFUNCTION] = DTC_VIBRATION_SENSOR_MALFUNCTION;
 8003bfe:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <Dem_ReceiveFault+0x108>)
 8003c00:	2213      	movs	r2, #19
 8003c02:	705a      	strb	r2, [r3, #1]
			break;
 8003c04:	e018      	b.n	8003c38 <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION] = DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION;
 8003c06:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <Dem_ReceiveFault+0x108>)
 8003c08:	2202      	movs	r2, #2
 8003c0a:	709a      	strb	r2, [r3, #2]
			break;
 8003c0c:	e014      	b.n	8003c38 <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION] = DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION;
 8003c0e:	4b0d      	ldr	r3, [pc, #52]	; (8003c44 <Dem_ReceiveFault+0x108>)
 8003c10:	2212      	movs	r2, #18
 8003c12:	70da      	strb	r2, [r3, #3]
			break;
 8003c14:	e010      	b.n	8003c38 <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_BLUETOOTH_MODULE_MALFUNCTION] = DTC_BLUETOOTH_MODULE_MALFUNCTION;
 8003c16:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <Dem_ReceiveFault+0x108>)
 8003c18:	2222      	movs	r2, #34	; 0x22
 8003c1a:	711a      	strb	r2, [r3, #4]
			break;
 8003c1c:	e00c      	b.n	8003c38 <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_SOFTWARE_RESET] = DTC_SOFTWARE_RESET;
 8003c1e:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <Dem_ReceiveFault+0x108>)
 8003c20:	2235      	movs	r2, #53	; 0x35
 8003c22:	715a      	strb	r2, [r3, #5]
			break;
 8003c24:	e008      	b.n	8003c38 <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_HARDWARE_RESET] = DTC_HARDWARE_RESET;
 8003c26:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <Dem_ReceiveFault+0x108>)
 8003c28:	2256      	movs	r2, #86	; 0x56
 8003c2a:	719a      	strb	r2, [r3, #6]
			break;
 8003c2c:	e004      	b.n	8003c38 <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_PERIPHERAL_ERROR] = DTC_PERIPHERAL_ERROR;
 8003c2e:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <Dem_ReceiveFault+0x108>)
 8003c30:	2299      	movs	r2, #153	; 0x99
 8003c32:	71da      	strb	r2, [r3, #7]
			break;
 8003c34:	e000      	b.n	8003c38 <Dem_ReceiveFault+0xfc>
			break;
 8003c36:	bf00      	nop
	}
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	20000674 	.word	0x20000674

08003c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c4c:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <HAL_Init+0x40>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0d      	ldr	r2, [pc, #52]	; (8003c88 <HAL_Init+0x40>)
 8003c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c58:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <HAL_Init+0x40>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a0a      	ldr	r2, [pc, #40]	; (8003c88 <HAL_Init+0x40>)
 8003c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c64:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <HAL_Init+0x40>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a07      	ldr	r2, [pc, #28]	; (8003c88 <HAL_Init+0x40>)
 8003c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c70:	2003      	movs	r0, #3
 8003c72:	f000 ff37 	bl	8004ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c76:	200f      	movs	r0, #15
 8003c78:	f7ff fa9e 	bl	80031b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c7c:	f7ff fa52 	bl	8003124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40023c00 	.word	0x40023c00

08003c8c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8003c90:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <HAL_DeInit+0x54>)
 8003c92:	f04f 32ff 	mov.w	r2, #4294967295
 8003c96:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8003c98:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <HAL_DeInit+0x54>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8003c9e:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <HAL_DeInit+0x54>)
 8003ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8003ca6:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <HAL_DeInit+0x54>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <HAL_DeInit+0x54>)
 8003cae:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb2:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <HAL_DeInit+0x54>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8003cba:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <HAL_DeInit+0x54>)
 8003cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc0:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8003cc2:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <HAL_DeInit+0x54>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8003cc8:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <HAL_DeInit+0x54>)
 8003cca:	f04f 32ff 	mov.w	r2, #4294967295
 8003cce:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8003cd0:	4b03      	ldr	r3, [pc, #12]	; (8003ce0 <HAL_DeInit+0x54>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8003cd6:	f000 f805 	bl	8003ce4 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40023800 	.word	0x40023800

08003ce4 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
	...

08003cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cf8:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <HAL_IncTick+0x20>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_IncTick+0x24>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4413      	add	r3, r2
 8003d04:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <HAL_IncTick+0x24>)
 8003d06:	6013      	str	r3, [r2, #0]
}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20000024 	.word	0x20000024
 8003d18:	2000067c 	.word	0x2000067c

08003d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d20:	4b03      	ldr	r3, [pc, #12]	; (8003d30 <HAL_GetTick+0x14>)
 8003d22:	681b      	ldr	r3, [r3, #0]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	2000067c 	.word	0x2000067c

08003d34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e04a      	b.n	8003de0 <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d120      	bne.n	8003d94 <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a24      	ldr	r2, [pc, #144]	; (8003de8 <HAL_ADC_Init+0xb4>)
 8003d56:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a24      	ldr	r2, [pc, #144]	; (8003dec <HAL_ADC_Init+0xb8>)
 8003d5c:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a23      	ldr	r2, [pc, #140]	; (8003df0 <HAL_ADC_Init+0xbc>)
 8003d62:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a23      	ldr	r2, [pc, #140]	; (8003df4 <HAL_ADC_Init+0xc0>)
 8003d68:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a22      	ldr	r2, [pc, #136]	; (8003df8 <HAL_ADC_Init+0xc4>)
 8003d6e:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d102      	bne.n	8003d7e <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a20      	ldr	r2, [pc, #128]	; (8003dfc <HAL_ADC_Init+0xc8>)
 8003d7c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d118      	bne.n	8003dd2 <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003da8:	f023 0302 	bic.w	r3, r3, #2
 8003dac:	f043 0202 	orr.w	r2, r3, #2
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fc21 	bl	80045fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	f023 0303 	bic.w	r3, r3, #3
 8003dc8:	f043 0201 	orr.w	r2, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40
 8003dd0:	e001      	b.n	8003dd6 <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	0800937d 	.word	0x0800937d
 8003dec:	08004281 	.word	0x08004281
 8003df0:	08004295 	.word	0x08004295
 8003df4:	080093b9 	.word	0x080093b9
 8003df8:	08004901 	.word	0x08004901
 8003dfc:	08002829 	.word	0x08002829

08003e00 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e02a      	b.n	8003e6c <HAL_ADC_DeInit+0x6c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f043 0202 	orr.w	r2, r3, #2
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0201 	bic.w	r2, r2, #1
 8003e30:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d110      	bne.n	8003e62 <HAL_ADC_DeInit+0x62>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  if (hadc->MspDeInitCallback == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d102      	bne.n	8003e4e <HAL_ADC_DeInit+0x4e>
  {
    hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a0a      	ldr	r2, [pc, #40]	; (8003e74 <HAL_ADC_DeInit+0x74>)
 8003e4c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	4798      	blx	r3
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	0800292d 	.word	0x0800292d

08003e78 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	2300      	movs	r3, #0
 8003e86:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d04a      	beq.n	8003f44 <HAL_ADC_IRQHandler+0xcc>
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d047      	beq.n	8003f44 <HAL_ADC_IRQHandler+0xcc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d105      	bne.n	8003ecc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d12b      	bne.n	8003f32 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d127      	bne.n	8003f32 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d006      	beq.n	8003efe <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d119      	bne.n	8003f32 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0220 	bic.w	r2, r2, #32
 8003f0c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d105      	bne.n	8003f32 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	f043 0201 	orr.w	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f06f 0212 	mvn.w	r2, #18
 8003f42:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f52:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d058      	beq.n	800400c <HAL_ADC_IRQHandler+0x194>
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d055      	beq.n	800400c <HAL_ADC_IRQHandler+0x194>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d105      	bne.n	8003f78 <HAL_ADC_IRQHandler+0x100>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d139      	bne.n	8003ffa <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d006      	beq.n	8003fa2 <HAL_ADC_IRQHandler+0x12a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d12b      	bne.n	8003ffa <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d124      	bne.n	8003ffa <HAL_ADC_IRQHandler+0x182>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d11d      	bne.n	8003ffa <HAL_ADC_IRQHandler+0x182>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d119      	bne.n	8003ffa <HAL_ADC_IRQHandler+0x182>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fd4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d105      	bne.n	8003ffa <HAL_ADC_IRQHandler+0x182>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f043 0201 	orr.w	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f06f 020c 	mvn.w	r2, #12
 800400a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d018      	beq.n	8004054 <HAL_ADC_IRQHandler+0x1dc>
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d015      	beq.n	8004054 <HAL_ADC_IRQHandler+0x1dc>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b01      	cmp	r3, #1
 8004034:	d10e      	bne.n	8004054 <HAL_ADC_IRQHandler+0x1dc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f06f 0201 	mvn.w	r2, #1
 8004052:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004062:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d016      	beq.n	8004098 <HAL_ADC_IRQHandler+0x220>
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d013      	beq.n	8004098 <HAL_ADC_IRQHandler+0x220>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004074:	f043 0202 	orr.w	r2, r3, #2
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0220 	mvn.w	r2, #32
 8004084:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f06f 0220 	mvn.w	r2, #32
 8004096:	601a      	str	r2, [r3, #0]
  }
}
 8004098:	bf00      	nop
 800409a:	3718      	adds	r7, #24
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_ADC_Start_DMA+0x1e>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e0ce      	b.n	800425c <HAL_ADC_Start_DMA+0x1bc>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d018      	beq.n	8004106 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0201 	orr.w	r2, r2, #1
 80040e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80040e4:	4b5f      	ldr	r3, [pc, #380]	; (8004264 <HAL_ADC_Start_DMA+0x1c4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a5f      	ldr	r2, [pc, #380]	; (8004268 <HAL_ADC_Start_DMA+0x1c8>)
 80040ea:	fba2 2303 	umull	r2, r3, r2, r3
 80040ee:	0c9a      	lsrs	r2, r3, #18
 80040f0:	4613      	mov	r3, r2
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	4413      	add	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80040f8:	e002      	b.n	8004100 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f9      	bne.n	80040fa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004114:	d107      	bne.n	8004126 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004124:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b01      	cmp	r3, #1
 8004132:	f040 8086 	bne.w	8004242 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004154:	2b00      	cmp	r3, #0
 8004156:	d007      	beq.n	8004168 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004160:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004174:	d106      	bne.n	8004184 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	f023 0206 	bic.w	r2, r3, #6
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	645a      	str	r2, [r3, #68]	; 0x44
 8004182:	e002      	b.n	800418a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004192:	4b36      	ldr	r3, [pc, #216]	; (800426c <HAL_ADC_Start_DMA+0x1cc>)
 8004194:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	4a35      	ldr	r2, [pc, #212]	; (8004270 <HAL_ADC_Start_DMA+0x1d0>)
 800419c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	4a34      	ldr	r2, [pc, #208]	; (8004274 <HAL_ADC_Start_DMA+0x1d4>)
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	4a33      	ldr	r2, [pc, #204]	; (8004278 <HAL_ADC_Start_DMA+0x1d8>)
 80041ac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80041b6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80041c6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	334c      	adds	r3, #76	; 0x4c
 80041e2:	4619      	mov	r1, r3
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f000 fe5c 	bl	8004ea4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f003 031f 	and.w	r3, r3, #31
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10f      	bne.n	8004218 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d129      	bne.n	800425a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004214:	609a      	str	r2, [r3, #8]
 8004216:	e020      	b.n	800425a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a17      	ldr	r2, [pc, #92]	; (800427c <HAL_ADC_Start_DMA+0x1dc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d11b      	bne.n	800425a <HAL_ADC_Start_DMA+0x1ba>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d114      	bne.n	800425a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	e00b      	b.n	800425a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f043 0210 	orr.w	r2, r3, #16
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	f043 0201 	orr.w	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	2000001c 	.word	0x2000001c
 8004268:	431bde83 	.word	0x431bde83
 800426c:	40012300 	.word	0x40012300
 8004270:	080047f5 	.word	0x080047f5
 8004274:	080048b3 	.word	0x080048b3
 8004278:	080048d1 	.word	0x080048d1
 800427c:	40012000 	.word	0x40012000

08004280 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x1c>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e113      	b.n	80044ec <HAL_ADC_ConfigChannel+0x244>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b09      	cmp	r3, #9
 80042d2:	d925      	bls.n	8004320 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68d9      	ldr	r1, [r3, #12]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	461a      	mov	r2, r3
 80042e2:	4613      	mov	r3, r2
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	4413      	add	r3, r2
 80042e8:	3b1e      	subs	r3, #30
 80042ea:	2207      	movs	r2, #7
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	43da      	mvns	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	400a      	ands	r2, r1
 80042f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68d9      	ldr	r1, [r3, #12]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	b29b      	uxth	r3, r3
 800430a:	4618      	mov	r0, r3
 800430c:	4603      	mov	r3, r0
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	4403      	add	r3, r0
 8004312:	3b1e      	subs	r3, #30
 8004314:	409a      	lsls	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	60da      	str	r2, [r3, #12]
 800431e:	e022      	b.n	8004366 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6919      	ldr	r1, [r3, #16]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	b29b      	uxth	r3, r3
 800432c:	461a      	mov	r2, r3
 800432e:	4613      	mov	r3, r2
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	4413      	add	r3, r2
 8004334:	2207      	movs	r2, #7
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43da      	mvns	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	400a      	ands	r2, r1
 8004342:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6919      	ldr	r1, [r3, #16]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	b29b      	uxth	r3, r3
 8004354:	4618      	mov	r0, r3
 8004356:	4603      	mov	r3, r0
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	4403      	add	r3, r0
 800435c:	409a      	lsls	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b06      	cmp	r3, #6
 800436c:	d824      	bhi.n	80043b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	3b05      	subs	r3, #5
 8004380:	221f      	movs	r2, #31
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	43da      	mvns	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	400a      	ands	r2, r1
 800438e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	b29b      	uxth	r3, r3
 800439c:	4618      	mov	r0, r3
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	3b05      	subs	r3, #5
 80043aa:	fa00 f203 	lsl.w	r2, r0, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	635a      	str	r2, [r3, #52]	; 0x34
 80043b6:	e04c      	b.n	8004452 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b0c      	cmp	r3, #12
 80043be:	d824      	bhi.n	800440a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	3b23      	subs	r3, #35	; 0x23
 80043d2:	221f      	movs	r2, #31
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	43da      	mvns	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	400a      	ands	r2, r1
 80043e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	4618      	mov	r0, r3
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	3b23      	subs	r3, #35	; 0x23
 80043fc:	fa00 f203 	lsl.w	r2, r0, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	631a      	str	r2, [r3, #48]	; 0x30
 8004408:	e023      	b.n	8004452 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	3b41      	subs	r3, #65	; 0x41
 800441c:	221f      	movs	r2, #31
 800441e:	fa02 f303 	lsl.w	r3, r2, r3
 8004422:	43da      	mvns	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	400a      	ands	r2, r1
 800442a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	b29b      	uxth	r3, r3
 8004438:	4618      	mov	r0, r3
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	3b41      	subs	r3, #65	; 0x41
 8004446:	fa00 f203 	lsl.w	r2, r0, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004452:	4b29      	ldr	r3, [pc, #164]	; (80044f8 <HAL_ADC_ConfigChannel+0x250>)
 8004454:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a28      	ldr	r2, [pc, #160]	; (80044fc <HAL_ADC_ConfigChannel+0x254>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d10f      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x1d8>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b12      	cmp	r3, #18
 8004466:	d10b      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1d      	ldr	r2, [pc, #116]	; (80044fc <HAL_ADC_ConfigChannel+0x254>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d12b      	bne.n	80044e2 <HAL_ADC_ConfigChannel+0x23a>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1c      	ldr	r2, [pc, #112]	; (8004500 <HAL_ADC_ConfigChannel+0x258>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d003      	beq.n	800449c <HAL_ADC_ConfigChannel+0x1f4>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b11      	cmp	r3, #17
 800449a:	d122      	bne.n	80044e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a11      	ldr	r2, [pc, #68]	; (8004500 <HAL_ADC_ConfigChannel+0x258>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d111      	bne.n	80044e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044be:	4b11      	ldr	r3, [pc, #68]	; (8004504 <HAL_ADC_ConfigChannel+0x25c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a11      	ldr	r2, [pc, #68]	; (8004508 <HAL_ADC_ConfigChannel+0x260>)
 80044c4:	fba2 2303 	umull	r2, r3, r2, r3
 80044c8:	0c9a      	lsrs	r2, r3, #18
 80044ca:	4613      	mov	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80044d4:	e002      	b.n	80044dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	3b01      	subs	r3, #1
 80044da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f9      	bne.n	80044d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	40012300 	.word	0x40012300
 80044fc:	40012000 	.word	0x40012000
 8004500:	10000012 	.word	0x10000012
 8004504:	2000001c 	.word	0x2000001c
 8004508:	431bde83 	.word	0x431bde83

0800450c <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_ADC_AnalogWDGConfig+0x18>
 8004520:	2302      	movs	r3, #2
 8004522:	e04d      	b.n	80045c0 <HAL_ADC_AnalogWDGConfig+0xb4>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	7c1b      	ldrb	r3, [r3, #16]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d108      	bne.n	8004546 <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004542:	605a      	str	r2, [r3, #4]
 8004544:	e007      	b.n	8004556 <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004554:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6812      	ldr	r2, [r2, #0]
 8004560:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004568:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6859      	ldr	r1, [r3, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	6852      	ldr	r2, [r2, #4]
 8004584:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	6892      	ldr	r2, [r2, #8]
 800458e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 021f 	bic.w	r2, r2, #31
 800459e:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	4619      	mov	r1, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_ADC_GetError>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval ADC Error Code
  */
uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  return hadc->ErrorCode;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004604:	4b79      	ldr	r3, [pc, #484]	; (80047ec <ADC_Init+0x1f0>)
 8004606:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	431a      	orrs	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004630:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6859      	ldr	r1, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	021a      	lsls	r2, r3, #8
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004654:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6859      	ldr	r1, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004676:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6899      	ldr	r1, [r3, #8]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468e:	4a58      	ldr	r2, [pc, #352]	; (80047f0 <ADC_Init+0x1f4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d022      	beq.n	80046da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6899      	ldr	r1, [r3, #8]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6899      	ldr	r1, [r3, #8]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	609a      	str	r2, [r3, #8]
 80046d8:	e00f      	b.n	80046fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0202 	bic.w	r2, r2, #2
 8004708:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6899      	ldr	r1, [r3, #8]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	7e1b      	ldrb	r3, [r3, #24]
 8004714:	005a      	lsls	r2, r3, #1
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d01b      	beq.n	8004760 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004736:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004746:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6859      	ldr	r1, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	3b01      	subs	r3, #1
 8004754:	035a      	lsls	r2, r3, #13
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]
 800475e:	e007      	b.n	8004770 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800477e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	3b01      	subs	r3, #1
 800478c:	051a      	lsls	r2, r3, #20
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80047a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6899      	ldr	r1, [r3, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047b2:	025a      	lsls	r2, r3, #9
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6899      	ldr	r1, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	029a      	lsls	r2, r3, #10
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	609a      	str	r2, [r3, #8]
}
 80047e0:	bf00      	nop
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	40012300 	.word	0x40012300
 80047f0:	0f000001 	.word	0x0f000001

080047f4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800480a:	2b00      	cmp	r3, #0
 800480c:	d13d      	bne.n	800488a <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d12b      	bne.n	8004880 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800482c:	2b00      	cmp	r3, #0
 800482e:	d127      	bne.n	8004880 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800483a:	2b00      	cmp	r3, #0
 800483c:	d006      	beq.n	800484c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004848:	2b00      	cmp	r3, #0
 800484a:	d119      	bne.n	8004880 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0220 	bic.w	r2, r2, #32
 800485a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d105      	bne.n	8004880 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	f043 0201 	orr.w	r2, r3, #1
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004888:	e00f      	b.n	80048aa <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	2b00      	cmp	r3, #0
 8004894:	d004      	beq.n	80048a0 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	4798      	blx	r3
}
 800489e:	e004      	b.n	80048aa <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	4798      	blx	r3
}
 80048aa:	bf00      	nop
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b084      	sub	sp, #16
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048c8:	bf00      	nop
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2240      	movs	r2, #64	; 0x40
 80048e2:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e8:	f043 0204 	orr.w	r2, r3, #4
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048f8:	bf00      	nop
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004924:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <__NVIC_SetPriorityGrouping+0x44>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004930:	4013      	ands	r3, r2
 8004932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800493c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004946:	4a04      	ldr	r2, [pc, #16]	; (8004958 <__NVIC_SetPriorityGrouping+0x44>)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	60d3      	str	r3, [r2, #12]
}
 800494c:	bf00      	nop
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	e000ed00 	.word	0xe000ed00

0800495c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004960:	4b04      	ldr	r3, [pc, #16]	; (8004974 <__NVIC_GetPriorityGrouping+0x18>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	0a1b      	lsrs	r3, r3, #8
 8004966:	f003 0307 	and.w	r3, r3, #7
}
 800496a:	4618      	mov	r0, r3
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	e000ed00 	.word	0xe000ed00

08004978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	4603      	mov	r3, r0
 8004980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004986:	2b00      	cmp	r3, #0
 8004988:	db0b      	blt.n	80049a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	f003 021f 	and.w	r2, r3, #31
 8004990:	4907      	ldr	r1, [pc, #28]	; (80049b0 <__NVIC_EnableIRQ+0x38>)
 8004992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	2001      	movs	r0, #1
 800499a:	fa00 f202 	lsl.w	r2, r0, r2
 800499e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	e000e100 	.word	0xe000e100

080049b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	4603      	mov	r3, r0
 80049bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	db12      	blt.n	80049ec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049c6:	79fb      	ldrb	r3, [r7, #7]
 80049c8:	f003 021f 	and.w	r2, r3, #31
 80049cc:	490a      	ldr	r1, [pc, #40]	; (80049f8 <__NVIC_DisableIRQ+0x44>)
 80049ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	2001      	movs	r0, #1
 80049d6:	fa00 f202 	lsl.w	r2, r0, r2
 80049da:	3320      	adds	r3, #32
 80049dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80049e0:	f3bf 8f4f 	dsb	sy
}
 80049e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80049e6:	f3bf 8f6f 	isb	sy
}
 80049ea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	e000e100 	.word	0xe000e100

080049fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	6039      	str	r1, [r7, #0]
 8004a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	db0a      	blt.n	8004a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	490c      	ldr	r1, [pc, #48]	; (8004a48 <__NVIC_SetPriority+0x4c>)
 8004a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1a:	0112      	lsls	r2, r2, #4
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	440b      	add	r3, r1
 8004a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a24:	e00a      	b.n	8004a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	4908      	ldr	r1, [pc, #32]	; (8004a4c <__NVIC_SetPriority+0x50>)
 8004a2c:	79fb      	ldrb	r3, [r7, #7]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	3b04      	subs	r3, #4
 8004a34:	0112      	lsls	r2, r2, #4
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	440b      	add	r3, r1
 8004a3a:	761a      	strb	r2, [r3, #24]
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	e000e100 	.word	0xe000e100
 8004a4c:	e000ed00 	.word	0xe000ed00

08004a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b089      	sub	sp, #36	; 0x24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f1c3 0307 	rsb	r3, r3, #7
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	bf28      	it	cs
 8004a6e:	2304      	movcs	r3, #4
 8004a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	3304      	adds	r3, #4
 8004a76:	2b06      	cmp	r3, #6
 8004a78:	d902      	bls.n	8004a80 <NVIC_EncodePriority+0x30>
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	3b03      	subs	r3, #3
 8004a7e:	e000      	b.n	8004a82 <NVIC_EncodePriority+0x32>
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a84:	f04f 32ff 	mov.w	r2, #4294967295
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	43da      	mvns	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	401a      	ands	r2, r3
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a98:	f04f 31ff 	mov.w	r1, #4294967295
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa2:	43d9      	mvns	r1, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa8:	4313      	orrs	r3, r2
         );
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3724      	adds	r7, #36	; 0x24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
	...

08004ab8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004abc:	f3bf 8f4f 	dsb	sy
}
 8004ac0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004ac2:	4b06      	ldr	r3, [pc, #24]	; (8004adc <__NVIC_SystemReset+0x24>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004aca:	4904      	ldr	r1, [pc, #16]	; (8004adc <__NVIC_SystemReset+0x24>)
 8004acc:	4b04      	ldr	r3, [pc, #16]	; (8004ae0 <__NVIC_SystemReset+0x28>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ad2:	f3bf 8f4f 	dsb	sy
}
 8004ad6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004ad8:	bf00      	nop
 8004ada:	e7fd      	b.n	8004ad8 <__NVIC_SystemReset+0x20>
 8004adc:	e000ed00 	.word	0xe000ed00
 8004ae0:	05fa0004 	.word	0x05fa0004

08004ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7ff ff11 	bl	8004914 <__NVIC_SetPriorityGrouping>
}
 8004af2:	bf00      	nop
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b086      	sub	sp, #24
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	4603      	mov	r3, r0
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	607a      	str	r2, [r7, #4]
 8004b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b0c:	f7ff ff26 	bl	800495c <__NVIC_GetPriorityGrouping>
 8004b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	68b9      	ldr	r1, [r7, #8]
 8004b16:	6978      	ldr	r0, [r7, #20]
 8004b18:	f7ff ff9a 	bl	8004a50 <NVIC_EncodePriority>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b22:	4611      	mov	r1, r2
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff ff69 	bl	80049fc <__NVIC_SetPriority>
}
 8004b2a:	bf00      	nop
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	4603      	mov	r3, r0
 8004b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff ff19 	bl	8004978 <__NVIC_EnableIRQ>
}
 8004b46:	bf00      	nop
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b082      	sub	sp, #8
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	4603      	mov	r3, r0
 8004b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff ff29 	bl	80049b4 <__NVIC_DisableIRQ>
}
 8004b62:	bf00      	nop
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004b6e:	f7ff ffa3 	bl	8004ab8 <__NVIC_SystemReset>

08004b72 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b082      	sub	sp, #8
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e00e      	b.n	8004ba2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	795b      	ldrb	r3, [r3, #5]
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d105      	bne.n	8004b9a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7fd feef 	bl	8002978 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b082      	sub	sp, #8
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e022      	b.n	8004c02 <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	795b      	ldrb	r3, [r3, #5]
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d101      	bne.n	8004bca <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e01b      	b.n	8004c02 <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	715a      	strb	r2, [r3, #5]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	791b      	ldrb	r3, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2200      	movs	r2, #0
 8004bec:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fd fee4 	bl	80029bc <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	715a      	strb	r2, [r3, #5]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b087      	sub	sp, #28
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	60f8      	str	r0, [r7, #12]
 8004c12:	60b9      	str	r1, [r7, #8]
 8004c14:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	e00a      	b.n	8004c4c <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	441a      	add	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6812      	ldr	r2, [r2, #0]
 8004c44:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d3f0      	bcc.n	8004c36 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8004c62:	693b      	ldr	r3, [r7, #16]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_CRC_GetState>:
  * @brief  Return the CRC handle state.
  * @param  hcrc CRC handle
  * @retval HAL state
  */
HAL_CRC_StateTypeDef HAL_CRC_GetState(CRC_HandleTypeDef *hcrc)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Return CRC handle state */
  return hcrc->State;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	795b      	ldrb	r3, [r3, #5]
 8004c7c:	b2db      	uxtb	r3, r3
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c98:	f7ff f840 	bl	8003d1c <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e099      	b.n	8004ddc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0201 	bic.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cc8:	e00f      	b.n	8004cea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cca:	f7ff f827 	bl	8003d1c <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b05      	cmp	r3, #5
 8004cd6:	d908      	bls.n	8004cea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2203      	movs	r2, #3
 8004ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e078      	b.n	8004ddc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e8      	bne.n	8004cca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	4b38      	ldr	r3, [pc, #224]	; (8004de4 <HAL_DMA_Init+0x158>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d107      	bne.n	8004d54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f023 0307 	bic.w	r3, r3, #7
 8004d6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d117      	bne.n	8004dae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00e      	beq.n	8004dae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fb5f 	bl	8005454 <DMA_CheckFifoParam>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d008      	beq.n	8004dae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2240      	movs	r2, #64	; 0x40
 8004da0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004daa:	2301      	movs	r3, #1
 8004dac:	e016      	b.n	8004ddc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fb16 	bl	80053e8 <DMA_CalcBaseAndBitshift>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc4:	223f      	movs	r2, #63	; 0x3f
 8004dc6:	409a      	lsls	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	f010803f 	.word	0xf010803f

08004de8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e050      	b.n	8004e9c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d101      	bne.n	8004e0a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004e06:	2302      	movs	r3, #2
 8004e08:	e048      	b.n	8004e9c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0201 	bic.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2200      	movs	r2, #0
 8004e28:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2200      	movs	r2, #0
 8004e38:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2221      	movs	r2, #33	; 0x21
 8004e48:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 facc 	bl	80053e8 <DMA_CalcBaseAndBitshift>
 8004e50:	4603      	mov	r3, r0
 8004e52:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7c:	223f      	movs	r2, #63	; 0x3f
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d101      	bne.n	8004eca <HAL_DMA_Start_IT+0x26>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	e040      	b.n	8004f4c <HAL_DMA_Start_IT+0xa8>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d12f      	bne.n	8004f3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	68b9      	ldr	r1, [r7, #8]
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 fa4a 	bl	800538c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004efc:	223f      	movs	r2, #63	; 0x3f
 8004efe:	409a      	lsls	r2, r3
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0216 	orr.w	r2, r2, #22
 8004f12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0208 	orr.w	r2, r2, #8
 8004f2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	e005      	b.n	8004f4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f46:	2302      	movs	r3, #2
 8004f48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f62:	f7fe fedb 	bl	8003d1c <HAL_GetTick>
 8004f66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d008      	beq.n	8004f86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2280      	movs	r2, #128	; 0x80
 8004f78:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e052      	b.n	800502c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0216 	bic.w	r2, r2, #22
 8004f94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695a      	ldr	r2, [r3, #20]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fa4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d103      	bne.n	8004fb6 <HAL_DMA_Abort+0x62>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d007      	beq.n	8004fc6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0208 	bic.w	r2, r2, #8
 8004fc4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0201 	bic.w	r2, r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fd6:	e013      	b.n	8005000 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fd8:	f7fe fea0 	bl	8003d1c <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b05      	cmp	r3, #5
 8004fe4:	d90c      	bls.n	8005000 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2203      	movs	r2, #3
 8004ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e015      	b.n	800502c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1e4      	bne.n	8004fd8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005012:	223f      	movs	r2, #63	; 0x3f
 8005014:	409a      	lsls	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005042:	b2db      	uxtb	r3, r3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d004      	beq.n	8005052 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2280      	movs	r2, #128	; 0x80
 800504c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e00c      	b.n	800506c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2205      	movs	r2, #5
 8005056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0201 	bic.w	r2, r2, #1
 8005068:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005084:	4b8e      	ldr	r3, [pc, #568]	; (80052c0 <HAL_DMA_IRQHandler+0x248>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a8e      	ldr	r2, [pc, #568]	; (80052c4 <HAL_DMA_IRQHandler+0x24c>)
 800508a:	fba2 2303 	umull	r2, r3, r2, r3
 800508e:	0a9b      	lsrs	r3, r3, #10
 8005090:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005096:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a2:	2208      	movs	r2, #8
 80050a4:	409a      	lsls	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4013      	ands	r3, r2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d01a      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d013      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0204 	bic.w	r2, r2, #4
 80050ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d0:	2208      	movs	r2, #8
 80050d2:	409a      	lsls	r2, r3
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050dc:	f043 0201 	orr.w	r2, r3, #1
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e8:	2201      	movs	r2, #1
 80050ea:	409a      	lsls	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4013      	ands	r3, r2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d012      	beq.n	800511a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00b      	beq.n	800511a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005106:	2201      	movs	r2, #1
 8005108:	409a      	lsls	r2, r3
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005112:	f043 0202 	orr.w	r2, r3, #2
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511e:	2204      	movs	r2, #4
 8005120:	409a      	lsls	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4013      	ands	r3, r2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d012      	beq.n	8005150 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00b      	beq.n	8005150 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800513c:	2204      	movs	r2, #4
 800513e:	409a      	lsls	r2, r3
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005148:	f043 0204 	orr.w	r2, r3, #4
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005154:	2210      	movs	r2, #16
 8005156:	409a      	lsls	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4013      	ands	r3, r2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d043      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d03c      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005172:	2210      	movs	r2, #16
 8005174:	409a      	lsls	r2, r3
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d018      	beq.n	80051ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d108      	bne.n	80051a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d024      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	4798      	blx	r3
 80051a6:	e01f      	b.n	80051e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01b      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	4798      	blx	r3
 80051b8:	e016      	b.n	80051e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d107      	bne.n	80051d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0208 	bic.w	r2, r2, #8
 80051d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ec:	2220      	movs	r2, #32
 80051ee:	409a      	lsls	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4013      	ands	r3, r2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 808f 	beq.w	8005318 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 8087 	beq.w	8005318 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800520e:	2220      	movs	r2, #32
 8005210:	409a      	lsls	r2, r3
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b05      	cmp	r3, #5
 8005220:	d136      	bne.n	8005290 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0216 	bic.w	r2, r2, #22
 8005230:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695a      	ldr	r2, [r3, #20]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005240:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d103      	bne.n	8005252 <HAL_DMA_IRQHandler+0x1da>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800524e:	2b00      	cmp	r3, #0
 8005250:	d007      	beq.n	8005262 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0208 	bic.w	r2, r2, #8
 8005260:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005266:	223f      	movs	r2, #63	; 0x3f
 8005268:	409a      	lsls	r2, r3
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005282:	2b00      	cmp	r3, #0
 8005284:	d07e      	beq.n	8005384 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	4798      	blx	r3
        }
        return;
 800528e:	e079      	b.n	8005384 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01d      	beq.n	80052da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10d      	bne.n	80052c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d031      	beq.n	8005318 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	4798      	blx	r3
 80052bc:	e02c      	b.n	8005318 <HAL_DMA_IRQHandler+0x2a0>
 80052be:	bf00      	nop
 80052c0:	2000001c 	.word	0x2000001c
 80052c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d023      	beq.n	8005318 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	4798      	blx	r3
 80052d8:	e01e      	b.n	8005318 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10f      	bne.n	8005308 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0210 	bic.w	r2, r2, #16
 80052f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531c:	2b00      	cmp	r3, #0
 800531e:	d032      	beq.n	8005386 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d022      	beq.n	8005372 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2205      	movs	r2, #5
 8005330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 0201 	bic.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	3301      	adds	r3, #1
 8005348:	60bb      	str	r3, [r7, #8]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	429a      	cmp	r2, r3
 800534e:	d307      	bcc.n	8005360 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f2      	bne.n	8005344 <HAL_DMA_IRQHandler+0x2cc>
 800535e:	e000      	b.n	8005362 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005360:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005376:	2b00      	cmp	r3, #0
 8005378:	d005      	beq.n	8005386 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	4798      	blx	r3
 8005382:	e000      	b.n	8005386 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005384:	bf00      	nop
    }
  }
}
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b40      	cmp	r3, #64	; 0x40
 80053b8:	d108      	bne.n	80053cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80053ca:	e007      	b.n	80053dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	60da      	str	r2, [r3, #12]
}
 80053dc:	bf00      	nop
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	3b10      	subs	r3, #16
 80053f8:	4a14      	ldr	r2, [pc, #80]	; (800544c <DMA_CalcBaseAndBitshift+0x64>)
 80053fa:	fba2 2303 	umull	r2, r3, r2, r3
 80053fe:	091b      	lsrs	r3, r3, #4
 8005400:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005402:	4a13      	ldr	r2, [pc, #76]	; (8005450 <DMA_CalcBaseAndBitshift+0x68>)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4413      	add	r3, r2
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2b03      	cmp	r3, #3
 8005414:	d909      	bls.n	800542a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800541e:	f023 0303 	bic.w	r3, r3, #3
 8005422:	1d1a      	adds	r2, r3, #4
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	659a      	str	r2, [r3, #88]	; 0x58
 8005428:	e007      	b.n	800543a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005432:	f023 0303 	bic.w	r3, r3, #3
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	aaaaaaab 	.word	0xaaaaaaab
 8005450:	0800f9ec 	.word	0x0800f9ec

08005454 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005464:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d11f      	bne.n	80054ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b03      	cmp	r3, #3
 8005472:	d856      	bhi.n	8005522 <DMA_CheckFifoParam+0xce>
 8005474:	a201      	add	r2, pc, #4	; (adr r2, 800547c <DMA_CheckFifoParam+0x28>)
 8005476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547a:	bf00      	nop
 800547c:	0800548d 	.word	0x0800548d
 8005480:	0800549f 	.word	0x0800549f
 8005484:	0800548d 	.word	0x0800548d
 8005488:	08005523 	.word	0x08005523
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d046      	beq.n	8005526 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800549c:	e043      	b.n	8005526 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054a6:	d140      	bne.n	800552a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ac:	e03d      	b.n	800552a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054b6:	d121      	bne.n	80054fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	d837      	bhi.n	800552e <DMA_CheckFifoParam+0xda>
 80054be:	a201      	add	r2, pc, #4	; (adr r2, 80054c4 <DMA_CheckFifoParam+0x70>)
 80054c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c4:	080054d5 	.word	0x080054d5
 80054c8:	080054db 	.word	0x080054db
 80054cc:	080054d5 	.word	0x080054d5
 80054d0:	080054ed 	.word	0x080054ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	73fb      	strb	r3, [r7, #15]
      break;
 80054d8:	e030      	b.n	800553c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d025      	beq.n	8005532 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ea:	e022      	b.n	8005532 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054f4:	d11f      	bne.n	8005536 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80054fa:	e01c      	b.n	8005536 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d903      	bls.n	800550a <DMA_CheckFifoParam+0xb6>
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b03      	cmp	r3, #3
 8005506:	d003      	beq.n	8005510 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005508:	e018      	b.n	800553c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	73fb      	strb	r3, [r7, #15]
      break;
 800550e:	e015      	b.n	800553c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00e      	beq.n	800553a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	73fb      	strb	r3, [r7, #15]
      break;
 8005520:	e00b      	b.n	800553a <DMA_CheckFifoParam+0xe6>
      break;
 8005522:	bf00      	nop
 8005524:	e00a      	b.n	800553c <DMA_CheckFifoParam+0xe8>
      break;
 8005526:	bf00      	nop
 8005528:	e008      	b.n	800553c <DMA_CheckFifoParam+0xe8>
      break;
 800552a:	bf00      	nop
 800552c:	e006      	b.n	800553c <DMA_CheckFifoParam+0xe8>
      break;
 800552e:	bf00      	nop
 8005530:	e004      	b.n	800553c <DMA_CheckFifoParam+0xe8>
      break;
 8005532:	bf00      	nop
 8005534:	e002      	b.n	800553c <DMA_CheckFifoParam+0xe8>
      break;   
 8005536:	bf00      	nop
 8005538:	e000      	b.n	800553c <DMA_CheckFifoParam+0xe8>
      break;
 800553a:	bf00      	nop
    }
  } 
  
  return status; 
 800553c:	7bfb      	ldrb	r3, [r7, #15]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop

0800554c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005556:	4b4b      	ldr	r3, [pc, #300]	; (8005684 <HAL_FLASH_IRQHandler+0x138>)
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d020      	beq.n	80055a4 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8005562:	4b49      	ldr	r3, [pc, #292]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b01      	cmp	r3, #1
 800556a:	d107      	bne.n	800557c <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 800556c:	4b46      	ldr	r3, [pc, #280]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8005572:	4b45      	ldr	r3, [pc, #276]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 8005574:	f04f 32ff 	mov.w	r2, #4294967295
 8005578:	60da      	str	r2, [r3, #12]
 800557a:	e00b      	b.n	8005594 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800557c:	4b42      	ldr	r3, [pc, #264]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d103      	bne.n	800558e <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8005586:	4b40      	ldr	r3, [pc, #256]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	607b      	str	r3, [r7, #4]
 800558c:	e002      	b.n	8005594 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800558e:	4b3e      	ldr	r3, [pc, #248]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8005594:	f000 f88e 	bl	80056b4 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f881 	bl	80056a0 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800559e:	4b3a      	ldr	r3, [pc, #232]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80055a4:	4b37      	ldr	r3, [pc, #220]	; (8005684 <HAL_FLASH_IRQHandler+0x138>)
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d04a      	beq.n	8005646 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80055b0:	4b34      	ldr	r3, [pc, #208]	; (8005684 <HAL_FLASH_IRQHandler+0x138>)
 80055b2:	2201      	movs	r2, #1
 80055b4:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80055b6:	4b34      	ldr	r3, [pc, #208]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d12d      	bne.n	800561c <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 80055c0:	4b31      	ldr	r3, [pc, #196]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	4a30      	ldr	r2, [pc, #192]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 80055c8:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 80055ca:	4b2f      	ldr	r3, [pc, #188]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d015      	beq.n	80055fe <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 80055d2:	4b2d      	ldr	r3, [pc, #180]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f857 	bl	800568c <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 80055de:	4b2a      	ldr	r3, [pc, #168]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	3301      	adds	r3, #1
 80055e4:	4a28      	ldr	r2, [pc, #160]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 80055e6:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 80055e8:	4b27      	ldr	r3, [pc, #156]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 80055ee:	4b26      	ldr	r3, [pc, #152]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 80055f0:	7a1b      	ldrb	r3, [r3, #8]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	4619      	mov	r1, r3
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f8c2 	bl	8005780 <FLASH_Erase_Sector>
 80055fc:	e023      	b.n	8005646 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 80055fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005602:	607b      	str	r3, [r7, #4]
 8005604:	4a20      	ldr	r2, [pc, #128]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800560a:	4b1f      	ldr	r3, [pc, #124]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 800560c:	2200      	movs	r2, #0
 800560e:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8005610:	f000 f8fe 	bl	8005810 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f839 	bl	800568c <HAL_FLASH_EndOfOperationCallback>
 800561a:	e014      	b.n	8005646 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800561c:	4b1a      	ldr	r3, [pc, #104]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d107      	bne.n	8005636 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8005626:	f000 f8f3 	bl	8005810 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800562a:	4b17      	ldr	r3, [pc, #92]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	4618      	mov	r0, r3
 8005630:	f000 f82c 	bl	800568c <HAL_FLASH_EndOfOperationCallback>
 8005634:	e004      	b.n	8005640 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8005636:	4b14      	ldr	r3, [pc, #80]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	4618      	mov	r0, r3
 800563c:	f000 f826 	bl	800568c <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005640:	4b11      	ldr	r3, [pc, #68]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 8005642:	2200      	movs	r2, #0
 8005644:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8005646:	4b10      	ldr	r3, [pc, #64]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d114      	bne.n	800567a <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8005650:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <HAL_FLASH_IRQHandler+0x138>)
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	4a0b      	ldr	r2, [pc, #44]	; (8005684 <HAL_FLASH_IRQHandler+0x138>)
 8005656:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800565a:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800565c:	4b09      	ldr	r3, [pc, #36]	; (8005684 <HAL_FLASH_IRQHandler+0x138>)
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	4a08      	ldr	r2, [pc, #32]	; (8005684 <HAL_FLASH_IRQHandler+0x138>)
 8005662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005666:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8005668:	4b06      	ldr	r3, [pc, #24]	; (8005684 <HAL_FLASH_IRQHandler+0x138>)
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	4a05      	ldr	r2, [pc, #20]	; (8005684 <HAL_FLASH_IRQHandler+0x138>)
 800566e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005672:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005674:	4b04      	ldr	r3, [pc, #16]	; (8005688 <HAL_FLASH_IRQHandler+0x13c>)
 8005676:	2200      	movs	r2, #0
 8005678:	761a      	strb	r2, [r3, #24]
  }
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	40023c00 	.word	0x40023c00
 8005688:	20000680 	.word	0x20000680

0800568c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80056b8:	4b2f      	ldr	r3, [pc, #188]	; (8005778 <FLASH_SetErrorCode+0xc4>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d008      	beq.n	80056d6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80056c4:	4b2d      	ldr	r3, [pc, #180]	; (800577c <FLASH_SetErrorCode+0xc8>)
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	f043 0310 	orr.w	r3, r3, #16
 80056cc:	4a2b      	ldr	r2, [pc, #172]	; (800577c <FLASH_SetErrorCode+0xc8>)
 80056ce:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80056d0:	4b29      	ldr	r3, [pc, #164]	; (8005778 <FLASH_SetErrorCode+0xc4>)
 80056d2:	2210      	movs	r2, #16
 80056d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80056d6:	4b28      	ldr	r3, [pc, #160]	; (8005778 <FLASH_SetErrorCode+0xc4>)
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d008      	beq.n	80056f4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80056e2:	4b26      	ldr	r3, [pc, #152]	; (800577c <FLASH_SetErrorCode+0xc8>)
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	f043 0308 	orr.w	r3, r3, #8
 80056ea:	4a24      	ldr	r2, [pc, #144]	; (800577c <FLASH_SetErrorCode+0xc8>)
 80056ec:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80056ee:	4b22      	ldr	r3, [pc, #136]	; (8005778 <FLASH_SetErrorCode+0xc4>)
 80056f0:	2220      	movs	r2, #32
 80056f2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80056f4:	4b20      	ldr	r3, [pc, #128]	; (8005778 <FLASH_SetErrorCode+0xc4>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d008      	beq.n	8005712 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005700:	4b1e      	ldr	r3, [pc, #120]	; (800577c <FLASH_SetErrorCode+0xc8>)
 8005702:	69db      	ldr	r3, [r3, #28]
 8005704:	f043 0304 	orr.w	r3, r3, #4
 8005708:	4a1c      	ldr	r2, [pc, #112]	; (800577c <FLASH_SetErrorCode+0xc8>)
 800570a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800570c:	4b1a      	ldr	r3, [pc, #104]	; (8005778 <FLASH_SetErrorCode+0xc4>)
 800570e:	2240      	movs	r2, #64	; 0x40
 8005710:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005712:	4b19      	ldr	r3, [pc, #100]	; (8005778 <FLASH_SetErrorCode+0xc4>)
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571a:	2b00      	cmp	r3, #0
 800571c:	d008      	beq.n	8005730 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800571e:	4b17      	ldr	r3, [pc, #92]	; (800577c <FLASH_SetErrorCode+0xc8>)
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	f043 0302 	orr.w	r3, r3, #2
 8005726:	4a15      	ldr	r2, [pc, #84]	; (800577c <FLASH_SetErrorCode+0xc8>)
 8005728:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800572a:	4b13      	ldr	r3, [pc, #76]	; (8005778 <FLASH_SetErrorCode+0xc4>)
 800572c:	2280      	movs	r2, #128	; 0x80
 800572e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005730:	4b11      	ldr	r3, [pc, #68]	; (8005778 <FLASH_SetErrorCode+0xc4>)
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005738:	2b00      	cmp	r3, #0
 800573a:	d009      	beq.n	8005750 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800573c:	4b0f      	ldr	r3, [pc, #60]	; (800577c <FLASH_SetErrorCode+0xc8>)
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	4a0d      	ldr	r2, [pc, #52]	; (800577c <FLASH_SetErrorCode+0xc8>)
 8005746:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005748:	4b0b      	ldr	r3, [pc, #44]	; (8005778 <FLASH_SetErrorCode+0xc4>)
 800574a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800574e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005750:	4b09      	ldr	r3, [pc, #36]	; (8005778 <FLASH_SetErrorCode+0xc4>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d008      	beq.n	800576e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800575c:	4b07      	ldr	r3, [pc, #28]	; (800577c <FLASH_SetErrorCode+0xc8>)
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	f043 0320 	orr.w	r3, r3, #32
 8005764:	4a05      	ldr	r2, [pc, #20]	; (800577c <FLASH_SetErrorCode+0xc8>)
 8005766:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005768:	4b03      	ldr	r3, [pc, #12]	; (8005778 <FLASH_SetErrorCode+0xc4>)
 800576a:	2202      	movs	r2, #2
 800576c:	60da      	str	r2, [r3, #12]
  }
}
 800576e:	bf00      	nop
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	40023c00 	.word	0x40023c00
 800577c:	20000680 	.word	0x20000680

08005780 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	460b      	mov	r3, r1
 800578a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005790:	78fb      	ldrb	r3, [r7, #3]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d102      	bne.n	800579c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005796:	2300      	movs	r3, #0
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	e010      	b.n	80057be <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d103      	bne.n	80057aa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80057a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	e009      	b.n	80057be <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d103      	bne.n	80057b8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80057b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	e002      	b.n	80057be <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80057b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80057bc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80057be:	4b13      	ldr	r3, [pc, #76]	; (800580c <FLASH_Erase_Sector+0x8c>)
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	4a12      	ldr	r2, [pc, #72]	; (800580c <FLASH_Erase_Sector+0x8c>)
 80057c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80057ca:	4b10      	ldr	r3, [pc, #64]	; (800580c <FLASH_Erase_Sector+0x8c>)
 80057cc:	691a      	ldr	r2, [r3, #16]
 80057ce:	490f      	ldr	r1, [pc, #60]	; (800580c <FLASH_Erase_Sector+0x8c>)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80057d6:	4b0d      	ldr	r3, [pc, #52]	; (800580c <FLASH_Erase_Sector+0x8c>)
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	4a0c      	ldr	r2, [pc, #48]	; (800580c <FLASH_Erase_Sector+0x8c>)
 80057dc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80057e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80057e2:	4b0a      	ldr	r3, [pc, #40]	; (800580c <FLASH_Erase_Sector+0x8c>)
 80057e4:	691a      	ldr	r2, [r3, #16]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	4313      	orrs	r3, r2
 80057ec:	4a07      	ldr	r2, [pc, #28]	; (800580c <FLASH_Erase_Sector+0x8c>)
 80057ee:	f043 0302 	orr.w	r3, r3, #2
 80057f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80057f4:	4b05      	ldr	r3, [pc, #20]	; (800580c <FLASH_Erase_Sector+0x8c>)
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	4a04      	ldr	r2, [pc, #16]	; (800580c <FLASH_Erase_Sector+0x8c>)
 80057fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057fe:	6113      	str	r3, [r2, #16]
}
 8005800:	bf00      	nop
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	40023c00 	.word	0x40023c00

08005810 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005814:	4b20      	ldr	r3, [pc, #128]	; (8005898 <FLASH_FlushCaches+0x88>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800581c:	2b00      	cmp	r3, #0
 800581e:	d017      	beq.n	8005850 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005820:	4b1d      	ldr	r3, [pc, #116]	; (8005898 <FLASH_FlushCaches+0x88>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1c      	ldr	r2, [pc, #112]	; (8005898 <FLASH_FlushCaches+0x88>)
 8005826:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800582a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800582c:	4b1a      	ldr	r3, [pc, #104]	; (8005898 <FLASH_FlushCaches+0x88>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a19      	ldr	r2, [pc, #100]	; (8005898 <FLASH_FlushCaches+0x88>)
 8005832:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	4b17      	ldr	r3, [pc, #92]	; (8005898 <FLASH_FlushCaches+0x88>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a16      	ldr	r2, [pc, #88]	; (8005898 <FLASH_FlushCaches+0x88>)
 800583e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005842:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005844:	4b14      	ldr	r3, [pc, #80]	; (8005898 <FLASH_FlushCaches+0x88>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a13      	ldr	r2, [pc, #76]	; (8005898 <FLASH_FlushCaches+0x88>)
 800584a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800584e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005850:	4b11      	ldr	r3, [pc, #68]	; (8005898 <FLASH_FlushCaches+0x88>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005858:	2b00      	cmp	r3, #0
 800585a:	d017      	beq.n	800588c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800585c:	4b0e      	ldr	r3, [pc, #56]	; (8005898 <FLASH_FlushCaches+0x88>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a0d      	ldr	r2, [pc, #52]	; (8005898 <FLASH_FlushCaches+0x88>)
 8005862:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005866:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005868:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <FLASH_FlushCaches+0x88>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a0a      	ldr	r2, [pc, #40]	; (8005898 <FLASH_FlushCaches+0x88>)
 800586e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	4b08      	ldr	r3, [pc, #32]	; (8005898 <FLASH_FlushCaches+0x88>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a07      	ldr	r2, [pc, #28]	; (8005898 <FLASH_FlushCaches+0x88>)
 800587a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800587e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005880:	4b05      	ldr	r3, [pc, #20]	; (8005898 <FLASH_FlushCaches+0x88>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a04      	ldr	r2, [pc, #16]	; (8005898 <FLASH_FlushCaches+0x88>)
 8005886:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800588a:	6013      	str	r3, [r2, #0]
  }
}
 800588c:	bf00      	nop
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40023c00 	.word	0x40023c00

0800589c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800589c:	b480      	push	{r7}
 800589e:	b089      	sub	sp, #36	; 0x24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80058aa:	2300      	movs	r3, #0
 80058ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058b2:	2300      	movs	r3, #0
 80058b4:	61fb      	str	r3, [r7, #28]
 80058b6:	e159      	b.n	8005b6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80058b8:	2201      	movs	r2, #1
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	fa02 f303 	lsl.w	r3, r2, r3
 80058c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	4013      	ands	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	f040 8148 	bne.w	8005b66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d005      	beq.n	80058ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d130      	bne.n	8005950 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	2203      	movs	r2, #3
 80058fa:	fa02 f303 	lsl.w	r3, r2, r3
 80058fe:	43db      	mvns	r3, r3
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	4013      	ands	r3, r2
 8005904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	4313      	orrs	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005924:	2201      	movs	r2, #1
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	43db      	mvns	r3, r3
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	4013      	ands	r3, r2
 8005932:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	091b      	lsrs	r3, r3, #4
 800593a:	f003 0201 	and.w	r2, r3, #1
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	fa02 f303 	lsl.w	r3, r2, r3
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	4313      	orrs	r3, r2
 8005948:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f003 0303 	and.w	r3, r3, #3
 8005958:	2b03      	cmp	r3, #3
 800595a:	d017      	beq.n	800598c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	2203      	movs	r2, #3
 8005968:	fa02 f303 	lsl.w	r3, r2, r3
 800596c:	43db      	mvns	r3, r3
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	4013      	ands	r3, r2
 8005972:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	fa02 f303 	lsl.w	r3, r2, r3
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	4313      	orrs	r3, r2
 8005984:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f003 0303 	and.w	r3, r3, #3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d123      	bne.n	80059e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	08da      	lsrs	r2, r3, #3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	3208      	adds	r2, #8
 80059a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	220f      	movs	r2, #15
 80059b0:	fa02 f303 	lsl.w	r3, r2, r3
 80059b4:	43db      	mvns	r3, r3
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4013      	ands	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	691a      	ldr	r2, [r3, #16]
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	fa02 f303 	lsl.w	r3, r2, r3
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	08da      	lsrs	r2, r3, #3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	3208      	adds	r2, #8
 80059da:	69b9      	ldr	r1, [r7, #24]
 80059dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	2203      	movs	r2, #3
 80059ec:	fa02 f303 	lsl.w	r3, r2, r3
 80059f0:	43db      	mvns	r3, r3
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	4013      	ands	r3, r2
 80059f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f003 0203 	and.w	r2, r3, #3
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	fa02 f303 	lsl.w	r3, r2, r3
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 80a2 	beq.w	8005b66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	4b57      	ldr	r3, [pc, #348]	; (8005b84 <HAL_GPIO_Init+0x2e8>)
 8005a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2a:	4a56      	ldr	r2, [pc, #344]	; (8005b84 <HAL_GPIO_Init+0x2e8>)
 8005a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a30:	6453      	str	r3, [r2, #68]	; 0x44
 8005a32:	4b54      	ldr	r3, [pc, #336]	; (8005b84 <HAL_GPIO_Init+0x2e8>)
 8005a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a3e:	4a52      	ldr	r2, [pc, #328]	; (8005b88 <HAL_GPIO_Init+0x2ec>)
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	089b      	lsrs	r3, r3, #2
 8005a44:	3302      	adds	r3, #2
 8005a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	220f      	movs	r2, #15
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	43db      	mvns	r3, r3
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a49      	ldr	r2, [pc, #292]	; (8005b8c <HAL_GPIO_Init+0x2f0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d019      	beq.n	8005a9e <HAL_GPIO_Init+0x202>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a48      	ldr	r2, [pc, #288]	; (8005b90 <HAL_GPIO_Init+0x2f4>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d013      	beq.n	8005a9a <HAL_GPIO_Init+0x1fe>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a47      	ldr	r2, [pc, #284]	; (8005b94 <HAL_GPIO_Init+0x2f8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00d      	beq.n	8005a96 <HAL_GPIO_Init+0x1fa>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a46      	ldr	r2, [pc, #280]	; (8005b98 <HAL_GPIO_Init+0x2fc>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d007      	beq.n	8005a92 <HAL_GPIO_Init+0x1f6>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a45      	ldr	r2, [pc, #276]	; (8005b9c <HAL_GPIO_Init+0x300>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d101      	bne.n	8005a8e <HAL_GPIO_Init+0x1f2>
 8005a8a:	2304      	movs	r3, #4
 8005a8c:	e008      	b.n	8005aa0 <HAL_GPIO_Init+0x204>
 8005a8e:	2307      	movs	r3, #7
 8005a90:	e006      	b.n	8005aa0 <HAL_GPIO_Init+0x204>
 8005a92:	2303      	movs	r3, #3
 8005a94:	e004      	b.n	8005aa0 <HAL_GPIO_Init+0x204>
 8005a96:	2302      	movs	r3, #2
 8005a98:	e002      	b.n	8005aa0 <HAL_GPIO_Init+0x204>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e000      	b.n	8005aa0 <HAL_GPIO_Init+0x204>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	69fa      	ldr	r2, [r7, #28]
 8005aa2:	f002 0203 	and.w	r2, r2, #3
 8005aa6:	0092      	lsls	r2, r2, #2
 8005aa8:	4093      	lsls	r3, r2
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ab0:	4935      	ldr	r1, [pc, #212]	; (8005b88 <HAL_GPIO_Init+0x2ec>)
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	089b      	lsrs	r3, r3, #2
 8005ab6:	3302      	adds	r3, #2
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005abe:	4b38      	ldr	r3, [pc, #224]	; (8005ba0 <HAL_GPIO_Init+0x304>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4013      	ands	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ae2:	4a2f      	ldr	r2, [pc, #188]	; (8005ba0 <HAL_GPIO_Init+0x304>)
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ae8:	4b2d      	ldr	r3, [pc, #180]	; (8005ba0 <HAL_GPIO_Init+0x304>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	43db      	mvns	r3, r3
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	4013      	ands	r3, r2
 8005af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b0c:	4a24      	ldr	r2, [pc, #144]	; (8005ba0 <HAL_GPIO_Init+0x304>)
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b12:	4b23      	ldr	r3, [pc, #140]	; (8005ba0 <HAL_GPIO_Init+0x304>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b36:	4a1a      	ldr	r2, [pc, #104]	; (8005ba0 <HAL_GPIO_Init+0x304>)
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b3c:	4b18      	ldr	r3, [pc, #96]	; (8005ba0 <HAL_GPIO_Init+0x304>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	43db      	mvns	r3, r3
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b60:	4a0f      	ldr	r2, [pc, #60]	; (8005ba0 <HAL_GPIO_Init+0x304>)
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	61fb      	str	r3, [r7, #28]
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	2b0f      	cmp	r3, #15
 8005b70:	f67f aea2 	bls.w	80058b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop
 8005b78:	3724      	adds	r7, #36	; 0x24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40023800 	.word	0x40023800
 8005b88:	40013800 	.word	0x40013800
 8005b8c:	40020000 	.word	0x40020000
 8005b90:	40020400 	.word	0x40020400
 8005b94:	40020800 	.word	0x40020800
 8005b98:	40020c00 	.word	0x40020c00
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	40013c00 	.word	0x40013c00

08005ba4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bba:	2300      	movs	r3, #0
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	e0bb      	b.n	8005d38 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	f040 80ab 	bne.w	8005d32 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005bdc:	4a5c      	ldr	r2, [pc, #368]	; (8005d50 <HAL_GPIO_DeInit+0x1ac>)
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	089b      	lsrs	r3, r3, #2
 8005be2:	3302      	adds	r3, #2
 8005be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005be8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f003 0303 	and.w	r3, r3, #3
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	220f      	movs	r2, #15
 8005bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a54      	ldr	r2, [pc, #336]	; (8005d54 <HAL_GPIO_DeInit+0x1b0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d019      	beq.n	8005c3a <HAL_GPIO_DeInit+0x96>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a53      	ldr	r2, [pc, #332]	; (8005d58 <HAL_GPIO_DeInit+0x1b4>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d013      	beq.n	8005c36 <HAL_GPIO_DeInit+0x92>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a52      	ldr	r2, [pc, #328]	; (8005d5c <HAL_GPIO_DeInit+0x1b8>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00d      	beq.n	8005c32 <HAL_GPIO_DeInit+0x8e>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a51      	ldr	r2, [pc, #324]	; (8005d60 <HAL_GPIO_DeInit+0x1bc>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d007      	beq.n	8005c2e <HAL_GPIO_DeInit+0x8a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a50      	ldr	r2, [pc, #320]	; (8005d64 <HAL_GPIO_DeInit+0x1c0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d101      	bne.n	8005c2a <HAL_GPIO_DeInit+0x86>
 8005c26:	2304      	movs	r3, #4
 8005c28:	e008      	b.n	8005c3c <HAL_GPIO_DeInit+0x98>
 8005c2a:	2307      	movs	r3, #7
 8005c2c:	e006      	b.n	8005c3c <HAL_GPIO_DeInit+0x98>
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e004      	b.n	8005c3c <HAL_GPIO_DeInit+0x98>
 8005c32:	2302      	movs	r3, #2
 8005c34:	e002      	b.n	8005c3c <HAL_GPIO_DeInit+0x98>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <HAL_GPIO_DeInit+0x98>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	f002 0203 	and.w	r2, r2, #3
 8005c42:	0092      	lsls	r2, r2, #2
 8005c44:	4093      	lsls	r3, r2
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d132      	bne.n	8005cb2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005c4c:	4b46      	ldr	r3, [pc, #280]	; (8005d68 <HAL_GPIO_DeInit+0x1c4>)
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	43db      	mvns	r3, r3
 8005c54:	4944      	ldr	r1, [pc, #272]	; (8005d68 <HAL_GPIO_DeInit+0x1c4>)
 8005c56:	4013      	ands	r3, r2
 8005c58:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005c5a:	4b43      	ldr	r3, [pc, #268]	; (8005d68 <HAL_GPIO_DeInit+0x1c4>)
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	43db      	mvns	r3, r3
 8005c62:	4941      	ldr	r1, [pc, #260]	; (8005d68 <HAL_GPIO_DeInit+0x1c4>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005c68:	4b3f      	ldr	r3, [pc, #252]	; (8005d68 <HAL_GPIO_DeInit+0x1c4>)
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	43db      	mvns	r3, r3
 8005c70:	493d      	ldr	r1, [pc, #244]	; (8005d68 <HAL_GPIO_DeInit+0x1c4>)
 8005c72:	4013      	ands	r3, r2
 8005c74:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005c76:	4b3c      	ldr	r3, [pc, #240]	; (8005d68 <HAL_GPIO_DeInit+0x1c4>)
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	43db      	mvns	r3, r3
 8005c7e:	493a      	ldr	r1, [pc, #232]	; (8005d68 <HAL_GPIO_DeInit+0x1c4>)
 8005c80:	4013      	ands	r3, r2
 8005c82:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	220f      	movs	r2, #15
 8005c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c92:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005c94:	4a2e      	ldr	r2, [pc, #184]	; (8005d50 <HAL_GPIO_DeInit+0x1ac>)
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	089b      	lsrs	r3, r3, #2
 8005c9a:	3302      	adds	r3, #2
 8005c9c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	43da      	mvns	r2, r3
 8005ca4:	482a      	ldr	r0, [pc, #168]	; (8005d50 <HAL_GPIO_DeInit+0x1ac>)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	089b      	lsrs	r3, r3, #2
 8005caa:	400a      	ands	r2, r1
 8005cac:	3302      	adds	r3, #2
 8005cae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	2103      	movs	r1, #3
 8005cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc0:	43db      	mvns	r3, r3
 8005cc2:	401a      	ands	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	08da      	lsrs	r2, r3, #3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3208      	adds	r2, #8
 8005cd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	220f      	movs	r2, #15
 8005cde:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce2:	43db      	mvns	r3, r3
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	08d2      	lsrs	r2, r2, #3
 8005ce8:	4019      	ands	r1, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3208      	adds	r2, #8
 8005cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	2103      	movs	r1, #3
 8005cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005d00:	43db      	mvns	r3, r3
 8005d02:	401a      	ands	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	fa01 f303 	lsl.w	r3, r1, r3
 8005d14:	43db      	mvns	r3, r3
 8005d16:	401a      	ands	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	005b      	lsls	r3, r3, #1
 8005d24:	2103      	movs	r1, #3
 8005d26:	fa01 f303 	lsl.w	r3, r1, r3
 8005d2a:	43db      	mvns	r3, r3
 8005d2c:	401a      	ands	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	3301      	adds	r3, #1
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2b0f      	cmp	r3, #15
 8005d3c:	f67f af40 	bls.w	8005bc0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005d40:	bf00      	nop
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40013800 	.word	0x40013800
 8005d54:	40020000 	.word	0x40020000
 8005d58:	40020400 	.word	0x40020400
 8005d5c:	40020800 	.word	0x40020800
 8005d60:	40020c00 	.word	0x40020c00
 8005d64:	40021000 	.word	0x40021000
 8005d68:	40013c00 	.word	0x40013c00

08005d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	460b      	mov	r3, r1
 8005d76:	807b      	strh	r3, [r7, #2]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d7c:	787b      	ldrb	r3, [r7, #1]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d82:	887a      	ldrh	r2, [r7, #2]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d88:	e003      	b.n	8005d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d8a:	887b      	ldrh	r3, [r7, #2]
 8005d8c:	041a      	lsls	r2, r3, #16
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	619a      	str	r2, [r3, #24]
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	460b      	mov	r3, r1
 8005da8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005db0:	887a      	ldrh	r2, [r7, #2]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4013      	ands	r3, r2
 8005db6:	041a      	lsls	r2, r3, #16
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	43d9      	mvns	r1, r3
 8005dbc:	887b      	ldrh	r3, [r7, #2]
 8005dbe:	400b      	ands	r3, r1
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	619a      	str	r2, [r3, #24]
}
 8005dc6:	bf00      	nop
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e034      	b.n	8005e4e <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005dec:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f245 5255 	movw	r2, #21845	; 0x5555
 8005df6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6852      	ldr	r2, [r2, #4]
 8005e00:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6892      	ldr	r2, [r2, #8]
 8005e0a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005e0c:	f7fd ff86 	bl	8003d1c <HAL_GetTick>
 8005e10:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005e12:	e00f      	b.n	8005e34 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005e14:	f7fd ff82 	bl	8003d1c <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b31      	cmp	r3, #49	; 0x31
 8005e20:	d908      	bls.n	8005e34 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f003 0303 	and.w	r3, r3, #3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e00c      	b.n	8005e4e <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e8      	bne.n	8005e14 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005e4a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005e66:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
	...

08005e78 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8005e7c:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <HAL_PWR_PVD_IRQHandler+0x20>)
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d005      	beq.n	8005e94 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8005e88:	f000 f808 	bl	8005e9c <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8005e8c:	4b02      	ldr	r3, [pc, #8]	; (8005e98 <HAL_PWR_PVD_IRQHandler+0x20>)
 8005e8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005e92:	615a      	str	r2, [r3, #20]
  }
}
 8005e94:	bf00      	nop
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	40013c00 	.word	0x40013c00

08005e9c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8005ea0:	bf00      	nop
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
	...

08005eac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e267      	b.n	800638e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d075      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005eca:	4b88      	ldr	r3, [pc, #544]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 030c 	and.w	r3, r3, #12
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	d00c      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ed6:	4b85      	ldr	r3, [pc, #532]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d112      	bne.n	8005f08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ee2:	4b82      	ldr	r3, [pc, #520]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eee:	d10b      	bne.n	8005f08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef0:	4b7e      	ldr	r3, [pc, #504]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d05b      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x108>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d157      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e242      	b.n	800638e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f10:	d106      	bne.n	8005f20 <HAL_RCC_OscConfig+0x74>
 8005f12:	4b76      	ldr	r3, [pc, #472]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a75      	ldr	r2, [pc, #468]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8005f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	e01d      	b.n	8005f5c <HAL_RCC_OscConfig+0xb0>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f28:	d10c      	bne.n	8005f44 <HAL_RCC_OscConfig+0x98>
 8005f2a:	4b70      	ldr	r3, [pc, #448]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a6f      	ldr	r2, [pc, #444]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8005f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	4b6d      	ldr	r3, [pc, #436]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a6c      	ldr	r2, [pc, #432]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8005f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	e00b      	b.n	8005f5c <HAL_RCC_OscConfig+0xb0>
 8005f44:	4b69      	ldr	r3, [pc, #420]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a68      	ldr	r2, [pc, #416]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8005f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	4b66      	ldr	r3, [pc, #408]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a65      	ldr	r2, [pc, #404]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8005f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d013      	beq.n	8005f8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f64:	f7fd feda 	bl	8003d1c <HAL_GetTick>
 8005f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f6c:	f7fd fed6 	bl	8003d1c <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b64      	cmp	r3, #100	; 0x64
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e207      	b.n	800638e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f7e:	4b5b      	ldr	r3, [pc, #364]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0f0      	beq.n	8005f6c <HAL_RCC_OscConfig+0xc0>
 8005f8a:	e014      	b.n	8005fb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f8c:	f7fd fec6 	bl	8003d1c <HAL_GetTick>
 8005f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f94:	f7fd fec2 	bl	8003d1c <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b64      	cmp	r3, #100	; 0x64
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e1f3      	b.n	800638e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fa6:	4b51      	ldr	r3, [pc, #324]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1f0      	bne.n	8005f94 <HAL_RCC_OscConfig+0xe8>
 8005fb2:	e000      	b.n	8005fb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d063      	beq.n	800608a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fc2:	4b4a      	ldr	r3, [pc, #296]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 030c 	and.w	r3, r3, #12
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00b      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fce:	4b47      	ldr	r3, [pc, #284]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d11c      	bne.n	8006014 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fda:	4b44      	ldr	r3, [pc, #272]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d116      	bne.n	8006014 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fe6:	4b41      	ldr	r3, [pc, #260]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d005      	beq.n	8005ffe <HAL_RCC_OscConfig+0x152>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d001      	beq.n	8005ffe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e1c7      	b.n	800638e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ffe:	4b3b      	ldr	r3, [pc, #236]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	4937      	ldr	r1, [pc, #220]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 800600e:	4313      	orrs	r3, r2
 8006010:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006012:	e03a      	b.n	800608a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d020      	beq.n	800605e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800601c:	4b34      	ldr	r3, [pc, #208]	; (80060f0 <HAL_RCC_OscConfig+0x244>)
 800601e:	2201      	movs	r2, #1
 8006020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006022:	f7fd fe7b 	bl	8003d1c <HAL_GetTick>
 8006026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006028:	e008      	b.n	800603c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800602a:	f7fd fe77 	bl	8003d1c <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d901      	bls.n	800603c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e1a8      	b.n	800638e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800603c:	4b2b      	ldr	r3, [pc, #172]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d0f0      	beq.n	800602a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006048:	4b28      	ldr	r3, [pc, #160]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	4925      	ldr	r1, [pc, #148]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8006058:	4313      	orrs	r3, r2
 800605a:	600b      	str	r3, [r1, #0]
 800605c:	e015      	b.n	800608a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800605e:	4b24      	ldr	r3, [pc, #144]	; (80060f0 <HAL_RCC_OscConfig+0x244>)
 8006060:	2200      	movs	r2, #0
 8006062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006064:	f7fd fe5a 	bl	8003d1c <HAL_GetTick>
 8006068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800606a:	e008      	b.n	800607e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800606c:	f7fd fe56 	bl	8003d1c <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b02      	cmp	r3, #2
 8006078:	d901      	bls.n	800607e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e187      	b.n	800638e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800607e:	4b1b      	ldr	r3, [pc, #108]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1f0      	bne.n	800606c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0308 	and.w	r3, r3, #8
 8006092:	2b00      	cmp	r3, #0
 8006094:	d036      	beq.n	8006104 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d016      	beq.n	80060cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800609e:	4b15      	ldr	r3, [pc, #84]	; (80060f4 <HAL_RCC_OscConfig+0x248>)
 80060a0:	2201      	movs	r2, #1
 80060a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a4:	f7fd fe3a 	bl	8003d1c <HAL_GetTick>
 80060a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060aa:	e008      	b.n	80060be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060ac:	f7fd fe36 	bl	8003d1c <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e167      	b.n	800638e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060be:	4b0b      	ldr	r3, [pc, #44]	; (80060ec <HAL_RCC_OscConfig+0x240>)
 80060c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0f0      	beq.n	80060ac <HAL_RCC_OscConfig+0x200>
 80060ca:	e01b      	b.n	8006104 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060cc:	4b09      	ldr	r3, [pc, #36]	; (80060f4 <HAL_RCC_OscConfig+0x248>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060d2:	f7fd fe23 	bl	8003d1c <HAL_GetTick>
 80060d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060d8:	e00e      	b.n	80060f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060da:	f7fd fe1f 	bl	8003d1c <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d907      	bls.n	80060f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e150      	b.n	800638e <HAL_RCC_OscConfig+0x4e2>
 80060ec:	40023800 	.word	0x40023800
 80060f0:	42470000 	.word	0x42470000
 80060f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060f8:	4b88      	ldr	r3, [pc, #544]	; (800631c <HAL_RCC_OscConfig+0x470>)
 80060fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1ea      	bne.n	80060da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 8097 	beq.w	8006240 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006112:	2300      	movs	r3, #0
 8006114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006116:	4b81      	ldr	r3, [pc, #516]	; (800631c <HAL_RCC_OscConfig+0x470>)
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10f      	bne.n	8006142 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006122:	2300      	movs	r3, #0
 8006124:	60bb      	str	r3, [r7, #8]
 8006126:	4b7d      	ldr	r3, [pc, #500]	; (800631c <HAL_RCC_OscConfig+0x470>)
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	4a7c      	ldr	r2, [pc, #496]	; (800631c <HAL_RCC_OscConfig+0x470>)
 800612c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006130:	6413      	str	r3, [r2, #64]	; 0x40
 8006132:	4b7a      	ldr	r3, [pc, #488]	; (800631c <HAL_RCC_OscConfig+0x470>)
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800613a:	60bb      	str	r3, [r7, #8]
 800613c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800613e:	2301      	movs	r3, #1
 8006140:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006142:	4b77      	ldr	r3, [pc, #476]	; (8006320 <HAL_RCC_OscConfig+0x474>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614a:	2b00      	cmp	r3, #0
 800614c:	d118      	bne.n	8006180 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800614e:	4b74      	ldr	r3, [pc, #464]	; (8006320 <HAL_RCC_OscConfig+0x474>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a73      	ldr	r2, [pc, #460]	; (8006320 <HAL_RCC_OscConfig+0x474>)
 8006154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800615a:	f7fd fddf 	bl	8003d1c <HAL_GetTick>
 800615e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006160:	e008      	b.n	8006174 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006162:	f7fd fddb 	bl	8003d1c <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	2b02      	cmp	r3, #2
 800616e:	d901      	bls.n	8006174 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e10c      	b.n	800638e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006174:	4b6a      	ldr	r3, [pc, #424]	; (8006320 <HAL_RCC_OscConfig+0x474>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0f0      	beq.n	8006162 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d106      	bne.n	8006196 <HAL_RCC_OscConfig+0x2ea>
 8006188:	4b64      	ldr	r3, [pc, #400]	; (800631c <HAL_RCC_OscConfig+0x470>)
 800618a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618c:	4a63      	ldr	r2, [pc, #396]	; (800631c <HAL_RCC_OscConfig+0x470>)
 800618e:	f043 0301 	orr.w	r3, r3, #1
 8006192:	6713      	str	r3, [r2, #112]	; 0x70
 8006194:	e01c      	b.n	80061d0 <HAL_RCC_OscConfig+0x324>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	2b05      	cmp	r3, #5
 800619c:	d10c      	bne.n	80061b8 <HAL_RCC_OscConfig+0x30c>
 800619e:	4b5f      	ldr	r3, [pc, #380]	; (800631c <HAL_RCC_OscConfig+0x470>)
 80061a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a2:	4a5e      	ldr	r2, [pc, #376]	; (800631c <HAL_RCC_OscConfig+0x470>)
 80061a4:	f043 0304 	orr.w	r3, r3, #4
 80061a8:	6713      	str	r3, [r2, #112]	; 0x70
 80061aa:	4b5c      	ldr	r3, [pc, #368]	; (800631c <HAL_RCC_OscConfig+0x470>)
 80061ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ae:	4a5b      	ldr	r2, [pc, #364]	; (800631c <HAL_RCC_OscConfig+0x470>)
 80061b0:	f043 0301 	orr.w	r3, r3, #1
 80061b4:	6713      	str	r3, [r2, #112]	; 0x70
 80061b6:	e00b      	b.n	80061d0 <HAL_RCC_OscConfig+0x324>
 80061b8:	4b58      	ldr	r3, [pc, #352]	; (800631c <HAL_RCC_OscConfig+0x470>)
 80061ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061bc:	4a57      	ldr	r2, [pc, #348]	; (800631c <HAL_RCC_OscConfig+0x470>)
 80061be:	f023 0301 	bic.w	r3, r3, #1
 80061c2:	6713      	str	r3, [r2, #112]	; 0x70
 80061c4:	4b55      	ldr	r3, [pc, #340]	; (800631c <HAL_RCC_OscConfig+0x470>)
 80061c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c8:	4a54      	ldr	r2, [pc, #336]	; (800631c <HAL_RCC_OscConfig+0x470>)
 80061ca:	f023 0304 	bic.w	r3, r3, #4
 80061ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d015      	beq.n	8006204 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d8:	f7fd fda0 	bl	8003d1c <HAL_GetTick>
 80061dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061de:	e00a      	b.n	80061f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061e0:	f7fd fd9c 	bl	8003d1c <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e0cb      	b.n	800638e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061f6:	4b49      	ldr	r3, [pc, #292]	; (800631c <HAL_RCC_OscConfig+0x470>)
 80061f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d0ee      	beq.n	80061e0 <HAL_RCC_OscConfig+0x334>
 8006202:	e014      	b.n	800622e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006204:	f7fd fd8a 	bl	8003d1c <HAL_GetTick>
 8006208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800620a:	e00a      	b.n	8006222 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800620c:	f7fd fd86 	bl	8003d1c <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	f241 3288 	movw	r2, #5000	; 0x1388
 800621a:	4293      	cmp	r3, r2
 800621c:	d901      	bls.n	8006222 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e0b5      	b.n	800638e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006222:	4b3e      	ldr	r3, [pc, #248]	; (800631c <HAL_RCC_OscConfig+0x470>)
 8006224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1ee      	bne.n	800620c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800622e:	7dfb      	ldrb	r3, [r7, #23]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d105      	bne.n	8006240 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006234:	4b39      	ldr	r3, [pc, #228]	; (800631c <HAL_RCC_OscConfig+0x470>)
 8006236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006238:	4a38      	ldr	r2, [pc, #224]	; (800631c <HAL_RCC_OscConfig+0x470>)
 800623a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800623e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 80a1 	beq.w	800638c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800624a:	4b34      	ldr	r3, [pc, #208]	; (800631c <HAL_RCC_OscConfig+0x470>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 030c 	and.w	r3, r3, #12
 8006252:	2b08      	cmp	r3, #8
 8006254:	d05c      	beq.n	8006310 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	2b02      	cmp	r3, #2
 800625c:	d141      	bne.n	80062e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800625e:	4b31      	ldr	r3, [pc, #196]	; (8006324 <HAL_RCC_OscConfig+0x478>)
 8006260:	2200      	movs	r2, #0
 8006262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006264:	f7fd fd5a 	bl	8003d1c <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800626c:	f7fd fd56 	bl	8003d1c <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e087      	b.n	800638e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800627e:	4b27      	ldr	r3, [pc, #156]	; (800631c <HAL_RCC_OscConfig+0x470>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1f0      	bne.n	800626c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	69da      	ldr	r2, [r3, #28]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	431a      	orrs	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	019b      	lsls	r3, r3, #6
 800629a:	431a      	orrs	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a0:	085b      	lsrs	r3, r3, #1
 80062a2:	3b01      	subs	r3, #1
 80062a4:	041b      	lsls	r3, r3, #16
 80062a6:	431a      	orrs	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ac:	061b      	lsls	r3, r3, #24
 80062ae:	491b      	ldr	r1, [pc, #108]	; (800631c <HAL_RCC_OscConfig+0x470>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062b4:	4b1b      	ldr	r3, [pc, #108]	; (8006324 <HAL_RCC_OscConfig+0x478>)
 80062b6:	2201      	movs	r2, #1
 80062b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ba:	f7fd fd2f 	bl	8003d1c <HAL_GetTick>
 80062be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062c0:	e008      	b.n	80062d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062c2:	f7fd fd2b 	bl	8003d1c <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d901      	bls.n	80062d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e05c      	b.n	800638e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062d4:	4b11      	ldr	r3, [pc, #68]	; (800631c <HAL_RCC_OscConfig+0x470>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d0f0      	beq.n	80062c2 <HAL_RCC_OscConfig+0x416>
 80062e0:	e054      	b.n	800638c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062e2:	4b10      	ldr	r3, [pc, #64]	; (8006324 <HAL_RCC_OscConfig+0x478>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e8:	f7fd fd18 	bl	8003d1c <HAL_GetTick>
 80062ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ee:	e008      	b.n	8006302 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062f0:	f7fd fd14 	bl	8003d1c <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d901      	bls.n	8006302 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e045      	b.n	800638e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006302:	4b06      	ldr	r3, [pc, #24]	; (800631c <HAL_RCC_OscConfig+0x470>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1f0      	bne.n	80062f0 <HAL_RCC_OscConfig+0x444>
 800630e:	e03d      	b.n	800638c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d107      	bne.n	8006328 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e038      	b.n	800638e <HAL_RCC_OscConfig+0x4e2>
 800631c:	40023800 	.word	0x40023800
 8006320:	40007000 	.word	0x40007000
 8006324:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006328:	4b1b      	ldr	r3, [pc, #108]	; (8006398 <HAL_RCC_OscConfig+0x4ec>)
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d028      	beq.n	8006388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006340:	429a      	cmp	r2, r3
 8006342:	d121      	bne.n	8006388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800634e:	429a      	cmp	r2, r3
 8006350:	d11a      	bne.n	8006388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006358:	4013      	ands	r3, r2
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800635e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006360:	4293      	cmp	r3, r2
 8006362:	d111      	bne.n	8006388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636e:	085b      	lsrs	r3, r3, #1
 8006370:	3b01      	subs	r3, #1
 8006372:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006374:	429a      	cmp	r2, r3
 8006376:	d107      	bne.n	8006388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006382:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006384:	429a      	cmp	r2, r3
 8006386:	d001      	beq.n	800638c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e000      	b.n	800638e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	40023800 	.word	0x40023800

0800639c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e0cc      	b.n	800654a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063b0:	4b68      	ldr	r3, [pc, #416]	; (8006554 <HAL_RCC_ClockConfig+0x1b8>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0307 	and.w	r3, r3, #7
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d90c      	bls.n	80063d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063be:	4b65      	ldr	r3, [pc, #404]	; (8006554 <HAL_RCC_ClockConfig+0x1b8>)
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063c6:	4b63      	ldr	r3, [pc, #396]	; (8006554 <HAL_RCC_ClockConfig+0x1b8>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0307 	and.w	r3, r3, #7
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d001      	beq.n	80063d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e0b8      	b.n	800654a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d020      	beq.n	8006426 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d005      	beq.n	80063fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063f0:	4b59      	ldr	r3, [pc, #356]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	4a58      	ldr	r2, [pc, #352]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 80063f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0308 	and.w	r3, r3, #8
 8006404:	2b00      	cmp	r3, #0
 8006406:	d005      	beq.n	8006414 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006408:	4b53      	ldr	r3, [pc, #332]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	4a52      	ldr	r2, [pc, #328]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 800640e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006412:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006414:	4b50      	ldr	r3, [pc, #320]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	494d      	ldr	r1, [pc, #308]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 8006422:	4313      	orrs	r3, r2
 8006424:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d044      	beq.n	80064bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d107      	bne.n	800644a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800643a:	4b47      	ldr	r3, [pc, #284]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d119      	bne.n	800647a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e07f      	b.n	800654a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2b02      	cmp	r3, #2
 8006450:	d003      	beq.n	800645a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006456:	2b03      	cmp	r3, #3
 8006458:	d107      	bne.n	800646a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800645a:	4b3f      	ldr	r3, [pc, #252]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d109      	bne.n	800647a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e06f      	b.n	800654a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800646a:	4b3b      	ldr	r3, [pc, #236]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e067      	b.n	800654a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800647a:	4b37      	ldr	r3, [pc, #220]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f023 0203 	bic.w	r2, r3, #3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	4934      	ldr	r1, [pc, #208]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 8006488:	4313      	orrs	r3, r2
 800648a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800648c:	f7fd fc46 	bl	8003d1c <HAL_GetTick>
 8006490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006492:	e00a      	b.n	80064aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006494:	f7fd fc42 	bl	8003d1c <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	f241 3288 	movw	r2, #5000	; 0x1388
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e04f      	b.n	800654a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064aa:	4b2b      	ldr	r3, [pc, #172]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f003 020c 	and.w	r2, r3, #12
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d1eb      	bne.n	8006494 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064bc:	4b25      	ldr	r3, [pc, #148]	; (8006554 <HAL_RCC_ClockConfig+0x1b8>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0307 	and.w	r3, r3, #7
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d20c      	bcs.n	80064e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ca:	4b22      	ldr	r3, [pc, #136]	; (8006554 <HAL_RCC_ClockConfig+0x1b8>)
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064d2:	4b20      	ldr	r3, [pc, #128]	; (8006554 <HAL_RCC_ClockConfig+0x1b8>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0307 	and.w	r3, r3, #7
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d001      	beq.n	80064e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e032      	b.n	800654a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d008      	beq.n	8006502 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064f0:	4b19      	ldr	r3, [pc, #100]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	4916      	ldr	r1, [pc, #88]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0308 	and.w	r3, r3, #8
 800650a:	2b00      	cmp	r3, #0
 800650c:	d009      	beq.n	8006522 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800650e:	4b12      	ldr	r3, [pc, #72]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	490e      	ldr	r1, [pc, #56]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 800651e:	4313      	orrs	r3, r2
 8006520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006522:	f000 f821 	bl	8006568 <HAL_RCC_GetSysClockFreq>
 8006526:	4602      	mov	r2, r0
 8006528:	4b0b      	ldr	r3, [pc, #44]	; (8006558 <HAL_RCC_ClockConfig+0x1bc>)
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	091b      	lsrs	r3, r3, #4
 800652e:	f003 030f 	and.w	r3, r3, #15
 8006532:	490a      	ldr	r1, [pc, #40]	; (800655c <HAL_RCC_ClockConfig+0x1c0>)
 8006534:	5ccb      	ldrb	r3, [r1, r3]
 8006536:	fa22 f303 	lsr.w	r3, r2, r3
 800653a:	4a09      	ldr	r2, [pc, #36]	; (8006560 <HAL_RCC_ClockConfig+0x1c4>)
 800653c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800653e:	4b09      	ldr	r3, [pc, #36]	; (8006564 <HAL_RCC_ClockConfig+0x1c8>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4618      	mov	r0, r3
 8006544:	f7fc fe38 	bl	80031b8 <HAL_InitTick>

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	40023c00 	.word	0x40023c00
 8006558:	40023800 	.word	0x40023800
 800655c:	0800f9d4 	.word	0x0800f9d4
 8006560:	2000001c 	.word	0x2000001c
 8006564:	20000020 	.word	0x20000020

08006568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800656c:	b094      	sub	sp, #80	; 0x50
 800656e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006570:	2300      	movs	r3, #0
 8006572:	647b      	str	r3, [r7, #68]	; 0x44
 8006574:	2300      	movs	r3, #0
 8006576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006578:	2300      	movs	r3, #0
 800657a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800657c:	2300      	movs	r3, #0
 800657e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006580:	4b79      	ldr	r3, [pc, #484]	; (8006768 <HAL_RCC_GetSysClockFreq+0x200>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f003 030c 	and.w	r3, r3, #12
 8006588:	2b08      	cmp	r3, #8
 800658a:	d00d      	beq.n	80065a8 <HAL_RCC_GetSysClockFreq+0x40>
 800658c:	2b08      	cmp	r3, #8
 800658e:	f200 80e1 	bhi.w	8006754 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <HAL_RCC_GetSysClockFreq+0x34>
 8006596:	2b04      	cmp	r3, #4
 8006598:	d003      	beq.n	80065a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800659a:	e0db      	b.n	8006754 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800659c:	4b73      	ldr	r3, [pc, #460]	; (800676c <HAL_RCC_GetSysClockFreq+0x204>)
 800659e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80065a0:	e0db      	b.n	800675a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065a2:	4b73      	ldr	r3, [pc, #460]	; (8006770 <HAL_RCC_GetSysClockFreq+0x208>)
 80065a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065a6:	e0d8      	b.n	800675a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065a8:	4b6f      	ldr	r3, [pc, #444]	; (8006768 <HAL_RCC_GetSysClockFreq+0x200>)
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065b2:	4b6d      	ldr	r3, [pc, #436]	; (8006768 <HAL_RCC_GetSysClockFreq+0x200>)
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d063      	beq.n	8006686 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065be:	4b6a      	ldr	r3, [pc, #424]	; (8006768 <HAL_RCC_GetSysClockFreq+0x200>)
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	099b      	lsrs	r3, r3, #6
 80065c4:	2200      	movs	r2, #0
 80065c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80065c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065d0:	633b      	str	r3, [r7, #48]	; 0x30
 80065d2:	2300      	movs	r3, #0
 80065d4:	637b      	str	r3, [r7, #52]	; 0x34
 80065d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80065da:	4622      	mov	r2, r4
 80065dc:	462b      	mov	r3, r5
 80065de:	f04f 0000 	mov.w	r0, #0
 80065e2:	f04f 0100 	mov.w	r1, #0
 80065e6:	0159      	lsls	r1, r3, #5
 80065e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065ec:	0150      	lsls	r0, r2, #5
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	4621      	mov	r1, r4
 80065f4:	1a51      	subs	r1, r2, r1
 80065f6:	6139      	str	r1, [r7, #16]
 80065f8:	4629      	mov	r1, r5
 80065fa:	eb63 0301 	sbc.w	r3, r3, r1
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	f04f 0200 	mov.w	r2, #0
 8006604:	f04f 0300 	mov.w	r3, #0
 8006608:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800660c:	4659      	mov	r1, fp
 800660e:	018b      	lsls	r3, r1, #6
 8006610:	4651      	mov	r1, sl
 8006612:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006616:	4651      	mov	r1, sl
 8006618:	018a      	lsls	r2, r1, #6
 800661a:	4651      	mov	r1, sl
 800661c:	ebb2 0801 	subs.w	r8, r2, r1
 8006620:	4659      	mov	r1, fp
 8006622:	eb63 0901 	sbc.w	r9, r3, r1
 8006626:	f04f 0200 	mov.w	r2, #0
 800662a:	f04f 0300 	mov.w	r3, #0
 800662e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006632:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006636:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800663a:	4690      	mov	r8, r2
 800663c:	4699      	mov	r9, r3
 800663e:	4623      	mov	r3, r4
 8006640:	eb18 0303 	adds.w	r3, r8, r3
 8006644:	60bb      	str	r3, [r7, #8]
 8006646:	462b      	mov	r3, r5
 8006648:	eb49 0303 	adc.w	r3, r9, r3
 800664c:	60fb      	str	r3, [r7, #12]
 800664e:	f04f 0200 	mov.w	r2, #0
 8006652:	f04f 0300 	mov.w	r3, #0
 8006656:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800665a:	4629      	mov	r1, r5
 800665c:	024b      	lsls	r3, r1, #9
 800665e:	4621      	mov	r1, r4
 8006660:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006664:	4621      	mov	r1, r4
 8006666:	024a      	lsls	r2, r1, #9
 8006668:	4610      	mov	r0, r2
 800666a:	4619      	mov	r1, r3
 800666c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800666e:	2200      	movs	r2, #0
 8006670:	62bb      	str	r3, [r7, #40]	; 0x28
 8006672:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006674:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006678:	f7fa f9a8 	bl	80009cc <__aeabi_uldivmod>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	4613      	mov	r3, r2
 8006682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006684:	e058      	b.n	8006738 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006686:	4b38      	ldr	r3, [pc, #224]	; (8006768 <HAL_RCC_GetSysClockFreq+0x200>)
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	099b      	lsrs	r3, r3, #6
 800668c:	2200      	movs	r2, #0
 800668e:	4618      	mov	r0, r3
 8006690:	4611      	mov	r1, r2
 8006692:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006696:	623b      	str	r3, [r7, #32]
 8006698:	2300      	movs	r3, #0
 800669a:	627b      	str	r3, [r7, #36]	; 0x24
 800669c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80066a0:	4642      	mov	r2, r8
 80066a2:	464b      	mov	r3, r9
 80066a4:	f04f 0000 	mov.w	r0, #0
 80066a8:	f04f 0100 	mov.w	r1, #0
 80066ac:	0159      	lsls	r1, r3, #5
 80066ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066b2:	0150      	lsls	r0, r2, #5
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4641      	mov	r1, r8
 80066ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80066be:	4649      	mov	r1, r9
 80066c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80066d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80066d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80066d8:	ebb2 040a 	subs.w	r4, r2, sl
 80066dc:	eb63 050b 	sbc.w	r5, r3, fp
 80066e0:	f04f 0200 	mov.w	r2, #0
 80066e4:	f04f 0300 	mov.w	r3, #0
 80066e8:	00eb      	lsls	r3, r5, #3
 80066ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066ee:	00e2      	lsls	r2, r4, #3
 80066f0:	4614      	mov	r4, r2
 80066f2:	461d      	mov	r5, r3
 80066f4:	4643      	mov	r3, r8
 80066f6:	18e3      	adds	r3, r4, r3
 80066f8:	603b      	str	r3, [r7, #0]
 80066fa:	464b      	mov	r3, r9
 80066fc:	eb45 0303 	adc.w	r3, r5, r3
 8006700:	607b      	str	r3, [r7, #4]
 8006702:	f04f 0200 	mov.w	r2, #0
 8006706:	f04f 0300 	mov.w	r3, #0
 800670a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800670e:	4629      	mov	r1, r5
 8006710:	028b      	lsls	r3, r1, #10
 8006712:	4621      	mov	r1, r4
 8006714:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006718:	4621      	mov	r1, r4
 800671a:	028a      	lsls	r2, r1, #10
 800671c:	4610      	mov	r0, r2
 800671e:	4619      	mov	r1, r3
 8006720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006722:	2200      	movs	r2, #0
 8006724:	61bb      	str	r3, [r7, #24]
 8006726:	61fa      	str	r2, [r7, #28]
 8006728:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800672c:	f7fa f94e 	bl	80009cc <__aeabi_uldivmod>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4613      	mov	r3, r2
 8006736:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006738:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <HAL_RCC_GetSysClockFreq+0x200>)
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	0c1b      	lsrs	r3, r3, #16
 800673e:	f003 0303 	and.w	r3, r3, #3
 8006742:	3301      	adds	r3, #1
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006748:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800674a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800674c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006750:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006752:	e002      	b.n	800675a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006754:	4b05      	ldr	r3, [pc, #20]	; (800676c <HAL_RCC_GetSysClockFreq+0x204>)
 8006756:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800675a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800675c:	4618      	mov	r0, r3
 800675e:	3750      	adds	r7, #80	; 0x50
 8006760:	46bd      	mov	sp, r7
 8006762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006766:	bf00      	nop
 8006768:	40023800 	.word	0x40023800
 800676c:	00f42400 	.word	0x00f42400
 8006770:	007a1200 	.word	0x007a1200

08006774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006774:	b480      	push	{r7}
 8006776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006778:	4b03      	ldr	r3, [pc, #12]	; (8006788 <HAL_RCC_GetHCLKFreq+0x14>)
 800677a:	681b      	ldr	r3, [r3, #0]
}
 800677c:	4618      	mov	r0, r3
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	2000001c 	.word	0x2000001c

0800678c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006790:	f7ff fff0 	bl	8006774 <HAL_RCC_GetHCLKFreq>
 8006794:	4602      	mov	r2, r0
 8006796:	4b05      	ldr	r3, [pc, #20]	; (80067ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	0a9b      	lsrs	r3, r3, #10
 800679c:	f003 0307 	and.w	r3, r3, #7
 80067a0:	4903      	ldr	r1, [pc, #12]	; (80067b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067a2:	5ccb      	ldrb	r3, [r1, r3]
 80067a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	40023800 	.word	0x40023800
 80067b0:	0800f9e4 	.word	0x0800f9e4

080067b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80067b8:	f7ff ffdc 	bl	8006774 <HAL_RCC_GetHCLKFreq>
 80067bc:	4602      	mov	r2, r0
 80067be:	4b05      	ldr	r3, [pc, #20]	; (80067d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	0b5b      	lsrs	r3, r3, #13
 80067c4:	f003 0307 	and.w	r3, r3, #7
 80067c8:	4903      	ldr	r1, [pc, #12]	; (80067d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067ca:	5ccb      	ldrb	r3, [r1, r3]
 80067cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	40023800 	.word	0x40023800
 80067d8:	0800f9e4 	.word	0x0800f9e4

080067dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	220f      	movs	r2, #15
 80067ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80067ec:	4b12      	ldr	r3, [pc, #72]	; (8006838 <HAL_RCC_GetClockConfig+0x5c>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f003 0203 	and.w	r2, r3, #3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80067f8:	4b0f      	ldr	r3, [pc, #60]	; (8006838 <HAL_RCC_GetClockConfig+0x5c>)
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006804:	4b0c      	ldr	r3, [pc, #48]	; (8006838 <HAL_RCC_GetClockConfig+0x5c>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006810:	4b09      	ldr	r3, [pc, #36]	; (8006838 <HAL_RCC_GetClockConfig+0x5c>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	08db      	lsrs	r3, r3, #3
 8006816:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800681e:	4b07      	ldr	r3, [pc, #28]	; (800683c <HAL_RCC_GetClockConfig+0x60>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0207 	and.w	r2, r3, #7
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	601a      	str	r2, [r3, #0]
}
 800682a:	bf00      	nop
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	40023800 	.word	0x40023800
 800683c:	40023c00 	.word	0x40023c00

08006840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e04c      	b.n	80068ec <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d111      	bne.n	8006882 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f001 fc0e 	bl	8008088 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006870:	2b00      	cmp	r3, #0
 8006872:	d102      	bne.n	800687a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a1f      	ldr	r2, [pc, #124]	; (80068f4 <HAL_TIM_Base_Init+0xb4>)
 8006878:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2202      	movs	r2, #2
 8006886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3304      	adds	r3, #4
 8006892:	4619      	mov	r1, r3
 8006894:	4610      	mov	r0, r2
 8006896:	f001 f80d 	bl	80078b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	080035f1 	.word	0x080035f1

080068f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b01      	cmp	r3, #1
 800690a:	d001      	beq.n	8006910 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e044      	b.n	800699a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2202      	movs	r2, #2
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0201 	orr.w	r2, r2, #1
 8006926:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a1e      	ldr	r2, [pc, #120]	; (80069a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d018      	beq.n	8006964 <HAL_TIM_Base_Start_IT+0x6c>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800693a:	d013      	beq.n	8006964 <HAL_TIM_Base_Start_IT+0x6c>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a1a      	ldr	r2, [pc, #104]	; (80069ac <HAL_TIM_Base_Start_IT+0xb4>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d00e      	beq.n	8006964 <HAL_TIM_Base_Start_IT+0x6c>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a19      	ldr	r2, [pc, #100]	; (80069b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d009      	beq.n	8006964 <HAL_TIM_Base_Start_IT+0x6c>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a17      	ldr	r2, [pc, #92]	; (80069b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d004      	beq.n	8006964 <HAL_TIM_Base_Start_IT+0x6c>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a16      	ldr	r2, [pc, #88]	; (80069b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d111      	bne.n	8006988 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2b06      	cmp	r3, #6
 8006974:	d010      	beq.n	8006998 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f042 0201 	orr.w	r2, r2, #1
 8006984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006986:	e007      	b.n	8006998 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0201 	orr.w	r2, r2, #1
 8006996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	40010000 	.word	0x40010000
 80069ac:	40000400 	.word	0x40000400
 80069b0:	40000800 	.word	0x40000800
 80069b4:	40000c00 	.word	0x40000c00
 80069b8:	40014000 	.word	0x40014000

080069bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e04c      	b.n	8006a68 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d111      	bne.n	80069fe <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 fb50 	bl	8008088 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d102      	bne.n	80069f6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a1f      	ldr	r2, [pc, #124]	; (8006a70 <HAL_TIM_PWM_Init+0xb4>)
 80069f4:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2202      	movs	r2, #2
 8006a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	4619      	mov	r1, r3
 8006a10:	4610      	mov	r0, r2
 8006a12:	f000 ff4f 	bl	80078b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	08006a75 	.word	0x08006a75

08006a74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d109      	bne.n	8006ab0 <HAL_TIM_PWM_Start_IT+0x28>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	bf14      	ite	ne
 8006aa8:	2301      	movne	r3, #1
 8006aaa:	2300      	moveq	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	e022      	b.n	8006af6 <HAL_TIM_PWM_Start_IT+0x6e>
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	d109      	bne.n	8006aca <HAL_TIM_PWM_Start_IT+0x42>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	bf14      	ite	ne
 8006ac2:	2301      	movne	r3, #1
 8006ac4:	2300      	moveq	r3, #0
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	e015      	b.n	8006af6 <HAL_TIM_PWM_Start_IT+0x6e>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b08      	cmp	r3, #8
 8006ace:	d109      	bne.n	8006ae4 <HAL_TIM_PWM_Start_IT+0x5c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	bf14      	ite	ne
 8006adc:	2301      	movne	r3, #1
 8006ade:	2300      	moveq	r3, #0
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	e008      	b.n	8006af6 <HAL_TIM_PWM_Start_IT+0x6e>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	bf14      	ite	ne
 8006af0:	2301      	movne	r3, #1
 8006af2:	2300      	moveq	r3, #0
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e0b3      	b.n	8006c66 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d104      	bne.n	8006b0e <HAL_TIM_PWM_Start_IT+0x86>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b0c:	e013      	b.n	8006b36 <HAL_TIM_PWM_Start_IT+0xae>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d104      	bne.n	8006b1e <HAL_TIM_PWM_Start_IT+0x96>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b1c:	e00b      	b.n	8006b36 <HAL_TIM_PWM_Start_IT+0xae>
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	d104      	bne.n	8006b2e <HAL_TIM_PWM_Start_IT+0xa6>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b2c:	e003      	b.n	8006b36 <HAL_TIM_PWM_Start_IT+0xae>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2202      	movs	r2, #2
 8006b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b0c      	cmp	r3, #12
 8006b3a:	d841      	bhi.n	8006bc0 <HAL_TIM_PWM_Start_IT+0x138>
 8006b3c:	a201      	add	r2, pc, #4	; (adr r2, 8006b44 <HAL_TIM_PWM_Start_IT+0xbc>)
 8006b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b42:	bf00      	nop
 8006b44:	08006b79 	.word	0x08006b79
 8006b48:	08006bc1 	.word	0x08006bc1
 8006b4c:	08006bc1 	.word	0x08006bc1
 8006b50:	08006bc1 	.word	0x08006bc1
 8006b54:	08006b8b 	.word	0x08006b8b
 8006b58:	08006bc1 	.word	0x08006bc1
 8006b5c:	08006bc1 	.word	0x08006bc1
 8006b60:	08006bc1 	.word	0x08006bc1
 8006b64:	08006b9d 	.word	0x08006b9d
 8006b68:	08006bc1 	.word	0x08006bc1
 8006b6c:	08006bc1 	.word	0x08006bc1
 8006b70:	08006bc1 	.word	0x08006bc1
 8006b74:	08006baf 	.word	0x08006baf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0202 	orr.w	r2, r2, #2
 8006b86:	60da      	str	r2, [r3, #12]
      break;
 8006b88:	e01d      	b.n	8006bc6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68da      	ldr	r2, [r3, #12]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f042 0204 	orr.w	r2, r2, #4
 8006b98:	60da      	str	r2, [r3, #12]
      break;
 8006b9a:	e014      	b.n	8006bc6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f042 0208 	orr.w	r2, r2, #8
 8006baa:	60da      	str	r2, [r3, #12]
      break;
 8006bac:	e00b      	b.n	8006bc6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f042 0210 	orr.w	r2, r2, #16
 8006bbc:	60da      	str	r2, [r3, #12]
      break;
 8006bbe:	e002      	b.n	8006bc6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc4:	bf00      	nop
  }

  if (status == HAL_OK)
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d14b      	bne.n	8006c64 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	6839      	ldr	r1, [r7, #0]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f001 fa31 	bl	800803c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a24      	ldr	r2, [pc, #144]	; (8006c70 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d107      	bne.n	8006bf4 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bf2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a1d      	ldr	r2, [pc, #116]	; (8006c70 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d018      	beq.n	8006c30 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c06:	d013      	beq.n	8006c30 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a19      	ldr	r2, [pc, #100]	; (8006c74 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00e      	beq.n	8006c30 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a18      	ldr	r2, [pc, #96]	; (8006c78 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d009      	beq.n	8006c30 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a16      	ldr	r2, [pc, #88]	; (8006c7c <HAL_TIM_PWM_Start_IT+0x1f4>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d004      	beq.n	8006c30 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a15      	ldr	r2, [pc, #84]	; (8006c80 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d111      	bne.n	8006c54 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2b06      	cmp	r3, #6
 8006c40:	d010      	beq.n	8006c64 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f042 0201 	orr.w	r2, r2, #1
 8006c50:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c52:	e007      	b.n	8006c64 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f042 0201 	orr.w	r2, r2, #1
 8006c62:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	40010000 	.word	0x40010000
 8006c74:	40000400 	.word	0x40000400
 8006c78:	40000800 	.word	0x40000800
 8006c7c:	40000c00 	.word	0x40000c00
 8006c80:	40014000 	.word	0x40014000

08006c84 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b0c      	cmp	r3, #12
 8006c96:	d841      	bhi.n	8006d1c <HAL_TIM_PWM_Stop_IT+0x98>
 8006c98:	a201      	add	r2, pc, #4	; (adr r2, 8006ca0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8006c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9e:	bf00      	nop
 8006ca0:	08006cd5 	.word	0x08006cd5
 8006ca4:	08006d1d 	.word	0x08006d1d
 8006ca8:	08006d1d 	.word	0x08006d1d
 8006cac:	08006d1d 	.word	0x08006d1d
 8006cb0:	08006ce7 	.word	0x08006ce7
 8006cb4:	08006d1d 	.word	0x08006d1d
 8006cb8:	08006d1d 	.word	0x08006d1d
 8006cbc:	08006d1d 	.word	0x08006d1d
 8006cc0:	08006cf9 	.word	0x08006cf9
 8006cc4:	08006d1d 	.word	0x08006d1d
 8006cc8:	08006d1d 	.word	0x08006d1d
 8006ccc:	08006d1d 	.word	0x08006d1d
 8006cd0:	08006d0b 	.word	0x08006d0b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68da      	ldr	r2, [r3, #12]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 0202 	bic.w	r2, r2, #2
 8006ce2:	60da      	str	r2, [r3, #12]
      break;
 8006ce4:	e01d      	b.n	8006d22 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 0204 	bic.w	r2, r2, #4
 8006cf4:	60da      	str	r2, [r3, #12]
      break;
 8006cf6:	e014      	b.n	8006d22 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 0208 	bic.w	r2, r2, #8
 8006d06:	60da      	str	r2, [r3, #12]
      break;
 8006d08:	e00b      	b.n	8006d22 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68da      	ldr	r2, [r3, #12]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f022 0210 	bic.w	r2, r2, #16
 8006d18:	60da      	str	r2, [r3, #12]
      break;
 8006d1a:	e002      	b.n	8006d22 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d20:	bf00      	nop
  }

  if (status == HAL_OK)
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d157      	bne.n	8006dd8 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f001 f983 	bl	800803c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a2a      	ldr	r2, [pc, #168]	; (8006de4 <HAL_TIM_PWM_Stop_IT+0x160>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d117      	bne.n	8006d70 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6a1a      	ldr	r2, [r3, #32]
 8006d46:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10f      	bne.n	8006d70 <HAL_TIM_PWM_Stop_IT+0xec>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6a1a      	ldr	r2, [r3, #32]
 8006d56:	f240 4344 	movw	r3, #1092	; 0x444
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d107      	bne.n	8006d70 <HAL_TIM_PWM_Stop_IT+0xec>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d6e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6a1a      	ldr	r2, [r3, #32]
 8006d76:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10f      	bne.n	8006da0 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6a1a      	ldr	r2, [r3, #32]
 8006d86:	f240 4344 	movw	r3, #1092	; 0x444
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d107      	bne.n	8006da0 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 0201 	bic.w	r2, r2, #1
 8006d9e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d104      	bne.n	8006db0 <HAL_TIM_PWM_Stop_IT+0x12c>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dae:	e013      	b.n	8006dd8 <HAL_TIM_PWM_Stop_IT+0x154>
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	d104      	bne.n	8006dc0 <HAL_TIM_PWM_Stop_IT+0x13c>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dbe:	e00b      	b.n	8006dd8 <HAL_TIM_PWM_Stop_IT+0x154>
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2b08      	cmp	r3, #8
 8006dc4:	d104      	bne.n	8006dd0 <HAL_TIM_PWM_Stop_IT+0x14c>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dce:	e003      	b.n	8006dd8 <HAL_TIM_PWM_Stop_IT+0x154>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	40010000 	.word	0x40010000

08006de8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e04c      	b.n	8006e94 <HAL_TIM_IC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d111      	bne.n	8006e2a <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f001 f93a 	bl	8008088 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d102      	bne.n	8006e22 <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a1f      	ldr	r2, [pc, #124]	; (8006e9c <HAL_TIM_IC_Init+0xb4>)
 8006e20:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2202      	movs	r2, #2
 8006e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	3304      	adds	r3, #4
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	f000 fd39 	bl	80078b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	08006ea1 	.word	0x08006ea1

08006ea0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d104      	bne.n	8006ed2 <HAL_TIM_IC_Start_IT+0x1e>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	e013      	b.n	8006efa <HAL_TIM_IC_Start_IT+0x46>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d104      	bne.n	8006ee2 <HAL_TIM_IC_Start_IT+0x2e>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	e00b      	b.n	8006efa <HAL_TIM_IC_Start_IT+0x46>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d104      	bne.n	8006ef2 <HAL_TIM_IC_Start_IT+0x3e>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	e003      	b.n	8006efa <HAL_TIM_IC_Start_IT+0x46>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d104      	bne.n	8006f0c <HAL_TIM_IC_Start_IT+0x58>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	e013      	b.n	8006f34 <HAL_TIM_IC_Start_IT+0x80>
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d104      	bne.n	8006f1c <HAL_TIM_IC_Start_IT+0x68>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	e00b      	b.n	8006f34 <HAL_TIM_IC_Start_IT+0x80>
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	2b08      	cmp	r3, #8
 8006f20:	d104      	bne.n	8006f2c <HAL_TIM_IC_Start_IT+0x78>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	e003      	b.n	8006f34 <HAL_TIM_IC_Start_IT+0x80>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f36:	7bbb      	ldrb	r3, [r7, #14]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d102      	bne.n	8006f42 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f3c:	7b7b      	ldrb	r3, [r7, #13]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d001      	beq.n	8006f46 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e0c2      	b.n	80070cc <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d104      	bne.n	8006f56 <HAL_TIM_IC_Start_IT+0xa2>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f54:	e013      	b.n	8006f7e <HAL_TIM_IC_Start_IT+0xca>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b04      	cmp	r3, #4
 8006f5a:	d104      	bne.n	8006f66 <HAL_TIM_IC_Start_IT+0xb2>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f64:	e00b      	b.n	8006f7e <HAL_TIM_IC_Start_IT+0xca>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b08      	cmp	r3, #8
 8006f6a:	d104      	bne.n	8006f76 <HAL_TIM_IC_Start_IT+0xc2>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f74:	e003      	b.n	8006f7e <HAL_TIM_IC_Start_IT+0xca>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2202      	movs	r2, #2
 8006f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d104      	bne.n	8006f8e <HAL_TIM_IC_Start_IT+0xda>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f8c:	e013      	b.n	8006fb6 <HAL_TIM_IC_Start_IT+0x102>
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2b04      	cmp	r3, #4
 8006f92:	d104      	bne.n	8006f9e <HAL_TIM_IC_Start_IT+0xea>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f9c:	e00b      	b.n	8006fb6 <HAL_TIM_IC_Start_IT+0x102>
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d104      	bne.n	8006fae <HAL_TIM_IC_Start_IT+0xfa>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fac:	e003      	b.n	8006fb6 <HAL_TIM_IC_Start_IT+0x102>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b0c      	cmp	r3, #12
 8006fba:	d841      	bhi.n	8007040 <HAL_TIM_IC_Start_IT+0x18c>
 8006fbc:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <HAL_TIM_IC_Start_IT+0x110>)
 8006fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc2:	bf00      	nop
 8006fc4:	08006ff9 	.word	0x08006ff9
 8006fc8:	08007041 	.word	0x08007041
 8006fcc:	08007041 	.word	0x08007041
 8006fd0:	08007041 	.word	0x08007041
 8006fd4:	0800700b 	.word	0x0800700b
 8006fd8:	08007041 	.word	0x08007041
 8006fdc:	08007041 	.word	0x08007041
 8006fe0:	08007041 	.word	0x08007041
 8006fe4:	0800701d 	.word	0x0800701d
 8006fe8:	08007041 	.word	0x08007041
 8006fec:	08007041 	.word	0x08007041
 8006ff0:	08007041 	.word	0x08007041
 8006ff4:	0800702f 	.word	0x0800702f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68da      	ldr	r2, [r3, #12]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0202 	orr.w	r2, r2, #2
 8007006:	60da      	str	r2, [r3, #12]
      break;
 8007008:	e01d      	b.n	8007046 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68da      	ldr	r2, [r3, #12]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f042 0204 	orr.w	r2, r2, #4
 8007018:	60da      	str	r2, [r3, #12]
      break;
 800701a:	e014      	b.n	8007046 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f042 0208 	orr.w	r2, r2, #8
 800702a:	60da      	str	r2, [r3, #12]
      break;
 800702c:	e00b      	b.n	8007046 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f042 0210 	orr.w	r2, r2, #16
 800703c:	60da      	str	r2, [r3, #12]
      break;
 800703e:	e002      	b.n	8007046 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	73fb      	strb	r3, [r7, #15]
      break;
 8007044:	bf00      	nop
  }

  if (status == HAL_OK)
 8007046:	7bfb      	ldrb	r3, [r7, #15]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d13e      	bne.n	80070ca <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2201      	movs	r2, #1
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	4618      	mov	r0, r3
 8007056:	f000 fff1 	bl	800803c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a1d      	ldr	r2, [pc, #116]	; (80070d4 <HAL_TIM_IC_Start_IT+0x220>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d018      	beq.n	8007096 <HAL_TIM_IC_Start_IT+0x1e2>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800706c:	d013      	beq.n	8007096 <HAL_TIM_IC_Start_IT+0x1e2>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a19      	ldr	r2, [pc, #100]	; (80070d8 <HAL_TIM_IC_Start_IT+0x224>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d00e      	beq.n	8007096 <HAL_TIM_IC_Start_IT+0x1e2>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a17      	ldr	r2, [pc, #92]	; (80070dc <HAL_TIM_IC_Start_IT+0x228>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d009      	beq.n	8007096 <HAL_TIM_IC_Start_IT+0x1e2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a16      	ldr	r2, [pc, #88]	; (80070e0 <HAL_TIM_IC_Start_IT+0x22c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d004      	beq.n	8007096 <HAL_TIM_IC_Start_IT+0x1e2>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a14      	ldr	r2, [pc, #80]	; (80070e4 <HAL_TIM_IC_Start_IT+0x230>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d111      	bne.n	80070ba <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2b06      	cmp	r3, #6
 80070a6:	d010      	beq.n	80070ca <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0201 	orr.w	r2, r2, #1
 80070b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b8:	e007      	b.n	80070ca <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f042 0201 	orr.w	r2, r2, #1
 80070c8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	40010000 	.word	0x40010000
 80070d8:	40000400 	.word	0x40000400
 80070dc:	40000800 	.word	0x40000800
 80070e0:	40000c00 	.word	0x40000c00
 80070e4:	40014000 	.word	0x40014000

080070e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d128      	bne.n	8007150 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b02      	cmp	r3, #2
 800710a:	d121      	bne.n	8007150 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f06f 0202 	mvn.w	r2, #2
 8007114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	f003 0303 	and.w	r3, r3, #3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d005      	beq.n	8007136 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	4798      	blx	r3
 8007134:	e009      	b.n	800714a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	f003 0304 	and.w	r3, r3, #4
 800715a:	2b04      	cmp	r3, #4
 800715c:	d128      	bne.n	80071b0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b04      	cmp	r3, #4
 800716a:	d121      	bne.n	80071b0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f06f 0204 	mvn.w	r2, #4
 8007174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2202      	movs	r2, #2
 800717a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007186:	2b00      	cmp	r3, #0
 8007188:	d005      	beq.n	8007196 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	4798      	blx	r3
 8007194:	e009      	b.n	80071aa <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	f003 0308 	and.w	r3, r3, #8
 80071ba:	2b08      	cmp	r3, #8
 80071bc:	d128      	bne.n	8007210 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	f003 0308 	and.w	r3, r3, #8
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	d121      	bne.n	8007210 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f06f 0208 	mvn.w	r2, #8
 80071d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2204      	movs	r2, #4
 80071da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	f003 0303 	and.w	r3, r3, #3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	4798      	blx	r3
 80071f4:	e009      	b.n	800720a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0310 	and.w	r3, r3, #16
 800721a:	2b10      	cmp	r3, #16
 800721c:	d128      	bne.n	8007270 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f003 0310 	and.w	r3, r3, #16
 8007228:	2b10      	cmp	r3, #16
 800722a:	d121      	bne.n	8007270 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f06f 0210 	mvn.w	r2, #16
 8007234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2208      	movs	r2, #8
 800723a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007246:	2b00      	cmp	r3, #0
 8007248:	d005      	beq.n	8007256 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	4798      	blx	r3
 8007254:	e009      	b.n	800726a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b01      	cmp	r3, #1
 800727c:	d110      	bne.n	80072a0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	f003 0301 	and.w	r3, r3, #1
 8007288:	2b01      	cmp	r3, #1
 800728a:	d109      	bne.n	80072a0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f06f 0201 	mvn.w	r2, #1
 8007294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072aa:	2b80      	cmp	r3, #128	; 0x80
 80072ac:	d110      	bne.n	80072d0 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b8:	2b80      	cmp	r3, #128	; 0x80
 80072ba:	d109      	bne.n	80072d0 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072da:	2b40      	cmp	r3, #64	; 0x40
 80072dc:	d110      	bne.n	8007300 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e8:	2b40      	cmp	r3, #64	; 0x40
 80072ea:	d109      	bne.n	8007300 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	f003 0320 	and.w	r3, r3, #32
 800730a:	2b20      	cmp	r3, #32
 800730c:	d110      	bne.n	8007330 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	f003 0320 	and.w	r3, r3, #32
 8007318:	2b20      	cmp	r3, #32
 800731a:	d109      	bne.n	8007330 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f06f 0220 	mvn.w	r2, #32
 8007324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007330:	bf00      	nop
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007344:	2300      	movs	r3, #0
 8007346:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800734e:	2b01      	cmp	r3, #1
 8007350:	d101      	bne.n	8007356 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007352:	2302      	movs	r3, #2
 8007354:	e088      	b.n	8007468 <HAL_TIM_IC_ConfigChannel+0x130>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d11b      	bne.n	800739c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6818      	ldr	r0, [r3, #0]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	6819      	ldr	r1, [r3, #0]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	f000 fcaa 	bl	8007ccc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	699a      	ldr	r2, [r3, #24]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f022 020c 	bic.w	r2, r2, #12
 8007386:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6999      	ldr	r1, [r3, #24]
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	619a      	str	r2, [r3, #24]
 800739a:	e060      	b.n	800745e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b04      	cmp	r3, #4
 80073a0:	d11c      	bne.n	80073dc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6818      	ldr	r0, [r3, #0]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	6819      	ldr	r1, [r3, #0]
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	f000 fd22 	bl	8007dfa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	699a      	ldr	r2, [r3, #24]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80073c4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6999      	ldr	r1, [r3, #24]
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	021a      	lsls	r2, r3, #8
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	619a      	str	r2, [r3, #24]
 80073da:	e040      	b.n	800745e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b08      	cmp	r3, #8
 80073e0:	d11b      	bne.n	800741a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6818      	ldr	r0, [r3, #0]
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	6819      	ldr	r1, [r3, #0]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	685a      	ldr	r2, [r3, #4]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f000 fd6f 	bl	8007ed4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69da      	ldr	r2, [r3, #28]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 020c 	bic.w	r2, r2, #12
 8007404:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69d9      	ldr	r1, [r3, #28]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	61da      	str	r2, [r3, #28]
 8007418:	e021      	b.n	800745e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b0c      	cmp	r3, #12
 800741e:	d11c      	bne.n	800745a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6818      	ldr	r0, [r3, #0]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	6819      	ldr	r1, [r3, #0]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f000 fd8c 	bl	8007f4c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	69da      	ldr	r2, [r3, #28]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007442:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	69d9      	ldr	r1, [r3, #28]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	021a      	lsls	r2, r3, #8
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	430a      	orrs	r2, r1
 8007456:	61da      	str	r2, [r3, #28]
 8007458:	e001      	b.n	800745e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007466:	7dfb      	ldrb	r3, [r7, #23]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800747c:	2300      	movs	r3, #0
 800747e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800748a:	2302      	movs	r3, #2
 800748c:	e0ae      	b.n	80075ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b0c      	cmp	r3, #12
 800749a:	f200 809f 	bhi.w	80075dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800749e:	a201      	add	r2, pc, #4	; (adr r2, 80074a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a4:	080074d9 	.word	0x080074d9
 80074a8:	080075dd 	.word	0x080075dd
 80074ac:	080075dd 	.word	0x080075dd
 80074b0:	080075dd 	.word	0x080075dd
 80074b4:	08007519 	.word	0x08007519
 80074b8:	080075dd 	.word	0x080075dd
 80074bc:	080075dd 	.word	0x080075dd
 80074c0:	080075dd 	.word	0x080075dd
 80074c4:	0800755b 	.word	0x0800755b
 80074c8:	080075dd 	.word	0x080075dd
 80074cc:	080075dd 	.word	0x080075dd
 80074d0:	080075dd 	.word	0x080075dd
 80074d4:	0800759b 	.word	0x0800759b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68b9      	ldr	r1, [r7, #8]
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fa68 	bl	80079b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	699a      	ldr	r2, [r3, #24]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f042 0208 	orr.w	r2, r2, #8
 80074f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	699a      	ldr	r2, [r3, #24]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 0204 	bic.w	r2, r2, #4
 8007502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6999      	ldr	r1, [r3, #24]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	691a      	ldr	r2, [r3, #16]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	619a      	str	r2, [r3, #24]
      break;
 8007516:	e064      	b.n	80075e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68b9      	ldr	r1, [r7, #8]
 800751e:	4618      	mov	r0, r3
 8007520:	f000 faae 	bl	8007a80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	699a      	ldr	r2, [r3, #24]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	699a      	ldr	r2, [r3, #24]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6999      	ldr	r1, [r3, #24]
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	021a      	lsls	r2, r3, #8
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	430a      	orrs	r2, r1
 8007556:	619a      	str	r2, [r3, #24]
      break;
 8007558:	e043      	b.n	80075e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68b9      	ldr	r1, [r7, #8]
 8007560:	4618      	mov	r0, r3
 8007562:	f000 faf9 	bl	8007b58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	69da      	ldr	r2, [r3, #28]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f042 0208 	orr.w	r2, r2, #8
 8007574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	69da      	ldr	r2, [r3, #28]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0204 	bic.w	r2, r2, #4
 8007584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	69d9      	ldr	r1, [r3, #28]
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	691a      	ldr	r2, [r3, #16]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	61da      	str	r2, [r3, #28]
      break;
 8007598:	e023      	b.n	80075e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68b9      	ldr	r1, [r7, #8]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 fb43 	bl	8007c2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	69da      	ldr	r2, [r3, #28]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	69da      	ldr	r2, [r3, #28]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	69d9      	ldr	r1, [r3, #28]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	021a      	lsls	r2, r3, #8
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	61da      	str	r2, [r3, #28]
      break;
 80075da:	e002      	b.n	80075e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	75fb      	strb	r3, [r7, #23]
      break;
 80075e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007608:	2b01      	cmp	r3, #1
 800760a:	d101      	bne.n	8007610 <HAL_TIM_ConfigClockSource+0x1c>
 800760c:	2302      	movs	r3, #2
 800760e:	e0b4      	b.n	800777a <HAL_TIM_ConfigClockSource+0x186>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2202      	movs	r2, #2
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800762e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007636:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007648:	d03e      	beq.n	80076c8 <HAL_TIM_ConfigClockSource+0xd4>
 800764a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800764e:	f200 8087 	bhi.w	8007760 <HAL_TIM_ConfigClockSource+0x16c>
 8007652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007656:	f000 8086 	beq.w	8007766 <HAL_TIM_ConfigClockSource+0x172>
 800765a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800765e:	d87f      	bhi.n	8007760 <HAL_TIM_ConfigClockSource+0x16c>
 8007660:	2b70      	cmp	r3, #112	; 0x70
 8007662:	d01a      	beq.n	800769a <HAL_TIM_ConfigClockSource+0xa6>
 8007664:	2b70      	cmp	r3, #112	; 0x70
 8007666:	d87b      	bhi.n	8007760 <HAL_TIM_ConfigClockSource+0x16c>
 8007668:	2b60      	cmp	r3, #96	; 0x60
 800766a:	d050      	beq.n	800770e <HAL_TIM_ConfigClockSource+0x11a>
 800766c:	2b60      	cmp	r3, #96	; 0x60
 800766e:	d877      	bhi.n	8007760 <HAL_TIM_ConfigClockSource+0x16c>
 8007670:	2b50      	cmp	r3, #80	; 0x50
 8007672:	d03c      	beq.n	80076ee <HAL_TIM_ConfigClockSource+0xfa>
 8007674:	2b50      	cmp	r3, #80	; 0x50
 8007676:	d873      	bhi.n	8007760 <HAL_TIM_ConfigClockSource+0x16c>
 8007678:	2b40      	cmp	r3, #64	; 0x40
 800767a:	d058      	beq.n	800772e <HAL_TIM_ConfigClockSource+0x13a>
 800767c:	2b40      	cmp	r3, #64	; 0x40
 800767e:	d86f      	bhi.n	8007760 <HAL_TIM_ConfigClockSource+0x16c>
 8007680:	2b30      	cmp	r3, #48	; 0x30
 8007682:	d064      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x15a>
 8007684:	2b30      	cmp	r3, #48	; 0x30
 8007686:	d86b      	bhi.n	8007760 <HAL_TIM_ConfigClockSource+0x16c>
 8007688:	2b20      	cmp	r3, #32
 800768a:	d060      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x15a>
 800768c:	2b20      	cmp	r3, #32
 800768e:	d867      	bhi.n	8007760 <HAL_TIM_ConfigClockSource+0x16c>
 8007690:	2b00      	cmp	r3, #0
 8007692:	d05c      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x15a>
 8007694:	2b10      	cmp	r3, #16
 8007696:	d05a      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x15a>
 8007698:	e062      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6818      	ldr	r0, [r3, #0]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	6899      	ldr	r1, [r3, #8]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	685a      	ldr	r2, [r3, #4]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	f000 fca7 	bl	8007ffc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	609a      	str	r2, [r3, #8]
      break;
 80076c6:	e04f      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6818      	ldr	r0, [r3, #0]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	6899      	ldr	r1, [r3, #8]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f000 fc90 	bl	8007ffc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689a      	ldr	r2, [r3, #8]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076ea:	609a      	str	r2, [r3, #8]
      break;
 80076ec:	e03c      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6818      	ldr	r0, [r3, #0]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	6859      	ldr	r1, [r3, #4]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	461a      	mov	r2, r3
 80076fc:	f000 fb4e 	bl	8007d9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2150      	movs	r1, #80	; 0x50
 8007706:	4618      	mov	r0, r3
 8007708:	f000 fc5d 	bl	8007fc6 <TIM_ITRx_SetConfig>
      break;
 800770c:	e02c      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6818      	ldr	r0, [r3, #0]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	6859      	ldr	r1, [r3, #4]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	461a      	mov	r2, r3
 800771c:	f000 fbaa 	bl	8007e74 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2160      	movs	r1, #96	; 0x60
 8007726:	4618      	mov	r0, r3
 8007728:	f000 fc4d 	bl	8007fc6 <TIM_ITRx_SetConfig>
      break;
 800772c:	e01c      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6818      	ldr	r0, [r3, #0]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	6859      	ldr	r1, [r3, #4]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	461a      	mov	r2, r3
 800773c:	f000 fb2e 	bl	8007d9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2140      	movs	r1, #64	; 0x40
 8007746:	4618      	mov	r0, r3
 8007748:	f000 fc3d 	bl	8007fc6 <TIM_ITRx_SetConfig>
      break;
 800774c:	e00c      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4619      	mov	r1, r3
 8007758:	4610      	mov	r0, r2
 800775a:	f000 fc34 	bl	8007fc6 <TIM_ITRx_SetConfig>
      break;
 800775e:	e003      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	73fb      	strb	r3, [r7, #15]
      break;
 8007764:	e000      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007766:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007778:	7bfb      	ldrb	r3, [r7, #15]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
	...

08007784 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800778e:	2300      	movs	r3, #0
 8007790:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b0c      	cmp	r3, #12
 8007796:	d831      	bhi.n	80077fc <HAL_TIM_ReadCapturedValue+0x78>
 8007798:	a201      	add	r2, pc, #4	; (adr r2, 80077a0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800779a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779e:	bf00      	nop
 80077a0:	080077d5 	.word	0x080077d5
 80077a4:	080077fd 	.word	0x080077fd
 80077a8:	080077fd 	.word	0x080077fd
 80077ac:	080077fd 	.word	0x080077fd
 80077b0:	080077df 	.word	0x080077df
 80077b4:	080077fd 	.word	0x080077fd
 80077b8:	080077fd 	.word	0x080077fd
 80077bc:	080077fd 	.word	0x080077fd
 80077c0:	080077e9 	.word	0x080077e9
 80077c4:	080077fd 	.word	0x080077fd
 80077c8:	080077fd 	.word	0x080077fd
 80077cc:	080077fd 	.word	0x080077fd
 80077d0:	080077f3 	.word	0x080077f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077da:	60fb      	str	r3, [r7, #12]

      break;
 80077dc:	e00f      	b.n	80077fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e4:	60fb      	str	r3, [r7, #12]

      break;
 80077e6:	e00a      	b.n	80077fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ee:	60fb      	str	r3, [r7, #12]

      break;
 80077f0:	e005      	b.n	80077fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f8:	60fb      	str	r3, [r7, #12]

      break;
 80077fa:	e000      	b.n	80077fe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80077fc:	bf00      	nop
  }

  return tmpreg;
 80077fe:	68fb      	ldr	r3, [r7, #12]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  return htim->State;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078a6:	b2db      	uxtb	r3, r3
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a34      	ldr	r2, [pc, #208]	; (8007998 <TIM_Base_SetConfig+0xe4>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d00f      	beq.n	80078ec <TIM_Base_SetConfig+0x38>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d2:	d00b      	beq.n	80078ec <TIM_Base_SetConfig+0x38>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a31      	ldr	r2, [pc, #196]	; (800799c <TIM_Base_SetConfig+0xe8>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d007      	beq.n	80078ec <TIM_Base_SetConfig+0x38>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a30      	ldr	r2, [pc, #192]	; (80079a0 <TIM_Base_SetConfig+0xec>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d003      	beq.n	80078ec <TIM_Base_SetConfig+0x38>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a2f      	ldr	r2, [pc, #188]	; (80079a4 <TIM_Base_SetConfig+0xf0>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d108      	bne.n	80078fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a25      	ldr	r2, [pc, #148]	; (8007998 <TIM_Base_SetConfig+0xe4>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d01b      	beq.n	800793e <TIM_Base_SetConfig+0x8a>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800790c:	d017      	beq.n	800793e <TIM_Base_SetConfig+0x8a>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a22      	ldr	r2, [pc, #136]	; (800799c <TIM_Base_SetConfig+0xe8>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d013      	beq.n	800793e <TIM_Base_SetConfig+0x8a>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a21      	ldr	r2, [pc, #132]	; (80079a0 <TIM_Base_SetConfig+0xec>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d00f      	beq.n	800793e <TIM_Base_SetConfig+0x8a>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a20      	ldr	r2, [pc, #128]	; (80079a4 <TIM_Base_SetConfig+0xf0>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d00b      	beq.n	800793e <TIM_Base_SetConfig+0x8a>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a1f      	ldr	r2, [pc, #124]	; (80079a8 <TIM_Base_SetConfig+0xf4>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d007      	beq.n	800793e <TIM_Base_SetConfig+0x8a>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a1e      	ldr	r2, [pc, #120]	; (80079ac <TIM_Base_SetConfig+0xf8>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d003      	beq.n	800793e <TIM_Base_SetConfig+0x8a>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a1d      	ldr	r2, [pc, #116]	; (80079b0 <TIM_Base_SetConfig+0xfc>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d108      	bne.n	8007950 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	4313      	orrs	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	4313      	orrs	r3, r2
 800795c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	689a      	ldr	r2, [r3, #8]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a08      	ldr	r2, [pc, #32]	; (8007998 <TIM_Base_SetConfig+0xe4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d103      	bne.n	8007984 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	691a      	ldr	r2, [r3, #16]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	615a      	str	r2, [r3, #20]
}
 800798a:	bf00      	nop
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	40010000 	.word	0x40010000
 800799c:	40000400 	.word	0x40000400
 80079a0:	40000800 	.word	0x40000800
 80079a4:	40000c00 	.word	0x40000c00
 80079a8:	40014000 	.word	0x40014000
 80079ac:	40014400 	.word	0x40014400
 80079b0:	40014800 	.word	0x40014800

080079b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	f023 0201 	bic.w	r2, r3, #1
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f023 0303 	bic.w	r3, r3, #3
 80079ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f023 0302 	bic.w	r3, r3, #2
 80079fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a1c      	ldr	r2, [pc, #112]	; (8007a7c <TIM_OC1_SetConfig+0xc8>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d10c      	bne.n	8007a2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f023 0308 	bic.w	r3, r3, #8
 8007a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f023 0304 	bic.w	r3, r3, #4
 8007a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a13      	ldr	r2, [pc, #76]	; (8007a7c <TIM_OC1_SetConfig+0xc8>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d111      	bne.n	8007a56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	621a      	str	r2, [r3, #32]
}
 8007a70:	bf00      	nop
 8007a72:	371c      	adds	r7, #28
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	40010000 	.word	0x40010000

08007a80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	f023 0210 	bic.w	r2, r3, #16
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	021b      	lsls	r3, r3, #8
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	f023 0320 	bic.w	r3, r3, #32
 8007aca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	011b      	lsls	r3, r3, #4
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a1e      	ldr	r2, [pc, #120]	; (8007b54 <TIM_OC2_SetConfig+0xd4>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d10d      	bne.n	8007afc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	011b      	lsls	r3, r3, #4
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007afa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a15      	ldr	r2, [pc, #84]	; (8007b54 <TIM_OC2_SetConfig+0xd4>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d113      	bne.n	8007b2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	693a      	ldr	r2, [r7, #16]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	621a      	str	r2, [r3, #32]
}
 8007b46:	bf00      	nop
 8007b48:	371c      	adds	r7, #28
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	40010000 	.word	0x40010000

08007b58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	69db      	ldr	r3, [r3, #28]
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f023 0303 	bic.w	r3, r3, #3
 8007b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	021b      	lsls	r3, r3, #8
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a1d      	ldr	r2, [pc, #116]	; (8007c28 <TIM_OC3_SetConfig+0xd0>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d10d      	bne.n	8007bd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	021b      	lsls	r3, r3, #8
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a14      	ldr	r2, [pc, #80]	; (8007c28 <TIM_OC3_SetConfig+0xd0>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d113      	bne.n	8007c02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	011b      	lsls	r3, r3, #4
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	011b      	lsls	r3, r3, #4
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	621a      	str	r2, [r3, #32]
}
 8007c1c:	bf00      	nop
 8007c1e:	371c      	adds	r7, #28
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	40010000 	.word	0x40010000

08007c2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b087      	sub	sp, #28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	021b      	lsls	r3, r3, #8
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	031b      	lsls	r3, r3, #12
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a10      	ldr	r2, [pc, #64]	; (8007cc8 <TIM_OC4_SetConfig+0x9c>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d109      	bne.n	8007ca0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	019b      	lsls	r3, r3, #6
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685a      	ldr	r2, [r3, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	621a      	str	r2, [r3, #32]
}
 8007cba:	bf00      	nop
 8007cbc:	371c      	adds	r7, #28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	40010000 	.word	0x40010000

08007ccc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b087      	sub	sp, #28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	f023 0201 	bic.w	r2, r3, #1
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6a1b      	ldr	r3, [r3, #32]
 8007cf0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	4a24      	ldr	r2, [pc, #144]	; (8007d88 <TIM_TI1_SetConfig+0xbc>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d013      	beq.n	8007d22 <TIM_TI1_SetConfig+0x56>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d00:	d00f      	beq.n	8007d22 <TIM_TI1_SetConfig+0x56>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	4a21      	ldr	r2, [pc, #132]	; (8007d8c <TIM_TI1_SetConfig+0xc0>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d00b      	beq.n	8007d22 <TIM_TI1_SetConfig+0x56>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	4a20      	ldr	r2, [pc, #128]	; (8007d90 <TIM_TI1_SetConfig+0xc4>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d007      	beq.n	8007d22 <TIM_TI1_SetConfig+0x56>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	4a1f      	ldr	r2, [pc, #124]	; (8007d94 <TIM_TI1_SetConfig+0xc8>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d003      	beq.n	8007d22 <TIM_TI1_SetConfig+0x56>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	4a1e      	ldr	r2, [pc, #120]	; (8007d98 <TIM_TI1_SetConfig+0xcc>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d101      	bne.n	8007d26 <TIM_TI1_SetConfig+0x5a>
 8007d22:	2301      	movs	r3, #1
 8007d24:	e000      	b.n	8007d28 <TIM_TI1_SetConfig+0x5c>
 8007d26:	2300      	movs	r3, #0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d008      	beq.n	8007d3e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	f023 0303 	bic.w	r3, r3, #3
 8007d32:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	617b      	str	r3, [r7, #20]
 8007d3c:	e003      	b.n	8007d46 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	f043 0301 	orr.w	r3, r3, #1
 8007d44:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	011b      	lsls	r3, r3, #4
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	f023 030a 	bic.w	r3, r3, #10
 8007d60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	f003 030a 	and.w	r3, r3, #10
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	621a      	str	r2, [r3, #32]
}
 8007d7a:	bf00      	nop
 8007d7c:	371c      	adds	r7, #28
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	40010000 	.word	0x40010000
 8007d8c:	40000400 	.word	0x40000400
 8007d90:	40000800 	.word	0x40000800
 8007d94:	40000c00 	.word	0x40000c00
 8007d98:	40014000 	.word	0x40014000

08007d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	f023 0201 	bic.w	r2, r3, #1
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	011b      	lsls	r3, r3, #4
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f023 030a 	bic.w	r3, r3, #10
 8007dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	621a      	str	r2, [r3, #32]
}
 8007dee:	bf00      	nop
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b087      	sub	sp, #28
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	607a      	str	r2, [r7, #4]
 8007e06:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
 8007e0c:	f023 0210 	bic.w	r2, r3, #16
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	021b      	lsls	r3, r3, #8
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	031b      	lsls	r3, r3, #12
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	011b      	lsls	r3, r3, #4
 8007e52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	621a      	str	r2, [r3, #32]
}
 8007e68:	bf00      	nop
 8007e6a:	371c      	adds	r7, #28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6a1b      	ldr	r3, [r3, #32]
 8007e84:	f023 0210 	bic.w	r2, r3, #16
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	031b      	lsls	r3, r3, #12
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007eb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	011b      	lsls	r3, r3, #4
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	621a      	str	r2, [r3, #32]
}
 8007ec8:	bf00      	nop
 8007eca:	371c      	adds	r7, #28
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f023 0303 	bic.w	r3, r3, #3
 8007f00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	011b      	lsls	r3, r3, #4
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007f24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	021b      	lsls	r3, r3, #8
 8007f2a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	621a      	str	r2, [r3, #32]
}
 8007f40:	bf00      	nop
 8007f42:	371c      	adds	r7, #28
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
 8007f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	69db      	ldr	r3, [r3, #28]
 8007f6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6a1b      	ldr	r3, [r3, #32]
 8007f70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	021b      	lsls	r3, r3, #8
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	031b      	lsls	r3, r3, #12
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007f9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	031b      	lsls	r3, r3, #12
 8007fa4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	621a      	str	r2, [r3, #32]
}
 8007fba:	bf00      	nop
 8007fbc:	371c      	adds	r7, #28
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b085      	sub	sp, #20
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	f043 0307 	orr.w	r3, r3, #7
 8007fe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	609a      	str	r2, [r3, #8]
}
 8007ff0:	bf00      	nop
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
 8008008:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008016:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	021a      	lsls	r2, r3, #8
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	431a      	orrs	r2, r3
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	4313      	orrs	r3, r2
 8008024:	697a      	ldr	r2, [r7, #20]
 8008026:	4313      	orrs	r3, r2
 8008028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	609a      	str	r2, [r3, #8]
}
 8008030:	bf00      	nop
 8008032:	371c      	adds	r7, #28
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	f003 031f 	and.w	r3, r3, #31
 800804e:	2201      	movs	r2, #1
 8008050:	fa02 f303 	lsl.w	r3, r2, r3
 8008054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6a1a      	ldr	r2, [r3, #32]
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	43db      	mvns	r3, r3
 800805e:	401a      	ands	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6a1a      	ldr	r2, [r3, #32]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f003 031f 	and.w	r3, r3, #31
 800806e:	6879      	ldr	r1, [r7, #4]
 8008070:	fa01 f303 	lsl.w	r3, r1, r3
 8008074:	431a      	orrs	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	621a      	str	r2, [r3, #32]
}
 800807a:	bf00      	nop
 800807c:	371c      	adds	r7, #28
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
	...

08008088 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a1c      	ldr	r2, [pc, #112]	; (8008104 <TIM_ResetCallback+0x7c>)
 8008094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a1b      	ldr	r2, [pc, #108]	; (8008108 <TIM_ResetCallback+0x80>)
 800809c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a1a      	ldr	r2, [pc, #104]	; (800810c <TIM_ResetCallback+0x84>)
 80080a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a19      	ldr	r2, [pc, #100]	; (8008110 <TIM_ResetCallback+0x88>)
 80080ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a18      	ldr	r2, [pc, #96]	; (8008114 <TIM_ResetCallback+0x8c>)
 80080b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a17      	ldr	r2, [pc, #92]	; (8008118 <TIM_ResetCallback+0x90>)
 80080bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a16      	ldr	r2, [pc, #88]	; (800811c <TIM_ResetCallback+0x94>)
 80080c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a15      	ldr	r2, [pc, #84]	; (8008120 <TIM_ResetCallback+0x98>)
 80080cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a14      	ldr	r2, [pc, #80]	; (8008124 <TIM_ResetCallback+0x9c>)
 80080d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a13      	ldr	r2, [pc, #76]	; (8008128 <TIM_ResetCallback+0xa0>)
 80080dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a12      	ldr	r2, [pc, #72]	; (800812c <TIM_ResetCallback+0xa4>)
 80080e4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a11      	ldr	r2, [pc, #68]	; (8008130 <TIM_ResetCallback+0xa8>)
 80080ec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a10      	ldr	r2, [pc, #64]	; (8008134 <TIM_ResetCallback+0xac>)
 80080f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	0800a091 	.word	0x0800a091
 8008108:	0800780d 	.word	0x0800780d
 800810c:	08007871 	.word	0x08007871
 8008110:	08007885 	.word	0x08007885
 8008114:	08009691 	.word	0x08009691
 8008118:	08007835 	.word	0x08007835
 800811c:	08007821 	.word	0x08007821
 8008120:	08007849 	.word	0x08007849
 8008124:	0800785d 	.word	0x0800785d
 8008128:	08009d91 	.word	0x08009d91
 800812c:	08008215 	.word	0x08008215
 8008130:	08008229 	.word	0x08008229
 8008134:	0800823d 	.word	0x0800823d

08008138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008148:	2b01      	cmp	r3, #1
 800814a:	d101      	bne.n	8008150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800814c:	2302      	movs	r3, #2
 800814e:	e050      	b.n	80081f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2202      	movs	r2, #2
 800815c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	4313      	orrs	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a1c      	ldr	r2, [pc, #112]	; (8008200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d018      	beq.n	80081c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800819c:	d013      	beq.n	80081c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a18      	ldr	r2, [pc, #96]	; (8008204 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d00e      	beq.n	80081c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a16      	ldr	r2, [pc, #88]	; (8008208 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d009      	beq.n	80081c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a15      	ldr	r2, [pc, #84]	; (800820c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d004      	beq.n	80081c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a13      	ldr	r2, [pc, #76]	; (8008210 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d10c      	bne.n	80081e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3714      	adds	r7, #20
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	40010000 	.word	0x40010000
 8008204:	40000400 	.word	0x40000400
 8008208:	40000800 	.word	0x40000800
 800820c:	40000c00 	.word	0x40000c00
 8008210:	40014000 	.word	0x40014000

08008214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e04a      	b.n	80082f8 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d111      	bne.n	8008292 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fbf8 	bl	8008a6c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008280:	2b00      	cmp	r3, #0
 8008282:	d102      	bne.n	800828a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a1e      	ldr	r2, [pc, #120]	; (8008300 <HAL_UART_Init+0xb0>)
 8008288:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2224      	movs	r2, #36	; 0x24
 8008296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68da      	ldr	r2, [r3, #12]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082a8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fdf2 	bl	8008e94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	691a      	ldr	r2, [r3, #16]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	695a      	ldr	r2, [r3, #20]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082ce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68da      	ldr	r2, [r3, #12]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082de:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2220      	movs	r2, #32
 80082ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2220      	movs	r2, #32
 80082f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	080038f9 	.word	0x080038f9

08008304 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e029      	b.n	800836a <HAL_UART_DeInit+0x66>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2224      	movs	r2, #36	; 0x24
 800831a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68da      	ldr	r2, [r3, #12]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800832c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  if (huart->MspDeInitCallback == NULL)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008332:	2b00      	cmp	r3, #0
 8008334:	d102      	bne.n	800833c <HAL_UART_DeInit+0x38>
  {
    huart->MspDeInitCallback = HAL_UART_MspDeInit;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a0e      	ldr	r2, [pc, #56]	; (8008374 <HAL_UART_DeInit+0x70>)
 800833a:	671a      	str	r2, [r3, #112]	; 0x70
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	4798      	blx	r3
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	08003989 	.word	0x08003989

08008378 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	4613      	mov	r3, r2
 8008384:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b20      	cmp	r3, #32
 8008390:	d130      	bne.n	80083f4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d002      	beq.n	800839e <HAL_UART_Transmit_IT+0x26>
 8008398:	88fb      	ldrh	r3, [r7, #6]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e029      	b.n	80083f6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d101      	bne.n	80083b0 <HAL_UART_Transmit_IT+0x38>
 80083ac:	2302      	movs	r3, #2
 80083ae:	e022      	b.n	80083f6 <HAL_UART_Transmit_IT+0x7e>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	88fa      	ldrh	r2, [r7, #6]
 80083c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	88fa      	ldrh	r2, [r7, #6]
 80083c8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2221      	movs	r2, #33	; 0x21
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083ee:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	e000      	b.n	80083f6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80083f4:	2302      	movs	r3, #2
  }
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	60f8      	str	r0, [r7, #12]
 800840a:	60b9      	str	r1, [r7, #8]
 800840c:	4613      	mov	r3, r2
 800840e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b20      	cmp	r3, #32
 800841a:	d11d      	bne.n	8008458 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d002      	beq.n	8008428 <HAL_UART_Receive_IT+0x26>
 8008422:	88fb      	ldrh	r3, [r7, #6]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d101      	bne.n	800842c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	e016      	b.n	800845a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008432:	2b01      	cmp	r3, #1
 8008434:	d101      	bne.n	800843a <HAL_UART_Receive_IT+0x38>
 8008436:	2302      	movs	r3, #2
 8008438:	e00f      	b.n	800845a <HAL_UART_Receive_IT+0x58>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2201      	movs	r2, #1
 800843e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008448:	88fb      	ldrh	r3, [r7, #6]
 800844a:	461a      	mov	r2, r3
 800844c:	68b9      	ldr	r1, [r7, #8]
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f000 fb44 	bl	8008adc <UART_Start_Receive_IT>
 8008454:	4603      	mov	r3, r0
 8008456:	e000      	b.n	800845a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008458:	2302      	movs	r3, #2
  }
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
	...

08008464 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b0ba      	sub	sp, #232	; 0xe8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800848a:	2300      	movs	r3, #0
 800848c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008490:	2300      	movs	r3, #0
 8008492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800849a:	f003 030f 	and.w	r3, r3, #15
 800849e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80084a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10f      	bne.n	80084ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ae:	f003 0320 	and.w	r3, r3, #32
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d009      	beq.n	80084ca <HAL_UART_IRQHandler+0x66>
 80084b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084ba:	f003 0320 	and.w	r3, r3, #32
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d003      	beq.n	80084ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fc29 	bl	8008d1a <UART_Receive_IT>
      return;
 80084c8:	e25b      	b.n	8008982 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80084ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f000 80e1 	beq.w	8008696 <HAL_UART_IRQHandler+0x232>
 80084d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084d8:	f003 0301 	and.w	r3, r3, #1
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d106      	bne.n	80084ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80084e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f000 80d4 	beq.w	8008696 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80084ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00b      	beq.n	8008512 <HAL_UART_IRQHandler+0xae>
 80084fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008502:	2b00      	cmp	r3, #0
 8008504:	d005      	beq.n	8008512 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850a:	f043 0201 	orr.w	r2, r3, #1
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008516:	f003 0304 	and.w	r3, r3, #4
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00b      	beq.n	8008536 <HAL_UART_IRQHandler+0xd2>
 800851e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008522:	f003 0301 	and.w	r3, r3, #1
 8008526:	2b00      	cmp	r3, #0
 8008528:	d005      	beq.n	8008536 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852e:	f043 0202 	orr.w	r2, r3, #2
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800853a:	f003 0302 	and.w	r3, r3, #2
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00b      	beq.n	800855a <HAL_UART_IRQHandler+0xf6>
 8008542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	2b00      	cmp	r3, #0
 800854c:	d005      	beq.n	800855a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008552:	f043 0204 	orr.w	r2, r3, #4
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800855a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800855e:	f003 0308 	and.w	r3, r3, #8
 8008562:	2b00      	cmp	r3, #0
 8008564:	d011      	beq.n	800858a <HAL_UART_IRQHandler+0x126>
 8008566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800856a:	f003 0320 	and.w	r3, r3, #32
 800856e:	2b00      	cmp	r3, #0
 8008570:	d105      	bne.n	800857e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	2b00      	cmp	r3, #0
 800857c:	d005      	beq.n	800858a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	f043 0208 	orr.w	r2, r3, #8
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	2b00      	cmp	r3, #0
 8008590:	f000 81f2 	beq.w	8008978 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008598:	f003 0320 	and.w	r3, r3, #32
 800859c:	2b00      	cmp	r3, #0
 800859e:	d008      	beq.n	80085b2 <HAL_UART_IRQHandler+0x14e>
 80085a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085a4:	f003 0320 	and.w	r3, r3, #32
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fbb4 	bl	8008d1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085bc:	2b40      	cmp	r3, #64	; 0x40
 80085be:	bf0c      	ite	eq
 80085c0:	2301      	moveq	r3, #1
 80085c2:	2300      	movne	r3, #0
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ce:	f003 0308 	and.w	r3, r3, #8
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d103      	bne.n	80085de <HAL_UART_IRQHandler+0x17a>
 80085d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d051      	beq.n	8008682 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 faba 	bl	8008b58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ee:	2b40      	cmp	r3, #64	; 0x40
 80085f0:	d142      	bne.n	8008678 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3314      	adds	r3, #20
 80085f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008600:	e853 3f00 	ldrex	r3, [r3]
 8008604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008608:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800860c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008610:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	3314      	adds	r3, #20
 800861a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800861e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800862a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800862e:	e841 2300 	strex	r3, r2, [r1]
 8008632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008636:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1d9      	bne.n	80085f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008642:	2b00      	cmp	r3, #0
 8008644:	d013      	beq.n	800866e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864a:	4a7f      	ldr	r2, [pc, #508]	; (8008848 <HAL_UART_IRQHandler+0x3e4>)
 800864c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008652:	4618      	mov	r0, r3
 8008654:	f7fc fcee 	bl	8005034 <HAL_DMA_Abort_IT>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d019      	beq.n	8008692 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008668:	4610      	mov	r0, r2
 800866a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800866c:	e011      	b.n	8008692 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008676:	e00c      	b.n	8008692 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008680:	e007      	b.n	8008692 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008690:	e172      	b.n	8008978 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008692:	bf00      	nop
    return;
 8008694:	e170      	b.n	8008978 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869a:	2b01      	cmp	r3, #1
 800869c:	f040 814c 	bne.w	8008938 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80086a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086a4:	f003 0310 	and.w	r3, r3, #16
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 8145 	beq.w	8008938 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80086ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086b2:	f003 0310 	and.w	r3, r3, #16
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f000 813e 	beq.w	8008938 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086bc:	2300      	movs	r3, #0
 80086be:	60bb      	str	r3, [r7, #8]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	60bb      	str	r3, [r7, #8]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	60bb      	str	r3, [r7, #8]
 80086d0:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086dc:	2b40      	cmp	r3, #64	; 0x40
 80086de:	f040 80b5 	bne.w	800884c <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80086ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f000 8142 	beq.w	800897c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008700:	429a      	cmp	r2, r3
 8008702:	f080 813b 	bcs.w	800897c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800870c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008712:	69db      	ldr	r3, [r3, #28]
 8008714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008718:	f000 8088 	beq.w	800882c <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	330c      	adds	r3, #12
 8008722:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008726:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800872a:	e853 3f00 	ldrex	r3, [r3]
 800872e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008732:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800873a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	330c      	adds	r3, #12
 8008744:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008748:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800874c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008750:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008754:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008758:	e841 2300 	strex	r3, r2, [r1]
 800875c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008760:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1d9      	bne.n	800871c <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	3314      	adds	r3, #20
 800876e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008772:	e853 3f00 	ldrex	r3, [r3]
 8008776:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008778:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800877a:	f023 0301 	bic.w	r3, r3, #1
 800877e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	3314      	adds	r3, #20
 8008788:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800878c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008790:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008792:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008794:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008798:	e841 2300 	strex	r3, r2, [r1]
 800879c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800879e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1e1      	bne.n	8008768 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3314      	adds	r3, #20
 80087aa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80087b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3314      	adds	r3, #20
 80087c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80087c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80087ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80087ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80087d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e3      	bne.n	80087a4 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2220      	movs	r2, #32
 80087e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	330c      	adds	r3, #12
 80087f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087f4:	e853 3f00 	ldrex	r3, [r3]
 80087f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087fc:	f023 0310 	bic.w	r3, r3, #16
 8008800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	330c      	adds	r3, #12
 800880a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800880e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008810:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008812:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008814:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008816:	e841 2300 	strex	r3, r2, [r1]
 800881a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800881c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1e3      	bne.n	80087ea <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008826:	4618      	mov	r0, r3
 8008828:	f7fc fb94 	bl	8004f54 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8008838:	b292      	uxth	r2, r2
 800883a:	1a8a      	subs	r2, r1, r2
 800883c:	b292      	uxth	r2, r2
 800883e:	4611      	mov	r1, r2
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008844:	e09a      	b.n	800897c <HAL_UART_IRQHandler+0x518>
 8008846:	bf00      	nop
 8008848:	08008c1f 	.word	0x08008c1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008854:	b29b      	uxth	r3, r3
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008860:	b29b      	uxth	r3, r3
 8008862:	2b00      	cmp	r3, #0
 8008864:	f000 808c 	beq.w	8008980 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008868:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 8087 	beq.w	8008980 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	330c      	adds	r3, #12
 8008878:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887c:	e853 3f00 	ldrex	r3, [r3]
 8008880:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008884:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008888:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	330c      	adds	r3, #12
 8008892:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008896:	647a      	str	r2, [r7, #68]	; 0x44
 8008898:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800889c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800889e:	e841 2300 	strex	r3, r2, [r1]
 80088a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1e3      	bne.n	8008872 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	3314      	adds	r3, #20
 80088b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b4:	e853 3f00 	ldrex	r3, [r3]
 80088b8:	623b      	str	r3, [r7, #32]
   return(result);
 80088ba:	6a3b      	ldr	r3, [r7, #32]
 80088bc:	f023 0301 	bic.w	r3, r3, #1
 80088c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	3314      	adds	r3, #20
 80088ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80088ce:	633a      	str	r2, [r7, #48]	; 0x30
 80088d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088d6:	e841 2300 	strex	r3, r2, [r1]
 80088da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1e3      	bne.n	80088aa <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2220      	movs	r2, #32
 80088e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	330c      	adds	r3, #12
 80088f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	e853 3f00 	ldrex	r3, [r3]
 80088fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f023 0310 	bic.w	r3, r3, #16
 8008906:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	330c      	adds	r3, #12
 8008910:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008914:	61fa      	str	r2, [r7, #28]
 8008916:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008918:	69b9      	ldr	r1, [r7, #24]
 800891a:	69fa      	ldr	r2, [r7, #28]
 800891c:	e841 2300 	strex	r3, r2, [r1]
 8008920:	617b      	str	r3, [r7, #20]
   return(result);
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1e3      	bne.n	80088f0 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800892c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8008930:	4611      	mov	r1, r2
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008936:	e023      	b.n	8008980 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800893c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008940:	2b00      	cmp	r3, #0
 8008942:	d009      	beq.n	8008958 <HAL_UART_IRQHandler+0x4f4>
 8008944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800894c:	2b00      	cmp	r3, #0
 800894e:	d003      	beq.n	8008958 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 f979 	bl	8008c48 <UART_Transmit_IT>
    return;
 8008956:	e014      	b.n	8008982 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800895c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00e      	beq.n	8008982 <HAL_UART_IRQHandler+0x51e>
 8008964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800896c:	2b00      	cmp	r3, #0
 800896e:	d008      	beq.n	8008982 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f9b9 	bl	8008ce8 <UART_EndTransmit_IT>
    return;
 8008976:	e004      	b.n	8008982 <HAL_UART_IRQHandler+0x51e>
    return;
 8008978:	bf00      	nop
 800897a:	e002      	b.n	8008982 <HAL_UART_IRQHandler+0x51e>
      return;
 800897c:	bf00      	nop
 800897e:	e000      	b.n	8008982 <HAL_UART_IRQHandler+0x51e>
      return;
 8008980:	bf00      	nop
  }
}
 8008982:	37e8      	adds	r7, #232	; 0xe8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80089a4:	bf00      	nop
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80089e0:	bf00      	nop
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a0c:	bf00      	nop
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8008a20:	2300      	movs	r3, #0
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	2300      	movs	r3, #0
 8008a26:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	b2da      	uxtb	r2, r3
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	4313      	orrs	r3, r2
 8008a46:	b2db      	uxtb	r3, r3
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3714      	adds	r7, #20
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a10      	ldr	r2, [pc, #64]	; (8008ab8 <UART_InitCallbacksToDefault+0x4c>)
 8008a78:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a0f      	ldr	r2, [pc, #60]	; (8008abc <UART_InitCallbacksToDefault+0x50>)
 8008a7e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a0f      	ldr	r2, [pc, #60]	; (8008ac0 <UART_InitCallbacksToDefault+0x54>)
 8008a84:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a0e      	ldr	r2, [pc, #56]	; (8008ac4 <UART_InitCallbacksToDefault+0x58>)
 8008a8a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a0e      	ldr	r2, [pc, #56]	; (8008ac8 <UART_InitCallbacksToDefault+0x5c>)
 8008a90:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a0d      	ldr	r2, [pc, #52]	; (8008acc <UART_InitCallbacksToDefault+0x60>)
 8008a96:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a0d      	ldr	r2, [pc, #52]	; (8008ad0 <UART_InitCallbacksToDefault+0x64>)
 8008a9c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a0c      	ldr	r2, [pc, #48]	; (8008ad4 <UART_InitCallbacksToDefault+0x68>)
 8008aa2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a0c      	ldr	r2, [pc, #48]	; (8008ad8 <UART_InitCallbacksToDefault+0x6c>)
 8008aa8:	669a      	str	r2, [r3, #104]	; 0x68

}
 8008aaa:	bf00      	nop
 8008aac:	370c      	adds	r7, #12
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	0800899d 	.word	0x0800899d
 8008abc:	08008989 	.word	0x08008989
 8008ac0:	080089b1 	.word	0x080089b1
 8008ac4:	08002775 	.word	0x08002775
 8008ac8:	080026c1 	.word	0x080026c1
 8008acc:	080089c5 	.word	0x080089c5
 8008ad0:	080089d9 	.word	0x080089d9
 8008ad4:	080089ed 	.word	0x080089ed
 8008ad8:	08008a01 	.word	0x08008a01

08008adc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	88fa      	ldrh	r2, [r7, #6]
 8008af4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	88fa      	ldrh	r2, [r7, #6]
 8008afa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2222      	movs	r2, #34	; 0x22
 8008b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d007      	beq.n	8008b2a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68da      	ldr	r2, [r3, #12]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b28:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	695a      	ldr	r2, [r3, #20]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f042 0201 	orr.w	r2, r2, #1
 8008b38:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68da      	ldr	r2, [r3, #12]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f042 0220 	orr.w	r2, r2, #32
 8008b48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b095      	sub	sp, #84	; 0x54
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	330c      	adds	r3, #12
 8008b66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b6a:	e853 3f00 	ldrex	r3, [r3]
 8008b6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	330c      	adds	r3, #12
 8008b7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b80:	643a      	str	r2, [r7, #64]	; 0x40
 8008b82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b88:	e841 2300 	strex	r3, r2, [r1]
 8008b8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d1e5      	bne.n	8008b60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	3314      	adds	r3, #20
 8008b9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
 8008b9e:	e853 3f00 	ldrex	r3, [r3]
 8008ba2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	f023 0301 	bic.w	r3, r3, #1
 8008baa:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	3314      	adds	r3, #20
 8008bb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bbc:	e841 2300 	strex	r3, r2, [r1]
 8008bc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1e5      	bne.n	8008b94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d119      	bne.n	8008c04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	330c      	adds	r3, #12
 8008bd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	e853 3f00 	ldrex	r3, [r3]
 8008bde:	60bb      	str	r3, [r7, #8]
   return(result);
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	f023 0310 	bic.w	r3, r3, #16
 8008be6:	647b      	str	r3, [r7, #68]	; 0x44
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	330c      	adds	r3, #12
 8008bee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bf0:	61ba      	str	r2, [r7, #24]
 8008bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf4:	6979      	ldr	r1, [r7, #20]
 8008bf6:	69ba      	ldr	r2, [r7, #24]
 8008bf8:	e841 2300 	strex	r3, r2, [r1]
 8008bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1e5      	bne.n	8008bd0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2220      	movs	r2, #32
 8008c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008c12:	bf00      	nop
 8008c14:	3754      	adds	r7, #84	; 0x54
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b084      	sub	sp, #16
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c40:	bf00      	nop
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b21      	cmp	r3, #33	; 0x21
 8008c5a:	d13e      	bne.n	8008cda <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c64:	d114      	bne.n	8008c90 <UART_Transmit_IT+0x48>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d110      	bne.n	8008c90 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	881b      	ldrh	r3, [r3, #0]
 8008c78:	461a      	mov	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c82:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a1b      	ldr	r3, [r3, #32]
 8008c88:	1c9a      	adds	r2, r3, #2
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	621a      	str	r2, [r3, #32]
 8008c8e:	e008      	b.n	8008ca2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a1b      	ldr	r3, [r3, #32]
 8008c94:	1c59      	adds	r1, r3, #1
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	6211      	str	r1, [r2, #32]
 8008c9a:	781a      	ldrb	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d10f      	bne.n	8008cd6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68da      	ldr	r2, [r3, #12]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cc4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68da      	ldr	r2, [r3, #12]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cd4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	e000      	b.n	8008cdc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008cda:	2302      	movs	r3, #2
  }
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3714      	adds	r7, #20
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68da      	ldr	r2, [r3, #12]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cfe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2220      	movs	r2, #32
 8008d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b08c      	sub	sp, #48	; 0x30
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b22      	cmp	r3, #34	; 0x22
 8008d2c:	f040 80ad 	bne.w	8008e8a <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d38:	d117      	bne.n	8008d6a <UART_Receive_IT+0x50>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d113      	bne.n	8008d6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d42:	2300      	movs	r3, #0
 8008d44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d62:	1c9a      	adds	r2, r3, #2
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	629a      	str	r2, [r3, #40]	; 0x28
 8008d68:	e026      	b.n	8008db8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008d70:	2300      	movs	r3, #0
 8008d72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d7c:	d007      	beq.n	8008d8e <UART_Receive_IT+0x74>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10a      	bne.n	8008d9c <UART_Receive_IT+0x82>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d106      	bne.n	8008d9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	b2da      	uxtb	r2, r3
 8008d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d98:	701a      	strb	r2, [r3, #0]
 8008d9a:	e008      	b.n	8008dae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db2:	1c5a      	adds	r2, r3, #1
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d15c      	bne.n	8008e86 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68da      	ldr	r2, [r3, #12]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f022 0220 	bic.w	r2, r2, #32
 8008dda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68da      	ldr	r2, [r3, #12]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008dea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	695a      	ldr	r2, [r3, #20]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f022 0201 	bic.w	r2, r2, #1
 8008dfa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2220      	movs	r2, #32
 8008e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d136      	bne.n	8008e7a <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	330c      	adds	r3, #12
 8008e18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	e853 3f00 	ldrex	r3, [r3]
 8008e20:	613b      	str	r3, [r7, #16]
   return(result);
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	f023 0310 	bic.w	r3, r3, #16
 8008e28:	627b      	str	r3, [r7, #36]	; 0x24
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	330c      	adds	r3, #12
 8008e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e32:	623a      	str	r2, [r7, #32]
 8008e34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e36:	69f9      	ldr	r1, [r7, #28]
 8008e38:	6a3a      	ldr	r2, [r7, #32]
 8008e3a:	e841 2300 	strex	r3, r2, [r1]
 8008e3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1e5      	bne.n	8008e12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 0310 	and.w	r3, r3, #16
 8008e50:	2b10      	cmp	r3, #16
 8008e52:	d10a      	bne.n	8008e6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e54:	2300      	movs	r3, #0
 8008e56:	60fb      	str	r3, [r7, #12]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	60fb      	str	r3, [r7, #12]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	60fb      	str	r3, [r7, #12]
 8008e68:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8008e72:	4611      	mov	r1, r2
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	4798      	blx	r3
 8008e78:	e003      	b.n	8008e82 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	e002      	b.n	8008e8c <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	e000      	b.n	8008e8c <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8008e8a:	2302      	movs	r3, #2
  }
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3730      	adds	r7, #48	; 0x30
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e98:	b0c0      	sub	sp, #256	; 0x100
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eb0:	68d9      	ldr	r1, [r3, #12]
 8008eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	ea40 0301 	orr.w	r3, r0, r1
 8008ebc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ec2:	689a      	ldr	r2, [r3, #8]
 8008ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	431a      	orrs	r2, r3
 8008ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	431a      	orrs	r2, r3
 8008ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008eec:	f021 010c 	bic.w	r1, r1, #12
 8008ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008efa:	430b      	orrs	r3, r1
 8008efc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	695b      	ldr	r3, [r3, #20]
 8008f06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f0e:	6999      	ldr	r1, [r3, #24]
 8008f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	ea40 0301 	orr.w	r3, r0, r1
 8008f1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	4b8f      	ldr	r3, [pc, #572]	; (8009160 <UART_SetConfig+0x2cc>)
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d005      	beq.n	8008f34 <UART_SetConfig+0xa0>
 8008f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	4b8d      	ldr	r3, [pc, #564]	; (8009164 <UART_SetConfig+0x2d0>)
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d104      	bne.n	8008f3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f34:	f7fd fc3e 	bl	80067b4 <HAL_RCC_GetPCLK2Freq>
 8008f38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008f3c:	e003      	b.n	8008f46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f3e:	f7fd fc25 	bl	800678c <HAL_RCC_GetPCLK1Freq>
 8008f42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f50:	f040 810c 	bne.w	800916c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008f62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008f66:	4622      	mov	r2, r4
 8008f68:	462b      	mov	r3, r5
 8008f6a:	1891      	adds	r1, r2, r2
 8008f6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8008f6e:	415b      	adcs	r3, r3
 8008f70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008f76:	4621      	mov	r1, r4
 8008f78:	eb12 0801 	adds.w	r8, r2, r1
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	eb43 0901 	adc.w	r9, r3, r1
 8008f82:	f04f 0200 	mov.w	r2, #0
 8008f86:	f04f 0300 	mov.w	r3, #0
 8008f8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f96:	4690      	mov	r8, r2
 8008f98:	4699      	mov	r9, r3
 8008f9a:	4623      	mov	r3, r4
 8008f9c:	eb18 0303 	adds.w	r3, r8, r3
 8008fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008fa4:	462b      	mov	r3, r5
 8008fa6:	eb49 0303 	adc.w	r3, r9, r3
 8008faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008fba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008fbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	18db      	adds	r3, r3, r3
 8008fc6:	653b      	str	r3, [r7, #80]	; 0x50
 8008fc8:	4613      	mov	r3, r2
 8008fca:	eb42 0303 	adc.w	r3, r2, r3
 8008fce:	657b      	str	r3, [r7, #84]	; 0x54
 8008fd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008fd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008fd8:	f7f7 fcf8 	bl	80009cc <__aeabi_uldivmod>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4b61      	ldr	r3, [pc, #388]	; (8009168 <UART_SetConfig+0x2d4>)
 8008fe2:	fba3 2302 	umull	r2, r3, r3, r2
 8008fe6:	095b      	lsrs	r3, r3, #5
 8008fe8:	011c      	lsls	r4, r3, #4
 8008fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ff4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008ff8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008ffc:	4642      	mov	r2, r8
 8008ffe:	464b      	mov	r3, r9
 8009000:	1891      	adds	r1, r2, r2
 8009002:	64b9      	str	r1, [r7, #72]	; 0x48
 8009004:	415b      	adcs	r3, r3
 8009006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009008:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800900c:	4641      	mov	r1, r8
 800900e:	eb12 0a01 	adds.w	sl, r2, r1
 8009012:	4649      	mov	r1, r9
 8009014:	eb43 0b01 	adc.w	fp, r3, r1
 8009018:	f04f 0200 	mov.w	r2, #0
 800901c:	f04f 0300 	mov.w	r3, #0
 8009020:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009024:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009028:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800902c:	4692      	mov	sl, r2
 800902e:	469b      	mov	fp, r3
 8009030:	4643      	mov	r3, r8
 8009032:	eb1a 0303 	adds.w	r3, sl, r3
 8009036:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800903a:	464b      	mov	r3, r9
 800903c:	eb4b 0303 	adc.w	r3, fp, r3
 8009040:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009050:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009054:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009058:	460b      	mov	r3, r1
 800905a:	18db      	adds	r3, r3, r3
 800905c:	643b      	str	r3, [r7, #64]	; 0x40
 800905e:	4613      	mov	r3, r2
 8009060:	eb42 0303 	adc.w	r3, r2, r3
 8009064:	647b      	str	r3, [r7, #68]	; 0x44
 8009066:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800906a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800906e:	f7f7 fcad 	bl	80009cc <__aeabi_uldivmod>
 8009072:	4602      	mov	r2, r0
 8009074:	460b      	mov	r3, r1
 8009076:	4611      	mov	r1, r2
 8009078:	4b3b      	ldr	r3, [pc, #236]	; (8009168 <UART_SetConfig+0x2d4>)
 800907a:	fba3 2301 	umull	r2, r3, r3, r1
 800907e:	095b      	lsrs	r3, r3, #5
 8009080:	2264      	movs	r2, #100	; 0x64
 8009082:	fb02 f303 	mul.w	r3, r2, r3
 8009086:	1acb      	subs	r3, r1, r3
 8009088:	00db      	lsls	r3, r3, #3
 800908a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800908e:	4b36      	ldr	r3, [pc, #216]	; (8009168 <UART_SetConfig+0x2d4>)
 8009090:	fba3 2302 	umull	r2, r3, r3, r2
 8009094:	095b      	lsrs	r3, r3, #5
 8009096:	005b      	lsls	r3, r3, #1
 8009098:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800909c:	441c      	add	r4, r3
 800909e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090a2:	2200      	movs	r2, #0
 80090a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80090ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80090b0:	4642      	mov	r2, r8
 80090b2:	464b      	mov	r3, r9
 80090b4:	1891      	adds	r1, r2, r2
 80090b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80090b8:	415b      	adcs	r3, r3
 80090ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80090c0:	4641      	mov	r1, r8
 80090c2:	1851      	adds	r1, r2, r1
 80090c4:	6339      	str	r1, [r7, #48]	; 0x30
 80090c6:	4649      	mov	r1, r9
 80090c8:	414b      	adcs	r3, r1
 80090ca:	637b      	str	r3, [r7, #52]	; 0x34
 80090cc:	f04f 0200 	mov.w	r2, #0
 80090d0:	f04f 0300 	mov.w	r3, #0
 80090d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80090d8:	4659      	mov	r1, fp
 80090da:	00cb      	lsls	r3, r1, #3
 80090dc:	4651      	mov	r1, sl
 80090de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090e2:	4651      	mov	r1, sl
 80090e4:	00ca      	lsls	r2, r1, #3
 80090e6:	4610      	mov	r0, r2
 80090e8:	4619      	mov	r1, r3
 80090ea:	4603      	mov	r3, r0
 80090ec:	4642      	mov	r2, r8
 80090ee:	189b      	adds	r3, r3, r2
 80090f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090f4:	464b      	mov	r3, r9
 80090f6:	460a      	mov	r2, r1
 80090f8:	eb42 0303 	adc.w	r3, r2, r3
 80090fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800910c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009110:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009114:	460b      	mov	r3, r1
 8009116:	18db      	adds	r3, r3, r3
 8009118:	62bb      	str	r3, [r7, #40]	; 0x28
 800911a:	4613      	mov	r3, r2
 800911c:	eb42 0303 	adc.w	r3, r2, r3
 8009120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009122:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009126:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800912a:	f7f7 fc4f 	bl	80009cc <__aeabi_uldivmod>
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	4b0d      	ldr	r3, [pc, #52]	; (8009168 <UART_SetConfig+0x2d4>)
 8009134:	fba3 1302 	umull	r1, r3, r3, r2
 8009138:	095b      	lsrs	r3, r3, #5
 800913a:	2164      	movs	r1, #100	; 0x64
 800913c:	fb01 f303 	mul.w	r3, r1, r3
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	00db      	lsls	r3, r3, #3
 8009144:	3332      	adds	r3, #50	; 0x32
 8009146:	4a08      	ldr	r2, [pc, #32]	; (8009168 <UART_SetConfig+0x2d4>)
 8009148:	fba2 2303 	umull	r2, r3, r2, r3
 800914c:	095b      	lsrs	r3, r3, #5
 800914e:	f003 0207 	and.w	r2, r3, #7
 8009152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4422      	add	r2, r4
 800915a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800915c:	e105      	b.n	800936a <UART_SetConfig+0x4d6>
 800915e:	bf00      	nop
 8009160:	40011000 	.word	0x40011000
 8009164:	40011400 	.word	0x40011400
 8009168:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800916c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009170:	2200      	movs	r2, #0
 8009172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009176:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800917a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800917e:	4642      	mov	r2, r8
 8009180:	464b      	mov	r3, r9
 8009182:	1891      	adds	r1, r2, r2
 8009184:	6239      	str	r1, [r7, #32]
 8009186:	415b      	adcs	r3, r3
 8009188:	627b      	str	r3, [r7, #36]	; 0x24
 800918a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800918e:	4641      	mov	r1, r8
 8009190:	1854      	adds	r4, r2, r1
 8009192:	4649      	mov	r1, r9
 8009194:	eb43 0501 	adc.w	r5, r3, r1
 8009198:	f04f 0200 	mov.w	r2, #0
 800919c:	f04f 0300 	mov.w	r3, #0
 80091a0:	00eb      	lsls	r3, r5, #3
 80091a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80091a6:	00e2      	lsls	r2, r4, #3
 80091a8:	4614      	mov	r4, r2
 80091aa:	461d      	mov	r5, r3
 80091ac:	4643      	mov	r3, r8
 80091ae:	18e3      	adds	r3, r4, r3
 80091b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80091b4:	464b      	mov	r3, r9
 80091b6:	eb45 0303 	adc.w	r3, r5, r3
 80091ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80091be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80091ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80091ce:	f04f 0200 	mov.w	r2, #0
 80091d2:	f04f 0300 	mov.w	r3, #0
 80091d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80091da:	4629      	mov	r1, r5
 80091dc:	008b      	lsls	r3, r1, #2
 80091de:	4621      	mov	r1, r4
 80091e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091e4:	4621      	mov	r1, r4
 80091e6:	008a      	lsls	r2, r1, #2
 80091e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80091ec:	f7f7 fbee 	bl	80009cc <__aeabi_uldivmod>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	4b60      	ldr	r3, [pc, #384]	; (8009378 <UART_SetConfig+0x4e4>)
 80091f6:	fba3 2302 	umull	r2, r3, r3, r2
 80091fa:	095b      	lsrs	r3, r3, #5
 80091fc:	011c      	lsls	r4, r3, #4
 80091fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009202:	2200      	movs	r2, #0
 8009204:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009208:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800920c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009210:	4642      	mov	r2, r8
 8009212:	464b      	mov	r3, r9
 8009214:	1891      	adds	r1, r2, r2
 8009216:	61b9      	str	r1, [r7, #24]
 8009218:	415b      	adcs	r3, r3
 800921a:	61fb      	str	r3, [r7, #28]
 800921c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009220:	4641      	mov	r1, r8
 8009222:	1851      	adds	r1, r2, r1
 8009224:	6139      	str	r1, [r7, #16]
 8009226:	4649      	mov	r1, r9
 8009228:	414b      	adcs	r3, r1
 800922a:	617b      	str	r3, [r7, #20]
 800922c:	f04f 0200 	mov.w	r2, #0
 8009230:	f04f 0300 	mov.w	r3, #0
 8009234:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009238:	4659      	mov	r1, fp
 800923a:	00cb      	lsls	r3, r1, #3
 800923c:	4651      	mov	r1, sl
 800923e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009242:	4651      	mov	r1, sl
 8009244:	00ca      	lsls	r2, r1, #3
 8009246:	4610      	mov	r0, r2
 8009248:	4619      	mov	r1, r3
 800924a:	4603      	mov	r3, r0
 800924c:	4642      	mov	r2, r8
 800924e:	189b      	adds	r3, r3, r2
 8009250:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009254:	464b      	mov	r3, r9
 8009256:	460a      	mov	r2, r1
 8009258:	eb42 0303 	adc.w	r3, r2, r3
 800925c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	67bb      	str	r3, [r7, #120]	; 0x78
 800926a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800926c:	f04f 0200 	mov.w	r2, #0
 8009270:	f04f 0300 	mov.w	r3, #0
 8009274:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009278:	4649      	mov	r1, r9
 800927a:	008b      	lsls	r3, r1, #2
 800927c:	4641      	mov	r1, r8
 800927e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009282:	4641      	mov	r1, r8
 8009284:	008a      	lsls	r2, r1, #2
 8009286:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800928a:	f7f7 fb9f 	bl	80009cc <__aeabi_uldivmod>
 800928e:	4602      	mov	r2, r0
 8009290:	460b      	mov	r3, r1
 8009292:	4b39      	ldr	r3, [pc, #228]	; (8009378 <UART_SetConfig+0x4e4>)
 8009294:	fba3 1302 	umull	r1, r3, r3, r2
 8009298:	095b      	lsrs	r3, r3, #5
 800929a:	2164      	movs	r1, #100	; 0x64
 800929c:	fb01 f303 	mul.w	r3, r1, r3
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	011b      	lsls	r3, r3, #4
 80092a4:	3332      	adds	r3, #50	; 0x32
 80092a6:	4a34      	ldr	r2, [pc, #208]	; (8009378 <UART_SetConfig+0x4e4>)
 80092a8:	fba2 2303 	umull	r2, r3, r2, r3
 80092ac:	095b      	lsrs	r3, r3, #5
 80092ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092b2:	441c      	add	r4, r3
 80092b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092b8:	2200      	movs	r2, #0
 80092ba:	673b      	str	r3, [r7, #112]	; 0x70
 80092bc:	677a      	str	r2, [r7, #116]	; 0x74
 80092be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80092c2:	4642      	mov	r2, r8
 80092c4:	464b      	mov	r3, r9
 80092c6:	1891      	adds	r1, r2, r2
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	415b      	adcs	r3, r3
 80092cc:	60fb      	str	r3, [r7, #12]
 80092ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092d2:	4641      	mov	r1, r8
 80092d4:	1851      	adds	r1, r2, r1
 80092d6:	6039      	str	r1, [r7, #0]
 80092d8:	4649      	mov	r1, r9
 80092da:	414b      	adcs	r3, r1
 80092dc:	607b      	str	r3, [r7, #4]
 80092de:	f04f 0200 	mov.w	r2, #0
 80092e2:	f04f 0300 	mov.w	r3, #0
 80092e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80092ea:	4659      	mov	r1, fp
 80092ec:	00cb      	lsls	r3, r1, #3
 80092ee:	4651      	mov	r1, sl
 80092f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092f4:	4651      	mov	r1, sl
 80092f6:	00ca      	lsls	r2, r1, #3
 80092f8:	4610      	mov	r0, r2
 80092fa:	4619      	mov	r1, r3
 80092fc:	4603      	mov	r3, r0
 80092fe:	4642      	mov	r2, r8
 8009300:	189b      	adds	r3, r3, r2
 8009302:	66bb      	str	r3, [r7, #104]	; 0x68
 8009304:	464b      	mov	r3, r9
 8009306:	460a      	mov	r2, r1
 8009308:	eb42 0303 	adc.w	r3, r2, r3
 800930c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800930e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	663b      	str	r3, [r7, #96]	; 0x60
 8009318:	667a      	str	r2, [r7, #100]	; 0x64
 800931a:	f04f 0200 	mov.w	r2, #0
 800931e:	f04f 0300 	mov.w	r3, #0
 8009322:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009326:	4649      	mov	r1, r9
 8009328:	008b      	lsls	r3, r1, #2
 800932a:	4641      	mov	r1, r8
 800932c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009330:	4641      	mov	r1, r8
 8009332:	008a      	lsls	r2, r1, #2
 8009334:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009338:	f7f7 fb48 	bl	80009cc <__aeabi_uldivmod>
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	4b0d      	ldr	r3, [pc, #52]	; (8009378 <UART_SetConfig+0x4e4>)
 8009342:	fba3 1302 	umull	r1, r3, r3, r2
 8009346:	095b      	lsrs	r3, r3, #5
 8009348:	2164      	movs	r1, #100	; 0x64
 800934a:	fb01 f303 	mul.w	r3, r1, r3
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	011b      	lsls	r3, r3, #4
 8009352:	3332      	adds	r3, #50	; 0x32
 8009354:	4a08      	ldr	r2, [pc, #32]	; (8009378 <UART_SetConfig+0x4e4>)
 8009356:	fba2 2303 	umull	r2, r3, r2, r3
 800935a:	095b      	lsrs	r3, r3, #5
 800935c:	f003 020f 	and.w	r2, r3, #15
 8009360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4422      	add	r2, r4
 8009368:	609a      	str	r2, [r3, #8]
}
 800936a:	bf00      	nop
 800936c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009370:	46bd      	mov	sp, r7
 8009372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009376:	bf00      	nop
 8009378:	51eb851f 	.word	0x51eb851f

0800937c <HAL_ADC_ConvCpltCallback>:
* Function: HAL_ADC_ConvCpltCallback										   	   *
* Description: Conversion callback to process conversion complete in the 		   *
* 			   peripheral.														   *
************************************************************************************/
VOID HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
	if(Rte_P_Os_OsPort_Os_Counter % 200 == 0)
 8009384:	4b09      	ldr	r3, [pc, #36]	; (80093ac <HAL_ADC_ConvCpltCallback+0x30>)
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	4b09      	ldr	r3, [pc, #36]	; (80093b0 <HAL_ADC_ConvCpltCallback+0x34>)
 800938a:	fba3 1302 	umull	r1, r3, r3, r2
 800938e:	099b      	lsrs	r3, r3, #6
 8009390:	21c8      	movs	r1, #200	; 0xc8
 8009392:	fb01 f303 	mul.w	r3, r1, r3
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	2b00      	cmp	r3, #0
 800939a:	d102      	bne.n	80093a2 <HAL_ADC_ConvCpltCallback+0x26>
	{
		Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues(Adc_ChannelOne_Buffer);
 800939c:	4805      	ldr	r0, [pc, #20]	; (80093b4 <HAL_ADC_ConvCpltCallback+0x38>)
 800939e:	f004 fea5 	bl	800e0ec <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues>
	}
	else
	{
		/* do nothing */
	}
}
 80093a2:	bf00      	nop
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	200001fc 	.word	0x200001fc
 80093b0:	51eb851f 	.word	0x51eb851f
 80093b4:	200006a4 	.word	0x200006a4

080093b8 <HAL_ADC_ErrorCallback>:
/***********************************************************************************
* Function: HAL_ADC_ErrorCallback										   		   *
* Description: Error callback to process fault in the peripheral.		 		   *
************************************************************************************/
VOID HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
	/* Local variable to store error status. */
	uint32 receivedStatus = HAL_ADC_GetError(&hadc1);
 80093c0:	481c      	ldr	r0, [pc, #112]	; (8009434 <HAL_ADC_ErrorCallback+0x7c>)
 80093c2:	f7fb f90f 	bl	80045e4 <HAL_ADC_GetError>
 80093c6:	60f8      	str	r0, [r7, #12]
	/* Process error status.
	 * Perform re-initialization on each error to prevent faults in the peripheral. */
	switch(receivedStatus)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2b04      	cmp	r3, #4
 80093cc:	d82d      	bhi.n	800942a <HAL_ADC_ErrorCallback+0x72>
 80093ce:	a201      	add	r2, pc, #4	; (adr r2, 80093d4 <HAL_ADC_ErrorCallback+0x1c>)
 80093d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d4:	0800942b 	.word	0x0800942b
 80093d8:	080093e9 	.word	0x080093e9
 80093dc:	080093ff 	.word	0x080093ff
 80093e0:	0800942b 	.word	0x0800942b
 80093e4:	08009415 	.word	0x08009415
	{
		case HAL_ADC_ERROR_NONE:
			/* do nothing */
			break;
		case HAL_ADC_ERROR_INTERNAL:
			SystemManager_Fault[ADC_ERROR_INTERNAL]++;
 80093e8:	4b13      	ldr	r3, [pc, #76]	; (8009438 <HAL_ADC_ErrorCallback+0x80>)
 80093ea:	7b9b      	ldrb	r3, [r3, #14]
 80093ec:	3301      	adds	r3, #1
 80093ee:	b2da      	uxtb	r2, r3
 80093f0:	4b11      	ldr	r3, [pc, #68]	; (8009438 <HAL_ADC_ErrorCallback+0x80>)
 80093f2:	739a      	strb	r2, [r3, #14]
			Adc_DeInit();
 80093f4:	f000 f898 	bl	8009528 <Adc_DeInit>
			Adc_Init();
 80093f8:	f000 f8a0 	bl	800953c <Adc_Init>
			break;
 80093fc:	e016      	b.n	800942c <HAL_ADC_ErrorCallback+0x74>
		case HAL_ADC_ERROR_OVR:
			SystemManager_Fault[ADC_ERROR_OVR]++;
 80093fe:	4b0e      	ldr	r3, [pc, #56]	; (8009438 <HAL_ADC_ErrorCallback+0x80>)
 8009400:	7bdb      	ldrb	r3, [r3, #15]
 8009402:	3301      	adds	r3, #1
 8009404:	b2da      	uxtb	r2, r3
 8009406:	4b0c      	ldr	r3, [pc, #48]	; (8009438 <HAL_ADC_ErrorCallback+0x80>)
 8009408:	73da      	strb	r2, [r3, #15]
			Adc_DeInit();
 800940a:	f000 f88d 	bl	8009528 <Adc_DeInit>
			Adc_Init();
 800940e:	f000 f895 	bl	800953c <Adc_Init>
			break;
 8009412:	e00b      	b.n	800942c <HAL_ADC_ErrorCallback+0x74>
		case HAL_ADC_ERROR_DMA:
			SystemManager_Fault[ADC_ERROR_DMA]++;
 8009414:	4b08      	ldr	r3, [pc, #32]	; (8009438 <HAL_ADC_ErrorCallback+0x80>)
 8009416:	7c1b      	ldrb	r3, [r3, #16]
 8009418:	3301      	adds	r3, #1
 800941a:	b2da      	uxtb	r2, r3
 800941c:	4b06      	ldr	r3, [pc, #24]	; (8009438 <HAL_ADC_ErrorCallback+0x80>)
 800941e:	741a      	strb	r2, [r3, #16]
			Adc_DeInit();
 8009420:	f000 f882 	bl	8009528 <Adc_DeInit>
			Adc_Init();
 8009424:	f000 f88a 	bl	800953c <Adc_Init>
			break;
 8009428:	e000      	b.n	800942c <HAL_ADC_ErrorCallback+0x74>
		default:
			break;
 800942a:	bf00      	nop
	}
}
 800942c:	bf00      	nop
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	20000130 	.word	0x20000130
 8009438:	20005ff4 	.word	0x20005ff4

0800943c <Adc_MainFunction>:
/***********************************************************************************
* Function: Adc_MainFunction										   			   *
* Description: Peripheral main function.									       *
************************************************************************************/
VOID Adc_MainFunction()
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
	/* Local variable to store the error status. */
	uint32 statusValue = STD_LOW;
 8009442:	2300      	movs	r3, #0
 8009444:	607b      	str	r3, [r7, #4]
	/* Get error status. */
	statusValue = HAL_ADC_GetState(&hadc1);
 8009446:	4836      	ldr	r0, [pc, #216]	; (8009520 <Adc_MainFunction+0xe4>)
 8009448:	f7fb f8c0 	bl	80045cc <HAL_ADC_GetState>
 800944c:	6078      	str	r0, [r7, #4]

	/* Process module states. */
	switch(statusValue)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009454:	d049      	beq.n	80094ea <Adc_MainFunction+0xae>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800945c:	d85a      	bhi.n	8009514 <Adc_MainFunction+0xd8>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b10      	cmp	r3, #16
 8009462:	d827      	bhi.n	80094b4 <Adc_MainFunction+0x78>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2b10      	cmp	r3, #16
 8009468:	d854      	bhi.n	8009514 <Adc_MainFunction+0xd8>
 800946a:	a201      	add	r2, pc, #4	; (adr r2, 8009470 <Adc_MainFunction+0x34>)
 800946c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009470:	080094bf 	.word	0x080094bf
 8009474:	080094cd 	.word	0x080094cd
 8009478:	080094d7 	.word	0x080094d7
 800947c:	08009515 	.word	0x08009515
 8009480:	080094f5 	.word	0x080094f5
 8009484:	08009515 	.word	0x08009515
 8009488:	08009515 	.word	0x08009515
 800948c:	08009515 	.word	0x08009515
 8009490:	08009515 	.word	0x08009515
 8009494:	08009515 	.word	0x08009515
 8009498:	08009515 	.word	0x08009515
 800949c:	08009515 	.word	0x08009515
 80094a0:	08009515 	.word	0x08009515
 80094a4:	08009515 	.word	0x08009515
 80094a8:	08009515 	.word	0x08009515
 80094ac:	08009515 	.word	0x08009515
 80094b0:	08009505 	.word	0x08009505
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094ba:	d011      	beq.n	80094e0 <Adc_MainFunction+0xa4>
		case HAL_ADC_STATE_ERROR:
			Adc_BswState = statusValue;
			HAL_ADC_ErrorCallback(&hadc1);
			break;
		default:
			break;
 80094bc:	e02a      	b.n	8009514 <Adc_MainFunction+0xd8>
			Adc_BswState = statusValue;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	4b18      	ldr	r3, [pc, #96]	; (8009524 <Adc_MainFunction+0xe8>)
 80094c4:	701a      	strb	r2, [r3, #0]
			Adc_Init();
 80094c6:	f000 f839 	bl	800953c <Adc_Init>
			break;
 80094ca:	e024      	b.n	8009516 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	b2da      	uxtb	r2, r3
 80094d0:	4b14      	ldr	r3, [pc, #80]	; (8009524 <Adc_MainFunction+0xe8>)
 80094d2:	701a      	strb	r2, [r3, #0]
			break;
 80094d4:	e01f      	b.n	8009516 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	b2da      	uxtb	r2, r3
 80094da:	4b12      	ldr	r3, [pc, #72]	; (8009524 <Adc_MainFunction+0xe8>)
 80094dc:	701a      	strb	r2, [r3, #0]
			break;
 80094de:	e01a      	b.n	8009516 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	4b0f      	ldr	r3, [pc, #60]	; (8009524 <Adc_MainFunction+0xe8>)
 80094e6:	701a      	strb	r2, [r3, #0]
			break;
 80094e8:	e015      	b.n	8009516 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	4b0d      	ldr	r3, [pc, #52]	; (8009524 <Adc_MainFunction+0xe8>)
 80094f0:	701a      	strb	r2, [r3, #0]
			break;
 80094f2:	e010      	b.n	8009516 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	b2da      	uxtb	r2, r3
 80094f8:	4b0a      	ldr	r3, [pc, #40]	; (8009524 <Adc_MainFunction+0xe8>)
 80094fa:	701a      	strb	r2, [r3, #0]
			HAL_ADC_ErrorCallback(&hadc1);
 80094fc:	4808      	ldr	r0, [pc, #32]	; (8009520 <Adc_MainFunction+0xe4>)
 80094fe:	f7ff ff5b 	bl	80093b8 <HAL_ADC_ErrorCallback>
			break;
 8009502:	e008      	b.n	8009516 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	b2da      	uxtb	r2, r3
 8009508:	4b06      	ldr	r3, [pc, #24]	; (8009524 <Adc_MainFunction+0xe8>)
 800950a:	701a      	strb	r2, [r3, #0]
			HAL_ADC_ErrorCallback(&hadc1);
 800950c:	4804      	ldr	r0, [pc, #16]	; (8009520 <Adc_MainFunction+0xe4>)
 800950e:	f7ff ff53 	bl	80093b8 <HAL_ADC_ErrorCallback>
			break;
 8009512:	e000      	b.n	8009516 <Adc_MainFunction+0xda>
			break;
 8009514:	bf00      	nop
	}
}
 8009516:	bf00      	nop
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	20000130 	.word	0x20000130
 8009524:	200006a0 	.word	0x200006a0

08009528 <Adc_DeInit>:
/***********************************************************************************
* Function: Adc_DeInit										   					   *
* Description: De-initialize the peripheral.									   *
************************************************************************************/
StdReturnType Adc_DeInit()
{
 8009528:	b580      	push	{r7, lr}
 800952a:	af00      	add	r7, sp, #0
	/* Call for de-intialization function. */
	HAL_ADC_DeInit(&hadc1);
 800952c:	4802      	ldr	r0, [pc, #8]	; (8009538 <Adc_DeInit+0x10>)
 800952e:	f7fa fc67 	bl	8003e00 <HAL_ADC_DeInit>
	return E_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	bd80      	pop	{r7, pc}
 8009538:	20000130 	.word	0x20000130

0800953c <Adc_Init>:
/***********************************************************************************
* Function: Adc_Init										   					   *
* Description: Initialize the protocol.									       	   *
************************************************************************************/
StdReturnType Adc_Init()
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b08a      	sub	sp, #40	; 0x28
 8009540:	af00      	add	r7, sp, #0
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8009542:	f107 0310 	add.w	r3, r7, #16
 8009546:	2200      	movs	r2, #0
 8009548:	601a      	str	r2, [r3, #0]
 800954a:	605a      	str	r2, [r3, #4]
 800954c:	609a      	str	r2, [r3, #8]
 800954e:	60da      	str	r2, [r3, #12]
 8009550:	611a      	str	r2, [r3, #16]
 8009552:	615a      	str	r2, [r3, #20]
	ADC_ChannelConfTypeDef sConfig = {0};
 8009554:	463b      	mov	r3, r7
 8009556:	2200      	movs	r2, #0
 8009558:	601a      	str	r2, [r3, #0]
 800955a:	605a      	str	r2, [r3, #4]
 800955c:	609a      	str	r2, [r3, #8]
 800955e:	60da      	str	r2, [r3, #12]
	hadc1.Instance = ADC1;
 8009560:	4b40      	ldr	r3, [pc, #256]	; (8009664 <Adc_Init+0x128>)
 8009562:	4a41      	ldr	r2, [pc, #260]	; (8009668 <Adc_Init+0x12c>)
 8009564:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8009566:	4b3f      	ldr	r3, [pc, #252]	; (8009664 <Adc_Init+0x128>)
 8009568:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800956c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800956e:	4b3d      	ldr	r3, [pc, #244]	; (8009664 <Adc_Init+0x128>)
 8009570:	2200      	movs	r2, #0
 8009572:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8009574:	4b3b      	ldr	r3, [pc, #236]	; (8009664 <Adc_Init+0x128>)
 8009576:	2201      	movs	r2, #1
 8009578:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800957a:	4b3a      	ldr	r3, [pc, #232]	; (8009664 <Adc_Init+0x128>)
 800957c:	2201      	movs	r2, #1
 800957e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009580:	4b38      	ldr	r3, [pc, #224]	; (8009664 <Adc_Init+0x128>)
 8009582:	2200      	movs	r2, #0
 8009584:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009588:	4b36      	ldr	r3, [pc, #216]	; (8009664 <Adc_Init+0x128>)
 800958a:	2200      	movs	r2, #0
 800958c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800958e:	4b35      	ldr	r3, [pc, #212]	; (8009664 <Adc_Init+0x128>)
 8009590:	4a36      	ldr	r2, [pc, #216]	; (800966c <Adc_Init+0x130>)
 8009592:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009594:	4b33      	ldr	r3, [pc, #204]	; (8009664 <Adc_Init+0x128>)
 8009596:	2200      	movs	r2, #0
 8009598:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 3;
 800959a:	4b32      	ldr	r3, [pc, #200]	; (8009664 <Adc_Init+0x128>)
 800959c:	2203      	movs	r2, #3
 800959e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80095a0:	4b30      	ldr	r3, [pc, #192]	; (8009664 <Adc_Init+0x128>)
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80095a8:	4b2e      	ldr	r3, [pc, #184]	; (8009664 <Adc_Init+0x128>)
 80095aa:	2201      	movs	r2, #1
 80095ac:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80095ae:	482d      	ldr	r0, [pc, #180]	; (8009664 <Adc_Init+0x128>)
 80095b0:	f7fa fbc0 	bl	8003d34 <HAL_ADC_Init>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d002      	beq.n	80095c0 <Adc_Init+0x84>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 80095ba:	482a      	ldr	r0, [pc, #168]	; (8009664 <Adc_Init+0x128>)
 80095bc:	f7ff fefc 	bl	80093b8 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80095c0:	4b2b      	ldr	r3, [pc, #172]	; (8009670 <Adc_Init+0x134>)
 80095c2:	613b      	str	r3, [r7, #16]
	AnalogWDGConfig.HighThreshold = 3000;
 80095c4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80095c8:	617b      	str	r3, [r7, #20]
	AnalogWDGConfig.LowThreshold = 0;
 80095ca:	2300      	movs	r3, #0
 80095cc:	61bb      	str	r3, [r7, #24]
	AnalogWDGConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80095ce:	4b29      	ldr	r3, [pc, #164]	; (8009674 <Adc_Init+0x138>)
 80095d0:	61fb      	str	r3, [r7, #28]
	AnalogWDGConfig.ITMode = ENABLE;
 80095d2:	2301      	movs	r3, #1
 80095d4:	f887 3020 	strb.w	r3, [r7, #32]
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80095d8:	f107 0310 	add.w	r3, r7, #16
 80095dc:	4619      	mov	r1, r3
 80095de:	4821      	ldr	r0, [pc, #132]	; (8009664 <Adc_Init+0x128>)
 80095e0:	f7fa ff94 	bl	800450c <HAL_ADC_AnalogWDGConfig>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d002      	beq.n	80095f0 <Adc_Init+0xb4>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 80095ea:	481e      	ldr	r0, [pc, #120]	; (8009664 <Adc_Init+0x128>)
 80095ec:	f7ff fee4 	bl	80093b8 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_13;
 80095f0:	230d      	movs	r3, #13
 80095f2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80095f4:	2301      	movs	r3, #1
 80095f6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80095f8:	2307      	movs	r3, #7
 80095fa:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80095fc:	463b      	mov	r3, r7
 80095fe:	4619      	mov	r1, r3
 8009600:	4818      	ldr	r0, [pc, #96]	; (8009664 <Adc_Init+0x128>)
 8009602:	f7fa fe51 	bl	80042a8 <HAL_ADC_ConfigChannel>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <Adc_Init+0xd6>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800960c:	4815      	ldr	r0, [pc, #84]	; (8009664 <Adc_Init+0x128>)
 800960e:	f7ff fed3 	bl	80093b8 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_12;
 8009612:	230c      	movs	r3, #12
 8009614:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8009616:	2302      	movs	r3, #2
 8009618:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800961a:	463b      	mov	r3, r7
 800961c:	4619      	mov	r1, r3
 800961e:	4811      	ldr	r0, [pc, #68]	; (8009664 <Adc_Init+0x128>)
 8009620:	f7fa fe42 	bl	80042a8 <HAL_ADC_ConfigChannel>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d002      	beq.n	8009630 <Adc_Init+0xf4>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800962a:	480e      	ldr	r0, [pc, #56]	; (8009664 <Adc_Init+0x128>)
 800962c:	f7ff fec4 	bl	80093b8 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8009630:	4b10      	ldr	r3, [pc, #64]	; (8009674 <Adc_Init+0x138>)
 8009632:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 8009634:	2303      	movs	r3, #3
 8009636:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009638:	463b      	mov	r3, r7
 800963a:	4619      	mov	r1, r3
 800963c:	4809      	ldr	r0, [pc, #36]	; (8009664 <Adc_Init+0x128>)
 800963e:	f7fa fe33 	bl	80042a8 <HAL_ADC_ConfigChannel>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <Adc_Init+0x112>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8009648:	4806      	ldr	r0, [pc, #24]	; (8009664 <Adc_Init+0x128>)
 800964a:	f7ff feb5 	bl	80093b8 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	HAL_ADC_Start_DMA(&hadc1, Adc_ChannelOne_Buffer, ADC_BUFFER_LENGTH);
 800964e:	2203      	movs	r2, #3
 8009650:	4909      	ldr	r1, [pc, #36]	; (8009678 <Adc_Init+0x13c>)
 8009652:	4804      	ldr	r0, [pc, #16]	; (8009664 <Adc_Init+0x128>)
 8009654:	f7fa fd24 	bl	80040a0 <HAL_ADC_Start_DMA>
	return E_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3728      	adds	r7, #40	; 0x28
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	20000130 	.word	0x20000130
 8009668:	40012000 	.word	0x40012000
 800966c:	0f000001 	.word	0x0f000001
 8009670:	00800200 	.word	0x00800200
 8009674:	10000012 	.word	0x10000012
 8009678:	200006a4 	.word	0x200006a4

0800967c <Port_Init>:
/***********************************************************************************
* Function: Port_Init										       				   *
* Description: Initialize the peripheral.									 	   *
************************************************************************************/
StdReturnType Port_Init()
{
 800967c:	b580      	push	{r7, lr}
 800967e:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8009680:	f7f9 fc9e 	bl	8002fc0 <MX_GPIO_Init>
	return E_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	bd80      	pop	{r7, pc}
 800968a:	0000      	movs	r0, r0
 800968c:	0000      	movs	r0, r0
	...

08009690 <HAL_TIM_IC_CaptureCallback>:
/***********************************************************************************
* Function: HAL_TIM_IC_CaptureCallback										   	   *
* Description: Input capture callback to process information received.		 	   *
************************************************************************************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
	/* If channel 3 requests. */
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	7f1b      	ldrb	r3, [r3, #28]
 800969c:	2b01      	cmp	r3, #1
 800969e:	f040 8081 	bne.w	80097a4 <HAL_TIM_IC_CaptureCallback+0x114>
	{
		/* Check if the first input capture has been received. */
		if (Tim5_InputCaptureFlag_ChannelThree == STD_LOW)
 80096a2:	4b87      	ldr	r3, [pc, #540]	; (80098c0 <HAL_TIM_IC_CaptureCallback+0x230>)
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d11a      	bne.n	80096e0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			/* Store the input capture value. */
			Tim5_InputCompare_ValueOne_ChannelThree = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80096aa:	2100      	movs	r1, #0
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7fe f869 	bl	8007784 <HAL_TIM_ReadCapturedValue>
 80096b2:	4603      	mov	r3, r0
 80096b4:	4a83      	ldr	r2, [pc, #524]	; (80098c4 <HAL_TIM_IC_CaptureCallback+0x234>)
 80096b6:	6013      	str	r3, [r2, #0]
			/* Set the flag to high. */
			Tim5_InputCaptureFlag_ChannelThree = STD_HIGH;
 80096b8:	4b81      	ldr	r3, [pc, #516]	; (80098c0 <HAL_TIM_IC_CaptureCallback+0x230>)
 80096ba:	2201      	movs	r2, #1
 80096bc:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	6a1a      	ldr	r2, [r3, #32]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f022 020a 	bic.w	r2, r2, #10
 80096cc:	621a      	str	r2, [r3, #32]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6a1a      	ldr	r2, [r3, #32]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f042 0202 	orr.w	r2, r2, #2
 80096dc:	621a      	str	r2, [r3, #32]
 80096de:	e061      	b.n	80097a4 <HAL_TIM_IC_CaptureCallback+0x114>
		}/* If the first input capture has been stored. */
		else if(Tim5_InputCaptureFlag_ChannelThree == STD_HIGH)
 80096e0:	4b77      	ldr	r3, [pc, #476]	; (80098c0 <HAL_TIM_IC_CaptureCallback+0x230>)
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d15d      	bne.n	80097a4 <HAL_TIM_IC_CaptureCallback+0x114>
		{
			/* Store the second input capture. */
			Tim5_InputCompare_ValueTwo_ChannelThree = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80096e8:	2100      	movs	r1, #0
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f7fe f84a 	bl	8007784 <HAL_TIM_ReadCapturedValue>
 80096f0:	4603      	mov	r3, r0
 80096f2:	4a75      	ldr	r2, [pc, #468]	; (80098c8 <HAL_TIM_IC_CaptureCallback+0x238>)
 80096f4:	6013      	str	r3, [r2, #0]
			/* Set the timer counter to 0. */
			__HAL_TIM_SET_COUNTER(htim, 0);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2200      	movs	r2, #0
 80096fc:	625a      	str	r2, [r3, #36]	; 0x24
			/* If the second input capture is greater than the first, then subtract the first one from the second one. */
			if (Tim5_InputCompare_ValueTwo_ChannelThree > Tim5_InputCompare_ValueOne_ChannelThree)
 80096fe:	4b72      	ldr	r3, [pc, #456]	; (80098c8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	4b70      	ldr	r3, [pc, #448]	; (80098c4 <HAL_TIM_IC_CaptureCallback+0x234>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	429a      	cmp	r2, r3
 8009708:	d907      	bls.n	800971a <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Tim5_Difference_ChannelThree = Tim5_InputCompare_ValueTwo_ChannelThree - Tim5_InputCompare_ValueOne_ChannelThree;
 800970a:	4b6f      	ldr	r3, [pc, #444]	; (80098c8 <HAL_TIM_IC_CaptureCallback+0x238>)
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	4b6d      	ldr	r3, [pc, #436]	; (80098c4 <HAL_TIM_IC_CaptureCallback+0x234>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	4a6d      	ldr	r2, [pc, #436]	; (80098cc <HAL_TIM_IC_CaptureCallback+0x23c>)
 8009716:	6013      	str	r3, [r2, #0]
 8009718:	e00d      	b.n	8009736 <HAL_TIM_IC_CaptureCallback+0xa6>
			}/* Else subtract the first value from maximum uint32 value and add the second value. */
			else if(Tim5_InputCompare_ValueOne_ChannelThree > Tim5_InputCompare_ValueTwo_ChannelThree)
 800971a:	4b6a      	ldr	r3, [pc, #424]	; (80098c4 <HAL_TIM_IC_CaptureCallback+0x234>)
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	4b6a      	ldr	r3, [pc, #424]	; (80098c8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	429a      	cmp	r2, r3
 8009724:	d907      	bls.n	8009736 <HAL_TIM_IC_CaptureCallback+0xa6>
			{
				Tim5_Difference_ChannelThree = (0xFFFFFFFF - Tim5_InputCompare_ValueOne_ChannelThree) + Tim5_InputCompare_ValueTwo_ChannelThree;
 8009726:	4b68      	ldr	r3, [pc, #416]	; (80098c8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	4b66      	ldr	r3, [pc, #408]	; (80098c4 <HAL_TIM_IC_CaptureCallback+0x234>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	1ad3      	subs	r3, r2, r3
 8009730:	3b01      	subs	r3, #1
 8009732:	4a66      	ldr	r2, [pc, #408]	; (80098cc <HAL_TIM_IC_CaptureCallback+0x23c>)
 8009734:	6013      	str	r3, [r2, #0]
			else
			{
				/* do nothing */
			}
			/* Calculate the distance the sound traveled between the first measurement and the second. */
			Tim5_CalculatedDistance_ChannelThree = Tim5_Difference_ChannelThree * 0.034 / 2;
 8009736:	4b65      	ldr	r3, [pc, #404]	; (80098cc <HAL_TIM_IC_CaptureCallback+0x23c>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4618      	mov	r0, r3
 800973c:	f7f6 fe9a 	bl	8000474 <__aeabi_ui2d>
 8009740:	a35d      	add	r3, pc, #372	; (adr r3, 80098b8 <HAL_TIM_IC_CaptureCallback+0x228>)
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	f7f6 ff0f 	bl	8000568 <__aeabi_dmul>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	4610      	mov	r0, r2
 8009750:	4619      	mov	r1, r3
 8009752:	f04f 0200 	mov.w	r2, #0
 8009756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800975a:	f7f7 f82f 	bl	80007bc <__aeabi_ddiv>
 800975e:	4602      	mov	r2, r0
 8009760:	460b      	mov	r3, r1
 8009762:	4610      	mov	r0, r2
 8009764:	4619      	mov	r1, r3
 8009766:	f7f7 f911 	bl	800098c <__aeabi_d2uiz>
 800976a:	4603      	mov	r3, r0
 800976c:	b2da      	uxtb	r2, r3
 800976e:	4b58      	ldr	r3, [pc, #352]	; (80098d0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8009770:	701a      	strb	r2, [r3, #0]
			/* Set the flag to low. */
			Tim5_InputCaptureFlag_ChannelThree = STD_LOW;
 8009772:	4b53      	ldr	r3, [pc, #332]	; (80098c0 <HAL_TIM_IC_CaptureCallback+0x230>)
 8009774:	2200      	movs	r2, #0
 8009776:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6a1a      	ldr	r2, [r3, #32]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f022 020a 	bic.w	r2, r2, #10
 8009786:	621a      	str	r2, [r3, #32]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6a12      	ldr	r2, [r2, #32]
 8009792:	621a      	str	r2, [r3, #32]
			/* Disable the interrupt for the timer 5 channel 3. */
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC1);
 8009794:	4b4f      	ldr	r3, [pc, #316]	; (80098d4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68da      	ldr	r2, [r3, #12]
 800979a:	4b4e      	ldr	r3, [pc, #312]	; (80098d4 <HAL_TIM_IC_CaptureCallback+0x244>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f022 0202 	bic.w	r2, r2, #2
 80097a2:	60da      	str	r2, [r3, #12]
		{
			/* do nothing */
		}
	}/* If channel 4 requests. */

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	7f1b      	ldrb	r3, [r3, #28]
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	f040 8081 	bne.w	80098b0 <HAL_TIM_IC_CaptureCallback+0x220>
	{
		/* Check if the first input capture has been received. */
		if (Tim5_InputCaptureFlag_ChannelFour == STD_LOW)
 80097ae:	4b4a      	ldr	r3, [pc, #296]	; (80098d8 <HAL_TIM_IC_CaptureCallback+0x248>)
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d11a      	bne.n	80097ec <HAL_TIM_IC_CaptureCallback+0x15c>
		{
			/* Store the input capture value. */
			Tim5_InputCompare_ValueOne_ChannelFour = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80097b6:	2104      	movs	r1, #4
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f7fd ffe3 	bl	8007784 <HAL_TIM_ReadCapturedValue>
 80097be:	4603      	mov	r3, r0
 80097c0:	4a46      	ldr	r2, [pc, #280]	; (80098dc <HAL_TIM_IC_CaptureCallback+0x24c>)
 80097c2:	6013      	str	r3, [r2, #0]
			/* Set the flag to high. */
			Tim5_InputCaptureFlag_ChannelFour = STD_HIGH;
 80097c4:	4b44      	ldr	r3, [pc, #272]	; (80098d8 <HAL_TIM_IC_CaptureCallback+0x248>)
 80097c6:	2201      	movs	r2, #1
 80097c8:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	6a1a      	ldr	r2, [r3, #32]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80097d8:	621a      	str	r2, [r3, #32]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	6a1a      	ldr	r2, [r3, #32]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f042 0220 	orr.w	r2, r2, #32
 80097e8:	621a      	str	r2, [r3, #32]
	}
	else
	{
		/* do nothing */
	}
}
 80097ea:	e061      	b.n	80098b0 <HAL_TIM_IC_CaptureCallback+0x220>
		else if(Tim5_InputCaptureFlag_ChannelFour == STD_HIGH)
 80097ec:	4b3a      	ldr	r3, [pc, #232]	; (80098d8 <HAL_TIM_IC_CaptureCallback+0x248>)
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d15d      	bne.n	80098b0 <HAL_TIM_IC_CaptureCallback+0x220>
			Tim5_InputCompare_ValueTwo_ChannelFour = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80097f4:	2104      	movs	r1, #4
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f7fd ffc4 	bl	8007784 <HAL_TIM_ReadCapturedValue>
 80097fc:	4603      	mov	r3, r0
 80097fe:	4a38      	ldr	r2, [pc, #224]	; (80098e0 <HAL_TIM_IC_CaptureCallback+0x250>)
 8009800:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2200      	movs	r2, #0
 8009808:	625a      	str	r2, [r3, #36]	; 0x24
			if (Tim5_InputCompare_ValueTwo_ChannelFour > Tim5_InputCompare_ValueOne_ChannelFour)
 800980a:	4b35      	ldr	r3, [pc, #212]	; (80098e0 <HAL_TIM_IC_CaptureCallback+0x250>)
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	4b33      	ldr	r3, [pc, #204]	; (80098dc <HAL_TIM_IC_CaptureCallback+0x24c>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	429a      	cmp	r2, r3
 8009814:	d907      	bls.n	8009826 <HAL_TIM_IC_CaptureCallback+0x196>
				Tim5_Difference_ChannelFour = Tim5_InputCompare_ValueTwo_ChannelFour - Tim5_InputCompare_ValueOne_ChannelFour;
 8009816:	4b32      	ldr	r3, [pc, #200]	; (80098e0 <HAL_TIM_IC_CaptureCallback+0x250>)
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	4b30      	ldr	r3, [pc, #192]	; (80098dc <HAL_TIM_IC_CaptureCallback+0x24c>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	4a30      	ldr	r2, [pc, #192]	; (80098e4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8009822:	6013      	str	r3, [r2, #0]
 8009824:	e00d      	b.n	8009842 <HAL_TIM_IC_CaptureCallback+0x1b2>
			else if(Tim5_InputCompare_ValueOne_ChannelFour > Tim5_InputCompare_ValueTwo_ChannelFour)
 8009826:	4b2d      	ldr	r3, [pc, #180]	; (80098dc <HAL_TIM_IC_CaptureCallback+0x24c>)
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	4b2d      	ldr	r3, [pc, #180]	; (80098e0 <HAL_TIM_IC_CaptureCallback+0x250>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	429a      	cmp	r2, r3
 8009830:	d907      	bls.n	8009842 <HAL_TIM_IC_CaptureCallback+0x1b2>
				Tim5_Difference_ChannelFour = (0xFFFFFFFF - Tim5_InputCompare_ValueOne_ChannelFour) + Tim5_InputCompare_ValueTwo_ChannelFour;
 8009832:	4b2b      	ldr	r3, [pc, #172]	; (80098e0 <HAL_TIM_IC_CaptureCallback+0x250>)
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	4b29      	ldr	r3, [pc, #164]	; (80098dc <HAL_TIM_IC_CaptureCallback+0x24c>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	3b01      	subs	r3, #1
 800983e:	4a29      	ldr	r2, [pc, #164]	; (80098e4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8009840:	6013      	str	r3, [r2, #0]
			Tim5_CalculatedDistance_ChannelFour = Tim5_Difference_ChannelFour * 0.034 / 2;
 8009842:	4b28      	ldr	r3, [pc, #160]	; (80098e4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4618      	mov	r0, r3
 8009848:	f7f6 fe14 	bl	8000474 <__aeabi_ui2d>
 800984c:	a31a      	add	r3, pc, #104	; (adr r3, 80098b8 <HAL_TIM_IC_CaptureCallback+0x228>)
 800984e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009852:	f7f6 fe89 	bl	8000568 <__aeabi_dmul>
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
 800985a:	4610      	mov	r0, r2
 800985c:	4619      	mov	r1, r3
 800985e:	f04f 0200 	mov.w	r2, #0
 8009862:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009866:	f7f6 ffa9 	bl	80007bc <__aeabi_ddiv>
 800986a:	4602      	mov	r2, r0
 800986c:	460b      	mov	r3, r1
 800986e:	4610      	mov	r0, r2
 8009870:	4619      	mov	r1, r3
 8009872:	f7f7 f88b 	bl	800098c <__aeabi_d2uiz>
 8009876:	4603      	mov	r3, r0
 8009878:	b2da      	uxtb	r2, r3
 800987a:	4b1b      	ldr	r3, [pc, #108]	; (80098e8 <HAL_TIM_IC_CaptureCallback+0x258>)
 800987c:	701a      	strb	r2, [r3, #0]
			Tim5_InputCaptureFlag_ChannelFour = 0;
 800987e:	4b16      	ldr	r3, [pc, #88]	; (80098d8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8009880:	2200      	movs	r2, #0
 8009882:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6a1a      	ldr	r2, [r3, #32]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009892:	621a      	str	r2, [r3, #32]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6a12      	ldr	r2, [r2, #32]
 800989e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC2);
 80098a0:	4b0c      	ldr	r3, [pc, #48]	; (80098d4 <HAL_TIM_IC_CaptureCallback+0x244>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68da      	ldr	r2, [r3, #12]
 80098a6:	4b0b      	ldr	r3, [pc, #44]	; (80098d4 <HAL_TIM_IC_CaptureCallback+0x244>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f022 0204 	bic.w	r2, r2, #4
 80098ae:	60da      	str	r2, [r3, #12]
}
 80098b0:	bf00      	nop
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	b020c49c 	.word	0xb020c49c
 80098bc:	3fa16872 	.word	0x3fa16872
 80098c0:	200006c0 	.word	0x200006c0
 80098c4:	200006b4 	.word	0x200006b4
 80098c8:	200006b8 	.word	0x200006b8
 80098cc:	200006bc 	.word	0x200006bc
 80098d0:	200006c1 	.word	0x200006c1
 80098d4:	20000548 	.word	0x20000548
 80098d8:	200006d0 	.word	0x200006d0
 80098dc:	200006c4 	.word	0x200006c4
 80098e0:	200006c8 	.word	0x200006c8
 80098e4:	200006cc 	.word	0x200006cc
 80098e8:	200006d1 	.word	0x200006d1

080098ec <Tim_Init>:
/***********************************************************************************
* Function: Tim_Init										   			           *
* Description: Peripheral initialization.									       *
************************************************************************************/
StdReturnType Tim_Init(uint8 TimerChannel)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	4603      	mov	r3, r0
 80098f4:	71fb      	strb	r3, [r7, #7]
	/* Set the timer channel value into a local variable. */
	uint8 localValue = TimerChannel;
 80098f6:	79fb      	ldrb	r3, [r7, #7]
 80098f8:	73fb      	strb	r3, [r7, #15]
	switch(localValue)
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
 80098fc:	3b02      	subs	r3, #2
 80098fe:	2b03      	cmp	r3, #3
 8009900:	f200 81f4 	bhi.w	8009cec <Tim_Init+0x400>
 8009904:	a201      	add	r2, pc, #4	; (adr r2, 800990c <Tim_Init+0x20>)
 8009906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990a:	bf00      	nop
 800990c:	0800991d 	.word	0x0800991d
 8009910:	08009a09 	.word	0x08009a09
 8009914:	08009b2d 	.word	0x08009b2d
 8009918:	08009c03 	.word	0x08009c03
	{
		/* Initialize the timer two. */
		case TIMER_TWO:
			/* Configure the timer parameters. */
			htim2.Instance = TIM2;
 800991c:	4b7a      	ldr	r3, [pc, #488]	; (8009b08 <Tim_Init+0x21c>)
 800991e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009922:	601a      	str	r2, [r3, #0]
			htim2.Init.Prescaler = 1000-1;
 8009924:	4b78      	ldr	r3, [pc, #480]	; (8009b08 <Tim_Init+0x21c>)
 8009926:	f240 32e7 	movw	r2, #999	; 0x3e7
 800992a:	605a      	str	r2, [r3, #4]
			htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800992c:	4b76      	ldr	r3, [pc, #472]	; (8009b08 <Tim_Init+0x21c>)
 800992e:	2200      	movs	r2, #0
 8009930:	609a      	str	r2, [r3, #8]
			htim2.Init.Period = 2000-1;
 8009932:	4b75      	ldr	r3, [pc, #468]	; (8009b08 <Tim_Init+0x21c>)
 8009934:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8009938:	60da      	str	r2, [r3, #12]
			htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800993a:	4b73      	ldr	r3, [pc, #460]	; (8009b08 <Tim_Init+0x21c>)
 800993c:	2200      	movs	r2, #0
 800993e:	611a      	str	r2, [r3, #16]
			htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009940:	4b71      	ldr	r3, [pc, #452]	; (8009b08 <Tim_Init+0x21c>)
 8009942:	2200      	movs	r2, #0
 8009944:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009946:	4870      	ldr	r0, [pc, #448]	; (8009b08 <Tim_Init+0x21c>)
 8009948:	f7fc ff7a 	bl	8006840 <HAL_TIM_Base_Init>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d002      	beq.n	8009958 <Tim_Init+0x6c>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8009952:	486d      	ldr	r0, [pc, #436]	; (8009b08 <Tim_Init+0x21c>)
 8009954:	f000 fa1c 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the timer clock source. */
			sClockSourceConfig2.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009958:	4b6c      	ldr	r3, [pc, #432]	; (8009b0c <Tim_Init+0x220>)
 800995a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800995e:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig2) != HAL_OK)
 8009960:	496a      	ldr	r1, [pc, #424]	; (8009b0c <Tim_Init+0x220>)
 8009962:	4869      	ldr	r0, [pc, #420]	; (8009b08 <Tim_Init+0x21c>)
 8009964:	f7fd fe46 	bl	80075f4 <HAL_TIM_ConfigClockSource>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d002      	beq.n	8009974 <Tim_Init+0x88>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800996e:	4866      	ldr	r0, [pc, #408]	; (8009b08 <Tim_Init+0x21c>)
 8009970:	f000 fa0e 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009974:	4864      	ldr	r0, [pc, #400]	; (8009b08 <Tim_Init+0x21c>)
 8009976:	f7fd f821 	bl	80069bc <HAL_TIM_PWM_Init>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <Tim_Init+0x9a>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8009980:	4861      	ldr	r0, [pc, #388]	; (8009b08 <Tim_Init+0x21c>)
 8009982:	f000 fa05 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the master slave mode and output trigger. */
			sMasterConfig2.MasterOutputTrigger = TIM_TRGO_RESET;
 8009986:	4b62      	ldr	r3, [pc, #392]	; (8009b10 <Tim_Init+0x224>)
 8009988:	2200      	movs	r2, #0
 800998a:	601a      	str	r2, [r3, #0]
			sMasterConfig2.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800998c:	4b60      	ldr	r3, [pc, #384]	; (8009b10 <Tim_Init+0x224>)
 800998e:	2200      	movs	r2, #0
 8009990:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig2) != HAL_OK)
 8009992:	495f      	ldr	r1, [pc, #380]	; (8009b10 <Tim_Init+0x224>)
 8009994:	485c      	ldr	r0, [pc, #368]	; (8009b08 <Tim_Init+0x21c>)
 8009996:	f7fe fbcf 	bl	8008138 <HAL_TIMEx_MasterConfigSynchronization>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d002      	beq.n	80099a6 <Tim_Init+0xba>
			{
				HAL_TIM_ErrorCallback(&htim2);
 80099a0:	4859      	ldr	r0, [pc, #356]	; (8009b08 <Tim_Init+0x21c>)
 80099a2:	f000 f9f5 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the PWM parameters. */
			sConfigOC2.OCMode = TIM_OCMODE_PWM1;
 80099a6:	4b5b      	ldr	r3, [pc, #364]	; (8009b14 <Tim_Init+0x228>)
 80099a8:	2260      	movs	r2, #96	; 0x60
 80099aa:	601a      	str	r2, [r3, #0]
			sConfigOC2.Pulse = 0;
 80099ac:	4b59      	ldr	r3, [pc, #356]	; (8009b14 <Tim_Init+0x228>)
 80099ae:	2200      	movs	r2, #0
 80099b0:	605a      	str	r2, [r3, #4]
			sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 80099b2:	4b58      	ldr	r3, [pc, #352]	; (8009b14 <Tim_Init+0x228>)
 80099b4:	2200      	movs	r2, #0
 80099b6:	609a      	str	r2, [r3, #8]
			sConfigOC2.OCFastMode = TIM_OCFAST_ENABLE;
 80099b8:	4b56      	ldr	r3, [pc, #344]	; (8009b14 <Tim_Init+0x228>)
 80099ba:	2204      	movs	r2, #4
 80099bc:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_1) != HAL_OK)
 80099be:	2200      	movs	r2, #0
 80099c0:	4954      	ldr	r1, [pc, #336]	; (8009b14 <Tim_Init+0x228>)
 80099c2:	4851      	ldr	r0, [pc, #324]	; (8009b08 <Tim_Init+0x21c>)
 80099c4:	f7fd fd54 	bl	8007470 <HAL_TIM_PWM_ConfigChannel>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d002      	beq.n	80099d4 <Tim_Init+0xe8>
			{
				HAL_TIM_ErrorCallback(&htim2);
 80099ce:	484e      	ldr	r0, [pc, #312]	; (8009b08 <Tim_Init+0x21c>)
 80099d0:	f000 f9de 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_2) != HAL_OK)
 80099d4:	2204      	movs	r2, #4
 80099d6:	494f      	ldr	r1, [pc, #316]	; (8009b14 <Tim_Init+0x228>)
 80099d8:	484b      	ldr	r0, [pc, #300]	; (8009b08 <Tim_Init+0x21c>)
 80099da:	f7fd fd49 	bl	8007470 <HAL_TIM_PWM_ConfigChannel>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d002      	beq.n	80099ea <Tim_Init+0xfe>
			{
				HAL_TIM_ErrorCallback(&htim2);
 80099e4:	4848      	ldr	r0, [pc, #288]	; (8009b08 <Tim_Init+0x21c>)
 80099e6:	f000 f9d3 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_3) != HAL_OK)
 80099ea:	2208      	movs	r2, #8
 80099ec:	4949      	ldr	r1, [pc, #292]	; (8009b14 <Tim_Init+0x228>)
 80099ee:	4846      	ldr	r0, [pc, #280]	; (8009b08 <Tim_Init+0x21c>)
 80099f0:	f7fd fd3e 	bl	8007470 <HAL_TIM_PWM_ConfigChannel>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d002      	beq.n	8009a00 <Tim_Init+0x114>
			{
				HAL_TIM_ErrorCallback(&htim2);
 80099fa:	4843      	ldr	r0, [pc, #268]	; (8009b08 <Tim_Init+0x21c>)
 80099fc:	f000 f9c8 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the GPIO. */
			HAL_TIM_MspPostInit(&htim2);
 8009a00:	4841      	ldr	r0, [pc, #260]	; (8009b08 <Tim_Init+0x21c>)
 8009a02:	f7f9 fe7d 	bl	8003700 <HAL_TIM_MspPostInit>

			break;
 8009a06:	e174      	b.n	8009cf2 <Tim_Init+0x406>
		/* Initialize the timer three. */
		case TIMER_THREE:
			/* Configure the timer parameters. */
			htim3.Instance = TIM3;
 8009a08:	4b43      	ldr	r3, [pc, #268]	; (8009b18 <Tim_Init+0x22c>)
 8009a0a:	4a44      	ldr	r2, [pc, #272]	; (8009b1c <Tim_Init+0x230>)
 8009a0c:	601a      	str	r2, [r3, #0]
			htim3.Init.Prescaler = 1000-1;
 8009a0e:	4b42      	ldr	r3, [pc, #264]	; (8009b18 <Tim_Init+0x22c>)
 8009a10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009a14:	605a      	str	r2, [r3, #4]
			htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a16:	4b40      	ldr	r3, [pc, #256]	; (8009b18 <Tim_Init+0x22c>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	609a      	str	r2, [r3, #8]
			htim3.Init.Period = 2000-1;
 8009a1c:	4b3e      	ldr	r3, [pc, #248]	; (8009b18 <Tim_Init+0x22c>)
 8009a1e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8009a22:	60da      	str	r2, [r3, #12]
			htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a24:	4b3c      	ldr	r3, [pc, #240]	; (8009b18 <Tim_Init+0x22c>)
 8009a26:	2200      	movs	r2, #0
 8009a28:	611a      	str	r2, [r3, #16]
			htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a2a:	4b3b      	ldr	r3, [pc, #236]	; (8009b18 <Tim_Init+0x22c>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009a30:	4839      	ldr	r0, [pc, #228]	; (8009b18 <Tim_Init+0x22c>)
 8009a32:	f7fc ff05 	bl	8006840 <HAL_TIM_Base_Init>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d002      	beq.n	8009a42 <Tim_Init+0x156>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009a3c:	4836      	ldr	r0, [pc, #216]	; (8009b18 <Tim_Init+0x22c>)
 8009a3e:	f000 f9a7 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Set the clock source. */
			sClockSourceConfig3.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009a42:	4b37      	ldr	r3, [pc, #220]	; (8009b20 <Tim_Init+0x234>)
 8009a44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009a48:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig3) != HAL_OK)
 8009a4a:	4935      	ldr	r1, [pc, #212]	; (8009b20 <Tim_Init+0x234>)
 8009a4c:	4832      	ldr	r0, [pc, #200]	; (8009b18 <Tim_Init+0x22c>)
 8009a4e:	f7fd fdd1 	bl	80075f4 <HAL_TIM_ConfigClockSource>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d002      	beq.n	8009a5e <Tim_Init+0x172>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009a58:	482f      	ldr	r0, [pc, #188]	; (8009b18 <Tim_Init+0x22c>)
 8009a5a:	f000 f999 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009a5e:	482e      	ldr	r0, [pc, #184]	; (8009b18 <Tim_Init+0x22c>)
 8009a60:	f7fc ffac 	bl	80069bc <HAL_TIM_PWM_Init>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d002      	beq.n	8009a70 <Tim_Init+0x184>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009a6a:	482b      	ldr	r0, [pc, #172]	; (8009b18 <Tim_Init+0x22c>)
 8009a6c:	f000 f990 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure master slave mode. */
			sMasterConfig3.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a70:	4b2c      	ldr	r3, [pc, #176]	; (8009b24 <Tim_Init+0x238>)
 8009a72:	2200      	movs	r2, #0
 8009a74:	601a      	str	r2, [r3, #0]
			sMasterConfig3.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a76:	4b2b      	ldr	r3, [pc, #172]	; (8009b24 <Tim_Init+0x238>)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig3) != HAL_OK)
 8009a7c:	4929      	ldr	r1, [pc, #164]	; (8009b24 <Tim_Init+0x238>)
 8009a7e:	4826      	ldr	r0, [pc, #152]	; (8009b18 <Tim_Init+0x22c>)
 8009a80:	f7fe fb5a 	bl	8008138 <HAL_TIMEx_MasterConfigSynchronization>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d002      	beq.n	8009a90 <Tim_Init+0x1a4>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009a8a:	4823      	ldr	r0, [pc, #140]	; (8009b18 <Tim_Init+0x22c>)
 8009a8c:	f000 f980 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure PWM parameters. */
			sConfigOC3.OCMode = TIM_OCMODE_PWM1;
 8009a90:	4b25      	ldr	r3, [pc, #148]	; (8009b28 <Tim_Init+0x23c>)
 8009a92:	2260      	movs	r2, #96	; 0x60
 8009a94:	601a      	str	r2, [r3, #0]
			sConfigOC3.Pulse = 0;
 8009a96:	4b24      	ldr	r3, [pc, #144]	; (8009b28 <Tim_Init+0x23c>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	605a      	str	r2, [r3, #4]
			sConfigOC3.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009a9c:	4b22      	ldr	r3, [pc, #136]	; (8009b28 <Tim_Init+0x23c>)
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	609a      	str	r2, [r3, #8]
			sConfigOC3.OCFastMode = TIM_OCFAST_ENABLE;
 8009aa2:	4b21      	ldr	r3, [pc, #132]	; (8009b28 <Tim_Init+0x23c>)
 8009aa4:	2204      	movs	r2, #4
 8009aa6:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_1) != HAL_OK)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	491f      	ldr	r1, [pc, #124]	; (8009b28 <Tim_Init+0x23c>)
 8009aac:	481a      	ldr	r0, [pc, #104]	; (8009b18 <Tim_Init+0x22c>)
 8009aae:	f7fd fcdf 	bl	8007470 <HAL_TIM_PWM_ConfigChannel>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d002      	beq.n	8009abe <Tim_Init+0x1d2>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009ab8:	4817      	ldr	r0, [pc, #92]	; (8009b18 <Tim_Init+0x22c>)
 8009aba:	f000 f969 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_2) != HAL_OK)
 8009abe:	2204      	movs	r2, #4
 8009ac0:	4919      	ldr	r1, [pc, #100]	; (8009b28 <Tim_Init+0x23c>)
 8009ac2:	4815      	ldr	r0, [pc, #84]	; (8009b18 <Tim_Init+0x22c>)
 8009ac4:	f7fd fcd4 	bl	8007470 <HAL_TIM_PWM_ConfigChannel>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d002      	beq.n	8009ad4 <Tim_Init+0x1e8>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009ace:	4812      	ldr	r0, [pc, #72]	; (8009b18 <Tim_Init+0x22c>)
 8009ad0:	f000 f95e 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_3) != HAL_OK)
 8009ad4:	2208      	movs	r2, #8
 8009ad6:	4914      	ldr	r1, [pc, #80]	; (8009b28 <Tim_Init+0x23c>)
 8009ad8:	480f      	ldr	r0, [pc, #60]	; (8009b18 <Tim_Init+0x22c>)
 8009ada:	f7fd fcc9 	bl	8007470 <HAL_TIM_PWM_ConfigChannel>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d002      	beq.n	8009aea <Tim_Init+0x1fe>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009ae4:	480c      	ldr	r0, [pc, #48]	; (8009b18 <Tim_Init+0x22c>)
 8009ae6:	f000 f953 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_4) != HAL_OK)
 8009aea:	220c      	movs	r2, #12
 8009aec:	490e      	ldr	r1, [pc, #56]	; (8009b28 <Tim_Init+0x23c>)
 8009aee:	480a      	ldr	r0, [pc, #40]	; (8009b18 <Tim_Init+0x22c>)
 8009af0:	f7fd fcbe 	bl	8007470 <HAL_TIM_PWM_ConfigChannel>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d002      	beq.n	8009b00 <Tim_Init+0x214>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009afa:	4807      	ldr	r0, [pc, #28]	; (8009b18 <Tim_Init+0x22c>)
 8009afc:	f000 f948 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure timer GPIO. */
			HAL_TIM_MspPostInit(&htim3);
 8009b00:	4805      	ldr	r0, [pc, #20]	; (8009b18 <Tim_Init+0x22c>)
 8009b02:	f7f9 fdfd 	bl	8003700 <HAL_TIM_MspPostInit>
			break;
 8009b06:	e0f4      	b.n	8009cf2 <Tim_Init+0x406>
 8009b08:	2000032c 	.word	0x2000032c
 8009b0c:	200006d4 	.word	0x200006d4
 8009b10:	200006e4 	.word	0x200006e4
 8009b14:	200006ec 	.word	0x200006ec
 8009b18:	200003e0 	.word	0x200003e0
 8009b1c:	40000400 	.word	0x40000400
 8009b20:	20000740 	.word	0x20000740
 8009b24:	20000750 	.word	0x20000750
 8009b28:	20000708 	.word	0x20000708
		/* Initialize the timer four. */
		case TIMER_FOUR:
			/* Configure timer parameters. */
			htim4.Instance = TIM4;
 8009b2c:	4b73      	ldr	r3, [pc, #460]	; (8009cfc <Tim_Init+0x410>)
 8009b2e:	4a74      	ldr	r2, [pc, #464]	; (8009d00 <Tim_Init+0x414>)
 8009b30:	601a      	str	r2, [r3, #0]
			htim4.Init.Prescaler = 10000-1;
 8009b32:	4b72      	ldr	r3, [pc, #456]	; (8009cfc <Tim_Init+0x410>)
 8009b34:	f242 720f 	movw	r2, #9999	; 0x270f
 8009b38:	605a      	str	r2, [r3, #4]
			htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b3a:	4b70      	ldr	r3, [pc, #448]	; (8009cfc <Tim_Init+0x410>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	609a      	str	r2, [r3, #8]
			htim4.Init.Period = 1000-1;
 8009b40:	4b6e      	ldr	r3, [pc, #440]	; (8009cfc <Tim_Init+0x410>)
 8009b42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009b46:	60da      	str	r2, [r3, #12]
			htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009b48:	4b6c      	ldr	r3, [pc, #432]	; (8009cfc <Tim_Init+0x410>)
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	611a      	str	r2, [r3, #16]
			htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b4e:	4b6b      	ldr	r3, [pc, #428]	; (8009cfc <Tim_Init+0x410>)
 8009b50:	2200      	movs	r2, #0
 8009b52:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009b54:	4869      	ldr	r0, [pc, #420]	; (8009cfc <Tim_Init+0x410>)
 8009b56:	f7fc fe73 	bl	8006840 <HAL_TIM_Base_Init>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d002      	beq.n	8009b66 <Tim_Init+0x27a>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009b60:	4866      	ldr	r0, [pc, #408]	; (8009cfc <Tim_Init+0x410>)
 8009b62:	f000 f915 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the clock source. */
			sClockSourceConfig4.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009b66:	4b67      	ldr	r3, [pc, #412]	; (8009d04 <Tim_Init+0x418>)
 8009b68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009b6c:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig4) != HAL_OK)
 8009b6e:	4965      	ldr	r1, [pc, #404]	; (8009d04 <Tim_Init+0x418>)
 8009b70:	4862      	ldr	r0, [pc, #392]	; (8009cfc <Tim_Init+0x410>)
 8009b72:	f7fd fd3f 	bl	80075f4 <HAL_TIM_ConfigClockSource>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d002      	beq.n	8009b82 <Tim_Init+0x296>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009b7c:	485f      	ldr	r0, [pc, #380]	; (8009cfc <Tim_Init+0x410>)
 8009b7e:	f000 f907 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009b82:	485e      	ldr	r0, [pc, #376]	; (8009cfc <Tim_Init+0x410>)
 8009b84:	f7fc ff1a 	bl	80069bc <HAL_TIM_PWM_Init>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d002      	beq.n	8009b94 <Tim_Init+0x2a8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009b8e:	485b      	ldr	r0, [pc, #364]	; (8009cfc <Tim_Init+0x410>)
 8009b90:	f000 f8fe 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the master slave mode. */
			sMasterConfig4.MasterOutputTrigger = TIM_TRGO_RESET;
 8009b94:	4b5c      	ldr	r3, [pc, #368]	; (8009d08 <Tim_Init+0x41c>)
 8009b96:	2200      	movs	r2, #0
 8009b98:	601a      	str	r2, [r3, #0]
			sMasterConfig4.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b9a:	4b5b      	ldr	r3, [pc, #364]	; (8009d08 <Tim_Init+0x41c>)
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig4) != HAL_OK)
 8009ba0:	4959      	ldr	r1, [pc, #356]	; (8009d08 <Tim_Init+0x41c>)
 8009ba2:	4856      	ldr	r0, [pc, #344]	; (8009cfc <Tim_Init+0x410>)
 8009ba4:	f7fe fac8 	bl	8008138 <HAL_TIMEx_MasterConfigSynchronization>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d002      	beq.n	8009bb4 <Tim_Init+0x2c8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009bae:	4853      	ldr	r0, [pc, #332]	; (8009cfc <Tim_Init+0x410>)
 8009bb0:	f000 f8ee 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the PWM parameters. */
			sConfigOC4.OCMode = TIM_OCMODE_PWM1;
 8009bb4:	4b55      	ldr	r3, [pc, #340]	; (8009d0c <Tim_Init+0x420>)
 8009bb6:	2260      	movs	r2, #96	; 0x60
 8009bb8:	601a      	str	r2, [r3, #0]
			sConfigOC4.Pulse = 999;
 8009bba:	4b54      	ldr	r3, [pc, #336]	; (8009d0c <Tim_Init+0x420>)
 8009bbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009bc0:	605a      	str	r2, [r3, #4]
			sConfigOC4.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009bc2:	4b52      	ldr	r3, [pc, #328]	; (8009d0c <Tim_Init+0x420>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	609a      	str	r2, [r3, #8]
			sConfigOC4.OCFastMode = TIM_OCFAST_DISABLE;
 8009bc8:	4b50      	ldr	r3, [pc, #320]	; (8009d0c <Tim_Init+0x420>)
 8009bca:	2200      	movs	r2, #0
 8009bcc:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC4, TIM_CHANNEL_3) != HAL_OK)
 8009bce:	2208      	movs	r2, #8
 8009bd0:	494e      	ldr	r1, [pc, #312]	; (8009d0c <Tim_Init+0x420>)
 8009bd2:	484a      	ldr	r0, [pc, #296]	; (8009cfc <Tim_Init+0x410>)
 8009bd4:	f7fd fc4c 	bl	8007470 <HAL_TIM_PWM_ConfigChannel>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d002      	beq.n	8009be4 <Tim_Init+0x2f8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009bde:	4847      	ldr	r0, [pc, #284]	; (8009cfc <Tim_Init+0x410>)
 8009be0:	f000 f8d6 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC4, TIM_CHANNEL_4) != HAL_OK)
 8009be4:	220c      	movs	r2, #12
 8009be6:	4949      	ldr	r1, [pc, #292]	; (8009d0c <Tim_Init+0x420>)
 8009be8:	4844      	ldr	r0, [pc, #272]	; (8009cfc <Tim_Init+0x410>)
 8009bea:	f7fd fc41 	bl	8007470 <HAL_TIM_PWM_ConfigChannel>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d002      	beq.n	8009bfa <Tim_Init+0x30e>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009bf4:	4841      	ldr	r0, [pc, #260]	; (8009cfc <Tim_Init+0x410>)
 8009bf6:	f000 f8cb 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the timer GPIO. */
			HAL_TIM_MspPostInit(&htim4);
 8009bfa:	4840      	ldr	r0, [pc, #256]	; (8009cfc <Tim_Init+0x410>)
 8009bfc:	f7f9 fd80 	bl	8003700 <HAL_TIM_MspPostInit>
			break;
 8009c00:	e077      	b.n	8009cf2 <Tim_Init+0x406>
		/* Initialize the timer five. */
		case TIMER_FIVE:
			htim5.Instance = TIM5;
 8009c02:	4b43      	ldr	r3, [pc, #268]	; (8009d10 <Tim_Init+0x424>)
 8009c04:	4a43      	ldr	r2, [pc, #268]	; (8009d14 <Tim_Init+0x428>)
 8009c06:	601a      	str	r2, [r3, #0]
			htim5.Init.Prescaler = 100-1;
 8009c08:	4b41      	ldr	r3, [pc, #260]	; (8009d10 <Tim_Init+0x424>)
 8009c0a:	2263      	movs	r2, #99	; 0x63
 8009c0c:	605a      	str	r2, [r3, #4]
			htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c0e:	4b40      	ldr	r3, [pc, #256]	; (8009d10 <Tim_Init+0x424>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	609a      	str	r2, [r3, #8]
			htim5.Init.Period = 0xffffffff;
 8009c14:	4b3e      	ldr	r3, [pc, #248]	; (8009d10 <Tim_Init+0x424>)
 8009c16:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1a:	60da      	str	r2, [r3, #12]
			htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c1c:	4b3c      	ldr	r3, [pc, #240]	; (8009d10 <Tim_Init+0x424>)
 8009c1e:	2200      	movs	r2, #0
 8009c20:	611a      	str	r2, [r3, #16]
			htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c22:	4b3b      	ldr	r3, [pc, #236]	; (8009d10 <Tim_Init+0x424>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	619a      	str	r2, [r3, #24]
			if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8009c28:	4839      	ldr	r0, [pc, #228]	; (8009d10 <Tim_Init+0x424>)
 8009c2a:	f7fc fe09 	bl	8006840 <HAL_TIM_Base_Init>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d002      	beq.n	8009c3a <Tim_Init+0x34e>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009c34:	4836      	ldr	r0, [pc, #216]	; (8009d10 <Tim_Init+0x424>)
 8009c36:	f000 f8ab 	bl	8009d90 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sClockSourceConfig5.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009c3a:	4b37      	ldr	r3, [pc, #220]	; (8009d18 <Tim_Init+0x42c>)
 8009c3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009c40:	601a      	str	r2, [r3, #0]
			if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig5) != HAL_OK)
 8009c42:	4935      	ldr	r1, [pc, #212]	; (8009d18 <Tim_Init+0x42c>)
 8009c44:	4832      	ldr	r0, [pc, #200]	; (8009d10 <Tim_Init+0x424>)
 8009c46:	f7fd fcd5 	bl	80075f4 <HAL_TIM_ConfigClockSource>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d002      	beq.n	8009c56 <Tim_Init+0x36a>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009c50:	482f      	ldr	r0, [pc, #188]	; (8009d10 <Tim_Init+0x424>)
 8009c52:	f000 f89d 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8009c56:	482e      	ldr	r0, [pc, #184]	; (8009d10 <Tim_Init+0x424>)
 8009c58:	f7fd f8c6 	bl	8006de8 <HAL_TIM_IC_Init>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d002      	beq.n	8009c68 <Tim_Init+0x37c>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009c62:	482b      	ldr	r0, [pc, #172]	; (8009d10 <Tim_Init+0x424>)
 8009c64:	f000 f894 	bl	8009d90 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sMasterConfig5.MasterOutputTrigger = TIM_TRGO_RESET;
 8009c68:	4b2c      	ldr	r3, [pc, #176]	; (8009d1c <Tim_Init+0x430>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	601a      	str	r2, [r3, #0]
			sMasterConfig5.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c6e:	4b2b      	ldr	r3, [pc, #172]	; (8009d1c <Tim_Init+0x430>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	605a      	str	r2, [r3, #4]
			if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig5) != HAL_OK)
 8009c74:	4929      	ldr	r1, [pc, #164]	; (8009d1c <Tim_Init+0x430>)
 8009c76:	4826      	ldr	r0, [pc, #152]	; (8009d10 <Tim_Init+0x424>)
 8009c78:	f7fe fa5e 	bl	8008138 <HAL_TIMEx_MasterConfigSynchronization>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d002      	beq.n	8009c88 <Tim_Init+0x39c>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009c82:	4823      	ldr	r0, [pc, #140]	; (8009d10 <Tim_Init+0x424>)
 8009c84:	f000 f884 	bl	8009d90 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sConfigIC5.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8009c88:	4b25      	ldr	r3, [pc, #148]	; (8009d20 <Tim_Init+0x434>)
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	601a      	str	r2, [r3, #0]
			sConfigIC5.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8009c8e:	4b24      	ldr	r3, [pc, #144]	; (8009d20 <Tim_Init+0x434>)
 8009c90:	2201      	movs	r2, #1
 8009c92:	605a      	str	r2, [r3, #4]
			sConfigIC5.ICPrescaler = TIM_ICPSC_DIV1;
 8009c94:	4b22      	ldr	r3, [pc, #136]	; (8009d20 <Tim_Init+0x434>)
 8009c96:	2200      	movs	r2, #0
 8009c98:	609a      	str	r2, [r3, #8]
			sConfigIC5.ICFilter = 0;
 8009c9a:	4b21      	ldr	r3, [pc, #132]	; (8009d20 <Tim_Init+0x434>)
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	60da      	str	r2, [r3, #12]
			if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC5, TIM_CHANNEL_1) != HAL_OK)
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	491f      	ldr	r1, [pc, #124]	; (8009d20 <Tim_Init+0x434>)
 8009ca4:	481a      	ldr	r0, [pc, #104]	; (8009d10 <Tim_Init+0x424>)
 8009ca6:	f7fd fb47 	bl	8007338 <HAL_TIM_IC_ConfigChannel>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d002      	beq.n	8009cb6 <Tim_Init+0x3ca>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009cb0:	4817      	ldr	r0, [pc, #92]	; (8009d10 <Tim_Init+0x424>)
 8009cb2:	f000 f86d 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC5, TIM_CHANNEL_2) != HAL_OK)
 8009cb6:	2204      	movs	r2, #4
 8009cb8:	4919      	ldr	r1, [pc, #100]	; (8009d20 <Tim_Init+0x434>)
 8009cba:	4815      	ldr	r0, [pc, #84]	; (8009d10 <Tim_Init+0x424>)
 8009cbc:	f7fd fb3c 	bl	8007338 <HAL_TIM_IC_ConfigChannel>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d002      	beq.n	8009ccc <Tim_Init+0x3e0>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009cc6:	4812      	ldr	r0, [pc, #72]	; (8009d10 <Tim_Init+0x424>)
 8009cc8:	f000 f862 	bl	8009d90 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if(TimH_MainFunctionFirstCall == STD_LOW)
 8009ccc:	4b15      	ldr	r3, [pc, #84]	; (8009d24 <Tim_Init+0x438>)
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10d      	bne.n	8009cf0 <Tim_Init+0x404>
			{
				HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	480e      	ldr	r0, [pc, #56]	; (8009d10 <Tim_Init+0x424>)
 8009cd8:	f7fd f8ec 	bl	8006eb4 <HAL_TIM_IC_Start_IT>
				HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 8009cdc:	2104      	movs	r1, #4
 8009cde:	480c      	ldr	r0, [pc, #48]	; (8009d10 <Tim_Init+0x424>)
 8009ce0:	f7fd f8e8 	bl	8006eb4 <HAL_TIM_IC_Start_IT>
				TimH_MainFunctionFirstCall = STD_HIGH;
 8009ce4:	4b0f      	ldr	r3, [pc, #60]	; (8009d24 <Tim_Init+0x438>)
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	701a      	strb	r2, [r3, #0]
			else
			{
				/* do nothing */
			}

			break;
 8009cea:	e001      	b.n	8009cf0 <Tim_Init+0x404>
		default:
			break;
 8009cec:	bf00      	nop
 8009cee:	e000      	b.n	8009cf2 <Tim_Init+0x406>
			break;
 8009cf0:	bf00      	nop
	}
	return E_OK;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	20000494 	.word	0x20000494
 8009d00:	40000800 	.word	0x40000800
 8009d04:	20000758 	.word	0x20000758
 8009d08:	20000768 	.word	0x20000768
 8009d0c:	20000724 	.word	0x20000724
 8009d10:	20000548 	.word	0x20000548
 8009d14:	40000c00 	.word	0x40000c00
 8009d18:	20000770 	.word	0x20000770
 8009d1c:	20000780 	.word	0x20000780
 8009d20:	20000788 	.word	0x20000788
 8009d24:	200006d2 	.word	0x200006d2

08009d28 <Tim_DeInit>:
/***********************************************************************************
* Function: Tim_DeInit										   			           *
* Description: Peripheral de-initialization.									   *
************************************************************************************/
StdReturnType Tim_DeInit(uint8 TimerChannel)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	4603      	mov	r3, r0
 8009d30:	71fb      	strb	r3, [r7, #7]
	/* Store the timer channel value into a local variable. */
	uint8 localVariable = TimerChannel;
 8009d32:	79fb      	ldrb	r3, [r7, #7]
 8009d34:	73fb      	strb	r3, [r7, #15]
	/* Process the request for timer de-init. */
	switch(localVariable)
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
 8009d38:	3b02      	subs	r3, #2
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	d81a      	bhi.n	8009d74 <Tim_DeInit+0x4c>
 8009d3e:	a201      	add	r2, pc, #4	; (adr r2, 8009d44 <Tim_DeInit+0x1c>)
 8009d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d44:	08009d55 	.word	0x08009d55
 8009d48:	08009d5d 	.word	0x08009d5d
 8009d4c:	08009d65 	.word	0x08009d65
 8009d50:	08009d6d 	.word	0x08009d6d
	{
		case TIMER_TWO:
			HAL_TIM_Base_MspDeInit(&htim2);
 8009d54:	480a      	ldr	r0, [pc, #40]	; (8009d80 <Tim_DeInit+0x58>)
 8009d56:	f7f9 fd7d 	bl	8003854 <HAL_TIM_Base_MspDeInit>
			break;
 8009d5a:	e00c      	b.n	8009d76 <Tim_DeInit+0x4e>
		case TIMER_THREE:
			HAL_TIM_Base_MspDeInit(&htim3);
 8009d5c:	4809      	ldr	r0, [pc, #36]	; (8009d84 <Tim_DeInit+0x5c>)
 8009d5e:	f7f9 fd79 	bl	8003854 <HAL_TIM_Base_MspDeInit>
			break;
 8009d62:	e008      	b.n	8009d76 <Tim_DeInit+0x4e>
		case TIMER_FOUR:
			HAL_TIM_Base_MspDeInit(&htim4);
 8009d64:	4808      	ldr	r0, [pc, #32]	; (8009d88 <Tim_DeInit+0x60>)
 8009d66:	f7f9 fd75 	bl	8003854 <HAL_TIM_Base_MspDeInit>
			break;
 8009d6a:	e004      	b.n	8009d76 <Tim_DeInit+0x4e>
		case TIMER_FIVE:
			HAL_TIM_Base_MspDeInit(&htim5);
 8009d6c:	4807      	ldr	r0, [pc, #28]	; (8009d8c <Tim_DeInit+0x64>)
 8009d6e:	f7f9 fd71 	bl	8003854 <HAL_TIM_Base_MspDeInit>
			break;
 8009d72:	e000      	b.n	8009d76 <Tim_DeInit+0x4e>
		default:
			break;
 8009d74:	bf00      	nop
	}
	return E_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	2000032c 	.word	0x2000032c
 8009d84:	200003e0 	.word	0x200003e0
 8009d88:	20000494 	.word	0x20000494
 8009d8c:	20000548 	.word	0x20000548

08009d90 <HAL_TIM_ErrorCallback>:
/***********************************************************************************
* Function: HAL_TIM_ErrorCallback										   		   *
* Description: Error callback called when timer fault occurs.					   *
************************************************************************************/
VOID HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
	/* Perform re-initialization of the peripheral in case of error. */
	if(htim->Instance == TIM2)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009da0:	d10c      	bne.n	8009dbc <HAL_TIM_ErrorCallback+0x2c>
	{
		SystemManager_Fault[TIMER2_ERROR]++;
 8009da2:	4b23      	ldr	r3, [pc, #140]	; (8009e30 <HAL_TIM_ErrorCallback+0xa0>)
 8009da4:	7d9b      	ldrb	r3, [r3, #22]
 8009da6:	3301      	adds	r3, #1
 8009da8:	b2da      	uxtb	r2, r3
 8009daa:	4b21      	ldr	r3, [pc, #132]	; (8009e30 <HAL_TIM_ErrorCallback+0xa0>)
 8009dac:	759a      	strb	r2, [r3, #22]
		Tim_DeInit(TIMER_TWO);
 8009dae:	2002      	movs	r0, #2
 8009db0:	f7ff ffba 	bl	8009d28 <Tim_DeInit>
		Tim_Init(TIMER_TWO);
 8009db4:	2002      	movs	r0, #2
 8009db6:	f7ff fd99 	bl	80098ec <Tim_Init>
	}
	else
	{
		/* do nothing */
	}
}
 8009dba:	e034      	b.n	8009e26 <HAL_TIM_ErrorCallback+0x96>
	else if(htim->Instance == TIM3)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a1c      	ldr	r2, [pc, #112]	; (8009e34 <HAL_TIM_ErrorCallback+0xa4>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d10c      	bne.n	8009de0 <HAL_TIM_ErrorCallback+0x50>
		SystemManager_Fault[TIMER3_ERROR]++;
 8009dc6:	4b1a      	ldr	r3, [pc, #104]	; (8009e30 <HAL_TIM_ErrorCallback+0xa0>)
 8009dc8:	7ddb      	ldrb	r3, [r3, #23]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	b2da      	uxtb	r2, r3
 8009dce:	4b18      	ldr	r3, [pc, #96]	; (8009e30 <HAL_TIM_ErrorCallback+0xa0>)
 8009dd0:	75da      	strb	r2, [r3, #23]
		Tim_DeInit(TIMER_THREE);
 8009dd2:	2003      	movs	r0, #3
 8009dd4:	f7ff ffa8 	bl	8009d28 <Tim_DeInit>
		Tim_Init(TIMER_THREE);
 8009dd8:	2003      	movs	r0, #3
 8009dda:	f7ff fd87 	bl	80098ec <Tim_Init>
}
 8009dde:	e022      	b.n	8009e26 <HAL_TIM_ErrorCallback+0x96>
	else if(htim->Instance == TIM4)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a14      	ldr	r2, [pc, #80]	; (8009e38 <HAL_TIM_ErrorCallback+0xa8>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d10c      	bne.n	8009e04 <HAL_TIM_ErrorCallback+0x74>
		SystemManager_Fault[TIMER4_ERROR]++;
 8009dea:	4b11      	ldr	r3, [pc, #68]	; (8009e30 <HAL_TIM_ErrorCallback+0xa0>)
 8009dec:	7e1b      	ldrb	r3, [r3, #24]
 8009dee:	3301      	adds	r3, #1
 8009df0:	b2da      	uxtb	r2, r3
 8009df2:	4b0f      	ldr	r3, [pc, #60]	; (8009e30 <HAL_TIM_ErrorCallback+0xa0>)
 8009df4:	761a      	strb	r2, [r3, #24]
		Tim_DeInit(TIMER_FOUR);
 8009df6:	2004      	movs	r0, #4
 8009df8:	f7ff ff96 	bl	8009d28 <Tim_DeInit>
		Tim_Init(TIMER_FOUR);
 8009dfc:	2004      	movs	r0, #4
 8009dfe:	f7ff fd75 	bl	80098ec <Tim_Init>
}
 8009e02:	e010      	b.n	8009e26 <HAL_TIM_ErrorCallback+0x96>
	else if(htim->Instance == TIM5)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a0c      	ldr	r2, [pc, #48]	; (8009e3c <HAL_TIM_ErrorCallback+0xac>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d10b      	bne.n	8009e26 <HAL_TIM_ErrorCallback+0x96>
		SystemManager_Fault[TIMER5_ERROR]++;
 8009e0e:	4b08      	ldr	r3, [pc, #32]	; (8009e30 <HAL_TIM_ErrorCallback+0xa0>)
 8009e10:	7e5b      	ldrb	r3, [r3, #25]
 8009e12:	3301      	adds	r3, #1
 8009e14:	b2da      	uxtb	r2, r3
 8009e16:	4b06      	ldr	r3, [pc, #24]	; (8009e30 <HAL_TIM_ErrorCallback+0xa0>)
 8009e18:	765a      	strb	r2, [r3, #25]
		Tim_DeInit(TIMER_FIVE);
 8009e1a:	2005      	movs	r0, #5
 8009e1c:	f7ff ff84 	bl	8009d28 <Tim_DeInit>
		Tim_Init(TIMER_FIVE);
 8009e20:	2005      	movs	r0, #5
 8009e22:	f7ff fd63 	bl	80098ec <Tim_Init>
}
 8009e26:	bf00      	nop
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	20005ff4 	.word	0x20005ff4
 8009e34:	40000400 	.word	0x40000400
 8009e38:	40000800 	.word	0x40000800
 8009e3c:	40000c00 	.word	0x40000c00

08009e40 <Tim_MainFunction>:
/***********************************************************************************
* Function: Tim_MainFunction										   			   *
* Description: Peripheral main function.									       *
************************************************************************************/
VOID Tim_MainFunction()
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
	/* Check each timer for error status into local variables. */
	uint32 localStateTimerTwo = HAL_TIM_Base_GetState(&htim2);
 8009e46:	4888      	ldr	r0, [pc, #544]	; (800a068 <Tim_MainFunction+0x228>)
 8009e48:	f7fd fd26 	bl	8007898 <HAL_TIM_Base_GetState>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	60fb      	str	r3, [r7, #12]
	uint32 localStateTimerThree = HAL_TIM_Base_GetState(&htim3);
 8009e50:	4886      	ldr	r0, [pc, #536]	; (800a06c <Tim_MainFunction+0x22c>)
 8009e52:	f7fd fd21 	bl	8007898 <HAL_TIM_Base_GetState>
 8009e56:	4603      	mov	r3, r0
 8009e58:	60bb      	str	r3, [r7, #8]
	uint32 localStateTimerFour = HAL_TIM_Base_GetState(&htim4);
 8009e5a:	4885      	ldr	r0, [pc, #532]	; (800a070 <Tim_MainFunction+0x230>)
 8009e5c:	f7fd fd1c 	bl	8007898 <HAL_TIM_Base_GetState>
 8009e60:	4603      	mov	r3, r0
 8009e62:	607b      	str	r3, [r7, #4]
	uint32 localStateTimerFive = HAL_TIM_Base_GetState(&htim5);
 8009e64:	4883      	ldr	r0, [pc, #524]	; (800a074 <Tim_MainFunction+0x234>)
 8009e66:	f7fd fd17 	bl	8007898 <HAL_TIM_Base_GetState>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	603b      	str	r3, [r7, #0]
	/* Process timers state. */
	switch(localStateTimerFive)
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	d857      	bhi.n	8009f24 <Tim_MainFunction+0xe4>
 8009e74:	a201      	add	r2, pc, #4	; (adr r2, 8009e7c <Tim_MainFunction+0x3c>)
 8009e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7a:	bf00      	nop
 8009e7c:	08009e91 	.word	0x08009e91
 8009e80:	08009ea1 	.word	0x08009ea1
 8009e84:	08009efb 	.word	0x08009efb
 8009e88:	08009f05 	.word	0x08009f05
 8009e8c:	08009f15 	.word	0x08009f15
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerFive = localStateTimerFive;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	b2da      	uxtb	r2, r3
 8009e94:	4b78      	ldr	r3, [pc, #480]	; (800a078 <Tim_MainFunction+0x238>)
 8009e96:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_FIVE);
 8009e98:	2005      	movs	r0, #5
 8009e9a:	f7ff fd27 	bl	80098ec <Tim_Init>
			break;
 8009e9e:	e042      	b.n	8009f26 <Tim_MainFunction+0xe6>
		case HAL_TIM_STATE_READY:
			HAL_GPIO_WritePin(PDCR_TRIG_PORT, PDCR_TRIG_PIN, GPIO_PIN_SET);
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009ea6:	4875      	ldr	r0, [pc, #468]	; (800a07c <Tim_MainFunction+0x23c>)
 8009ea8:	f7fb ff60 	bl	8005d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PDCR_TRIG_PORT, PDCR_TRIG_PIN, GPIO_PIN_RESET);
 8009eac:	2200      	movs	r2, #0
 8009eae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009eb2:	4872      	ldr	r0, [pc, #456]	; (800a07c <Tim_MainFunction+0x23c>)
 8009eb4:	f7fb ff5a 	bl	8005d6c <HAL_GPIO_WritePin>
			__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC2);
 8009eb8:	4b6e      	ldr	r3, [pc, #440]	; (800a074 <Tim_MainFunction+0x234>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68da      	ldr	r2, [r3, #12]
 8009ebe:	4b6d      	ldr	r3, [pc, #436]	; (800a074 <Tim_MainFunction+0x234>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f042 0204 	orr.w	r2, r2, #4
 8009ec6:	60da      	str	r2, [r3, #12]
			HAL_GPIO_WritePin(PDCF_TRIG_PORT, PDCF_TRIG_PIN, GPIO_PIN_SET);
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009ece:	486c      	ldr	r0, [pc, #432]	; (800a080 <Tim_MainFunction+0x240>)
 8009ed0:	f7fb ff4c 	bl	8005d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PDCF_TRIG_PORT, PDCF_TRIG_PIN, GPIO_PIN_RESET);
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009eda:	4869      	ldr	r0, [pc, #420]	; (800a080 <Tim_MainFunction+0x240>)
 8009edc:	f7fb ff46 	bl	8005d6c <HAL_GPIO_WritePin>
			__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC1);
 8009ee0:	4b64      	ldr	r3, [pc, #400]	; (800a074 <Tim_MainFunction+0x234>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68da      	ldr	r2, [r3, #12]
 8009ee6:	4b63      	ldr	r3, [pc, #396]	; (800a074 <Tim_MainFunction+0x234>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f042 0202 	orr.w	r2, r2, #2
 8009eee:	60da      	str	r2, [r3, #12]
			TimH_BswState_TimerFive = localStateTimerFive;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	b2da      	uxtb	r2, r3
 8009ef4:	4b60      	ldr	r3, [pc, #384]	; (800a078 <Tim_MainFunction+0x238>)
 8009ef6:	701a      	strb	r2, [r3, #0]
			break;
 8009ef8:	e015      	b.n	8009f26 <Tim_MainFunction+0xe6>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerFive = localStateTimerFive;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	b2da      	uxtb	r2, r3
 8009efe:	4b5e      	ldr	r3, [pc, #376]	; (800a078 <Tim_MainFunction+0x238>)
 8009f00:	701a      	strb	r2, [r3, #0]
			break;
 8009f02:	e010      	b.n	8009f26 <Tim_MainFunction+0xe6>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerFive = localStateTimerFive;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	b2da      	uxtb	r2, r3
 8009f08:	4b5b      	ldr	r3, [pc, #364]	; (800a078 <Tim_MainFunction+0x238>)
 8009f0a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim5);
 8009f0c:	4859      	ldr	r0, [pc, #356]	; (800a074 <Tim_MainFunction+0x234>)
 8009f0e:	f7ff ff3f 	bl	8009d90 <HAL_TIM_ErrorCallback>
			break;
 8009f12:	e008      	b.n	8009f26 <Tim_MainFunction+0xe6>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerFive = localStateTimerFive;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	4b57      	ldr	r3, [pc, #348]	; (800a078 <Tim_MainFunction+0x238>)
 8009f1a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim5);
 8009f1c:	4855      	ldr	r0, [pc, #340]	; (800a074 <Tim_MainFunction+0x234>)
 8009f1e:	f7ff ff37 	bl	8009d90 <HAL_TIM_ErrorCallback>
			break;
 8009f22:	e000      	b.n	8009f26 <Tim_MainFunction+0xe6>
		default:
			break;
 8009f24:	bf00      	nop
	}
	switch(localStateTimerTwo)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2b04      	cmp	r3, #4
 8009f2a:	d82f      	bhi.n	8009f8c <Tim_MainFunction+0x14c>
 8009f2c:	a201      	add	r2, pc, #4	; (adr r2, 8009f34 <Tim_MainFunction+0xf4>)
 8009f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f32:	bf00      	nop
 8009f34:	08009f49 	.word	0x08009f49
 8009f38:	08009f59 	.word	0x08009f59
 8009f3c:	08009f63 	.word	0x08009f63
 8009f40:	08009f6d 	.word	0x08009f6d
 8009f44:	08009f7d 	.word	0x08009f7d
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	b2da      	uxtb	r2, r3
 8009f4c:	4b4d      	ldr	r3, [pc, #308]	; (800a084 <Tim_MainFunction+0x244>)
 8009f4e:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_TWO);
 8009f50:	2002      	movs	r0, #2
 8009f52:	f7ff fccb 	bl	80098ec <Tim_Init>
			break;
 8009f56:	e01a      	b.n	8009f8e <Tim_MainFunction+0x14e>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	b2da      	uxtb	r2, r3
 8009f5c:	4b49      	ldr	r3, [pc, #292]	; (800a084 <Tim_MainFunction+0x244>)
 8009f5e:	701a      	strb	r2, [r3, #0]
			break;
 8009f60:	e015      	b.n	8009f8e <Tim_MainFunction+0x14e>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	b2da      	uxtb	r2, r3
 8009f66:	4b47      	ldr	r3, [pc, #284]	; (800a084 <Tim_MainFunction+0x244>)
 8009f68:	701a      	strb	r2, [r3, #0]
			break;
 8009f6a:	e010      	b.n	8009f8e <Tim_MainFunction+0x14e>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	b2da      	uxtb	r2, r3
 8009f70:	4b44      	ldr	r3, [pc, #272]	; (800a084 <Tim_MainFunction+0x244>)
 8009f72:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim2);
 8009f74:	483c      	ldr	r0, [pc, #240]	; (800a068 <Tim_MainFunction+0x228>)
 8009f76:	f7ff ff0b 	bl	8009d90 <HAL_TIM_ErrorCallback>
			break;
 8009f7a:	e008      	b.n	8009f8e <Tim_MainFunction+0x14e>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	4b40      	ldr	r3, [pc, #256]	; (800a084 <Tim_MainFunction+0x244>)
 8009f82:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim2);
 8009f84:	4838      	ldr	r0, [pc, #224]	; (800a068 <Tim_MainFunction+0x228>)
 8009f86:	f7ff ff03 	bl	8009d90 <HAL_TIM_ErrorCallback>
			break;
 8009f8a:	e000      	b.n	8009f8e <Tim_MainFunction+0x14e>
		default:
			break;
 8009f8c:	bf00      	nop
	}
	switch(localStateTimerThree)
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	2b04      	cmp	r3, #4
 8009f92:	d82f      	bhi.n	8009ff4 <Tim_MainFunction+0x1b4>
 8009f94:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <Tim_MainFunction+0x15c>)
 8009f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9a:	bf00      	nop
 8009f9c:	08009fb1 	.word	0x08009fb1
 8009fa0:	08009fc1 	.word	0x08009fc1
 8009fa4:	08009fcb 	.word	0x08009fcb
 8009fa8:	08009fd5 	.word	0x08009fd5
 8009fac:	08009fe5 	.word	0x08009fe5
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerThree = localStateTimerThree;
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	b2da      	uxtb	r2, r3
 8009fb4:	4b34      	ldr	r3, [pc, #208]	; (800a088 <Tim_MainFunction+0x248>)
 8009fb6:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_THREE);
 8009fb8:	2003      	movs	r0, #3
 8009fba:	f7ff fc97 	bl	80098ec <Tim_Init>
			break;
 8009fbe:	e01a      	b.n	8009ff6 <Tim_MainFunction+0x1b6>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerThree = localStateTimerThree;
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	4b30      	ldr	r3, [pc, #192]	; (800a088 <Tim_MainFunction+0x248>)
 8009fc6:	701a      	strb	r2, [r3, #0]
			break;
 8009fc8:	e015      	b.n	8009ff6 <Tim_MainFunction+0x1b6>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerThree = localStateTimerThree;
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	b2da      	uxtb	r2, r3
 8009fce:	4b2e      	ldr	r3, [pc, #184]	; (800a088 <Tim_MainFunction+0x248>)
 8009fd0:	701a      	strb	r2, [r3, #0]
			break;
 8009fd2:	e010      	b.n	8009ff6 <Tim_MainFunction+0x1b6>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerThree = localStateTimerThree;
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	b2da      	uxtb	r2, r3
 8009fd8:	4b2b      	ldr	r3, [pc, #172]	; (800a088 <Tim_MainFunction+0x248>)
 8009fda:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim3);
 8009fdc:	4823      	ldr	r0, [pc, #140]	; (800a06c <Tim_MainFunction+0x22c>)
 8009fde:	f7ff fed7 	bl	8009d90 <HAL_TIM_ErrorCallback>
			break;
 8009fe2:	e008      	b.n	8009ff6 <Tim_MainFunction+0x1b6>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerThree = localStateTimerThree;
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	b2da      	uxtb	r2, r3
 8009fe8:	4b27      	ldr	r3, [pc, #156]	; (800a088 <Tim_MainFunction+0x248>)
 8009fea:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim3);
 8009fec:	481f      	ldr	r0, [pc, #124]	; (800a06c <Tim_MainFunction+0x22c>)
 8009fee:	f7ff fecf 	bl	8009d90 <HAL_TIM_ErrorCallback>
			break;
 8009ff2:	e000      	b.n	8009ff6 <Tim_MainFunction+0x1b6>
		default:
			break;
 8009ff4:	bf00      	nop
	}
	switch(localStateTimerFour)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2b04      	cmp	r3, #4
 8009ffa:	d82f      	bhi.n	800a05c <Tim_MainFunction+0x21c>
 8009ffc:	a201      	add	r2, pc, #4	; (adr r2, 800a004 <Tim_MainFunction+0x1c4>)
 8009ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a002:	bf00      	nop
 800a004:	0800a019 	.word	0x0800a019
 800a008:	0800a029 	.word	0x0800a029
 800a00c:	0800a033 	.word	0x0800a033
 800a010:	0800a03d 	.word	0x0800a03d
 800a014:	0800a04d 	.word	0x0800a04d
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerFour = localStateTimerFour;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	b2da      	uxtb	r2, r3
 800a01c:	4b1b      	ldr	r3, [pc, #108]	; (800a08c <Tim_MainFunction+0x24c>)
 800a01e:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_FOUR);
 800a020:	2004      	movs	r0, #4
 800a022:	f7ff fc63 	bl	80098ec <Tim_Init>
			break;
 800a026:	e01a      	b.n	800a05e <Tim_MainFunction+0x21e>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerFour = localStateTimerFour;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	b2da      	uxtb	r2, r3
 800a02c:	4b17      	ldr	r3, [pc, #92]	; (800a08c <Tim_MainFunction+0x24c>)
 800a02e:	701a      	strb	r2, [r3, #0]
			break;
 800a030:	e015      	b.n	800a05e <Tim_MainFunction+0x21e>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerFour = localStateTimerFour;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	b2da      	uxtb	r2, r3
 800a036:	4b15      	ldr	r3, [pc, #84]	; (800a08c <Tim_MainFunction+0x24c>)
 800a038:	701a      	strb	r2, [r3, #0]
			break;
 800a03a:	e010      	b.n	800a05e <Tim_MainFunction+0x21e>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerFour = localStateTimerFour;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	b2da      	uxtb	r2, r3
 800a040:	4b12      	ldr	r3, [pc, #72]	; (800a08c <Tim_MainFunction+0x24c>)
 800a042:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim4);
 800a044:	480a      	ldr	r0, [pc, #40]	; (800a070 <Tim_MainFunction+0x230>)
 800a046:	f7ff fea3 	bl	8009d90 <HAL_TIM_ErrorCallback>
			break;
 800a04a:	e008      	b.n	800a05e <Tim_MainFunction+0x21e>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerFour = localStateTimerFour;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	b2da      	uxtb	r2, r3
 800a050:	4b0e      	ldr	r3, [pc, #56]	; (800a08c <Tim_MainFunction+0x24c>)
 800a052:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim4);
 800a054:	4806      	ldr	r0, [pc, #24]	; (800a070 <Tim_MainFunction+0x230>)
 800a056:	f7ff fe9b 	bl	8009d90 <HAL_TIM_ErrorCallback>
			break;
 800a05a:	e000      	b.n	800a05e <Tim_MainFunction+0x21e>
		default:
			break;
 800a05c:	bf00      	nop
	}
}
 800a05e:	bf00      	nop
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	2000032c 	.word	0x2000032c
 800a06c:	200003e0 	.word	0x200003e0
 800a070:	20000494 	.word	0x20000494
 800a074:	20000548 	.word	0x20000548
 800a078:	200006b3 	.word	0x200006b3
 800a07c:	40020400 	.word	0x40020400
 800a080:	40020000 	.word	0x40020000
 800a084:	200006b0 	.word	0x200006b0
 800a088:	200006b1 	.word	0x200006b1
 800a08c:	200006b2 	.word	0x200006b2

0800a090 <HAL_TIM_PeriodElapsedCallback>:
* Function: HAL_TIM_PeriodElapsedCallback										   *
* Description: Peripheral period elapsed callback to process system state          *
* 			   when timer expires.									               *
************************************************************************************/
VOID HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
	/* Timer 1 is used for the time base source of FreeRTOS. Upon expiration increase the clock counter of the system. */
	if (htim->Instance == TIM1)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a04      	ldr	r2, [pc, #16]	; (800a0b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d101      	bne.n	800a0a6 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 800a0a2:	f7f9 fe27 	bl	8003cf4 <HAL_IncTick>
	}
	else
	{
		/* do nothing */
	}
}
 800a0a6:	bf00      	nop
 800a0a8:	3708      	adds	r7, #8
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	40010000 	.word	0x40010000

0800a0b4 <__NVIC_SetPriority>:
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	6039      	str	r1, [r7, #0]
 800a0be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a0c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	db0a      	blt.n	800a0de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	b2da      	uxtb	r2, r3
 800a0cc:	490c      	ldr	r1, [pc, #48]	; (800a100 <__NVIC_SetPriority+0x4c>)
 800a0ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0d2:	0112      	lsls	r2, r2, #4
 800a0d4:	b2d2      	uxtb	r2, r2
 800a0d6:	440b      	add	r3, r1
 800a0d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a0dc:	e00a      	b.n	800a0f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	b2da      	uxtb	r2, r3
 800a0e2:	4908      	ldr	r1, [pc, #32]	; (800a104 <__NVIC_SetPriority+0x50>)
 800a0e4:	79fb      	ldrb	r3, [r7, #7]
 800a0e6:	f003 030f 	and.w	r3, r3, #15
 800a0ea:	3b04      	subs	r3, #4
 800a0ec:	0112      	lsls	r2, r2, #4
 800a0ee:	b2d2      	uxtb	r2, r2
 800a0f0:	440b      	add	r3, r1
 800a0f2:	761a      	strb	r2, [r3, #24]
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr
 800a100:	e000e100 	.word	0xe000e100
 800a104:	e000ed00 	.word	0xe000ed00

0800a108 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a108:	b580      	push	{r7, lr}
 800a10a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a10c:	4b05      	ldr	r3, [pc, #20]	; (800a124 <SysTick_Handler+0x1c>)
 800a10e:	681b      	ldr	r3, [r3, #0]
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a110:	f003 f944 	bl	800d39c <xTaskGetSchedulerState>
 800a114:	4603      	mov	r3, r0
 800a116:	2b01      	cmp	r3, #1
 800a118:	d001      	beq.n	800a11e <SysTick_Handler+0x16>
     /* Call tick handler */
     xPortSysTickHandler();
 800a11a:	f000 ffb5 	bl	800b088 <xPortSysTickHandler>
}

}
 800a11e:	bf00      	nop
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	e000e010 	.word	0xe000e010

0800a128 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a128:	b580      	push	{r7, lr}
 800a12a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a12c:	2100      	movs	r1, #0
 800a12e:	f06f 0004 	mvn.w	r0, #4
 800a132:	f7ff ffbf 	bl	800a0b4 <__NVIC_SetPriority>
#endif
}
 800a136:	bf00      	nop
 800a138:	bd80      	pop	{r7, pc}
	...

0800a13c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a142:	f3ef 8305 	mrs	r3, IPSR
 800a146:	603b      	str	r3, [r7, #0]
  return(result);
 800a148:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d003      	beq.n	800a156 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a14e:	f06f 0305 	mvn.w	r3, #5
 800a152:	607b      	str	r3, [r7, #4]
 800a154:	e00c      	b.n	800a170 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a156:	4b0a      	ldr	r3, [pc, #40]	; (800a180 <osKernelInitialize+0x44>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d105      	bne.n	800a16a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a15e:	4b08      	ldr	r3, [pc, #32]	; (800a180 <osKernelInitialize+0x44>)
 800a160:	2201      	movs	r2, #1
 800a162:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a164:	2300      	movs	r3, #0
 800a166:	607b      	str	r3, [r7, #4]
 800a168:	e002      	b.n	800a170 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a16a:	f04f 33ff 	mov.w	r3, #4294967295
 800a16e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a170:	687b      	ldr	r3, [r7, #4]
}
 800a172:	4618      	mov	r0, r3
 800a174:	370c      	adds	r7, #12
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	20000798 	.word	0x20000798

0800a184 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a18a:	f3ef 8305 	mrs	r3, IPSR
 800a18e:	603b      	str	r3, [r7, #0]
  return(result);
 800a190:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a192:	2b00      	cmp	r3, #0
 800a194:	d003      	beq.n	800a19e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a196:	f06f 0305 	mvn.w	r3, #5
 800a19a:	607b      	str	r3, [r7, #4]
 800a19c:	e010      	b.n	800a1c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a19e:	4b0b      	ldr	r3, [pc, #44]	; (800a1cc <osKernelStart+0x48>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d109      	bne.n	800a1ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a1a6:	f7ff ffbf 	bl	800a128 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a1aa:	4b08      	ldr	r3, [pc, #32]	; (800a1cc <osKernelStart+0x48>)
 800a1ac:	2202      	movs	r2, #2
 800a1ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a1b0:	f002 fbae 	bl	800c910 <vTaskStartScheduler>
      stat = osOK;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	607b      	str	r3, [r7, #4]
 800a1b8:	e002      	b.n	800a1c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a1ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a1be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a1c0:	687b      	ldr	r3, [r7, #4]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3708      	adds	r7, #8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	20000798 	.word	0x20000798

0800a1d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b08e      	sub	sp, #56	; 0x38
 800a1d4:	af04      	add	r7, sp, #16
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1e0:	f3ef 8305 	mrs	r3, IPSR
 800a1e4:	617b      	str	r3, [r7, #20]
  return(result);
 800a1e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f040 8081 	bne.w	800a2f0 <osThreadNew+0x120>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d07d      	beq.n	800a2f0 <osThreadNew+0x120>
    stack = configMINIMAL_STACK_SIZE;
 800a1f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a1fa:	2318      	movs	r3, #24
 800a1fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a1fe:	2300      	movs	r3, #0
 800a200:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a202:	f04f 33ff 	mov.w	r3, #4294967295
 800a206:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d046      	beq.n	800a29c <osThreadNew+0xcc>
      if (attr->name != NULL) {
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d002      	beq.n	800a21c <osThreadNew+0x4c>
        name = attr->name;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	699b      	ldr	r3, [r3, #24]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d002      	beq.n	800a22a <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d008      	beq.n	800a242 <osThreadNew+0x72>
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	2b38      	cmp	r3, #56	; 0x38
 800a234:	d805      	bhi.n	800a242 <osThreadNew+0x72>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	f003 0301 	and.w	r3, r3, #1
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d001      	beq.n	800a246 <osThreadNew+0x76>
        return (NULL);
 800a242:	2300      	movs	r3, #0
 800a244:	e055      	b.n	800a2f2 <osThreadNew+0x122>
      }

      if (attr->stack_size > 0U) {
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	695b      	ldr	r3, [r3, #20]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d003      	beq.n	800a256 <osThreadNew+0x86>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	695b      	ldr	r3, [r3, #20]
 800a252:	089b      	lsrs	r3, r3, #2
 800a254:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00f      	beq.n	800a27e <osThreadNew+0xae>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	f5b3 7fda 	cmp.w	r3, #436	; 0x1b4
 800a266:	d30a      	bcc.n	800a27e <osThreadNew+0xae>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d006      	beq.n	800a27e <osThreadNew+0xae>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	695b      	ldr	r3, [r3, #20]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d002      	beq.n	800a27e <osThreadNew+0xae>
        mem = 1;
 800a278:	2301      	movs	r3, #1
 800a27a:	61bb      	str	r3, [r7, #24]
 800a27c:	e010      	b.n	800a2a0 <osThreadNew+0xd0>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d10c      	bne.n	800a2a0 <osThreadNew+0xd0>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d108      	bne.n	800a2a0 <osThreadNew+0xd0>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d104      	bne.n	800a2a0 <osThreadNew+0xd0>
          mem = 0;
 800a296:	2300      	movs	r3, #0
 800a298:	61bb      	str	r3, [r7, #24]
 800a29a:	e001      	b.n	800a2a0 <osThreadNew+0xd0>
        }
      }
    }
    else {
      mem = 0;
 800a29c:	2300      	movs	r3, #0
 800a29e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d110      	bne.n	800a2c8 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a2ae:	9202      	str	r2, [sp, #8]
 800a2b0:	9301      	str	r3, [sp, #4]
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	6a3a      	ldr	r2, [r7, #32]
 800a2ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f002 f865 	bl	800c38c <xTaskCreateStatic>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	613b      	str	r3, [r7, #16]
 800a2c6:	e013      	b.n	800a2f0 <osThreadNew+0x120>
      #endif
    }
    else {
      if (mem == 0) {
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d110      	bne.n	800a2f0 <osThreadNew+0x120>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a2ce:	6a3b      	ldr	r3, [r7, #32]
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	f107 0310 	add.w	r3, r7, #16
 800a2d6:	9301      	str	r3, [sp, #4]
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f002 f8b2 	bl	800c44a <xTaskCreate>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d001      	beq.n	800a2f0 <osThreadNew+0x120>
            hTask = NULL;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a2f0:	693b      	ldr	r3, [r7, #16]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3728      	adds	r7, #40	; 0x28
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b084      	sub	sp, #16
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f003 fe4d 	bl	800dfa2 <pvTimerGetTimerID>
 800a308:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d005      	beq.n	800a31c <TimerCallback+0x22>
    callb->func (callb->arg);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68fa      	ldr	r2, [r7, #12]
 800a316:	6852      	ldr	r2, [r2, #4]
 800a318:	4610      	mov	r0, r2
 800a31a:	4798      	blx	r3
  }
}
 800a31c:	bf00      	nop
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a324:	b580      	push	{r7, lr}
 800a326:	b08c      	sub	sp, #48	; 0x30
 800a328:	af02      	add	r7, sp, #8
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	607a      	str	r2, [r7, #4]
 800a32e:	603b      	str	r3, [r7, #0]
 800a330:	460b      	mov	r3, r1
 800a332:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a334:	2300      	movs	r3, #0
 800a336:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a338:	f3ef 8305 	mrs	r3, IPSR
 800a33c:	613b      	str	r3, [r7, #16]
  return(result);
 800a33e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800a340:	2b00      	cmp	r3, #0
 800a342:	d163      	bne.n	800a40c <osTimerNew+0xe8>
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d060      	beq.n	800a40c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a34a:	2008      	movs	r0, #8
 800a34c:	f000 fa3a 	bl	800a7c4 <pvPortMalloc>
 800a350:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d059      	beq.n	800a40c <osTimerNew+0xe8>
      callb->func = func;
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a364:	7afb      	ldrb	r3, [r7, #11]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d102      	bne.n	800a370 <osTimerNew+0x4c>
        reload = pdFALSE;
 800a36a:	2300      	movs	r3, #0
 800a36c:	61fb      	str	r3, [r7, #28]
 800a36e:	e001      	b.n	800a374 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800a370:	2301      	movs	r3, #1
 800a372:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800a374:	f04f 33ff 	mov.w	r3, #4294967295
 800a378:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800a37a:	2300      	movs	r3, #0
 800a37c:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d01c      	beq.n	800a3be <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d002      	beq.n	800a392 <osTimerNew+0x6e>
          name = attr->name;
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d006      	beq.n	800a3a8 <osTimerNew+0x84>
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	2b2b      	cmp	r3, #43	; 0x2b
 800a3a0:	d902      	bls.n	800a3a8 <osTimerNew+0x84>
          mem = 1;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	61bb      	str	r3, [r7, #24]
 800a3a6:	e00c      	b.n	800a3c2 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d108      	bne.n	800a3c2 <osTimerNew+0x9e>
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d104      	bne.n	800a3c2 <osTimerNew+0x9e>
            mem = 0;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	61bb      	str	r3, [r7, #24]
 800a3bc:	e001      	b.n	800a3c2 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d10c      	bne.n	800a3e2 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	9301      	str	r3, [sp, #4]
 800a3ce:	4b12      	ldr	r3, [pc, #72]	; (800a418 <osTimerNew+0xf4>)
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	69fa      	ldr	r2, [r7, #28]
 800a3d6:	2101      	movs	r1, #1
 800a3d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3da:	f003 fa3a 	bl	800d852 <xTimerCreateStatic>
 800a3de:	6238      	str	r0, [r7, #32]
 800a3e0:	e00b      	b.n	800a3fa <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d108      	bne.n	800a3fa <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a3e8:	4b0b      	ldr	r3, [pc, #44]	; (800a418 <osTimerNew+0xf4>)
 800a3ea:	9300      	str	r3, [sp, #0]
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	69fa      	ldr	r2, [r7, #28]
 800a3f0:	2101      	movs	r1, #1
 800a3f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3f4:	f003 fa0c 	bl	800d810 <xTimerCreate>
 800a3f8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800a3fa:	6a3b      	ldr	r3, [r7, #32]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d105      	bne.n	800a40c <osTimerNew+0xe8>
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d002      	beq.n	800a40c <osTimerNew+0xe8>
        vPortFree (callb);
 800a406:	6978      	ldr	r0, [r7, #20]
 800a408:	f000 faac 	bl	800a964 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a40c:	6a3b      	ldr	r3, [r7, #32]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3728      	adds	r7, #40	; 0x28
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	0800a2fb 	.word	0x0800a2fb

0800a41c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b088      	sub	sp, #32
 800a420:	af02      	add	r7, sp, #8
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a42a:	f3ef 8305 	mrs	r3, IPSR
 800a42e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a430:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a432:	2b00      	cmp	r3, #0
 800a434:	d003      	beq.n	800a43e <osTimerStart+0x22>
    stat = osErrorISR;
 800a436:	f06f 0305 	mvn.w	r3, #5
 800a43a:	617b      	str	r3, [r7, #20]
 800a43c:	e017      	b.n	800a46e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d103      	bne.n	800a44c <osTimerStart+0x30>
    stat = osErrorParameter;
 800a444:	f06f 0303 	mvn.w	r3, #3
 800a448:	617b      	str	r3, [r7, #20]
 800a44a:	e010      	b.n	800a46e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800a44c:	2300      	movs	r3, #0
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	2300      	movs	r3, #0
 800a452:	683a      	ldr	r2, [r7, #0]
 800a454:	2104      	movs	r1, #4
 800a456:	6938      	ldr	r0, [r7, #16]
 800a458:	f003 fa74 	bl	800d944 <xTimerGenericCommand>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d102      	bne.n	800a468 <osTimerStart+0x4c>
      stat = osOK;
 800a462:	2300      	movs	r3, #0
 800a464:	617b      	str	r3, [r7, #20]
 800a466:	e002      	b.n	800a46e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800a468:	f06f 0302 	mvn.w	r3, #2
 800a46c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a46e:	697b      	ldr	r3, [r7, #20]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3718      	adds	r7, #24
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800a478:	b580      	push	{r7, lr}
 800a47a:	b088      	sub	sp, #32
 800a47c:	af02      	add	r7, sp, #8
 800a47e:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a484:	f3ef 8305 	mrs	r3, IPSR
 800a488:	60fb      	str	r3, [r7, #12]
  return(result);
 800a48a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d003      	beq.n	800a498 <osTimerStop+0x20>
    stat = osErrorISR;
 800a490:	f06f 0305 	mvn.w	r3, #5
 800a494:	617b      	str	r3, [r7, #20]
 800a496:	e021      	b.n	800a4dc <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d103      	bne.n	800a4a6 <osTimerStop+0x2e>
    stat = osErrorParameter;
 800a49e:	f06f 0303 	mvn.w	r3, #3
 800a4a2:	617b      	str	r3, [r7, #20]
 800a4a4:	e01a      	b.n	800a4dc <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800a4a6:	6938      	ldr	r0, [r7, #16]
 800a4a8:	f003 fd52 	bl	800df50 <xTimerIsTimerActive>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d103      	bne.n	800a4ba <osTimerStop+0x42>
      stat = osErrorResource;
 800a4b2:	f06f 0302 	mvn.w	r3, #2
 800a4b6:	617b      	str	r3, [r7, #20]
 800a4b8:	e010      	b.n	800a4dc <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	2300      	movs	r3, #0
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	2103      	movs	r1, #3
 800a4c4:	6938      	ldr	r0, [r7, #16]
 800a4c6:	f003 fa3d 	bl	800d944 <xTimerGenericCommand>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d102      	bne.n	800a4d6 <osTimerStop+0x5e>
        stat = osOK;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	617b      	str	r3, [r7, #20]
 800a4d4:	e002      	b.n	800a4dc <osTimerStop+0x64>
      } else {
        stat = osError;
 800a4d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a4da:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a4dc:	697b      	ldr	r3, [r7, #20]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3718      	adds	r7, #24
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b086      	sub	sp, #24
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4f2:	f3ef 8305 	mrs	r3, IPSR
 800a4f6:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d102      	bne.n	800a504 <osTimerIsRunning+0x1e>
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d102      	bne.n	800a50a <osTimerIsRunning+0x24>
    running = 0U;
 800a504:	2300      	movs	r3, #0
 800a506:	617b      	str	r3, [r7, #20]
 800a508:	e004      	b.n	800a514 <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 800a50a:	6938      	ldr	r0, [r7, #16]
 800a50c:	f003 fd20 	bl	800df50 <xTimerIsTimerActive>
 800a510:	4603      	mov	r3, r0
 800a512:	617b      	str	r3, [r7, #20]
  }

  return (running);
 800a514:	697b      	ldr	r3, [r7, #20]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3718      	adds	r7, #24
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a51e:	b580      	push	{r7, lr}
 800a520:	b08a      	sub	sp, #40	; 0x28
 800a522:	af02      	add	r7, sp, #8
 800a524:	60f8      	str	r0, [r7, #12]
 800a526:	60b9      	str	r1, [r7, #8]
 800a528:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a52a:	2300      	movs	r3, #0
 800a52c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a52e:	f3ef 8305 	mrs	r3, IPSR
 800a532:	613b      	str	r3, [r7, #16]
  return(result);
 800a534:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a536:	2b00      	cmp	r3, #0
 800a538:	d175      	bne.n	800a626 <osSemaphoreNew+0x108>
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d072      	beq.n	800a626 <osSemaphoreNew+0x108>
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	429a      	cmp	r2, r3
 800a546:	d86e      	bhi.n	800a626 <osSemaphoreNew+0x108>
    mem = -1;
 800a548:	f04f 33ff 	mov.w	r3, #4294967295
 800a54c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d015      	beq.n	800a580 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d006      	beq.n	800a56a <osSemaphoreNew+0x4c>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	2b4f      	cmp	r3, #79	; 0x4f
 800a562:	d902      	bls.n	800a56a <osSemaphoreNew+0x4c>
        mem = 1;
 800a564:	2301      	movs	r3, #1
 800a566:	61bb      	str	r3, [r7, #24]
 800a568:	e00c      	b.n	800a584 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d108      	bne.n	800a584 <osSemaphoreNew+0x66>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d104      	bne.n	800a584 <osSemaphoreNew+0x66>
          mem = 0;
 800a57a:	2300      	movs	r3, #0
 800a57c:	61bb      	str	r3, [r7, #24]
 800a57e:	e001      	b.n	800a584 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a580:	2300      	movs	r3, #0
 800a582:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58a:	d04c      	beq.n	800a626 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d128      	bne.n	800a5e4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	2b01      	cmp	r3, #1
 800a596:	d10a      	bne.n	800a5ae <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	2203      	movs	r2, #3
 800a59e:	9200      	str	r2, [sp, #0]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	2001      	movs	r0, #1
 800a5a6:	f000 ff4b 	bl	800b440 <xQueueGenericCreateStatic>
 800a5aa:	61f8      	str	r0, [r7, #28]
 800a5ac:	e005      	b.n	800a5ba <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a5ae:	2203      	movs	r2, #3
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	2001      	movs	r0, #1
 800a5b4:	f000 ffbc 	bl	800b530 <xQueueGenericCreate>
 800a5b8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d022      	beq.n	800a606 <osSemaphoreNew+0xe8>
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d01f      	beq.n	800a606 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	69f8      	ldr	r0, [r7, #28]
 800a5ce:	f001 f877 	bl	800b6c0 <xQueueGenericSend>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d016      	beq.n	800a606 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a5d8:	69f8      	ldr	r0, [r7, #28]
 800a5da:	f001 fd03 	bl	800bfe4 <vQueueDelete>
            hSemaphore = NULL;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	61fb      	str	r3, [r7, #28]
 800a5e2:	e010      	b.n	800a606 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d108      	bne.n	800a5fc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	68b9      	ldr	r1, [r7, #8]
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	f000 fff9 	bl	800b5ea <xQueueCreateCountingSemaphoreStatic>
 800a5f8:	61f8      	str	r0, [r7, #28]
 800a5fa:	e004      	b.n	800a606 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a5fc:	68b9      	ldr	r1, [r7, #8]
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f001 f82a 	bl	800b658 <xQueueCreateCountingSemaphore>
 800a604:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00c      	beq.n	800a626 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d003      	beq.n	800a61a <osSemaphoreNew+0xfc>
          name = attr->name;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	617b      	str	r3, [r7, #20]
 800a618:	e001      	b.n	800a61e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a61a:	2300      	movs	r3, #0
 800a61c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a61e:	6979      	ldr	r1, [r7, #20]
 800a620:	69f8      	ldr	r0, [r7, #28]
 800a622:	f001 fe2b 	bl	800c27c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a626:	69fb      	ldr	r3, [r7, #28]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3720      	adds	r7, #32
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a63e:	2300      	movs	r3, #0
 800a640:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d103      	bne.n	800a650 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a648:	f06f 0303 	mvn.w	r3, #3
 800a64c:	617b      	str	r3, [r7, #20]
 800a64e:	e039      	b.n	800a6c4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a650:	f3ef 8305 	mrs	r3, IPSR
 800a654:	60fb      	str	r3, [r7, #12]
  return(result);
 800a656:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d022      	beq.n	800a6a2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d003      	beq.n	800a66a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a662:	f06f 0303 	mvn.w	r3, #3
 800a666:	617b      	str	r3, [r7, #20]
 800a668:	e02c      	b.n	800a6c4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a66a:	2300      	movs	r3, #0
 800a66c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a66e:	f107 0308 	add.w	r3, r7, #8
 800a672:	461a      	mov	r2, r3
 800a674:	2100      	movs	r1, #0
 800a676:	6938      	ldr	r0, [r7, #16]
 800a678:	f001 fc34 	bl	800bee4 <xQueueReceiveFromISR>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d003      	beq.n	800a68a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a682:	f06f 0302 	mvn.w	r3, #2
 800a686:	617b      	str	r3, [r7, #20]
 800a688:	e01c      	b.n	800a6c4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d019      	beq.n	800a6c4 <osSemaphoreAcquire+0x94>
 800a690:	4b0f      	ldr	r3, [pc, #60]	; (800a6d0 <osSemaphoreAcquire+0xa0>)
 800a692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a696:	601a      	str	r2, [r3, #0]
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	e010      	b.n	800a6c4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a6a2:	6839      	ldr	r1, [r7, #0]
 800a6a4:	6938      	ldr	r0, [r7, #16]
 800a6a6:	f001 fb11 	bl	800bccc <xQueueSemaphoreTake>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d009      	beq.n	800a6c4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d003      	beq.n	800a6be <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a6b6:	f06f 0301 	mvn.w	r3, #1
 800a6ba:	617b      	str	r3, [r7, #20]
 800a6bc:	e002      	b.n	800a6c4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a6be:	f06f 0302 	mvn.w	r3, #2
 800a6c2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a6c4:	697b      	ldr	r3, [r7, #20]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3718      	adds	r7, #24
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	e000ed04 	.word	0xe000ed04

0800a6d4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b086      	sub	sp, #24
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d103      	bne.n	800a6f2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a6ea:	f06f 0303 	mvn.w	r3, #3
 800a6ee:	617b      	str	r3, [r7, #20]
 800a6f0:	e02c      	b.n	800a74c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6f2:	f3ef 8305 	mrs	r3, IPSR
 800a6f6:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d01a      	beq.n	800a734 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a6fe:	2300      	movs	r3, #0
 800a700:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a702:	f107 0308 	add.w	r3, r7, #8
 800a706:	4619      	mov	r1, r3
 800a708:	6938      	ldr	r0, [r7, #16]
 800a70a:	f001 f972 	bl	800b9f2 <xQueueGiveFromISR>
 800a70e:	4603      	mov	r3, r0
 800a710:	2b01      	cmp	r3, #1
 800a712:	d003      	beq.n	800a71c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a714:	f06f 0302 	mvn.w	r3, #2
 800a718:	617b      	str	r3, [r7, #20]
 800a71a:	e017      	b.n	800a74c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d014      	beq.n	800a74c <osSemaphoreRelease+0x78>
 800a722:	4b0d      	ldr	r3, [pc, #52]	; (800a758 <osSemaphoreRelease+0x84>)
 800a724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a728:	601a      	str	r2, [r3, #0]
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	e00b      	b.n	800a74c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a734:	2300      	movs	r3, #0
 800a736:	2200      	movs	r2, #0
 800a738:	2100      	movs	r1, #0
 800a73a:	6938      	ldr	r0, [r7, #16]
 800a73c:	f000 ffc0 	bl	800b6c0 <xQueueGenericSend>
 800a740:	4603      	mov	r3, r0
 800a742:	2b01      	cmp	r3, #1
 800a744:	d002      	beq.n	800a74c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a746:	f06f 0302 	mvn.w	r3, #2
 800a74a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a74c:	697b      	ldr	r3, [r7, #20]
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3718      	adds	r7, #24
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	e000ed04 	.word	0xe000ed04

0800a75c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	4a07      	ldr	r2, [pc, #28]	; (800a788 <vApplicationGetIdleTaskMemory+0x2c>)
 800a76c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	4a06      	ldr	r2, [pc, #24]	; (800a78c <vApplicationGetIdleTaskMemory+0x30>)
 800a772:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a77a:	601a      	str	r2, [r3, #0]
}
 800a77c:	bf00      	nop
 800a77e:	3714      	adds	r7, #20
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr
 800a788:	2000079c 	.word	0x2000079c
 800a78c:	20000950 	.word	0x20000950

0800a790 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	4a07      	ldr	r2, [pc, #28]	; (800a7bc <vApplicationGetTimerTaskMemory+0x2c>)
 800a7a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	4a06      	ldr	r2, [pc, #24]	; (800a7c0 <vApplicationGetTimerTaskMemory+0x30>)
 800a7a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a7ae:	601a      	str	r2, [r3, #0]
}
 800a7b0:	bf00      	nop
 800a7b2:	3714      	adds	r7, #20
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr
 800a7bc:	20000d50 	.word	0x20000d50
 800a7c0:	20000f04 	.word	0x20000f04

0800a7c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b08a      	sub	sp, #40	; 0x28
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a7d0:	f002 f90e 	bl	800c9f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a7d4:	4b5d      	ldr	r3, [pc, #372]	; (800a94c <pvPortMalloc+0x188>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d101      	bne.n	800a7e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a7dc:	f000 f924 	bl	800aa28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a7e0:	4b5b      	ldr	r3, [pc, #364]	; (800a950 <pvPortMalloc+0x18c>)
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4013      	ands	r3, r2
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f040 8093 	bne.w	800a914 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d01d      	beq.n	800a830 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a7f4:	2208      	movs	r2, #8
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f003 0307 	and.w	r3, r3, #7
 800a802:	2b00      	cmp	r3, #0
 800a804:	d014      	beq.n	800a830 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f023 0307 	bic.w	r3, r3, #7
 800a80c:	3308      	adds	r3, #8
 800a80e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f003 0307 	and.w	r3, r3, #7
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00a      	beq.n	800a830 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a81a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a81e:	f383 8811 	msr	BASEPRI, r3
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a82c:	bf00      	nop
 800a82e:	e7fe      	b.n	800a82e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d06e      	beq.n	800a914 <pvPortMalloc+0x150>
 800a836:	4b47      	ldr	r3, [pc, #284]	; (800a954 <pvPortMalloc+0x190>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d869      	bhi.n	800a914 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a840:	4b45      	ldr	r3, [pc, #276]	; (800a958 <pvPortMalloc+0x194>)
 800a842:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a844:	4b44      	ldr	r3, [pc, #272]	; (800a958 <pvPortMalloc+0x194>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a84a:	e004      	b.n	800a856 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d903      	bls.n	800a868 <pvPortMalloc+0xa4>
 800a860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d1f1      	bne.n	800a84c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a868:	4b38      	ldr	r3, [pc, #224]	; (800a94c <pvPortMalloc+0x188>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a86e:	429a      	cmp	r2, r3
 800a870:	d050      	beq.n	800a914 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a872:	6a3b      	ldr	r3, [r7, #32]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2208      	movs	r2, #8
 800a878:	4413      	add	r3, r2
 800a87a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	6a3b      	ldr	r3, [r7, #32]
 800a882:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a886:	685a      	ldr	r2, [r3, #4]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	1ad2      	subs	r2, r2, r3
 800a88c:	2308      	movs	r3, #8
 800a88e:	005b      	lsls	r3, r3, #1
 800a890:	429a      	cmp	r2, r3
 800a892:	d91f      	bls.n	800a8d4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4413      	add	r3, r2
 800a89a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a89c:	69bb      	ldr	r3, [r7, #24]
 800a89e:	f003 0307 	and.w	r3, r3, #7
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00a      	beq.n	800a8bc <pvPortMalloc+0xf8>
	__asm volatile
 800a8a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a8aa:	f383 8811 	msr	BASEPRI, r3
 800a8ae:	f3bf 8f6f 	isb	sy
 800a8b2:	f3bf 8f4f 	dsb	sy
 800a8b6:	613b      	str	r3, [r7, #16]
}
 800a8b8:	bf00      	nop
 800a8ba:	e7fe      	b.n	800a8ba <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8be:	685a      	ldr	r2, [r3, #4]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	1ad2      	subs	r2, r2, r3
 800a8c4:	69bb      	ldr	r3, [r7, #24]
 800a8c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a8ce:	69b8      	ldr	r0, [r7, #24]
 800a8d0:	f000 f90c 	bl	800aaec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a8d4:	4b1f      	ldr	r3, [pc, #124]	; (800a954 <pvPortMalloc+0x190>)
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	1ad3      	subs	r3, r2, r3
 800a8de:	4a1d      	ldr	r2, [pc, #116]	; (800a954 <pvPortMalloc+0x190>)
 800a8e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a8e2:	4b1c      	ldr	r3, [pc, #112]	; (800a954 <pvPortMalloc+0x190>)
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	4b1d      	ldr	r3, [pc, #116]	; (800a95c <pvPortMalloc+0x198>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d203      	bcs.n	800a8f6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a8ee:	4b19      	ldr	r3, [pc, #100]	; (800a954 <pvPortMalloc+0x190>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a1a      	ldr	r2, [pc, #104]	; (800a95c <pvPortMalloc+0x198>)
 800a8f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f8:	685a      	ldr	r2, [r3, #4]
 800a8fa:	4b15      	ldr	r3, [pc, #84]	; (800a950 <pvPortMalloc+0x18c>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	431a      	orrs	r2, r3
 800a900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a902:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	2200      	movs	r2, #0
 800a908:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a90a:	4b15      	ldr	r3, [pc, #84]	; (800a960 <pvPortMalloc+0x19c>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	3301      	adds	r3, #1
 800a910:	4a13      	ldr	r2, [pc, #76]	; (800a960 <pvPortMalloc+0x19c>)
 800a912:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a914:	f002 f8b2 	bl	800ca7c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d101      	bne.n	800a922 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800a91e:	f7f8 f8a5 	bl	8002a6c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	f003 0307 	and.w	r3, r3, #7
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00a      	beq.n	800a942 <pvPortMalloc+0x17e>
	__asm volatile
 800a92c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a930:	f383 8811 	msr	BASEPRI, r3
 800a934:	f3bf 8f6f 	isb	sy
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	60fb      	str	r3, [r7, #12]
}
 800a93e:	bf00      	nop
 800a940:	e7fe      	b.n	800a940 <pvPortMalloc+0x17c>
	return pvReturn;
 800a942:	69fb      	ldr	r3, [r7, #28]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3728      	adds	r7, #40	; 0x28
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	200041ec 	.word	0x200041ec
 800a950:	20004200 	.word	0x20004200
 800a954:	200041f0 	.word	0x200041f0
 800a958:	200041e4 	.word	0x200041e4
 800a95c:	200041f4 	.word	0x200041f4
 800a960:	200041f8 	.word	0x200041f8

0800a964 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b086      	sub	sp, #24
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d04d      	beq.n	800aa12 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a976:	2308      	movs	r3, #8
 800a978:	425b      	negs	r3, r3
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	4413      	add	r3, r2
 800a97e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	685a      	ldr	r2, [r3, #4]
 800a988:	4b24      	ldr	r3, [pc, #144]	; (800aa1c <vPortFree+0xb8>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4013      	ands	r3, r2
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d10a      	bne.n	800a9a8 <vPortFree+0x44>
	__asm volatile
 800a992:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	60fb      	str	r3, [r7, #12]
}
 800a9a4:	bf00      	nop
 800a9a6:	e7fe      	b.n	800a9a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00a      	beq.n	800a9c6 <vPortFree+0x62>
	__asm volatile
 800a9b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a9b4:	f383 8811 	msr	BASEPRI, r3
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	60bb      	str	r3, [r7, #8]
}
 800a9c2:	bf00      	nop
 800a9c4:	e7fe      	b.n	800a9c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	685a      	ldr	r2, [r3, #4]
 800a9ca:	4b14      	ldr	r3, [pc, #80]	; (800aa1c <vPortFree+0xb8>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d01e      	beq.n	800aa12 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d11a      	bne.n	800aa12 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	685a      	ldr	r2, [r3, #4]
 800a9e0:	4b0e      	ldr	r3, [pc, #56]	; (800aa1c <vPortFree+0xb8>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	43db      	mvns	r3, r3
 800a9e6:	401a      	ands	r2, r3
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a9ec:	f002 f800 	bl	800c9f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	685a      	ldr	r2, [r3, #4]
 800a9f4:	4b0a      	ldr	r3, [pc, #40]	; (800aa20 <vPortFree+0xbc>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	4a09      	ldr	r2, [pc, #36]	; (800aa20 <vPortFree+0xbc>)
 800a9fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a9fe:	6938      	ldr	r0, [r7, #16]
 800aa00:	f000 f874 	bl	800aaec <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aa04:	4b07      	ldr	r3, [pc, #28]	; (800aa24 <vPortFree+0xc0>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	3301      	adds	r3, #1
 800aa0a:	4a06      	ldr	r2, [pc, #24]	; (800aa24 <vPortFree+0xc0>)
 800aa0c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aa0e:	f002 f835 	bl	800ca7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aa12:	bf00      	nop
 800aa14:	3718      	adds	r7, #24
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	20004200 	.word	0x20004200
 800aa20:	200041f0 	.word	0x200041f0
 800aa24:	200041fc 	.word	0x200041fc

0800aa28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aa2e:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800aa32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aa34:	4b27      	ldr	r3, [pc, #156]	; (800aad4 <prvHeapInit+0xac>)
 800aa36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f003 0307 	and.w	r3, r3, #7
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00c      	beq.n	800aa5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	3307      	adds	r3, #7
 800aa46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f023 0307 	bic.w	r3, r3, #7
 800aa4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aa50:	68ba      	ldr	r2, [r7, #8]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	1ad3      	subs	r3, r2, r3
 800aa56:	4a1f      	ldr	r2, [pc, #124]	; (800aad4 <prvHeapInit+0xac>)
 800aa58:	4413      	add	r3, r2
 800aa5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa60:	4a1d      	ldr	r2, [pc, #116]	; (800aad8 <prvHeapInit+0xb0>)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa66:	4b1c      	ldr	r3, [pc, #112]	; (800aad8 <prvHeapInit+0xb0>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	68ba      	ldr	r2, [r7, #8]
 800aa70:	4413      	add	r3, r2
 800aa72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa74:	2208      	movs	r2, #8
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	1a9b      	subs	r3, r3, r2
 800aa7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f023 0307 	bic.w	r3, r3, #7
 800aa82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	4a15      	ldr	r2, [pc, #84]	; (800aadc <prvHeapInit+0xb4>)
 800aa88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa8a:	4b14      	ldr	r3, [pc, #80]	; (800aadc <prvHeapInit+0xb4>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa92:	4b12      	ldr	r3, [pc, #72]	; (800aadc <prvHeapInit+0xb4>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2200      	movs	r2, #0
 800aa98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	1ad2      	subs	r2, r2, r3
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aaa8:	4b0c      	ldr	r3, [pc, #48]	; (800aadc <prvHeapInit+0xb4>)
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	4a0a      	ldr	r2, [pc, #40]	; (800aae0 <prvHeapInit+0xb8>)
 800aab6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	4a09      	ldr	r2, [pc, #36]	; (800aae4 <prvHeapInit+0xbc>)
 800aabe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aac0:	4b09      	ldr	r3, [pc, #36]	; (800aae8 <prvHeapInit+0xc0>)
 800aac2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aac6:	601a      	str	r2, [r3, #0]
}
 800aac8:	bf00      	nop
 800aaca:	3714      	adds	r7, #20
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr
 800aad4:	20001304 	.word	0x20001304
 800aad8:	200041e4 	.word	0x200041e4
 800aadc:	200041ec 	.word	0x200041ec
 800aae0:	200041f4 	.word	0x200041f4
 800aae4:	200041f0 	.word	0x200041f0
 800aae8:	20004200 	.word	0x20004200

0800aaec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aaf4:	4b28      	ldr	r3, [pc, #160]	; (800ab98 <prvInsertBlockIntoFreeList+0xac>)
 800aaf6:	60fb      	str	r3, [r7, #12]
 800aaf8:	e002      	b.n	800ab00 <prvInsertBlockIntoFreeList+0x14>
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	60fb      	str	r3, [r7, #12]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d8f7      	bhi.n	800aafa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	68ba      	ldr	r2, [r7, #8]
 800ab14:	4413      	add	r3, r2
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d108      	bne.n	800ab2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	685a      	ldr	r2, [r3, #4]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	441a      	add	r2, r3
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	68ba      	ldr	r2, [r7, #8]
 800ab38:	441a      	add	r2, r3
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d118      	bne.n	800ab74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	4b15      	ldr	r3, [pc, #84]	; (800ab9c <prvInsertBlockIntoFreeList+0xb0>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d00d      	beq.n	800ab6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	685a      	ldr	r2, [r3, #4]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	441a      	add	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	601a      	str	r2, [r3, #0]
 800ab68:	e008      	b.n	800ab7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab6a:	4b0c      	ldr	r3, [pc, #48]	; (800ab9c <prvInsertBlockIntoFreeList+0xb0>)
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	601a      	str	r2, [r3, #0]
 800ab72:	e003      	b.n	800ab7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d002      	beq.n	800ab8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab8a:	bf00      	nop
 800ab8c:	3714      	adds	r7, #20
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr
 800ab96:	bf00      	nop
 800ab98:	200041e4 	.word	0x200041e4
 800ab9c:	200041ec 	.word	0x200041ec

0800aba0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f103 0208 	add.w	r2, r3, #8
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f04f 32ff 	mov.w	r2, #4294967295
 800abb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f103 0208 	add.w	r2, r3, #8
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f103 0208 	add.w	r2, r3, #8
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800abd4:	bf00      	nop
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800abee:	bf00      	nop
 800abf0:	370c      	adds	r7, #12
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr

0800abfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800abfa:	b480      	push	{r7}
 800abfc:	b085      	sub	sp, #20
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	689a      	ldr	r2, [r3, #8]
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	683a      	ldr	r2, [r7, #0]
 800ac1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	1c5a      	adds	r2, r3, #1
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	601a      	str	r2, [r3, #0]
}
 800ac36:	bf00      	nop
 800ac38:	3714      	adds	r7, #20
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr

0800ac42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac42:	b480      	push	{r7}
 800ac44:	b085      	sub	sp, #20
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac58:	d103      	bne.n	800ac62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	691b      	ldr	r3, [r3, #16]
 800ac5e:	60fb      	str	r3, [r7, #12]
 800ac60:	e00c      	b.n	800ac7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	3308      	adds	r3, #8
 800ac66:	60fb      	str	r3, [r7, #12]
 800ac68:	e002      	b.n	800ac70 <vListInsert+0x2e>
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	60fb      	str	r3, [r7, #12]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	68ba      	ldr	r2, [r7, #8]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d2f6      	bcs.n	800ac6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	685a      	ldr	r2, [r3, #4]
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	683a      	ldr	r2, [r7, #0]
 800ac8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	683a      	ldr	r2, [r7, #0]
 800ac96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	1c5a      	adds	r2, r3, #1
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	601a      	str	r2, [r3, #0]
}
 800aca8:	bf00      	nop
 800acaa:	3714      	adds	r7, #20
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800acb4:	b480      	push	{r7}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	691b      	ldr	r3, [r3, #16]
 800acc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	6892      	ldr	r2, [r2, #8]
 800acca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	6852      	ldr	r2, [r2, #4]
 800acd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d103      	bne.n	800ace8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	689a      	ldr	r2, [r3, #8]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	1e5a      	subs	r2, r3, #1
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3714      	adds	r7, #20
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	3b04      	subs	r3, #4
 800ad18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ad20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	3b04      	subs	r3, #4
 800ad26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	f023 0201 	bic.w	r2, r3, #1
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	3b04      	subs	r3, #4
 800ad36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ad38:	4a0c      	ldr	r2, [pc, #48]	; (800ad6c <pxPortInitialiseStack+0x64>)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	3b14      	subs	r3, #20
 800ad42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	3b04      	subs	r3, #4
 800ad4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f06f 0202 	mvn.w	r2, #2
 800ad56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	3b20      	subs	r3, #32
 800ad5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3714      	adds	r7, #20
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr
 800ad6c:	0800ad71 	.word	0x0800ad71

0800ad70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ad76:	2300      	movs	r3, #0
 800ad78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ad7a:	4b12      	ldr	r3, [pc, #72]	; (800adc4 <prvTaskExitError+0x54>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad82:	d00a      	beq.n	800ad9a <prvTaskExitError+0x2a>
	__asm volatile
 800ad84:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ad88:	f383 8811 	msr	BASEPRI, r3
 800ad8c:	f3bf 8f6f 	isb	sy
 800ad90:	f3bf 8f4f 	dsb	sy
 800ad94:	60fb      	str	r3, [r7, #12]
}
 800ad96:	bf00      	nop
 800ad98:	e7fe      	b.n	800ad98 <prvTaskExitError+0x28>
	__asm volatile
 800ad9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ad9e:	f383 8811 	msr	BASEPRI, r3
 800ada2:	f3bf 8f6f 	isb	sy
 800ada6:	f3bf 8f4f 	dsb	sy
 800adaa:	60bb      	str	r3, [r7, #8]
}
 800adac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800adae:	bf00      	nop
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d0fc      	beq.n	800adb0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800adb6:	bf00      	nop
 800adb8:	bf00      	nop
 800adba:	3714      	adds	r7, #20
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr
 800adc4:	20000028 	.word	0x20000028
	...

0800add0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800add0:	4b07      	ldr	r3, [pc, #28]	; (800adf0 <pxCurrentTCBConst2>)
 800add2:	6819      	ldr	r1, [r3, #0]
 800add4:	6808      	ldr	r0, [r1, #0]
 800add6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adda:	f380 8809 	msr	PSP, r0
 800adde:	f3bf 8f6f 	isb	sy
 800ade2:	f04f 0000 	mov.w	r0, #0
 800ade6:	f380 8811 	msr	BASEPRI, r0
 800adea:	4770      	bx	lr
 800adec:	f3af 8000 	nop.w

0800adf0 <pxCurrentTCBConst2>:
 800adf0:	20004a10 	.word	0x20004a10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800adf4:	bf00      	nop
 800adf6:	bf00      	nop

0800adf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800adf8:	4808      	ldr	r0, [pc, #32]	; (800ae1c <prvPortStartFirstTask+0x24>)
 800adfa:	6800      	ldr	r0, [r0, #0]
 800adfc:	6800      	ldr	r0, [r0, #0]
 800adfe:	f380 8808 	msr	MSP, r0
 800ae02:	f04f 0000 	mov.w	r0, #0
 800ae06:	f380 8814 	msr	CONTROL, r0
 800ae0a:	b662      	cpsie	i
 800ae0c:	b661      	cpsie	f
 800ae0e:	f3bf 8f4f 	dsb	sy
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	df00      	svc	0
 800ae18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ae1a:	bf00      	nop
 800ae1c:	e000ed08 	.word	0xe000ed08

0800ae20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b086      	sub	sp, #24
 800ae24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ae26:	4b46      	ldr	r3, [pc, #280]	; (800af40 <xPortStartScheduler+0x120>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a46      	ldr	r2, [pc, #280]	; (800af44 <xPortStartScheduler+0x124>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d10a      	bne.n	800ae46 <xPortStartScheduler+0x26>
	__asm volatile
 800ae30:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ae34:	f383 8811 	msr	BASEPRI, r3
 800ae38:	f3bf 8f6f 	isb	sy
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	613b      	str	r3, [r7, #16]
}
 800ae42:	bf00      	nop
 800ae44:	e7fe      	b.n	800ae44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ae46:	4b3e      	ldr	r3, [pc, #248]	; (800af40 <xPortStartScheduler+0x120>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a3f      	ldr	r2, [pc, #252]	; (800af48 <xPortStartScheduler+0x128>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d10a      	bne.n	800ae66 <xPortStartScheduler+0x46>
	__asm volatile
 800ae50:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ae54:	f383 8811 	msr	BASEPRI, r3
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	f3bf 8f4f 	dsb	sy
 800ae60:	60fb      	str	r3, [r7, #12]
}
 800ae62:	bf00      	nop
 800ae64:	e7fe      	b.n	800ae64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ae66:	4b39      	ldr	r3, [pc, #228]	; (800af4c <xPortStartScheduler+0x12c>)
 800ae68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	22ff      	movs	r2, #255	; 0xff
 800ae76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ae80:	78fb      	ldrb	r3, [r7, #3]
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 800ae88:	b2da      	uxtb	r2, r3
 800ae8a:	4b31      	ldr	r3, [pc, #196]	; (800af50 <xPortStartScheduler+0x130>)
 800ae8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ae8e:	4b31      	ldr	r3, [pc, #196]	; (800af54 <xPortStartScheduler+0x134>)
 800ae90:	2207      	movs	r2, #7
 800ae92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae94:	e009      	b.n	800aeaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ae96:	4b2f      	ldr	r3, [pc, #188]	; (800af54 <xPortStartScheduler+0x134>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	4a2d      	ldr	r2, [pc, #180]	; (800af54 <xPortStartScheduler+0x134>)
 800ae9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aea0:	78fb      	ldrb	r3, [r7, #3]
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	005b      	lsls	r3, r3, #1
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aeaa:	78fb      	ldrb	r3, [r7, #3]
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeb2:	2b80      	cmp	r3, #128	; 0x80
 800aeb4:	d0ef      	beq.n	800ae96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aeb6:	4b27      	ldr	r3, [pc, #156]	; (800af54 <xPortStartScheduler+0x134>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f1c3 0307 	rsb	r3, r3, #7
 800aebe:	2b04      	cmp	r3, #4
 800aec0:	d00a      	beq.n	800aed8 <xPortStartScheduler+0xb8>
	__asm volatile
 800aec2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800aec6:	f383 8811 	msr	BASEPRI, r3
 800aeca:	f3bf 8f6f 	isb	sy
 800aece:	f3bf 8f4f 	dsb	sy
 800aed2:	60bb      	str	r3, [r7, #8]
}
 800aed4:	bf00      	nop
 800aed6:	e7fe      	b.n	800aed6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aed8:	4b1e      	ldr	r3, [pc, #120]	; (800af54 <xPortStartScheduler+0x134>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	021b      	lsls	r3, r3, #8
 800aede:	4a1d      	ldr	r2, [pc, #116]	; (800af54 <xPortStartScheduler+0x134>)
 800aee0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aee2:	4b1c      	ldr	r3, [pc, #112]	; (800af54 <xPortStartScheduler+0x134>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aeea:	4a1a      	ldr	r2, [pc, #104]	; (800af54 <xPortStartScheduler+0x134>)
 800aeec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aef6:	4b18      	ldr	r3, [pc, #96]	; (800af58 <xPortStartScheduler+0x138>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a17      	ldr	r2, [pc, #92]	; (800af58 <xPortStartScheduler+0x138>)
 800aefc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800af00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800af02:	4b15      	ldr	r3, [pc, #84]	; (800af58 <xPortStartScheduler+0x138>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a14      	ldr	r2, [pc, #80]	; (800af58 <xPortStartScheduler+0x138>)
 800af08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800af0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800af0e:	f000 f9a9 	bl	800b264 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800af12:	4b12      	ldr	r3, [pc, #72]	; (800af5c <xPortStartScheduler+0x13c>)
 800af14:	2200      	movs	r2, #0
 800af16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800af18:	f000 f9e0 	bl	800b2dc <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800af1c:	4b10      	ldr	r3, [pc, #64]	; (800af60 <xPortStartScheduler+0x140>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a0f      	ldr	r2, [pc, #60]	; (800af60 <xPortStartScheduler+0x140>)
 800af22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800af26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800af28:	f7ff ff66 	bl	800adf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800af2c:	f001 ff3e 	bl	800cdac <vTaskSwitchContext>
	prvTaskExitError();
 800af30:	f7ff ff1e 	bl	800ad70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3718      	adds	r7, #24
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	e000ed00 	.word	0xe000ed00
 800af44:	410fc271 	.word	0x410fc271
 800af48:	410fc270 	.word	0x410fc270
 800af4c:	e000e400 	.word	0xe000e400
 800af50:	20004210 	.word	0x20004210
 800af54:	20004214 	.word	0x20004214
 800af58:	e000ed20 	.word	0xe000ed20
 800af5c:	20000028 	.word	0x20000028
 800af60:	e000ef34 	.word	0xe000ef34

0800af64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
	__asm volatile
 800af6a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800af6e:	f383 8811 	msr	BASEPRI, r3
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	607b      	str	r3, [r7, #4]
}
 800af7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800af7e:	4b0f      	ldr	r3, [pc, #60]	; (800afbc <vPortEnterCritical+0x58>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	3301      	adds	r3, #1
 800af84:	4a0d      	ldr	r2, [pc, #52]	; (800afbc <vPortEnterCritical+0x58>)
 800af86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800af88:	4b0c      	ldr	r3, [pc, #48]	; (800afbc <vPortEnterCritical+0x58>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d10f      	bne.n	800afb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800af90:	4b0b      	ldr	r3, [pc, #44]	; (800afc0 <vPortEnterCritical+0x5c>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	b2db      	uxtb	r3, r3
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00a      	beq.n	800afb0 <vPortEnterCritical+0x4c>
	__asm volatile
 800af9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800af9e:	f383 8811 	msr	BASEPRI, r3
 800afa2:	f3bf 8f6f 	isb	sy
 800afa6:	f3bf 8f4f 	dsb	sy
 800afaa:	603b      	str	r3, [r7, #0]
}
 800afac:	bf00      	nop
 800afae:	e7fe      	b.n	800afae <vPortEnterCritical+0x4a>
	}
}
 800afb0:	bf00      	nop
 800afb2:	370c      	adds	r7, #12
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr
 800afbc:	20000028 	.word	0x20000028
 800afc0:	e000ed04 	.word	0xe000ed04

0800afc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800afca:	4b12      	ldr	r3, [pc, #72]	; (800b014 <vPortExitCritical+0x50>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d10a      	bne.n	800afe8 <vPortExitCritical+0x24>
	__asm volatile
 800afd2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	607b      	str	r3, [r7, #4]
}
 800afe4:	bf00      	nop
 800afe6:	e7fe      	b.n	800afe6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800afe8:	4b0a      	ldr	r3, [pc, #40]	; (800b014 <vPortExitCritical+0x50>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	3b01      	subs	r3, #1
 800afee:	4a09      	ldr	r2, [pc, #36]	; (800b014 <vPortExitCritical+0x50>)
 800aff0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aff2:	4b08      	ldr	r3, [pc, #32]	; (800b014 <vPortExitCritical+0x50>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d105      	bne.n	800b006 <vPortExitCritical+0x42>
 800affa:	2300      	movs	r3, #0
 800affc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b004:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b006:	bf00      	nop
 800b008:	370c      	adds	r7, #12
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop
 800b014:	20000028 	.word	0x20000028
	...

0800b020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b020:	f3ef 8009 	mrs	r0, PSP
 800b024:	f3bf 8f6f 	isb	sy
 800b028:	4b15      	ldr	r3, [pc, #84]	; (800b080 <pxCurrentTCBConst>)
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	f01e 0f10 	tst.w	lr, #16
 800b030:	bf08      	it	eq
 800b032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b03a:	6010      	str	r0, [r2, #0]
 800b03c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b040:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 800b044:	f380 8811 	msr	BASEPRI, r0
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	f3bf 8f6f 	isb	sy
 800b050:	f001 feac 	bl	800cdac <vTaskSwitchContext>
 800b054:	f04f 0000 	mov.w	r0, #0
 800b058:	f380 8811 	msr	BASEPRI, r0
 800b05c:	bc09      	pop	{r0, r3}
 800b05e:	6819      	ldr	r1, [r3, #0]
 800b060:	6808      	ldr	r0, [r1, #0]
 800b062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b066:	f01e 0f10 	tst.w	lr, #16
 800b06a:	bf08      	it	eq
 800b06c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b070:	f380 8809 	msr	PSP, r0
 800b074:	f3bf 8f6f 	isb	sy
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop
 800b07c:	f3af 8000 	nop.w

0800b080 <pxCurrentTCBConst>:
 800b080:	20004a10 	.word	0x20004a10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b084:	bf00      	nop
 800b086:	bf00      	nop

0800b088 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
	__asm volatile
 800b08e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b092:	f383 8811 	msr	BASEPRI, r3
 800b096:	f3bf 8f6f 	isb	sy
 800b09a:	f3bf 8f4f 	dsb	sy
 800b09e:	607b      	str	r3, [r7, #4]
}
 800b0a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b0a2:	f001 fdc1 	bl	800cc28 <xTaskIncrementTick>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d003      	beq.n	800b0b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b0ac:	4b06      	ldr	r3, [pc, #24]	; (800b0c8 <xPortSysTickHandler+0x40>)
 800b0ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0b2:	601a      	str	r2, [r3, #0]
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	f383 8811 	msr	BASEPRI, r3
}
 800b0be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b0c0:	bf00      	nop
 800b0c2:	3708      	adds	r7, #8
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	e000ed04 	.word	0xe000ed04

0800b0cc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b088      	sub	sp, #32
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800b0d4:	4b5d      	ldr	r3, [pc, #372]	; (800b24c <vPortSuppressTicksAndSleep+0x180>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d902      	bls.n	800b0e4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800b0de:	4b5b      	ldr	r3, [pc, #364]	; (800b24c <vPortSuppressTicksAndSleep+0x180>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800b0e4:	4b5a      	ldr	r3, [pc, #360]	; (800b250 <vPortSuppressTicksAndSleep+0x184>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a59      	ldr	r2, [pc, #356]	; (800b250 <vPortSuppressTicksAndSleep+0x184>)
 800b0ea:	f023 0301 	bic.w	r3, r3, #1
 800b0ee:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800b0f0:	4b58      	ldr	r3, [pc, #352]	; (800b254 <vPortSuppressTicksAndSleep+0x188>)
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	4957      	ldr	r1, [pc, #348]	; (800b258 <vPortSuppressTicksAndSleep+0x18c>)
 800b0fa:	6809      	ldr	r1, [r1, #0]
 800b0fc:	fb01 f303 	mul.w	r3, r1, r3
 800b100:	4413      	add	r3, r2
 800b102:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800b104:	4b55      	ldr	r3, [pc, #340]	; (800b25c <vPortSuppressTicksAndSleep+0x190>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	69fa      	ldr	r2, [r7, #28]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d904      	bls.n	800b118 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800b10e:	4b53      	ldr	r3, [pc, #332]	; (800b25c <vPortSuppressTicksAndSleep+0x190>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	69fa      	ldr	r2, [r7, #28]
 800b114:	1ad3      	subs	r3, r2, r3
 800b116:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800b118:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800b11a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800b11e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800b122:	f002 f849 	bl	800d1b8 <eTaskConfirmSleepModeStatus>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d110      	bne.n	800b14e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800b12c:	4b49      	ldr	r3, [pc, #292]	; (800b254 <vPortSuppressTicksAndSleep+0x188>)
 800b12e:	4a4c      	ldr	r2, [pc, #304]	; (800b260 <vPortSuppressTicksAndSleep+0x194>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b134:	4b46      	ldr	r3, [pc, #280]	; (800b250 <vPortSuppressTicksAndSleep+0x184>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4a45      	ldr	r2, [pc, #276]	; (800b250 <vPortSuppressTicksAndSleep+0x184>)
 800b13a:	f043 0301 	orr.w	r3, r3, #1
 800b13e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800b140:	4b45      	ldr	r3, [pc, #276]	; (800b258 <vPortSuppressTicksAndSleep+0x18c>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a46      	ldr	r2, [pc, #280]	; (800b260 <vPortSuppressTicksAndSleep+0x194>)
 800b146:	3b01      	subs	r3, #1
 800b148:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800b14a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800b14c:	e079      	b.n	800b242 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800b14e:	4a44      	ldr	r2, [pc, #272]	; (800b260 <vPortSuppressTicksAndSleep+0x194>)
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b154:	4b3f      	ldr	r3, [pc, #252]	; (800b254 <vPortSuppressTicksAndSleep+0x188>)
 800b156:	2200      	movs	r2, #0
 800b158:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b15a:	4b3d      	ldr	r3, [pc, #244]	; (800b250 <vPortSuppressTicksAndSleep+0x184>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a3c      	ldr	r2, [pc, #240]	; (800b250 <vPortSuppressTicksAndSleep+0x184>)
 800b160:	f043 0301 	orr.w	r3, r3, #1
 800b164:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800b16a:	2300      	movs	r3, #0
 800b16c:	613b      	str	r3, [r7, #16]
 800b16e:	6938      	ldr	r0, [r7, #16]
 800b170:	f7f7 fc85 	bl	8002a7e <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d004      	beq.n	800b184 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800b17a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800b17e:	bf30      	wfi
				__asm volatile( "isb" );
 800b180:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f7f7 fc84 	bl	8002a92 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800b18a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800b18c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800b190:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800b194:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800b196:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800b19a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800b19e:	4b2c      	ldr	r3, [pc, #176]	; (800b250 <vPortSuppressTicksAndSleep+0x184>)
 800b1a0:	2206      	movs	r2, #6
 800b1a2:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800b1a4:	4b2a      	ldr	r3, [pc, #168]	; (800b250 <vPortSuppressTicksAndSleep+0x184>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d01d      	beq.n	800b1ec <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800b1b0:	4b29      	ldr	r3, [pc, #164]	; (800b258 <vPortSuppressTicksAndSleep+0x18c>)
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	4b27      	ldr	r3, [pc, #156]	; (800b254 <vPortSuppressTicksAndSleep+0x188>)
 800b1b6:	6819      	ldr	r1, [r3, #0]
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	1acb      	subs	r3, r1, r3
 800b1bc:	4413      	add	r3, r2
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800b1c2:	4b26      	ldr	r3, [pc, #152]	; (800b25c <vPortSuppressTicksAndSleep+0x190>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d304      	bcc.n	800b1d6 <vPortSuppressTicksAndSleep+0x10a>
 800b1cc:	4b22      	ldr	r3, [pc, #136]	; (800b258 <vPortSuppressTicksAndSleep+0x18c>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	697a      	ldr	r2, [r7, #20]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d903      	bls.n	800b1de <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800b1d6:	4b20      	ldr	r3, [pc, #128]	; (800b258 <vPortSuppressTicksAndSleep+0x18c>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	3b01      	subs	r3, #1
 800b1dc:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800b1de:	4a20      	ldr	r2, [pc, #128]	; (800b260 <vPortSuppressTicksAndSleep+0x194>)
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	61bb      	str	r3, [r7, #24]
 800b1ea:	e018      	b.n	800b21e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800b1ec:	4b1a      	ldr	r3, [pc, #104]	; (800b258 <vPortSuppressTicksAndSleep+0x18c>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	fb03 f202 	mul.w	r2, r3, r2
 800b1f6:	4b17      	ldr	r3, [pc, #92]	; (800b254 <vPortSuppressTicksAndSleep+0x188>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	1ad3      	subs	r3, r2, r3
 800b1fc:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800b1fe:	4b16      	ldr	r3, [pc, #88]	; (800b258 <vPortSuppressTicksAndSleep+0x18c>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	fbb2 f3f3 	udiv	r3, r2, r3
 800b208:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	3301      	adds	r3, #1
 800b20e:	4a12      	ldr	r2, [pc, #72]	; (800b258 <vPortSuppressTicksAndSleep+0x18c>)
 800b210:	6812      	ldr	r2, [r2, #0]
 800b212:	fb03 f202 	mul.w	r2, r3, r2
 800b216:	4912      	ldr	r1, [pc, #72]	; (800b260 <vPortSuppressTicksAndSleep+0x194>)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	1ad3      	subs	r3, r2, r3
 800b21c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b21e:	4b0d      	ldr	r3, [pc, #52]	; (800b254 <vPortSuppressTicksAndSleep+0x188>)
 800b220:	2200      	movs	r2, #0
 800b222:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b224:	4b0a      	ldr	r3, [pc, #40]	; (800b250 <vPortSuppressTicksAndSleep+0x184>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a09      	ldr	r2, [pc, #36]	; (800b250 <vPortSuppressTicksAndSleep+0x184>)
 800b22a:	f043 0301 	orr.w	r3, r3, #1
 800b22e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800b230:	69b8      	ldr	r0, [r7, #24]
 800b232:	f001 fcd1 	bl	800cbd8 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800b236:	4b08      	ldr	r3, [pc, #32]	; (800b258 <vPortSuppressTicksAndSleep+0x18c>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4a09      	ldr	r2, [pc, #36]	; (800b260 <vPortSuppressTicksAndSleep+0x194>)
 800b23c:	3b01      	subs	r3, #1
 800b23e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800b240:	b662      	cpsie	i
	}
 800b242:	bf00      	nop
 800b244:	3720      	adds	r7, #32
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	20004208 	.word	0x20004208
 800b250:	e000e010 	.word	0xe000e010
 800b254:	e000e018 	.word	0xe000e018
 800b258:	20004204 	.word	0x20004204
 800b25c:	2000420c 	.word	0x2000420c
 800b260:	e000e014 	.word	0xe000e014

0800b264 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b264:	b480      	push	{r7}
 800b266:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800b268:	4b14      	ldr	r3, [pc, #80]	; (800b2bc <vPortSetupTimerInterrupt+0x58>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a14      	ldr	r2, [pc, #80]	; (800b2c0 <vPortSetupTimerInterrupt+0x5c>)
 800b26e:	fba2 2303 	umull	r2, r3, r2, r3
 800b272:	099b      	lsrs	r3, r3, #6
 800b274:	4a13      	ldr	r2, [pc, #76]	; (800b2c4 <vPortSetupTimerInterrupt+0x60>)
 800b276:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800b278:	4b12      	ldr	r3, [pc, #72]	; (800b2c4 <vPortSetupTimerInterrupt+0x60>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800b280:	fbb2 f3f3 	udiv	r3, r2, r3
 800b284:	4a10      	ldr	r2, [pc, #64]	; (800b2c8 <vPortSetupTimerInterrupt+0x64>)
 800b286:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800b288:	4b10      	ldr	r3, [pc, #64]	; (800b2cc <vPortSetupTimerInterrupt+0x68>)
 800b28a:	222d      	movs	r2, #45	; 0x2d
 800b28c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b28e:	4b10      	ldr	r3, [pc, #64]	; (800b2d0 <vPortSetupTimerInterrupt+0x6c>)
 800b290:	2200      	movs	r2, #0
 800b292:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b294:	4b0f      	ldr	r3, [pc, #60]	; (800b2d4 <vPortSetupTimerInterrupt+0x70>)
 800b296:	2200      	movs	r2, #0
 800b298:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b29a:	4b08      	ldr	r3, [pc, #32]	; (800b2bc <vPortSetupTimerInterrupt+0x58>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a08      	ldr	r2, [pc, #32]	; (800b2c0 <vPortSetupTimerInterrupt+0x5c>)
 800b2a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b2a4:	099b      	lsrs	r3, r3, #6
 800b2a6:	4a0c      	ldr	r2, [pc, #48]	; (800b2d8 <vPortSetupTimerInterrupt+0x74>)
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b2ac:	4b08      	ldr	r3, [pc, #32]	; (800b2d0 <vPortSetupTimerInterrupt+0x6c>)
 800b2ae:	2207      	movs	r2, #7
 800b2b0:	601a      	str	r2, [r3, #0]
}
 800b2b2:	bf00      	nop
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr
 800b2bc:	2000001c 	.word	0x2000001c
 800b2c0:	10624dd3 	.word	0x10624dd3
 800b2c4:	20004204 	.word	0x20004204
 800b2c8:	20004208 	.word	0x20004208
 800b2cc:	2000420c 	.word	0x2000420c
 800b2d0:	e000e010 	.word	0xe000e010
 800b2d4:	e000e018 	.word	0xe000e018
 800b2d8:	e000e014 	.word	0xe000e014

0800b2dc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b2dc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b2ec <vPortEnableVFP+0x10>
 800b2e0:	6801      	ldr	r1, [r0, #0]
 800b2e2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b2e6:	6001      	str	r1, [r0, #0]
 800b2e8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b2ea:	bf00      	nop
 800b2ec:	e000ed88 	.word	0xe000ed88

0800b2f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b085      	sub	sp, #20
 800b2f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b2f6:	f3ef 8305 	mrs	r3, IPSR
 800b2fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2b0f      	cmp	r3, #15
 800b300:	d914      	bls.n	800b32c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b302:	4a17      	ldr	r2, [pc, #92]	; (800b360 <vPortValidateInterruptPriority+0x70>)
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	4413      	add	r3, r2
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b30c:	4b15      	ldr	r3, [pc, #84]	; (800b364 <vPortValidateInterruptPriority+0x74>)
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	7afa      	ldrb	r2, [r7, #11]
 800b312:	429a      	cmp	r2, r3
 800b314:	d20a      	bcs.n	800b32c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b316:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b31a:	f383 8811 	msr	BASEPRI, r3
 800b31e:	f3bf 8f6f 	isb	sy
 800b322:	f3bf 8f4f 	dsb	sy
 800b326:	607b      	str	r3, [r7, #4]
}
 800b328:	bf00      	nop
 800b32a:	e7fe      	b.n	800b32a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b32c:	4b0e      	ldr	r3, [pc, #56]	; (800b368 <vPortValidateInterruptPriority+0x78>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b334:	4b0d      	ldr	r3, [pc, #52]	; (800b36c <vPortValidateInterruptPriority+0x7c>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d90a      	bls.n	800b352 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b33c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b340:	f383 8811 	msr	BASEPRI, r3
 800b344:	f3bf 8f6f 	isb	sy
 800b348:	f3bf 8f4f 	dsb	sy
 800b34c:	603b      	str	r3, [r7, #0]
}
 800b34e:	bf00      	nop
 800b350:	e7fe      	b.n	800b350 <vPortValidateInterruptPriority+0x60>
	}
 800b352:	bf00      	nop
 800b354:	3714      	adds	r7, #20
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	e000e3f0 	.word	0xe000e3f0
 800b364:	20004210 	.word	0x20004210
 800b368:	e000ed0c 	.word	0xe000ed0c
 800b36c:	20004214 	.word	0x20004214

0800b370 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d10a      	bne.n	800b39a <xQueueGenericReset+0x2a>
	__asm volatile
 800b384:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b388:	f383 8811 	msr	BASEPRI, r3
 800b38c:	f3bf 8f6f 	isb	sy
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	60bb      	str	r3, [r7, #8]
}
 800b396:	bf00      	nop
 800b398:	e7fe      	b.n	800b398 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b39a:	f7ff fde3 	bl	800af64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3a6:	68f9      	ldr	r1, [r7, #12]
 800b3a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3aa:	fb01 f303 	mul.w	r3, r1, r3
 800b3ae:	441a      	add	r2, r3
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ca:	3b01      	subs	r3, #1
 800b3cc:	68f9      	ldr	r1, [r7, #12]
 800b3ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3d0:	fb01 f303 	mul.w	r3, r1, r3
 800b3d4:	441a      	add	r2, r3
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	22ff      	movs	r2, #255	; 0xff
 800b3de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	22ff      	movs	r2, #255	; 0xff
 800b3e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d114      	bne.n	800b41a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	691b      	ldr	r3, [r3, #16]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d01a      	beq.n	800b42e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	3310      	adds	r3, #16
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f001 fdaf 	bl	800cf60 <xTaskRemoveFromEventList>
 800b402:	4603      	mov	r3, r0
 800b404:	2b00      	cmp	r3, #0
 800b406:	d012      	beq.n	800b42e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b408:	4b0c      	ldr	r3, [pc, #48]	; (800b43c <xQueueGenericReset+0xcc>)
 800b40a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b40e:	601a      	str	r2, [r3, #0]
 800b410:	f3bf 8f4f 	dsb	sy
 800b414:	f3bf 8f6f 	isb	sy
 800b418:	e009      	b.n	800b42e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	3310      	adds	r3, #16
 800b41e:	4618      	mov	r0, r3
 800b420:	f7ff fbbe 	bl	800aba0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	3324      	adds	r3, #36	; 0x24
 800b428:	4618      	mov	r0, r3
 800b42a:	f7ff fbb9 	bl	800aba0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b42e:	f7ff fdc9 	bl	800afc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b432:	2301      	movs	r3, #1
}
 800b434:	4618      	mov	r0, r3
 800b436:	3710      	adds	r7, #16
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	e000ed04 	.word	0xe000ed04

0800b440 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08e      	sub	sp, #56	; 0x38
 800b444:	af02      	add	r7, sp, #8
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d10a      	bne.n	800b46a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b454:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b458:	f383 8811 	msr	BASEPRI, r3
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b466:	bf00      	nop
 800b468:	e7fe      	b.n	800b468 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d10a      	bne.n	800b486 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b470:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b474:	f383 8811 	msr	BASEPRI, r3
 800b478:	f3bf 8f6f 	isb	sy
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b482:	bf00      	nop
 800b484:	e7fe      	b.n	800b484 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d002      	beq.n	800b492 <xQueueGenericCreateStatic+0x52>
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d001      	beq.n	800b496 <xQueueGenericCreateStatic+0x56>
 800b492:	2301      	movs	r3, #1
 800b494:	e000      	b.n	800b498 <xQueueGenericCreateStatic+0x58>
 800b496:	2300      	movs	r3, #0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d10a      	bne.n	800b4b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b49c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b4a0:	f383 8811 	msr	BASEPRI, r3
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	f3bf 8f4f 	dsb	sy
 800b4ac:	623b      	str	r3, [r7, #32]
}
 800b4ae:	bf00      	nop
 800b4b0:	e7fe      	b.n	800b4b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d102      	bne.n	800b4be <xQueueGenericCreateStatic+0x7e>
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d101      	bne.n	800b4c2 <xQueueGenericCreateStatic+0x82>
 800b4be:	2301      	movs	r3, #1
 800b4c0:	e000      	b.n	800b4c4 <xQueueGenericCreateStatic+0x84>
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d10a      	bne.n	800b4de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b4c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b4cc:	f383 8811 	msr	BASEPRI, r3
 800b4d0:	f3bf 8f6f 	isb	sy
 800b4d4:	f3bf 8f4f 	dsb	sy
 800b4d8:	61fb      	str	r3, [r7, #28]
}
 800b4da:	bf00      	nop
 800b4dc:	e7fe      	b.n	800b4dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b4de:	2350      	movs	r3, #80	; 0x50
 800b4e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	2b50      	cmp	r3, #80	; 0x50
 800b4e6:	d00a      	beq.n	800b4fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b4e8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b4ec:	f383 8811 	msr	BASEPRI, r3
 800b4f0:	f3bf 8f6f 	isb	sy
 800b4f4:	f3bf 8f4f 	dsb	sy
 800b4f8:	61bb      	str	r3, [r7, #24]
}
 800b4fa:	bf00      	nop
 800b4fc:	e7fe      	b.n	800b4fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b4fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b506:	2b00      	cmp	r3, #0
 800b508:	d00d      	beq.n	800b526 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50c:	2201      	movs	r2, #1
 800b50e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b512:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b518:	9300      	str	r3, [sp, #0]
 800b51a:	4613      	mov	r3, r2
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	68b9      	ldr	r1, [r7, #8]
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f000 f83f 	bl	800b5a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b528:	4618      	mov	r0, r3
 800b52a:	3730      	adds	r7, #48	; 0x30
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b530:	b580      	push	{r7, lr}
 800b532:	b08a      	sub	sp, #40	; 0x28
 800b534:	af02      	add	r7, sp, #8
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	4613      	mov	r3, r2
 800b53c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10a      	bne.n	800b55a <xQueueGenericCreate+0x2a>
	__asm volatile
 800b544:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b548:	f383 8811 	msr	BASEPRI, r3
 800b54c:	f3bf 8f6f 	isb	sy
 800b550:	f3bf 8f4f 	dsb	sy
 800b554:	613b      	str	r3, [r7, #16]
}
 800b556:	bf00      	nop
 800b558:	e7fe      	b.n	800b558 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	68ba      	ldr	r2, [r7, #8]
 800b55e:	fb02 f303 	mul.w	r3, r2, r3
 800b562:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	3350      	adds	r3, #80	; 0x50
 800b568:	4618      	mov	r0, r3
 800b56a:	f7ff f92b 	bl	800a7c4 <pvPortMalloc>
 800b56e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d011      	beq.n	800b59a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	3350      	adds	r3, #80	; 0x50
 800b57e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	2200      	movs	r2, #0
 800b584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b588:	79fa      	ldrb	r2, [r7, #7]
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	9300      	str	r3, [sp, #0]
 800b58e:	4613      	mov	r3, r2
 800b590:	697a      	ldr	r2, [r7, #20]
 800b592:	68b9      	ldr	r1, [r7, #8]
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f000 f805 	bl	800b5a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b59a:	69bb      	ldr	r3, [r7, #24]
	}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3720      	adds	r7, #32
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	60b9      	str	r1, [r7, #8]
 800b5ae:	607a      	str	r2, [r7, #4]
 800b5b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d103      	bne.n	800b5c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	69ba      	ldr	r2, [r7, #24]
 800b5bc:	601a      	str	r2, [r3, #0]
 800b5be:	e002      	b.n	800b5c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b5c0:	69bb      	ldr	r3, [r7, #24]
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	68fa      	ldr	r2, [r7, #12]
 800b5ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	68ba      	ldr	r2, [r7, #8]
 800b5d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b5d2:	2101      	movs	r1, #1
 800b5d4:	69b8      	ldr	r0, [r7, #24]
 800b5d6:	f7ff fecb 	bl	800b370 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b5da:	69bb      	ldr	r3, [r7, #24]
 800b5dc:	78fa      	ldrb	r2, [r7, #3]
 800b5de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b5e2:	bf00      	nop
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b08a      	sub	sp, #40	; 0x28
 800b5ee:	af02      	add	r7, sp, #8
 800b5f0:	60f8      	str	r0, [r7, #12]
 800b5f2:	60b9      	str	r1, [r7, #8]
 800b5f4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d10a      	bne.n	800b612 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b5fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b600:	f383 8811 	msr	BASEPRI, r3
 800b604:	f3bf 8f6f 	isb	sy
 800b608:	f3bf 8f4f 	dsb	sy
 800b60c:	61bb      	str	r3, [r7, #24]
}
 800b60e:	bf00      	nop
 800b610:	e7fe      	b.n	800b610 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b612:	68ba      	ldr	r2, [r7, #8]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	429a      	cmp	r2, r3
 800b618:	d90a      	bls.n	800b630 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b61a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b61e:	f383 8811 	msr	BASEPRI, r3
 800b622:	f3bf 8f6f 	isb	sy
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	617b      	str	r3, [r7, #20]
}
 800b62c:	bf00      	nop
 800b62e:	e7fe      	b.n	800b62e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b630:	2302      	movs	r3, #2
 800b632:	9300      	str	r3, [sp, #0]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	2100      	movs	r1, #0
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f7ff ff00 	bl	800b440 <xQueueGenericCreateStatic>
 800b640:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d002      	beq.n	800b64e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	68ba      	ldr	r2, [r7, #8]
 800b64c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b64e:	69fb      	ldr	r3, [r7, #28]
	}
 800b650:	4618      	mov	r0, r3
 800b652:	3720      	adds	r7, #32
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b086      	sub	sp, #24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d10a      	bne.n	800b67e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b668:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b66c:	f383 8811 	msr	BASEPRI, r3
 800b670:	f3bf 8f6f 	isb	sy
 800b674:	f3bf 8f4f 	dsb	sy
 800b678:	613b      	str	r3, [r7, #16]
}
 800b67a:	bf00      	nop
 800b67c:	e7fe      	b.n	800b67c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b67e:	683a      	ldr	r2, [r7, #0]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	429a      	cmp	r2, r3
 800b684:	d90a      	bls.n	800b69c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b686:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b68a:	f383 8811 	msr	BASEPRI, r3
 800b68e:	f3bf 8f6f 	isb	sy
 800b692:	f3bf 8f4f 	dsb	sy
 800b696:	60fb      	str	r3, [r7, #12]
}
 800b698:	bf00      	nop
 800b69a:	e7fe      	b.n	800b69a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b69c:	2202      	movs	r2, #2
 800b69e:	2100      	movs	r1, #0
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f7ff ff45 	bl	800b530 <xQueueGenericCreate>
 800b6a6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d002      	beq.n	800b6b4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	683a      	ldr	r2, [r7, #0]
 800b6b2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b6b4:	697b      	ldr	r3, [r7, #20]
	}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3718      	adds	r7, #24
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
	...

0800b6c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b08e      	sub	sp, #56	; 0x38
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	60b9      	str	r1, [r7, #8]
 800b6ca:	607a      	str	r2, [r7, #4]
 800b6cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d10a      	bne.n	800b6f2 <xQueueGenericSend+0x32>
	__asm volatile
 800b6dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b6e0:	f383 8811 	msr	BASEPRI, r3
 800b6e4:	f3bf 8f6f 	isb	sy
 800b6e8:	f3bf 8f4f 	dsb	sy
 800b6ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b6ee:	bf00      	nop
 800b6f0:	e7fe      	b.n	800b6f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d103      	bne.n	800b700 <xQueueGenericSend+0x40>
 800b6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d101      	bne.n	800b704 <xQueueGenericSend+0x44>
 800b700:	2301      	movs	r3, #1
 800b702:	e000      	b.n	800b706 <xQueueGenericSend+0x46>
 800b704:	2300      	movs	r3, #0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d10a      	bne.n	800b720 <xQueueGenericSend+0x60>
	__asm volatile
 800b70a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b70e:	f383 8811 	msr	BASEPRI, r3
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b71c:	bf00      	nop
 800b71e:	e7fe      	b.n	800b71e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	2b02      	cmp	r3, #2
 800b724:	d103      	bne.n	800b72e <xQueueGenericSend+0x6e>
 800b726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d101      	bne.n	800b732 <xQueueGenericSend+0x72>
 800b72e:	2301      	movs	r3, #1
 800b730:	e000      	b.n	800b734 <xQueueGenericSend+0x74>
 800b732:	2300      	movs	r3, #0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d10a      	bne.n	800b74e <xQueueGenericSend+0x8e>
	__asm volatile
 800b738:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b73c:	f383 8811 	msr	BASEPRI, r3
 800b740:	f3bf 8f6f 	isb	sy
 800b744:	f3bf 8f4f 	dsb	sy
 800b748:	623b      	str	r3, [r7, #32]
}
 800b74a:	bf00      	nop
 800b74c:	e7fe      	b.n	800b74c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b74e:	f001 fe25 	bl	800d39c <xTaskGetSchedulerState>
 800b752:	4603      	mov	r3, r0
 800b754:	2b00      	cmp	r3, #0
 800b756:	d102      	bne.n	800b75e <xQueueGenericSend+0x9e>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d101      	bne.n	800b762 <xQueueGenericSend+0xa2>
 800b75e:	2301      	movs	r3, #1
 800b760:	e000      	b.n	800b764 <xQueueGenericSend+0xa4>
 800b762:	2300      	movs	r3, #0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d10a      	bne.n	800b77e <xQueueGenericSend+0xbe>
	__asm volatile
 800b768:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b76c:	f383 8811 	msr	BASEPRI, r3
 800b770:	f3bf 8f6f 	isb	sy
 800b774:	f3bf 8f4f 	dsb	sy
 800b778:	61fb      	str	r3, [r7, #28]
}
 800b77a:	bf00      	nop
 800b77c:	e7fe      	b.n	800b77c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b77e:	f7ff fbf1 	bl	800af64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d302      	bcc.n	800b794 <xQueueGenericSend+0xd4>
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	2b02      	cmp	r3, #2
 800b792:	d129      	bne.n	800b7e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b794:	683a      	ldr	r2, [r7, #0]
 800b796:	68b9      	ldr	r1, [r7, #8]
 800b798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b79a:	f000 fc5e 	bl	800c05a <prvCopyDataToQueue>
 800b79e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d010      	beq.n	800b7ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7aa:	3324      	adds	r3, #36	; 0x24
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f001 fbd7 	bl	800cf60 <xTaskRemoveFromEventList>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d013      	beq.n	800b7e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b7b8:	4b3f      	ldr	r3, [pc, #252]	; (800b8b8 <xQueueGenericSend+0x1f8>)
 800b7ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7be:	601a      	str	r2, [r3, #0]
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	f3bf 8f6f 	isb	sy
 800b7c8:	e00a      	b.n	800b7e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d007      	beq.n	800b7e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b7d0:	4b39      	ldr	r3, [pc, #228]	; (800b8b8 <xQueueGenericSend+0x1f8>)
 800b7d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7d6:	601a      	str	r2, [r3, #0]
 800b7d8:	f3bf 8f4f 	dsb	sy
 800b7dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b7e0:	f7ff fbf0 	bl	800afc4 <vPortExitCritical>
				return pdPASS;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e063      	b.n	800b8b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d103      	bne.n	800b7f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b7ee:	f7ff fbe9 	bl	800afc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	e05c      	b.n	800b8b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d106      	bne.n	800b80a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b7fc:	f107 0314 	add.w	r3, r7, #20
 800b800:	4618      	mov	r0, r3
 800b802:	f001 fc13 	bl	800d02c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b806:	2301      	movs	r3, #1
 800b808:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b80a:	f7ff fbdb 	bl	800afc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b80e:	f001 f8ef 	bl	800c9f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b812:	f7ff fba7 	bl	800af64 <vPortEnterCritical>
 800b816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b818:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b81c:	b25b      	sxtb	r3, r3
 800b81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b822:	d103      	bne.n	800b82c <xQueueGenericSend+0x16c>
 800b824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b826:	2200      	movs	r2, #0
 800b828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b832:	b25b      	sxtb	r3, r3
 800b834:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b838:	d103      	bne.n	800b842 <xQueueGenericSend+0x182>
 800b83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83c:	2200      	movs	r2, #0
 800b83e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b842:	f7ff fbbf 	bl	800afc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b846:	1d3a      	adds	r2, r7, #4
 800b848:	f107 0314 	add.w	r3, r7, #20
 800b84c:	4611      	mov	r1, r2
 800b84e:	4618      	mov	r0, r3
 800b850:	f001 fc02 	bl	800d058 <xTaskCheckForTimeOut>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	d124      	bne.n	800b8a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b85a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b85c:	f000 fcf5 	bl	800c24a <prvIsQueueFull>
 800b860:	4603      	mov	r3, r0
 800b862:	2b00      	cmp	r3, #0
 800b864:	d018      	beq.n	800b898 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b868:	3310      	adds	r3, #16
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	4611      	mov	r1, r2
 800b86e:	4618      	mov	r0, r3
 800b870:	f001 fb26 	bl	800cec0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b876:	f000 fc80 	bl	800c17a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b87a:	f001 f8ff 	bl	800ca7c <xTaskResumeAll>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	f47f af7c 	bne.w	800b77e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b886:	4b0c      	ldr	r3, [pc, #48]	; (800b8b8 <xQueueGenericSend+0x1f8>)
 800b888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b88c:	601a      	str	r2, [r3, #0]
 800b88e:	f3bf 8f4f 	dsb	sy
 800b892:	f3bf 8f6f 	isb	sy
 800b896:	e772      	b.n	800b77e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b89a:	f000 fc6e 	bl	800c17a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b89e:	f001 f8ed 	bl	800ca7c <xTaskResumeAll>
 800b8a2:	e76c      	b.n	800b77e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b8a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8a6:	f000 fc68 	bl	800c17a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b8aa:	f001 f8e7 	bl	800ca7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b8ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3738      	adds	r7, #56	; 0x38
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}
 800b8b8:	e000ed04 	.word	0xe000ed04

0800b8bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b090      	sub	sp, #64	; 0x40
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	607a      	str	r2, [r7, #4]
 800b8c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10a      	bne.n	800b8ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b8d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b8d8:	f383 8811 	msr	BASEPRI, r3
 800b8dc:	f3bf 8f6f 	isb	sy
 800b8e0:	f3bf 8f4f 	dsb	sy
 800b8e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b8e6:	bf00      	nop
 800b8e8:	e7fe      	b.n	800b8e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d103      	bne.n	800b8f8 <xQueueGenericSendFromISR+0x3c>
 800b8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d101      	bne.n	800b8fc <xQueueGenericSendFromISR+0x40>
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	e000      	b.n	800b8fe <xQueueGenericSendFromISR+0x42>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d10a      	bne.n	800b918 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b902:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b906:	f383 8811 	msr	BASEPRI, r3
 800b90a:	f3bf 8f6f 	isb	sy
 800b90e:	f3bf 8f4f 	dsb	sy
 800b912:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b914:	bf00      	nop
 800b916:	e7fe      	b.n	800b916 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	2b02      	cmp	r3, #2
 800b91c:	d103      	bne.n	800b926 <xQueueGenericSendFromISR+0x6a>
 800b91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b922:	2b01      	cmp	r3, #1
 800b924:	d101      	bne.n	800b92a <xQueueGenericSendFromISR+0x6e>
 800b926:	2301      	movs	r3, #1
 800b928:	e000      	b.n	800b92c <xQueueGenericSendFromISR+0x70>
 800b92a:	2300      	movs	r3, #0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10a      	bne.n	800b946 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b930:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b934:	f383 8811 	msr	BASEPRI, r3
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	623b      	str	r3, [r7, #32]
}
 800b942:	bf00      	nop
 800b944:	e7fe      	b.n	800b944 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b946:	f7ff fcd3 	bl	800b2f0 <vPortValidateInterruptPriority>
	__asm volatile
 800b94a:	f3ef 8211 	mrs	r2, BASEPRI
 800b94e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b952:	f383 8811 	msr	BASEPRI, r3
 800b956:	f3bf 8f6f 	isb	sy
 800b95a:	f3bf 8f4f 	dsb	sy
 800b95e:	61fa      	str	r2, [r7, #28]
 800b960:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b962:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b964:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b96e:	429a      	cmp	r2, r3
 800b970:	d302      	bcc.n	800b978 <xQueueGenericSendFromISR+0xbc>
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	2b02      	cmp	r3, #2
 800b976:	d12f      	bne.n	800b9d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b97a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b97e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b986:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b988:	683a      	ldr	r2, [r7, #0]
 800b98a:	68b9      	ldr	r1, [r7, #8]
 800b98c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b98e:	f000 fb64 	bl	800c05a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b992:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b99a:	d112      	bne.n	800b9c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d016      	beq.n	800b9d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a6:	3324      	adds	r3, #36	; 0x24
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f001 fad9 	bl	800cf60 <xTaskRemoveFromEventList>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d00e      	beq.n	800b9d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d00b      	beq.n	800b9d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2201      	movs	r2, #1
 800b9be:	601a      	str	r2, [r3, #0]
 800b9c0:	e007      	b.n	800b9d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b9c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	b25a      	sxtb	r2, r3
 800b9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b9d6:	e001      	b.n	800b9dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9de:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	f383 8811 	msr	BASEPRI, r3
}
 800b9e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b9e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3740      	adds	r7, #64	; 0x40
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b08e      	sub	sp, #56	; 0x38
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
 800b9fa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ba00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d10a      	bne.n	800ba1c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ba06:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ba0a:	f383 8811 	msr	BASEPRI, r3
 800ba0e:	f3bf 8f6f 	isb	sy
 800ba12:	f3bf 8f4f 	dsb	sy
 800ba16:	623b      	str	r3, [r7, #32]
}
 800ba18:	bf00      	nop
 800ba1a:	e7fe      	b.n	800ba1a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ba1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d00a      	beq.n	800ba3a <xQueueGiveFromISR+0x48>
	__asm volatile
 800ba24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ba28:	f383 8811 	msr	BASEPRI, r3
 800ba2c:	f3bf 8f6f 	isb	sy
 800ba30:	f3bf 8f4f 	dsb	sy
 800ba34:	61fb      	str	r3, [r7, #28]
}
 800ba36:	bf00      	nop
 800ba38:	e7fe      	b.n	800ba38 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ba3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d103      	bne.n	800ba4a <xQueueGiveFromISR+0x58>
 800ba42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba44:	689b      	ldr	r3, [r3, #8]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d101      	bne.n	800ba4e <xQueueGiveFromISR+0x5c>
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e000      	b.n	800ba50 <xQueueGiveFromISR+0x5e>
 800ba4e:	2300      	movs	r3, #0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d10a      	bne.n	800ba6a <xQueueGiveFromISR+0x78>
	__asm volatile
 800ba54:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ba58:	f383 8811 	msr	BASEPRI, r3
 800ba5c:	f3bf 8f6f 	isb	sy
 800ba60:	f3bf 8f4f 	dsb	sy
 800ba64:	61bb      	str	r3, [r7, #24]
}
 800ba66:	bf00      	nop
 800ba68:	e7fe      	b.n	800ba68 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba6a:	f7ff fc41 	bl	800b2f0 <vPortValidateInterruptPriority>
	__asm volatile
 800ba6e:	f3ef 8211 	mrs	r2, BASEPRI
 800ba72:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ba76:	f383 8811 	msr	BASEPRI, r3
 800ba7a:	f3bf 8f6f 	isb	sy
 800ba7e:	f3bf 8f4f 	dsb	sy
 800ba82:	617a      	str	r2, [r7, #20]
 800ba84:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ba86:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ba90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d22b      	bcs.n	800baf2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ba9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800baa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800baa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa6:	1c5a      	adds	r2, r3, #1
 800baa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baaa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800baac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab4:	d112      	bne.n	800badc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baba:	2b00      	cmp	r3, #0
 800babc:	d016      	beq.n	800baec <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800babe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac0:	3324      	adds	r3, #36	; 0x24
 800bac2:	4618      	mov	r0, r3
 800bac4:	f001 fa4c 	bl	800cf60 <xTaskRemoveFromEventList>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00e      	beq.n	800baec <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d00b      	beq.n	800baec <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	2201      	movs	r2, #1
 800bad8:	601a      	str	r2, [r3, #0]
 800bada:	e007      	b.n	800baec <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800badc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bae0:	3301      	adds	r3, #1
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	b25a      	sxtb	r2, r3
 800bae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800baec:	2301      	movs	r3, #1
 800baee:	637b      	str	r3, [r7, #52]	; 0x34
 800baf0:	e001      	b.n	800baf6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800baf2:	2300      	movs	r3, #0
 800baf4:	637b      	str	r3, [r7, #52]	; 0x34
 800baf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f383 8811 	msr	BASEPRI, r3
}
 800bb00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3738      	adds	r7, #56	; 0x38
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b08c      	sub	sp, #48	; 0x30
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d10a      	bne.n	800bb3c <xQueueReceive+0x30>
	__asm volatile
 800bb26:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bb2a:	f383 8811 	msr	BASEPRI, r3
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	623b      	str	r3, [r7, #32]
}
 800bb38:	bf00      	nop
 800bb3a:	e7fe      	b.n	800bb3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d103      	bne.n	800bb4a <xQueueReceive+0x3e>
 800bb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d101      	bne.n	800bb4e <xQueueReceive+0x42>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e000      	b.n	800bb50 <xQueueReceive+0x44>
 800bb4e:	2300      	movs	r3, #0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d10a      	bne.n	800bb6a <xQueueReceive+0x5e>
	__asm volatile
 800bb54:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bb58:	f383 8811 	msr	BASEPRI, r3
 800bb5c:	f3bf 8f6f 	isb	sy
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	61fb      	str	r3, [r7, #28]
}
 800bb66:	bf00      	nop
 800bb68:	e7fe      	b.n	800bb68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb6a:	f001 fc17 	bl	800d39c <xTaskGetSchedulerState>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d102      	bne.n	800bb7a <xQueueReceive+0x6e>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d101      	bne.n	800bb7e <xQueueReceive+0x72>
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	e000      	b.n	800bb80 <xQueueReceive+0x74>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d10a      	bne.n	800bb9a <xQueueReceive+0x8e>
	__asm volatile
 800bb84:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bb88:	f383 8811 	msr	BASEPRI, r3
 800bb8c:	f3bf 8f6f 	isb	sy
 800bb90:	f3bf 8f4f 	dsb	sy
 800bb94:	61bb      	str	r3, [r7, #24]
}
 800bb96:	bf00      	nop
 800bb98:	e7fe      	b.n	800bb98 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb9a:	f7ff f9e3 	bl	800af64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d01f      	beq.n	800bbea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bbaa:	68b9      	ldr	r1, [r7, #8]
 800bbac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbae:	f000 fabe 	bl	800c12e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb4:	1e5a      	subs	r2, r3, #1
 800bbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbbc:	691b      	ldr	r3, [r3, #16]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d00f      	beq.n	800bbe2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc4:	3310      	adds	r3, #16
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f001 f9ca 	bl	800cf60 <xTaskRemoveFromEventList>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d007      	beq.n	800bbe2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bbd2:	4b3d      	ldr	r3, [pc, #244]	; (800bcc8 <xQueueReceive+0x1bc>)
 800bbd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbd8:	601a      	str	r2, [r3, #0]
 800bbda:	f3bf 8f4f 	dsb	sy
 800bbde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bbe2:	f7ff f9ef 	bl	800afc4 <vPortExitCritical>
				return pdPASS;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e069      	b.n	800bcbe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d103      	bne.n	800bbf8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bbf0:	f7ff f9e8 	bl	800afc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	e062      	b.n	800bcbe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d106      	bne.n	800bc0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bbfe:	f107 0310 	add.w	r3, r7, #16
 800bc02:	4618      	mov	r0, r3
 800bc04:	f001 fa12 	bl	800d02c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc0c:	f7ff f9da 	bl	800afc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc10:	f000 feee 	bl	800c9f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc14:	f7ff f9a6 	bl	800af64 <vPortEnterCritical>
 800bc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc1e:	b25b      	sxtb	r3, r3
 800bc20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc24:	d103      	bne.n	800bc2e <xQueueReceive+0x122>
 800bc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc34:	b25b      	sxtb	r3, r3
 800bc36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc3a:	d103      	bne.n	800bc44 <xQueueReceive+0x138>
 800bc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc44:	f7ff f9be 	bl	800afc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc48:	1d3a      	adds	r2, r7, #4
 800bc4a:	f107 0310 	add.w	r3, r7, #16
 800bc4e:	4611      	mov	r1, r2
 800bc50:	4618      	mov	r0, r3
 800bc52:	f001 fa01 	bl	800d058 <xTaskCheckForTimeOut>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d123      	bne.n	800bca4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc5e:	f000 fade 	bl	800c21e <prvIsQueueEmpty>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d017      	beq.n	800bc98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6a:	3324      	adds	r3, #36	; 0x24
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	4611      	mov	r1, r2
 800bc70:	4618      	mov	r0, r3
 800bc72:	f001 f925 	bl	800cec0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bc76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc78:	f000 fa7f 	bl	800c17a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bc7c:	f000 fefe 	bl	800ca7c <xTaskResumeAll>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d189      	bne.n	800bb9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bc86:	4b10      	ldr	r3, [pc, #64]	; (800bcc8 <xQueueReceive+0x1bc>)
 800bc88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc8c:	601a      	str	r2, [r3, #0]
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	f3bf 8f6f 	isb	sy
 800bc96:	e780      	b.n	800bb9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bc98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc9a:	f000 fa6e 	bl	800c17a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc9e:	f000 feed 	bl	800ca7c <xTaskResumeAll>
 800bca2:	e77a      	b.n	800bb9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bca6:	f000 fa68 	bl	800c17a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bcaa:	f000 fee7 	bl	800ca7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bcae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcb0:	f000 fab5 	bl	800c21e <prvIsQueueEmpty>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f43f af6f 	beq.w	800bb9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bcbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3730      	adds	r7, #48	; 0x30
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	e000ed04 	.word	0xe000ed04

0800bccc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b08e      	sub	sp, #56	; 0x38
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bcde:	2300      	movs	r3, #0
 800bce0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10a      	bne.n	800bcfe <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bce8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	623b      	str	r3, [r7, #32]
}
 800bcfa:	bf00      	nop
 800bcfc:	e7fe      	b.n	800bcfc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bcfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00a      	beq.n	800bd1c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bd06:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bd0a:	f383 8811 	msr	BASEPRI, r3
 800bd0e:	f3bf 8f6f 	isb	sy
 800bd12:	f3bf 8f4f 	dsb	sy
 800bd16:	61fb      	str	r3, [r7, #28]
}
 800bd18:	bf00      	nop
 800bd1a:	e7fe      	b.n	800bd1a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd1c:	f001 fb3e 	bl	800d39c <xTaskGetSchedulerState>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d102      	bne.n	800bd2c <xQueueSemaphoreTake+0x60>
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d101      	bne.n	800bd30 <xQueueSemaphoreTake+0x64>
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e000      	b.n	800bd32 <xQueueSemaphoreTake+0x66>
 800bd30:	2300      	movs	r3, #0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d10a      	bne.n	800bd4c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bd36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bd3a:	f383 8811 	msr	BASEPRI, r3
 800bd3e:	f3bf 8f6f 	isb	sy
 800bd42:	f3bf 8f4f 	dsb	sy
 800bd46:	61bb      	str	r3, [r7, #24]
}
 800bd48:	bf00      	nop
 800bd4a:	e7fe      	b.n	800bd4a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd4c:	f7ff f90a 	bl	800af64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd54:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d024      	beq.n	800bda6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5e:	1e5a      	subs	r2, r3, #1
 800bd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd62:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d104      	bne.n	800bd76 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bd6c:	f001 fc98 	bl	800d6a0 <pvTaskIncrementMutexHeldCount>
 800bd70:	4602      	mov	r2, r0
 800bd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd74:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00f      	beq.n	800bd9e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd80:	3310      	adds	r3, #16
 800bd82:	4618      	mov	r0, r3
 800bd84:	f001 f8ec 	bl	800cf60 <xTaskRemoveFromEventList>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d007      	beq.n	800bd9e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd8e:	4b54      	ldr	r3, [pc, #336]	; (800bee0 <xQueueSemaphoreTake+0x214>)
 800bd90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd94:	601a      	str	r2, [r3, #0]
 800bd96:	f3bf 8f4f 	dsb	sy
 800bd9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd9e:	f7ff f911 	bl	800afc4 <vPortExitCritical>
				return pdPASS;
 800bda2:	2301      	movs	r3, #1
 800bda4:	e097      	b.n	800bed6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d111      	bne.n	800bdd0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d00a      	beq.n	800bdc8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bdb2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bdb6:	f383 8811 	msr	BASEPRI, r3
 800bdba:	f3bf 8f6f 	isb	sy
 800bdbe:	f3bf 8f4f 	dsb	sy
 800bdc2:	617b      	str	r3, [r7, #20]
}
 800bdc4:	bf00      	nop
 800bdc6:	e7fe      	b.n	800bdc6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bdc8:	f7ff f8fc 	bl	800afc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	e082      	b.n	800bed6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bdd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d106      	bne.n	800bde4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bdd6:	f107 030c 	add.w	r3, r7, #12
 800bdda:	4618      	mov	r0, r3
 800bddc:	f001 f926 	bl	800d02c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bde0:	2301      	movs	r3, #1
 800bde2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bde4:	f7ff f8ee 	bl	800afc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bde8:	f000 fe02 	bl	800c9f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bdec:	f7ff f8ba 	bl	800af64 <vPortEnterCritical>
 800bdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdf6:	b25b      	sxtb	r3, r3
 800bdf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdfc:	d103      	bne.n	800be06 <xQueueSemaphoreTake+0x13a>
 800bdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be00:	2200      	movs	r2, #0
 800be02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be0c:	b25b      	sxtb	r3, r3
 800be0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be12:	d103      	bne.n	800be1c <xQueueSemaphoreTake+0x150>
 800be14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be16:	2200      	movs	r2, #0
 800be18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be1c:	f7ff f8d2 	bl	800afc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be20:	463a      	mov	r2, r7
 800be22:	f107 030c 	add.w	r3, r7, #12
 800be26:	4611      	mov	r1, r2
 800be28:	4618      	mov	r0, r3
 800be2a:	f001 f915 	bl	800d058 <xTaskCheckForTimeOut>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d132      	bne.n	800be9a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be36:	f000 f9f2 	bl	800c21e <prvIsQueueEmpty>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d026      	beq.n	800be8e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d109      	bne.n	800be5c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800be48:	f7ff f88c 	bl	800af64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	4618      	mov	r0, r3
 800be52:	f001 fac1 	bl	800d3d8 <xTaskPriorityInherit>
 800be56:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800be58:	f7ff f8b4 	bl	800afc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5e:	3324      	adds	r3, #36	; 0x24
 800be60:	683a      	ldr	r2, [r7, #0]
 800be62:	4611      	mov	r1, r2
 800be64:	4618      	mov	r0, r3
 800be66:	f001 f82b 	bl	800cec0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be6c:	f000 f985 	bl	800c17a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be70:	f000 fe04 	bl	800ca7c <xTaskResumeAll>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	f47f af68 	bne.w	800bd4c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800be7c:	4b18      	ldr	r3, [pc, #96]	; (800bee0 <xQueueSemaphoreTake+0x214>)
 800be7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be82:	601a      	str	r2, [r3, #0]
 800be84:	f3bf 8f4f 	dsb	sy
 800be88:	f3bf 8f6f 	isb	sy
 800be8c:	e75e      	b.n	800bd4c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800be8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be90:	f000 f973 	bl	800c17a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be94:	f000 fdf2 	bl	800ca7c <xTaskResumeAll>
 800be98:	e758      	b.n	800bd4c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800be9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be9c:	f000 f96d 	bl	800c17a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bea0:	f000 fdec 	bl	800ca7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bea4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bea6:	f000 f9ba 	bl	800c21e <prvIsQueueEmpty>
 800beaa:	4603      	mov	r3, r0
 800beac:	2b00      	cmp	r3, #0
 800beae:	f43f af4d 	beq.w	800bd4c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800beb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d00d      	beq.n	800bed4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800beb8:	f7ff f854 	bl	800af64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bebc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bebe:	f000 f8b4 	bl	800c02a <prvGetDisinheritPriorityAfterTimeout>
 800bec2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800beca:	4618      	mov	r0, r3
 800becc:	f001 fb62 	bl	800d594 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bed0:	f7ff f878 	bl	800afc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bed4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3738      	adds	r7, #56	; 0x38
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	e000ed04 	.word	0xe000ed04

0800bee4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b08e      	sub	sp, #56	; 0x38
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d10a      	bne.n	800bf10 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800befa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800befe:	f383 8811 	msr	BASEPRI, r3
 800bf02:	f3bf 8f6f 	isb	sy
 800bf06:	f3bf 8f4f 	dsb	sy
 800bf0a:	623b      	str	r3, [r7, #32]
}
 800bf0c:	bf00      	nop
 800bf0e:	e7fe      	b.n	800bf0e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d103      	bne.n	800bf1e <xQueueReceiveFromISR+0x3a>
 800bf16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d101      	bne.n	800bf22 <xQueueReceiveFromISR+0x3e>
 800bf1e:	2301      	movs	r3, #1
 800bf20:	e000      	b.n	800bf24 <xQueueReceiveFromISR+0x40>
 800bf22:	2300      	movs	r3, #0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d10a      	bne.n	800bf3e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bf28:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bf2c:	f383 8811 	msr	BASEPRI, r3
 800bf30:	f3bf 8f6f 	isb	sy
 800bf34:	f3bf 8f4f 	dsb	sy
 800bf38:	61fb      	str	r3, [r7, #28]
}
 800bf3a:	bf00      	nop
 800bf3c:	e7fe      	b.n	800bf3c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf3e:	f7ff f9d7 	bl	800b2f0 <vPortValidateInterruptPriority>
	__asm volatile
 800bf42:	f3ef 8211 	mrs	r2, BASEPRI
 800bf46:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bf4a:	f383 8811 	msr	BASEPRI, r3
 800bf4e:	f3bf 8f6f 	isb	sy
 800bf52:	f3bf 8f4f 	dsb	sy
 800bf56:	61ba      	str	r2, [r7, #24]
 800bf58:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bf5a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf62:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d02f      	beq.n	800bfca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf74:	68b9      	ldr	r1, [r7, #8]
 800bf76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf78:	f000 f8d9 	bl	800c12e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7e:	1e5a      	subs	r2, r3, #1
 800bf80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf82:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bf84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bf88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf8c:	d112      	bne.n	800bfb4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf90:	691b      	ldr	r3, [r3, #16]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d016      	beq.n	800bfc4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf98:	3310      	adds	r3, #16
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f000 ffe0 	bl	800cf60 <xTaskRemoveFromEventList>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d00e      	beq.n	800bfc4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d00b      	beq.n	800bfc4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	601a      	str	r2, [r3, #0]
 800bfb2:	e007      	b.n	800bfc4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bfb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfb8:	3301      	adds	r3, #1
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	b25a      	sxtb	r2, r3
 800bfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	637b      	str	r3, [r7, #52]	; 0x34
 800bfc8:	e001      	b.n	800bfce <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	637b      	str	r3, [r7, #52]	; 0x34
 800bfce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	f383 8811 	msr	BASEPRI, r3
}
 800bfd8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bfda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3738      	adds	r7, #56	; 0x38
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d10a      	bne.n	800c00c <vQueueDelete+0x28>
	__asm volatile
 800bff6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bffa:	f383 8811 	msr	BASEPRI, r3
 800bffe:	f3bf 8f6f 	isb	sy
 800c002:	f3bf 8f4f 	dsb	sy
 800c006:	60bb      	str	r3, [r7, #8]
}
 800c008:	bf00      	nop
 800c00a:	e7fe      	b.n	800c00a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c00c:	68f8      	ldr	r0, [r7, #12]
 800c00e:	f000 f95f 	bl	800c2d0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d102      	bne.n	800c022 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	f7fe fca1 	bl	800a964 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c022:	bf00      	nop
 800c024:	3710      	adds	r7, #16
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}

0800c02a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c02a:	b480      	push	{r7}
 800c02c:	b085      	sub	sp, #20
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c036:	2b00      	cmp	r3, #0
 800c038:	d006      	beq.n	800c048 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c044:	60fb      	str	r3, [r7, #12]
 800c046:	e001      	b.n	800c04c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c048:	2300      	movs	r3, #0
 800c04a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c04c:	68fb      	ldr	r3, [r7, #12]
	}
 800c04e:	4618      	mov	r0, r3
 800c050:	3714      	adds	r7, #20
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr

0800c05a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b086      	sub	sp, #24
 800c05e:	af00      	add	r7, sp, #0
 800c060:	60f8      	str	r0, [r7, #12]
 800c062:	60b9      	str	r1, [r7, #8]
 800c064:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c066:	2300      	movs	r3, #0
 800c068:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c06e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c074:	2b00      	cmp	r3, #0
 800c076:	d10d      	bne.n	800c094 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d14d      	bne.n	800c11c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	4618      	mov	r0, r3
 800c086:	f001 fa11 	bl	800d4ac <xTaskPriorityDisinherit>
 800c08a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2200      	movs	r2, #0
 800c090:	609a      	str	r2, [r3, #8]
 800c092:	e043      	b.n	800c11c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d119      	bne.n	800c0ce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6858      	ldr	r0, [r3, #4]
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	68b9      	ldr	r1, [r7, #8]
 800c0a6:	f003 f949 	bl	800f33c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	685a      	ldr	r2, [r3, #4]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b2:	441a      	add	r2, r3
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	685a      	ldr	r2, [r3, #4]
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d32b      	bcc.n	800c11c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	605a      	str	r2, [r3, #4]
 800c0cc:	e026      	b.n	800c11c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	68d8      	ldr	r0, [r3, #12]
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	68b9      	ldr	r1, [r7, #8]
 800c0da:	f003 f92f 	bl	800f33c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	68da      	ldr	r2, [r3, #12]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e6:	425b      	negs	r3, r3
 800c0e8:	441a      	add	r2, r3
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	68da      	ldr	r2, [r3, #12]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d207      	bcs.n	800c10a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	689a      	ldr	r2, [r3, #8]
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c102:	425b      	negs	r3, r3
 800c104:	441a      	add	r2, r3
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2b02      	cmp	r3, #2
 800c10e:	d105      	bne.n	800c11c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d002      	beq.n	800c11c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	3b01      	subs	r3, #1
 800c11a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	1c5a      	adds	r2, r3, #1
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c124:	697b      	ldr	r3, [r7, #20]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3718      	adds	r7, #24
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b082      	sub	sp, #8
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
 800c136:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d018      	beq.n	800c172 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	68da      	ldr	r2, [r3, #12]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c148:	441a      	add	r2, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	68da      	ldr	r2, [r3, #12]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	689b      	ldr	r3, [r3, #8]
 800c156:	429a      	cmp	r2, r3
 800c158:	d303      	bcc.n	800c162 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	68d9      	ldr	r1, [r3, #12]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c16a:	461a      	mov	r2, r3
 800c16c:	6838      	ldr	r0, [r7, #0]
 800c16e:	f003 f8e5 	bl	800f33c <memcpy>
	}
}
 800c172:	bf00      	nop
 800c174:	3708      	adds	r7, #8
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}

0800c17a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c17a:	b580      	push	{r7, lr}
 800c17c:	b084      	sub	sp, #16
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c182:	f7fe feef 	bl	800af64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c18c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c18e:	e011      	b.n	800c1b4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c194:	2b00      	cmp	r3, #0
 800c196:	d012      	beq.n	800c1be <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	3324      	adds	r3, #36	; 0x24
 800c19c:	4618      	mov	r0, r3
 800c19e:	f000 fedf 	bl	800cf60 <xTaskRemoveFromEventList>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d001      	beq.n	800c1ac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c1a8:	f000 ffc8 	bl	800d13c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c1ac:	7bfb      	ldrb	r3, [r7, #15]
 800c1ae:	3b01      	subs	r3, #1
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c1b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	dce9      	bgt.n	800c190 <prvUnlockQueue+0x16>
 800c1bc:	e000      	b.n	800c1c0 <prvUnlockQueue+0x46>
					break;
 800c1be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	22ff      	movs	r2, #255	; 0xff
 800c1c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c1c8:	f7fe fefc 	bl	800afc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c1cc:	f7fe feca 	bl	800af64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c1d8:	e011      	b.n	800c1fe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d012      	beq.n	800c208 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	3310      	adds	r3, #16
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f000 feba 	bl	800cf60 <xTaskRemoveFromEventList>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d001      	beq.n	800c1f6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c1f2:	f000 ffa3 	bl	800d13c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c1f6:	7bbb      	ldrb	r3, [r7, #14]
 800c1f8:	3b01      	subs	r3, #1
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c1fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c202:	2b00      	cmp	r3, #0
 800c204:	dce9      	bgt.n	800c1da <prvUnlockQueue+0x60>
 800c206:	e000      	b.n	800c20a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c208:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	22ff      	movs	r2, #255	; 0xff
 800c20e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c212:	f7fe fed7 	bl	800afc4 <vPortExitCritical>
}
 800c216:	bf00      	nop
 800c218:	3710      	adds	r7, #16
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b084      	sub	sp, #16
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c226:	f7fe fe9d 	bl	800af64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d102      	bne.n	800c238 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c232:	2301      	movs	r3, #1
 800c234:	60fb      	str	r3, [r7, #12]
 800c236:	e001      	b.n	800c23c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c238:	2300      	movs	r3, #0
 800c23a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c23c:	f7fe fec2 	bl	800afc4 <vPortExitCritical>

	return xReturn;
 800c240:	68fb      	ldr	r3, [r7, #12]
}
 800c242:	4618      	mov	r0, r3
 800c244:	3710      	adds	r7, #16
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b084      	sub	sp, #16
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c252:	f7fe fe87 	bl	800af64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c25e:	429a      	cmp	r2, r3
 800c260:	d102      	bne.n	800c268 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c262:	2301      	movs	r3, #1
 800c264:	60fb      	str	r3, [r7, #12]
 800c266:	e001      	b.n	800c26c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c268:	2300      	movs	r3, #0
 800c26a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c26c:	f7fe feaa 	bl	800afc4 <vPortExitCritical>

	return xReturn;
 800c270:	68fb      	ldr	r3, [r7, #12]
}
 800c272:	4618      	mov	r0, r3
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
	...

0800c27c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c27c:	b480      	push	{r7}
 800c27e:	b085      	sub	sp, #20
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c286:	2300      	movs	r3, #0
 800c288:	60fb      	str	r3, [r7, #12]
 800c28a:	e014      	b.n	800c2b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c28c:	4a0f      	ldr	r2, [pc, #60]	; (800c2cc <vQueueAddToRegistry+0x50>)
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d10b      	bne.n	800c2b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c298:	490c      	ldr	r1, [pc, #48]	; (800c2cc <vQueueAddToRegistry+0x50>)
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	683a      	ldr	r2, [r7, #0]
 800c29e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c2a2:	4a0a      	ldr	r2, [pc, #40]	; (800c2cc <vQueueAddToRegistry+0x50>)
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	00db      	lsls	r3, r3, #3
 800c2a8:	4413      	add	r3, r2
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c2ae:	e006      	b.n	800c2be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	60fb      	str	r3, [r7, #12]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2bfe      	cmp	r3, #254	; 0xfe
 800c2ba:	d9e7      	bls.n	800c28c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c2bc:	bf00      	nop
 800c2be:	bf00      	nop
 800c2c0:	3714      	adds	r7, #20
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr
 800c2ca:	bf00      	nop
 800c2cc:	20004218 	.word	0x20004218

0800c2d0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c2d8:	2300      	movs	r3, #0
 800c2da:	60fb      	str	r3, [r7, #12]
 800c2dc:	e016      	b.n	800c30c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c2de:	4a10      	ldr	r2, [pc, #64]	; (800c320 <vQueueUnregisterQueue+0x50>)
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	00db      	lsls	r3, r3, #3
 800c2e4:	4413      	add	r3, r2
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d10b      	bne.n	800c306 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c2ee:	4a0c      	ldr	r2, [pc, #48]	; (800c320 <vQueueUnregisterQueue+0x50>)
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2100      	movs	r1, #0
 800c2f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c2f8:	4a09      	ldr	r2, [pc, #36]	; (800c320 <vQueueUnregisterQueue+0x50>)
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	00db      	lsls	r3, r3, #3
 800c2fe:	4413      	add	r3, r2
 800c300:	2200      	movs	r2, #0
 800c302:	605a      	str	r2, [r3, #4]
				break;
 800c304:	e006      	b.n	800c314 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	3301      	adds	r3, #1
 800c30a:	60fb      	str	r3, [r7, #12]
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2bfe      	cmp	r3, #254	; 0xfe
 800c310:	d9e5      	bls.n	800c2de <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c312:	bf00      	nop
 800c314:	bf00      	nop
 800c316:	3714      	adds	r7, #20
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr
 800c320:	20004218 	.word	0x20004218

0800c324 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c324:	b580      	push	{r7, lr}
 800c326:	b086      	sub	sp, #24
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c334:	f7fe fe16 	bl	800af64 <vPortEnterCritical>
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c33e:	b25b      	sxtb	r3, r3
 800c340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c344:	d103      	bne.n	800c34e <vQueueWaitForMessageRestricted+0x2a>
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	2200      	movs	r2, #0
 800c34a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c354:	b25b      	sxtb	r3, r3
 800c356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c35a:	d103      	bne.n	800c364 <vQueueWaitForMessageRestricted+0x40>
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	2200      	movs	r2, #0
 800c360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c364:	f7fe fe2e 	bl	800afc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d106      	bne.n	800c37e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	3324      	adds	r3, #36	; 0x24
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	68b9      	ldr	r1, [r7, #8]
 800c378:	4618      	mov	r0, r3
 800c37a:	f000 fdc5 	bl	800cf08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c37e:	6978      	ldr	r0, [r7, #20]
 800c380:	f7ff fefb 	bl	800c17a <prvUnlockQueue>
	}
 800c384:	bf00      	nop
 800c386:	3718      	adds	r7, #24
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b08e      	sub	sp, #56	; 0x38
 800c390:	af04      	add	r7, sp, #16
 800c392:	60f8      	str	r0, [r7, #12]
 800c394:	60b9      	str	r1, [r7, #8]
 800c396:	607a      	str	r2, [r7, #4]
 800c398:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d10a      	bne.n	800c3b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c3a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c3a4:	f383 8811 	msr	BASEPRI, r3
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	623b      	str	r3, [r7, #32]
}
 800c3b2:	bf00      	nop
 800c3b4:	e7fe      	b.n	800c3b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d10a      	bne.n	800c3d2 <xTaskCreateStatic+0x46>
	__asm volatile
 800c3bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c3c0:	f383 8811 	msr	BASEPRI, r3
 800c3c4:	f3bf 8f6f 	isb	sy
 800c3c8:	f3bf 8f4f 	dsb	sy
 800c3cc:	61fb      	str	r3, [r7, #28]
}
 800c3ce:	bf00      	nop
 800c3d0:	e7fe      	b.n	800c3d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c3d2:	f44f 73da 	mov.w	r3, #436	; 0x1b4
 800c3d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	f5b3 7fda 	cmp.w	r3, #436	; 0x1b4
 800c3de:	d00a      	beq.n	800c3f6 <xTaskCreateStatic+0x6a>
	__asm volatile
 800c3e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c3e4:	f383 8811 	msr	BASEPRI, r3
 800c3e8:	f3bf 8f6f 	isb	sy
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	61bb      	str	r3, [r7, #24]
}
 800c3f2:	bf00      	nop
 800c3f4:	e7fe      	b.n	800c3f4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c3f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d01e      	beq.n	800c43c <xTaskCreateStatic+0xb0>
 800c3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c400:	2b00      	cmp	r3, #0
 800c402:	d01b      	beq.n	800c43c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c406:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c40c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c410:	2202      	movs	r2, #2
 800c412:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c416:	2300      	movs	r3, #0
 800c418:	9303      	str	r3, [sp, #12]
 800c41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41c:	9302      	str	r3, [sp, #8]
 800c41e:	f107 0314 	add.w	r3, r7, #20
 800c422:	9301      	str	r3, [sp, #4]
 800c424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c426:	9300      	str	r3, [sp, #0]
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	68b9      	ldr	r1, [r7, #8]
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f000 f852 	bl	800c4d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c434:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c436:	f000 f907 	bl	800c648 <prvAddNewTaskToReadyList>
 800c43a:	e001      	b.n	800c440 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800c43c:	2300      	movs	r3, #0
 800c43e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c440:	697b      	ldr	r3, [r7, #20]
	}
 800c442:	4618      	mov	r0, r3
 800c444:	3728      	adds	r7, #40	; 0x28
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}

0800c44a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b08c      	sub	sp, #48	; 0x30
 800c44e:	af04      	add	r7, sp, #16
 800c450:	60f8      	str	r0, [r7, #12]
 800c452:	60b9      	str	r1, [r7, #8]
 800c454:	603b      	str	r3, [r7, #0]
 800c456:	4613      	mov	r3, r2
 800c458:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c45a:	88fb      	ldrh	r3, [r7, #6]
 800c45c:	009b      	lsls	r3, r3, #2
 800c45e:	4618      	mov	r0, r3
 800c460:	f7fe f9b0 	bl	800a7c4 <pvPortMalloc>
 800c464:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d00f      	beq.n	800c48c <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c46c:	f44f 70da 	mov.w	r0, #436	; 0x1b4
 800c470:	f7fe f9a8 	bl	800a7c4 <pvPortMalloc>
 800c474:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d003      	beq.n	800c484 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c47c:	69fb      	ldr	r3, [r7, #28]
 800c47e:	697a      	ldr	r2, [r7, #20]
 800c480:	631a      	str	r2, [r3, #48]	; 0x30
 800c482:	e005      	b.n	800c490 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c484:	6978      	ldr	r0, [r7, #20]
 800c486:	f7fe fa6d 	bl	800a964 <vPortFree>
 800c48a:	e001      	b.n	800c490 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c48c:	2300      	movs	r3, #0
 800c48e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d017      	beq.n	800c4c6 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c496:	69fb      	ldr	r3, [r7, #28]
 800c498:	2200      	movs	r2, #0
 800c49a:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c49e:	88fa      	ldrh	r2, [r7, #6]
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	9303      	str	r3, [sp, #12]
 800c4a4:	69fb      	ldr	r3, [r7, #28]
 800c4a6:	9302      	str	r3, [sp, #8]
 800c4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4aa:	9301      	str	r3, [sp, #4]
 800c4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ae:	9300      	str	r3, [sp, #0]
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	68b9      	ldr	r1, [r7, #8]
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f000 f80f 	bl	800c4d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c4ba:	69f8      	ldr	r0, [r7, #28]
 800c4bc:	f000 f8c4 	bl	800c648 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	61bb      	str	r3, [r7, #24]
 800c4c4:	e002      	b.n	800c4cc <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c4c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c4cc:	69bb      	ldr	r3, [r7, #24]
	}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3720      	adds	r7, #32
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
	...

0800c4d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b088      	sub	sp, #32
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	607a      	str	r2, [r7, #4]
 800c4e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	009b      	lsls	r3, r3, #2
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	21a5      	movs	r1, #165	; 0xa5
 800c4f2:	f002 ff31 	bl	800f358 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c500:	3b01      	subs	r3, #1
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	4413      	add	r3, r2
 800c506:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c508:	69bb      	ldr	r3, [r7, #24]
 800c50a:	f023 0307 	bic.w	r3, r3, #7
 800c50e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c510:	69bb      	ldr	r3, [r7, #24]
 800c512:	f003 0307 	and.w	r3, r3, #7
 800c516:	2b00      	cmp	r3, #0
 800c518:	d00a      	beq.n	800c530 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c51a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c51e:	f383 8811 	msr	BASEPRI, r3
 800c522:	f3bf 8f6f 	isb	sy
 800c526:	f3bf 8f4f 	dsb	sy
 800c52a:	617b      	str	r3, [r7, #20]
}
 800c52c:	bf00      	nop
 800c52e:	e7fe      	b.n	800c52e <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800c530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c532:	69ba      	ldr	r2, [r7, #24]
 800c534:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d01f      	beq.n	800c57e <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c53e:	2300      	movs	r3, #0
 800c540:	61fb      	str	r3, [r7, #28]
 800c542:	e012      	b.n	800c56a <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c544:	68ba      	ldr	r2, [r7, #8]
 800c546:	69fb      	ldr	r3, [r7, #28]
 800c548:	4413      	add	r3, r2
 800c54a:	7819      	ldrb	r1, [r3, #0]
 800c54c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c54e:	69fb      	ldr	r3, [r7, #28]
 800c550:	4413      	add	r3, r2
 800c552:	3334      	adds	r3, #52	; 0x34
 800c554:	460a      	mov	r2, r1
 800c556:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c558:	68ba      	ldr	r2, [r7, #8]
 800c55a:	69fb      	ldr	r3, [r7, #28]
 800c55c:	4413      	add	r3, r2
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d006      	beq.n	800c572 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	3301      	adds	r3, #1
 800c568:	61fb      	str	r3, [r7, #28]
 800c56a:	69fb      	ldr	r3, [r7, #28]
 800c56c:	2bfe      	cmp	r3, #254	; 0xfe
 800c56e:	d9e9      	bls.n	800c544 <prvInitialiseNewTask+0x6c>
 800c570:	e000      	b.n	800c574 <prvInitialiseNewTask+0x9c>
			{
				break;
 800c572:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c576:	2200      	movs	r2, #0
 800c578:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 800c57c:	e003      	b.n	800c586 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c580:	2200      	movs	r2, #0
 800c582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c588:	2b37      	cmp	r3, #55	; 0x37
 800c58a:	d901      	bls.n	800c590 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c58c:	2337      	movs	r3, #55	; 0x37
 800c58e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c594:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c59a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		pxNewTCB->uxMutexesHeld = 0;
 800c59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a8:	3304      	adds	r3, #4
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7fe fb18 	bl	800abe0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b2:	3318      	adds	r3, #24
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7fe fb13 	bl	800abe0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800c5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ea:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800c5ee:	2260      	movs	r2, #96	; 0x60
 800c5f0:	2100      	movs	r1, #0
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f002 feb0 	bl	800f358 <memset>
 800c5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fa:	4a10      	ldr	r2, [pc, #64]	; (800c63c <prvInitialiseNewTask+0x164>)
 800c5fc:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800c600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c602:	4a0f      	ldr	r2, [pc, #60]	; (800c640 <prvInitialiseNewTask+0x168>)
 800c604:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800c608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60a:	4a0e      	ldr	r2, [pc, #56]	; (800c644 <prvInitialiseNewTask+0x16c>)
 800c60c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800c610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c612:	2200      	movs	r2, #0
 800c614:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c618:	683a      	ldr	r2, [r7, #0]
 800c61a:	68f9      	ldr	r1, [r7, #12]
 800c61c:	69b8      	ldr	r0, [r7, #24]
 800c61e:	f7fe fb73 	bl	800ad08 <pxPortInitialiseStack>
 800c622:	4602      	mov	r2, r0
 800c624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c626:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d002      	beq.n	800c634 <prvInitialiseNewTask+0x15c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c632:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c634:	bf00      	nop
 800c636:	3720      	adds	r7, #32
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	0800fa14 	.word	0x0800fa14
 800c640:	0800fa34 	.word	0x0800fa34
 800c644:	0800f9f4 	.word	0x0800f9f4

0800c648 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c650:	f7fe fc88 	bl	800af64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c654:	4b2d      	ldr	r3, [pc, #180]	; (800c70c <prvAddNewTaskToReadyList+0xc4>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	3301      	adds	r3, #1
 800c65a:	4a2c      	ldr	r2, [pc, #176]	; (800c70c <prvAddNewTaskToReadyList+0xc4>)
 800c65c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c65e:	4b2c      	ldr	r3, [pc, #176]	; (800c710 <prvAddNewTaskToReadyList+0xc8>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d109      	bne.n	800c67a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c666:	4a2a      	ldr	r2, [pc, #168]	; (800c710 <prvAddNewTaskToReadyList+0xc8>)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c66c:	4b27      	ldr	r3, [pc, #156]	; (800c70c <prvAddNewTaskToReadyList+0xc4>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	2b01      	cmp	r3, #1
 800c672:	d110      	bne.n	800c696 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c674:	f000 fdce 	bl	800d214 <prvInitialiseTaskLists>
 800c678:	e00d      	b.n	800c696 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c67a:	4b26      	ldr	r3, [pc, #152]	; (800c714 <prvAddNewTaskToReadyList+0xcc>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d109      	bne.n	800c696 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c682:	4b23      	ldr	r3, [pc, #140]	; (800c710 <prvAddNewTaskToReadyList+0xc8>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d802      	bhi.n	800c696 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c690:	4a1f      	ldr	r2, [pc, #124]	; (800c710 <prvAddNewTaskToReadyList+0xc8>)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c696:	4b20      	ldr	r3, [pc, #128]	; (800c718 <prvAddNewTaskToReadyList+0xd0>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	3301      	adds	r3, #1
 800c69c:	4a1e      	ldr	r2, [pc, #120]	; (800c718 <prvAddNewTaskToReadyList+0xd0>)
 800c69e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c6a0:	4b1d      	ldr	r3, [pc, #116]	; (800c718 <prvAddNewTaskToReadyList+0xd0>)
 800c6a2:	681a      	ldr	r2, [r3, #0]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6ae:	4b1b      	ldr	r3, [pc, #108]	; (800c71c <prvAddNewTaskToReadyList+0xd4>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d903      	bls.n	800c6be <prvAddNewTaskToReadyList+0x76>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ba:	4a18      	ldr	r2, [pc, #96]	; (800c71c <prvAddNewTaskToReadyList+0xd4>)
 800c6bc:	6013      	str	r3, [r2, #0]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	4413      	add	r3, r2
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	4a15      	ldr	r2, [pc, #84]	; (800c720 <prvAddNewTaskToReadyList+0xd8>)
 800c6cc:	441a      	add	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	3304      	adds	r3, #4
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	f7fe fa90 	bl	800abfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c6da:	f7fe fc73 	bl	800afc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c6de:	4b0d      	ldr	r3, [pc, #52]	; (800c714 <prvAddNewTaskToReadyList+0xcc>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d00e      	beq.n	800c704 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c6e6:	4b0a      	ldr	r3, [pc, #40]	; (800c710 <prvAddNewTaskToReadyList+0xc8>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d207      	bcs.n	800c704 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c6f4:	4b0b      	ldr	r3, [pc, #44]	; (800c724 <prvAddNewTaskToReadyList+0xdc>)
 800c6f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6fa:	601a      	str	r2, [r3, #0]
 800c6fc:	f3bf 8f4f 	dsb	sy
 800c700:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c704:	bf00      	nop
 800c706:	3708      	adds	r7, #8
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	20004ee4 	.word	0x20004ee4
 800c710:	20004a10 	.word	0x20004a10
 800c714:	20004ef0 	.word	0x20004ef0
 800c718:	20004f00 	.word	0x20004f00
 800c71c:	20004eec 	.word	0x20004eec
 800c720:	20004a14 	.word	0x20004a14
 800c724:	e000ed04 	.word	0xe000ed04

0800c728 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b08a      	sub	sp, #40	; 0x28
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c732:	2300      	movs	r3, #0
 800c734:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d10a      	bne.n	800c752 <vTaskDelayUntil+0x2a>
	__asm volatile
 800c73c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c740:	f383 8811 	msr	BASEPRI, r3
 800c744:	f3bf 8f6f 	isb	sy
 800c748:	f3bf 8f4f 	dsb	sy
 800c74c:	617b      	str	r3, [r7, #20]
}
 800c74e:	bf00      	nop
 800c750:	e7fe      	b.n	800c750 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d10a      	bne.n	800c76e <vTaskDelayUntil+0x46>
	__asm volatile
 800c758:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c75c:	f383 8811 	msr	BASEPRI, r3
 800c760:	f3bf 8f6f 	isb	sy
 800c764:	f3bf 8f4f 	dsb	sy
 800c768:	613b      	str	r3, [r7, #16]
}
 800c76a:	bf00      	nop
 800c76c:	e7fe      	b.n	800c76c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800c76e:	4b2a      	ldr	r3, [pc, #168]	; (800c818 <vTaskDelayUntil+0xf0>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d00a      	beq.n	800c78c <vTaskDelayUntil+0x64>
	__asm volatile
 800c776:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c77a:	f383 8811 	msr	BASEPRI, r3
 800c77e:	f3bf 8f6f 	isb	sy
 800c782:	f3bf 8f4f 	dsb	sy
 800c786:	60fb      	str	r3, [r7, #12]
}
 800c788:	bf00      	nop
 800c78a:	e7fe      	b.n	800c78a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800c78c:	f000 f930 	bl	800c9f0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c790:	4b22      	ldr	r3, [pc, #136]	; (800c81c <vTaskDelayUntil+0xf4>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	683a      	ldr	r2, [r7, #0]
 800c79c:	4413      	add	r3, r2
 800c79e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	6a3a      	ldr	r2, [r7, #32]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d20b      	bcs.n	800c7c2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	69fa      	ldr	r2, [r7, #28]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d211      	bcs.n	800c7d8 <vTaskDelayUntil+0xb0>
 800c7b4:	69fa      	ldr	r2, [r7, #28]
 800c7b6:	6a3b      	ldr	r3, [r7, #32]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d90d      	bls.n	800c7d8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	627b      	str	r3, [r7, #36]	; 0x24
 800c7c0:	e00a      	b.n	800c7d8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	69fa      	ldr	r2, [r7, #28]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d303      	bcc.n	800c7d4 <vTaskDelayUntil+0xac>
 800c7cc:	69fa      	ldr	r2, [r7, #28]
 800c7ce:	6a3b      	ldr	r3, [r7, #32]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d901      	bls.n	800c7d8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	69fa      	ldr	r2, [r7, #28]
 800c7dc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d006      	beq.n	800c7f2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c7e4:	69fa      	ldr	r2, [r7, #28]
 800c7e6:	6a3b      	ldr	r3, [r7, #32]
 800c7e8:	1ad3      	subs	r3, r2, r3
 800c7ea:	2100      	movs	r1, #0
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f000 ff6d 	bl	800d6cc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c7f2:	f000 f943 	bl	800ca7c <xTaskResumeAll>
 800c7f6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c7f8:	69bb      	ldr	r3, [r7, #24]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d107      	bne.n	800c80e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800c7fe:	4b08      	ldr	r3, [pc, #32]	; (800c820 <vTaskDelayUntil+0xf8>)
 800c800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c804:	601a      	str	r2, [r3, #0]
 800c806:	f3bf 8f4f 	dsb	sy
 800c80a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c80e:	bf00      	nop
 800c810:	3728      	adds	r7, #40	; 0x28
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	20004f0c 	.word	0x20004f0c
 800c81c:	20004ee8 	.word	0x20004ee8
 800c820:	e000ed04 	.word	0xe000ed04

0800c824 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c82c:	f7fe fb9a 	bl	800af64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d102      	bne.n	800c83c <vTaskSuspend+0x18>
 800c836:	4b30      	ldr	r3, [pc, #192]	; (800c8f8 <vTaskSuspend+0xd4>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	e000      	b.n	800c83e <vTaskSuspend+0x1a>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	3304      	adds	r3, #4
 800c844:	4618      	mov	r0, r3
 800c846:	f7fe fa35 	bl	800acb4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d004      	beq.n	800c85c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	3318      	adds	r3, #24
 800c856:	4618      	mov	r0, r3
 800c858:	f7fe fa2c 	bl	800acb4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	3304      	adds	r3, #4
 800c860:	4619      	mov	r1, r3
 800c862:	4826      	ldr	r0, [pc, #152]	; (800c8fc <vTaskSuspend+0xd8>)
 800c864:	f7fe f9c9 	bl	800abfa <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f893 31b0 	ldrb.w	r3, [r3, #432]	; 0x1b0
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	2b01      	cmp	r3, #1
 800c872:	d103      	bne.n	800c87c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2200      	movs	r2, #0
 800c878:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c87c:	f7fe fba2 	bl	800afc4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c880:	4b1f      	ldr	r3, [pc, #124]	; (800c900 <vTaskSuspend+0xdc>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d005      	beq.n	800c894 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c888:	f7fe fb6c 	bl	800af64 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c88c:	f000 fd66 	bl	800d35c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c890:	f7fe fb98 	bl	800afc4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c894:	4b18      	ldr	r3, [pc, #96]	; (800c8f8 <vTaskSuspend+0xd4>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	68fa      	ldr	r2, [r7, #12]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d127      	bne.n	800c8ee <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800c89e:	4b18      	ldr	r3, [pc, #96]	; (800c900 <vTaskSuspend+0xdc>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d017      	beq.n	800c8d6 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c8a6:	4b17      	ldr	r3, [pc, #92]	; (800c904 <vTaskSuspend+0xe0>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00a      	beq.n	800c8c4 <vTaskSuspend+0xa0>
	__asm volatile
 800c8ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c8b2:	f383 8811 	msr	BASEPRI, r3
 800c8b6:	f3bf 8f6f 	isb	sy
 800c8ba:	f3bf 8f4f 	dsb	sy
 800c8be:	60bb      	str	r3, [r7, #8]
}
 800c8c0:	bf00      	nop
 800c8c2:	e7fe      	b.n	800c8c2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800c8c4:	4b10      	ldr	r3, [pc, #64]	; (800c908 <vTaskSuspend+0xe4>)
 800c8c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8ca:	601a      	str	r2, [r3, #0]
 800c8cc:	f3bf 8f4f 	dsb	sy
 800c8d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c8d4:	e00b      	b.n	800c8ee <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c8d6:	4b09      	ldr	r3, [pc, #36]	; (800c8fc <vTaskSuspend+0xd8>)
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	4b0c      	ldr	r3, [pc, #48]	; (800c90c <vTaskSuspend+0xe8>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d103      	bne.n	800c8ea <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800c8e2:	4b05      	ldr	r3, [pc, #20]	; (800c8f8 <vTaskSuspend+0xd4>)
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	601a      	str	r2, [r3, #0]
	}
 800c8e8:	e001      	b.n	800c8ee <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800c8ea:	f000 fa5f 	bl	800cdac <vTaskSwitchContext>
	}
 800c8ee:	bf00      	nop
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	20004a10 	.word	0x20004a10
 800c8fc:	20004ed0 	.word	0x20004ed0
 800c900:	20004ef0 	.word	0x20004ef0
 800c904:	20004f0c 	.word	0x20004f0c
 800c908:	e000ed04 	.word	0xe000ed04
 800c90c:	20004ee4 	.word	0x20004ee4

0800c910 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b08a      	sub	sp, #40	; 0x28
 800c914:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c916:	2300      	movs	r3, #0
 800c918:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c91a:	2300      	movs	r3, #0
 800c91c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c91e:	463a      	mov	r2, r7
 800c920:	1d39      	adds	r1, r7, #4
 800c922:	f107 0308 	add.w	r3, r7, #8
 800c926:	4618      	mov	r0, r3
 800c928:	f7fd ff18 	bl	800a75c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c92c:	6839      	ldr	r1, [r7, #0]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	68ba      	ldr	r2, [r7, #8]
 800c932:	9202      	str	r2, [sp, #8]
 800c934:	9301      	str	r3, [sp, #4]
 800c936:	2300      	movs	r3, #0
 800c938:	9300      	str	r3, [sp, #0]
 800c93a:	2300      	movs	r3, #0
 800c93c:	460a      	mov	r2, r1
 800c93e:	4924      	ldr	r1, [pc, #144]	; (800c9d0 <vTaskStartScheduler+0xc0>)
 800c940:	4824      	ldr	r0, [pc, #144]	; (800c9d4 <vTaskStartScheduler+0xc4>)
 800c942:	f7ff fd23 	bl	800c38c <xTaskCreateStatic>
 800c946:	4603      	mov	r3, r0
 800c948:	4a23      	ldr	r2, [pc, #140]	; (800c9d8 <vTaskStartScheduler+0xc8>)
 800c94a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c94c:	4b22      	ldr	r3, [pc, #136]	; (800c9d8 <vTaskStartScheduler+0xc8>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d002      	beq.n	800c95a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c954:	2301      	movs	r3, #1
 800c956:	617b      	str	r3, [r7, #20]
 800c958:	e001      	b.n	800c95e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c95a:	2300      	movs	r3, #0
 800c95c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	2b01      	cmp	r3, #1
 800c962:	d102      	bne.n	800c96a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c964:	f000 ff0c 	bl	800d780 <xTimerCreateTimerTask>
 800c968:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d11c      	bne.n	800c9aa <vTaskStartScheduler+0x9a>
	__asm volatile
 800c970:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c974:	f383 8811 	msr	BASEPRI, r3
 800c978:	f3bf 8f6f 	isb	sy
 800c97c:	f3bf 8f4f 	dsb	sy
 800c980:	613b      	str	r3, [r7, #16]
}
 800c982:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c984:	4b15      	ldr	r3, [pc, #84]	; (800c9dc <vTaskStartScheduler+0xcc>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800c98c:	4a14      	ldr	r2, [pc, #80]	; (800c9e0 <vTaskStartScheduler+0xd0>)
 800c98e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c990:	4b14      	ldr	r3, [pc, #80]	; (800c9e4 <vTaskStartScheduler+0xd4>)
 800c992:	f04f 32ff 	mov.w	r2, #4294967295
 800c996:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c998:	4b13      	ldr	r3, [pc, #76]	; (800c9e8 <vTaskStartScheduler+0xd8>)
 800c99a:	2201      	movs	r2, #1
 800c99c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c99e:	4b13      	ldr	r3, [pc, #76]	; (800c9ec <vTaskStartScheduler+0xdc>)
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c9a4:	f7fe fa3c 	bl	800ae20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c9a8:	e00e      	b.n	800c9c8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b0:	d10a      	bne.n	800c9c8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c9b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c9b6:	f383 8811 	msr	BASEPRI, r3
 800c9ba:	f3bf 8f6f 	isb	sy
 800c9be:	f3bf 8f4f 	dsb	sy
 800c9c2:	60fb      	str	r3, [r7, #12]
}
 800c9c4:	bf00      	nop
 800c9c6:	e7fe      	b.n	800c9c6 <vTaskStartScheduler+0xb6>
}
 800c9c8:	bf00      	nop
 800c9ca:	3718      	adds	r7, #24
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	0800f838 	.word	0x0800f838
 800c9d4:	0800d155 	.word	0x0800d155
 800c9d8:	20004f08 	.word	0x20004f08
 800c9dc:	20004a10 	.word	0x20004a10
 800c9e0:	2000002c 	.word	0x2000002c
 800c9e4:	20004f04 	.word	0x20004f04
 800c9e8:	20004ef0 	.word	0x20004ef0
 800c9ec:	20004ee8 	.word	0x20004ee8

0800c9f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c9f4:	4b04      	ldr	r3, [pc, #16]	; (800ca08 <vTaskSuspendAll+0x18>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	4a03      	ldr	r2, [pc, #12]	; (800ca08 <vTaskSuspendAll+0x18>)
 800c9fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c9fe:	bf00      	nop
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr
 800ca08:	20004f0c 	.word	0x20004f0c

0800ca0c <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b083      	sub	sp, #12
 800ca10:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800ca12:	2300      	movs	r3, #0
 800ca14:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800ca16:	4b14      	ldr	r3, [pc, #80]	; (800ca68 <prvGetExpectedIdleTime+0x5c>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d001      	beq.n	800ca22 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800ca1e:	2301      	movs	r3, #1
 800ca20:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800ca22:	4b12      	ldr	r3, [pc, #72]	; (800ca6c <prvGetExpectedIdleTime+0x60>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d002      	beq.n	800ca32 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	607b      	str	r3, [r7, #4]
 800ca30:	e012      	b.n	800ca58 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800ca32:	4b0f      	ldr	r3, [pc, #60]	; (800ca70 <prvGetExpectedIdleTime+0x64>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	d902      	bls.n	800ca40 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	607b      	str	r3, [r7, #4]
 800ca3e:	e00b      	b.n	800ca58 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d002      	beq.n	800ca4c <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800ca46:	2300      	movs	r3, #0
 800ca48:	607b      	str	r3, [r7, #4]
 800ca4a:	e005      	b.n	800ca58 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800ca4c:	4b09      	ldr	r3, [pc, #36]	; (800ca74 <prvGetExpectedIdleTime+0x68>)
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	4b09      	ldr	r3, [pc, #36]	; (800ca78 <prvGetExpectedIdleTime+0x6c>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	1ad3      	subs	r3, r2, r3
 800ca56:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800ca58:	687b      	ldr	r3, [r7, #4]
	}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	370c      	adds	r7, #12
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	20004eec 	.word	0x20004eec
 800ca6c:	20004a10 	.word	0x20004a10
 800ca70:	20004a14 	.word	0x20004a14
 800ca74:	20004f04 	.word	0x20004f04
 800ca78:	20004ee8 	.word	0x20004ee8

0800ca7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca82:	2300      	movs	r3, #0
 800ca84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca86:	2300      	movs	r3, #0
 800ca88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca8a:	4b42      	ldr	r3, [pc, #264]	; (800cb94 <xTaskResumeAll+0x118>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d10a      	bne.n	800caa8 <xTaskResumeAll+0x2c>
	__asm volatile
 800ca92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ca96:	f383 8811 	msr	BASEPRI, r3
 800ca9a:	f3bf 8f6f 	isb	sy
 800ca9e:	f3bf 8f4f 	dsb	sy
 800caa2:	603b      	str	r3, [r7, #0]
}
 800caa4:	bf00      	nop
 800caa6:	e7fe      	b.n	800caa6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800caa8:	f7fe fa5c 	bl	800af64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800caac:	4b39      	ldr	r3, [pc, #228]	; (800cb94 <xTaskResumeAll+0x118>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	3b01      	subs	r3, #1
 800cab2:	4a38      	ldr	r2, [pc, #224]	; (800cb94 <xTaskResumeAll+0x118>)
 800cab4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cab6:	4b37      	ldr	r3, [pc, #220]	; (800cb94 <xTaskResumeAll+0x118>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d162      	bne.n	800cb84 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cabe:	4b36      	ldr	r3, [pc, #216]	; (800cb98 <xTaskResumeAll+0x11c>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d05e      	beq.n	800cb84 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cac6:	e02f      	b.n	800cb28 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cac8:	4b34      	ldr	r3, [pc, #208]	; (800cb9c <xTaskResumeAll+0x120>)
 800caca:	68db      	ldr	r3, [r3, #12]
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	3318      	adds	r3, #24
 800cad4:	4618      	mov	r0, r3
 800cad6:	f7fe f8ed 	bl	800acb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	3304      	adds	r3, #4
 800cade:	4618      	mov	r0, r3
 800cae0:	f7fe f8e8 	bl	800acb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cae8:	4b2d      	ldr	r3, [pc, #180]	; (800cba0 <xTaskResumeAll+0x124>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	429a      	cmp	r2, r3
 800caee:	d903      	bls.n	800caf8 <xTaskResumeAll+0x7c>
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf4:	4a2a      	ldr	r2, [pc, #168]	; (800cba0 <xTaskResumeAll+0x124>)
 800caf6:	6013      	str	r3, [r2, #0]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cafc:	4613      	mov	r3, r2
 800cafe:	009b      	lsls	r3, r3, #2
 800cb00:	4413      	add	r3, r2
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	4a27      	ldr	r2, [pc, #156]	; (800cba4 <xTaskResumeAll+0x128>)
 800cb06:	441a      	add	r2, r3
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	3304      	adds	r3, #4
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	4610      	mov	r0, r2
 800cb10:	f7fe f873 	bl	800abfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb18:	4b23      	ldr	r3, [pc, #140]	; (800cba8 <xTaskResumeAll+0x12c>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d302      	bcc.n	800cb28 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cb22:	4b22      	ldr	r3, [pc, #136]	; (800cbac <xTaskResumeAll+0x130>)
 800cb24:	2201      	movs	r2, #1
 800cb26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb28:	4b1c      	ldr	r3, [pc, #112]	; (800cb9c <xTaskResumeAll+0x120>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d1cb      	bne.n	800cac8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d001      	beq.n	800cb3a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cb36:	f000 fc11 	bl	800d35c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cb3a:	4b1d      	ldr	r3, [pc, #116]	; (800cbb0 <xTaskResumeAll+0x134>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d010      	beq.n	800cb68 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cb46:	f000 f86f 	bl	800cc28 <xTaskIncrementTick>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d002      	beq.n	800cb56 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cb50:	4b16      	ldr	r3, [pc, #88]	; (800cbac <xTaskResumeAll+0x130>)
 800cb52:	2201      	movs	r2, #1
 800cb54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	3b01      	subs	r3, #1
 800cb5a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d1f1      	bne.n	800cb46 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cb62:	4b13      	ldr	r3, [pc, #76]	; (800cbb0 <xTaskResumeAll+0x134>)
 800cb64:	2200      	movs	r2, #0
 800cb66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb68:	4b10      	ldr	r3, [pc, #64]	; (800cbac <xTaskResumeAll+0x130>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d009      	beq.n	800cb84 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cb70:	2301      	movs	r3, #1
 800cb72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cb74:	4b0f      	ldr	r3, [pc, #60]	; (800cbb4 <xTaskResumeAll+0x138>)
 800cb76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb7a:	601a      	str	r2, [r3, #0]
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb84:	f7fe fa1e 	bl	800afc4 <vPortExitCritical>

	return xAlreadyYielded;
 800cb88:	68bb      	ldr	r3, [r7, #8]
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3710      	adds	r7, #16
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	20004f0c 	.word	0x20004f0c
 800cb98:	20004ee4 	.word	0x20004ee4
 800cb9c:	20004ea4 	.word	0x20004ea4
 800cba0:	20004eec 	.word	0x20004eec
 800cba4:	20004a14 	.word	0x20004a14
 800cba8:	20004a10 	.word	0x20004a10
 800cbac:	20004ef8 	.word	0x20004ef8
 800cbb0:	20004ef4 	.word	0x20004ef4
 800cbb4:	e000ed04 	.word	0xe000ed04

0800cbb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b083      	sub	sp, #12
 800cbbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cbbe:	4b05      	ldr	r3, [pc, #20]	; (800cbd4 <xTaskGetTickCount+0x1c>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cbc4:	687b      	ldr	r3, [r7, #4]
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	370c      	adds	r7, #12
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop
 800cbd4:	20004ee8 	.word	0x20004ee8

0800cbd8 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800cbd8:	b480      	push	{r7}
 800cbda:	b085      	sub	sp, #20
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800cbe0:	4b0f      	ldr	r3, [pc, #60]	; (800cc20 <vTaskStepTick+0x48>)
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	441a      	add	r2, r3
 800cbe8:	4b0e      	ldr	r3, [pc, #56]	; (800cc24 <vTaskStepTick+0x4c>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d90a      	bls.n	800cc06 <vTaskStepTick+0x2e>
	__asm volatile
 800cbf0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cbf4:	f383 8811 	msr	BASEPRI, r3
 800cbf8:	f3bf 8f6f 	isb	sy
 800cbfc:	f3bf 8f4f 	dsb	sy
 800cc00:	60fb      	str	r3, [r7, #12]
}
 800cc02:	bf00      	nop
 800cc04:	e7fe      	b.n	800cc04 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800cc06:	4b06      	ldr	r3, [pc, #24]	; (800cc20 <vTaskStepTick+0x48>)
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4413      	add	r3, r2
 800cc0e:	4a04      	ldr	r2, [pc, #16]	; (800cc20 <vTaskStepTick+0x48>)
 800cc10:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800cc12:	bf00      	nop
 800cc14:	3714      	adds	r7, #20
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr
 800cc1e:	bf00      	nop
 800cc20:	20004ee8 	.word	0x20004ee8
 800cc24:	20004f04 	.word	0x20004f04

0800cc28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b086      	sub	sp, #24
 800cc2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc32:	4b53      	ldr	r3, [pc, #332]	; (800cd80 <xTaskIncrementTick+0x158>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	f040 8095 	bne.w	800cd66 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cc3c:	4b51      	ldr	r3, [pc, #324]	; (800cd84 <xTaskIncrementTick+0x15c>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	3301      	adds	r3, #1
 800cc42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cc44:	4a4f      	ldr	r2, [pc, #316]	; (800cd84 <xTaskIncrementTick+0x15c>)
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d120      	bne.n	800cc92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cc50:	4b4d      	ldr	r3, [pc, #308]	; (800cd88 <xTaskIncrementTick+0x160>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d00a      	beq.n	800cc70 <xTaskIncrementTick+0x48>
	__asm volatile
 800cc5a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cc5e:	f383 8811 	msr	BASEPRI, r3
 800cc62:	f3bf 8f6f 	isb	sy
 800cc66:	f3bf 8f4f 	dsb	sy
 800cc6a:	603b      	str	r3, [r7, #0]
}
 800cc6c:	bf00      	nop
 800cc6e:	e7fe      	b.n	800cc6e <xTaskIncrementTick+0x46>
 800cc70:	4b45      	ldr	r3, [pc, #276]	; (800cd88 <xTaskIncrementTick+0x160>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	60fb      	str	r3, [r7, #12]
 800cc76:	4b45      	ldr	r3, [pc, #276]	; (800cd8c <xTaskIncrementTick+0x164>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4a43      	ldr	r2, [pc, #268]	; (800cd88 <xTaskIncrementTick+0x160>)
 800cc7c:	6013      	str	r3, [r2, #0]
 800cc7e:	4a43      	ldr	r2, [pc, #268]	; (800cd8c <xTaskIncrementTick+0x164>)
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	6013      	str	r3, [r2, #0]
 800cc84:	4b42      	ldr	r3, [pc, #264]	; (800cd90 <xTaskIncrementTick+0x168>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	4a41      	ldr	r2, [pc, #260]	; (800cd90 <xTaskIncrementTick+0x168>)
 800cc8c:	6013      	str	r3, [r2, #0]
 800cc8e:	f000 fb65 	bl	800d35c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cc92:	4b40      	ldr	r3, [pc, #256]	; (800cd94 <xTaskIncrementTick+0x16c>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	693a      	ldr	r2, [r7, #16]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d349      	bcc.n	800cd30 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc9c:	4b3a      	ldr	r3, [pc, #232]	; (800cd88 <xTaskIncrementTick+0x160>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d104      	bne.n	800ccb0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cca6:	4b3b      	ldr	r3, [pc, #236]	; (800cd94 <xTaskIncrementTick+0x16c>)
 800cca8:	f04f 32ff 	mov.w	r2, #4294967295
 800ccac:	601a      	str	r2, [r3, #0]
					break;
 800ccae:	e03f      	b.n	800cd30 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccb0:	4b35      	ldr	r3, [pc, #212]	; (800cd88 <xTaskIncrementTick+0x160>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ccc0:	693a      	ldr	r2, [r7, #16]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d203      	bcs.n	800ccd0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ccc8:	4a32      	ldr	r2, [pc, #200]	; (800cd94 <xTaskIncrementTick+0x16c>)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ccce:	e02f      	b.n	800cd30 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	3304      	adds	r3, #4
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7fd ffed 	bl	800acb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d004      	beq.n	800ccec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	3318      	adds	r3, #24
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7fd ffe4 	bl	800acb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccf0:	4b29      	ldr	r3, [pc, #164]	; (800cd98 <xTaskIncrementTick+0x170>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d903      	bls.n	800cd00 <xTaskIncrementTick+0xd8>
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccfc:	4a26      	ldr	r2, [pc, #152]	; (800cd98 <xTaskIncrementTick+0x170>)
 800ccfe:	6013      	str	r3, [r2, #0]
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd04:	4613      	mov	r3, r2
 800cd06:	009b      	lsls	r3, r3, #2
 800cd08:	4413      	add	r3, r2
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	4a23      	ldr	r2, [pc, #140]	; (800cd9c <xTaskIncrementTick+0x174>)
 800cd0e:	441a      	add	r2, r3
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	3304      	adds	r3, #4
 800cd14:	4619      	mov	r1, r3
 800cd16:	4610      	mov	r0, r2
 800cd18:	f7fd ff6f 	bl	800abfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd20:	4b1f      	ldr	r3, [pc, #124]	; (800cda0 <xTaskIncrementTick+0x178>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d3b8      	bcc.n	800cc9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd2e:	e7b5      	b.n	800cc9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cd30:	4b1b      	ldr	r3, [pc, #108]	; (800cda0 <xTaskIncrementTick+0x178>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd36:	4919      	ldr	r1, [pc, #100]	; (800cd9c <xTaskIncrementTick+0x174>)
 800cd38:	4613      	mov	r3, r2
 800cd3a:	009b      	lsls	r3, r3, #2
 800cd3c:	4413      	add	r3, r2
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	440b      	add	r3, r1
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d901      	bls.n	800cd4c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800cd4c:	4b15      	ldr	r3, [pc, #84]	; (800cda4 <xTaskIncrementTick+0x17c>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d101      	bne.n	800cd58 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800cd54:	f7f5 fe6e 	bl	8002a34 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cd58:	4b13      	ldr	r3, [pc, #76]	; (800cda8 <xTaskIncrementTick+0x180>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d009      	beq.n	800cd74 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800cd60:	2301      	movs	r3, #1
 800cd62:	617b      	str	r3, [r7, #20]
 800cd64:	e006      	b.n	800cd74 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cd66:	4b0f      	ldr	r3, [pc, #60]	; (800cda4 <xTaskIncrementTick+0x17c>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	4a0d      	ldr	r2, [pc, #52]	; (800cda4 <xTaskIncrementTick+0x17c>)
 800cd6e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800cd70:	f7f5 fe60 	bl	8002a34 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800cd74:	697b      	ldr	r3, [r7, #20]
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3718      	adds	r7, #24
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	20004f0c 	.word	0x20004f0c
 800cd84:	20004ee8 	.word	0x20004ee8
 800cd88:	20004e9c 	.word	0x20004e9c
 800cd8c:	20004ea0 	.word	0x20004ea0
 800cd90:	20004efc 	.word	0x20004efc
 800cd94:	20004f04 	.word	0x20004f04
 800cd98:	20004eec 	.word	0x20004eec
 800cd9c:	20004a14 	.word	0x20004a14
 800cda0:	20004a10 	.word	0x20004a10
 800cda4:	20004ef4 	.word	0x20004ef4
 800cda8:	20004ef8 	.word	0x20004ef8

0800cdac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b086      	sub	sp, #24
 800cdb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cdb2:	4b3d      	ldr	r3, [pc, #244]	; (800cea8 <vTaskSwitchContext+0xfc>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d003      	beq.n	800cdc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cdba:	4b3c      	ldr	r3, [pc, #240]	; (800ceac <vTaskSwitchContext+0x100>)
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cdc0:	e06e      	b.n	800cea0 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 800cdc2:	4b3a      	ldr	r3, [pc, #232]	; (800ceac <vTaskSwitchContext+0x100>)
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800cdc8:	4b39      	ldr	r3, [pc, #228]	; (800ceb0 <vTaskSwitchContext+0x104>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdce:	613b      	str	r3, [r7, #16]
 800cdd0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800cdd4:	60fb      	str	r3, [r7, #12]
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d111      	bne.n	800ce04 <vTaskSwitchContext+0x58>
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	3304      	adds	r3, #4
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	68fa      	ldr	r2, [r7, #12]
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d10b      	bne.n	800ce04 <vTaskSwitchContext+0x58>
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	3308      	adds	r3, #8
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	68fa      	ldr	r2, [r7, #12]
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d105      	bne.n	800ce04 <vTaskSwitchContext+0x58>
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	330c      	adds	r3, #12
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	68fa      	ldr	r2, [r7, #12]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d008      	beq.n	800ce16 <vTaskSwitchContext+0x6a>
 800ce04:	4b2a      	ldr	r3, [pc, #168]	; (800ceb0 <vTaskSwitchContext+0x104>)
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	4b29      	ldr	r3, [pc, #164]	; (800ceb0 <vTaskSwitchContext+0x104>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	3334      	adds	r3, #52	; 0x34
 800ce0e:	4619      	mov	r1, r3
 800ce10:	4610      	mov	r0, r2
 800ce12:	f7f5 fe1d 	bl	8002a50 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce16:	4b27      	ldr	r3, [pc, #156]	; (800ceb4 <vTaskSwitchContext+0x108>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	617b      	str	r3, [r7, #20]
 800ce1c:	e010      	b.n	800ce40 <vTaskSwitchContext+0x94>
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d10a      	bne.n	800ce3a <vTaskSwitchContext+0x8e>
	__asm volatile
 800ce24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ce28:	f383 8811 	msr	BASEPRI, r3
 800ce2c:	f3bf 8f6f 	isb	sy
 800ce30:	f3bf 8f4f 	dsb	sy
 800ce34:	607b      	str	r3, [r7, #4]
}
 800ce36:	bf00      	nop
 800ce38:	e7fe      	b.n	800ce38 <vTaskSwitchContext+0x8c>
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	3b01      	subs	r3, #1
 800ce3e:	617b      	str	r3, [r7, #20]
 800ce40:	491d      	ldr	r1, [pc, #116]	; (800ceb8 <vTaskSwitchContext+0x10c>)
 800ce42:	697a      	ldr	r2, [r7, #20]
 800ce44:	4613      	mov	r3, r2
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	4413      	add	r3, r2
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	440b      	add	r3, r1
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d0e4      	beq.n	800ce1e <vTaskSwitchContext+0x72>
 800ce54:	697a      	ldr	r2, [r7, #20]
 800ce56:	4613      	mov	r3, r2
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	4413      	add	r3, r2
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	4a16      	ldr	r2, [pc, #88]	; (800ceb8 <vTaskSwitchContext+0x10c>)
 800ce60:	4413      	add	r3, r2
 800ce62:	60bb      	str	r3, [r7, #8]
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	685a      	ldr	r2, [r3, #4]
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	605a      	str	r2, [r3, #4]
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	685a      	ldr	r2, [r3, #4]
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	3308      	adds	r3, #8
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d104      	bne.n	800ce84 <vTaskSwitchContext+0xd8>
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	685a      	ldr	r2, [r3, #4]
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	605a      	str	r2, [r3, #4]
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	68db      	ldr	r3, [r3, #12]
 800ce8a:	4a09      	ldr	r2, [pc, #36]	; (800ceb0 <vTaskSwitchContext+0x104>)
 800ce8c:	6013      	str	r3, [r2, #0]
 800ce8e:	4a09      	ldr	r2, [pc, #36]	; (800ceb4 <vTaskSwitchContext+0x108>)
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ce94:	4b06      	ldr	r3, [pc, #24]	; (800ceb0 <vTaskSwitchContext+0x104>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800ce9c:	4a07      	ldr	r2, [pc, #28]	; (800cebc <vTaskSwitchContext+0x110>)
 800ce9e:	6013      	str	r3, [r2, #0]
}
 800cea0:	bf00      	nop
 800cea2:	3718      	adds	r7, #24
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}
 800cea8:	20004f0c 	.word	0x20004f0c
 800ceac:	20004ef8 	.word	0x20004ef8
 800ceb0:	20004a10 	.word	0x20004a10
 800ceb4:	20004eec 	.word	0x20004eec
 800ceb8:	20004a14 	.word	0x20004a14
 800cebc:	2000002c 	.word	0x2000002c

0800cec0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d10a      	bne.n	800cee6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ced0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ced4:	f383 8811 	msr	BASEPRI, r3
 800ced8:	f3bf 8f6f 	isb	sy
 800cedc:	f3bf 8f4f 	dsb	sy
 800cee0:	60fb      	str	r3, [r7, #12]
}
 800cee2:	bf00      	nop
 800cee4:	e7fe      	b.n	800cee4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cee6:	4b07      	ldr	r3, [pc, #28]	; (800cf04 <vTaskPlaceOnEventList+0x44>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	3318      	adds	r3, #24
 800ceec:	4619      	mov	r1, r3
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f7fd fea7 	bl	800ac42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cef4:	2101      	movs	r1, #1
 800cef6:	6838      	ldr	r0, [r7, #0]
 800cef8:	f000 fbe8 	bl	800d6cc <prvAddCurrentTaskToDelayedList>
}
 800cefc:	bf00      	nop
 800cefe:	3710      	adds	r7, #16
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	20004a10 	.word	0x20004a10

0800cf08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b086      	sub	sp, #24
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	60b9      	str	r1, [r7, #8]
 800cf12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d10a      	bne.n	800cf30 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cf1a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cf1e:	f383 8811 	msr	BASEPRI, r3
 800cf22:	f3bf 8f6f 	isb	sy
 800cf26:	f3bf 8f4f 	dsb	sy
 800cf2a:	617b      	str	r3, [r7, #20]
}
 800cf2c:	bf00      	nop
 800cf2e:	e7fe      	b.n	800cf2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf30:	4b0a      	ldr	r3, [pc, #40]	; (800cf5c <vTaskPlaceOnEventListRestricted+0x54>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	3318      	adds	r3, #24
 800cf36:	4619      	mov	r1, r3
 800cf38:	68f8      	ldr	r0, [r7, #12]
 800cf3a:	f7fd fe5e 	bl	800abfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d002      	beq.n	800cf4a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cf44:	f04f 33ff 	mov.w	r3, #4294967295
 800cf48:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cf4a:	6879      	ldr	r1, [r7, #4]
 800cf4c:	68b8      	ldr	r0, [r7, #8]
 800cf4e:	f000 fbbd 	bl	800d6cc <prvAddCurrentTaskToDelayedList>
	}
 800cf52:	bf00      	nop
 800cf54:	3718      	adds	r7, #24
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	20004a10 	.word	0x20004a10

0800cf60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b086      	sub	sp, #24
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	68db      	ldr	r3, [r3, #12]
 800cf6c:	68db      	ldr	r3, [r3, #12]
 800cf6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d10a      	bne.n	800cf8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cf76:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cf7a:	f383 8811 	msr	BASEPRI, r3
 800cf7e:	f3bf 8f6f 	isb	sy
 800cf82:	f3bf 8f4f 	dsb	sy
 800cf86:	60fb      	str	r3, [r7, #12]
}
 800cf88:	bf00      	nop
 800cf8a:	e7fe      	b.n	800cf8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	3318      	adds	r3, #24
 800cf90:	4618      	mov	r0, r3
 800cf92:	f7fd fe8f 	bl	800acb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf96:	4b1f      	ldr	r3, [pc, #124]	; (800d014 <xTaskRemoveFromEventList+0xb4>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d11f      	bne.n	800cfde <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	3304      	adds	r3, #4
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7fd fe86 	bl	800acb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfac:	4b1a      	ldr	r3, [pc, #104]	; (800d018 <xTaskRemoveFromEventList+0xb8>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d903      	bls.n	800cfbc <xTaskRemoveFromEventList+0x5c>
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb8:	4a17      	ldr	r2, [pc, #92]	; (800d018 <xTaskRemoveFromEventList+0xb8>)
 800cfba:	6013      	str	r3, [r2, #0]
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	4413      	add	r3, r2
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	4a14      	ldr	r2, [pc, #80]	; (800d01c <xTaskRemoveFromEventList+0xbc>)
 800cfca:	441a      	add	r2, r3
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	3304      	adds	r3, #4
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	4610      	mov	r0, r2
 800cfd4:	f7fd fe11 	bl	800abfa <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800cfd8:	f000 f9c0 	bl	800d35c <prvResetNextTaskUnblockTime>
 800cfdc:	e005      	b.n	800cfea <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	3318      	adds	r3, #24
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	480e      	ldr	r0, [pc, #56]	; (800d020 <xTaskRemoveFromEventList+0xc0>)
 800cfe6:	f7fd fe08 	bl	800abfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfee:	4b0d      	ldr	r3, [pc, #52]	; (800d024 <xTaskRemoveFromEventList+0xc4>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d905      	bls.n	800d004 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cff8:	2301      	movs	r3, #1
 800cffa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cffc:	4b0a      	ldr	r3, [pc, #40]	; (800d028 <xTaskRemoveFromEventList+0xc8>)
 800cffe:	2201      	movs	r2, #1
 800d000:	601a      	str	r2, [r3, #0]
 800d002:	e001      	b.n	800d008 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800d004:	2300      	movs	r3, #0
 800d006:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d008:	697b      	ldr	r3, [r7, #20]
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3718      	adds	r7, #24
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	20004f0c 	.word	0x20004f0c
 800d018:	20004eec 	.word	0x20004eec
 800d01c:	20004a14 	.word	0x20004a14
 800d020:	20004ea4 	.word	0x20004ea4
 800d024:	20004a10 	.word	0x20004a10
 800d028:	20004ef8 	.word	0x20004ef8

0800d02c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d034:	4b06      	ldr	r3, [pc, #24]	; (800d050 <vTaskInternalSetTimeOutState+0x24>)
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d03c:	4b05      	ldr	r3, [pc, #20]	; (800d054 <vTaskInternalSetTimeOutState+0x28>)
 800d03e:	681a      	ldr	r2, [r3, #0]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	605a      	str	r2, [r3, #4]
}
 800d044:	bf00      	nop
 800d046:	370c      	adds	r7, #12
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr
 800d050:	20004efc 	.word	0x20004efc
 800d054:	20004ee8 	.word	0x20004ee8

0800d058 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b088      	sub	sp, #32
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d10a      	bne.n	800d07e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d068:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d06c:	f383 8811 	msr	BASEPRI, r3
 800d070:	f3bf 8f6f 	isb	sy
 800d074:	f3bf 8f4f 	dsb	sy
 800d078:	613b      	str	r3, [r7, #16]
}
 800d07a:	bf00      	nop
 800d07c:	e7fe      	b.n	800d07c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d10a      	bne.n	800d09a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d084:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	60fb      	str	r3, [r7, #12]
}
 800d096:	bf00      	nop
 800d098:	e7fe      	b.n	800d098 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d09a:	f7fd ff63 	bl	800af64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d09e:	4b24      	ldr	r3, [pc, #144]	; (800d130 <xTaskCheckForTimeOut+0xd8>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	69ba      	ldr	r2, [r7, #24]
 800d0aa:	1ad3      	subs	r3, r2, r3
 800d0ac:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800d0ae:	4b21      	ldr	r3, [pc, #132]	; (800d134 <xTaskCheckForTimeOut+0xdc>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f893 31b2 	ldrb.w	r3, [r3, #434]	; 0x1b2
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d007      	beq.n	800d0ca <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800d0ba:	4b1e      	ldr	r3, [pc, #120]	; (800d134 <xTaskCheckForTimeOut+0xdc>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
				xReturn = pdTRUE;
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	61fb      	str	r3, [r7, #28]
 800d0c8:	e02b      	b.n	800d122 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0d2:	d102      	bne.n	800d0da <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	61fb      	str	r3, [r7, #28]
 800d0d8:	e023      	b.n	800d122 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	4b16      	ldr	r3, [pc, #88]	; (800d138 <xTaskCheckForTimeOut+0xe0>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d007      	beq.n	800d0f6 <xTaskCheckForTimeOut+0x9e>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	69ba      	ldr	r2, [r7, #24]
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d302      	bcc.n	800d0f6 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	61fb      	str	r3, [r7, #28]
 800d0f4:	e015      	b.n	800d122 <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	697a      	ldr	r2, [r7, #20]
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d20b      	bcs.n	800d118 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	1ad2      	subs	r2, r2, r3
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f7ff ff8d 	bl	800d02c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d112:	2300      	movs	r3, #0
 800d114:	61fb      	str	r3, [r7, #28]
 800d116:	e004      	b.n	800d122 <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	2200      	movs	r2, #0
 800d11c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d11e:	2301      	movs	r3, #1
 800d120:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d122:	f7fd ff4f 	bl	800afc4 <vPortExitCritical>

	return xReturn;
 800d126:	69fb      	ldr	r3, [r7, #28]
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3720      	adds	r7, #32
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}
 800d130:	20004ee8 	.word	0x20004ee8
 800d134:	20004a10 	.word	0x20004a10
 800d138:	20004efc 	.word	0x20004efc

0800d13c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d13c:	b480      	push	{r7}
 800d13e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d140:	4b03      	ldr	r3, [pc, #12]	; (800d150 <vTaskMissedYield+0x14>)
 800d142:	2201      	movs	r2, #1
 800d144:	601a      	str	r2, [r3, #0]
}
 800d146:	bf00      	nop
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr
 800d150:	20004ef8 	.word	0x20004ef8

0800d154 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d15c:	f000 f89a 	bl	800d294 <prvCheckTasksWaitingTermination>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d160:	f7f5 fc60 	bl	8002a24 <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800d164:	f7ff fc52 	bl	800ca0c <prvGetExpectedIdleTime>
 800d168:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d9f5      	bls.n	800d15c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800d170:	f7ff fc3e 	bl	800c9f0 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800d174:	4b0e      	ldr	r3, [pc, #56]	; (800d1b0 <prvIdleTask+0x5c>)
 800d176:	681a      	ldr	r2, [r3, #0]
 800d178:	4b0e      	ldr	r3, [pc, #56]	; (800d1b4 <prvIdleTask+0x60>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d20a      	bcs.n	800d196 <prvIdleTask+0x42>
	__asm volatile
 800d180:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d184:	f383 8811 	msr	BASEPRI, r3
 800d188:	f3bf 8f6f 	isb	sy
 800d18c:	f3bf 8f4f 	dsb	sy
 800d190:	60bb      	str	r3, [r7, #8]
}
 800d192:	bf00      	nop
 800d194:	e7fe      	b.n	800d194 <prvIdleTask+0x40>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800d196:	f7ff fc39 	bl	800ca0c <prvGetExpectedIdleTime>
 800d19a:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	d902      	bls.n	800d1a8 <prvIdleTask+0x54>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800d1a2:	68f8      	ldr	r0, [r7, #12]
 800d1a4:	f7fd ff92 	bl	800b0cc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800d1a8:	f7ff fc68 	bl	800ca7c <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800d1ac:	e7d6      	b.n	800d15c <prvIdleTask+0x8>
 800d1ae:	bf00      	nop
 800d1b0:	20004f04 	.word	0x20004f04
 800d1b4:	20004ee8 	.word	0x20004ee8

0800d1b8 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800d1be:	2301      	movs	r3, #1
 800d1c0:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800d1c6:	4b0f      	ldr	r3, [pc, #60]	; (800d204 <eTaskConfirmSleepModeStatus+0x4c>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d002      	beq.n	800d1d4 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	71fb      	strb	r3, [r7, #7]
 800d1d2:	e010      	b.n	800d1f6 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800d1d4:	4b0c      	ldr	r3, [pc, #48]	; (800d208 <eTaskConfirmSleepModeStatus+0x50>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d002      	beq.n	800d1e2 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	71fb      	strb	r3, [r7, #7]
 800d1e0:	e009      	b.n	800d1f6 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800d1e2:	4b0a      	ldr	r3, [pc, #40]	; (800d20c <eTaskConfirmSleepModeStatus+0x54>)
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	4b0a      	ldr	r3, [pc, #40]	; (800d210 <eTaskConfirmSleepModeStatus+0x58>)
 800d1e8:	6819      	ldr	r1, [r3, #0]
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	1acb      	subs	r3, r1, r3
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d101      	bne.n	800d1f6 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800d1f2:	2302      	movs	r3, #2
 800d1f4:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800d1f6:	79fb      	ldrb	r3, [r7, #7]
	}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	370c      	adds	r7, #12
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr
 800d204:	20004ea4 	.word	0x20004ea4
 800d208:	20004ef8 	.word	0x20004ef8
 800d20c:	20004ed0 	.word	0x20004ed0
 800d210:	20004ee4 	.word	0x20004ee4

0800d214 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d21a:	2300      	movs	r3, #0
 800d21c:	607b      	str	r3, [r7, #4]
 800d21e:	e00c      	b.n	800d23a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d220:	687a      	ldr	r2, [r7, #4]
 800d222:	4613      	mov	r3, r2
 800d224:	009b      	lsls	r3, r3, #2
 800d226:	4413      	add	r3, r2
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	4a12      	ldr	r2, [pc, #72]	; (800d274 <prvInitialiseTaskLists+0x60>)
 800d22c:	4413      	add	r3, r2
 800d22e:	4618      	mov	r0, r3
 800d230:	f7fd fcb6 	bl	800aba0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	3301      	adds	r3, #1
 800d238:	607b      	str	r3, [r7, #4]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2b37      	cmp	r3, #55	; 0x37
 800d23e:	d9ef      	bls.n	800d220 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d240:	480d      	ldr	r0, [pc, #52]	; (800d278 <prvInitialiseTaskLists+0x64>)
 800d242:	f7fd fcad 	bl	800aba0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d246:	480d      	ldr	r0, [pc, #52]	; (800d27c <prvInitialiseTaskLists+0x68>)
 800d248:	f7fd fcaa 	bl	800aba0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d24c:	480c      	ldr	r0, [pc, #48]	; (800d280 <prvInitialiseTaskLists+0x6c>)
 800d24e:	f7fd fca7 	bl	800aba0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d252:	480c      	ldr	r0, [pc, #48]	; (800d284 <prvInitialiseTaskLists+0x70>)
 800d254:	f7fd fca4 	bl	800aba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d258:	480b      	ldr	r0, [pc, #44]	; (800d288 <prvInitialiseTaskLists+0x74>)
 800d25a:	f7fd fca1 	bl	800aba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d25e:	4b0b      	ldr	r3, [pc, #44]	; (800d28c <prvInitialiseTaskLists+0x78>)
 800d260:	4a05      	ldr	r2, [pc, #20]	; (800d278 <prvInitialiseTaskLists+0x64>)
 800d262:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d264:	4b0a      	ldr	r3, [pc, #40]	; (800d290 <prvInitialiseTaskLists+0x7c>)
 800d266:	4a05      	ldr	r2, [pc, #20]	; (800d27c <prvInitialiseTaskLists+0x68>)
 800d268:	601a      	str	r2, [r3, #0]
}
 800d26a:	bf00      	nop
 800d26c:	3708      	adds	r7, #8
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	20004a14 	.word	0x20004a14
 800d278:	20004e74 	.word	0x20004e74
 800d27c:	20004e88 	.word	0x20004e88
 800d280:	20004ea4 	.word	0x20004ea4
 800d284:	20004eb8 	.word	0x20004eb8
 800d288:	20004ed0 	.word	0x20004ed0
 800d28c:	20004e9c 	.word	0x20004e9c
 800d290:	20004ea0 	.word	0x20004ea0

0800d294 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d29a:	e019      	b.n	800d2d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d29c:	f7fd fe62 	bl	800af64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2a0:	4b10      	ldr	r3, [pc, #64]	; (800d2e4 <prvCheckTasksWaitingTermination+0x50>)
 800d2a2:	68db      	ldr	r3, [r3, #12]
 800d2a4:	68db      	ldr	r3, [r3, #12]
 800d2a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	3304      	adds	r3, #4
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7fd fd01 	bl	800acb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d2b2:	4b0d      	ldr	r3, [pc, #52]	; (800d2e8 <prvCheckTasksWaitingTermination+0x54>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	3b01      	subs	r3, #1
 800d2b8:	4a0b      	ldr	r2, [pc, #44]	; (800d2e8 <prvCheckTasksWaitingTermination+0x54>)
 800d2ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d2bc:	4b0b      	ldr	r3, [pc, #44]	; (800d2ec <prvCheckTasksWaitingTermination+0x58>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	3b01      	subs	r3, #1
 800d2c2:	4a0a      	ldr	r2, [pc, #40]	; (800d2ec <prvCheckTasksWaitingTermination+0x58>)
 800d2c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d2c6:	f7fd fe7d 	bl	800afc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f000 f810 	bl	800d2f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d2d0:	4b06      	ldr	r3, [pc, #24]	; (800d2ec <prvCheckTasksWaitingTermination+0x58>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d1e1      	bne.n	800d29c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d2d8:	bf00      	nop
 800d2da:	bf00      	nop
 800d2dc:	3708      	adds	r7, #8
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	20004eb8 	.word	0x20004eb8
 800d2e8:	20004ee4 	.word	0x20004ee4
 800d2ec:	20004ecc 	.word	0x20004ecc

0800d2f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b084      	sub	sp, #16
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800d2fe:	4618      	mov	r0, r3
 800d300:	f002 f88c 	bl	800f41c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f893 31b1 	ldrb.w	r3, [r3, #433]	; 0x1b1
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d108      	bne.n	800d320 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d312:	4618      	mov	r0, r3
 800d314:	f7fd fb26 	bl	800a964 <vPortFree>
				vPortFree( pxTCB );
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f7fd fb23 	bl	800a964 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d31e:	e018      	b.n	800d352 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f893 31b1 	ldrb.w	r3, [r3, #433]	; 0x1b1
 800d326:	2b01      	cmp	r3, #1
 800d328:	d103      	bne.n	800d332 <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f7fd fb1a 	bl	800a964 <vPortFree>
	}
 800d330:	e00f      	b.n	800d352 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f893 31b1 	ldrb.w	r3, [r3, #433]	; 0x1b1
 800d338:	2b02      	cmp	r3, #2
 800d33a:	d00a      	beq.n	800d352 <prvDeleteTCB+0x62>
	__asm volatile
 800d33c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d340:	f383 8811 	msr	BASEPRI, r3
 800d344:	f3bf 8f6f 	isb	sy
 800d348:	f3bf 8f4f 	dsb	sy
 800d34c:	60fb      	str	r3, [r7, #12]
}
 800d34e:	bf00      	nop
 800d350:	e7fe      	b.n	800d350 <prvDeleteTCB+0x60>
	}
 800d352:	bf00      	nop
 800d354:	3710      	adds	r7, #16
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}
	...

0800d35c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d362:	4b0c      	ldr	r3, [pc, #48]	; (800d394 <prvResetNextTaskUnblockTime+0x38>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d104      	bne.n	800d376 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d36c:	4b0a      	ldr	r3, [pc, #40]	; (800d398 <prvResetNextTaskUnblockTime+0x3c>)
 800d36e:	f04f 32ff 	mov.w	r2, #4294967295
 800d372:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d374:	e008      	b.n	800d388 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d376:	4b07      	ldr	r3, [pc, #28]	; (800d394 <prvResetNextTaskUnblockTime+0x38>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	68db      	ldr	r3, [r3, #12]
 800d37c:	68db      	ldr	r3, [r3, #12]
 800d37e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	4a04      	ldr	r2, [pc, #16]	; (800d398 <prvResetNextTaskUnblockTime+0x3c>)
 800d386:	6013      	str	r3, [r2, #0]
}
 800d388:	bf00      	nop
 800d38a:	370c      	adds	r7, #12
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr
 800d394:	20004e9c 	.word	0x20004e9c
 800d398:	20004f04 	.word	0x20004f04

0800d39c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d39c:	b480      	push	{r7}
 800d39e:	b083      	sub	sp, #12
 800d3a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d3a2:	4b0b      	ldr	r3, [pc, #44]	; (800d3d0 <xTaskGetSchedulerState+0x34>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d102      	bne.n	800d3b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	607b      	str	r3, [r7, #4]
 800d3ae:	e008      	b.n	800d3c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3b0:	4b08      	ldr	r3, [pc, #32]	; (800d3d4 <xTaskGetSchedulerState+0x38>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d102      	bne.n	800d3be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d3b8:	2302      	movs	r3, #2
 800d3ba:	607b      	str	r3, [r7, #4]
 800d3bc:	e001      	b.n	800d3c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d3c2:	687b      	ldr	r3, [r7, #4]
	}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	370c      	adds	r7, #12
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr
 800d3d0:	20004ef0 	.word	0x20004ef0
 800d3d4:	20004f0c 	.word	0x20004f0c

0800d3d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b084      	sub	sp, #16
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d052      	beq.n	800d494 <xTaskPriorityInherit+0xbc>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3f2:	4b2b      	ldr	r3, [pc, #172]	; (800d4a0 <xTaskPriorityInherit+0xc8>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d241      	bcs.n	800d480 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	699b      	ldr	r3, [r3, #24]
 800d400:	2b00      	cmp	r3, #0
 800d402:	db06      	blt.n	800d412 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d404:	4b26      	ldr	r3, [pc, #152]	; (800d4a0 <xTaskPriorityInherit+0xc8>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d40a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	6959      	ldr	r1, [r3, #20]
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d41a:	4613      	mov	r3, r2
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	4413      	add	r3, r2
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	4a20      	ldr	r2, [pc, #128]	; (800d4a4 <xTaskPriorityInherit+0xcc>)
 800d424:	4413      	add	r3, r2
 800d426:	4299      	cmp	r1, r3
 800d428:	d122      	bne.n	800d470 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	3304      	adds	r3, #4
 800d42e:	4618      	mov	r0, r3
 800d430:	f7fd fc40 	bl	800acb4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d434:	4b1a      	ldr	r3, [pc, #104]	; (800d4a0 <xTaskPriorityInherit+0xc8>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d442:	4b19      	ldr	r3, [pc, #100]	; (800d4a8 <xTaskPriorityInherit+0xd0>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	429a      	cmp	r2, r3
 800d448:	d903      	bls.n	800d452 <xTaskPriorityInherit+0x7a>
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d44e:	4a16      	ldr	r2, [pc, #88]	; (800d4a8 <xTaskPriorityInherit+0xd0>)
 800d450:	6013      	str	r3, [r2, #0]
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d456:	4613      	mov	r3, r2
 800d458:	009b      	lsls	r3, r3, #2
 800d45a:	4413      	add	r3, r2
 800d45c:	009b      	lsls	r3, r3, #2
 800d45e:	4a11      	ldr	r2, [pc, #68]	; (800d4a4 <xTaskPriorityInherit+0xcc>)
 800d460:	441a      	add	r2, r3
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	3304      	adds	r3, #4
 800d466:	4619      	mov	r1, r3
 800d468:	4610      	mov	r0, r2
 800d46a:	f7fd fbc6 	bl	800abfa <vListInsertEnd>
 800d46e:	e004      	b.n	800d47a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d470:	4b0b      	ldr	r3, [pc, #44]	; (800d4a0 <xTaskPriorityInherit+0xc8>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d47a:	2301      	movs	r3, #1
 800d47c:	60fb      	str	r3, [r7, #12]
 800d47e:	e009      	b.n	800d494 <xTaskPriorityInherit+0xbc>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800d486:	4b06      	ldr	r3, [pc, #24]	; (800d4a0 <xTaskPriorityInherit+0xc8>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d201      	bcs.n	800d494 <xTaskPriorityInherit+0xbc>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d490:	2301      	movs	r3, #1
 800d492:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d494:	68fb      	ldr	r3, [r7, #12]
	}
 800d496:	4618      	mov	r0, r3
 800d498:	3710      	adds	r7, #16
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
 800d49e:	bf00      	nop
 800d4a0:	20004a10 	.word	0x20004a10
 800d4a4:	20004a14 	.word	0x20004a14
 800d4a8:	20004eec 	.word	0x20004eec

0800d4ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b086      	sub	sp, #24
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d05c      	beq.n	800d57c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d4c2:	4b31      	ldr	r3, [pc, #196]	; (800d588 <xTaskPriorityDisinherit+0xdc>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	693a      	ldr	r2, [r7, #16]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d00a      	beq.n	800d4e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d4cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d4d0:	f383 8811 	msr	BASEPRI, r3
 800d4d4:	f3bf 8f6f 	isb	sy
 800d4d8:	f3bf 8f4f 	dsb	sy
 800d4dc:	60fb      	str	r3, [r7, #12]
}
 800d4de:	bf00      	nop
 800d4e0:	e7fe      	b.n	800d4e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d10a      	bne.n	800d502 <xTaskPriorityDisinherit+0x56>
	__asm volatile
 800d4ec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d4f0:	f383 8811 	msr	BASEPRI, r3
 800d4f4:	f3bf 8f6f 	isb	sy
 800d4f8:	f3bf 8f4f 	dsb	sy
 800d4fc:	60bb      	str	r3, [r7, #8]
}
 800d4fe:	bf00      	nop
 800d500:	e7fe      	b.n	800d500 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800d508:	1e5a      	subs	r2, r3, #1
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d02e      	beq.n	800d57c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800d524:	2b00      	cmp	r3, #0
 800d526:	d129      	bne.n	800d57c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	3304      	adds	r3, #4
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7fd fbc1 	bl	800acb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d540:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d54c:	4b0f      	ldr	r3, [pc, #60]	; (800d58c <xTaskPriorityDisinherit+0xe0>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	429a      	cmp	r2, r3
 800d552:	d903      	bls.n	800d55c <xTaskPriorityDisinherit+0xb0>
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d558:	4a0c      	ldr	r2, [pc, #48]	; (800d58c <xTaskPriorityDisinherit+0xe0>)
 800d55a:	6013      	str	r3, [r2, #0]
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d560:	4613      	mov	r3, r2
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	4413      	add	r3, r2
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	4a09      	ldr	r2, [pc, #36]	; (800d590 <xTaskPriorityDisinherit+0xe4>)
 800d56a:	441a      	add	r2, r3
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	3304      	adds	r3, #4
 800d570:	4619      	mov	r1, r3
 800d572:	4610      	mov	r0, r2
 800d574:	f7fd fb41 	bl	800abfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d578:	2301      	movs	r3, #1
 800d57a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d57c:	697b      	ldr	r3, [r7, #20]
	}
 800d57e:	4618      	mov	r0, r3
 800d580:	3718      	adds	r7, #24
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	20004a10 	.word	0x20004a10
 800d58c:	20004eec 	.word	0x20004eec
 800d590:	20004a14 	.word	0x20004a14

0800d594 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d594:	b580      	push	{r7, lr}
 800d596:	b088      	sub	sp, #32
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d06e      	beq.n	800d68a <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d5ac:	69bb      	ldr	r3, [r7, #24]
 800d5ae:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d10a      	bne.n	800d5cc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800d5b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d5ba:	f383 8811 	msr	BASEPRI, r3
 800d5be:	f3bf 8f6f 	isb	sy
 800d5c2:	f3bf 8f4f 	dsb	sy
 800d5c6:	60fb      	str	r3, [r7, #12]
}
 800d5c8:	bf00      	nop
 800d5ca:	e7fe      	b.n	800d5ca <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d5cc:	69bb      	ldr	r3, [r7, #24]
 800d5ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d5d2:	683a      	ldr	r2, [r7, #0]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d902      	bls.n	800d5de <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	61fb      	str	r3, [r7, #28]
 800d5dc:	e003      	b.n	800d5e6 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d5de:	69bb      	ldr	r3, [r7, #24]
 800d5e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d5e4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ea:	69fa      	ldr	r2, [r7, #28]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d04c      	beq.n	800d68a <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d5f0:	69bb      	ldr	r3, [r7, #24]
 800d5f2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800d5f6:	697a      	ldr	r2, [r7, #20]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d146      	bne.n	800d68a <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d5fc:	4b25      	ldr	r3, [pc, #148]	; (800d694 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	69ba      	ldr	r2, [r7, #24]
 800d602:	429a      	cmp	r2, r3
 800d604:	d10a      	bne.n	800d61c <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800d606:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d60a:	f383 8811 	msr	BASEPRI, r3
 800d60e:	f3bf 8f6f 	isb	sy
 800d612:	f3bf 8f4f 	dsb	sy
 800d616:	60bb      	str	r3, [r7, #8]
}
 800d618:	bf00      	nop
 800d61a:	e7fe      	b.n	800d61a <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d61c:	69bb      	ldr	r3, [r7, #24]
 800d61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d620:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d622:	69bb      	ldr	r3, [r7, #24]
 800d624:	69fa      	ldr	r2, [r7, #28]
 800d626:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d628:	69bb      	ldr	r3, [r7, #24]
 800d62a:	699b      	ldr	r3, [r3, #24]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	db04      	blt.n	800d63a <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d630:	69fb      	ldr	r3, [r7, #28]
 800d632:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d63a:	69bb      	ldr	r3, [r7, #24]
 800d63c:	6959      	ldr	r1, [r3, #20]
 800d63e:	693a      	ldr	r2, [r7, #16]
 800d640:	4613      	mov	r3, r2
 800d642:	009b      	lsls	r3, r3, #2
 800d644:	4413      	add	r3, r2
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	4a13      	ldr	r2, [pc, #76]	; (800d698 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d64a:	4413      	add	r3, r2
 800d64c:	4299      	cmp	r1, r3
 800d64e:	d11c      	bne.n	800d68a <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d650:	69bb      	ldr	r3, [r7, #24]
 800d652:	3304      	adds	r3, #4
 800d654:	4618      	mov	r0, r3
 800d656:	f7fd fb2d 	bl	800acb4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d65a:	69bb      	ldr	r3, [r7, #24]
 800d65c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d65e:	4b0f      	ldr	r3, [pc, #60]	; (800d69c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	429a      	cmp	r2, r3
 800d664:	d903      	bls.n	800d66e <vTaskPriorityDisinheritAfterTimeout+0xda>
 800d666:	69bb      	ldr	r3, [r7, #24]
 800d668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d66a:	4a0c      	ldr	r2, [pc, #48]	; (800d69c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d66c:	6013      	str	r3, [r2, #0]
 800d66e:	69bb      	ldr	r3, [r7, #24]
 800d670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d672:	4613      	mov	r3, r2
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	4413      	add	r3, r2
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	4a07      	ldr	r2, [pc, #28]	; (800d698 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d67c:	441a      	add	r2, r3
 800d67e:	69bb      	ldr	r3, [r7, #24]
 800d680:	3304      	adds	r3, #4
 800d682:	4619      	mov	r1, r3
 800d684:	4610      	mov	r0, r2
 800d686:	f7fd fab8 	bl	800abfa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d68a:	bf00      	nop
 800d68c:	3720      	adds	r7, #32
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
 800d692:	bf00      	nop
 800d694:	20004a10 	.word	0x20004a10
 800d698:	20004a14 	.word	0x20004a14
 800d69c:	20004eec 	.word	0x20004eec

0800d6a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d6a0:	b480      	push	{r7}
 800d6a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d6a4:	4b08      	ldr	r3, [pc, #32]	; (800d6c8 <pvTaskIncrementMutexHeldCount+0x28>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d006      	beq.n	800d6ba <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d6ac:	4b06      	ldr	r3, [pc, #24]	; (800d6c8 <pvTaskIncrementMutexHeldCount+0x28>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 800d6b4:	3201      	adds	r2, #1
 800d6b6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		}

		return pxCurrentTCB;
 800d6ba:	4b03      	ldr	r3, [pc, #12]	; (800d6c8 <pvTaskIncrementMutexHeldCount+0x28>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
	}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr
 800d6c8:	20004a10 	.word	0x20004a10

0800d6cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d6d6:	4b24      	ldr	r3, [pc, #144]	; (800d768 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800d6dc:	4b23      	ldr	r3, [pc, #140]	; (800d76c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6e6:	4b21      	ldr	r3, [pc, #132]	; (800d76c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	3304      	adds	r3, #4
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7fd fae1 	bl	800acb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6f8:	d10a      	bne.n	800d710 <prvAddCurrentTaskToDelayedList+0x44>
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d007      	beq.n	800d710 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d700:	4b1a      	ldr	r3, [pc, #104]	; (800d76c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	3304      	adds	r3, #4
 800d706:	4619      	mov	r1, r3
 800d708:	4819      	ldr	r0, [pc, #100]	; (800d770 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d70a:	f7fd fa76 	bl	800abfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d70e:	e026      	b.n	800d75e <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d710:	68fa      	ldr	r2, [r7, #12]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	4413      	add	r3, r2
 800d716:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d718:	4b14      	ldr	r3, [pc, #80]	; (800d76c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	68ba      	ldr	r2, [r7, #8]
 800d71e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d720:	68ba      	ldr	r2, [r7, #8]
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	429a      	cmp	r2, r3
 800d726:	d209      	bcs.n	800d73c <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d728:	4b12      	ldr	r3, [pc, #72]	; (800d774 <prvAddCurrentTaskToDelayedList+0xa8>)
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	4b0f      	ldr	r3, [pc, #60]	; (800d76c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	3304      	adds	r3, #4
 800d732:	4619      	mov	r1, r3
 800d734:	4610      	mov	r0, r2
 800d736:	f7fd fa84 	bl	800ac42 <vListInsert>
}
 800d73a:	e010      	b.n	800d75e <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d73c:	4b0e      	ldr	r3, [pc, #56]	; (800d778 <prvAddCurrentTaskToDelayedList+0xac>)
 800d73e:	681a      	ldr	r2, [r3, #0]
 800d740:	4b0a      	ldr	r3, [pc, #40]	; (800d76c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	3304      	adds	r3, #4
 800d746:	4619      	mov	r1, r3
 800d748:	4610      	mov	r0, r2
 800d74a:	f7fd fa7a 	bl	800ac42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d74e:	4b0b      	ldr	r3, [pc, #44]	; (800d77c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	68ba      	ldr	r2, [r7, #8]
 800d754:	429a      	cmp	r2, r3
 800d756:	d202      	bcs.n	800d75e <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800d758:	4a08      	ldr	r2, [pc, #32]	; (800d77c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	6013      	str	r3, [r2, #0]
}
 800d75e:	bf00      	nop
 800d760:	3710      	adds	r7, #16
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	20004ee8 	.word	0x20004ee8
 800d76c:	20004a10 	.word	0x20004a10
 800d770:	20004ed0 	.word	0x20004ed0
 800d774:	20004ea0 	.word	0x20004ea0
 800d778:	20004e9c 	.word	0x20004e9c
 800d77c:	20004f04 	.word	0x20004f04

0800d780 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b08a      	sub	sp, #40	; 0x28
 800d784:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d786:	2300      	movs	r3, #0
 800d788:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d78a:	f000 fba1 	bl	800ded0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d78e:	4b1c      	ldr	r3, [pc, #112]	; (800d800 <xTimerCreateTimerTask+0x80>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d021      	beq.n	800d7da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d796:	2300      	movs	r3, #0
 800d798:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d79a:	2300      	movs	r3, #0
 800d79c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d79e:	1d3a      	adds	r2, r7, #4
 800d7a0:	f107 0108 	add.w	r1, r7, #8
 800d7a4:	f107 030c 	add.w	r3, r7, #12
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7fc fff1 	bl	800a790 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d7ae:	6879      	ldr	r1, [r7, #4]
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	68fa      	ldr	r2, [r7, #12]
 800d7b4:	9202      	str	r2, [sp, #8]
 800d7b6:	9301      	str	r3, [sp, #4]
 800d7b8:	2337      	movs	r3, #55	; 0x37
 800d7ba:	9300      	str	r3, [sp, #0]
 800d7bc:	2300      	movs	r3, #0
 800d7be:	460a      	mov	r2, r1
 800d7c0:	4910      	ldr	r1, [pc, #64]	; (800d804 <xTimerCreateTimerTask+0x84>)
 800d7c2:	4811      	ldr	r0, [pc, #68]	; (800d808 <xTimerCreateTimerTask+0x88>)
 800d7c4:	f7fe fde2 	bl	800c38c <xTaskCreateStatic>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	4a10      	ldr	r2, [pc, #64]	; (800d80c <xTimerCreateTimerTask+0x8c>)
 800d7cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d7ce:	4b0f      	ldr	r3, [pc, #60]	; (800d80c <xTimerCreateTimerTask+0x8c>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d001      	beq.n	800d7da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d10a      	bne.n	800d7f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d7e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d7e4:	f383 8811 	msr	BASEPRI, r3
 800d7e8:	f3bf 8f6f 	isb	sy
 800d7ec:	f3bf 8f4f 	dsb	sy
 800d7f0:	613b      	str	r3, [r7, #16]
}
 800d7f2:	bf00      	nop
 800d7f4:	e7fe      	b.n	800d7f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d7f6:	697b      	ldr	r3, [r7, #20]
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3718      	adds	r7, #24
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	20004f40 	.word	0x20004f40
 800d804:	0800f840 	.word	0x0800f840
 800d808:	0800da79 	.word	0x0800da79
 800d80c:	20004f44 	.word	0x20004f44

0800d810 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d810:	b580      	push	{r7, lr}
 800d812:	b088      	sub	sp, #32
 800d814:	af02      	add	r7, sp, #8
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	607a      	str	r2, [r7, #4]
 800d81c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d81e:	202c      	movs	r0, #44	; 0x2c
 800d820:	f7fc ffd0 	bl	800a7c4 <pvPortMalloc>
 800d824:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d00d      	beq.n	800d848 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	2200      	movs	r2, #0
 800d830:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	9301      	str	r3, [sp, #4]
 800d838:	6a3b      	ldr	r3, [r7, #32]
 800d83a:	9300      	str	r3, [sp, #0]
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	68b9      	ldr	r1, [r7, #8]
 800d842:	68f8      	ldr	r0, [r7, #12]
 800d844:	f000 f843 	bl	800d8ce <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d848:	697b      	ldr	r3, [r7, #20]
	}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3718      	adds	r7, #24
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}

0800d852 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800d852:	b580      	push	{r7, lr}
 800d854:	b08a      	sub	sp, #40	; 0x28
 800d856:	af02      	add	r7, sp, #8
 800d858:	60f8      	str	r0, [r7, #12]
 800d85a:	60b9      	str	r1, [r7, #8]
 800d85c:	607a      	str	r2, [r7, #4]
 800d85e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800d860:	232c      	movs	r3, #44	; 0x2c
 800d862:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	2b2c      	cmp	r3, #44	; 0x2c
 800d868:	d00a      	beq.n	800d880 <xTimerCreateStatic+0x2e>
	__asm volatile
 800d86a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d86e:	f383 8811 	msr	BASEPRI, r3
 800d872:	f3bf 8f6f 	isb	sy
 800d876:	f3bf 8f4f 	dsb	sy
 800d87a:	61bb      	str	r3, [r7, #24]
}
 800d87c:	bf00      	nop
 800d87e:	e7fe      	b.n	800d87e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d880:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d884:	2b00      	cmp	r3, #0
 800d886:	d10a      	bne.n	800d89e <xTimerCreateStatic+0x4c>
	__asm volatile
 800d888:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d88c:	f383 8811 	msr	BASEPRI, r3
 800d890:	f3bf 8f6f 	isb	sy
 800d894:	f3bf 8f4f 	dsb	sy
 800d898:	617b      	str	r3, [r7, #20]
}
 800d89a:	bf00      	nop
 800d89c:	e7fe      	b.n	800d89c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d00d      	beq.n	800d8c4 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	2202      	movs	r2, #2
 800d8ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d8b0:	69fb      	ldr	r3, [r7, #28]
 800d8b2:	9301      	str	r3, [sp, #4]
 800d8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b6:	9300      	str	r3, [sp, #0]
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	687a      	ldr	r2, [r7, #4]
 800d8bc:	68b9      	ldr	r1, [r7, #8]
 800d8be:	68f8      	ldr	r0, [r7, #12]
 800d8c0:	f000 f805 	bl	800d8ce <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d8c4:	69fb      	ldr	r3, [r7, #28]
	}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3720      	adds	r7, #32
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}

0800d8ce <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d8ce:	b580      	push	{r7, lr}
 800d8d0:	b086      	sub	sp, #24
 800d8d2:	af00      	add	r7, sp, #0
 800d8d4:	60f8      	str	r0, [r7, #12]
 800d8d6:	60b9      	str	r1, [r7, #8]
 800d8d8:	607a      	str	r2, [r7, #4]
 800d8da:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d10a      	bne.n	800d8f8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800d8e2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d8e6:	f383 8811 	msr	BASEPRI, r3
 800d8ea:	f3bf 8f6f 	isb	sy
 800d8ee:	f3bf 8f4f 	dsb	sy
 800d8f2:	617b      	str	r3, [r7, #20]
}
 800d8f4:	bf00      	nop
 800d8f6:	e7fe      	b.n	800d8f6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800d8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d01e      	beq.n	800d93c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d8fe:	f000 fae7 	bl	800ded0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d904:	68fa      	ldr	r2, [r7, #12]
 800d906:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90a:	68ba      	ldr	r2, [r7, #8]
 800d90c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d910:	683a      	ldr	r2, [r7, #0]
 800d912:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d916:	6a3a      	ldr	r2, [r7, #32]
 800d918:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d91c:	3304      	adds	r3, #4
 800d91e:	4618      	mov	r0, r3
 800d920:	f7fd f95e 	bl	800abe0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d008      	beq.n	800d93c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d930:	f043 0304 	orr.w	r3, r3, #4
 800d934:	b2da      	uxtb	r2, r3
 800d936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d938:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d93c:	bf00      	nop
 800d93e:	3718      	adds	r7, #24
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b08a      	sub	sp, #40	; 0x28
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]
 800d950:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d952:	2300      	movs	r3, #0
 800d954:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d10a      	bne.n	800d972 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d95c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d960:	f383 8811 	msr	BASEPRI, r3
 800d964:	f3bf 8f6f 	isb	sy
 800d968:	f3bf 8f4f 	dsb	sy
 800d96c:	623b      	str	r3, [r7, #32]
}
 800d96e:	bf00      	nop
 800d970:	e7fe      	b.n	800d970 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d972:	4b1a      	ldr	r3, [pc, #104]	; (800d9dc <xTimerGenericCommand+0x98>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d02a      	beq.n	800d9d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	2b05      	cmp	r3, #5
 800d98a:	dc18      	bgt.n	800d9be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d98c:	f7ff fd06 	bl	800d39c <xTaskGetSchedulerState>
 800d990:	4603      	mov	r3, r0
 800d992:	2b02      	cmp	r3, #2
 800d994:	d109      	bne.n	800d9aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d996:	4b11      	ldr	r3, [pc, #68]	; (800d9dc <xTimerGenericCommand+0x98>)
 800d998:	6818      	ldr	r0, [r3, #0]
 800d99a:	f107 0110 	add.w	r1, r7, #16
 800d99e:	2300      	movs	r3, #0
 800d9a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9a2:	f7fd fe8d 	bl	800b6c0 <xQueueGenericSend>
 800d9a6:	6278      	str	r0, [r7, #36]	; 0x24
 800d9a8:	e012      	b.n	800d9d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d9aa:	4b0c      	ldr	r3, [pc, #48]	; (800d9dc <xTimerGenericCommand+0x98>)
 800d9ac:	6818      	ldr	r0, [r3, #0]
 800d9ae:	f107 0110 	add.w	r1, r7, #16
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	f7fd fe83 	bl	800b6c0 <xQueueGenericSend>
 800d9ba:	6278      	str	r0, [r7, #36]	; 0x24
 800d9bc:	e008      	b.n	800d9d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d9be:	4b07      	ldr	r3, [pc, #28]	; (800d9dc <xTimerGenericCommand+0x98>)
 800d9c0:	6818      	ldr	r0, [r3, #0]
 800d9c2:	f107 0110 	add.w	r1, r7, #16
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	683a      	ldr	r2, [r7, #0]
 800d9ca:	f7fd ff77 	bl	800b8bc <xQueueGenericSendFromISR>
 800d9ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3728      	adds	r7, #40	; 0x28
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	20004f40 	.word	0x20004f40

0800d9e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b088      	sub	sp, #32
 800d9e4:	af02      	add	r7, sp, #8
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9ea:	4b22      	ldr	r3, [pc, #136]	; (800da74 <prvProcessExpiredTimer+0x94>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	68db      	ldr	r3, [r3, #12]
 800d9f0:	68db      	ldr	r3, [r3, #12]
 800d9f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	3304      	adds	r3, #4
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f7fd f95b 	bl	800acb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da04:	f003 0304 	and.w	r3, r3, #4
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d022      	beq.n	800da52 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	699a      	ldr	r2, [r3, #24]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	18d1      	adds	r1, r2, r3
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	683a      	ldr	r2, [r7, #0]
 800da18:	6978      	ldr	r0, [r7, #20]
 800da1a:	f000 f8d1 	bl	800dbc0 <prvInsertTimerInActiveList>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d01f      	beq.n	800da64 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da24:	2300      	movs	r3, #0
 800da26:	9300      	str	r3, [sp, #0]
 800da28:	2300      	movs	r3, #0
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	2100      	movs	r1, #0
 800da2e:	6978      	ldr	r0, [r7, #20]
 800da30:	f7ff ff88 	bl	800d944 <xTimerGenericCommand>
 800da34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d113      	bne.n	800da64 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800da3c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800da40:	f383 8811 	msr	BASEPRI, r3
 800da44:	f3bf 8f6f 	isb	sy
 800da48:	f3bf 8f4f 	dsb	sy
 800da4c:	60fb      	str	r3, [r7, #12]
}
 800da4e:	bf00      	nop
 800da50:	e7fe      	b.n	800da50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da58:	f023 0301 	bic.w	r3, r3, #1
 800da5c:	b2da      	uxtb	r2, r3
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	6a1b      	ldr	r3, [r3, #32]
 800da68:	6978      	ldr	r0, [r7, #20]
 800da6a:	4798      	blx	r3
}
 800da6c:	bf00      	nop
 800da6e:	3718      	adds	r7, #24
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}
 800da74:	20004f38 	.word	0x20004f38

0800da78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da80:	f107 0308 	add.w	r3, r7, #8
 800da84:	4618      	mov	r0, r3
 800da86:	f000 f857 	bl	800db38 <prvGetNextExpireTime>
 800da8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	4619      	mov	r1, r3
 800da90:	68f8      	ldr	r0, [r7, #12]
 800da92:	f000 f803 	bl	800da9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800da96:	f000 f8d5 	bl	800dc44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da9a:	e7f1      	b.n	800da80 <prvTimerTask+0x8>

0800da9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800daa6:	f7fe ffa3 	bl	800c9f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800daaa:	f107 0308 	add.w	r3, r7, #8
 800daae:	4618      	mov	r0, r3
 800dab0:	f000 f866 	bl	800db80 <prvSampleTimeNow>
 800dab4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d130      	bne.n	800db1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d10a      	bne.n	800dad8 <prvProcessTimerOrBlockTask+0x3c>
 800dac2:	687a      	ldr	r2, [r7, #4]
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d806      	bhi.n	800dad8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800daca:	f7fe ffd7 	bl	800ca7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dace:	68f9      	ldr	r1, [r7, #12]
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f7ff ff85 	bl	800d9e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dad6:	e024      	b.n	800db22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d008      	beq.n	800daf0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dade:	4b13      	ldr	r3, [pc, #76]	; (800db2c <prvProcessTimerOrBlockTask+0x90>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d101      	bne.n	800daec <prvProcessTimerOrBlockTask+0x50>
 800dae8:	2301      	movs	r3, #1
 800daea:	e000      	b.n	800daee <prvProcessTimerOrBlockTask+0x52>
 800daec:	2300      	movs	r3, #0
 800daee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800daf0:	4b0f      	ldr	r3, [pc, #60]	; (800db30 <prvProcessTimerOrBlockTask+0x94>)
 800daf2:	6818      	ldr	r0, [r3, #0]
 800daf4:	687a      	ldr	r2, [r7, #4]
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	1ad3      	subs	r3, r2, r3
 800dafa:	683a      	ldr	r2, [r7, #0]
 800dafc:	4619      	mov	r1, r3
 800dafe:	f7fe fc11 	bl	800c324 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800db02:	f7fe ffbb 	bl	800ca7c <xTaskResumeAll>
 800db06:	4603      	mov	r3, r0
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d10a      	bne.n	800db22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800db0c:	4b09      	ldr	r3, [pc, #36]	; (800db34 <prvProcessTimerOrBlockTask+0x98>)
 800db0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db12:	601a      	str	r2, [r3, #0]
 800db14:	f3bf 8f4f 	dsb	sy
 800db18:	f3bf 8f6f 	isb	sy
}
 800db1c:	e001      	b.n	800db22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800db1e:	f7fe ffad 	bl	800ca7c <xTaskResumeAll>
}
 800db22:	bf00      	nop
 800db24:	3710      	adds	r7, #16
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	20004f3c 	.word	0x20004f3c
 800db30:	20004f40 	.word	0x20004f40
 800db34:	e000ed04 	.word	0xe000ed04

0800db38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800db38:	b480      	push	{r7}
 800db3a:	b085      	sub	sp, #20
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800db40:	4b0e      	ldr	r3, [pc, #56]	; (800db7c <prvGetNextExpireTime+0x44>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d101      	bne.n	800db4e <prvGetNextExpireTime+0x16>
 800db4a:	2201      	movs	r2, #1
 800db4c:	e000      	b.n	800db50 <prvGetNextExpireTime+0x18>
 800db4e:	2200      	movs	r2, #0
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d105      	bne.n	800db68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db5c:	4b07      	ldr	r3, [pc, #28]	; (800db7c <prvGetNextExpireTime+0x44>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	68db      	ldr	r3, [r3, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	60fb      	str	r3, [r7, #12]
 800db66:	e001      	b.n	800db6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800db68:	2300      	movs	r3, #0
 800db6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800db6c:	68fb      	ldr	r3, [r7, #12]
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3714      	adds	r7, #20
 800db72:	46bd      	mov	sp, r7
 800db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db78:	4770      	bx	lr
 800db7a:	bf00      	nop
 800db7c:	20004f38 	.word	0x20004f38

0800db80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b084      	sub	sp, #16
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800db88:	f7ff f816 	bl	800cbb8 <xTaskGetTickCount>
 800db8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800db8e:	4b0b      	ldr	r3, [pc, #44]	; (800dbbc <prvSampleTimeNow+0x3c>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	68fa      	ldr	r2, [r7, #12]
 800db94:	429a      	cmp	r2, r3
 800db96:	d205      	bcs.n	800dba4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800db98:	f000 f936 	bl	800de08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2201      	movs	r2, #1
 800dba0:	601a      	str	r2, [r3, #0]
 800dba2:	e002      	b.n	800dbaa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2200      	movs	r2, #0
 800dba8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dbaa:	4a04      	ldr	r2, [pc, #16]	; (800dbbc <prvSampleTimeNow+0x3c>)
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3710      	adds	r7, #16
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	20004f48 	.word	0x20004f48

0800dbc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b086      	sub	sp, #24
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	60b9      	str	r1, [r7, #8]
 800dbca:	607a      	str	r2, [r7, #4]
 800dbcc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	68ba      	ldr	r2, [r7, #8]
 800dbd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	68fa      	ldr	r2, [r7, #12]
 800dbdc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dbde:	68ba      	ldr	r2, [r7, #8]
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d812      	bhi.n	800dc0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	1ad2      	subs	r2, r2, r3
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	699b      	ldr	r3, [r3, #24]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d302      	bcc.n	800dbfa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	617b      	str	r3, [r7, #20]
 800dbf8:	e01b      	b.n	800dc32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dbfa:	4b10      	ldr	r3, [pc, #64]	; (800dc3c <prvInsertTimerInActiveList+0x7c>)
 800dbfc:	681a      	ldr	r2, [r3, #0]
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	3304      	adds	r3, #4
 800dc02:	4619      	mov	r1, r3
 800dc04:	4610      	mov	r0, r2
 800dc06:	f7fd f81c 	bl	800ac42 <vListInsert>
 800dc0a:	e012      	b.n	800dc32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d206      	bcs.n	800dc22 <prvInsertTimerInActiveList+0x62>
 800dc14:	68ba      	ldr	r2, [r7, #8]
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d302      	bcc.n	800dc22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	617b      	str	r3, [r7, #20]
 800dc20:	e007      	b.n	800dc32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dc22:	4b07      	ldr	r3, [pc, #28]	; (800dc40 <prvInsertTimerInActiveList+0x80>)
 800dc24:	681a      	ldr	r2, [r3, #0]
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	3304      	adds	r3, #4
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	4610      	mov	r0, r2
 800dc2e:	f7fd f808 	bl	800ac42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dc32:	697b      	ldr	r3, [r7, #20]
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3718      	adds	r7, #24
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	20004f3c 	.word	0x20004f3c
 800dc40:	20004f38 	.word	0x20004f38

0800dc44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b08e      	sub	sp, #56	; 0x38
 800dc48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc4a:	e0ca      	b.n	800dde2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	da18      	bge.n	800dc84 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dc52:	1d3b      	adds	r3, r7, #4
 800dc54:	3304      	adds	r3, #4
 800dc56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d10a      	bne.n	800dc74 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dc5e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800dc62:	f383 8811 	msr	BASEPRI, r3
 800dc66:	f3bf 8f6f 	isb	sy
 800dc6a:	f3bf 8f4f 	dsb	sy
 800dc6e:	61fb      	str	r3, [r7, #28]
}
 800dc70:	bf00      	nop
 800dc72:	e7fe      	b.n	800dc72 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc7a:	6850      	ldr	r0, [r2, #4]
 800dc7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc7e:	6892      	ldr	r2, [r2, #8]
 800dc80:	4611      	mov	r1, r2
 800dc82:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	f2c0 80aa 	blt.w	800dde0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc92:	695b      	ldr	r3, [r3, #20]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d004      	beq.n	800dca2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9a:	3304      	adds	r3, #4
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f7fd f809 	bl	800acb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dca2:	463b      	mov	r3, r7
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7ff ff6b 	bl	800db80 <prvSampleTimeNow>
 800dcaa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2b09      	cmp	r3, #9
 800dcb0:	f200 8097 	bhi.w	800dde2 <prvProcessReceivedCommands+0x19e>
 800dcb4:	a201      	add	r2, pc, #4	; (adr r2, 800dcbc <prvProcessReceivedCommands+0x78>)
 800dcb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcba:	bf00      	nop
 800dcbc:	0800dce5 	.word	0x0800dce5
 800dcc0:	0800dce5 	.word	0x0800dce5
 800dcc4:	0800dce5 	.word	0x0800dce5
 800dcc8:	0800dd59 	.word	0x0800dd59
 800dccc:	0800dd6d 	.word	0x0800dd6d
 800dcd0:	0800ddb7 	.word	0x0800ddb7
 800dcd4:	0800dce5 	.word	0x0800dce5
 800dcd8:	0800dce5 	.word	0x0800dce5
 800dcdc:	0800dd59 	.word	0x0800dd59
 800dce0:	0800dd6d 	.word	0x0800dd6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcea:	f043 0301 	orr.w	r3, r3, #1
 800dcee:	b2da      	uxtb	r2, r3
 800dcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dcf6:	68ba      	ldr	r2, [r7, #8]
 800dcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcfa:	699b      	ldr	r3, [r3, #24]
 800dcfc:	18d1      	adds	r1, r2, r3
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd04:	f7ff ff5c 	bl	800dbc0 <prvInsertTimerInActiveList>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d069      	beq.n	800dde2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd10:	6a1b      	ldr	r3, [r3, #32]
 800dd12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd1c:	f003 0304 	and.w	r3, r3, #4
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d05e      	beq.n	800dde2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dd24:	68ba      	ldr	r2, [r7, #8]
 800dd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd28:	699b      	ldr	r3, [r3, #24]
 800dd2a:	441a      	add	r2, r3
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	9300      	str	r3, [sp, #0]
 800dd30:	2300      	movs	r3, #0
 800dd32:	2100      	movs	r1, #0
 800dd34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd36:	f7ff fe05 	bl	800d944 <xTimerGenericCommand>
 800dd3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dd3c:	6a3b      	ldr	r3, [r7, #32]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d14f      	bne.n	800dde2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dd42:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800dd46:	f383 8811 	msr	BASEPRI, r3
 800dd4a:	f3bf 8f6f 	isb	sy
 800dd4e:	f3bf 8f4f 	dsb	sy
 800dd52:	61bb      	str	r3, [r7, #24]
}
 800dd54:	bf00      	nop
 800dd56:	e7fe      	b.n	800dd56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd5e:	f023 0301 	bic.w	r3, r3, #1
 800dd62:	b2da      	uxtb	r2, r3
 800dd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dd6a:	e03a      	b.n	800dde2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd72:	f043 0301 	orr.w	r3, r3, #1
 800dd76:	b2da      	uxtb	r2, r3
 800dd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dd7e:	68ba      	ldr	r2, [r7, #8]
 800dd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd86:	699b      	ldr	r3, [r3, #24]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d10a      	bne.n	800dda2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800dd8c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800dd90:	f383 8811 	msr	BASEPRI, r3
 800dd94:	f3bf 8f6f 	isb	sy
 800dd98:	f3bf 8f4f 	dsb	sy
 800dd9c:	617b      	str	r3, [r7, #20]
}
 800dd9e:	bf00      	nop
 800dda0:	e7fe      	b.n	800dda0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda4:	699a      	ldr	r2, [r3, #24]
 800dda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda8:	18d1      	adds	r1, r2, r3
 800ddaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddb0:	f7ff ff06 	bl	800dbc0 <prvInsertTimerInActiveList>
					break;
 800ddb4:	e015      	b.n	800dde2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ddb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddbc:	f003 0302 	and.w	r3, r3, #2
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d103      	bne.n	800ddcc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ddc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddc6:	f7fc fdcd 	bl	800a964 <vPortFree>
 800ddca:	e00a      	b.n	800dde2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ddcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddd2:	f023 0301 	bic.w	r3, r3, #1
 800ddd6:	b2da      	uxtb	r2, r3
 800ddd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ddde:	e000      	b.n	800dde2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dde0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dde2:	4b08      	ldr	r3, [pc, #32]	; (800de04 <prvProcessReceivedCommands+0x1c0>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	1d39      	adds	r1, r7, #4
 800dde8:	2200      	movs	r2, #0
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7fd fe8e 	bl	800bb0c <xQueueReceive>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	f47f af2a 	bne.w	800dc4c <prvProcessReceivedCommands+0x8>
	}
}
 800ddf8:	bf00      	nop
 800ddfa:	bf00      	nop
 800ddfc:	3730      	adds	r7, #48	; 0x30
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}
 800de02:	bf00      	nop
 800de04:	20004f40 	.word	0x20004f40

0800de08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b088      	sub	sp, #32
 800de0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de0e:	e048      	b.n	800dea2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de10:	4b2d      	ldr	r3, [pc, #180]	; (800dec8 <prvSwitchTimerLists+0xc0>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de1a:	4b2b      	ldr	r3, [pc, #172]	; (800dec8 <prvSwitchTimerLists+0xc0>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	68db      	ldr	r3, [r3, #12]
 800de20:	68db      	ldr	r3, [r3, #12]
 800de22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	3304      	adds	r3, #4
 800de28:	4618      	mov	r0, r3
 800de2a:	f7fc ff43 	bl	800acb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	6a1b      	ldr	r3, [r3, #32]
 800de32:	68f8      	ldr	r0, [r7, #12]
 800de34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de3c:	f003 0304 	and.w	r3, r3, #4
 800de40:	2b00      	cmp	r3, #0
 800de42:	d02e      	beq.n	800dea2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	699b      	ldr	r3, [r3, #24]
 800de48:	693a      	ldr	r2, [r7, #16]
 800de4a:	4413      	add	r3, r2
 800de4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800de4e:	68ba      	ldr	r2, [r7, #8]
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	429a      	cmp	r2, r3
 800de54:	d90e      	bls.n	800de74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	68ba      	ldr	r2, [r7, #8]
 800de5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	68fa      	ldr	r2, [r7, #12]
 800de60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de62:	4b19      	ldr	r3, [pc, #100]	; (800dec8 <prvSwitchTimerLists+0xc0>)
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	3304      	adds	r3, #4
 800de6a:	4619      	mov	r1, r3
 800de6c:	4610      	mov	r0, r2
 800de6e:	f7fc fee8 	bl	800ac42 <vListInsert>
 800de72:	e016      	b.n	800dea2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de74:	2300      	movs	r3, #0
 800de76:	9300      	str	r3, [sp, #0]
 800de78:	2300      	movs	r3, #0
 800de7a:	693a      	ldr	r2, [r7, #16]
 800de7c:	2100      	movs	r1, #0
 800de7e:	68f8      	ldr	r0, [r7, #12]
 800de80:	f7ff fd60 	bl	800d944 <xTimerGenericCommand>
 800de84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d10a      	bne.n	800dea2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800de8c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800de90:	f383 8811 	msr	BASEPRI, r3
 800de94:	f3bf 8f6f 	isb	sy
 800de98:	f3bf 8f4f 	dsb	sy
 800de9c:	603b      	str	r3, [r7, #0]
}
 800de9e:	bf00      	nop
 800dea0:	e7fe      	b.n	800dea0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dea2:	4b09      	ldr	r3, [pc, #36]	; (800dec8 <prvSwitchTimerLists+0xc0>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d1b1      	bne.n	800de10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800deac:	4b06      	ldr	r3, [pc, #24]	; (800dec8 <prvSwitchTimerLists+0xc0>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800deb2:	4b06      	ldr	r3, [pc, #24]	; (800decc <prvSwitchTimerLists+0xc4>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	4a04      	ldr	r2, [pc, #16]	; (800dec8 <prvSwitchTimerLists+0xc0>)
 800deb8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800deba:	4a04      	ldr	r2, [pc, #16]	; (800decc <prvSwitchTimerLists+0xc4>)
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	6013      	str	r3, [r2, #0]
}
 800dec0:	bf00      	nop
 800dec2:	3718      	adds	r7, #24
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}
 800dec8:	20004f38 	.word	0x20004f38
 800decc:	20004f3c 	.word	0x20004f3c

0800ded0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b082      	sub	sp, #8
 800ded4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ded6:	f7fd f845 	bl	800af64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800deda:	4b15      	ldr	r3, [pc, #84]	; (800df30 <prvCheckForValidListAndQueue+0x60>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d120      	bne.n	800df24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dee2:	4814      	ldr	r0, [pc, #80]	; (800df34 <prvCheckForValidListAndQueue+0x64>)
 800dee4:	f7fc fe5c 	bl	800aba0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dee8:	4813      	ldr	r0, [pc, #76]	; (800df38 <prvCheckForValidListAndQueue+0x68>)
 800deea:	f7fc fe59 	bl	800aba0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800deee:	4b13      	ldr	r3, [pc, #76]	; (800df3c <prvCheckForValidListAndQueue+0x6c>)
 800def0:	4a10      	ldr	r2, [pc, #64]	; (800df34 <prvCheckForValidListAndQueue+0x64>)
 800def2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800def4:	4b12      	ldr	r3, [pc, #72]	; (800df40 <prvCheckForValidListAndQueue+0x70>)
 800def6:	4a10      	ldr	r2, [pc, #64]	; (800df38 <prvCheckForValidListAndQueue+0x68>)
 800def8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800defa:	2300      	movs	r3, #0
 800defc:	9300      	str	r3, [sp, #0]
 800defe:	4b11      	ldr	r3, [pc, #68]	; (800df44 <prvCheckForValidListAndQueue+0x74>)
 800df00:	4a11      	ldr	r2, [pc, #68]	; (800df48 <prvCheckForValidListAndQueue+0x78>)
 800df02:	2110      	movs	r1, #16
 800df04:	20ff      	movs	r0, #255	; 0xff
 800df06:	f7fd fa9b 	bl	800b440 <xQueueGenericCreateStatic>
 800df0a:	4603      	mov	r3, r0
 800df0c:	4a08      	ldr	r2, [pc, #32]	; (800df30 <prvCheckForValidListAndQueue+0x60>)
 800df0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800df10:	4b07      	ldr	r3, [pc, #28]	; (800df30 <prvCheckForValidListAndQueue+0x60>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d005      	beq.n	800df24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800df18:	4b05      	ldr	r3, [pc, #20]	; (800df30 <prvCheckForValidListAndQueue+0x60>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	490b      	ldr	r1, [pc, #44]	; (800df4c <prvCheckForValidListAndQueue+0x7c>)
 800df1e:	4618      	mov	r0, r3
 800df20:	f7fe f9ac 	bl	800c27c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df24:	f7fd f84e 	bl	800afc4 <vPortExitCritical>
}
 800df28:	bf00      	nop
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	20004f40 	.word	0x20004f40
 800df34:	20004f10 	.word	0x20004f10
 800df38:	20004f24 	.word	0x20004f24
 800df3c:	20004f38 	.word	0x20004f38
 800df40:	20004f3c 	.word	0x20004f3c
 800df44:	20005f3c 	.word	0x20005f3c
 800df48:	20004f4c 	.word	0x20004f4c
 800df4c:	0800f848 	.word	0x0800f848

0800df50 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b086      	sub	sp, #24
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d10a      	bne.n	800df78 <xTimerIsTimerActive+0x28>
	__asm volatile
 800df62:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800df66:	f383 8811 	msr	BASEPRI, r3
 800df6a:	f3bf 8f6f 	isb	sy
 800df6e:	f3bf 8f4f 	dsb	sy
 800df72:	60fb      	str	r3, [r7, #12]
}
 800df74:	bf00      	nop
 800df76:	e7fe      	b.n	800df76 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800df78:	f7fc fff4 	bl	800af64 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df82:	f003 0301 	and.w	r3, r3, #1
 800df86:	2b00      	cmp	r3, #0
 800df88:	d102      	bne.n	800df90 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800df8a:	2300      	movs	r3, #0
 800df8c:	617b      	str	r3, [r7, #20]
 800df8e:	e001      	b.n	800df94 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800df90:	2301      	movs	r3, #1
 800df92:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800df94:	f7fd f816 	bl	800afc4 <vPortExitCritical>

	return xReturn;
 800df98:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800df9a:	4618      	mov	r0, r3
 800df9c:	3718      	adds	r7, #24
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}

0800dfa2 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800dfa2:	b580      	push	{r7, lr}
 800dfa4:	b086      	sub	sp, #24
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d10a      	bne.n	800dfca <pvTimerGetTimerID+0x28>
	__asm volatile
 800dfb4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800dfb8:	f383 8811 	msr	BASEPRI, r3
 800dfbc:	f3bf 8f6f 	isb	sy
 800dfc0:	f3bf 8f4f 	dsb	sy
 800dfc4:	60fb      	str	r3, [r7, #12]
}
 800dfc6:	bf00      	nop
 800dfc8:	e7fe      	b.n	800dfc8 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800dfca:	f7fc ffcb 	bl	800af64 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	69db      	ldr	r3, [r3, #28]
 800dfd2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800dfd4:	f7fc fff6 	bl	800afc4 <vPortExitCritical>

	return pvReturn;
 800dfd8:	693b      	ldr	r3, [r7, #16]
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3718      	adds	r7, #24
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
	...

0800dfe4 <Rte_Write_TimH_TimHPort_Tim3Ccr2>:
{
	TIM3->CCR1 = data;
}
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr2(uint8 data)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b083      	sub	sp, #12
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	4603      	mov	r3, r0
 800dfec:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR2 = data;
 800dfee:	4a04      	ldr	r2, [pc, #16]	; (800e000 <Rte_Write_TimH_TimHPort_Tim3Ccr2+0x1c>)
 800dff0:	79fb      	ldrb	r3, [r7, #7]
 800dff2:	6393      	str	r3, [r2, #56]	; 0x38
}
 800dff4:	bf00      	nop
 800dff6:	370c      	adds	r7, #12
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr
 800e000:	40000400 	.word	0x40000400

0800e004 <Rte_Write_TimH_TimHPort_Tim3Ccr3>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr3(uint8 data)
{
 800e004:	b480      	push	{r7}
 800e006:	b083      	sub	sp, #12
 800e008:	af00      	add	r7, sp, #0
 800e00a:	4603      	mov	r3, r0
 800e00c:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR3 = data;
 800e00e:	4a04      	ldr	r2, [pc, #16]	; (800e020 <Rte_Write_TimH_TimHPort_Tim3Ccr3+0x1c>)
 800e010:	79fb      	ldrb	r3, [r7, #7]
 800e012:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800e014:	bf00      	nop
 800e016:	370c      	adds	r7, #12
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr
 800e020:	40000400 	.word	0x40000400

0800e024 <Rte_Write_TimH_TimHPort_Tim3Ccr4>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr4(uint8 data)
{
 800e024:	b480      	push	{r7}
 800e026:	b083      	sub	sp, #12
 800e028:	af00      	add	r7, sp, #0
 800e02a:	4603      	mov	r3, r0
 800e02c:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR4 = data;
 800e02e:	4a04      	ldr	r2, [pc, #16]	; (800e040 <Rte_Write_TimH_TimHPort_Tim3Ccr4+0x1c>)
 800e030:	79fb      	ldrb	r3, [r7, #7]
 800e032:	6413      	str	r3, [r2, #64]	; 0x40
}
 800e034:	bf00      	nop
 800e036:	370c      	adds	r7, #12
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr
 800e040:	40000400 	.word	0x40000400

0800e044 <Rte_Write_TimH_TimHPort_Tim2Ccr1>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim2Ccr1(uint16 data)
{
 800e044:	b480      	push	{r7}
 800e046:	b083      	sub	sp, #12
 800e048:	af00      	add	r7, sp, #0
 800e04a:	4603      	mov	r3, r0
 800e04c:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = data;
 800e04e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e052:	88fb      	ldrh	r3, [r7, #6]
 800e054:	6353      	str	r3, [r2, #52]	; 0x34
}
 800e056:	bf00      	nop
 800e058:	370c      	adds	r7, #12
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr

0800e062 <Rte_Write_TimH_TimHPort_Tim2Ccr2>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim2Ccr2(uint16 data)
{
 800e062:	b480      	push	{r7}
 800e064:	b083      	sub	sp, #12
 800e066:	af00      	add	r7, sp, #0
 800e068:	4603      	mov	r3, r0
 800e06a:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR2 = data;
 800e06c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e070:	88fb      	ldrh	r3, [r7, #6]
 800e072:	6393      	str	r3, [r2, #56]	; 0x38
}
 800e074:	bf00      	nop
 800e076:	370c      	adds	r7, #12
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr

0800e080 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>:
{
	TIM2->CCR3 = data;
}
/* Run time environment interface. */
VOID Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(uint8* data, uint8 position)
{
 800e080:	b480      	push	{r7}
 800e082:	b083      	sub	sp, #12
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	460b      	mov	r3, r1
 800e08a:	70fb      	strb	r3, [r7, #3]
	*data = SystemManager_Fault[position];
 800e08c:	78fb      	ldrb	r3, [r7, #3]
 800e08e:	4a05      	ldr	r2, [pc, #20]	; (800e0a4 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault+0x24>)
 800e090:	5cd2      	ldrb	r2, [r2, r3]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	701a      	strb	r2, [r3, #0]
}
 800e096:	bf00      	nop
 800e098:	370c      	adds	r7, #12
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr
 800e0a2:	bf00      	nop
 800e0a4:	20005ff4 	.word	0x20005ff4

0800e0a8 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>:
{
	*data = SecAlm_SensorState;
}
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(uint32* data)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b083      	sub	sp, #12
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
	SecAlm_SensorState = *data;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	b2da      	uxtb	r2, r3
 800e0b6:	4b04      	ldr	r3, [pc, #16]	; (800e0c8 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState+0x20>)
 800e0b8:	701a      	strb	r2, [r3, #0]
}
 800e0ba:	bf00      	nop
 800e0bc:	370c      	adds	r7, #12
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c4:	4770      	bx	lr
 800e0c6:	bf00      	nop
 800e0c8:	2000011c 	.word	0x2000011c

0800e0cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>:
{
	*data = ExtLights_LightSensorState;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(uint32* data)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b083      	sub	sp, #12
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
	ExtLights_LightSensorState = *data;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4a03      	ldr	r2, [pc, #12]	; (800e0e8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState+0x1c>)
 800e0da:	6013      	str	r3, [r2, #0]
}
 800e0dc:	bf00      	nop
 800e0de:	370c      	adds	r7, #12
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr
 800e0e8:	20000100 	.word	0x20000100

0800e0ec <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues>:
	Adc_ChannelOne_Buffer[0] = SenCtrl_MeasuredValues[0];
	Adc_ChannelOne_Buffer[1] = SenCtrl_MeasuredValues[1];
}
/* Run time environment interface. */
VOID Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues(uint32* data)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b083      	sub	sp, #12
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
	 SenCtrl_MeasuredValues[0] = Adc_ChannelOne_Buffer[0];
 800e0f4:	4b06      	ldr	r3, [pc, #24]	; (800e110 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x24>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	4a06      	ldr	r2, [pc, #24]	; (800e114 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x28>)
 800e0fa:	6013      	str	r3, [r2, #0]
	 SenCtrl_MeasuredValues[1] = Adc_ChannelOne_Buffer[1];
 800e0fc:	4b04      	ldr	r3, [pc, #16]	; (800e110 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x24>)
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	4a04      	ldr	r2, [pc, #16]	; (800e114 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x28>)
 800e102:	6053      	str	r3, [r2, #4]
}
 800e104:	bf00      	nop
 800e106:	370c      	adds	r7, #12
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr
 800e110:	200006a4 	.word	0x200006a4
 800e114:	20000120 	.word	0x20000120

0800e118 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>:
{
	*data = CenLoc_FollowMeHomeCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter(uint8* data)
{
 800e118:	b480      	push	{r7}
 800e11a:	b083      	sub	sp, #12
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
	CenLoc_FollowMeHomeCounter = *data;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	781a      	ldrb	r2, [r3, #0]
 800e124:	4b03      	ldr	r3, [pc, #12]	; (800e134 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter+0x1c>)
 800e126:	701a      	strb	r2, [r3, #0]
}
 800e128:	bf00      	nop
 800e12a:	370c      	adds	r7, #12
 800e12c:	46bd      	mov	sp, r7
 800e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e132:	4770      	bx	lr
 800e134:	200000d4 	.word	0x200000d4

0800e138 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter>:
{
	*data = CenLoc_TurnOnLedCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter(uint8* data)
{
 800e138:	b480      	push	{r7}
 800e13a:	b083      	sub	sp, #12
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
	CenLoc_TurnOnLedCounter = *data;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	781a      	ldrb	r2, [r3, #0]
 800e144:	4b03      	ldr	r3, [pc, #12]	; (800e154 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter+0x1c>)
 800e146:	701a      	strb	r2, [r3, #0]
}
 800e148:	bf00      	nop
 800e14a:	370c      	adds	r7, #12
 800e14c:	46bd      	mov	sp, r7
 800e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e152:	4770      	bx	lr
 800e154:	200000d5 	.word	0x200000d5

0800e158 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter>:
{
	*data = CenLoc_CyclicAlarmCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter(uint8* data)
{
 800e158:	b480      	push	{r7}
 800e15a:	b083      	sub	sp, #12
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
	CenLoc_CyclicAlarmCounter = *data;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	781a      	ldrb	r2, [r3, #0]
 800e164:	4b03      	ldr	r3, [pc, #12]	; (800e174 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter+0x1c>)
 800e166:	701a      	strb	r2, [r3, #0]
}
 800e168:	bf00      	nop
 800e16a:	370c      	adds	r7, #12
 800e16c:	46bd      	mov	sp, r7
 800e16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e172:	4770      	bx	lr
 800e174:	200000d3 	.word	0x200000d3

0800e178 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>:
{
	*data = CenLoc_BlinkCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(uint8* data)
{
 800e178:	b480      	push	{r7}
 800e17a:	b083      	sub	sp, #12
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
	CenLoc_BlinkCounter = *data;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	781a      	ldrb	r2, [r3, #0]
 800e184:	4b03      	ldr	r3, [pc, #12]	; (800e194 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter+0x1c>)
 800e186:	701a      	strb	r2, [r3, #0]
}
 800e188:	bf00      	nop
 800e18a:	370c      	adds	r7, #12
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr
 800e194:	200000d2 	.word	0x200000d2

0800e198 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>:
{
	*data = Os_Alarm_Counter;
}
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(uint8* data)
{
 800e198:	b480      	push	{r7}
 800e19a:	b083      	sub	sp, #12
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
	Os_LockUnlockSequence_Counter = *data;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	781a      	ldrb	r2, [r3, #0]
 800e1a4:	4b03      	ldr	r3, [pc, #12]	; (800e1b4 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter+0x1c>)
 800e1a6:	701a      	strb	r2, [r3, #0]
}
 800e1a8:	bf00      	nop
 800e1aa:	370c      	adds	r7, #12
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b2:	4770      	bx	lr
 800e1b4:	20000200 	.word	0x20000200

0800e1b8 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(uint8* data)
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b083      	sub	sp, #12
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
	Os_TurnOnCyclic_Counter = *data;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	781a      	ldrb	r2, [r3, #0]
 800e1c4:	4b03      	ldr	r3, [pc, #12]	; (800e1d4 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter+0x1c>)
 800e1c6:	701a      	strb	r2, [r3, #0]
}
 800e1c8:	bf00      	nop
 800e1ca:	370c      	adds	r7, #12
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr
 800e1d4:	20000201 	.word	0x20000201

0800e1d8 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(uint8* data)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b083      	sub	sp, #12
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
	Os_TurnOnLed_Counter = *data;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	781a      	ldrb	r2, [r3, #0]
 800e1e4:	4b03      	ldr	r3, [pc, #12]	; (800e1f4 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter+0x1c>)
 800e1e6:	701a      	strb	r2, [r3, #0]
}
 800e1e8:	bf00      	nop
 800e1ea:	370c      	adds	r7, #12
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f2:	4770      	bx	lr
 800e1f4:	20000202 	.word	0x20000202

0800e1f8 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(uint8* data)
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b083      	sub	sp, #12
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
	Os_FollowMeHome_Counter = *data;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	781a      	ldrb	r2, [r3, #0]
 800e204:	4b03      	ldr	r3, [pc, #12]	; (800e214 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter+0x1c>)
 800e206:	701a      	strb	r2, [r3, #0]
}
 800e208:	bf00      	nop
 800e20a:	370c      	adds	r7, #12
 800e20c:	46bd      	mov	sp, r7
 800e20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e212:	4770      	bx	lr
 800e214:	20000203 	.word	0x20000203

0800e218 <Rte_Write_Os_R_OsPort_Os_Lts_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Lts_Counter(uint32* data)
{
 800e218:	b480      	push	{r7}
 800e21a:	b083      	sub	sp, #12
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
	Os_Lts_Counter = *data;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4a03      	ldr	r2, [pc, #12]	; (800e234 <Rte_Write_Os_R_OsPort_Os_Lts_Counter+0x1c>)
 800e226:	6013      	str	r3, [r2, #0]
}
 800e228:	bf00      	nop
 800e22a:	370c      	adds	r7, #12
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr
 800e234:	20000204 	.word	0x20000204

0800e238 <Rte_Write_Os_R_OsPort_Os_Rts_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Rts_Counter(uint32* data)
{
 800e238:	b480      	push	{r7}
 800e23a:	b083      	sub	sp, #12
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
	Os_Rts_Counter = *data;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4a03      	ldr	r2, [pc, #12]	; (800e254 <Rte_Write_Os_R_OsPort_Os_Rts_Counter+0x1c>)
 800e246:	6013      	str	r3, [r2, #0]
}
 800e248:	bf00      	nop
 800e24a:	370c      	adds	r7, #12
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr
 800e254:	20000208 	.word	0x20000208

0800e258 <Rte_Write_Os_R_OsPort_Os_HL_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_HL_Counter(uint32* data)
{
 800e258:	b480      	push	{r7}
 800e25a:	b083      	sub	sp, #12
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
	Os_HL_Counter = *data;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	4a03      	ldr	r2, [pc, #12]	; (800e274 <Rte_Write_Os_R_OsPort_Os_HL_Counter+0x1c>)
 800e266:	6013      	str	r3, [r2, #0]
}
 800e268:	bf00      	nop
 800e26a:	370c      	adds	r7, #12
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr
 800e274:	2000020c 	.word	0x2000020c

0800e278 <Rte_Runnable_EcuM_MainFunction>:
{
	Os_Alarm_Counter = *data;
}
/* Run time environment interface. */
VOID Rte_Runnable_EcuM_MainFunction()
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	af00      	add	r7, sp, #0
	EcuM_MainFunction();
 800e27c:	f000 fe5a 	bl	800ef34 <EcuM_MainFunction>
}
 800e280:	bf00      	nop
 800e282:	bd80      	pop	{r7, pc}

0800e284 <Rte_Runnable_SystemManager_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_SystemManager_MainFunction()
{
 800e284:	b580      	push	{r7, lr}
 800e286:	af00      	add	r7, sp, #0
	SystemManager_MainFunction();
 800e288:	f000 ff2c 	bl	800f0e4 <SystemManager_MainFunction>
}
 800e28c:	bf00      	nop
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <Rte_Runnable_Crc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Crc_MainFunction()
{
 800e290:	b580      	push	{r7, lr}
 800e292:	af00      	add	r7, sp, #0
	Crc_MainFunction();
 800e294:	f000 fd10 	bl	800ecb8 <Crc_MainFunction>
}
 800e298:	bf00      	nop
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <Rte_Runnable_Wdg_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Wdg_MainFunction()
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	af00      	add	r7, sp, #0
	Watchdog_MainFunction();
 800e2a0:	f001 f814 	bl	800f2cc <Watchdog_MainFunction>
}
 800e2a4:	bf00      	nop
 800e2a6:	bd80      	pop	{r7, pc}

0800e2a8 <Rte_Runnable_Adc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Adc_MainFunction()
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	af00      	add	r7, sp, #0
	Adc_MainFunction();
 800e2ac:	f7fb f8c6 	bl	800943c <Adc_MainFunction>
}
 800e2b0:	bf00      	nop
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <Rte_Runnable_Tim_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Tim_MainFunction()
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	af00      	add	r7, sp, #0
	Tim_MainFunction();
 800e2b8:	f7fb fdc2 	bl	8009e40 <Tim_MainFunction>
}
 800e2bc:	bf00      	nop
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <Rte_Runnable_Uart_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Uart_MainFunction()
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	af00      	add	r7, sp, #0
	Uart_MainFunction();
 800e2c4:	f7f4 f960 	bl	8002588 <Uart_MainFunction>
}
 800e2c8:	bf00      	nop
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>:
/* Run time environment interface. */
VOID Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32 Channel)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b082      	sub	sp, #8
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start_IT(htim, Channel);
 800e2d6:	6839      	ldr	r1, [r7, #0]
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f7f8 fbd5 	bl	8006a88 <HAL_TIM_PWM_Start_IT>
}
 800e2de:	bf00      	nop
 800e2e0:	3708      	adds	r7, #8
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}

0800e2e6 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>:
/* Run time environment interface. */
VOID Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32 Channel)
{
 800e2e6:	b580      	push	{r7, lr}
 800e2e8:	b082      	sub	sp, #8
 800e2ea:	af00      	add	r7, sp, #0
 800e2ec:	6078      	str	r0, [r7, #4]
 800e2ee:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Stop_IT(htim, Channel);
 800e2f0:	6839      	ldr	r1, [r7, #0]
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f7f8 fcc6 	bl	8006c84 <HAL_TIM_PWM_Stop_IT>
}
 800e2f8:	bf00      	nop
 800e2fa:	3708      	adds	r7, #8
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}

0800e300 <Rte_Write_Btc_BtcPort_Btc_RxData>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_RxData(uint8 data)
{
 800e300:	b480      	push	{r7}
 800e302:	b083      	sub	sp, #12
 800e304:	af00      	add	r7, sp, #0
 800e306:	4603      	mov	r3, r0
 800e308:	71fb      	strb	r3, [r7, #7]
	Btc_RxData = data;
 800e30a:	4a04      	ldr	r2, [pc, #16]	; (800e31c <Rte_Write_Btc_BtcPort_Btc_RxData+0x1c>)
 800e30c:	79fb      	ldrb	r3, [r7, #7]
 800e30e:	7013      	strb	r3, [r2, #0]
}
 800e310:	bf00      	nop
 800e312:	370c      	adds	r7, #12
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr
 800e31c:	200000b0 	.word	0x200000b0

0800e320 <Rte_Write_Btc_BtcPort_Btc_RxCount>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_RxCount(uint8 data)
{
 800e320:	b480      	push	{r7}
 800e322:	b083      	sub	sp, #12
 800e324:	af00      	add	r7, sp, #0
 800e326:	4603      	mov	r3, r0
 800e328:	71fb      	strb	r3, [r7, #7]
	Btc_RxCount = data;
 800e32a:	4a04      	ldr	r2, [pc, #16]	; (800e33c <Rte_Write_Btc_BtcPort_Btc_RxCount+0x1c>)
 800e32c:	79fb      	ldrb	r3, [r7, #7]
 800e32e:	7013      	strb	r3, [r2, #0]
}
 800e330:	bf00      	nop
 800e332:	370c      	adds	r7, #12
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr
 800e33c:	200000b1 	.word	0x200000b1

0800e340 <Rte_Write_Btc_BtcPort_Btc_DataBuffer>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_DataBuffer(uint8 data, uint8 position)
{
 800e340:	b480      	push	{r7}
 800e342:	b083      	sub	sp, #12
 800e344:	af00      	add	r7, sp, #0
 800e346:	4603      	mov	r3, r0
 800e348:	460a      	mov	r2, r1
 800e34a:	71fb      	strb	r3, [r7, #7]
 800e34c:	4613      	mov	r3, r2
 800e34e:	71bb      	strb	r3, [r7, #6]
	Btc_DataBuffer[position] = data;
 800e350:	79bb      	ldrb	r3, [r7, #6]
 800e352:	4904      	ldr	r1, [pc, #16]	; (800e364 <Rte_Write_Btc_BtcPort_Btc_DataBuffer+0x24>)
 800e354:	79fa      	ldrb	r2, [r7, #7]
 800e356:	54ca      	strb	r2, [r1, r3]
}
 800e358:	bf00      	nop
 800e35a:	370c      	adds	r7, #12
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr
 800e364:	200000ac 	.word	0x200000ac

0800e368 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>:
/* Run time environment interface. */
VOID Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(uint32* data, uint8 position)
{
 800e368:	b480      	push	{r7}
 800e36a:	b083      	sub	sp, #12
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	460b      	mov	r3, r1
 800e372:	70fb      	strb	r3, [r7, #3]
	*data = Adc_ChannelOne_Buffer[position];
 800e374:	78fb      	ldrb	r3, [r7, #3]
 800e376:	4a05      	ldr	r2, [pc, #20]	; (800e38c <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer+0x24>)
 800e378:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	601a      	str	r2, [r3, #0]
}
 800e380:	bf00      	nop
 800e382:	370c      	adds	r7, #12
 800e384:	46bd      	mov	sp, r7
 800e386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38a:	4770      	bx	lr
 800e38c:	200006a4 	.word	0x200006a4

0800e390 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8 data)
{
 800e390:	b480      	push	{r7}
 800e392:	b083      	sub	sp, #12
 800e394:	af00      	add	r7, sp, #0
 800e396:	4603      	mov	r3, r0
 800e398:	71fb      	strb	r3, [r7, #7]
	Btc_ReceivedDataOnBluetooth = data;
 800e39a:	4a04      	ldr	r2, [pc, #16]	; (800e3ac <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>)
 800e39c:	79fb      	ldrb	r3, [r7, #7]
 800e39e:	7013      	strb	r3, [r2, #0]
}
 800e3a0:	bf00      	nop
 800e3a2:	370c      	adds	r7, #12
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr
 800e3ac:	200000b2 	.word	0x200000b2

0800e3b0 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(uint8* data)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b083      	sub	sp, #12
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
	CenLoc_CurrentState = *data;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	781a      	ldrb	r2, [r3, #0]
 800e3bc:	4b03      	ldr	r3, [pc, #12]	; (800e3cc <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState+0x1c>)
 800e3be:	701a      	strb	r2, [r3, #0]
}
 800e3c0:	bf00      	nop
 800e3c2:	370c      	adds	r7, #12
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ca:	4770      	bx	lr
 800e3cc:	200000ce 	.word	0x200000ce

0800e3d0 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>:
{
	CenLoc_PreviousState = *data;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(uint8* data)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b083      	sub	sp, #12
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
	CenLoc_FollowMeHomeState = *data;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	781a      	ldrb	r2, [r3, #0]
 800e3dc:	4b03      	ldr	r3, [pc, #12]	; (800e3ec <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState+0x1c>)
 800e3de:	701a      	strb	r2, [r3, #0]
}
 800e3e0:	bf00      	nop
 800e3e2:	370c      	adds	r7, #12
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ea:	4770      	bx	lr
 800e3ec:	200000d0 	.word	0x200000d0

0800e3f0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>:
{
	CenLoc_PreviousStateFlag = *data;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(uint8* data)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b083      	sub	sp, #12
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
	ExtLights_ReverseLight_CurrentState = *data;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	781a      	ldrb	r2, [r3, #0]
 800e3fc:	4b03      	ldr	r3, [pc, #12]	; (800e40c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState+0x1c>)
 800e3fe:	701a      	strb	r2, [r3, #0]
}
 800e400:	bf00      	nop
 800e402:	370c      	adds	r7, #12
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr
 800e40c:	200000e4 	.word	0x200000e4

0800e410 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(uint8* data)
{
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
	ExtLights_BrakeLight_CurrentState = *data;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	781a      	ldrb	r2, [r3, #0]
 800e41c:	4b03      	ldr	r3, [pc, #12]	; (800e42c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState+0x1c>)
 800e41e:	701a      	strb	r2, [r3, #0]
}
 800e420:	bf00      	nop
 800e422:	370c      	adds	r7, #12
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr
 800e42c:	200000e6 	.word	0x200000e6

0800e430 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(uint8* data)
{
 800e430:	b480      	push	{r7}
 800e432:	b083      	sub	sp, #12
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
	ExtLights_LightsSwitch_CurrentState = *data;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	781a      	ldrb	r2, [r3, #0]
 800e43c:	4b03      	ldr	r3, [pc, #12]	; (800e44c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState+0x1c>)
 800e43e:	701a      	strb	r2, [r3, #0]
}
 800e440:	bf00      	nop
 800e442:	370c      	adds	r7, #12
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr
 800e44c:	200000e7 	.word	0x200000e7

0800e450 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(uint8* data)
{
 800e450:	b480      	push	{r7}
 800e452:	b083      	sub	sp, #12
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
	ExtLights_HighBeam_CurrentState = *data;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	781a      	ldrb	r2, [r3, #0]
 800e45c:	4b03      	ldr	r3, [pc, #12]	; (800e46c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState+0x1c>)
 800e45e:	701a      	strb	r2, [r3, #0]
}
 800e460:	bf00      	nop
 800e462:	370c      	adds	r7, #12
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr
 800e46c:	200000e8 	.word	0x200000e8

0800e470 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(uint8* data)
{
 800e470:	b480      	push	{r7}
 800e472:	b083      	sub	sp, #12
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
	ExtLights_FrontFogLight_CurrentState = *data;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	781a      	ldrb	r2, [r3, #0]
 800e47c:	4b03      	ldr	r3, [pc, #12]	; (800e48c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState+0x1c>)
 800e47e:	701a      	strb	r2, [r3, #0]
}
 800e480:	bf00      	nop
 800e482:	370c      	adds	r7, #12
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr
 800e48c:	200000e9 	.word	0x200000e9

0800e490 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(uint8* data)
{
 800e490:	b480      	push	{r7}
 800e492:	b083      	sub	sp, #12
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
	ExtLights_TurnSignalLeft_CurrentState = *data;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	781a      	ldrb	r2, [r3, #0]
 800e49c:	4b03      	ldr	r3, [pc, #12]	; (800e4ac <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState+0x1c>)
 800e49e:	701a      	strb	r2, [r3, #0]
}
 800e4a0:	bf00      	nop
 800e4a2:	370c      	adds	r7, #12
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr
 800e4ac:	200000ea 	.word	0x200000ea

0800e4b0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(uint8* data)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b083      	sub	sp, #12
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
	ExtLights_TurnSignalRight_CurrentState = *data;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	781a      	ldrb	r2, [r3, #0]
 800e4bc:	4b03      	ldr	r3, [pc, #12]	; (800e4cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState+0x1c>)
 800e4be:	701a      	strb	r2, [r3, #0]
}
 800e4c0:	bf00      	nop
 800e4c2:	370c      	adds	r7, #12
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr
 800e4cc:	200000eb 	.word	0x200000eb

0800e4d0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(uint8* data)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b083      	sub	sp, #12
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
	ExtLights_HazardLight_CurrentState = *data;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	781a      	ldrb	r2, [r3, #0]
 800e4dc:	4b03      	ldr	r3, [pc, #12]	; (800e4ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState+0x1c>)
 800e4de:	701a      	strb	r2, [r3, #0]
}
 800e4e0:	bf00      	nop
 800e4e2:	370c      	adds	r7, #12
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ea:	4770      	bx	lr
 800e4ec:	200000ee 	.word	0x200000ee

0800e4f0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(uint8* data)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b083      	sub	sp, #12
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
	ExtLights_RearFogLight_CurrentState = *data;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	781a      	ldrb	r2, [r3, #0]
 800e4fc:	4b03      	ldr	r3, [pc, #12]	; (800e50c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState+0x1c>)
 800e4fe:	701a      	strb	r2, [r3, #0]
}
 800e500:	bf00      	nop
 800e502:	370c      	adds	r7, #12
 800e504:	46bd      	mov	sp, r7
 800e506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50a:	4770      	bx	lr
 800e50c:	200000ef 	.word	0x200000ef

0800e510 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>:
{
	ExtLights_HL_PrevState = *data;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(uint32* data)
{
 800e510:	b480      	push	{r7}
 800e512:	b083      	sub	sp, #12
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
	ExtLights_RTSFlag = *data;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	4a03      	ldr	r2, [pc, #12]	; (800e52c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag+0x1c>)
 800e51e:	6013      	str	r3, [r2, #0]
}
 800e520:	bf00      	nop
 800e522:	370c      	adds	r7, #12
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr
 800e52c:	200000f4 	.word	0x200000f4

0800e530 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(uint32* data)
{
 800e530:	b480      	push	{r7}
 800e532:	b083      	sub	sp, #12
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
	ExtLights_LTSFlag = *data;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	4a03      	ldr	r2, [pc, #12]	; (800e54c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag+0x1c>)
 800e53e:	6013      	str	r3, [r2, #0]
}
 800e540:	bf00      	nop
 800e542:	370c      	adds	r7, #12
 800e544:	46bd      	mov	sp, r7
 800e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54a:	4770      	bx	lr
 800e54c:	200000f8 	.word	0x200000f8

0800e550 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(uint32* data)
{
 800e550:	b480      	push	{r7}
 800e552:	b083      	sub	sp, #12
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
	ExtLights_HLFlag = *data;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	4a03      	ldr	r2, [pc, #12]	; (800e56c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag+0x1c>)
 800e55e:	6013      	str	r3, [r2, #0]
}
 800e560:	bf00      	nop
 800e562:	370c      	adds	r7, #12
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr
 800e56c:	200000fc 	.word	0x200000fc

0800e570 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(uint8* data)
{
 800e570:	b480      	push	{r7}
 800e572:	b083      	sub	sp, #12
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
	IntLights_CurrentState = *data;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	781a      	ldrb	r2, [r3, #0]
 800e57c:	4b03      	ldr	r3, [pc, #12]	; (800e58c <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState+0x1c>)
 800e57e:	701a      	strb	r2, [r3, #0]
}
 800e580:	bf00      	nop
 800e582:	370c      	adds	r7, #12
 800e584:	46bd      	mov	sp, r7
 800e586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58a:	4770      	bx	lr
 800e58c:	20000108 	.word	0x20000108

0800e590 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>:
{
	SecAlm_PinStateChange = *data;
}
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(uint8* data)
{
 800e590:	b480      	push	{r7}
 800e592:	b083      	sub	sp, #12
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
	SecAlm_TriggerIRQCounterForTimer4 = *data;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	781a      	ldrb	r2, [r3, #0]
 800e59c:	4b03      	ldr	r3, [pc, #12]	; (800e5ac <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4+0x1c>)
 800e59e:	701a      	strb	r2, [r3, #0]
}
 800e5a0:	bf00      	nop
 800e5a2:	370c      	adds	r7, #12
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr
 800e5ac:	20000116 	.word	0x20000116

0800e5b0 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>:
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter(uint16* data)
{
 800e5b0:	b480      	push	{r7}
 800e5b2:	b083      	sub	sp, #12
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
	SecAlm_SensorStatusCounter = *data;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	881a      	ldrh	r2, [r3, #0]
 800e5bc:	4b03      	ldr	r3, [pc, #12]	; (800e5cc <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter+0x1c>)
 800e5be:	801a      	strh	r2, [r3, #0]
}
 800e5c0:	bf00      	nop
 800e5c2:	370c      	adds	r7, #12
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr
 800e5cc:	20000118 	.word	0x20000118

0800e5d0 <Rte_Runnable_Btc_MainFunction>:
{
	SecAlm_SensorStatus = *data;
}
/* Run time environment interface. */
VOID Rte_Runnable_Btc_MainFunction()
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	af00      	add	r7, sp, #0
	Btc_MainFunction();
 800e5d4:	f7f2 fe2e 	bl	8001234 <Btc_MainFunction>
}
 800e5d8:	bf00      	nop
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <Rte_Runnable_CenLoc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_CenLoc_MainFunction()
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	af00      	add	r7, sp, #0
	CenLoc_MainFunction();
 800e5e0:	f7f3 f864 	bl	80016ac <CenLoc_MainFunction>
}
 800e5e4:	bf00      	nop
 800e5e6:	bd80      	pop	{r7, pc}

0800e5e8 <Rte_Runnable_ExtLights_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_ExtLights_MainFunction()
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	af00      	add	r7, sp, #0
	ExtLights_MainFunction();
 800e5ec:	f7f3 fb36 	bl	8001c5c <ExtLights_MainFunction>
}
 800e5f0:	bf00      	nop
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <Rte_Runnable_IntLights_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_IntLights_MainFunction()
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	af00      	add	r7, sp, #0
	IntLights_MainFunction();
 800e5f8:	f7f3 fc78 	bl	8001eec <IntLights_MainFunction>
}
 800e5fc:	bf00      	nop
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <Rte_Runnable_SecAlm_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_SecAlm_MainFunction()
{
 800e600:	b580      	push	{r7, lr}
 800e602:	af00      	add	r7, sp, #0
	SecAlm_MainFunction();
 800e604:	f7f3 feee 	bl	80023e4 <SecAlm_MainFunction>
}
 800e608:	bf00      	nop
 800e60a:	bd80      	pop	{r7, pc}

0800e60c <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:
/* Run time environment interface. */
VOID Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 800e60c:	b480      	push	{r7}
 800e60e:	b083      	sub	sp, #12
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
	*data = Btc_ReceivedDataOnBluetooth;
 800e614:	4b04      	ldr	r3, [pc, #16]	; (800e628 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>)
 800e616:	781a      	ldrb	r2, [r3, #0]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	701a      	strb	r2, [r3, #0]
}
 800e61c:	bf00      	nop
 800e61e:	370c      	adds	r7, #12
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr
 800e628:	200000b2 	.word	0x200000b2

0800e62c <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>:
{
	HAL_TIM_Base_Stop_IT(htim);
}
/* Run time environment interface. */
VOID Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	460b      	mov	r3, r1
 800e636:	807b      	strh	r3, [r7, #2]
 800e638:	4613      	mov	r3, r2
 800e63a:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 800e63c:	787a      	ldrb	r2, [r7, #1]
 800e63e:	887b      	ldrh	r3, [r7, #2]
 800e640:	4619      	mov	r1, r3
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f7f7 fb92 	bl	8005d6c <HAL_GPIO_WritePin>
}
 800e648:	bf00      	nop
 800e64a:	3708      	adds	r7, #8
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}

0800e650 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>:
{
	HAL_GetTick();
}
/* Run time environment interface. */
VOID Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(osTimerId_t timer_id, uint32_t ticks)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b082      	sub	sp, #8
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	6039      	str	r1, [r7, #0]
	osTimerStart(timer_id, ticks);
 800e65a:	6839      	ldr	r1, [r7, #0]
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f7fb fedd 	bl	800a41c <osTimerStart>
}
 800e662:	bf00      	nop
 800e664:	3708      	adds	r7, #8
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}

0800e66a <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>:
/* Run time environment interface. */
VOID Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(osTimerId_t timer_id)
{
 800e66a:	b580      	push	{r7, lr}
 800e66c:	b082      	sub	sp, #8
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
	osTimerStop(timer_id);
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f7fb ff00 	bl	800a478 <osTimerStop>
}
 800e678:	bf00      	nop
 800e67a:	3708      	adds	r7, #8
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}

0800e680 <Rte_Runnable_DiagCtrl_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_DiagCtrl_MainFunction()
{
 800e680:	b580      	push	{r7, lr}
 800e682:	af00      	add	r7, sp, #0
	DiagCtrl_MainFunction();
 800e684:	f7f3 f81a 	bl	80016bc <DiagCtrl_MainFunction>
}
 800e688:	bf00      	nop
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <Rte_Runnable_Pdc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Pdc_MainFunction()
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	af00      	add	r7, sp, #0
	Pdc_MainFunction();
 800e690:	f7f3 fc32 	bl	8001ef8 <Pdc_MainFunction>
}
 800e694:	bf00      	nop
 800e696:	bd80      	pop	{r7, pc}

0800e698 <Rte_Runnable_Dem_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Dem_MainFunction()
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	af00      	add	r7, sp, #0
	Dem_MainFunction();
 800e69c:	f7f5 fa21 	bl	8003ae2 <Dem_MainFunction>
}
 800e6a0:	bf00      	nop
 800e6a2:	bd80      	pop	{r7, pc}

0800e6a4 <Crc_VerifyUartData>:
/***********************************************************************************
* Function: Crc_VerifyUartData													   *
* Description: Verifies the UART data received.							 		   *
************************************************************************************/
StdReturnType Crc_VerifyUartData()
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
	/* Local variable to store return value. */
	uint8 returnValue = E_OK;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	73fb      	strb	r3, [r7, #15]
	/* Local variable to store received value. */
	uint8 receivedValue = STD_LOW;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	71fb      	strb	r3, [r7, #7]
	/* Local value to calculate CRC. */
	uint32 calculatedCrc = STD_LOW;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	60bb      	str	r3, [r7, #8]
	/* Read the received data from UART. */
	Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&receivedValue);
 800e6b6:	1dfb      	adds	r3, r7, #7
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7ff ffa7 	bl	800e60c <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
	Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 800e6be:	4ba6      	ldr	r3, [pc, #664]	; (800e958 <Crc_VerifyUartData+0x2b4>)
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	701a      	strb	r2, [r3, #0]
	/* Calculate the CRC. */
	calculatedCrc = HAL_CRC_Calculate(&hcrc, (uint32*)&receivedValue, 1);
 800e6c4:	1dfb      	adds	r3, r7, #7
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	48a4      	ldr	r0, [pc, #656]	; (800e95c <Crc_VerifyUartData+0x2b8>)
 800e6cc:	f7f6 fa9d 	bl	8004c0a <HAL_CRC_Calculate>
 800e6d0:	60b8      	str	r0, [r7, #8]
	/* Check the value if it has correct CRC. */
	switch(receivedValue)
 800e6d2:	79fb      	ldrb	r3, [r7, #7]
 800e6d4:	3b01      	subs	r3, #1
 800e6d6:	2b19      	cmp	r3, #25
 800e6d8:	f200 8175 	bhi.w	800e9c6 <Crc_VerifyUartData+0x322>
 800e6dc:	a201      	add	r2, pc, #4	; (adr r2, 800e6e4 <Crc_VerifyUartData+0x40>)
 800e6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6e2:	bf00      	nop
 800e6e4:	0800e7d1 	.word	0x0800e7d1
 800e6e8:	0800e7e7 	.word	0x0800e7e7
 800e6ec:	0800e7fd 	.word	0x0800e7fd
 800e6f0:	0800e813 	.word	0x0800e813
 800e6f4:	0800e9c7 	.word	0x0800e9c7
 800e6f8:	0800e9c7 	.word	0x0800e9c7
 800e6fc:	0800e829 	.word	0x0800e829
 800e700:	0800e83f 	.word	0x0800e83f
 800e704:	0800e855 	.word	0x0800e855
 800e708:	0800e86b 	.word	0x0800e86b
 800e70c:	0800e881 	.word	0x0800e881
 800e710:	0800e897 	.word	0x0800e897
 800e714:	0800e8ad 	.word	0x0800e8ad
 800e718:	0800e8c3 	.word	0x0800e8c3
 800e71c:	0800e8d9 	.word	0x0800e8d9
 800e720:	0800e8ef 	.word	0x0800e8ef
 800e724:	0800e905 	.word	0x0800e905
 800e728:	0800e91b 	.word	0x0800e91b
 800e72c:	0800e931 	.word	0x0800e931
 800e730:	0800e947 	.word	0x0800e947
 800e734:	0800e74d 	.word	0x0800e74d
 800e738:	0800e763 	.word	0x0800e763
 800e73c:	0800e779 	.word	0x0800e779
 800e740:	0800e78f 	.word	0x0800e78f
 800e744:	0800e7a5 	.word	0x0800e7a5
 800e748:	0800e7bb 	.word	0x0800e7bb
	{
		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_ReverseLight_On)
 800e74c:	4b84      	ldr	r3, [pc, #528]	; (800e960 <Crc_VerifyUartData+0x2bc>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	68ba      	ldr	r2, [r7, #8]
 800e752:	429a      	cmp	r2, r3
 800e754:	d102      	bne.n	800e75c <Crc_VerifyUartData+0xb8>
			{
				returnValue = E_OK;
 800e756:	2300      	movs	r3, #0
 800e758:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e75a:	e135      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e75c:	2301      	movs	r3, #1
 800e75e:	73fb      	strb	r3, [r7, #15]
			break;
 800e760:	e132      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_ReverseLight_Off)
 800e762:	4b80      	ldr	r3, [pc, #512]	; (800e964 <Crc_VerifyUartData+0x2c0>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	68ba      	ldr	r2, [r7, #8]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d102      	bne.n	800e772 <Crc_VerifyUartData+0xce>
			{
				returnValue = E_OK;
 800e76c:	2300      	movs	r3, #0
 800e76e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e770:	e12a      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e772:	2301      	movs	r3, #1
 800e774:	73fb      	strb	r3, [r7, #15]
			break;
 800e776:	e127      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO:
			if(calculatedCrc == Crc_ExtLights_PositionZero)
 800e778:	4b7b      	ldr	r3, [pc, #492]	; (800e968 <Crc_VerifyUartData+0x2c4>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	68ba      	ldr	r2, [r7, #8]
 800e77e:	429a      	cmp	r2, r3
 800e780:	d102      	bne.n	800e788 <Crc_VerifyUartData+0xe4>
			{
				returnValue = E_OK;
 800e782:	2300      	movs	r3, #0
 800e784:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e786:	e11f      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e788:	2301      	movs	r3, #1
 800e78a:	73fb      	strb	r3, [r7, #15]
			break;
 800e78c:	e11c      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:
			if(calculatedCrc == Crc_ExtLights_AutomaticLights)
 800e78e:	4b77      	ldr	r3, [pc, #476]	; (800e96c <Crc_VerifyUartData+0x2c8>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	68ba      	ldr	r2, [r7, #8]
 800e794:	429a      	cmp	r2, r3
 800e796:	d102      	bne.n	800e79e <Crc_VerifyUartData+0xfa>
			{
				returnValue = E_OK;
 800e798:	2300      	movs	r3, #0
 800e79a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e79c:	e114      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	73fb      	strb	r3, [r7, #15]
			break;
 800e7a2:	e111      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS:
			if(calculatedCrc == Crc_ExtLights_PositionLights)
 800e7a4:	4b72      	ldr	r3, [pc, #456]	; (800e970 <Crc_VerifyUartData+0x2cc>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	68ba      	ldr	r2, [r7, #8]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d102      	bne.n	800e7b4 <Crc_VerifyUartData+0x110>
			{
				returnValue = E_OK;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e7b2:	e109      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	73fb      	strb	r3, [r7, #15]
			break;
 800e7b8:	e106      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:
			if(calculatedCrc == Crc_ExtLights_NightTimeLights)
 800e7ba:	4b6e      	ldr	r3, [pc, #440]	; (800e974 <Crc_VerifyUartData+0x2d0>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	68ba      	ldr	r2, [r7, #8]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d102      	bne.n	800e7ca <Crc_VerifyUartData+0x126>
			{
				returnValue = E_OK;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e7c8:	e0fe      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	73fb      	strb	r3, [r7, #15]
			break;
 800e7ce:	e0fb      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_CENLOC_ON:
			if(calculatedCrc == Crc_CenLoc_On)
 800e7d0:	4b69      	ldr	r3, [pc, #420]	; (800e978 <Crc_VerifyUartData+0x2d4>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	68ba      	ldr	r2, [r7, #8]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d102      	bne.n	800e7e0 <Crc_VerifyUartData+0x13c>
			{
				returnValue = E_OK;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e7de:	e0f3      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	73fb      	strb	r3, [r7, #15]
			break;
 800e7e4:	e0f0      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_CENLOC_OFF:
			if(calculatedCrc == Crc_CenLoc_Off)
 800e7e6:	4b65      	ldr	r3, [pc, #404]	; (800e97c <Crc_VerifyUartData+0x2d8>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	68ba      	ldr	r2, [r7, #8]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d102      	bne.n	800e7f6 <Crc_VerifyUartData+0x152>
			{
				returnValue = E_OK;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e7f4:	e0e8      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	73fb      	strb	r3, [r7, #15]
			break;
 800e7fa:	e0e5      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON:
			if(calculatedCrc == Crc_ExtLights_HighBeam_On)
 800e7fc:	4b60      	ldr	r3, [pc, #384]	; (800e980 <Crc_VerifyUartData+0x2dc>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	68ba      	ldr	r2, [r7, #8]
 800e802:	429a      	cmp	r2, r3
 800e804:	d102      	bne.n	800e80c <Crc_VerifyUartData+0x168>
			{
				returnValue = E_OK;
 800e806:	2300      	movs	r3, #0
 800e808:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e80a:	e0dd      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e80c:	2301      	movs	r3, #1
 800e80e:	73fb      	strb	r3, [r7, #15]
			break;
 800e810:	e0da      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:
			if(calculatedCrc == Crc_ExtLights_HighBeam_Off)
 800e812:	4b5c      	ldr	r3, [pc, #368]	; (800e984 <Crc_VerifyUartData+0x2e0>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	68ba      	ldr	r2, [r7, #8]
 800e818:	429a      	cmp	r2, r3
 800e81a:	d102      	bne.n	800e822 <Crc_VerifyUartData+0x17e>
			{
				returnValue = E_OK;
 800e81c:	2300      	movs	r3, #0
 800e81e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e820:	e0d2      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e822:	2301      	movs	r3, #1
 800e824:	73fb      	strb	r3, [r7, #15]
			break;
 800e826:	e0cf      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:
			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_On)
 800e828:	4b57      	ldr	r3, [pc, #348]	; (800e988 <Crc_VerifyUartData+0x2e4>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	68ba      	ldr	r2, [r7, #8]
 800e82e:	429a      	cmp	r2, r3
 800e830:	d102      	bne.n	800e838 <Crc_VerifyUartData+0x194>
			{
				returnValue = E_OK;
 800e832:	2300      	movs	r3, #0
 800e834:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e836:	e0c7      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e838:	2301      	movs	r3, #1
 800e83a:	73fb      	strb	r3, [r7, #15]
			break;
 800e83c:	e0c4      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:
			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_Off)
 800e83e:	4b53      	ldr	r3, [pc, #332]	; (800e98c <Crc_VerifyUartData+0x2e8>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	68ba      	ldr	r2, [r7, #8]
 800e844:	429a      	cmp	r2, r3
 800e846:	d102      	bne.n	800e84e <Crc_VerifyUartData+0x1aa>
			{
				returnValue = E_OK;
 800e848:	2300      	movs	r3, #0
 800e84a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e84c:	e0bc      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e84e:	2301      	movs	r3, #1
 800e850:	73fb      	strb	r3, [r7, #15]
			break;
 800e852:	e0b9      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_On)
 800e854:	4b4e      	ldr	r3, [pc, #312]	; (800e990 <Crc_VerifyUartData+0x2ec>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	68ba      	ldr	r2, [r7, #8]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d102      	bne.n	800e864 <Crc_VerifyUartData+0x1c0>
			{
				returnValue = E_OK;
 800e85e:	2300      	movs	r3, #0
 800e860:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e862:	e0b1      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e864:	2301      	movs	r3, #1
 800e866:	73fb      	strb	r3, [r7, #15]
			break;
 800e868:	e0ae      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_Off)
 800e86a:	4b4a      	ldr	r3, [pc, #296]	; (800e994 <Crc_VerifyUartData+0x2f0>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	68ba      	ldr	r2, [r7, #8]
 800e870:	429a      	cmp	r2, r3
 800e872:	d102      	bne.n	800e87a <Crc_VerifyUartData+0x1d6>
			{
				returnValue = E_OK;
 800e874:	2300      	movs	r3, #0
 800e876:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e878:	e0a6      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e87a:	2301      	movs	r3, #1
 800e87c:	73fb      	strb	r3, [r7, #15]
			break;
 800e87e:	e0a3      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_HazardLight_On)
 800e880:	4b45      	ldr	r3, [pc, #276]	; (800e998 <Crc_VerifyUartData+0x2f4>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	68ba      	ldr	r2, [r7, #8]
 800e886:	429a      	cmp	r2, r3
 800e888:	d102      	bne.n	800e890 <Crc_VerifyUartData+0x1ec>
			{
				returnValue = E_OK;
 800e88a:	2300      	movs	r3, #0
 800e88c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e88e:	e09b      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e890:	2301      	movs	r3, #1
 800e892:	73fb      	strb	r3, [r7, #15]
			break;
 800e894:	e098      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_HazardLight_Off)
 800e896:	4b41      	ldr	r3, [pc, #260]	; (800e99c <Crc_VerifyUartData+0x2f8>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	68ba      	ldr	r2, [r7, #8]
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d102      	bne.n	800e8a6 <Crc_VerifyUartData+0x202>
			{
				returnValue = E_OK;
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e8a4:	e090      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	73fb      	strb	r3, [r7, #15]
			break;
 800e8aa:	e08d      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:
			if(calculatedCrc == Crc_ExtLights_FogLightFront_On)
 800e8ac:	4b3c      	ldr	r3, [pc, #240]	; (800e9a0 <Crc_VerifyUartData+0x2fc>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	68ba      	ldr	r2, [r7, #8]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d102      	bne.n	800e8bc <Crc_VerifyUartData+0x218>
			{
				returnValue = E_OK;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e8ba:	e085      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e8bc:	2301      	movs	r3, #1
 800e8be:	73fb      	strb	r3, [r7, #15]
			break;
 800e8c0:	e082      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:
			if(calculatedCrc == Crc_ExtLights_FogLightFront_Off)
 800e8c2:	4b38      	ldr	r3, [pc, #224]	; (800e9a4 <Crc_VerifyUartData+0x300>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	68ba      	ldr	r2, [r7, #8]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d102      	bne.n	800e8d2 <Crc_VerifyUartData+0x22e>
			{
				returnValue = E_OK;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e8d0:	e07a      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	73fb      	strb	r3, [r7, #15]
			break;
 800e8d6:	e077      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:
			if(calculatedCrc == Crc_ExtLights_FogLightRear_On)
 800e8d8:	4b33      	ldr	r3, [pc, #204]	; (800e9a8 <Crc_VerifyUartData+0x304>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	68ba      	ldr	r2, [r7, #8]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d102      	bne.n	800e8e8 <Crc_VerifyUartData+0x244>
			{
				returnValue = E_OK;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e8e6:	e06f      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	73fb      	strb	r3, [r7, #15]
			break;
 800e8ec:	e06c      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:
			if(calculatedCrc == Crc_ExtLights_FogLightRear_Off)
 800e8ee:	4b2f      	ldr	r3, [pc, #188]	; (800e9ac <Crc_VerifyUartData+0x308>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	68ba      	ldr	r2, [r7, #8]
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d102      	bne.n	800e8fe <Crc_VerifyUartData+0x25a>
			{
				returnValue = E_OK;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e8fc:	e064      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e8fe:	2301      	movs	r3, #1
 800e900:	73fb      	strb	r3, [r7, #15]
			break;
 800e902:	e061      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON:
			if(calculatedCrc == Crc_ExtLights_BrakeLight_On)
 800e904:	4b2a      	ldr	r3, [pc, #168]	; (800e9b0 <Crc_VerifyUartData+0x30c>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	68ba      	ldr	r2, [r7, #8]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d102      	bne.n	800e914 <Crc_VerifyUartData+0x270>
			{
				returnValue = E_OK;
 800e90e:	2300      	movs	r3, #0
 800e910:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e912:	e059      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e914:	2301      	movs	r3, #1
 800e916:	73fb      	strb	r3, [r7, #15]
			break;
 800e918:	e056      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:
			if(calculatedCrc == Crc_ExtLights_BrakeLight_Off)
 800e91a:	4b26      	ldr	r3, [pc, #152]	; (800e9b4 <Crc_VerifyUartData+0x310>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	68ba      	ldr	r2, [r7, #8]
 800e920:	429a      	cmp	r2, r3
 800e922:	d102      	bne.n	800e92a <Crc_VerifyUartData+0x286>
			{
				returnValue = E_OK;
 800e924:	2300      	movs	r3, #0
 800e926:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e928:	e04e      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e92a:	2301      	movs	r3, #1
 800e92c:	73fb      	strb	r3, [r7, #15]
			break;
 800e92e:	e04b      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:
			if(calculatedCrc == Crc_IntLights_InteriorLight_On)
 800e930:	4b21      	ldr	r3, [pc, #132]	; (800e9b8 <Crc_VerifyUartData+0x314>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	68ba      	ldr	r2, [r7, #8]
 800e936:	429a      	cmp	r2, r3
 800e938:	d102      	bne.n	800e940 <Crc_VerifyUartData+0x29c>
			{
				returnValue = E_OK;
 800e93a:	2300      	movs	r3, #0
 800e93c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e93e:	e043      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800e940:	2301      	movs	r3, #1
 800e942:	73fb      	strb	r3, [r7, #15]
			break;
 800e944:	e040      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:
			if(calculatedCrc == Crc_IntLights_InteriorLights_Off)
 800e946:	4b1d      	ldr	r3, [pc, #116]	; (800e9bc <Crc_VerifyUartData+0x318>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	68ba      	ldr	r2, [r7, #8]
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d137      	bne.n	800e9c0 <Crc_VerifyUartData+0x31c>
			{
				returnValue = E_OK;
 800e950:	2300      	movs	r3, #0
 800e952:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800e954:	e038      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
 800e956:	bf00      	nop
 800e958:	20005f8c 	.word	0x20005f8c
 800e95c:	200001f4 	.word	0x200001f4
 800e960:	20005fc8 	.word	0x20005fc8
 800e964:	20005fcc 	.word	0x20005fcc
 800e968:	20005fd0 	.word	0x20005fd0
 800e96c:	20005fd4 	.word	0x20005fd4
 800e970:	20005fd8 	.word	0x20005fd8
 800e974:	20005fdc 	.word	0x20005fdc
 800e978:	20005f90 	.word	0x20005f90
 800e97c:	20005f94 	.word	0x20005f94
 800e980:	20005f98 	.word	0x20005f98
 800e984:	20005f9c 	.word	0x20005f9c
 800e988:	20005fa0 	.word	0x20005fa0
 800e98c:	20005fa4 	.word	0x20005fa4
 800e990:	20005fa8 	.word	0x20005fa8
 800e994:	20005fac 	.word	0x20005fac
 800e998:	20005fb0 	.word	0x20005fb0
 800e99c:	20005fb4 	.word	0x20005fb4
 800e9a0:	20005fb8 	.word	0x20005fb8
 800e9a4:	20005fbc 	.word	0x20005fbc
 800e9a8:	20005fe8 	.word	0x20005fe8
 800e9ac:	20005fec 	.word	0x20005fec
 800e9b0:	20005fc0 	.word	0x20005fc0
 800e9b4:	20005fc4 	.word	0x20005fc4
 800e9b8:	20005fe0 	.word	0x20005fe0
 800e9bc:	20005fe4 	.word	0x20005fe4
				returnValue = E_NOT_OK;
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	73fb      	strb	r3, [r7, #15]
			break;
 800e9c4:	e000      	b.n	800e9c8 <Crc_VerifyUartData+0x324>
		default:
			break;
 800e9c6:	bf00      	nop
	}
	return returnValue;
 800e9c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3710      	adds	r7, #16
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop

0800e9d4 <Crc_InitCrcValuesForUart>:
/***********************************************************************************
* Function: Crc_InitCrcValuesForUart									   		   *
* Description: Initialize the CRC default values for UART data.			 		   *
************************************************************************************/
VOID Crc_InitCrcValuesForUart()
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b082      	sub	sp, #8
 800e9d8:	af00      	add	r7, sp, #0
	/* Local variable to store default value of possible
	 * received data from UART. */
	uint32 value = 0;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	607b      	str	r3, [r7, #4]
	/* Calculate CRC for each defined bluetooth command. */
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON;
 800e9de:	230f      	movs	r3, #15
 800e9e0:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e9e2:	1d3b      	adds	r3, r7, #4
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	4619      	mov	r1, r3
 800e9e8:	4883      	ldr	r0, [pc, #524]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800e9ea:	f7f6 f90e 	bl	8004c0a <HAL_CRC_Calculate>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	4a82      	ldr	r2, [pc, #520]	; (800ebfc <Crc_InitCrcValuesForUart+0x228>)
 800e9f2:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF;
 800e9f4:	2310      	movs	r3, #16
 800e9f6:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800e9f8:	1d3b      	adds	r3, r7, #4
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	487e      	ldr	r0, [pc, #504]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800ea00:	f7f6 f903 	bl	8004c0a <HAL_CRC_Calculate>
 800ea04:	4603      	mov	r3, r0
 800ea06:	4a7e      	ldr	r2, [pc, #504]	; (800ec00 <Crc_InitCrcValuesForUart+0x22c>)
 800ea08:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_CENLOC_ON;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ea0e:	1d3b      	adds	r3, r7, #4
 800ea10:	2201      	movs	r2, #1
 800ea12:	4619      	mov	r1, r3
 800ea14:	4878      	ldr	r0, [pc, #480]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800ea16:	f7f6 f8f8 	bl	8004c0a <HAL_CRC_Calculate>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	4a79      	ldr	r2, [pc, #484]	; (800ec04 <Crc_InitCrcValuesForUart+0x230>)
 800ea1e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_CENLOC_OFF;
 800ea20:	2302      	movs	r3, #2
 800ea22:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ea24:	1d3b      	adds	r3, r7, #4
 800ea26:	2201      	movs	r2, #1
 800ea28:	4619      	mov	r1, r3
 800ea2a:	4873      	ldr	r0, [pc, #460]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800ea2c:	f7f6 f8ed 	bl	8004c0a <HAL_CRC_Calculate>
 800ea30:	4603      	mov	r3, r0
 800ea32:	4a75      	ldr	r2, [pc, #468]	; (800ec08 <Crc_InitCrcValuesForUart+0x234>)
 800ea34:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON;
 800ea36:	2303      	movs	r3, #3
 800ea38:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ea3a:	1d3b      	adds	r3, r7, #4
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	4619      	mov	r1, r3
 800ea40:	486d      	ldr	r0, [pc, #436]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800ea42:	f7f6 f8e2 	bl	8004c0a <HAL_CRC_Calculate>
 800ea46:	4603      	mov	r3, r0
 800ea48:	4a70      	ldr	r2, [pc, #448]	; (800ec0c <Crc_InitCrcValuesForUart+0x238>)
 800ea4a:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF;
 800ea4c:	2304      	movs	r3, #4
 800ea4e:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ea50:	1d3b      	adds	r3, r7, #4
 800ea52:	2201      	movs	r2, #1
 800ea54:	4619      	mov	r1, r3
 800ea56:	4868      	ldr	r0, [pc, #416]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800ea58:	f7f6 f8d7 	bl	8004c0a <HAL_CRC_Calculate>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	4a6c      	ldr	r2, [pc, #432]	; (800ec10 <Crc_InitCrcValuesForUart+0x23c>)
 800ea60:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON;
 800ea62:	2307      	movs	r3, #7
 800ea64:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ea66:	1d3b      	adds	r3, r7, #4
 800ea68:	2201      	movs	r2, #1
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	4862      	ldr	r0, [pc, #392]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800ea6e:	f7f6 f8cc 	bl	8004c0a <HAL_CRC_Calculate>
 800ea72:	4603      	mov	r3, r0
 800ea74:	4a67      	ldr	r2, [pc, #412]	; (800ec14 <Crc_InitCrcValuesForUart+0x240>)
 800ea76:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF;
 800ea78:	2308      	movs	r3, #8
 800ea7a:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ea7c:	1d3b      	adds	r3, r7, #4
 800ea7e:	2201      	movs	r2, #1
 800ea80:	4619      	mov	r1, r3
 800ea82:	485d      	ldr	r0, [pc, #372]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800ea84:	f7f6 f8c1 	bl	8004c0a <HAL_CRC_Calculate>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	4a63      	ldr	r2, [pc, #396]	; (800ec18 <Crc_InitCrcValuesForUart+0x244>)
 800ea8c:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON;
 800ea8e:	2309      	movs	r3, #9
 800ea90:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ea92:	1d3b      	adds	r3, r7, #4
 800ea94:	2201      	movs	r2, #1
 800ea96:	4619      	mov	r1, r3
 800ea98:	4857      	ldr	r0, [pc, #348]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800ea9a:	f7f6 f8b6 	bl	8004c0a <HAL_CRC_Calculate>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	4a5e      	ldr	r2, [pc, #376]	; (800ec1c <Crc_InitCrcValuesForUart+0x248>)
 800eaa2:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF;
 800eaa4:	230a      	movs	r3, #10
 800eaa6:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800eaa8:	1d3b      	adds	r3, r7, #4
 800eaaa:	2201      	movs	r2, #1
 800eaac:	4619      	mov	r1, r3
 800eaae:	4852      	ldr	r0, [pc, #328]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800eab0:	f7f6 f8ab 	bl	8004c0a <HAL_CRC_Calculate>
 800eab4:	4603      	mov	r3, r0
 800eab6:	4a5a      	ldr	r2, [pc, #360]	; (800ec20 <Crc_InitCrcValuesForUart+0x24c>)
 800eab8:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON;
 800eaba:	230b      	movs	r3, #11
 800eabc:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800eabe:	1d3b      	adds	r3, r7, #4
 800eac0:	2201      	movs	r2, #1
 800eac2:	4619      	mov	r1, r3
 800eac4:	484c      	ldr	r0, [pc, #304]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800eac6:	f7f6 f8a0 	bl	8004c0a <HAL_CRC_Calculate>
 800eaca:	4603      	mov	r3, r0
 800eacc:	4a55      	ldr	r2, [pc, #340]	; (800ec24 <Crc_InitCrcValuesForUart+0x250>)
 800eace:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF;
 800ead0:	230c      	movs	r3, #12
 800ead2:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ead4:	1d3b      	adds	r3, r7, #4
 800ead6:	2201      	movs	r2, #1
 800ead8:	4619      	mov	r1, r3
 800eada:	4847      	ldr	r0, [pc, #284]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800eadc:	f7f6 f895 	bl	8004c0a <HAL_CRC_Calculate>
 800eae0:	4603      	mov	r3, r0
 800eae2:	4a51      	ldr	r2, [pc, #324]	; (800ec28 <Crc_InitCrcValuesForUart+0x254>)
 800eae4:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON;
 800eae6:	230d      	movs	r3, #13
 800eae8:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800eaea:	1d3b      	adds	r3, r7, #4
 800eaec:	2201      	movs	r2, #1
 800eaee:	4619      	mov	r1, r3
 800eaf0:	4841      	ldr	r0, [pc, #260]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800eaf2:	f7f6 f88a 	bl	8004c0a <HAL_CRC_Calculate>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	4a4c      	ldr	r2, [pc, #304]	; (800ec2c <Crc_InitCrcValuesForUart+0x258>)
 800eafa:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF;
 800eafc:	230e      	movs	r3, #14
 800eafe:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800eb00:	1d3b      	adds	r3, r7, #4
 800eb02:	2201      	movs	r2, #1
 800eb04:	4619      	mov	r1, r3
 800eb06:	483c      	ldr	r0, [pc, #240]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800eb08:	f7f6 f87f 	bl	8004c0a <HAL_CRC_Calculate>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	4a48      	ldr	r2, [pc, #288]	; (800ec30 <Crc_InitCrcValuesForUart+0x25c>)
 800eb10:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON;
 800eb12:	2311      	movs	r3, #17
 800eb14:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800eb16:	1d3b      	adds	r3, r7, #4
 800eb18:	2201      	movs	r2, #1
 800eb1a:	4619      	mov	r1, r3
 800eb1c:	4836      	ldr	r0, [pc, #216]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800eb1e:	f7f6 f874 	bl	8004c0a <HAL_CRC_Calculate>
 800eb22:	4603      	mov	r3, r0
 800eb24:	4a43      	ldr	r2, [pc, #268]	; (800ec34 <Crc_InitCrcValuesForUart+0x260>)
 800eb26:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF;
 800eb28:	2312      	movs	r3, #18
 800eb2a:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800eb2c:	1d3b      	adds	r3, r7, #4
 800eb2e:	2201      	movs	r2, #1
 800eb30:	4619      	mov	r1, r3
 800eb32:	4831      	ldr	r0, [pc, #196]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800eb34:	f7f6 f869 	bl	8004c0a <HAL_CRC_Calculate>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	4a3f      	ldr	r2, [pc, #252]	; (800ec38 <Crc_InitCrcValuesForUart+0x264>)
 800eb3c:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON;
 800eb3e:	2315      	movs	r3, #21
 800eb40:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800eb42:	1d3b      	adds	r3, r7, #4
 800eb44:	2201      	movs	r2, #1
 800eb46:	4619      	mov	r1, r3
 800eb48:	482b      	ldr	r0, [pc, #172]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800eb4a:	f7f6 f85e 	bl	8004c0a <HAL_CRC_Calculate>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	4a3a      	ldr	r2, [pc, #232]	; (800ec3c <Crc_InitCrcValuesForUart+0x268>)
 800eb52:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF;
 800eb54:	2316      	movs	r3, #22
 800eb56:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800eb58:	1d3b      	adds	r3, r7, #4
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	4826      	ldr	r0, [pc, #152]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800eb60:	f7f6 f853 	bl	8004c0a <HAL_CRC_Calculate>
 800eb64:	4603      	mov	r3, r0
 800eb66:	4a36      	ldr	r2, [pc, #216]	; (800ec40 <Crc_InitCrcValuesForUart+0x26c>)
 800eb68:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO;
 800eb6a:	2317      	movs	r3, #23
 800eb6c:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionZero = HAL_CRC_Calculate(&hcrc, &value, 1);
 800eb6e:	1d3b      	adds	r3, r7, #4
 800eb70:	2201      	movs	r2, #1
 800eb72:	4619      	mov	r1, r3
 800eb74:	4820      	ldr	r0, [pc, #128]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800eb76:	f7f6 f848 	bl	8004c0a <HAL_CRC_Calculate>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	4a31      	ldr	r2, [pc, #196]	; (800ec44 <Crc_InitCrcValuesForUart+0x270>)
 800eb7e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 800eb80:	2318      	movs	r3, #24
 800eb82:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_AutomaticLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 800eb84:	1d3b      	adds	r3, r7, #4
 800eb86:	2201      	movs	r2, #1
 800eb88:	4619      	mov	r1, r3
 800eb8a:	481b      	ldr	r0, [pc, #108]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800eb8c:	f7f6 f83d 	bl	8004c0a <HAL_CRC_Calculate>
 800eb90:	4603      	mov	r3, r0
 800eb92:	4a2d      	ldr	r2, [pc, #180]	; (800ec48 <Crc_InitCrcValuesForUart+0x274>)
 800eb94:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 800eb96:	2319      	movs	r3, #25
 800eb98:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 800eb9a:	1d3b      	adds	r3, r7, #4
 800eb9c:	2201      	movs	r2, #1
 800eb9e:	4619      	mov	r1, r3
 800eba0:	4815      	ldr	r0, [pc, #84]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800eba2:	f7f6 f832 	bl	8004c0a <HAL_CRC_Calculate>
 800eba6:	4603      	mov	r3, r0
 800eba8:	4a28      	ldr	r2, [pc, #160]	; (800ec4c <Crc_InitCrcValuesForUart+0x278>)
 800ebaa:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 800ebac:	231a      	movs	r3, #26
 800ebae:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_NightTimeLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ebb0:	1d3b      	adds	r3, r7, #4
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	4810      	ldr	r0, [pc, #64]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800ebb8:	f7f6 f827 	bl	8004c0a <HAL_CRC_Calculate>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	4a24      	ldr	r2, [pc, #144]	; (800ec50 <Crc_InitCrcValuesForUart+0x27c>)
 800ebc0:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON;
 800ebc2:	2313      	movs	r3, #19
 800ebc4:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ebc6:	1d3b      	adds	r3, r7, #4
 800ebc8:	2201      	movs	r2, #1
 800ebca:	4619      	mov	r1, r3
 800ebcc:	480a      	ldr	r0, [pc, #40]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800ebce:	f7f6 f81c 	bl	8004c0a <HAL_CRC_Calculate>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	4a1f      	ldr	r2, [pc, #124]	; (800ec54 <Crc_InitCrcValuesForUart+0x280>)
 800ebd6:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF;
 800ebd8:	2314      	movs	r3, #20
 800ebda:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLights_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ebdc:	1d3b      	adds	r3, r7, #4
 800ebde:	2201      	movs	r2, #1
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	4805      	ldr	r0, [pc, #20]	; (800ebf8 <Crc_InitCrcValuesForUart+0x224>)
 800ebe4:	f7f6 f811 	bl	8004c0a <HAL_CRC_Calculate>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	4a1b      	ldr	r2, [pc, #108]	; (800ec58 <Crc_InitCrcValuesForUart+0x284>)
 800ebec:	6013      	str	r3, [r2, #0]
}
 800ebee:	bf00      	nop
 800ebf0:	3708      	adds	r7, #8
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	200001f4 	.word	0x200001f4
 800ebfc:	20005fe8 	.word	0x20005fe8
 800ec00:	20005fec 	.word	0x20005fec
 800ec04:	20005f90 	.word	0x20005f90
 800ec08:	20005f94 	.word	0x20005f94
 800ec0c:	20005f98 	.word	0x20005f98
 800ec10:	20005f9c 	.word	0x20005f9c
 800ec14:	20005fa0 	.word	0x20005fa0
 800ec18:	20005fa4 	.word	0x20005fa4
 800ec1c:	20005fa8 	.word	0x20005fa8
 800ec20:	20005fac 	.word	0x20005fac
 800ec24:	20005fb0 	.word	0x20005fb0
 800ec28:	20005fb4 	.word	0x20005fb4
 800ec2c:	20005fb8 	.word	0x20005fb8
 800ec30:	20005fbc 	.word	0x20005fbc
 800ec34:	20005fc0 	.word	0x20005fc0
 800ec38:	20005fc4 	.word	0x20005fc4
 800ec3c:	20005fc8 	.word	0x20005fc8
 800ec40:	20005fcc 	.word	0x20005fcc
 800ec44:	20005fd0 	.word	0x20005fd0
 800ec48:	20005fd4 	.word	0x20005fd4
 800ec4c:	20005fd8 	.word	0x20005fd8
 800ec50:	20005fdc 	.word	0x20005fdc
 800ec54:	20005fe0 	.word	0x20005fe0
 800ec58:	20005fe4 	.word	0x20005fe4

0800ec5c <HAL_CRC_ErrorCallback>:
/***********************************************************************************
* Function: HAL_CRC_ErrorCallback												   *
* Description: Called in case of error. 								 		   *
************************************************************************************/
VOID HAL_CRC_ErrorCallback(CRC_HandleTypeDef *hcrc)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b082      	sub	sp, #8
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
	/* Perform re-initialization. */
	Crc_DeInit();
 800ec64:	f000 f81e 	bl	800eca4 <Crc_DeInit>
	Crc_Init();
 800ec68:	f000 f804 	bl	800ec74 <Crc_Init>
}
 800ec6c:	bf00      	nop
 800ec6e:	3708      	adds	r7, #8
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}

0800ec74 <Crc_Init>:
/***********************************************************************************
* Function: Crc_Init													   		   *
* Description: Initialize the peripheral.								 		   *
************************************************************************************/
StdReturnType Crc_Init()
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	af00      	add	r7, sp, #0
	/* Initialize the CRC.
	 * Call for the error callback in case of faulty initialization. */
	hcrc.Instance = CRC;
 800ec78:	4b08      	ldr	r3, [pc, #32]	; (800ec9c <Crc_Init+0x28>)
 800ec7a:	4a09      	ldr	r2, [pc, #36]	; (800eca0 <Crc_Init+0x2c>)
 800ec7c:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800ec7e:	4807      	ldr	r0, [pc, #28]	; (800ec9c <Crc_Init+0x28>)
 800ec80:	f7f5 ff77 	bl	8004b72 <HAL_CRC_Init>
 800ec84:	4603      	mov	r3, r0
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d002      	beq.n	800ec90 <Crc_Init+0x1c>
	{
		HAL_CRC_ErrorCallback(&hcrc);
 800ec8a:	4804      	ldr	r0, [pc, #16]	; (800ec9c <Crc_Init+0x28>)
 800ec8c:	f7ff ffe6 	bl	800ec5c <HAL_CRC_ErrorCallback>
	else
	{
		/* do nothing */
	}
	/* Initialize the default CRC UART data received values. */
	Crc_InitCrcValuesForUart();
 800ec90:	f7ff fea0 	bl	800e9d4 <Crc_InitCrcValuesForUart>
	return E_OK;
 800ec94:	2300      	movs	r3, #0
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	bd80      	pop	{r7, pc}
 800ec9a:	bf00      	nop
 800ec9c:	200001f4 	.word	0x200001f4
 800eca0:	40023000 	.word	0x40023000

0800eca4 <Crc_DeInit>:
/***********************************************************************************
* Function: Crc_DeInit													   		   *
* Description: De-initialize the peripheral.		 		   					   *
************************************************************************************/
StdReturnType Crc_DeInit()
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	af00      	add	r7, sp, #0
	/* De-initialize the CRC. */
	HAL_CRC_DeInit(&hcrc);
 800eca8:	4802      	ldr	r0, [pc, #8]	; (800ecb4 <Crc_DeInit+0x10>)
 800ecaa:	f7f5 ff7e 	bl	8004baa <HAL_CRC_DeInit>
	return E_OK;
 800ecae:	2300      	movs	r3, #0
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	200001f4 	.word	0x200001f4

0800ecb8 <Crc_MainFunction>:
/***********************************************************************************
* Function: Crc_MainFunction													   *
* Description: Peripheral main function.		 		   						   *
************************************************************************************/
VOID Crc_MainFunction()
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b082      	sub	sp, #8
 800ecbc:	af00      	add	r7, sp, #0
	/* Get the error status in the local variable. */
	uint32 returnValue = HAL_CRC_GetState(&hcrc);
 800ecbe:	4825      	ldr	r0, [pc, #148]	; (800ed54 <Crc_MainFunction+0x9c>)
 800ecc0:	f7f5 ffd6 	bl	8004c70 <HAL_CRC_GetState>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	607b      	str	r3, [r7, #4]
	/* Process module state. */
	switch(Crc_BswState)
 800ecc8:	4b23      	ldr	r3, [pc, #140]	; (800ed58 <Crc_MainFunction+0xa0>)
 800ecca:	781b      	ldrb	r3, [r3, #0]
 800eccc:	2b03      	cmp	r3, #3
 800ecce:	d81a      	bhi.n	800ed06 <Crc_MainFunction+0x4e>
 800ecd0:	a201      	add	r2, pc, #4	; (adr r2, 800ecd8 <Crc_MainFunction+0x20>)
 800ecd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecd6:	bf00      	nop
 800ecd8:	0800ece9 	.word	0x0800ece9
 800ecdc:	0800ed07 	.word	0x0800ed07
 800ece0:	0800ecfb 	.word	0x0800ecfb
 800ece4:	0800ecf5 	.word	0x0800ecf5
	{
		case CRC_INIT_STATE:
			Crc_Init();
 800ece8:	f7ff ffc4 	bl	800ec74 <Crc_Init>
			Crc_BswState = CRC_INITCRCVALUES_STATE;
 800ecec:	4b1a      	ldr	r3, [pc, #104]	; (800ed58 <Crc_MainFunction+0xa0>)
 800ecee:	2202      	movs	r2, #2
 800ecf0:	701a      	strb	r2, [r3, #0]
			break;
 800ecf2:	e009      	b.n	800ed08 <Crc_MainFunction+0x50>
		case CRC_DEINIT_STATE:
			Crc_DeInit();
 800ecf4:	f7ff ffd6 	bl	800eca4 <Crc_DeInit>
			break;
 800ecf8:	e006      	b.n	800ed08 <Crc_MainFunction+0x50>
		case CRC_VERIFYUARTDATA_STATE:
			break;
		case CRC_INITCRCVALUES_STATE:
			Crc_InitCrcValuesForUart();
 800ecfa:	f7ff fe6b 	bl	800e9d4 <Crc_InitCrcValuesForUart>
			Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 800ecfe:	4b16      	ldr	r3, [pc, #88]	; (800ed58 <Crc_MainFunction+0xa0>)
 800ed00:	2201      	movs	r2, #1
 800ed02:	701a      	strb	r2, [r3, #0]
			break;
 800ed04:	e000      	b.n	800ed08 <Crc_MainFunction+0x50>
		default:
			break;
 800ed06:	bf00      	nop
	}
	/* Process peripheral state. */
	switch(returnValue)
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2b04      	cmp	r3, #4
 800ed0c:	d81c      	bhi.n	800ed48 <Crc_MainFunction+0x90>
 800ed0e:	a201      	add	r2, pc, #4	; (adr r2, 800ed14 <Crc_MainFunction+0x5c>)
 800ed10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed14:	0800ed29 	.word	0x0800ed29
 800ed18:	0800ed31 	.word	0x0800ed31
 800ed1c:	0800ed49 	.word	0x0800ed49
 800ed20:	0800ed39 	.word	0x0800ed39
 800ed24:	0800ed41 	.word	0x0800ed41
	{
		case HAL_CRC_STATE_RESET:
			Crc_BswState = CRC_INIT_STATE;
 800ed28:	4b0b      	ldr	r3, [pc, #44]	; (800ed58 <Crc_MainFunction+0xa0>)
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	701a      	strb	r2, [r3, #0]
			break;
 800ed2e:	e00c      	b.n	800ed4a <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_READY:
			Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 800ed30:	4b09      	ldr	r3, [pc, #36]	; (800ed58 <Crc_MainFunction+0xa0>)
 800ed32:	2201      	movs	r2, #1
 800ed34:	701a      	strb	r2, [r3, #0]
			break;
 800ed36:	e008      	b.n	800ed4a <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_BUSY:
			break;
		case HAL_CRC_STATE_TIMEOUT:
			HAL_CRC_ErrorCallback(&hcrc);
 800ed38:	4806      	ldr	r0, [pc, #24]	; (800ed54 <Crc_MainFunction+0x9c>)
 800ed3a:	f7ff ff8f 	bl	800ec5c <HAL_CRC_ErrorCallback>
			break;
 800ed3e:	e004      	b.n	800ed4a <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_ERROR:
			HAL_CRC_ErrorCallback(&hcrc);
 800ed40:	4804      	ldr	r0, [pc, #16]	; (800ed54 <Crc_MainFunction+0x9c>)
 800ed42:	f7ff ff8b 	bl	800ec5c <HAL_CRC_ErrorCallback>
			break;
 800ed46:	e000      	b.n	800ed4a <Crc_MainFunction+0x92>
		default:
			break;
 800ed48:	bf00      	nop
	}
}
 800ed4a:	bf00      	nop
 800ed4c:	3708      	adds	r7, #8
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	200001f4 	.word	0x200001f4
 800ed58:	20005f8c 	.word	0x20005f8c

0800ed5c <EcuM_CheckForWakeupEvent>:
/***********************************************************************************
* Function: EcuM_CheckForWakeupEvent									   		   *
* Description: Checks for the wake up event and sends it forward for processing.   *
************************************************************************************/
VOID EcuM_CheckForWakeupEvent()
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	af00      	add	r7, sp, #0
	/* Check if power-on reset wake-up event occurred. */
	if((RCC->CSR & RCC_CSR_PORRSTF) != 0)
 800ed60:	4b2a      	ldr	r3, [pc, #168]	; (800ee0c <EcuM_CheckForWakeupEvent+0xb0>)
 800ed62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d009      	beq.n	800ed80 <EcuM_CheckForWakeupEvent+0x24>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_POR);
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	f000 f84f 	bl	800ee10 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_PORRSTF;
 800ed72:	4b26      	ldr	r3, [pc, #152]	; (800ee0c <EcuM_CheckForWakeupEvent+0xb0>)
 800ed74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed76:	4a25      	ldr	r2, [pc, #148]	; (800ee0c <EcuM_CheckForWakeupEvent+0xb0>)
 800ed78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ed7c:	6753      	str	r3, [r2, #116]	; 0x74
 800ed7e:	e03c      	b.n	800edfa <EcuM_CheckForWakeupEvent+0x9e>
	}/* Check if brown-out reset wake-up event occurred.*/
	else if((RCC->CSR & RCC_CSR_BORRSTF) != 0)
 800ed80:	4b22      	ldr	r3, [pc, #136]	; (800ee0c <EcuM_CheckForWakeupEvent+0xb0>)
 800ed82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d009      	beq.n	800eda0 <EcuM_CheckForWakeupEvent+0x44>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_BOR);
 800ed8c:	2001      	movs	r0, #1
 800ed8e:	f000 f83f 	bl	800ee10 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_BORRSTF;
 800ed92:	4b1e      	ldr	r3, [pc, #120]	; (800ee0c <EcuM_CheckForWakeupEvent+0xb0>)
 800ed94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed96:	4a1d      	ldr	r2, [pc, #116]	; (800ee0c <EcuM_CheckForWakeupEvent+0xb0>)
 800ed98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ed9c:	6753      	str	r3, [r2, #116]	; 0x74
 800ed9e:	e02c      	b.n	800edfa <EcuM_CheckForWakeupEvent+0x9e>
	}/* Check if a software reset wake-up event occurred. */
	else if((RCC->CSR & RCC_CSR_SFTRSTF) != 0)
 800eda0:	4b1a      	ldr	r3, [pc, #104]	; (800ee0c <EcuM_CheckForWakeupEvent+0xb0>)
 800eda2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eda4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d009      	beq.n	800edc0 <EcuM_CheckForWakeupEvent+0x64>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 800edac:	2002      	movs	r0, #2
 800edae:	f000 f82f 	bl	800ee10 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_SFTRSTF;
 800edb2:	4b16      	ldr	r3, [pc, #88]	; (800ee0c <EcuM_CheckForWakeupEvent+0xb0>)
 800edb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edb6:	4a15      	ldr	r2, [pc, #84]	; (800ee0c <EcuM_CheckForWakeupEvent+0xb0>)
 800edb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800edbc:	6753      	str	r3, [r2, #116]	; 0x74
 800edbe:	e01c      	b.n	800edfa <EcuM_CheckForWakeupEvent+0x9e>
	}/* Check if a windowed watchdog reset wake-up event occurred. */
	else if((RCC->CSR & RCC_CSR_IWDGRSTF) != 0)
 800edc0:	4b12      	ldr	r3, [pc, #72]	; (800ee0c <EcuM_CheckForWakeupEvent+0xb0>)
 800edc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d009      	beq.n	800ede0 <EcuM_CheckForWakeupEvent+0x84>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 800edcc:	2003      	movs	r0, #3
 800edce:	f000 f81f 	bl	800ee10 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_IWDGRSTF;
 800edd2:	4b0e      	ldr	r3, [pc, #56]	; (800ee0c <EcuM_CheckForWakeupEvent+0xb0>)
 800edd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edd6:	4a0d      	ldr	r2, [pc, #52]	; (800ee0c <EcuM_CheckForWakeupEvent+0xb0>)
 800edd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eddc:	6753      	str	r3, [r2, #116]	; 0x74
 800edde:	e00c      	b.n	800edfa <EcuM_CheckForWakeupEvent+0x9e>
	}/* Check if a low power reset wake-up event occurred. */
	else if((RCC->CSR & RCC_CSR_LPWRRSTF) != 0)
 800ede0:	4b0a      	ldr	r3, [pc, #40]	; (800ee0c <EcuM_CheckForWakeupEvent+0xb0>)
 800ede2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	da08      	bge.n	800edfa <EcuM_CheckForWakeupEvent+0x9e>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 800ede8:	2004      	movs	r0, #4
 800edea:	f000 f811 	bl	800ee10 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_LPWRRSTF;
 800edee:	4b07      	ldr	r3, [pc, #28]	; (800ee0c <EcuM_CheckForWakeupEvent+0xb0>)
 800edf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edf2:	4a06      	ldr	r2, [pc, #24]	; (800ee0c <EcuM_CheckForWakeupEvent+0xb0>)
 800edf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800edf8:	6753      	str	r3, [r2, #116]	; 0x74
	}/* Check if a button reset wake-up event occurred. */
	else
	{
		/* do nothing */
	}
	RCC->CSR |= RCC_CSR_RMVF;
 800edfa:	4b04      	ldr	r3, [pc, #16]	; (800ee0c <EcuM_CheckForWakeupEvent+0xb0>)
 800edfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edfe:	4a03      	ldr	r2, [pc, #12]	; (800ee0c <EcuM_CheckForWakeupEvent+0xb0>)
 800ee00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ee04:	6753      	str	r3, [r2, #116]	; 0x74
}
 800ee06:	bf00      	nop
 800ee08:	bd80      	pop	{r7, pc}
 800ee0a:	bf00      	nop
 800ee0c:	40023800 	.word	0x40023800

0800ee10 <EcuM_SetWakeupSource>:
/***********************************************************************************
* Function: EcuM_SetWakeupSource									   		   	   *
* Description: Sets the wake up source received.			 		   			   *
************************************************************************************/
VOID EcuM_SetWakeupSource(uint32 wakeupSource)
{
 800ee10:	b480      	push	{r7}
 800ee12:	b083      	sub	sp, #12
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
	/* If wake-up source is valid. */
	if(wakeupSource != NULL_PTR)
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d003      	beq.n	800ee26 <EcuM_SetWakeupSource+0x16>
	{
		/* Store the wake-up event. */
		EcuM_GlobalState = wakeupSource;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	b2da      	uxtb	r2, r3
 800ee22:	4b04      	ldr	r3, [pc, #16]	; (800ee34 <EcuM_SetWakeupSource+0x24>)
 800ee24:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 800ee26:	bf00      	nop
 800ee28:	370c      	adds	r7, #12
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee30:	4770      	bx	lr
 800ee32:	bf00      	nop
 800ee34:	20005ff1 	.word	0x20005ff1

0800ee38 <EcuM_ProcessWakeupEvent>:
/***********************************************************************************
* Function: EcuM_ProcessWakeupEvent									   		       *
* Description: Sends forward the wake up event.							 		   *
************************************************************************************/
VOID EcuM_ProcessWakeupEvent()
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b082      	sub	sp, #8
 800ee3c:	af00      	add	r7, sp, #0
	/* Store the wake-up event into local variable. */
	uint8 localWakeupEvent = EcuM_GlobalState;
 800ee3e:	4b1d      	ldr	r3, [pc, #116]	; (800eeb4 <EcuM_ProcessWakeupEvent+0x7c>)
 800ee40:	781b      	ldrb	r3, [r3, #0]
 800ee42:	71fb      	strb	r3, [r7, #7]
	/* Set the system fault for the respective wake-up event. */
	switch(localWakeupEvent)
 800ee44:	79fb      	ldrb	r3, [r7, #7]
 800ee46:	2b04      	cmp	r3, #4
 800ee48:	d82f      	bhi.n	800eeaa <EcuM_ProcessWakeupEvent+0x72>
 800ee4a:	a201      	add	r2, pc, #4	; (adr r2, 800ee50 <EcuM_ProcessWakeupEvent+0x18>)
 800ee4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee50:	0800ee65 	.word	0x0800ee65
 800ee54:	0800ee73 	.word	0x0800ee73
 800ee58:	0800ee81 	.word	0x0800ee81
 800ee5c:	0800ee8f 	.word	0x0800ee8f
 800ee60:	0800ee9d 	.word	0x0800ee9d
	{
		case ECUM_WAKEUPSOURCE_POR:
			EcuM_GlobalState = 255;
 800ee64:	4b13      	ldr	r3, [pc, #76]	; (800eeb4 <EcuM_ProcessWakeupEvent+0x7c>)
 800ee66:	22ff      	movs	r2, #255	; 0xff
 800ee68:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_POR);
 800ee6a:	2000      	movs	r0, #0
 800ee6c:	f000 f918 	bl	800f0a0 <SystemManager_SetFault>
			break;
 800ee70:	e01c      	b.n	800eeac <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_BOR:
			EcuM_GlobalState = 255;
 800ee72:	4b10      	ldr	r3, [pc, #64]	; (800eeb4 <EcuM_ProcessWakeupEvent+0x7c>)
 800ee74:	22ff      	movs	r2, #255	; 0xff
 800ee76:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_BOR);
 800ee78:	2001      	movs	r0, #1
 800ee7a:	f000 f911 	bl	800f0a0 <SystemManager_SetFault>
			break;
 800ee7e:	e015      	b.n	800eeac <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_SOFTWARE_RESET:
			EcuM_GlobalState = 255;
 800ee80:	4b0c      	ldr	r3, [pc, #48]	; (800eeb4 <EcuM_ProcessWakeupEvent+0x7c>)
 800ee82:	22ff      	movs	r2, #255	; 0xff
 800ee84:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 800ee86:	2002      	movs	r0, #2
 800ee88:	f000 f90a 	bl	800f0a0 <SystemManager_SetFault>
			break;
 800ee8c:	e00e      	b.n	800eeac <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET:
			EcuM_GlobalState = 255;
 800ee8e:	4b09      	ldr	r3, [pc, #36]	; (800eeb4 <EcuM_ProcessWakeupEvent+0x7c>)
 800ee90:	22ff      	movs	r2, #255	; 0xff
 800ee92:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 800ee94:	2003      	movs	r0, #3
 800ee96:	f000 f903 	bl	800f0a0 <SystemManager_SetFault>
			break;
 800ee9a:	e007      	b.n	800eeac <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_LOWPOWER_RESET:
			EcuM_GlobalState = 255;
 800ee9c:	4b05      	ldr	r3, [pc, #20]	; (800eeb4 <EcuM_ProcessWakeupEvent+0x7c>)
 800ee9e:	22ff      	movs	r2, #255	; 0xff
 800eea0:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 800eea2:	2004      	movs	r0, #4
 800eea4:	f000 f8fc 	bl	800f0a0 <SystemManager_SetFault>
			break;
 800eea8:	e000      	b.n	800eeac <EcuM_ProcessWakeupEvent+0x74>
		default:
			break;
 800eeaa:	bf00      	nop
	}
}
 800eeac:	bf00      	nop
 800eeae:	3708      	adds	r7, #8
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}
 800eeb4:	20005ff1 	.word	0x20005ff1

0800eeb8 <EcuM_DriverInit>:
/***********************************************************************************
* Function: EcuM_DriverInit									   		               *
* Description: Initialize the drivers.			 		   						   *
************************************************************************************/
StdReturnType EcuM_DriverInit()
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	af00      	add	r7, sp, #0
	Port_Init();
 800eebc:	f7fa fbde 	bl	800967c <Port_Init>
	MX_DMA_Init();
 800eec0:	f7f3 fd96 	bl	80029f0 <MX_DMA_Init>
	Tim_Init(TIMER_TWO);
 800eec4:	2002      	movs	r0, #2
 800eec6:	f7fa fd11 	bl	80098ec <Tim_Init>
	Tim_Init(TIMER_THREE);
 800eeca:	2003      	movs	r0, #3
 800eecc:	f7fa fd0e 	bl	80098ec <Tim_Init>
	Tim_Init(TIMER_FOUR);
 800eed0:	2004      	movs	r0, #4
 800eed2:	f7fa fd0b 	bl	80098ec <Tim_Init>
	Tim_Init(TIMER_FIVE);
 800eed6:	2005      	movs	r0, #5
 800eed8:	f7fa fd08 	bl	80098ec <Tim_Init>
	Adc_Init();
 800eedc:	f7fa fb2e 	bl	800953c <Adc_Init>
	Crc_Init();
 800eee0:	f7ff fec8 	bl	800ec74 <Crc_Init>
	Uart_Init();
 800eee4:	f7f3 fb1a 	bl	800251c <Uart_Init>
	Watchdog_Init();
 800eee8:	f000 f9d6 	bl	800f298 <Watchdog_Init>
	MX_NVIC_Init();
 800eeec:	f000 f906 	bl	800f0fc <MX_NVIC_Init>
	EcuM_BswState = ECUM_CHECKFORWAKEUP_STATE;
 800eef0:	4b02      	ldr	r3, [pc, #8]	; (800eefc <EcuM_DriverInit+0x44>)
 800eef2:	2201      	movs	r2, #1
 800eef4:	701a      	strb	r2, [r3, #0]
	return E_OK;
 800eef6:	2300      	movs	r3, #0
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	bd80      	pop	{r7, pc}
 800eefc:	20005ff0 	.word	0x20005ff0

0800ef00 <EcuM_DriverDeInit>:
/***********************************************************************************
* Function: EcuM_DriverDeInit									   		           *
* Description: De-initialize the drivers.			 		                       *
************************************************************************************/
StdReturnType EcuM_DriverDeInit()
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	af00      	add	r7, sp, #0
	Adc_DeInit();
 800ef04:	f7fa fb10 	bl	8009528 <Adc_DeInit>
	Tim_DeInit(TIMER_TWO);
 800ef08:	2002      	movs	r0, #2
 800ef0a:	f7fa ff0d 	bl	8009d28 <Tim_DeInit>
	Tim_DeInit(TIMER_THREE);
 800ef0e:	2003      	movs	r0, #3
 800ef10:	f7fa ff0a 	bl	8009d28 <Tim_DeInit>
	Tim_DeInit(TIMER_FOUR);
 800ef14:	2004      	movs	r0, #4
 800ef16:	f7fa ff07 	bl	8009d28 <Tim_DeInit>
	Tim_DeInit(TIMER_FIVE);
 800ef1a:	2005      	movs	r0, #5
 800ef1c:	f7fa ff04 	bl	8009d28 <Tim_DeInit>
	Uart_DeInit();
 800ef20:	f7f3 fb28 	bl	8002574 <Uart_DeInit>
	Crc_DeInit();
 800ef24:	f7ff febe 	bl	800eca4 <Crc_DeInit>
	SystemManager_DeInit();
 800ef28:	f000 f8b4 	bl	800f094 <SystemManager_DeInit>
	return E_OK;
 800ef2c:	2300      	movs	r3, #0
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	bd80      	pop	{r7, pc}
	...

0800ef34 <EcuM_MainFunction>:
/***********************************************************************************
* Function: EcuM_MainFunction									   		           *
* Description: Electronic control unit manager main function.			 		   *
************************************************************************************/
VOID EcuM_MainFunction()
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	af00      	add	r7, sp, #0
	switch(EcuM_BswState)
 800ef38:	4b12      	ldr	r3, [pc, #72]	; (800ef84 <EcuM_MainFunction+0x50>)
 800ef3a:	781b      	ldrb	r3, [r3, #0]
 800ef3c:	2b03      	cmp	r3, #3
 800ef3e:	d81d      	bhi.n	800ef7c <EcuM_MainFunction+0x48>
 800ef40:	a201      	add	r2, pc, #4	; (adr r2, 800ef48 <EcuM_MainFunction+0x14>)
 800ef42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef46:	bf00      	nop
 800ef48:	0800ef59 	.word	0x0800ef59
 800ef4c:	0800ef65 	.word	0x0800ef65
 800ef50:	0800ef71 	.word	0x0800ef71
 800ef54:	0800ef5f 	.word	0x0800ef5f
	{
		case ECUM_INIT_STATE:
			EcuM_DriverInit();
 800ef58:	f7ff ffae 	bl	800eeb8 <EcuM_DriverInit>
			break;
 800ef5c:	e00f      	b.n	800ef7e <EcuM_MainFunction+0x4a>
		case ECUM_DEINIT_STATE:
			EcuM_DriverDeInit();
 800ef5e:	f7ff ffcf 	bl	800ef00 <EcuM_DriverDeInit>
			break;
 800ef62:	e00c      	b.n	800ef7e <EcuM_MainFunction+0x4a>
		case ECUM_CHECKFORWAKEUP_STATE:
			EcuM_CheckForWakeupEvent();
 800ef64:	f7ff fefa 	bl	800ed5c <EcuM_CheckForWakeupEvent>
			EcuM_BswState = ECUM_PROCESSWAKEUP_STATE;
 800ef68:	4b06      	ldr	r3, [pc, #24]	; (800ef84 <EcuM_MainFunction+0x50>)
 800ef6a:	2202      	movs	r2, #2
 800ef6c:	701a      	strb	r2, [r3, #0]
			break;
 800ef6e:	e006      	b.n	800ef7e <EcuM_MainFunction+0x4a>
		case ECUM_PROCESSWAKEUP_STATE:
			EcuM_ProcessWakeupEvent();
 800ef70:	f7ff ff62 	bl	800ee38 <EcuM_ProcessWakeupEvent>
			EcuM_BswState = ECUM_CHECKFORWAKEUP_STATE;
 800ef74:	4b03      	ldr	r3, [pc, #12]	; (800ef84 <EcuM_MainFunction+0x50>)
 800ef76:	2201      	movs	r2, #1
 800ef78:	701a      	strb	r2, [r3, #0]
			break;
 800ef7a:	e000      	b.n	800ef7e <EcuM_MainFunction+0x4a>
		default:
			break;
 800ef7c:	bf00      	nop
	}
}
 800ef7e:	bf00      	nop
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	20005ff0 	.word	0x20005ff0

0800ef88 <SystemManager_ProcessFault>:
/***********************************************************************************
* Function: SystemManager_ProcessFault										       *
* Description: Initialize the system.  		   									   *
************************************************************************************/
VOID SystemManager_ProcessFault()
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b082      	sub	sp, #8
 800ef8c:	af00      	add	r7, sp, #0
	for(uint8 idx = STD_LOW ; idx < 26; idx++)
 800ef8e:	2300      	movs	r3, #0
 800ef90:	71fb      	strb	r3, [r7, #7]
 800ef92:	e06c      	b.n	800f06e <SystemManager_ProcessFault+0xe6>
	{
		if(SystemManager_Fault[idx] != STD_LOW)
 800ef94:	79fb      	ldrb	r3, [r7, #7]
 800ef96:	4a3a      	ldr	r2, [pc, #232]	; (800f080 <SystemManager_ProcessFault+0xf8>)
 800ef98:	5cd3      	ldrb	r3, [r2, r3]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d064      	beq.n	800f068 <SystemManager_ProcessFault+0xe0>
		{
			if(idx == POWER_ON_RESET)
 800ef9e:	79fb      	ldrb	r3, [r7, #7]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d061      	beq.n	800f068 <SystemManager_ProcessFault+0xe0>
			{
				/* do nothing */
			}
			else if(idx == BROWN_OUT_RESET ||
 800efa4:	79fb      	ldrb	r3, [r7, #7]
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d014      	beq.n	800efd4 <SystemManager_ProcessFault+0x4c>
 800efaa:	79fb      	ldrb	r3, [r7, #7]
 800efac:	2b04      	cmp	r3, #4
 800efae:	d011      	beq.n	800efd4 <SystemManager_ProcessFault+0x4c>
					idx == LOW_POWER_RESET ||
 800efb0:	79fb      	ldrb	r3, [r7, #7]
 800efb2:	2b06      	cmp	r3, #6
 800efb4:	d00e      	beq.n	800efd4 <SystemManager_ProcessFault+0x4c>
					idx == HARDWARE_RESET ||
 800efb6:	79fb      	ldrb	r3, [r7, #7]
 800efb8:	2b07      	cmp	r3, #7
 800efba:	d00b      	beq.n	800efd4 <SystemManager_ProcessFault+0x4c>
					idx == FLASH_FAULT_RESET ||
 800efbc:	79fb      	ldrb	r3, [r7, #7]
 800efbe:	2b08      	cmp	r3, #8
 800efc0:	d008      	beq.n	800efd4 <SystemManager_ProcessFault+0x4c>
					idx == NMI_RESET ||
 800efc2:	79fb      	ldrb	r3, [r7, #7]
 800efc4:	2b09      	cmp	r3, #9
 800efc6:	d005      	beq.n	800efd4 <SystemManager_ProcessFault+0x4c>
					idx == MEMORY_FAULT_RESET ||
 800efc8:	79fb      	ldrb	r3, [r7, #7]
 800efca:	2b0a      	cmp	r3, #10
 800efcc:	d002      	beq.n	800efd4 <SystemManager_ProcessFault+0x4c>
					idx == USAGE_FAULT_RESET ||
 800efce:	79fb      	ldrb	r3, [r7, #7]
 800efd0:	2b0b      	cmp	r3, #11
 800efd2:	d108      	bne.n	800efe6 <SystemManager_ProcessFault+0x5e>
					idx == BUS_FAULT_RESET)
			{
				if(SystemManager_Fault[idx] >= 2)
 800efd4:	79fb      	ldrb	r3, [r7, #7]
 800efd6:	4a2a      	ldr	r2, [pc, #168]	; (800f080 <SystemManager_ProcessFault+0xf8>)
 800efd8:	5cd3      	ldrb	r3, [r2, r3]
 800efda:	2b01      	cmp	r3, #1
 800efdc:	d944      	bls.n	800f068 <SystemManager_ProcessFault+0xe0>
				{
					Dem_ReceiveFault(HARDWARE_RESET_DTC_CODE);
 800efde:	2056      	movs	r0, #86	; 0x56
 800efe0:	f7f4 fdac 	bl	8003b3c <Dem_ReceiveFault>
				if(SystemManager_Fault[idx] >= 2)
 800efe4:	e040      	b.n	800f068 <SystemManager_ProcessFault+0xe0>
				else
				{
					/* do nothing */
				}
			}
			else if(idx == SOFTWARE_RESET ||
 800efe6:	79fb      	ldrb	r3, [r7, #7]
 800efe8:	2b02      	cmp	r3, #2
 800efea:	d008      	beq.n	800effe <SystemManager_ProcessFault+0x76>
 800efec:	79fb      	ldrb	r3, [r7, #7]
 800efee:	2b03      	cmp	r3, #3
 800eff0:	d005      	beq.n	800effe <SystemManager_ProcessFault+0x76>
					idx == WATCHDOG_RESET ||
 800eff2:	79fb      	ldrb	r3, [r7, #7]
 800eff4:	2b0c      	cmp	r3, #12
 800eff6:	d002      	beq.n	800effe <SystemManager_ProcessFault+0x76>
					idx == STACK_OVERFLOW_RESET ||
 800eff8:	79fb      	ldrb	r3, [r7, #7]
 800effa:	2b0d      	cmp	r3, #13
 800effc:	d108      	bne.n	800f010 <SystemManager_ProcessFault+0x88>
					idx == MALLOC_FAILED_RESET)
			{
				if(SystemManager_Fault[idx] >= 2)
 800effe:	79fb      	ldrb	r3, [r7, #7]
 800f000:	4a1f      	ldr	r2, [pc, #124]	; (800f080 <SystemManager_ProcessFault+0xf8>)
 800f002:	5cd3      	ldrb	r3, [r2, r3]
 800f004:	2b01      	cmp	r3, #1
 800f006:	d92f      	bls.n	800f068 <SystemManager_ProcessFault+0xe0>
				{
					Dem_ReceiveFault(SOFTWARE_RESET_DTC_CODE);
 800f008:	2035      	movs	r0, #53	; 0x35
 800f00a:	f7f4 fd97 	bl	8003b3c <Dem_ReceiveFault>
				if(SystemManager_Fault[idx] >= 2)
 800f00e:	e02b      	b.n	800f068 <SystemManager_ProcessFault+0xe0>
				else
				{
					/* do nothing */
				}
			}
			else if(idx == ADC_ERROR_INTERNAL ||
 800f010:	79fb      	ldrb	r3, [r7, #7]
 800f012:	2b0e      	cmp	r3, #14
 800f014:	d020      	beq.n	800f058 <SystemManager_ProcessFault+0xd0>
 800f016:	79fb      	ldrb	r3, [r7, #7]
 800f018:	2b0f      	cmp	r3, #15
 800f01a:	d01d      	beq.n	800f058 <SystemManager_ProcessFault+0xd0>
					idx == ADC_ERROR_OVR ||
 800f01c:	79fb      	ldrb	r3, [r7, #7]
 800f01e:	2b10      	cmp	r3, #16
 800f020:	d01a      	beq.n	800f058 <SystemManager_ProcessFault+0xd0>
					idx == ADC_ERROR_DMA ||
 800f022:	79fb      	ldrb	r3, [r7, #7]
 800f024:	2b11      	cmp	r3, #17
 800f026:	d017      	beq.n	800f058 <SystemManager_ProcessFault+0xd0>
					idx == UART_ERROR_PE ||
 800f028:	79fb      	ldrb	r3, [r7, #7]
 800f02a:	2b12      	cmp	r3, #18
 800f02c:	d014      	beq.n	800f058 <SystemManager_ProcessFault+0xd0>
					idx == UART_ERROR_NE ||
 800f02e:	79fb      	ldrb	r3, [r7, #7]
 800f030:	2b13      	cmp	r3, #19
 800f032:	d011      	beq.n	800f058 <SystemManager_ProcessFault+0xd0>
					idx == UART_ERROR_FE ||
 800f034:	79fb      	ldrb	r3, [r7, #7]
 800f036:	2b14      	cmp	r3, #20
 800f038:	d00e      	beq.n	800f058 <SystemManager_ProcessFault+0xd0>
					idx == UART_ERROR_ORE ||
 800f03a:	79fb      	ldrb	r3, [r7, #7]
 800f03c:	2b15      	cmp	r3, #21
 800f03e:	d00b      	beq.n	800f058 <SystemManager_ProcessFault+0xd0>
					idx == UART_ERROR_DMA ||
 800f040:	79fb      	ldrb	r3, [r7, #7]
 800f042:	2b16      	cmp	r3, #22
 800f044:	d008      	beq.n	800f058 <SystemManager_ProcessFault+0xd0>
					idx == TIMER2_ERROR ||
 800f046:	79fb      	ldrb	r3, [r7, #7]
 800f048:	2b17      	cmp	r3, #23
 800f04a:	d005      	beq.n	800f058 <SystemManager_ProcessFault+0xd0>
					idx == TIMER3_ERROR ||
 800f04c:	79fb      	ldrb	r3, [r7, #7]
 800f04e:	2b18      	cmp	r3, #24
 800f050:	d002      	beq.n	800f058 <SystemManager_ProcessFault+0xd0>
					idx == TIMER4_ERROR ||
 800f052:	79fb      	ldrb	r3, [r7, #7]
 800f054:	2b19      	cmp	r3, #25
 800f056:	d107      	bne.n	800f068 <SystemManager_ProcessFault+0xe0>
					idx == TIMER5_ERROR)
			{
				if(SystemManager_Fault[idx] >= 2)
 800f058:	79fb      	ldrb	r3, [r7, #7]
 800f05a:	4a09      	ldr	r2, [pc, #36]	; (800f080 <SystemManager_ProcessFault+0xf8>)
 800f05c:	5cd3      	ldrb	r3, [r2, r3]
 800f05e:	2b01      	cmp	r3, #1
 800f060:	d902      	bls.n	800f068 <SystemManager_ProcessFault+0xe0>
				{
					Dem_ReceiveFault(PERIPHERAL_ERROR_DTC_CODE);
 800f062:	2099      	movs	r0, #153	; 0x99
 800f064:	f7f4 fd6a 	bl	8003b3c <Dem_ReceiveFault>
	for(uint8 idx = STD_LOW ; idx < 26; idx++)
 800f068:	79fb      	ldrb	r3, [r7, #7]
 800f06a:	3301      	adds	r3, #1
 800f06c:	71fb      	strb	r3, [r7, #7]
 800f06e:	79fb      	ldrb	r3, [r7, #7]
 800f070:	2b19      	cmp	r3, #25
 800f072:	d98f      	bls.n	800ef94 <SystemManager_ProcessFault+0xc>
		else
		{
			/* do nothing */
		}
	}
}
 800f074:	bf00      	nop
 800f076:	bf00      	nop
 800f078:	3708      	adds	r7, #8
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}
 800f07e:	bf00      	nop
 800f080:	20005ff4 	.word	0x20005ff4

0800f084 <SystemManager_Init>:
/***********************************************************************************
* Function: SystemManager_Init													   *
* Description: Initialize the system.  		   									   *
************************************************************************************/
VOID SystemManager_Init()
{
 800f084:	b580      	push	{r7, lr}
 800f086:	af00      	add	r7, sp, #0
	/* Perform system initialization sequence. */
	HAL_Init();
 800f088:	f7f4 fdde 	bl	8003c48 <HAL_Init>
	SystemClock_Config();
 800f08c:	f000 f892 	bl	800f1b4 <SystemClock_Config>
}
 800f090:	bf00      	nop
 800f092:	bd80      	pop	{r7, pc}

0800f094 <SystemManager_DeInit>:
/***********************************************************************************
* Function: SystemManager_DeInit												   *
* Description: De-initialize the system.  		   								   *
************************************************************************************/
VOID SystemManager_DeInit()
{
 800f094:	b580      	push	{r7, lr}
 800f096:	af00      	add	r7, sp, #0
	HAL_DeInit();
 800f098:	f7f4 fdf8 	bl	8003c8c <HAL_DeInit>
}
 800f09c:	bf00      	nop
 800f09e:	bd80      	pop	{r7, pc}

0800f0a0 <SystemManager_SetFault>:
/***********************************************************************************
* Function: SystemManager_SetFault										   		   *
* Description: Set the fault in the system.		 		   						   *
************************************************************************************/
StdReturnType SystemManager_SetFault(uint8 faultType)
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b085      	sub	sp, #20
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	71fb      	strb	r3, [r7, #7]
	/* Store the fault into the data type. */
	for(uint8 index = 0; index < 14; index++)
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	73fb      	strb	r3, [r7, #15]
 800f0ae:	e00d      	b.n	800f0cc <SystemManager_SetFault+0x2c>
	{
		if(faultType == index)
 800f0b0:	79fa      	ldrb	r2, [r7, #7]
 800f0b2:	7bfb      	ldrb	r3, [r7, #15]
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d106      	bne.n	800f0c6 <SystemManager_SetFault+0x26>
		{
			SystemManager_Fault[index]++;
 800f0b8:	7bfb      	ldrb	r3, [r7, #15]
 800f0ba:	4a09      	ldr	r2, [pc, #36]	; (800f0e0 <SystemManager_SetFault+0x40>)
 800f0bc:	5cd2      	ldrb	r2, [r2, r3]
 800f0be:	3201      	adds	r2, #1
 800f0c0:	b2d1      	uxtb	r1, r2
 800f0c2:	4a07      	ldr	r2, [pc, #28]	; (800f0e0 <SystemManager_SetFault+0x40>)
 800f0c4:	54d1      	strb	r1, [r2, r3]
	for(uint8 index = 0; index < 14; index++)
 800f0c6:	7bfb      	ldrb	r3, [r7, #15]
 800f0c8:	3301      	adds	r3, #1
 800f0ca:	73fb      	strb	r3, [r7, #15]
 800f0cc:	7bfb      	ldrb	r3, [r7, #15]
 800f0ce:	2b0d      	cmp	r3, #13
 800f0d0:	d9ee      	bls.n	800f0b0 <SystemManager_SetFault+0x10>
		else
		{
			/* do nothing */
		}
	}
	return E_OK;
 800f0d2:	2300      	movs	r3, #0
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3714      	adds	r7, #20
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0de:	4770      	bx	lr
 800f0e0:	20005ff4 	.word	0x20005ff4

0800f0e4 <SystemManager_MainFunction>:
/***********************************************************************************
* Function: SystemManager_MainFunction									   		   *
* Description: System main function.									 		   *
************************************************************************************/
VOID SystemManager_MainFunction()
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	af00      	add	r7, sp, #0
	SystemManager_ProcessFault();
 800f0e8:	f7ff ff4e 	bl	800ef88 <SystemManager_ProcessFault>
}
 800f0ec:	bf00      	nop
 800f0ee:	bd80      	pop	{r7, pc}

0800f0f0 <SystemManager_PerformReset>:
/***********************************************************************************
* Function: SystemManager_PerformReset									   		   *
* Description: Perform system reset.		 		   							   *
************************************************************************************/
VOID SystemManager_PerformReset()
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 800f0f4:	f7f5 fd39 	bl	8004b6a <HAL_NVIC_SystemReset>
}
 800f0f8:	bf00      	nop
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <MX_NVIC_Init>:
* Function: MX_NVIC_Init													   	   *
* Description: Initialize the nested vector interrupt controller with configured   *
* 			   values.		 		   											   *
************************************************************************************/
VOID MX_NVIC_Init(VOID)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	af00      	add	r7, sp, #0
	/* TIM5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM5_IRQn, 15, 0);
 800f100:	2200      	movs	r2, #0
 800f102:	210f      	movs	r1, #15
 800f104:	2032      	movs	r0, #50	; 0x32
 800f106:	f7f5 fcf8 	bl	8004afa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800f10a:	2032      	movs	r0, #50	; 0x32
 800f10c:	f7f5 fd11 	bl	8004b32 <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 15, 0);
 800f110:	2200      	movs	r2, #0
 800f112:	210f      	movs	r1, #15
 800f114:	2012      	movs	r0, #18
 800f116:	f7f5 fcf0 	bl	8004afa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 800f11a:	2012      	movs	r0, #18
 800f11c:	f7f5 fd09 	bl	8004b32 <HAL_NVIC_EnableIRQ>
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800f120:	2200      	movs	r2, #0
 800f122:	210f      	movs	r1, #15
 800f124:	201c      	movs	r0, #28
 800f126:	f7f5 fce8 	bl	8004afa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800f12a:	201c      	movs	r0, #28
 800f12c:	f7f5 fd01 	bl	8004b32 <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 800f130:	2200      	movs	r2, #0
 800f132:	210f      	movs	r1, #15
 800f134:	201d      	movs	r0, #29
 800f136:	f7f5 fce0 	bl	8004afa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800f13a:	201d      	movs	r0, #29
 800f13c:	f7f5 fcf9 	bl	8004b32 <HAL_NVIC_EnableIRQ>
	/* TIM4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 800f140:	2200      	movs	r2, #0
 800f142:	210f      	movs	r1, #15
 800f144:	201e      	movs	r0, #30
 800f146:	f7f5 fcd8 	bl	8004afa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800f14a:	201e      	movs	r0, #30
 800f14c:	f7f5 fcf1 	bl	8004b32 <HAL_NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 800f150:	2200      	movs	r2, #0
 800f152:	210f      	movs	r1, #15
 800f154:	2025      	movs	r0, #37	; 0x25
 800f156:	f7f5 fcd0 	bl	8004afa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 800f15a:	2025      	movs	r0, #37	; 0x25
 800f15c:	f7f5 fce9 	bl	8004b32 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 15, 0);
 800f160:	2200      	movs	r2, #0
 800f162:	210f      	movs	r1, #15
 800f164:	2038      	movs	r0, #56	; 0x38
 800f166:	f7f5 fcc8 	bl	8004afa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800f16a:	2038      	movs	r0, #56	; 0x38
 800f16c:	f7f5 fce1 	bl	8004b32 <HAL_NVIC_EnableIRQ>
	/* RCC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RCC_IRQn, 15, 0);
 800f170:	2200      	movs	r2, #0
 800f172:	210f      	movs	r1, #15
 800f174:	2005      	movs	r0, #5
 800f176:	f7f5 fcc0 	bl	8004afa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RCC_IRQn);
 800f17a:	2005      	movs	r0, #5
 800f17c:	f7f5 fcd9 	bl	8004b32 <HAL_NVIC_EnableIRQ>
	/* FLASH_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FLASH_IRQn, 15, 0);
 800f180:	2200      	movs	r2, #0
 800f182:	210f      	movs	r1, #15
 800f184:	2004      	movs	r0, #4
 800f186:	f7f5 fcb8 	bl	8004afa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800f18a:	2004      	movs	r0, #4
 800f18c:	f7f5 fcd1 	bl	8004b32 <HAL_NVIC_EnableIRQ>
	/* PVD_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PVD_IRQn, 15, 0);
 800f190:	2200      	movs	r2, #0
 800f192:	210f      	movs	r1, #15
 800f194:	2001      	movs	r0, #1
 800f196:	f7f5 fcb0 	bl	8004afa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(PVD_IRQn);
 800f19a:	2001      	movs	r0, #1
 800f19c:	f7f5 fcc9 	bl	8004b32 <HAL_NVIC_EnableIRQ>
	/* FPU_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FPU_IRQn, 15, 0);
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	210f      	movs	r1, #15
 800f1a4:	2051      	movs	r0, #81	; 0x51
 800f1a6:	f7f5 fca8 	bl	8004afa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FPU_IRQn);
 800f1aa:	2051      	movs	r0, #81	; 0x51
 800f1ac:	f7f5 fcc1 	bl	8004b32 <HAL_NVIC_EnableIRQ>
}
 800f1b0:	bf00      	nop
 800f1b2:	bd80      	pop	{r7, pc}

0800f1b4 <SystemClock_Config>:
/***********************************************************************************
* Function: SystemClock_Config													   *
* Description: Initialize the system clock.		 		   						   *
************************************************************************************/
VOID SystemClock_Config(VOID)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b094      	sub	sp, #80	; 0x50
 800f1b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f1ba:	f107 0320 	add.w	r3, r7, #32
 800f1be:	2230      	movs	r2, #48	; 0x30
 800f1c0:	2100      	movs	r1, #0
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f000 f8c8 	bl	800f358 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800f1c8:	f107 030c 	add.w	r3, r7, #12
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	601a      	str	r2, [r3, #0]
 800f1d0:	605a      	str	r2, [r3, #4]
 800f1d2:	609a      	str	r2, [r3, #8]
 800f1d4:	60da      	str	r2, [r3, #12]
 800f1d6:	611a      	str	r2, [r3, #16]
	__HAL_RCC_PWR_CLK_ENABLE();
 800f1d8:	2300      	movs	r3, #0
 800f1da:	60bb      	str	r3, [r7, #8]
 800f1dc:	4b28      	ldr	r3, [pc, #160]	; (800f280 <SystemClock_Config+0xcc>)
 800f1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1e0:	4a27      	ldr	r2, [pc, #156]	; (800f280 <SystemClock_Config+0xcc>)
 800f1e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f1e6:	6413      	str	r3, [r2, #64]	; 0x40
 800f1e8:	4b25      	ldr	r3, [pc, #148]	; (800f280 <SystemClock_Config+0xcc>)
 800f1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f1f0:	60bb      	str	r3, [r7, #8]
 800f1f2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	607b      	str	r3, [r7, #4]
 800f1f8:	4b22      	ldr	r3, [pc, #136]	; (800f284 <SystemClock_Config+0xd0>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	4a21      	ldr	r2, [pc, #132]	; (800f284 <SystemClock_Config+0xd0>)
 800f1fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f202:	6013      	str	r3, [r2, #0]
 800f204:	4b1f      	ldr	r3, [pc, #124]	; (800f284 <SystemClock_Config+0xd0>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f20c:	607b      	str	r3, [r7, #4]
 800f20e:	687b      	ldr	r3, [r7, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800f210:	2309      	movs	r3, #9
 800f212:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f214:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f218:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800f21a:	2301      	movs	r3, #1
 800f21c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f21e:	2302      	movs	r3, #2
 800f220:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f222:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f226:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800f228:	2304      	movs	r3, #4
 800f22a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 800f22c:	2364      	movs	r3, #100	; 0x64
 800f22e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800f230:	2302      	movs	r3, #2
 800f232:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800f234:	2304      	movs	r3, #4
 800f236:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f238:	f107 0320 	add.w	r3, r7, #32
 800f23c:	4618      	mov	r0, r3
 800f23e:	f7f6 fe35 	bl	8005eac <HAL_RCC_OscConfig>
 800f242:	4603      	mov	r3, r0
 800f244:	2b00      	cmp	r3, #0
 800f246:	d001      	beq.n	800f24c <SystemClock_Config+0x98>
	{
		Error_Handler();
 800f248:	f000 f81e 	bl	800f288 <Error_Handler>
	}
	else
	{
		/* do nothing */
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 800f24c:	230f      	movs	r3, #15
 800f24e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f250:	2302      	movs	r3, #2
 800f252:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f254:	2300      	movs	r3, #0
 800f256:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800f258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f25c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800f25e:	2300      	movs	r3, #0
 800f260:	61fb      	str	r3, [r7, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800f262:	f107 030c 	add.w	r3, r7, #12
 800f266:	2103      	movs	r1, #3
 800f268:	4618      	mov	r0, r3
 800f26a:	f7f7 f897 	bl	800639c <HAL_RCC_ClockConfig>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d001      	beq.n	800f278 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 800f274:	f000 f808 	bl	800f288 <Error_Handler>
	}
	else
	{
		/* do nothing */
	}
}
 800f278:	bf00      	nop
 800f27a:	3750      	adds	r7, #80	; 0x50
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}
 800f280:	40023800 	.word	0x40023800
 800f284:	40007000 	.word	0x40007000

0800f288 <Error_Handler>:
/***********************************************************************************
* Function: Error_Handler													   	   *
* Description: Perform system reset in case of system fault.			 		   *
************************************************************************************/
VOID Error_Handler(VOID)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800f28c:	b672      	cpsid	i
}
 800f28e:	bf00      	nop
	__disable_irq();
	SystemManager_PerformReset();
 800f290:	f7ff ff2e 	bl	800f0f0 <SystemManager_PerformReset>
	while (1)
 800f294:	e7fe      	b.n	800f294 <Error_Handler+0xc>
	...

0800f298 <Watchdog_Init>:
/***********************************************************************************
* Function: Watchdog_Init									   		       		   *
* Description: Peripheral initialization.							 		   	   *
************************************************************************************/
StdReturnType Watchdog_Init()
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	af00      	add	r7, sp, #0
	hiwdg.Instance = IWDG;
 800f29c:	4b09      	ldr	r3, [pc, #36]	; (800f2c4 <Watchdog_Init+0x2c>)
 800f29e:	4a0a      	ldr	r2, [pc, #40]	; (800f2c8 <Watchdog_Init+0x30>)
 800f2a0:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 800f2a2:	4b08      	ldr	r3, [pc, #32]	; (800f2c4 <Watchdog_Init+0x2c>)
 800f2a4:	2205      	movs	r2, #5
 800f2a6:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 31;
 800f2a8:	4b06      	ldr	r3, [pc, #24]	; (800f2c4 <Watchdog_Init+0x2c>)
 800f2aa:	221f      	movs	r2, #31
 800f2ac:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800f2ae:	4805      	ldr	r0, [pc, #20]	; (800f2c4 <Watchdog_Init+0x2c>)
 800f2b0:	f7f6 fd8f 	bl	8005dd2 <HAL_IWDG_Init>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d001      	beq.n	800f2be <Watchdog_Init+0x26>
	{
		Error_Handler();
 800f2ba:	f7ff ffe5 	bl	800f288 <Error_Handler>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 800f2be:	2300      	movs	r3, #0
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	bd80      	pop	{r7, pc}
 800f2c4:	2000026c 	.word	0x2000026c
 800f2c8:	40003000 	.word	0x40003000

0800f2cc <Watchdog_MainFunction>:
/***********************************************************************************
* Function: Watchdog_MainFunction									   		       *
* Description: Peripheral main function.							 		       *
************************************************************************************/
VOID Watchdog_MainFunction()
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 800f2d0:	4802      	ldr	r0, [pc, #8]	; (800f2dc <Watchdog_MainFunction+0x10>)
 800f2d2:	f7f6 fdc0 	bl	8005e56 <HAL_IWDG_Refresh>
}
 800f2d6:	bf00      	nop
 800f2d8:	bd80      	pop	{r7, pc}
 800f2da:	bf00      	nop
 800f2dc:	2000026c 	.word	0x2000026c

0800f2e0 <atoi>:
 800f2e0:	220a      	movs	r2, #10
 800f2e2:	2100      	movs	r1, #0
 800f2e4:	f000 b978 	b.w	800f5d8 <strtol>

0800f2e8 <__errno>:
 800f2e8:	4b01      	ldr	r3, [pc, #4]	; (800f2f0 <__errno+0x8>)
 800f2ea:	6818      	ldr	r0, [r3, #0]
 800f2ec:	4770      	bx	lr
 800f2ee:	bf00      	nop
 800f2f0:	2000002c 	.word	0x2000002c

0800f2f4 <__libc_init_array>:
 800f2f4:	b570      	push	{r4, r5, r6, lr}
 800f2f6:	4d0d      	ldr	r5, [pc, #52]	; (800f32c <__libc_init_array+0x38>)
 800f2f8:	4c0d      	ldr	r4, [pc, #52]	; (800f330 <__libc_init_array+0x3c>)
 800f2fa:	1b64      	subs	r4, r4, r5
 800f2fc:	10a4      	asrs	r4, r4, #2
 800f2fe:	2600      	movs	r6, #0
 800f300:	42a6      	cmp	r6, r4
 800f302:	d109      	bne.n	800f318 <__libc_init_array+0x24>
 800f304:	4d0b      	ldr	r5, [pc, #44]	; (800f334 <__libc_init_array+0x40>)
 800f306:	4c0c      	ldr	r4, [pc, #48]	; (800f338 <__libc_init_array+0x44>)
 800f308:	f000 f97c 	bl	800f604 <_init>
 800f30c:	1b64      	subs	r4, r4, r5
 800f30e:	10a4      	asrs	r4, r4, #2
 800f310:	2600      	movs	r6, #0
 800f312:	42a6      	cmp	r6, r4
 800f314:	d105      	bne.n	800f322 <__libc_init_array+0x2e>
 800f316:	bd70      	pop	{r4, r5, r6, pc}
 800f318:	f855 3b04 	ldr.w	r3, [r5], #4
 800f31c:	4798      	blx	r3
 800f31e:	3601      	adds	r6, #1
 800f320:	e7ee      	b.n	800f300 <__libc_init_array+0xc>
 800f322:	f855 3b04 	ldr.w	r3, [r5], #4
 800f326:	4798      	blx	r3
 800f328:	3601      	adds	r6, #1
 800f32a:	e7f2      	b.n	800f312 <__libc_init_array+0x1e>
 800f32c:	0800fb60 	.word	0x0800fb60
 800f330:	0800fb60 	.word	0x0800fb60
 800f334:	0800fb60 	.word	0x0800fb60
 800f338:	0800fb64 	.word	0x0800fb64

0800f33c <memcpy>:
 800f33c:	440a      	add	r2, r1
 800f33e:	4291      	cmp	r1, r2
 800f340:	f100 33ff 	add.w	r3, r0, #4294967295
 800f344:	d100      	bne.n	800f348 <memcpy+0xc>
 800f346:	4770      	bx	lr
 800f348:	b510      	push	{r4, lr}
 800f34a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f34e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f352:	4291      	cmp	r1, r2
 800f354:	d1f9      	bne.n	800f34a <memcpy+0xe>
 800f356:	bd10      	pop	{r4, pc}

0800f358 <memset>:
 800f358:	4402      	add	r2, r0
 800f35a:	4603      	mov	r3, r0
 800f35c:	4293      	cmp	r3, r2
 800f35e:	d100      	bne.n	800f362 <memset+0xa>
 800f360:	4770      	bx	lr
 800f362:	f803 1b01 	strb.w	r1, [r3], #1
 800f366:	e7f9      	b.n	800f35c <memset+0x4>

0800f368 <_free_r>:
 800f368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f36a:	2900      	cmp	r1, #0
 800f36c:	d044      	beq.n	800f3f8 <_free_r+0x90>
 800f36e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f372:	9001      	str	r0, [sp, #4]
 800f374:	2b00      	cmp	r3, #0
 800f376:	f1a1 0404 	sub.w	r4, r1, #4
 800f37a:	bfb8      	it	lt
 800f37c:	18e4      	addlt	r4, r4, r3
 800f37e:	f000 f935 	bl	800f5ec <__malloc_lock>
 800f382:	4a1e      	ldr	r2, [pc, #120]	; (800f3fc <_free_r+0x94>)
 800f384:	9801      	ldr	r0, [sp, #4]
 800f386:	6813      	ldr	r3, [r2, #0]
 800f388:	b933      	cbnz	r3, 800f398 <_free_r+0x30>
 800f38a:	6063      	str	r3, [r4, #4]
 800f38c:	6014      	str	r4, [r2, #0]
 800f38e:	b003      	add	sp, #12
 800f390:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f394:	f000 b930 	b.w	800f5f8 <__malloc_unlock>
 800f398:	42a3      	cmp	r3, r4
 800f39a:	d908      	bls.n	800f3ae <_free_r+0x46>
 800f39c:	6825      	ldr	r5, [r4, #0]
 800f39e:	1961      	adds	r1, r4, r5
 800f3a0:	428b      	cmp	r3, r1
 800f3a2:	bf01      	itttt	eq
 800f3a4:	6819      	ldreq	r1, [r3, #0]
 800f3a6:	685b      	ldreq	r3, [r3, #4]
 800f3a8:	1949      	addeq	r1, r1, r5
 800f3aa:	6021      	streq	r1, [r4, #0]
 800f3ac:	e7ed      	b.n	800f38a <_free_r+0x22>
 800f3ae:	461a      	mov	r2, r3
 800f3b0:	685b      	ldr	r3, [r3, #4]
 800f3b2:	b10b      	cbz	r3, 800f3b8 <_free_r+0x50>
 800f3b4:	42a3      	cmp	r3, r4
 800f3b6:	d9fa      	bls.n	800f3ae <_free_r+0x46>
 800f3b8:	6811      	ldr	r1, [r2, #0]
 800f3ba:	1855      	adds	r5, r2, r1
 800f3bc:	42a5      	cmp	r5, r4
 800f3be:	d10b      	bne.n	800f3d8 <_free_r+0x70>
 800f3c0:	6824      	ldr	r4, [r4, #0]
 800f3c2:	4421      	add	r1, r4
 800f3c4:	1854      	adds	r4, r2, r1
 800f3c6:	42a3      	cmp	r3, r4
 800f3c8:	6011      	str	r1, [r2, #0]
 800f3ca:	d1e0      	bne.n	800f38e <_free_r+0x26>
 800f3cc:	681c      	ldr	r4, [r3, #0]
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	6053      	str	r3, [r2, #4]
 800f3d2:	4421      	add	r1, r4
 800f3d4:	6011      	str	r1, [r2, #0]
 800f3d6:	e7da      	b.n	800f38e <_free_r+0x26>
 800f3d8:	d902      	bls.n	800f3e0 <_free_r+0x78>
 800f3da:	230c      	movs	r3, #12
 800f3dc:	6003      	str	r3, [r0, #0]
 800f3de:	e7d6      	b.n	800f38e <_free_r+0x26>
 800f3e0:	6825      	ldr	r5, [r4, #0]
 800f3e2:	1961      	adds	r1, r4, r5
 800f3e4:	428b      	cmp	r3, r1
 800f3e6:	bf04      	itt	eq
 800f3e8:	6819      	ldreq	r1, [r3, #0]
 800f3ea:	685b      	ldreq	r3, [r3, #4]
 800f3ec:	6063      	str	r3, [r4, #4]
 800f3ee:	bf04      	itt	eq
 800f3f0:	1949      	addeq	r1, r1, r5
 800f3f2:	6021      	streq	r1, [r4, #0]
 800f3f4:	6054      	str	r4, [r2, #4]
 800f3f6:	e7ca      	b.n	800f38e <_free_r+0x26>
 800f3f8:	b003      	add	sp, #12
 800f3fa:	bd30      	pop	{r4, r5, pc}
 800f3fc:	20006010 	.word	0x20006010

0800f400 <cleanup_glue>:
 800f400:	b538      	push	{r3, r4, r5, lr}
 800f402:	460c      	mov	r4, r1
 800f404:	6809      	ldr	r1, [r1, #0]
 800f406:	4605      	mov	r5, r0
 800f408:	b109      	cbz	r1, 800f40e <cleanup_glue+0xe>
 800f40a:	f7ff fff9 	bl	800f400 <cleanup_glue>
 800f40e:	4621      	mov	r1, r4
 800f410:	4628      	mov	r0, r5
 800f412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f416:	f7ff bfa7 	b.w	800f368 <_free_r>
	...

0800f41c <_reclaim_reent>:
 800f41c:	4b2c      	ldr	r3, [pc, #176]	; (800f4d0 <_reclaim_reent+0xb4>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	4283      	cmp	r3, r0
 800f422:	b570      	push	{r4, r5, r6, lr}
 800f424:	4604      	mov	r4, r0
 800f426:	d051      	beq.n	800f4cc <_reclaim_reent+0xb0>
 800f428:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f42a:	b143      	cbz	r3, 800f43e <_reclaim_reent+0x22>
 800f42c:	68db      	ldr	r3, [r3, #12]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d14a      	bne.n	800f4c8 <_reclaim_reent+0xac>
 800f432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f434:	6819      	ldr	r1, [r3, #0]
 800f436:	b111      	cbz	r1, 800f43e <_reclaim_reent+0x22>
 800f438:	4620      	mov	r0, r4
 800f43a:	f7ff ff95 	bl	800f368 <_free_r>
 800f43e:	6961      	ldr	r1, [r4, #20]
 800f440:	b111      	cbz	r1, 800f448 <_reclaim_reent+0x2c>
 800f442:	4620      	mov	r0, r4
 800f444:	f7ff ff90 	bl	800f368 <_free_r>
 800f448:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f44a:	b111      	cbz	r1, 800f452 <_reclaim_reent+0x36>
 800f44c:	4620      	mov	r0, r4
 800f44e:	f7ff ff8b 	bl	800f368 <_free_r>
 800f452:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f454:	b111      	cbz	r1, 800f45c <_reclaim_reent+0x40>
 800f456:	4620      	mov	r0, r4
 800f458:	f7ff ff86 	bl	800f368 <_free_r>
 800f45c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f45e:	b111      	cbz	r1, 800f466 <_reclaim_reent+0x4a>
 800f460:	4620      	mov	r0, r4
 800f462:	f7ff ff81 	bl	800f368 <_free_r>
 800f466:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f468:	b111      	cbz	r1, 800f470 <_reclaim_reent+0x54>
 800f46a:	4620      	mov	r0, r4
 800f46c:	f7ff ff7c 	bl	800f368 <_free_r>
 800f470:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f472:	b111      	cbz	r1, 800f47a <_reclaim_reent+0x5e>
 800f474:	4620      	mov	r0, r4
 800f476:	f7ff ff77 	bl	800f368 <_free_r>
 800f47a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f47c:	b111      	cbz	r1, 800f484 <_reclaim_reent+0x68>
 800f47e:	4620      	mov	r0, r4
 800f480:	f7ff ff72 	bl	800f368 <_free_r>
 800f484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f486:	b111      	cbz	r1, 800f48e <_reclaim_reent+0x72>
 800f488:	4620      	mov	r0, r4
 800f48a:	f7ff ff6d 	bl	800f368 <_free_r>
 800f48e:	69a3      	ldr	r3, [r4, #24]
 800f490:	b1e3      	cbz	r3, 800f4cc <_reclaim_reent+0xb0>
 800f492:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f494:	4620      	mov	r0, r4
 800f496:	4798      	blx	r3
 800f498:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f49a:	b1b9      	cbz	r1, 800f4cc <_reclaim_reent+0xb0>
 800f49c:	4620      	mov	r0, r4
 800f49e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f4a2:	f7ff bfad 	b.w	800f400 <cleanup_glue>
 800f4a6:	5949      	ldr	r1, [r1, r5]
 800f4a8:	b941      	cbnz	r1, 800f4bc <_reclaim_reent+0xa0>
 800f4aa:	3504      	adds	r5, #4
 800f4ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4ae:	2d80      	cmp	r5, #128	; 0x80
 800f4b0:	68d9      	ldr	r1, [r3, #12]
 800f4b2:	d1f8      	bne.n	800f4a6 <_reclaim_reent+0x8a>
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	f7ff ff57 	bl	800f368 <_free_r>
 800f4ba:	e7ba      	b.n	800f432 <_reclaim_reent+0x16>
 800f4bc:	680e      	ldr	r6, [r1, #0]
 800f4be:	4620      	mov	r0, r4
 800f4c0:	f7ff ff52 	bl	800f368 <_free_r>
 800f4c4:	4631      	mov	r1, r6
 800f4c6:	e7ef      	b.n	800f4a8 <_reclaim_reent+0x8c>
 800f4c8:	2500      	movs	r5, #0
 800f4ca:	e7ef      	b.n	800f4ac <_reclaim_reent+0x90>
 800f4cc:	bd70      	pop	{r4, r5, r6, pc}
 800f4ce:	bf00      	nop
 800f4d0:	2000002c 	.word	0x2000002c

0800f4d4 <_strtol_l.constprop.0>:
 800f4d4:	2b01      	cmp	r3, #1
 800f4d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4da:	d001      	beq.n	800f4e0 <_strtol_l.constprop.0+0xc>
 800f4dc:	2b24      	cmp	r3, #36	; 0x24
 800f4de:	d906      	bls.n	800f4ee <_strtol_l.constprop.0+0x1a>
 800f4e0:	f7ff ff02 	bl	800f2e8 <__errno>
 800f4e4:	2316      	movs	r3, #22
 800f4e6:	6003      	str	r3, [r0, #0]
 800f4e8:	2000      	movs	r0, #0
 800f4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f5d4 <_strtol_l.constprop.0+0x100>
 800f4f2:	460d      	mov	r5, r1
 800f4f4:	462e      	mov	r6, r5
 800f4f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f4fa:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f4fe:	f017 0708 	ands.w	r7, r7, #8
 800f502:	d1f7      	bne.n	800f4f4 <_strtol_l.constprop.0+0x20>
 800f504:	2c2d      	cmp	r4, #45	; 0x2d
 800f506:	d132      	bne.n	800f56e <_strtol_l.constprop.0+0x9a>
 800f508:	782c      	ldrb	r4, [r5, #0]
 800f50a:	2701      	movs	r7, #1
 800f50c:	1cb5      	adds	r5, r6, #2
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d05b      	beq.n	800f5ca <_strtol_l.constprop.0+0xf6>
 800f512:	2b10      	cmp	r3, #16
 800f514:	d109      	bne.n	800f52a <_strtol_l.constprop.0+0x56>
 800f516:	2c30      	cmp	r4, #48	; 0x30
 800f518:	d107      	bne.n	800f52a <_strtol_l.constprop.0+0x56>
 800f51a:	782c      	ldrb	r4, [r5, #0]
 800f51c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f520:	2c58      	cmp	r4, #88	; 0x58
 800f522:	d14d      	bne.n	800f5c0 <_strtol_l.constprop.0+0xec>
 800f524:	786c      	ldrb	r4, [r5, #1]
 800f526:	2310      	movs	r3, #16
 800f528:	3502      	adds	r5, #2
 800f52a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f52e:	f108 38ff 	add.w	r8, r8, #4294967295
 800f532:	f04f 0c00 	mov.w	ip, #0
 800f536:	fbb8 f9f3 	udiv	r9, r8, r3
 800f53a:	4666      	mov	r6, ip
 800f53c:	fb03 8a19 	mls	sl, r3, r9, r8
 800f540:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f544:	f1be 0f09 	cmp.w	lr, #9
 800f548:	d816      	bhi.n	800f578 <_strtol_l.constprop.0+0xa4>
 800f54a:	4674      	mov	r4, lr
 800f54c:	42a3      	cmp	r3, r4
 800f54e:	dd24      	ble.n	800f59a <_strtol_l.constprop.0+0xc6>
 800f550:	f1bc 0f00 	cmp.w	ip, #0
 800f554:	db1e      	blt.n	800f594 <_strtol_l.constprop.0+0xc0>
 800f556:	45b1      	cmp	r9, r6
 800f558:	d31c      	bcc.n	800f594 <_strtol_l.constprop.0+0xc0>
 800f55a:	d101      	bne.n	800f560 <_strtol_l.constprop.0+0x8c>
 800f55c:	45a2      	cmp	sl, r4
 800f55e:	db19      	blt.n	800f594 <_strtol_l.constprop.0+0xc0>
 800f560:	fb06 4603 	mla	r6, r6, r3, r4
 800f564:	f04f 0c01 	mov.w	ip, #1
 800f568:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f56c:	e7e8      	b.n	800f540 <_strtol_l.constprop.0+0x6c>
 800f56e:	2c2b      	cmp	r4, #43	; 0x2b
 800f570:	bf04      	itt	eq
 800f572:	782c      	ldrbeq	r4, [r5, #0]
 800f574:	1cb5      	addeq	r5, r6, #2
 800f576:	e7ca      	b.n	800f50e <_strtol_l.constprop.0+0x3a>
 800f578:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f57c:	f1be 0f19 	cmp.w	lr, #25
 800f580:	d801      	bhi.n	800f586 <_strtol_l.constprop.0+0xb2>
 800f582:	3c37      	subs	r4, #55	; 0x37
 800f584:	e7e2      	b.n	800f54c <_strtol_l.constprop.0+0x78>
 800f586:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f58a:	f1be 0f19 	cmp.w	lr, #25
 800f58e:	d804      	bhi.n	800f59a <_strtol_l.constprop.0+0xc6>
 800f590:	3c57      	subs	r4, #87	; 0x57
 800f592:	e7db      	b.n	800f54c <_strtol_l.constprop.0+0x78>
 800f594:	f04f 3cff 	mov.w	ip, #4294967295
 800f598:	e7e6      	b.n	800f568 <_strtol_l.constprop.0+0x94>
 800f59a:	f1bc 0f00 	cmp.w	ip, #0
 800f59e:	da05      	bge.n	800f5ac <_strtol_l.constprop.0+0xd8>
 800f5a0:	2322      	movs	r3, #34	; 0x22
 800f5a2:	6003      	str	r3, [r0, #0]
 800f5a4:	4646      	mov	r6, r8
 800f5a6:	b942      	cbnz	r2, 800f5ba <_strtol_l.constprop.0+0xe6>
 800f5a8:	4630      	mov	r0, r6
 800f5aa:	e79e      	b.n	800f4ea <_strtol_l.constprop.0+0x16>
 800f5ac:	b107      	cbz	r7, 800f5b0 <_strtol_l.constprop.0+0xdc>
 800f5ae:	4276      	negs	r6, r6
 800f5b0:	2a00      	cmp	r2, #0
 800f5b2:	d0f9      	beq.n	800f5a8 <_strtol_l.constprop.0+0xd4>
 800f5b4:	f1bc 0f00 	cmp.w	ip, #0
 800f5b8:	d000      	beq.n	800f5bc <_strtol_l.constprop.0+0xe8>
 800f5ba:	1e69      	subs	r1, r5, #1
 800f5bc:	6011      	str	r1, [r2, #0]
 800f5be:	e7f3      	b.n	800f5a8 <_strtol_l.constprop.0+0xd4>
 800f5c0:	2430      	movs	r4, #48	; 0x30
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d1b1      	bne.n	800f52a <_strtol_l.constprop.0+0x56>
 800f5c6:	2308      	movs	r3, #8
 800f5c8:	e7af      	b.n	800f52a <_strtol_l.constprop.0+0x56>
 800f5ca:	2c30      	cmp	r4, #48	; 0x30
 800f5cc:	d0a5      	beq.n	800f51a <_strtol_l.constprop.0+0x46>
 800f5ce:	230a      	movs	r3, #10
 800f5d0:	e7ab      	b.n	800f52a <_strtol_l.constprop.0+0x56>
 800f5d2:	bf00      	nop
 800f5d4:	0800fa55 	.word	0x0800fa55

0800f5d8 <strtol>:
 800f5d8:	4613      	mov	r3, r2
 800f5da:	460a      	mov	r2, r1
 800f5dc:	4601      	mov	r1, r0
 800f5de:	4802      	ldr	r0, [pc, #8]	; (800f5e8 <strtol+0x10>)
 800f5e0:	6800      	ldr	r0, [r0, #0]
 800f5e2:	f7ff bf77 	b.w	800f4d4 <_strtol_l.constprop.0>
 800f5e6:	bf00      	nop
 800f5e8:	2000002c 	.word	0x2000002c

0800f5ec <__malloc_lock>:
 800f5ec:	4801      	ldr	r0, [pc, #4]	; (800f5f4 <__malloc_lock+0x8>)
 800f5ee:	f7f4 ba50 	b.w	8003a92 <__retarget_lock_acquire_recursive>
 800f5f2:	bf00      	nop
 800f5f4:	20000670 	.word	0x20000670

0800f5f8 <__malloc_unlock>:
 800f5f8:	4801      	ldr	r0, [pc, #4]	; (800f600 <__malloc_unlock+0x8>)
 800f5fa:	f7f4 ba5e 	b.w	8003aba <__retarget_lock_release_recursive>
 800f5fe:	bf00      	nop
 800f600:	20000670 	.word	0x20000670

0800f604 <_init>:
 800f604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f606:	bf00      	nop
 800f608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f60a:	bc08      	pop	{r3}
 800f60c:	469e      	mov	lr, r3
 800f60e:	4770      	bx	lr

0800f610 <_fini>:
 800f610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f612:	bf00      	nop
 800f614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f616:	bc08      	pop	{r3}
 800f618:	469e      	mov	lr, r3
 800f61a:	4770      	bx	lr
