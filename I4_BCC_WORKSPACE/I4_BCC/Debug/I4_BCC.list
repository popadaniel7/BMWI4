
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  0800ee3c  0800ee3c  0001ee3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f614  0800f614  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800f614  0800f614  0001f614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f61c  0800f61c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f61c  0800f61c  0001f61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f620  0800f620  0001f620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800f624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052d0  20000078  0800f69c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005348  0800f69c  00025348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002db8e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ab4  00000000  00000000  0004dc36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002480  00000000  00000000  000546f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021b0  00000000  00000000  00056b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021590  00000000  00000000  00058d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003aa8d  00000000  00000000  0007a2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b59d8  00000000  00000000  000b4d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016a715  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009788  00000000  00000000  0016a768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ee24 	.word	0x0800ee24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800ee24 	.word	0x0800ee24

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <BtcRxVal>:
	return E_OK;

}

StdReturnType BtcRxVal()
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

	if(BtcReceivedDataOnBluetooth >= 116 && BtcReceivedDataOnBluetooth <= 132)
 80004e8:	4bec      	ldr	r3, [pc, #944]	; (800089c <BtcRxVal+0x3b8>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b73      	cmp	r3, #115	; 0x73
 80004ee:	d90a      	bls.n	8000506 <BtcRxVal+0x22>
 80004f0:	4bea      	ldr	r3, [pc, #936]	; (800089c <BtcRxVal+0x3b8>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b84      	cmp	r3, #132	; 0x84
 80004f6:	d806      	bhi.n	8000506 <BtcRxVal+0x22>
	{

		Btc_TemperatureValue = BtcReceivedDataOnBluetooth - 100;
 80004f8:	4be8      	ldr	r3, [pc, #928]	; (800089c <BtcRxVal+0x3b8>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	3b64      	subs	r3, #100	; 0x64
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	4be7      	ldr	r3, [pc, #924]	; (80008a0 <BtcRxVal+0x3bc>)
 8000502:	701a      	strb	r2, [r3, #0]
 8000504:	e00d      	b.n	8000522 <BtcRxVal+0x3e>

	}
	else if(BtcReceivedDataOnBluetooth >= 150 && BtcReceivedDataOnBluetooth <= 157)
 8000506:	4be5      	ldr	r3, [pc, #916]	; (800089c <BtcRxVal+0x3b8>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b95      	cmp	r3, #149	; 0x95
 800050c:	d909      	bls.n	8000522 <BtcRxVal+0x3e>
 800050e:	4be3      	ldr	r3, [pc, #908]	; (800089c <BtcRxVal+0x3b8>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b9d      	cmp	r3, #157	; 0x9d
 8000514:	d805      	bhi.n	8000522 <BtcRxVal+0x3e>
	{

		Btc_FanValue = BtcReceivedDataOnBluetooth - 150;
 8000516:	4be1      	ldr	r3, [pc, #900]	; (800089c <BtcRxVal+0x3b8>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	336a      	adds	r3, #106	; 0x6a
 800051c:	b2da      	uxtb	r2, r3
 800051e:	4be1      	ldr	r3, [pc, #900]	; (80008a4 <BtcRxVal+0x3c0>)
 8000520:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	switch(BtcReceivedDataOnBluetooth)
 8000522:	4bde      	ldr	r3, [pc, #888]	; (800089c <BtcRxVal+0x3b8>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	3b01      	subs	r3, #1
 8000528:	2bd5      	cmp	r3, #213	; 0xd5
 800052a:	f200 8297 	bhi.w	8000a5c <BtcRxVal+0x578>
 800052e:	a201      	add	r2, pc, #4	; (adr r2, 8000534 <BtcRxVal+0x50>)
 8000530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000534:	080008cd 	.word	0x080008cd
 8000538:	080008d5 	.word	0x080008d5
 800053c:	080008dd 	.word	0x080008dd
 8000540:	080008eb 	.word	0x080008eb
 8000544:	080008f3 	.word	0x080008f3
 8000548:	08000901 	.word	0x08000901
 800054c:	08000909 	.word	0x08000909
 8000550:	08000917 	.word	0x08000917
 8000554:	0800091f 	.word	0x0800091f
 8000558:	0800092d 	.word	0x0800092d
 800055c:	08000935 	.word	0x08000935
 8000560:	0800093d 	.word	0x0800093d
 8000564:	08000945 	.word	0x08000945
 8000568:	0800094d 	.word	0x0800094d
 800056c:	08000955 	.word	0x08000955
 8000570:	0800095d 	.word	0x0800095d
 8000574:	08000965 	.word	0x08000965
 8000578:	0800096d 	.word	0x0800096d
 800057c:	08000975 	.word	0x08000975
 8000580:	0800097d 	.word	0x0800097d
 8000584:	0800088d 	.word	0x0800088d
 8000588:	08000895 	.word	0x08000895
 800058c:	08000a5d 	.word	0x08000a5d
 8000590:	08000a5d 	.word	0x08000a5d
 8000594:	08000a5d 	.word	0x08000a5d
 8000598:	08000a5d 	.word	0x08000a5d
 800059c:	08000a5d 	.word	0x08000a5d
 80005a0:	08000a5d 	.word	0x08000a5d
 80005a4:	08000a5d 	.word	0x08000a5d
 80005a8:	08000a5d 	.word	0x08000a5d
 80005ac:	08000a5d 	.word	0x08000a5d
 80005b0:	08000a5d 	.word	0x08000a5d
 80005b4:	08000a5d 	.word	0x08000a5d
 80005b8:	08000a5d 	.word	0x08000a5d
 80005bc:	08000a5d 	.word	0x08000a5d
 80005c0:	08000a5d 	.word	0x08000a5d
 80005c4:	08000a5d 	.word	0x08000a5d
 80005c8:	08000a5d 	.word	0x08000a5d
 80005cc:	08000a5d 	.word	0x08000a5d
 80005d0:	08000a5d 	.word	0x08000a5d
 80005d4:	08000a5d 	.word	0x08000a5d
 80005d8:	08000a5d 	.word	0x08000a5d
 80005dc:	08000a5d 	.word	0x08000a5d
 80005e0:	08000a5d 	.word	0x08000a5d
 80005e4:	08000a5d 	.word	0x08000a5d
 80005e8:	08000a5d 	.word	0x08000a5d
 80005ec:	08000a5d 	.word	0x08000a5d
 80005f0:	08000a5d 	.word	0x08000a5d
 80005f4:	08000a5d 	.word	0x08000a5d
 80005f8:	08000a5d 	.word	0x08000a5d
 80005fc:	08000a5d 	.word	0x08000a5d
 8000600:	08000a5d 	.word	0x08000a5d
 8000604:	08000a5d 	.word	0x08000a5d
 8000608:	08000a5d 	.word	0x08000a5d
 800060c:	08000a5d 	.word	0x08000a5d
 8000610:	08000a5d 	.word	0x08000a5d
 8000614:	08000a5d 	.word	0x08000a5d
 8000618:	08000a5d 	.word	0x08000a5d
 800061c:	08000a5d 	.word	0x08000a5d
 8000620:	08000a5d 	.word	0x08000a5d
 8000624:	08000a5d 	.word	0x08000a5d
 8000628:	08000a5d 	.word	0x08000a5d
 800062c:	08000a5d 	.word	0x08000a5d
 8000630:	08000a5d 	.word	0x08000a5d
 8000634:	08000a5d 	.word	0x08000a5d
 8000638:	08000a5d 	.word	0x08000a5d
 800063c:	08000a5d 	.word	0x08000a5d
 8000640:	08000a5d 	.word	0x08000a5d
 8000644:	08000a5d 	.word	0x08000a5d
 8000648:	08000a5d 	.word	0x08000a5d
 800064c:	08000a5d 	.word	0x08000a5d
 8000650:	08000a5d 	.word	0x08000a5d
 8000654:	08000a5d 	.word	0x08000a5d
 8000658:	08000a5d 	.word	0x08000a5d
 800065c:	08000a5d 	.word	0x08000a5d
 8000660:	08000a5d 	.word	0x08000a5d
 8000664:	08000a5d 	.word	0x08000a5d
 8000668:	08000a5d 	.word	0x08000a5d
 800066c:	08000a5d 	.word	0x08000a5d
 8000670:	08000a5d 	.word	0x08000a5d
 8000674:	08000a5d 	.word	0x08000a5d
 8000678:	08000a5d 	.word	0x08000a5d
 800067c:	08000a5d 	.word	0x08000a5d
 8000680:	08000a5d 	.word	0x08000a5d
 8000684:	08000a5d 	.word	0x08000a5d
 8000688:	08000a5d 	.word	0x08000a5d
 800068c:	08000a5d 	.word	0x08000a5d
 8000690:	08000a5d 	.word	0x08000a5d
 8000694:	08000a5d 	.word	0x08000a5d
 8000698:	08000a5d 	.word	0x08000a5d
 800069c:	08000a5d 	.word	0x08000a5d
 80006a0:	08000a5d 	.word	0x08000a5d
 80006a4:	08000a5d 	.word	0x08000a5d
 80006a8:	08000a5d 	.word	0x08000a5d
 80006ac:	08000a5d 	.word	0x08000a5d
 80006b0:	08000a5d 	.word	0x08000a5d
 80006b4:	08000a5d 	.word	0x08000a5d
 80006b8:	08000a5d 	.word	0x08000a5d
 80006bc:	08000a5d 	.word	0x08000a5d
 80006c0:	080008ad 	.word	0x080008ad
 80006c4:	080008b5 	.word	0x080008b5
 80006c8:	080008bd 	.word	0x080008bd
 80006cc:	080008c5 	.word	0x080008c5
 80006d0:	08000a5d 	.word	0x08000a5d
 80006d4:	08000a5d 	.word	0x08000a5d
 80006d8:	08000a5d 	.word	0x08000a5d
 80006dc:	08000a5d 	.word	0x08000a5d
 80006e0:	08000a5d 	.word	0x08000a5d
 80006e4:	08000a5d 	.word	0x08000a5d
 80006e8:	08000a5d 	.word	0x08000a5d
 80006ec:	08000a5d 	.word	0x08000a5d
 80006f0:	08000a5d 	.word	0x08000a5d
 80006f4:	08000a5d 	.word	0x08000a5d
 80006f8:	08000a5d 	.word	0x08000a5d
 80006fc:	08000a5d 	.word	0x08000a5d
 8000700:	08000a5d 	.word	0x08000a5d
 8000704:	08000a5d 	.word	0x08000a5d
 8000708:	08000a5d 	.word	0x08000a5d
 800070c:	08000a5d 	.word	0x08000a5d
 8000710:	08000a5d 	.word	0x08000a5d
 8000714:	08000a5d 	.word	0x08000a5d
 8000718:	08000a5d 	.word	0x08000a5d
 800071c:	08000a5d 	.word	0x08000a5d
 8000720:	08000a5d 	.word	0x08000a5d
 8000724:	08000a5d 	.word	0x08000a5d
 8000728:	08000a5d 	.word	0x08000a5d
 800072c:	08000a5d 	.word	0x08000a5d
 8000730:	08000a5d 	.word	0x08000a5d
 8000734:	08000a5d 	.word	0x08000a5d
 8000738:	08000a5d 	.word	0x08000a5d
 800073c:	08000a5d 	.word	0x08000a5d
 8000740:	08000a5d 	.word	0x08000a5d
 8000744:	08000a5d 	.word	0x08000a5d
 8000748:	08000a5d 	.word	0x08000a5d
 800074c:	08000a5d 	.word	0x08000a5d
 8000750:	08000a5d 	.word	0x08000a5d
 8000754:	08000a5d 	.word	0x08000a5d
 8000758:	08000a5d 	.word	0x08000a5d
 800075c:	08000a5d 	.word	0x08000a5d
 8000760:	08000a5d 	.word	0x08000a5d
 8000764:	08000a5d 	.word	0x08000a5d
 8000768:	08000a5d 	.word	0x08000a5d
 800076c:	08000a5d 	.word	0x08000a5d
 8000770:	08000a5d 	.word	0x08000a5d
 8000774:	08000a5d 	.word	0x08000a5d
 8000778:	08000a5d 	.word	0x08000a5d
 800077c:	08000a5d 	.word	0x08000a5d
 8000780:	08000a5d 	.word	0x08000a5d
 8000784:	08000a5d 	.word	0x08000a5d
 8000788:	08000a5d 	.word	0x08000a5d
 800078c:	08000a5d 	.word	0x08000a5d
 8000790:	08000a5d 	.word	0x08000a5d
 8000794:	08000a5d 	.word	0x08000a5d
 8000798:	08000a5d 	.word	0x08000a5d
 800079c:	08000a5d 	.word	0x08000a5d
 80007a0:	08000a5d 	.word	0x08000a5d
 80007a4:	08000a5d 	.word	0x08000a5d
 80007a8:	08000a5d 	.word	0x08000a5d
 80007ac:	08000a5d 	.word	0x08000a5d
 80007b0:	08000a5d 	.word	0x08000a5d
 80007b4:	08000a5d 	.word	0x08000a5d
 80007b8:	08000a5d 	.word	0x08000a5d
 80007bc:	08000a5d 	.word	0x08000a5d
 80007c0:	08000a5d 	.word	0x08000a5d
 80007c4:	08000a5d 	.word	0x08000a5d
 80007c8:	08000a5d 	.word	0x08000a5d
 80007cc:	08000a5d 	.word	0x08000a5d
 80007d0:	08000a5d 	.word	0x08000a5d
 80007d4:	08000a5d 	.word	0x08000a5d
 80007d8:	08000a5d 	.word	0x08000a5d
 80007dc:	08000a5d 	.word	0x08000a5d
 80007e0:	08000a5d 	.word	0x08000a5d
 80007e4:	08000a5d 	.word	0x08000a5d
 80007e8:	08000a5d 	.word	0x08000a5d
 80007ec:	08000a5d 	.word	0x08000a5d
 80007f0:	08000a5d 	.word	0x08000a5d
 80007f4:	08000a5d 	.word	0x08000a5d
 80007f8:	08000a5d 	.word	0x08000a5d
 80007fc:	08000a5d 	.word	0x08000a5d
 8000800:	08000a5d 	.word	0x08000a5d
 8000804:	08000a5d 	.word	0x08000a5d
 8000808:	08000a5d 	.word	0x08000a5d
 800080c:	08000a5d 	.word	0x08000a5d
 8000810:	08000a5d 	.word	0x08000a5d
 8000814:	08000a5d 	.word	0x08000a5d
 8000818:	08000a5d 	.word	0x08000a5d
 800081c:	08000a5d 	.word	0x08000a5d
 8000820:	08000a5d 	.word	0x08000a5d
 8000824:	08000a5d 	.word	0x08000a5d
 8000828:	08000a5d 	.word	0x08000a5d
 800082c:	08000a5d 	.word	0x08000a5d
 8000830:	08000a5d 	.word	0x08000a5d
 8000834:	08000a5d 	.word	0x08000a5d
 8000838:	08000a5d 	.word	0x08000a5d
 800083c:	08000a5d 	.word	0x08000a5d
 8000840:	08000a5d 	.word	0x08000a5d
 8000844:	08000a5d 	.word	0x08000a5d
 8000848:	08000a5d 	.word	0x08000a5d
 800084c:	08000a5d 	.word	0x08000a5d
 8000850:	08000985 	.word	0x08000985
 8000854:	0800098d 	.word	0x0800098d
 8000858:	0800099b 	.word	0x0800099b
 800085c:	080009c1 	.word	0x080009c1
 8000860:	080009c9 	.word	0x080009c9
 8000864:	08000a35 	.word	0x08000a35
 8000868:	08000a55 	.word	0x08000a55
 800086c:	080009d1 	.word	0x080009d1
 8000870:	080009d9 	.word	0x080009d9
 8000874:	080009e1 	.word	0x080009e1
 8000878:	080009f5 	.word	0x080009f5
 800087c:	080009fd 	.word	0x080009fd
 8000880:	08000a11 	.word	0x08000a11
 8000884:	08000a19 	.word	0x08000a19
 8000888:	08000a2d 	.word	0x08000a2d
	{

		case BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:

			Btc_ReverseLight = BTC_RX_EXTLIGHTS_REVERSELIGHT_ON;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <BtcRxVal+0x3c4>)
 800088e:	2215      	movs	r2, #21
 8000890:	701a      	strb	r2, [r3, #0]

			break;
 8000892:	e0e4      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:

			Btc_ReverseLight = BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF;
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <BtcRxVal+0x3c4>)
 8000896:	2216      	movs	r2, #22
 8000898:	701a      	strb	r2, [r3, #0]

			break;
 800089a:	e0e0      	b.n	8000a5e <BtcRxVal+0x57a>
 800089c:	20000094 	.word	0x20000094
 80008a0:	200000cb 	.word	0x200000cb
 80008a4:	200000cc 	.word	0x200000cc
 80008a8:	200000bf 	.word	0x200000bf

		case BTC_RX_EXTLIGHTS_POSITIONZERO:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 80008ac:	4b6f      	ldr	r3, [pc, #444]	; (8000a6c <BtcRxVal+0x588>)
 80008ae:	2264      	movs	r2, #100	; 0x64
 80008b0:	701a      	strb	r2, [r3, #0]

			break;
 80008b2:	e0d4      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 80008b4:	4b6d      	ldr	r3, [pc, #436]	; (8000a6c <BtcRxVal+0x588>)
 80008b6:	2265      	movs	r2, #101	; 0x65
 80008b8:	701a      	strb	r2, [r3, #0]

			break;
 80008ba:	e0d0      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 80008bc:	4b6b      	ldr	r3, [pc, #428]	; (8000a6c <BtcRxVal+0x588>)
 80008be:	2266      	movs	r2, #102	; 0x66
 80008c0:	701a      	strb	r2, [r3, #0]

			break;
 80008c2:	e0cc      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 80008c4:	4b69      	ldr	r3, [pc, #420]	; (8000a6c <BtcRxVal+0x588>)
 80008c6:	2267      	movs	r2, #103	; 0x67
 80008c8:	701a      	strb	r2, [r3, #0]

			break;
 80008ca:	e0c8      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_CENLOC_ON:

			Btc_CenLoc = STD_HIGH;
 80008cc:	4b68      	ldr	r3, [pc, #416]	; (8000a70 <BtcRxVal+0x58c>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]

			break;
 80008d2:	e0c4      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_CENLOC_OFF:

			Btc_CenLoc = STD_LOW;
 80008d4:	4b66      	ldr	r3, [pc, #408]	; (8000a70 <BtcRxVal+0x58c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]

			break;
 80008da:	e0c0      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_HIGBEAM_ON:

			Btc_HighBeam = STD_HIGH;
 80008dc:	4b65      	ldr	r3, [pc, #404]	; (8000a74 <BtcRxVal+0x590>)
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]
			Btc_FlashHighBeam = STD_LOW;
 80008e2:	4b65      	ldr	r3, [pc, #404]	; (8000a78 <BtcRxVal+0x594>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]

			break;
 80008e8:	e0b9      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_HIGBEAM_OFF:

			Btc_HighBeam = STD_LOW;
 80008ea:	4b62      	ldr	r3, [pc, #392]	; (8000a74 <BtcRxVal+0x590>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]

			break;
 80008f0:	e0b5      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON:

			Btc_FlashHighBeam = STD_HIGH;
 80008f2:	4b61      	ldr	r3, [pc, #388]	; (8000a78 <BtcRxVal+0x594>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
			Btc_HighBeam = STD_LOW;
 80008f8:	4b5e      	ldr	r3, [pc, #376]	; (8000a74 <BtcRxVal+0x590>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]

			break;
 80008fe:	e0ae      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF:

			Btc_FlashHighBeam = STD_LOW;
 8000900:	4b5d      	ldr	r3, [pc, #372]	; (8000a78 <BtcRxVal+0x594>)
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]

			break;
 8000906:	e0aa      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:

			Btc_TurnSignalLeft = STD_HIGH;
 8000908:	4b5c      	ldr	r3, [pc, #368]	; (8000a7c <BtcRxVal+0x598>)
 800090a:	2201      	movs	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]
			Btc_TurnSignalRight = STD_LOW;
 800090e:	4b5c      	ldr	r3, [pc, #368]	; (8000a80 <BtcRxVal+0x59c>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]

			break;
 8000914:	e0a3      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:

			Btc_TurnSignalLeft = STD_LOW;
 8000916:	4b59      	ldr	r3, [pc, #356]	; (8000a7c <BtcRxVal+0x598>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]

			break;
 800091c:	e09f      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_ON:

			Btc_TurnSignalRight = STD_HIGH;
 800091e:	4b58      	ldr	r3, [pc, #352]	; (8000a80 <BtcRxVal+0x59c>)
 8000920:	2201      	movs	r2, #1
 8000922:	701a      	strb	r2, [r3, #0]
			Btc_TurnSignalLeft = STD_LOW;
 8000924:	4b55      	ldr	r3, [pc, #340]	; (8000a7c <BtcRxVal+0x598>)
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]

			break;
 800092a:	e098      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_OFF:

			Btc_TurnSignalRight = STD_LOW;
 800092c:	4b54      	ldr	r3, [pc, #336]	; (8000a80 <BtcRxVal+0x59c>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]

			break;
 8000932:	e094      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:

			Btc_HazardLight = STD_HIGH;
 8000934:	4b53      	ldr	r3, [pc, #332]	; (8000a84 <BtcRxVal+0x5a0>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]

			break;
 800093a:	e090      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:

			Btc_HazardLight = STD_LOW;
 800093c:	4b51      	ldr	r3, [pc, #324]	; (8000a84 <BtcRxVal+0x5a0>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]

			break;
 8000942:	e08c      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:

			Btc_FrontFogLight = STD_HIGH;
 8000944:	4b50      	ldr	r3, [pc, #320]	; (8000a88 <BtcRxVal+0x5a4>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]

			break;
 800094a:	e088      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:

			Btc_FrontFogLight = STD_LOW;
 800094c:	4b4e      	ldr	r3, [pc, #312]	; (8000a88 <BtcRxVal+0x5a4>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]

			break;
 8000952:	e084      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:

			Btc_RearFogLight = STD_HIGH;
 8000954:	4b4d      	ldr	r3, [pc, #308]	; (8000a8c <BtcRxVal+0x5a8>)
 8000956:	2201      	movs	r2, #1
 8000958:	701a      	strb	r2, [r3, #0]

			break;
 800095a:	e080      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:

			Btc_RearFogLight = STD_LOW;
 800095c:	4b4b      	ldr	r3, [pc, #300]	; (8000a8c <BtcRxVal+0x5a8>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]

			break;
 8000962:	e07c      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTON:

			Btc_BrakeLight = STD_HIGH;
 8000964:	4b4a      	ldr	r3, [pc, #296]	; (8000a90 <BtcRxVal+0x5ac>)
 8000966:	2201      	movs	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]

			break;
 800096a:	e078      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:

			Btc_BrakeLight = STD_LOW;
 800096c:	4b48      	ldr	r3, [pc, #288]	; (8000a90 <BtcRxVal+0x5ac>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]

			break;
 8000972:	e074      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:

			Btc_IntLights = STD_HIGH;
 8000974:	4b47      	ldr	r3, [pc, #284]	; (8000a94 <BtcRxVal+0x5b0>)
 8000976:	2201      	movs	r2, #1
 8000978:	701a      	strb	r2, [r3, #0]

			break;
 800097a:	e070      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:

			Btc_IntLights = STD_LOW;
 800097c:	4b45      	ldr	r3, [pc, #276]	; (8000a94 <BtcRxVal+0x5b0>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]

			break;
 8000982:	e06c      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_NORMALMODE_ON:

			Btc_NormalMode = STD_HIGH;
 8000984:	4b44      	ldr	r3, [pc, #272]	; (8000a98 <BtcRxVal+0x5b4>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]

			break;
 800098a:	e068      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_RECIRCULATIONMODE_ON:

			Btc_NormalMode 			= STD_LOW;
 800098c:	4b42      	ldr	r3, [pc, #264]	; (8000a98 <BtcRxVal+0x5b4>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
			Btc_RecirculationMode 	= STD_HIGH;
 8000992:	4b42      	ldr	r3, [pc, #264]	; (8000a9c <BtcRxVal+0x5b8>)
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]

			break;
 8000998:	e061      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_AUTOMATICMODE_ON:

			Btc_NormalMode 			= STD_LOW;
 800099a:	4b3f      	ldr	r3, [pc, #252]	; (8000a98 <BtcRxVal+0x5b4>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
			Btc_RecirculationMode 	= STD_LOW;
 80009a0:	4b3e      	ldr	r3, [pc, #248]	; (8000a9c <BtcRxVal+0x5b8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
			Btc_LegVents 			= STD_LOW;
 80009a6:	4b3e      	ldr	r3, [pc, #248]	; (8000aa0 <BtcRxVal+0x5bc>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
			Btc_MidVents 			= STD_LOW;
 80009ac:	4b3d      	ldr	r3, [pc, #244]	; (8000aa4 <BtcRxVal+0x5c0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldVents 	= STD_LOW;
 80009b2:	4b3d      	ldr	r3, [pc, #244]	; (8000aa8 <BtcRxVal+0x5c4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_HIGH;
 80009b8:	4b3c      	ldr	r3, [pc, #240]	; (8000aac <BtcRxVal+0x5c8>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]

			break;
 80009be:	e04e      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_BACKWINDOWDEFROSTON:

			Btc_BackwindowDefrost = STD_HIGH;
 80009c0:	4b3b      	ldr	r3, [pc, #236]	; (8000ab0 <BtcRxVal+0x5cc>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	701a      	strb	r2, [r3, #0]

			break;
 80009c6:	e04a      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_BACKWINDOWDEFROSTOFF:

			Btc_BackwindowDefrost = STD_LOW;
 80009c8:	4b39      	ldr	r3, [pc, #228]	; (8000ab0 <BtcRxVal+0x5cc>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]

			break;
 80009ce:	e046      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_AC_ON:

			Btc_AC = STD_HIGH;
 80009d0:	4b38      	ldr	r3, [pc, #224]	; (8000ab4 <BtcRxVal+0x5d0>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	701a      	strb	r2, [r3, #0]

			break;
 80009d6:	e042      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_AC_OFF:

			Btc_AC = STD_LOW;
 80009d8:	4b36      	ldr	r3, [pc, #216]	; (8000ab4 <BtcRxVal+0x5d0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]

			break;
 80009de:	e03e      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_LEGVENT_ON:

			Btc_LegVents 			= STD_HIGH;
 80009e0:	4b2f      	ldr	r3, [pc, #188]	; (8000aa0 <BtcRxVal+0x5bc>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldDefrost 	= STD_LOW;
 80009e6:	4b34      	ldr	r3, [pc, #208]	; (8000ab8 <BtcRxVal+0x5d4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_LOW;
 80009ec:	4b2f      	ldr	r3, [pc, #188]	; (8000aac <BtcRxVal+0x5c8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]

			break;
 80009f2:	e034      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_LEGVENT_OFF:

			Btc_LegVents = STD_LOW;
 80009f4:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <BtcRxVal+0x5bc>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]

			break;
 80009fa:	e030      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_MIDVENT_ON:

			Btc_MidVents 			= STD_HIGH;
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <BtcRxVal+0x5c0>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldDefrost 	= STD_LOW;
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <BtcRxVal+0x5d4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_LOW;
 8000a08:	4b28      	ldr	r3, [pc, #160]	; (8000aac <BtcRxVal+0x5c8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]

			break;
 8000a0e:	e026      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_MIDVENT_OFF:

			Btc_MidVents = STD_LOW;
 8000a10:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <BtcRxVal+0x5c0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]

			break;
 8000a16:	e022      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_WINDSHIELDVENT_ON:

			Btc_WindshieldVents 	= STD_HIGH;
 8000a18:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <BtcRxVal+0x5c4>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldDefrost 	= STD_LOW;
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <BtcRxVal+0x5d4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_LOW;
 8000a24:	4b21      	ldr	r3, [pc, #132]	; (8000aac <BtcRxVal+0x5c8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]

			break;
 8000a2a:	e018      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_WINDSHIELDVENT_OFF:

			Btc_WindshieldVents = STD_LOW;
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <BtcRxVal+0x5c4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]

			break;
 8000a32:	e014      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_WINDSHIELDDEFROST_ON:

			Btc_WindshieldDefrost	= STD_HIGH;
 8000a34:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <BtcRxVal+0x5d4>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	701a      	strb	r2, [r3, #0]
			Btc_LegVents 			= STD_LOW;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <BtcRxVal+0x5bc>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
			Btc_MidVents 			= STD_LOW;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <BtcRxVal+0x5c0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
			Btc_WindshieldVents 	= STD_LOW;
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <BtcRxVal+0x5c4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode 		= STD_LOW;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <BtcRxVal+0x5c8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]

			break;
 8000a52:	e004      	b.n	8000a5e <BtcRxVal+0x57a>

		case BTC_RX_HVAC_WINDSHIELDDEFROST_OFF:

			Btc_WindshieldDefrost = STD_LOW;
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <BtcRxVal+0x5d4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]


			break;
 8000a5a:	e000      	b.n	8000a5e <BtcRxVal+0x57a>

		default:

			break;
 8000a5c:	bf00      	nop

	}

	return 1;
 8000a5e:	2301      	movs	r3, #1

}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	200000b6 	.word	0x200000b6
 8000a70:	2000009f 	.word	0x2000009f
 8000a74:	200000b7 	.word	0x200000b7
 8000a78:	200000b8 	.word	0x200000b8
 8000a7c:	200000ba 	.word	0x200000ba
 8000a80:	200000bb 	.word	0x200000bb
 8000a84:	200000bc 	.word	0x200000bc
 8000a88:	200000b9 	.word	0x200000b9
 8000a8c:	200000be 	.word	0x200000be
 8000a90:	200000bd 	.word	0x200000bd
 8000a94:	200000f5 	.word	0x200000f5
 8000a98:	200000d5 	.word	0x200000d5
 8000a9c:	200000d4 	.word	0x200000d4
 8000aa0:	200000cd 	.word	0x200000cd
 8000aa4:	200000ce 	.word	0x200000ce
 8000aa8:	200000cf 	.word	0x200000cf
 8000aac:	200000d3 	.word	0x200000d3
 8000ab0:	200000d1 	.word	0x200000d1
 8000ab4:	200000d2 	.word	0x200000d2
 8000ab8:	200000d0 	.word	0x200000d0

08000abc <BtcEnableUart>:

StdReturnType BtcEnableUart()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

	uint8 status = STD_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	71fb      	strb	r3, [r7, #7]

	if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) != E_NOT_OK)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	490e      	ldr	r1, [pc, #56]	; (8000b04 <BtcEnableUart+0x48>)
 8000aca:	480f      	ldr	r0, [pc, #60]	; (8000b08 <BtcEnableUart+0x4c>)
 8000acc:	f00a fb06 	bl	800b0dc <HAL_UART_Receive_IT>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d007      	beq.n	8000ae6 <BtcEnableUart+0x2a>
	{
		HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	490a      	ldr	r1, [pc, #40]	; (8000b04 <BtcEnableUart+0x48>)
 8000ada:	480b      	ldr	r0, [pc, #44]	; (8000b08 <BtcEnableUart+0x4c>)
 8000adc:	f00a fafe 	bl	800b0dc <HAL_UART_Receive_IT>
		status = E_OK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	71fb      	strb	r3, [r7, #7]
 8000ae4:	e009      	b.n	8000afa <BtcEnableUart+0x3e>
	}
	else if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) == E_NOT_OK)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	4906      	ldr	r1, [pc, #24]	; (8000b04 <BtcEnableUart+0x48>)
 8000aea:	4807      	ldr	r0, [pc, #28]	; (8000b08 <BtcEnableUart+0x4c>)
 8000aec:	f00a faf6 	bl	800b0dc <HAL_UART_Receive_IT>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d101      	bne.n	8000afa <BtcEnableUart+0x3e>
	{
		status = E_NOT_OK;
 8000af6:	2301      	movs	r3, #1
 8000af8:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* do nothing */
	}

	return status;
 8000afa:	79fb      	ldrb	r3, [r7, #7]

}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000094 	.word	0x20000094
 8000b08:	20000890 	.word	0x20000890

08000b0c <BtcMainFunction>:

void BtcMainFunction()
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0

	BtcEnableUart();
 8000b10:	f7ff ffd4 	bl	8000abc <BtcEnableUart>
	BtcRxVal();
 8000b14:	f7ff fce6 	bl	80004e4 <BtcRxVal>

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <CenLocState>:

	return E_OK;
}

StdReturnType CenLocState()
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0

	uint8 status = E_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	71fb      	strb	r3, [r7, #7]

	if(CenLoc_PreviousState != CenLoc_CurrentState)
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <CenLocState+0x5c>)
 8000b28:	781a      	ldrb	r2, [r3, #0]
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <CenLocState+0x60>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d01b      	beq.n	8000b6a <CenLocState+0x4e>
	{

		CenLoc_ExtLights_LockedState 	= CenLoc_PreviousState;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <CenLocState+0x5c>)
 8000b34:	781a      	ldrb	r2, [r3, #0]
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <CenLocState+0x64>)
 8000b38:	701a      	strb	r2, [r3, #0]
		CenLoc_ExtLights_UnlockedState 	= CenLoc_CurrentState;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <CenLocState+0x60>)
 8000b3c:	781a      	ldrb	r2, [r3, #0]
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <CenLocState+0x68>)
 8000b40:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 			= CenLoc_CurrentState;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <CenLocState+0x60>)
 8000b44:	781a      	ldrb	r2, [r3, #0]
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <CenLocState+0x5c>)
 8000b48:	701a      	strb	r2, [r3, #0]
		CenLoc_LockUnlockFlag 			= !CenLoc_CurrentState;
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <CenLocState+0x60>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	bf0c      	ite	eq
 8000b52:	2301      	moveq	r3, #1
 8000b54:	2300      	movne	r3, #0
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <CenLocState+0x6c>)
 8000b5c:	701a      	strb	r2, [r3, #0]
		CenLoc_LockCounter 				= STD_LOW;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <CenLocState+0x70>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
		CenLoc_UnlockCounter 			= STD_LOW;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <CenLocState+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	return status;
 8000b6a:	79fb      	ldrb	r3, [r7, #7]

}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	20000096 	.word	0x20000096
 8000b7c:	20000095 	.word	0x20000095
 8000b80:	20000099 	.word	0x20000099
 8000b84:	20000098 	.word	0x20000098
 8000b88:	20000097 	.word	0x20000097
 8000b8c:	2000009c 	.word	0x2000009c
 8000b90:	2000009d 	.word	0x2000009d

08000b94 <CenLocSecAlmStateToOff>:

void CenLocSecAlmStateToOff()
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH)
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <CenLocSecAlmStateToOff+0x1c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d102      	bne.n	8000ba6 <CenLocSecAlmStateToOff+0x12>
	{

		SecAlm_Trigger = STD_LOW;
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <CenLocSecAlmStateToOff+0x20>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	20000095 	.word	0x20000095
 8000bb4:	200000f6 	.word	0x200000f6

08000bb8 <CenLocRxBtcState>:

void CenLocRxBtcState()
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

	if(Btc_CenLoc == STD_HIGH)
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <CenLocRxBtcState+0x30>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d104      	bne.n	8000bce <CenLocRxBtcState+0x16>
	{

		CenLoc_CurrentState = Btc_CenLoc;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <CenLocRxBtcState+0x30>)
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <CenLocRxBtcState+0x34>)
 8000bca:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8000bcc:	e007      	b.n	8000bde <CenLocRxBtcState+0x26>
	else if(Btc_CenLoc == STD_LOW)
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <CenLocRxBtcState+0x30>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d103      	bne.n	8000bde <CenLocRxBtcState+0x26>
		CenLoc_CurrentState = Btc_CenLoc;
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <CenLocRxBtcState+0x30>)
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <CenLocRxBtcState+0x34>)
 8000bdc:	701a      	strb	r2, [r3, #0]
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	2000009f 	.word	0x2000009f
 8000bec:	20000095 	.word	0x20000095

08000bf0 <CenLocToggleDoorLED>:

void CenLocToggleDoorLED(uint8 PinState)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CENLOC_DOOR_LED_PORT, CENLOC_DOOR_LED_PIN, PinState);
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	2140      	movs	r1, #64	; 0x40
 8000c00:	4803      	ldr	r0, [pc, #12]	; (8000c10 <CenLocToggleDoorLED+0x20>)
 8000c02:	f004 fdd9 	bl	80057b8 <HAL_GPIO_WritePin>

}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40020400 	.word	0x40020400

08000c14 <CenLocFollowMeHome>:

void CenLocFollowMeHome()
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0


	CenLoc_Timer5Value = __HAL_TIM_GET_COUNTER(&htim5);
 8000c18:	4b37      	ldr	r3, [pc, #220]	; (8000cf8 <CenLocFollowMeHome+0xe4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1e:	4a37      	ldr	r2, [pc, #220]	; (8000cfc <CenLocFollowMeHome+0xe8>)
 8000c20:	6013      	str	r3, [r2, #0]

	if(CenLoc_ExtLights_LockedState == STD_LOW && CenLoc_ExtLights_UnlockedState == STD_HIGH && CenLoc_Timer5StartStopFlag == 0)
 8000c22:	4b37      	ldr	r3, [pc, #220]	; (8000d00 <CenLocFollowMeHome+0xec>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d115      	bne.n	8000c56 <CenLocFollowMeHome+0x42>
 8000c2a:	4b36      	ldr	r3, [pc, #216]	; (8000d04 <CenLocFollowMeHome+0xf0>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d111      	bne.n	8000c56 <CenLocFollowMeHome+0x42>
 8000c32:	4b35      	ldr	r3, [pc, #212]	; (8000d08 <CenLocFollowMeHome+0xf4>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d10d      	bne.n	8000c56 <CenLocFollowMeHome+0x42>
	{

		CenLoc_Timer5StartStopFlag = 1;
 8000c3a:	4b33      	ldr	r3, [pc, #204]	; (8000d08 <CenLocFollowMeHome+0xf4>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim5, 0);
 8000c40:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <CenLocFollowMeHome+0xe4>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2200      	movs	r2, #0
 8000c46:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&htim5);
 8000c48:	482b      	ldr	r0, [pc, #172]	; (8000cf8 <CenLocFollowMeHome+0xe4>)
 8000c4a:	f009 f925 	bl	8009e98 <HAL_TIM_Base_Start>
		Timer5ChangeState = 1;
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <CenLocFollowMeHome+0xf8>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
 8000c54:	e018      	b.n	8000c88 <CenLocFollowMeHome+0x74>

	}
	else if(CenLoc_ExtLights_LockedState == STD_HIGH && CenLoc_ExtLights_UnlockedState == STD_LOW && CenLoc_Timer5StartStopFlag == 1)
 8000c56:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <CenLocFollowMeHome+0xec>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d114      	bne.n	8000c88 <CenLocFollowMeHome+0x74>
 8000c5e:	4b29      	ldr	r3, [pc, #164]	; (8000d04 <CenLocFollowMeHome+0xf0>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d110      	bne.n	8000c88 <CenLocFollowMeHome+0x74>
 8000c66:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <CenLocFollowMeHome+0xf4>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d10c      	bne.n	8000c88 <CenLocFollowMeHome+0x74>
	{

		CenLoc_Timer5StartStopFlag = 0;
 8000c6e:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <CenLocFollowMeHome+0xf4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim5, 0);
 8000c74:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <CenLocFollowMeHome+0xe4>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&htim5);
 8000c7c:	481e      	ldr	r0, [pc, #120]	; (8000cf8 <CenLocFollowMeHome+0xe4>)
 8000c7e:	f009 f90b 	bl	8009e98 <HAL_TIM_Base_Start>
		Timer5ChangeState = 0;
 8000c82:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <CenLocFollowMeHome+0xf8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(__HAL_TIM_GET_COUNTER(&htim5) < 100000 && (Timer5ChangeState == 1 || Timer5ChangeState == 0))
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <CenLocFollowMeHome+0xe4>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8e:	4a20      	ldr	r2, [pc, #128]	; (8000d10 <CenLocFollowMeHome+0xfc>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d80b      	bhi.n	8000cac <CenLocFollowMeHome+0x98>
 8000c94:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <CenLocFollowMeHome+0xf8>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d003      	beq.n	8000ca4 <CenLocFollowMeHome+0x90>
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <CenLocFollowMeHome+0xf8>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d103      	bne.n	8000cac <CenLocFollowMeHome+0x98>
	{

		CenLoc_FollowMeHomeState = STD_HIGH;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <CenLocFollowMeHome+0x100>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	e00e      	b.n	8000cca <CenLocFollowMeHome+0xb6>

	}
	else if(__HAL_TIM_GET_COUNTER(&htim5) >= 100000)
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <CenLocFollowMeHome+0xe4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb2:	4a17      	ldr	r2, [pc, #92]	; (8000d10 <CenLocFollowMeHome+0xfc>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d908      	bls.n	8000cca <CenLocFollowMeHome+0xb6>
	{

		CenLoc_FollowMeHomeState = STD_LOW;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <CenLocFollowMeHome+0x100>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
		Timer5ChangeState = 2;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <CenLocFollowMeHome+0xf8>)
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop(&htim5);
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <CenLocFollowMeHome+0xe4>)
 8000cc6:	f009 f971 	bl	8009fac <HAL_TIM_Base_Stop>

	}

	ExtLightsFrontFogLight(CenLoc_FollowMeHomeState);
 8000cca:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <CenLocFollowMeHome+0x100>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 fcce 	bl	8001670 <ExtLightsFrontFogLight>
	ExtLightsDayTimeRunningLight(CenLoc_FollowMeHomeState);
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <CenLocFollowMeHome+0x100>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fcb7 	bl	800164c <ExtLightsDayTimeRunningLight>
	ExtLightsLowBeam(CenLoc_FollowMeHomeState);
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <CenLocFollowMeHome+0x100>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 fc8e 	bl	8001604 <ExtLightsLowBeam>
	ExtLightsRearPositionLight(CenLoc_FollowMeHomeState);
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <CenLocFollowMeHome+0x100>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 fcf5 	bl	80016dc <ExtLightsRearPositionLight>

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000674 	.word	0x20000674
 8000cfc:	200000a8 	.word	0x200000a8
 8000d00:	20000099 	.word	0x20000099
 8000d04:	20000098 	.word	0x20000098
 8000d08:	2000009e 	.word	0x2000009e
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	0001869f 	.word	0x0001869f
 8000d14:	2000009a 	.word	0x2000009a

08000d18 <CenLocBlinkSignals>:

void CenLocBlinkSignals()
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0

	ExtLightsTurnSignalLeft(CenLoc_BlinkState);
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <CenLocBlinkSignals+0x1c>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 fcb7 	bl	8001694 <ExtLightsTurnSignalLeft>
	ExtLightsTurnSignalRight(CenLoc_BlinkState);
 8000d26:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <CenLocBlinkSignals+0x1c>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 fcc4 	bl	80016b8 <ExtLightsTurnSignalRight>

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2000009b 	.word	0x2000009b

08000d38 <CenLocLockUnlockStates>:

StdReturnType CenLocLockUnlockStates()
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0

	uint8 status = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	71fb      	strb	r3, [r7, #7]

	if(CenLoc_CurrentState == STD_HIGH && SecAlm_Trigger == STD_LOW)
 8000d42:	4b96      	ldr	r3, [pc, #600]	; (8000f9c <CenLocLockUnlockStates+0x264>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	f040 8094 	bne.w	8000e74 <CenLocLockUnlockStates+0x13c>
 8000d4c:	4b94      	ldr	r3, [pc, #592]	; (8000fa0 <CenLocLockUnlockStates+0x268>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f040 808f 	bne.w	8000e74 <CenLocLockUnlockStates+0x13c>
	{

		HAL_TIM_Base_Stop(&htim3);
 8000d56:	4893      	ldr	r0, [pc, #588]	; (8000fa4 <CenLocLockUnlockStates+0x26c>)
 8000d58:	f009 f928 	bl	8009fac <HAL_TIM_Base_Stop>
		CenLocToggleDoorLED(CenLoc_CurrentState);
 8000d5c:	4b8f      	ldr	r3, [pc, #572]	; (8000f9c <CenLocLockUnlockStates+0x264>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff45 	bl	8000bf0 <CenLocToggleDoorLED>
		SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 8000d66:	4b8d      	ldr	r3, [pc, #564]	; (8000f9c <CenLocLockUnlockStates+0x264>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	bf0c      	ite	eq
 8000d6e:	2301      	moveq	r3, #1
 8000d70:	2300      	movne	r3, #0
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 ffc7 	bl	8001d08 <SecAlmToggleAlarmLed>
		CenLocFollowMeHome();
 8000d7a:	f7ff ff4b 	bl	8000c14 <CenLocFollowMeHome>

		if(CenLoc_LockCounter < 4)
 8000d7e:	4b8a      	ldr	r3, [pc, #552]	; (8000fa8 <CenLocLockUnlockStates+0x270>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d86c      	bhi.n	8000e60 <CenLocLockUnlockStates+0x128>
		{

			HAL_TIM_Base_Start(&htim2);
 8000d86:	4889      	ldr	r0, [pc, #548]	; (8000fac <CenLocLockUnlockStates+0x274>)
 8000d88:	f009 f886 	bl	8009e98 <HAL_TIM_Base_Start>
			CenLoc_Timer2Value = __HAL_TIM_GET_COUNTER(&htim2);
 8000d8c:	4b87      	ldr	r3, [pc, #540]	; (8000fac <CenLocLockUnlockStates+0x274>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d92:	4a87      	ldr	r2, [pc, #540]	; (8000fb0 <CenLocLockUnlockStates+0x278>)
 8000d94:	6013      	str	r3, [r2, #0]

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000d96:	4b85      	ldr	r3, [pc, #532]	; (8000fac <CenLocLockUnlockStates+0x274>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d80a      	bhi.n	8000dba <CenLocLockUnlockStates+0x82>
			{

				CenLoc_BlinkState = STD_HIGH;
 8000da4:	4b83      	ldr	r3, [pc, #524]	; (8000fb4 <CenLocLockUnlockStates+0x27c>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 8000daa:	4b82      	ldr	r3, [pc, #520]	; (8000fb4 <CenLocLockUnlockStates+0x27c>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f93e 	bl	8001030 <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 8000db4:	f7ff ffb0 	bl	8000d18 <CenLocBlinkSignals>
		if(CenLoc_LockCounter < 4)
 8000db8:	e12b      	b.n	8001012 <CenLocLockUnlockStates+0x2da>

			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000dba:	4b7c      	ldr	r3, [pc, #496]	; (8000fac <CenLocLockUnlockStates+0x274>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d911      	bls.n	8000dec <CenLocLockUnlockStates+0xb4>
 8000dc8:	4b78      	ldr	r3, [pc, #480]	; (8000fac <CenLocLockUnlockStates+0x274>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dce:	f241 3287 	movw	r2, #4999	; 0x1387
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d80a      	bhi.n	8000dec <CenLocLockUnlockStates+0xb4>
			{

				CenLoc_BlinkState = STD_LOW;
 8000dd6:	4b77      	ldr	r3, [pc, #476]	; (8000fb4 <CenLocLockUnlockStates+0x27c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 8000ddc:	4b75      	ldr	r3, [pc, #468]	; (8000fb4 <CenLocLockUnlockStates+0x27c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 f925 	bl	8001030 <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 8000de6:	f7ff ff97 	bl	8000d18 <CenLocBlinkSignals>
 8000dea:	e042      	b.n	8000e72 <CenLocLockUnlockStates+0x13a>

			}
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8000dec:	4b6f      	ldr	r3, [pc, #444]	; (8000fac <CenLocLockUnlockStates+0x274>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d911      	bls.n	8000e1e <CenLocLockUnlockStates+0xe6>
 8000dfa:	4b6c      	ldr	r3, [pc, #432]	; (8000fac <CenLocLockUnlockStates+0x274>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e00:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d80a      	bhi.n	8000e1e <CenLocLockUnlockStates+0xe6>
			{

				CenLoc_BlinkState = STD_HIGH;
 8000e08:	4b6a      	ldr	r3, [pc, #424]	; (8000fb4 <CenLocLockUnlockStates+0x27c>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 8000e0e:	4b69      	ldr	r3, [pc, #420]	; (8000fb4 <CenLocLockUnlockStates+0x27c>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f90c 	bl	8001030 <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 8000e18:	f7ff ff7e 	bl	8000d18 <CenLocBlinkSignals>
 8000e1c:	e029      	b.n	8000e72 <CenLocLockUnlockStates+0x13a>

			}
			else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8000e1e:	4b63      	ldr	r3, [pc, #396]	; (8000fac <CenLocLockUnlockStates+0x274>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e24:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	f240 80f2 	bls.w	8001012 <CenLocLockUnlockStates+0x2da>
 8000e2e:	4b5f      	ldr	r3, [pc, #380]	; (8000fac <CenLocLockUnlockStates+0x274>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e34:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	f200 80ea 	bhi.w	8001012 <CenLocLockUnlockStates+0x2da>
			{

				CenLoc_BlinkState = STD_LOW;
 8000e3e:	4b5d      	ldr	r3, [pc, #372]	; (8000fb4 <CenLocLockUnlockStates+0x27c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 8000e44:	4b5b      	ldr	r3, [pc, #364]	; (8000fb4 <CenLocLockUnlockStates+0x27c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 f8f1 	bl	8001030 <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 8000e4e:	f7ff ff63 	bl	8000d18 <CenLocBlinkSignals>
				CenLoc_LockCounter = CenLoc_LockCounter + 1;
 8000e52:	4b55      	ldr	r3, [pc, #340]	; (8000fa8 <CenLocLockUnlockStates+0x270>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	3301      	adds	r3, #1
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4b53      	ldr	r3, [pc, #332]	; (8000fa8 <CenLocLockUnlockStates+0x270>)
 8000e5c:	701a      	strb	r2, [r3, #0]
		if(CenLoc_LockCounter < 4)
 8000e5e:	e0d8      	b.n	8001012 <CenLocLockUnlockStates+0x2da>

				/* do nothing */

			}
		}
		else if(CenLoc_LockCounter >= 4)
 8000e60:	4b51      	ldr	r3, [pc, #324]	; (8000fa8 <CenLocLockUnlockStates+0x270>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b03      	cmp	r3, #3
 8000e66:	f240 80d4 	bls.w	8001012 <CenLocLockUnlockStates+0x2da>
		{

			HAL_TIM_Base_Stop(&htim2);
 8000e6a:	4850      	ldr	r0, [pc, #320]	; (8000fac <CenLocLockUnlockStates+0x274>)
 8000e6c:	f009 f89e 	bl	8009fac <HAL_TIM_Base_Stop>
		if(CenLoc_LockCounter < 4)
 8000e70:	e0cf      	b.n	8001012 <CenLocLockUnlockStates+0x2da>
 8000e72:	e0ce      	b.n	8001012 <CenLocLockUnlockStates+0x2da>
			/* do nothing */

		}

	}
	else if(CenLoc_CurrentState == STD_LOW && SecAlm_Trigger == STD_LOW)
 8000e74:	4b49      	ldr	r3, [pc, #292]	; (8000f9c <CenLocLockUnlockStates+0x264>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f040 80cd 	bne.w	8001018 <CenLocLockUnlockStates+0x2e0>
 8000e7e:	4b48      	ldr	r3, [pc, #288]	; (8000fa0 <CenLocLockUnlockStates+0x268>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 80c8 	bne.w	8001018 <CenLocLockUnlockStates+0x2e0>
	{

		CenLocToggleDoorLED(CenLoc_CurrentState);
 8000e88:	4b44      	ldr	r3, [pc, #272]	; (8000f9c <CenLocLockUnlockStates+0x264>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff feaf 	bl	8000bf0 <CenLocToggleDoorLED>
		HAL_TIM_Base_Start(&htim3);
 8000e92:	4844      	ldr	r0, [pc, #272]	; (8000fa4 <CenLocLockUnlockStates+0x26c>)
 8000e94:	f009 f800 	bl	8009e98 <HAL_TIM_Base_Start>
		CenLoc_Timer3Value = __HAL_TIM_GET_COUNTER(&htim3);
 8000e98:	4b42      	ldr	r3, [pc, #264]	; (8000fa4 <CenLocLockUnlockStates+0x26c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9e:	4a46      	ldr	r2, [pc, #280]	; (8000fb8 <CenLocLockUnlockStates+0x280>)
 8000ea0:	6013      	str	r3, [r2, #0]
		CenLocFollowMeHome();
 8000ea2:	f7ff feb7 	bl	8000c14 <CenLocFollowMeHome>

		if(40000 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 41250)
 8000ea6:	4b3f      	ldr	r3, [pc, #252]	; (8000fa4 <CenLocLockUnlockStates+0x26c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eac:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d911      	bls.n	8000ed8 <CenLocLockUnlockStates+0x1a0>
 8000eb4:	4b3b      	ldr	r3, [pc, #236]	; (8000fa4 <CenLocLockUnlockStates+0x26c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	f24a 1221 	movw	r2, #41249	; 0xa121
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d80a      	bhi.n	8000ed8 <CenLocLockUnlockStates+0x1a0>
		{

			SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 8000ec2:	4b36      	ldr	r3, [pc, #216]	; (8000f9c <CenLocLockUnlockStates+0x264>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	bf0c      	ite	eq
 8000eca:	2301      	moveq	r3, #1
 8000ecc:	2300      	movne	r3, #0
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 ff19 	bl	8001d08 <SecAlmToggleAlarmLed>
 8000ed6:	e03f      	b.n	8000f58 <CenLocLockUnlockStates+0x220>

		}
		else if(41250 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 42500)
 8000ed8:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <CenLocLockUnlockStates+0x26c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ede:	f24a 1222 	movw	r2, #41250	; 0xa122
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d90c      	bls.n	8000f00 <CenLocLockUnlockStates+0x1c8>
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <CenLocLockUnlockStates+0x26c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eec:	f24a 6203 	movw	r2, #42499	; 0xa603
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d805      	bhi.n	8000f00 <CenLocLockUnlockStates+0x1c8>
		{

			SecAlmToggleAlarmLed(CenLoc_CurrentState);
 8000ef4:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <CenLocLockUnlockStates+0x264>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 ff05 	bl	8001d08 <SecAlmToggleAlarmLed>
 8000efe:	e02b      	b.n	8000f58 <CenLocLockUnlockStates+0x220>

		}
		else if(42500 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 43750)
 8000f00:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <CenLocLockUnlockStates+0x26c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f06:	f24a 6204 	movw	r2, #42500	; 0xa604
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d911      	bls.n	8000f32 <CenLocLockUnlockStates+0x1fa>
 8000f0e:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <CenLocLockUnlockStates+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	f64a 22e5 	movw	r2, #43749	; 0xaae5
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d80a      	bhi.n	8000f32 <CenLocLockUnlockStates+0x1fa>
		{

			SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <CenLocLockUnlockStates+0x264>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	bf0c      	ite	eq
 8000f24:	2301      	moveq	r3, #1
 8000f26:	2300      	movne	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 feec 	bl	8001d08 <SecAlmToggleAlarmLed>
 8000f30:	e012      	b.n	8000f58 <CenLocLockUnlockStates+0x220>

		}
		else if(43750 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 45000)
 8000f32:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <CenLocLockUnlockStates+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	f64a 22e6 	movw	r2, #43750	; 0xaae6
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d90b      	bls.n	8000f58 <CenLocLockUnlockStates+0x220>
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <CenLocLockUnlockStates+0x26c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f46:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d804      	bhi.n	8000f58 <CenLocLockUnlockStates+0x220>
		{

			SecAlmToggleAlarmLed(CenLoc_CurrentState);
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <CenLocLockUnlockStates+0x264>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fed8 	bl	8001d08 <SecAlmToggleAlarmLed>

			/* do nothing */

		}

		if(CenLoc_UnlockCounter < 2 && CenLoc_LockUnlockFlag == STD_HIGH)
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <CenLocLockUnlockStates+0x284>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d850      	bhi.n	8001002 <CenLocLockUnlockStates+0x2ca>
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <CenLocLockUnlockStates+0x288>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d14c      	bne.n	8001002 <CenLocLockUnlockStates+0x2ca>
		{

			HAL_TIM_Base_Start(&htim2);
 8000f68:	4810      	ldr	r0, [pc, #64]	; (8000fac <CenLocLockUnlockStates+0x274>)
 8000f6a:	f008 ff95 	bl	8009e98 <HAL_TIM_Base_Start>
			CenLoc_Timer2Value = __HAL_TIM_GET_COUNTER(&htim2);
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <CenLocLockUnlockStates+0x274>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f74:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <CenLocLockUnlockStates+0x278>)
 8000f76:	6013      	str	r3, [r2, #0]

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <CenLocLockUnlockStates+0x274>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d81e      	bhi.n	8000fc4 <CenLocLockUnlockStates+0x28c>
			{

				CenLoc_BlinkState = STD_HIGH;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <CenLocLockUnlockStates+0x27c>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <CenLocLockUnlockStates+0x27c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 f84d 	bl	8001030 <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 8000f96:	f7ff febf 	bl	8000d18 <CenLocBlinkSignals>
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000f9a:	e03c      	b.n	8001016 <CenLocLockUnlockStates+0x2de>
 8000f9c:	20000095 	.word	0x20000095
 8000fa0:	200000f6 	.word	0x200000f6
 8000fa4:	2000050c 	.word	0x2000050c
 8000fa8:	2000009c 	.word	0x2000009c
 8000fac:	20000458 	.word	0x20000458
 8000fb0:	200000a0 	.word	0x200000a0
 8000fb4:	2000009b 	.word	0x2000009b
 8000fb8:	200000a4 	.word	0x200000a4
 8000fbc:	2000009d 	.word	0x2000009d
 8000fc0:	20000097 	.word	0x20000097

			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <CenLocLockUnlockStates+0x2ec>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d921      	bls.n	8001016 <CenLocLockUnlockStates+0x2de>
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <CenLocLockUnlockStates+0x2ec>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	f241 3287 	movw	r2, #4999	; 0x1387
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d81a      	bhi.n	8001016 <CenLocLockUnlockStates+0x2de>
			{

				CenLoc_BlinkState = STD_LOW;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <CenLocLockUnlockStates+0x2f0>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
				CenLocToggleBuzzer(CenLoc_BlinkState);
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <CenLocLockUnlockStates+0x2f0>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f820 	bl	8001030 <CenLocToggleBuzzer>
				CenLocBlinkSignals();
 8000ff0:	f7ff fe92 	bl	8000d18 <CenLocBlinkSignals>
				CenLoc_UnlockCounter = CenLoc_UnlockCounter + 1;
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	; (800102c <CenLocLockUnlockStates+0x2f4>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <CenLocLockUnlockStates+0x2f4>)
 8000ffe:	701a      	strb	r2, [r3, #0]
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8001000:	e009      	b.n	8001016 <CenLocLockUnlockStates+0x2de>
				/* do nothing */

			}

		}
		else if(CenLoc_UnlockCounter >= 2)
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <CenLocLockUnlockStates+0x2f4>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d906      	bls.n	8001018 <CenLocLockUnlockStates+0x2e0>
		{

			HAL_TIM_Base_Stop(&htim2);
 800100a:	4806      	ldr	r0, [pc, #24]	; (8001024 <CenLocLockUnlockStates+0x2ec>)
 800100c:	f008 ffce 	bl	8009fac <HAL_TIM_Base_Stop>
 8001010:	e002      	b.n	8001018 <CenLocLockUnlockStates+0x2e0>
		if(CenLoc_LockCounter < 4)
 8001012:	bf00      	nop
 8001014:	e000      	b.n	8001018 <CenLocLockUnlockStates+0x2e0>
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8001016:	bf00      	nop

		/* do nothing */

	}

	return status;
 8001018:	79fb      	ldrb	r3, [r7, #7]

}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000458 	.word	0x20000458
 8001028:	2000009b 	.word	0x2000009b
 800102c:	2000009d 	.word	0x2000009d

08001030 <CenLocToggleBuzzer>:

void CenLocToggleBuzzer(uint8 PinState)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CENLOC_BUZZER_PORT, CENLOC_BUZZER_PIN, PinState);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	461a      	mov	r2, r3
 800103e:	2140      	movs	r1, #64	; 0x40
 8001040:	4803      	ldr	r0, [pc, #12]	; (8001050 <CenLocToggleBuzzer+0x20>)
 8001042:	f004 fbb9 	bl	80057b8 <HAL_GPIO_WritePin>

}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40020400 	.word	0x40020400

08001054 <CenLocMainFunction>:

void CenLocMainFunction()
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0

	CenLocRxBtcState();
 8001058:	f7ff fdae 	bl	8000bb8 <CenLocRxBtcState>
	CenLocSecAlmStateToOff();
 800105c:	f7ff fd9a 	bl	8000b94 <CenLocSecAlmStateToOff>
	CenLocState();
 8001060:	f7ff fd5c 	bl	8000b1c <CenLocState>
	CenLocLockUnlockStates();
 8001064:	f7ff fe68 	bl	8000d38 <CenLocLockUnlockStates>

}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}

0800106c <ExtLightsMainFunction>:
void ExtLightsLightState();
StdReturnType ExtLightsInit();
uint32 ExtLightsLightReadSensorValue();

void ExtLightsMainFunction()
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0

	ExtLightsRxBtcState();
 8001070:	f000 f9f8 	bl	8001464 <ExtLightsRxBtcState>
	ExtLightsLightState();
 8001074:	f000 f802 	bl	800107c <ExtLightsLightState>

}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <ExtLightsLightState>:
	return E_OK;

}

void ExtLightsLightState()
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0

	uint8 lightSensorState = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	71fb      	strb	r3, [r7, #7]

	ExtLightsHighBeam(ExtLights_HighBeam_CurrentState);
 8001086:	4ba0      	ldr	r3, [pc, #640]	; (8001308 <ExtLightsLightState+0x28c>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 facc 	bl	8001628 <ExtLightsHighBeam>
	ExtLightsHighBeam(ExtLights_FlashHighBeam_CurrentState);
 8001090:	4b9e      	ldr	r3, [pc, #632]	; (800130c <ExtLightsLightState+0x290>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fac7 	bl	8001628 <ExtLightsHighBeam>
	ExtLightsFrontFogLight(ExtLights_FrontFogLight_CurrentState);
 800109a:	4b9d      	ldr	r3, [pc, #628]	; (8001310 <ExtLightsLightState+0x294>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fae6 	bl	8001670 <ExtLightsFrontFogLight>
	ExtLightsRearFogLight(ExtLights_RearFogLight_CurrentState);
 80010a4:	4b9b      	ldr	r3, [pc, #620]	; (8001314 <ExtLightsLightState+0x298>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fb29 	bl	8001700 <ExtLightsRearFogLight>
	ExtLightsReverseLight(ExtLights_ReverseLight_CurrentState);
 80010ae:	4b9a      	ldr	r3, [pc, #616]	; (8001318 <ExtLightsLightState+0x29c>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fb36 	bl	8001724 <ExtLightsReverseLight>

	if(Btc_ReverseLight == STD_HIGH)
 80010b8:	4b98      	ldr	r3, [pc, #608]	; (800131c <ExtLightsLightState+0x2a0>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d104      	bne.n	80010ca <ExtLightsLightState+0x4e>
	{

		ExtLights_ReverseLight_CurrentState = Btc_ReverseLight;
 80010c0:	4b96      	ldr	r3, [pc, #600]	; (800131c <ExtLightsLightState+0x2a0>)
 80010c2:	781a      	ldrb	r2, [r3, #0]
 80010c4:	4b94      	ldr	r3, [pc, #592]	; (8001318 <ExtLightsLightState+0x29c>)
 80010c6:	701a      	strb	r2, [r3, #0]
 80010c8:	e007      	b.n	80010da <ExtLightsLightState+0x5e>

	}
	else if(Btc_ReverseLight == STD_HIGH)
 80010ca:	4b94      	ldr	r3, [pc, #592]	; (800131c <ExtLightsLightState+0x2a0>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d103      	bne.n	80010da <ExtLightsLightState+0x5e>
	{

		ExtLights_ReverseLight_CurrentState = Btc_ReverseLight;
 80010d2:	4b92      	ldr	r3, [pc, #584]	; (800131c <ExtLightsLightState+0x2a0>)
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	4b90      	ldr	r3, [pc, #576]	; (8001318 <ExtLightsLightState+0x29c>)
 80010d8:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATEZERO)
 80010da:	4b91      	ldr	r3, [pc, #580]	; (8001320 <ExtLightsLightState+0x2a4>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b64      	cmp	r3, #100	; 0x64
 80010e0:	d10c      	bne.n	80010fc <ExtLightsLightState+0x80>
	{

		ExtLightsLowBeam(STD_LOW);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 fa8e 	bl	8001604 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(STD_LOW);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f000 faaf 	bl	800164c <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(STD_LOW);
 80010ee:	2000      	movs	r0, #0
 80010f0:	f000 faf4 	bl	80016dc <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(STD_LOW);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f000 fb27 	bl	8001748 <ExtLightsLicensePlateLight>
 80010fa:	e048      	b.n	800118e <ExtLightsLightState+0x112>

	}
	else if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATEONE)
 80010fc:	4b88      	ldr	r3, [pc, #544]	; (8001320 <ExtLightsLightState+0x2a4>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b65      	cmp	r3, #101	; 0x65
 8001102:	d123      	bne.n	800114c <ExtLightsLightState+0xd0>
	{

		lightSensorState = ExtLightsLightReadSensorValue();
 8001104:	f000 fa6c 	bl	80015e0 <ExtLightsLightReadSensorValue>
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]

		if(lightSensorState < EXTLIGHTS_LIGHTSENSOR_DAYNIGHTVALUE)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b95      	cmp	r3, #149	; 0x95
 8001110:	d80c      	bhi.n	800112c <ExtLightsLightState+0xb0>
		{

			ExtLightsLowBeam(STD_HIGH);
 8001112:	2001      	movs	r0, #1
 8001114:	f000 fa76 	bl	8001604 <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_HIGH);
 8001118:	2001      	movs	r0, #1
 800111a:	f000 fa97 	bl	800164c <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_HIGH);
 800111e:	2001      	movs	r0, #1
 8001120:	f000 fadc 	bl	80016dc <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_HIGH);
 8001124:	2001      	movs	r0, #1
 8001126:	f000 fb0f 	bl	8001748 <ExtLightsLicensePlateLight>
 800112a:	e030      	b.n	800118e <ExtLightsLightState+0x112>

		}
		else if(lightSensorState > EXTLIGHTS_LIGHTSENSOR_DAYNIGHTVALUE)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b96      	cmp	r3, #150	; 0x96
 8001130:	d92d      	bls.n	800118e <ExtLightsLightState+0x112>
		{

			ExtLightsLowBeam(STD_LOW);
 8001132:	2000      	movs	r0, #0
 8001134:	f000 fa66 	bl	8001604 <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_HIGH);
 8001138:	2001      	movs	r0, #1
 800113a:	f000 fa87 	bl	800164c <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_LOW);
 800113e:	2000      	movs	r0, #0
 8001140:	f000 facc 	bl	80016dc <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_LOW);
 8001144:	2000      	movs	r0, #0
 8001146:	f000 faff 	bl	8001748 <ExtLightsLicensePlateLight>
 800114a:	e020      	b.n	800118e <ExtLightsLightState+0x112>

		}

	}
	else if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATETWO)
 800114c:	4b74      	ldr	r3, [pc, #464]	; (8001320 <ExtLightsLightState+0x2a4>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b66      	cmp	r3, #102	; 0x66
 8001152:	d10c      	bne.n	800116e <ExtLightsLightState+0xf2>
	{

		ExtLightsLowBeam(STD_LOW);
 8001154:	2000      	movs	r0, #0
 8001156:	f000 fa55 	bl	8001604 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(STD_HIGH);
 800115a:	2001      	movs	r0, #1
 800115c:	f000 fa76 	bl	800164c <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(STD_HIGH);
 8001160:	2001      	movs	r0, #1
 8001162:	f000 fabb 	bl	80016dc <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(STD_HIGH);
 8001166:	2001      	movs	r0, #1
 8001168:	f000 faee 	bl	8001748 <ExtLightsLicensePlateLight>
 800116c:	e00f      	b.n	800118e <ExtLightsLightState+0x112>

	}
	else if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATETHREE)
 800116e:	4b6c      	ldr	r3, [pc, #432]	; (8001320 <ExtLightsLightState+0x2a4>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b67      	cmp	r3, #103	; 0x67
 8001174:	d10b      	bne.n	800118e <ExtLightsLightState+0x112>
	{

		ExtLightsLowBeam(STD_HIGH);
 8001176:	2001      	movs	r0, #1
 8001178:	f000 fa44 	bl	8001604 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(STD_HIGH);
 800117c:	2001      	movs	r0, #1
 800117e:	f000 fa65 	bl	800164c <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(STD_HIGH);
 8001182:	2001      	movs	r0, #1
 8001184:	f000 faaa 	bl	80016dc <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(STD_HIGH);
 8001188:	2001      	movs	r0, #1
 800118a:	f000 fadd 	bl	8001748 <ExtLightsLicensePlateLight>

		/* do nothing */

	}

	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 800118e:	4b65      	ldr	r3, [pc, #404]	; (8001324 <ExtLightsLightState+0x2a8>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d155      	bne.n	8001242 <ExtLightsLightState+0x1c6>
	{

		HAL_TIM_Base_Start(&htim2);
 8001196:	4864      	ldr	r0, [pc, #400]	; (8001328 <ExtLightsLightState+0x2ac>)
 8001198:	f008 fe7e 	bl	8009e98 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 800119c:	4b62      	ldr	r3, [pc, #392]	; (8001328 <ExtLightsLightState+0x2ac>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d805      	bhi.n	80011b6 <ExtLightsLightState+0x13a>
		{

			ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 80011aa:	4b5e      	ldr	r3, [pc, #376]	; (8001324 <ExtLightsLightState+0x2a8>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 fa70 	bl	8001694 <ExtLightsTurnSignalLeft>
 80011b4:	e04e      	b.n	8001254 <ExtLightsLightState+0x1d8>

		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2)  && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 80011b6:	4b5c      	ldr	r3, [pc, #368]	; (8001328 <ExtLightsLightState+0x2ac>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d911      	bls.n	80011e8 <ExtLightsLightState+0x16c>
 80011c4:	4b58      	ldr	r3, [pc, #352]	; (8001328 <ExtLightsLightState+0x2ac>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	f241 3287 	movw	r2, #4999	; 0x1387
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d80a      	bhi.n	80011e8 <ExtLightsLightState+0x16c>
		{

			ExtLightsTurnSignalLeft(!ExtLights_TurnSignalLeft_CurrentState);
 80011d2:	4b54      	ldr	r3, [pc, #336]	; (8001324 <ExtLightsLightState+0x2a8>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	bf0c      	ite	eq
 80011da:	2301      	moveq	r3, #1
 80011dc:	2300      	movne	r3, #0
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 fa57 	bl	8001694 <ExtLightsTurnSignalLeft>
 80011e6:	e035      	b.n	8001254 <ExtLightsLightState+0x1d8>

		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 80011e8:	4b4f      	ldr	r3, [pc, #316]	; (8001328 <ExtLightsLightState+0x2ac>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d90c      	bls.n	8001210 <ExtLightsLightState+0x194>
 80011f6:	4b4c      	ldr	r3, [pc, #304]	; (8001328 <ExtLightsLightState+0x2ac>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8001200:	4293      	cmp	r3, r2
 8001202:	d805      	bhi.n	8001210 <ExtLightsLightState+0x194>
		{

			ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 8001204:	4b47      	ldr	r3, [pc, #284]	; (8001324 <ExtLightsLightState+0x2a8>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f000 fa43 	bl	8001694 <ExtLightsTurnSignalLeft>
 800120e:	e021      	b.n	8001254 <ExtLightsLightState+0x1d8>

		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8001210:	4b45      	ldr	r3, [pc, #276]	; (8001328 <ExtLightsLightState+0x2ac>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800121a:	4293      	cmp	r3, r2
 800121c:	d91a      	bls.n	8001254 <ExtLightsLightState+0x1d8>
 800121e:	4b42      	ldr	r3, [pc, #264]	; (8001328 <ExtLightsLightState+0x2ac>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001224:	f242 720f 	movw	r2, #9999	; 0x270f
 8001228:	4293      	cmp	r3, r2
 800122a:	d813      	bhi.n	8001254 <ExtLightsLightState+0x1d8>
		{

			ExtLightsTurnSignalLeft(!ExtLights_TurnSignalLeft_CurrentState);
 800122c:	4b3d      	ldr	r3, [pc, #244]	; (8001324 <ExtLightsLightState+0x2a8>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	bf0c      	ite	eq
 8001234:	2301      	moveq	r3, #1
 8001236:	2300      	movne	r3, #0
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f000 fa2a 	bl	8001694 <ExtLightsTurnSignalLeft>
 8001240:	e008      	b.n	8001254 <ExtLightsLightState+0x1d8>
			/* do nothing */

		}

	}
	else if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW)
 8001242:	4b38      	ldr	r3, [pc, #224]	; (8001324 <ExtLightsLightState+0x2a8>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d104      	bne.n	8001254 <ExtLightsLightState+0x1d8>
	{

		ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 800124a:	4b36      	ldr	r3, [pc, #216]	; (8001324 <ExtLightsLightState+0x2a8>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fa20 	bl	8001694 <ExtLightsTurnSignalLeft>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8001254:	4b35      	ldr	r3, [pc, #212]	; (800132c <ExtLightsLightState+0x2b0>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d169      	bne.n	8001330 <ExtLightsLightState+0x2b4>
	{

		HAL_TIM_Base_Start(&htim2);
 800125c:	4832      	ldr	r0, [pc, #200]	; (8001328 <ExtLightsLightState+0x2ac>)
 800125e:	f008 fe1b 	bl	8009e98 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8001262:	4b31      	ldr	r3, [pc, #196]	; (8001328 <ExtLightsLightState+0x2ac>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800126c:	4293      	cmp	r3, r2
 800126e:	d805      	bhi.n	800127c <ExtLightsLightState+0x200>
		{

			ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 8001270:	4b2e      	ldr	r3, [pc, #184]	; (800132c <ExtLightsLightState+0x2b0>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f000 fa1f 	bl	80016b8 <ExtLightsTurnSignalRight>
 800127a:	e062      	b.n	8001342 <ExtLightsLightState+0x2c6>

		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 800127c:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <ExtLightsLightState+0x2ac>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001286:	4293      	cmp	r3, r2
 8001288:	d911      	bls.n	80012ae <ExtLightsLightState+0x232>
 800128a:	4b27      	ldr	r3, [pc, #156]	; (8001328 <ExtLightsLightState+0x2ac>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	f241 3287 	movw	r2, #4999	; 0x1387
 8001294:	4293      	cmp	r3, r2
 8001296:	d80a      	bhi.n	80012ae <ExtLightsLightState+0x232>
		{

			ExtLightsTurnSignalRight(!ExtLights_TurnSignalRight_CurrentState);
 8001298:	4b24      	ldr	r3, [pc, #144]	; (800132c <ExtLightsLightState+0x2b0>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	bf0c      	ite	eq
 80012a0:	2301      	moveq	r3, #1
 80012a2:	2300      	movne	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fa06 	bl	80016b8 <ExtLightsTurnSignalRight>
 80012ac:	e049      	b.n	8001342 <ExtLightsLightState+0x2c6>

		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <ExtLightsLightState+0x2ac>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d90c      	bls.n	80012d6 <ExtLightsLightState+0x25a>
 80012bc:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <ExtLightsLightState+0x2ac>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d805      	bhi.n	80012d6 <ExtLightsLightState+0x25a>
		{

			ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <ExtLightsLightState+0x2b0>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f9f2 	bl	80016b8 <ExtLightsTurnSignalRight>
 80012d4:	e035      	b.n	8001342 <ExtLightsLightState+0x2c6>

		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <ExtLightsLightState+0x2ac>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d92e      	bls.n	8001342 <ExtLightsLightState+0x2c6>
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <ExtLightsLightState+0x2ac>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	f242 720f 	movw	r2, #9999	; 0x270f
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d827      	bhi.n	8001342 <ExtLightsLightState+0x2c6>
		{

			ExtLightsTurnSignalRight(!ExtLights_TurnSignalRight_CurrentState);
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <ExtLightsLightState+0x2b0>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	bf0c      	ite	eq
 80012fa:	2301      	moveq	r3, #1
 80012fc:	2300      	movne	r3, #0
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	4618      	mov	r0, r3
 8001302:	f000 f9d9 	bl	80016b8 <ExtLightsTurnSignalRight>
 8001306:	e01c      	b.n	8001342 <ExtLightsLightState+0x2c6>
 8001308:	200000b0 	.word	0x200000b0
 800130c:	200000ae 	.word	0x200000ae
 8001310:	200000b1 	.word	0x200000b1
 8001314:	200000b5 	.word	0x200000b5
 8001318:	200000ac 	.word	0x200000ac
 800131c:	200000bf 	.word	0x200000bf
 8001320:	200000af 	.word	0x200000af
 8001324:	200000b2 	.word	0x200000b2
 8001328:	20000458 	.word	0x20000458
 800132c:	200000b3 	.word	0x200000b3

			/* do nothing */

		}
	}
	else if(ExtLights_TurnSignalRight_CurrentState == STD_LOW)
 8001330:	4b49      	ldr	r3, [pc, #292]	; (8001458 <ExtLightsLightState+0x3dc>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d104      	bne.n	8001342 <ExtLightsLightState+0x2c6>
	{

		ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 8001338:	4b47      	ldr	r3, [pc, #284]	; (8001458 <ExtLightsLightState+0x3dc>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f000 f9bb 	bl	80016b8 <ExtLightsTurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 8001342:	4b46      	ldr	r3, [pc, #280]	; (800145c <ExtLightsLightState+0x3e0>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d173      	bne.n	8001432 <ExtLightsLightState+0x3b6>
	{

		HAL_TIM_Base_Start(&htim2);
 800134a:	4845      	ldr	r0, [pc, #276]	; (8001460 <ExtLightsLightState+0x3e4>)
 800134c:	f008 fda4 	bl	8009e98 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8001350:	4b43      	ldr	r3, [pc, #268]	; (8001460 <ExtLightsLightState+0x3e4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800135a:	4293      	cmp	r3, r2
 800135c:	d80a      	bhi.n	8001374 <ExtLightsLightState+0x2f8>
		{

			ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 800135e:	4b3f      	ldr	r3, [pc, #252]	; (800145c <ExtLightsLightState+0x3e0>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f9a8 	bl	80016b8 <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 8001368:	4b3c      	ldr	r3, [pc, #240]	; (800145c <ExtLightsLightState+0x3e0>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f000 f991 	bl	8001694 <ExtLightsTurnSignalLeft>

		/* do nothing */

	}

}
 8001372:	e06d      	b.n	8001450 <ExtLightsLightState+0x3d4>
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8001374:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <ExtLightsLightState+0x3e4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800137e:	4293      	cmp	r3, r2
 8001380:	d91b      	bls.n	80013ba <ExtLightsLightState+0x33e>
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <ExtLightsLightState+0x3e4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	f241 3287 	movw	r2, #4999	; 0x1387
 800138c:	4293      	cmp	r3, r2
 800138e:	d814      	bhi.n	80013ba <ExtLightsLightState+0x33e>
			ExtLightsTurnSignalRight(!ExtLights_HazardLight_CurrentState);
 8001390:	4b32      	ldr	r3, [pc, #200]	; (800145c <ExtLightsLightState+0x3e0>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	bf0c      	ite	eq
 8001398:	2301      	moveq	r3, #1
 800139a:	2300      	movne	r3, #0
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f98a 	bl	80016b8 <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(!ExtLights_HazardLight_CurrentState);
 80013a4:	4b2d      	ldr	r3, [pc, #180]	; (800145c <ExtLightsLightState+0x3e0>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	bf0c      	ite	eq
 80013ac:	2301      	moveq	r3, #1
 80013ae:	2300      	movne	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f96e 	bl	8001694 <ExtLightsTurnSignalLeft>
 80013b8:	e04a      	b.n	8001450 <ExtLightsLightState+0x3d4>
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2)&& __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 80013ba:	4b29      	ldr	r3, [pc, #164]	; (8001460 <ExtLightsLightState+0x3e4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d911      	bls.n	80013ec <ExtLightsLightState+0x370>
 80013c8:	4b25      	ldr	r3, [pc, #148]	; (8001460 <ExtLightsLightState+0x3e4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d80a      	bhi.n	80013ec <ExtLightsLightState+0x370>
			ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <ExtLightsLightState+0x3e0>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f96c 	bl	80016b8 <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 80013e0:	4b1e      	ldr	r3, [pc, #120]	; (800145c <ExtLightsLightState+0x3e0>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 f955 	bl	8001694 <ExtLightsTurnSignalLeft>
 80013ea:	e031      	b.n	8001450 <ExtLightsLightState+0x3d4>
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 80013ec:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <ExtLightsLightState+0x3e4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f2:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d92a      	bls.n	8001450 <ExtLightsLightState+0x3d4>
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <ExtLightsLightState+0x3e4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001400:	f242 720f 	movw	r2, #9999	; 0x270f
 8001404:	4293      	cmp	r3, r2
 8001406:	d823      	bhi.n	8001450 <ExtLightsLightState+0x3d4>
			ExtLightsTurnSignalRight(!ExtLights_HazardLight_CurrentState);
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <ExtLightsLightState+0x3e0>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	bf0c      	ite	eq
 8001410:	2301      	moveq	r3, #1
 8001412:	2300      	movne	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f94e 	bl	80016b8 <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(!ExtLights_HazardLight_CurrentState);
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <ExtLightsLightState+0x3e0>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	bf0c      	ite	eq
 8001424:	2301      	moveq	r3, #1
 8001426:	2300      	movne	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f932 	bl	8001694 <ExtLightsTurnSignalLeft>
}
 8001430:	e00e      	b.n	8001450 <ExtLightsLightState+0x3d4>
	else if(ExtLights_HazardLight_CurrentState == STD_LOW)
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <ExtLightsLightState+0x3e0>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10a      	bne.n	8001450 <ExtLightsLightState+0x3d4>
		ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <ExtLightsLightState+0x3e0>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f93a 	bl	80016b8 <ExtLightsTurnSignalRight>
		ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <ExtLightsLightState+0x3e0>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f923 	bl	8001694 <ExtLightsTurnSignalLeft>
}
 800144e:	e7ff      	b.n	8001450 <ExtLightsLightState+0x3d4>
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	200000b3 	.word	0x200000b3
 800145c:	200000b4 	.word	0x200000b4
 8001460:	20000458 	.word	0x20000458

08001464 <ExtLightsRxBtcState>:

void ExtLightsRxBtcState()
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

	if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATEZERO)
 8001468:	4b4d      	ldr	r3, [pc, #308]	; (80015a0 <ExtLightsRxBtcState+0x13c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b64      	cmp	r3, #100	; 0x64
 800146e:	d103      	bne.n	8001478 <ExtLightsRxBtcState+0x14>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATEZERO;
 8001470:	4b4c      	ldr	r3, [pc, #304]	; (80015a4 <ExtLightsRxBtcState+0x140>)
 8001472:	2264      	movs	r2, #100	; 0x64
 8001474:	701a      	strb	r2, [r3, #0]
 8001476:	e016      	b.n	80014a6 <ExtLightsRxBtcState+0x42>

	}
	else if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATEONE)
 8001478:	4b49      	ldr	r3, [pc, #292]	; (80015a0 <ExtLightsRxBtcState+0x13c>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b65      	cmp	r3, #101	; 0x65
 800147e:	d103      	bne.n	8001488 <ExtLightsRxBtcState+0x24>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATEONE;
 8001480:	4b48      	ldr	r3, [pc, #288]	; (80015a4 <ExtLightsRxBtcState+0x140>)
 8001482:	2265      	movs	r2, #101	; 0x65
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	e00e      	b.n	80014a6 <ExtLightsRxBtcState+0x42>

	}
	else if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATETWO)
 8001488:	4b45      	ldr	r3, [pc, #276]	; (80015a0 <ExtLightsRxBtcState+0x13c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b66      	cmp	r3, #102	; 0x66
 800148e:	d103      	bne.n	8001498 <ExtLightsRxBtcState+0x34>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATETWO;
 8001490:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <ExtLightsRxBtcState+0x140>)
 8001492:	2266      	movs	r2, #102	; 0x66
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	e006      	b.n	80014a6 <ExtLightsRxBtcState+0x42>

	}
	else if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATETHREE)
 8001498:	4b41      	ldr	r3, [pc, #260]	; (80015a0 <ExtLightsRxBtcState+0x13c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b67      	cmp	r3, #103	; 0x67
 800149e:	d102      	bne.n	80014a6 <ExtLightsRxBtcState+0x42>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATETHREE;
 80014a0:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <ExtLightsRxBtcState+0x140>)
 80014a2:	2267      	movs	r2, #103	; 0x67
 80014a4:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_HighBeam == STD_HIGH)
 80014a6:	4b40      	ldr	r3, [pc, #256]	; (80015a8 <ExtLightsRxBtcState+0x144>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d104      	bne.n	80014b8 <ExtLightsRxBtcState+0x54>
	{

		ExtLights_HighBeam_CurrentState = Btc_HighBeam;
 80014ae:	4b3e      	ldr	r3, [pc, #248]	; (80015a8 <ExtLightsRxBtcState+0x144>)
 80014b0:	781a      	ldrb	r2, [r3, #0]
 80014b2:	4b3e      	ldr	r3, [pc, #248]	; (80015ac <ExtLightsRxBtcState+0x148>)
 80014b4:	701a      	strb	r2, [r3, #0]
 80014b6:	e007      	b.n	80014c8 <ExtLightsRxBtcState+0x64>

	}
	else if(Btc_HighBeam == STD_LOW)
 80014b8:	4b3b      	ldr	r3, [pc, #236]	; (80015a8 <ExtLightsRxBtcState+0x144>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d103      	bne.n	80014c8 <ExtLightsRxBtcState+0x64>
	{

		ExtLights_HighBeam_CurrentState = Btc_HighBeam;
 80014c0:	4b39      	ldr	r3, [pc, #228]	; (80015a8 <ExtLightsRxBtcState+0x144>)
 80014c2:	781a      	ldrb	r2, [r3, #0]
 80014c4:	4b39      	ldr	r3, [pc, #228]	; (80015ac <ExtLightsRxBtcState+0x148>)
 80014c6:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_FrontFogLight == STD_HIGH)
 80014c8:	4b39      	ldr	r3, [pc, #228]	; (80015b0 <ExtLightsRxBtcState+0x14c>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d104      	bne.n	80014da <ExtLightsRxBtcState+0x76>
	{

		ExtLights_FrontFogLight_CurrentState = Btc_FrontFogLight;
 80014d0:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <ExtLightsRxBtcState+0x14c>)
 80014d2:	781a      	ldrb	r2, [r3, #0]
 80014d4:	4b37      	ldr	r3, [pc, #220]	; (80015b4 <ExtLightsRxBtcState+0x150>)
 80014d6:	701a      	strb	r2, [r3, #0]
 80014d8:	e007      	b.n	80014ea <ExtLightsRxBtcState+0x86>

	}
	else if(Btc_FrontFogLight == STD_LOW)
 80014da:	4b35      	ldr	r3, [pc, #212]	; (80015b0 <ExtLightsRxBtcState+0x14c>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d103      	bne.n	80014ea <ExtLightsRxBtcState+0x86>
	{

		ExtLights_FrontFogLight_CurrentState = Btc_FrontFogLight;
 80014e2:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <ExtLightsRxBtcState+0x14c>)
 80014e4:	781a      	ldrb	r2, [r3, #0]
 80014e6:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <ExtLightsRxBtcState+0x150>)
 80014e8:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_RearFogLight == STD_HIGH)
 80014ea:	4b33      	ldr	r3, [pc, #204]	; (80015b8 <ExtLightsRxBtcState+0x154>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d104      	bne.n	80014fc <ExtLightsRxBtcState+0x98>
	{

		ExtLights_RearFogLight_CurrentState = Btc_RearFogLight;
 80014f2:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <ExtLightsRxBtcState+0x154>)
 80014f4:	781a      	ldrb	r2, [r3, #0]
 80014f6:	4b31      	ldr	r3, [pc, #196]	; (80015bc <ExtLightsRxBtcState+0x158>)
 80014f8:	701a      	strb	r2, [r3, #0]
 80014fa:	e007      	b.n	800150c <ExtLightsRxBtcState+0xa8>

	}
	else if(Btc_RearFogLight == STD_LOW)
 80014fc:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <ExtLightsRxBtcState+0x154>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d103      	bne.n	800150c <ExtLightsRxBtcState+0xa8>
	{

		ExtLights_RearFogLight_CurrentState = Btc_RearFogLight;
 8001504:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <ExtLightsRxBtcState+0x154>)
 8001506:	781a      	ldrb	r2, [r3, #0]
 8001508:	4b2c      	ldr	r3, [pc, #176]	; (80015bc <ExtLightsRxBtcState+0x158>)
 800150a:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_BrakeLight == STD_HIGH)
 800150c:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <ExtLightsRxBtcState+0x15c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d104      	bne.n	800151e <ExtLightsRxBtcState+0xba>
	{

		ExtLights_BrakeLight_CurrentState = Btc_BrakeLight;
 8001514:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <ExtLightsRxBtcState+0x15c>)
 8001516:	781a      	ldrb	r2, [r3, #0]
 8001518:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <ExtLightsRxBtcState+0x160>)
 800151a:	701a      	strb	r2, [r3, #0]
 800151c:	e007      	b.n	800152e <ExtLightsRxBtcState+0xca>

	}
	else if(Btc_BrakeLight == STD_LOW)
 800151e:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <ExtLightsRxBtcState+0x15c>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d103      	bne.n	800152e <ExtLightsRxBtcState+0xca>
	{

		ExtLights_BrakeLight_CurrentState = Btc_BrakeLight;
 8001526:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <ExtLightsRxBtcState+0x15c>)
 8001528:	781a      	ldrb	r2, [r3, #0]
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <ExtLightsRxBtcState+0x160>)
 800152c:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_TurnSignalLeft == STD_HIGH)
 800152e:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <ExtLightsRxBtcState+0x164>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d104      	bne.n	8001540 <ExtLightsRxBtcState+0xdc>
	{

		ExtLights_TurnSignalLeft_CurrentState = Btc_TurnSignalLeft;
 8001536:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <ExtLightsRxBtcState+0x164>)
 8001538:	781a      	ldrb	r2, [r3, #0]
 800153a:	4b24      	ldr	r3, [pc, #144]	; (80015cc <ExtLightsRxBtcState+0x168>)
 800153c:	701a      	strb	r2, [r3, #0]
 800153e:	e007      	b.n	8001550 <ExtLightsRxBtcState+0xec>

	}
	else if(Btc_TurnSignalLeft == STD_LOW)
 8001540:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <ExtLightsRxBtcState+0x164>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d103      	bne.n	8001550 <ExtLightsRxBtcState+0xec>
	{

		ExtLights_TurnSignalLeft_CurrentState = Btc_TurnSignalLeft;
 8001548:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <ExtLightsRxBtcState+0x164>)
 800154a:	781a      	ldrb	r2, [r3, #0]
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <ExtLightsRxBtcState+0x168>)
 800154e:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_TurnSignalRight == STD_HIGH)
 8001550:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <ExtLightsRxBtcState+0x16c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d104      	bne.n	8001562 <ExtLightsRxBtcState+0xfe>
	{

		ExtLights_TurnSignalRight_CurrentState = Btc_TurnSignalRight;
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <ExtLightsRxBtcState+0x16c>)
 800155a:	781a      	ldrb	r2, [r3, #0]
 800155c:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <ExtLightsRxBtcState+0x170>)
 800155e:	701a      	strb	r2, [r3, #0]
 8001560:	e007      	b.n	8001572 <ExtLightsRxBtcState+0x10e>

	}
	else if(Btc_TurnSignalRight == STD_LOW)
 8001562:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <ExtLightsRxBtcState+0x16c>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d103      	bne.n	8001572 <ExtLightsRxBtcState+0x10e>
	{

		ExtLights_TurnSignalRight_CurrentState = Btc_TurnSignalRight;
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <ExtLightsRxBtcState+0x16c>)
 800156c:	781a      	ldrb	r2, [r3, #0]
 800156e:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <ExtLightsRxBtcState+0x170>)
 8001570:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_HazardLight == STD_HIGH)
 8001572:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <ExtLightsRxBtcState+0x174>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d104      	bne.n	8001584 <ExtLightsRxBtcState+0x120>
	{

		ExtLights_HazardLight_CurrentState = Btc_HazardLight;
 800157a:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <ExtLightsRxBtcState+0x174>)
 800157c:	781a      	ldrb	r2, [r3, #0]
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <ExtLightsRxBtcState+0x178>)
 8001580:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8001582:	e007      	b.n	8001594 <ExtLightsRxBtcState+0x130>
	else if(Btc_HazardLight == STD_LOW)
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <ExtLightsRxBtcState+0x174>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d103      	bne.n	8001594 <ExtLightsRxBtcState+0x130>
		ExtLights_HazardLight_CurrentState = Btc_HazardLight;
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <ExtLightsRxBtcState+0x174>)
 800158e:	781a      	ldrb	r2, [r3, #0]
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <ExtLightsRxBtcState+0x178>)
 8001592:	701a      	strb	r2, [r3, #0]
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	200000b6 	.word	0x200000b6
 80015a4:	200000af 	.word	0x200000af
 80015a8:	200000b7 	.word	0x200000b7
 80015ac:	200000b0 	.word	0x200000b0
 80015b0:	200000b9 	.word	0x200000b9
 80015b4:	200000b1 	.word	0x200000b1
 80015b8:	200000be 	.word	0x200000be
 80015bc:	200000b5 	.word	0x200000b5
 80015c0:	200000bd 	.word	0x200000bd
 80015c4:	200000ad 	.word	0x200000ad
 80015c8:	200000ba 	.word	0x200000ba
 80015cc:	200000b2 	.word	0x200000b2
 80015d0:	200000bb 	.word	0x200000bb
 80015d4:	200000b3 	.word	0x200000b3
 80015d8:	200000bc 	.word	0x200000bc
 80015dc:	200000b4 	.word	0x200000b4

080015e0 <ExtLightsLightReadSensorValue>:

uint32 ExtLightsLightReadSensorValue()
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0

	uint8 sensorValue = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	71fb      	strb	r3, [r7, #7]

	sensorValue = ADC_BUFFER[2];
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <ExtLightsLightReadSensorValue+0x20>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	71fb      	strb	r3, [r7, #7]

	return sensorValue;
 80015f0:	79fb      	ldrb	r3, [r7, #7]

}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	200000dc 	.word	0x200000dc

08001604 <ExtLightsLowBeam>:

void ExtLightsLowBeam(uint8 PinState)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_LOWBEAM_PORT, EXTLIGHTS_LOWBEAM_PIN, PinState);
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	461a      	mov	r2, r3
 8001612:	2120      	movs	r1, #32
 8001614:	4803      	ldr	r0, [pc, #12]	; (8001624 <ExtLightsLowBeam+0x20>)
 8001616:	f004 f8cf 	bl	80057b8 <HAL_GPIO_WritePin>

}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40020000 	.word	0x40020000

08001628 <ExtLightsHighBeam>:

void ExtLightsHighBeam(uint8 PinState)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	461a      	mov	r2, r3
 8001636:	2120      	movs	r1, #32
 8001638:	4803      	ldr	r0, [pc, #12]	; (8001648 <ExtLightsHighBeam+0x20>)
 800163a:	f004 f8bd 	bl	80057b8 <HAL_GPIO_WritePin>

}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40020000 	.word	0x40020000

0800164c <ExtLightsDayTimeRunningLight>:

void ExtLightsDayTimeRunningLight(uint8 PinState)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_DAYTIMERUNNINGLIGHT_PORT, EXTLIGHTS_DAYTIMERUNNINGLIGHT_PIN, PinState);
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	461a      	mov	r2, r3
 800165a:	2120      	movs	r1, #32
 800165c:	4803      	ldr	r0, [pc, #12]	; (800166c <ExtLightsDayTimeRunningLight+0x20>)
 800165e:	f004 f8ab 	bl	80057b8 <HAL_GPIO_WritePin>

}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40020000 	.word	0x40020000

08001670 <ExtLightsFrontFogLight>:

void ExtLightsFrontFogLight(uint8 PinState)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_FRONTFOGLIGHT_PORT, EXTLIGHTS_FRONTFOGLIGHT_PIN, PinState);
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	461a      	mov	r2, r3
 800167e:	2120      	movs	r1, #32
 8001680:	4803      	ldr	r0, [pc, #12]	; (8001690 <ExtLightsFrontFogLight+0x20>)
 8001682:	f004 f899 	bl	80057b8 <HAL_GPIO_WritePin>

}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40020000 	.word	0x40020000

08001694 <ExtLightsTurnSignalLeft>:

void ExtLightsTurnSignalLeft(uint8 PinState)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALLEFT_PORT, EXTLIGHTS_TURNSIGNALLEFT_PIN, PinState);
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	461a      	mov	r2, r3
 80016a2:	2120      	movs	r1, #32
 80016a4:	4803      	ldr	r0, [pc, #12]	; (80016b4 <ExtLightsTurnSignalLeft+0x20>)
 80016a6:	f004 f887 	bl	80057b8 <HAL_GPIO_WritePin>

}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40020000 	.word	0x40020000

080016b8 <ExtLightsTurnSignalRight>:

void ExtLightsTurnSignalRight(uint8 PinState)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALRIGHT_PORT, EXTLIGHTS_TURNSIGNALRIGHT_PIN, PinState);
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	461a      	mov	r2, r3
 80016c6:	2120      	movs	r1, #32
 80016c8:	4803      	ldr	r0, [pc, #12]	; (80016d8 <ExtLightsTurnSignalRight+0x20>)
 80016ca:	f004 f875 	bl	80057b8 <HAL_GPIO_WritePin>

}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40020000 	.word	0x40020000

080016dc <ExtLightsRearPositionLight>:

void ExtLightsRearPositionLight(uint8 PinState)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REARPOSITIONLIGHT_PORT, EXTLIGHTS_REARPOSITIONLIGHT_PIN, PinState);
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	461a      	mov	r2, r3
 80016ea:	2120      	movs	r1, #32
 80016ec:	4803      	ldr	r0, [pc, #12]	; (80016fc <ExtLightsRearPositionLight+0x20>)
 80016ee:	f004 f863 	bl	80057b8 <HAL_GPIO_WritePin>

}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40020000 	.word	0x40020000

08001700 <ExtLightsRearFogLight>:

void ExtLightsRearFogLight(uint8 PinState)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REARFOGLIGHT_PORT, EXTLIGHTS_REARFOGLIGHT_PIN, PinState);
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	461a      	mov	r2, r3
 800170e:	2120      	movs	r1, #32
 8001710:	4803      	ldr	r0, [pc, #12]	; (8001720 <ExtLightsRearFogLight+0x20>)
 8001712:	f004 f851 	bl	80057b8 <HAL_GPIO_WritePin>

}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40020000 	.word	0x40020000

08001724 <ExtLightsReverseLight>:
	HAL_GPIO_WritePin(EXTLIGHTS_BRAKELIGHT_PORT, EXTLIGHTS_BRAKELIGHT_PIN, PinState);

}

void ExtLightsReverseLight(uint8 PinState)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	461a      	mov	r2, r3
 8001732:	2120      	movs	r1, #32
 8001734:	4803      	ldr	r0, [pc, #12]	; (8001744 <ExtLightsReverseLight+0x20>)
 8001736:	f004 f83f 	bl	80057b8 <HAL_GPIO_WritePin>

}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40020000 	.word	0x40020000

08001748 <ExtLightsLicensePlateLight>:

void ExtLightsLicensePlateLight(uint8 PinState)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_LICENSEPLATELIGHT_PORT, EXTLIGHTS_LICENSEPLATELIGHT_PIN, PinState);
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	461a      	mov	r2, r3
 8001756:	2120      	movs	r1, #32
 8001758:	4803      	ldr	r0, [pc, #12]	; (8001768 <ExtLightsLicensePlateLight+0x20>)
 800175a:	f004 f82d 	bl	80057b8 <HAL_GPIO_WritePin>

}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40020000 	.word	0x40020000

0800176c <HVACTemSenReturnTemperatureValue>:
//	tempStatus = HVACTemSenAdcReceivedValues();

}

float HVACTemSenReturnTemperatureValue(float TemSenVal)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	ed87 0a01 	vstr	s0, [r7, #4]

	/* redo */

	return 1;
 8001776:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800177a:	ee07 3a90 	vmov	s15, r3

}
 800177e:	eeb0 0a67 	vmov.f32	s0, s15
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HVACTemSenAdcReceivedValues>:

float HVACTemSenAdcReceivedValues()
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0

	uint32 RxTem = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, 6);
 8001796:	2206      	movs	r2, #6
 8001798:	490f      	ldr	r1, [pc, #60]	; (80017d8 <HVACTemSenAdcReceivedValues+0x4c>)
 800179a:	4810      	ldr	r0, [pc, #64]	; (80017dc <HVACTemSenAdcReceivedValues+0x50>)
 800179c:	f002 f860 	bl	8003860 <HAL_ADC_Start_DMA>
	RxTem = HVACTemSenReturnTemperatureValue(ADC_BUFFER[0]);
 80017a0:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <HVACTemSenAdcReceivedValues+0x4c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ac:	eeb0 0a67 	vmov.f32	s0, s15
 80017b0:	f7ff ffdc 	bl	800176c <HVACTemSenReturnTemperatureValue>
 80017b4:	eef0 7a40 	vmov.f32	s15, s0
 80017b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017bc:	ee17 3a90 	vmov	r3, s15
 80017c0:	607b      	str	r3, [r7, #4]

	return RxTem;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eef8 7a67 	vcvt.f32.u32	s15, s15

}
 80017cc:	eeb0 0a67 	vmov.f32	s0, s15
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200000dc 	.word	0x200000dc
 80017dc:	20000108 	.word	0x20000108

080017e0 <HVACMainFunction>:


}

void HVACMainFunction()
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0

	//HVACI2cTxToLcd();
	HVAC_TemSenRxTemperature = HVACTemSenAdcReceivedValues();
 80017e4:	f7ff ffd2 	bl	800178c <HVACTemSenAdcReceivedValues>
 80017e8:	eef0 7a40 	vmov.f32	s15, s0
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <HVACMainFunction+0x1c>)
 80017ee:	edc3 7a00 	vstr	s15, [r3]
	HVACState();
 80017f2:	f000 f805 	bl	8001800 <HVACState>

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200000d8 	.word	0x200000d8

08001800 <HVACState>:

void HVACState()
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0

	HVAC_BackwindowDefrost_CurrentState 	= Btc_BackwindowDefrost;
 8001804:	4b72      	ldr	r3, [pc, #456]	; (80019d0 <HVACState+0x1d0>)
 8001806:	781a      	ldrb	r2, [r3, #0]
 8001808:	4b72      	ldr	r3, [pc, #456]	; (80019d4 <HVACState+0x1d4>)
 800180a:	701a      	strb	r2, [r3, #0]
	HVAC_AC_CurrentState 					= Btc_AC;
 800180c:	4b72      	ldr	r3, [pc, #456]	; (80019d8 <HVACState+0x1d8>)
 800180e:	781a      	ldrb	r2, [r3, #0]
 8001810:	4b72      	ldr	r3, [pc, #456]	; (80019dc <HVACState+0x1dc>)
 8001812:	701a      	strb	r2, [r3, #0]
	HVAC_FanValue 							= Btc_FanValue;
 8001814:	4b72      	ldr	r3, [pc, #456]	; (80019e0 <HVACState+0x1e0>)
 8001816:	781a      	ldrb	r2, [r3, #0]
 8001818:	4b72      	ldr	r3, [pc, #456]	; (80019e4 <HVACState+0x1e4>)
 800181a:	701a      	strb	r2, [r3, #0]
	HVAC_TemperatureValue 					= Btc_TemperatureValue;
 800181c:	4b72      	ldr	r3, [pc, #456]	; (80019e8 <HVACState+0x1e8>)
 800181e:	781a      	ldrb	r2, [r3, #0]
 8001820:	4b72      	ldr	r3, [pc, #456]	; (80019ec <HVACState+0x1ec>)
 8001822:	701a      	strb	r2, [r3, #0]

	if(Btc_NormalMode == STD_HIGH)
 8001824:	4b72      	ldr	r3, [pc, #456]	; (80019f0 <HVACState+0x1f0>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d106      	bne.n	800183a <HVACState+0x3a>
	{

		Btc_RecirculationMode = STD_LOW;
 800182c:	4b71      	ldr	r3, [pc, #452]	; (80019f4 <HVACState+0x1f4>)
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]
		HVAC_RecirculationMode_CurrentState = STD_LOW;
 8001832:	4b71      	ldr	r3, [pc, #452]	; (80019f8 <HVACState+0x1f8>)
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
 8001838:	e007      	b.n	800184a <HVACState+0x4a>

	}
	else if(Btc_NormalMode == STD_LOW)
 800183a:	4b6d      	ldr	r3, [pc, #436]	; (80019f0 <HVACState+0x1f0>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d103      	bne.n	800184a <HVACState+0x4a>
	{

		HVAC_RecirculationMode_CurrentState = Btc_RecirculationMode;
 8001842:	4b6c      	ldr	r3, [pc, #432]	; (80019f4 <HVACState+0x1f4>)
 8001844:	781a      	ldrb	r2, [r3, #0]
 8001846:	4b6c      	ldr	r3, [pc, #432]	; (80019f8 <HVACState+0x1f8>)
 8001848:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_FanValue == 0 && Btc_TemperatureValue == 0 && HVAC_FanValue == 0 && HVAC_TemperatureValue == 0)
 800184a:	4b65      	ldr	r3, [pc, #404]	; (80019e0 <HVACState+0x1e0>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d119      	bne.n	8001886 <HVACState+0x86>
 8001852:	4b65      	ldr	r3, [pc, #404]	; (80019e8 <HVACState+0x1e8>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d115      	bne.n	8001886 <HVACState+0x86>
 800185a:	4b62      	ldr	r3, [pc, #392]	; (80019e4 <HVACState+0x1e4>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d111      	bne.n	8001886 <HVACState+0x86>
 8001862:	4b62      	ldr	r3, [pc, #392]	; (80019ec <HVACState+0x1ec>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10d      	bne.n	8001886 <HVACState+0x86>
	{

		Btc_FanValue 							= 1;
 800186a:	4b5d      	ldr	r3, [pc, #372]	; (80019e0 <HVACState+0x1e0>)
 800186c:	2201      	movs	r2, #1
 800186e:	701a      	strb	r2, [r3, #0]
		Btc_TemperatureValue 					= 22;
 8001870:	4b5d      	ldr	r3, [pc, #372]	; (80019e8 <HVACState+0x1e8>)
 8001872:	2216      	movs	r2, #22
 8001874:	701a      	strb	r2, [r3, #0]
		HVAC_FanValue 							= Btc_FanValue;
 8001876:	4b5a      	ldr	r3, [pc, #360]	; (80019e0 <HVACState+0x1e0>)
 8001878:	781a      	ldrb	r2, [r3, #0]
 800187a:	4b5a      	ldr	r3, [pc, #360]	; (80019e4 <HVACState+0x1e4>)
 800187c:	701a      	strb	r2, [r3, #0]
		HVAC_TemperatureValue 					= Btc_TemperatureValue;
 800187e:	4b5a      	ldr	r3, [pc, #360]	; (80019e8 <HVACState+0x1e8>)
 8001880:	781a      	ldrb	r2, [r3, #0]
 8001882:	4b5a      	ldr	r3, [pc, #360]	; (80019ec <HVACState+0x1ec>)
 8001884:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(HVAC_FanValue == STD_LOW)
 8001886:	4b57      	ldr	r3, [pc, #348]	; (80019e4 <HVACState+0x1e4>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d103      	bne.n	8001896 <HVACState+0x96>
	{

		HVAC_CurrentState = STD_LOW;
 800188e:	4b5b      	ldr	r3, [pc, #364]	; (80019fc <HVACState+0x1fc>)
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	e006      	b.n	80018a4 <HVACState+0xa4>

	}
	else if(HVAC_FanValue != STD_LOW)
 8001896:	4b53      	ldr	r3, [pc, #332]	; (80019e4 <HVACState+0x1e4>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <HVACState+0xa4>
	{

		HVAC_CurrentState = STD_HIGH;
 800189e:	4b57      	ldr	r3, [pc, #348]	; (80019fc <HVACState+0x1fc>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_LegVents == STD_HIGH)
 80018a4:	4b56      	ldr	r3, [pc, #344]	; (8001a00 <HVACState+0x200>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d107      	bne.n	80018bc <HVACState+0xbc>
	{

		Btc_AutomaticMode 			= STD_LOW;
 80018ac:	4b55      	ldr	r3, [pc, #340]	; (8001a04 <HVACState+0x204>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 	= Btc_LegVents;
 80018b2:	4b53      	ldr	r3, [pc, #332]	; (8001a00 <HVACState+0x200>)
 80018b4:	781a      	ldrb	r2, [r3, #0]
 80018b6:	4b54      	ldr	r3, [pc, #336]	; (8001a08 <HVACState+0x208>)
 80018b8:	701a      	strb	r2, [r3, #0]
 80018ba:	e007      	b.n	80018cc <HVACState+0xcc>

	}
	else if(Btc_LegVents == STD_LOW)
 80018bc:	4b50      	ldr	r3, [pc, #320]	; (8001a00 <HVACState+0x200>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d103      	bne.n	80018cc <HVACState+0xcc>
	{

		HVAC_LegVents_CurrentState 	= Btc_LegVents;
 80018c4:	4b4e      	ldr	r3, [pc, #312]	; (8001a00 <HVACState+0x200>)
 80018c6:	781a      	ldrb	r2, [r3, #0]
 80018c8:	4b4f      	ldr	r3, [pc, #316]	; (8001a08 <HVACState+0x208>)
 80018ca:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_MidVents == STD_HIGH)
 80018cc:	4b4f      	ldr	r3, [pc, #316]	; (8001a0c <HVACState+0x20c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d107      	bne.n	80018e4 <HVACState+0xe4>
	{

		Btc_AutomaticMode 			= STD_LOW;
 80018d4:	4b4b      	ldr	r3, [pc, #300]	; (8001a04 <HVACState+0x204>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 	= Btc_MidVents;
 80018da:	4b4c      	ldr	r3, [pc, #304]	; (8001a0c <HVACState+0x20c>)
 80018dc:	781a      	ldrb	r2, [r3, #0]
 80018de:	4b4c      	ldr	r3, [pc, #304]	; (8001a10 <HVACState+0x210>)
 80018e0:	701a      	strb	r2, [r3, #0]
 80018e2:	e007      	b.n	80018f4 <HVACState+0xf4>

	}
	else if(Btc_MidVents == STD_LOW)
 80018e4:	4b49      	ldr	r3, [pc, #292]	; (8001a0c <HVACState+0x20c>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d103      	bne.n	80018f4 <HVACState+0xf4>
	{

		HVAC_MidVents_CurrentState 	= Btc_MidVents;
 80018ec:	4b47      	ldr	r3, [pc, #284]	; (8001a0c <HVACState+0x20c>)
 80018ee:	781a      	ldrb	r2, [r3, #0]
 80018f0:	4b47      	ldr	r3, [pc, #284]	; (8001a10 <HVACState+0x210>)
 80018f2:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_WindshieldVents == STD_HIGH)
 80018f4:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HVACState+0x214>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d107      	bne.n	800190c <HVACState+0x10c>
	{

		Btc_AutomaticMode 					= STD_LOW;
 80018fc:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <HVACState+0x204>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 	= Btc_WindshieldVents;
 8001902:	4b44      	ldr	r3, [pc, #272]	; (8001a14 <HVACState+0x214>)
 8001904:	781a      	ldrb	r2, [r3, #0]
 8001906:	4b44      	ldr	r3, [pc, #272]	; (8001a18 <HVACState+0x218>)
 8001908:	701a      	strb	r2, [r3, #0]
 800190a:	e007      	b.n	800191c <HVACState+0x11c>

	}
	else if(Btc_WindshieldVents == STD_LOW)
 800190c:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <HVACState+0x214>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d103      	bne.n	800191c <HVACState+0x11c>
	{

		HVAC_WindshieldVents_CurrentState 	= Btc_WindshieldVents;
 8001914:	4b3f      	ldr	r3, [pc, #252]	; (8001a14 <HVACState+0x214>)
 8001916:	781a      	ldrb	r2, [r3, #0]
 8001918:	4b3f      	ldr	r3, [pc, #252]	; (8001a18 <HVACState+0x218>)
 800191a:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_WindshieldDefrost == STD_HIGH)
 800191c:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <HVACState+0x21c>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d110      	bne.n	8001946 <HVACState+0x146>
	{

		Btc_AutomaticMode				 		= STD_LOW;
 8001924:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <HVACState+0x204>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 800192a:	4b3c      	ldr	r3, [pc, #240]	; (8001a1c <HVACState+0x21c>)
 800192c:	781a      	ldrb	r2, [r3, #0]
 800192e:	4b3c      	ldr	r3, [pc, #240]	; (8001a20 <HVACState+0x220>)
 8001930:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= STD_LOW;
 8001932:	4b35      	ldr	r3, [pc, #212]	; (8001a08 <HVACState+0x208>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= STD_LOW;
 8001938:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <HVACState+0x210>)
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= STD_LOW;
 800193e:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <HVACState+0x218>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	e013      	b.n	800196e <HVACState+0x16e>

	}
	else if(Btc_WindshieldDefrost == STD_LOW)
 8001946:	4b35      	ldr	r3, [pc, #212]	; (8001a1c <HVACState+0x21c>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10f      	bne.n	800196e <HVACState+0x16e>
	{

		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 800194e:	4b33      	ldr	r3, [pc, #204]	; (8001a1c <HVACState+0x21c>)
 8001950:	781a      	ldrb	r2, [r3, #0]
 8001952:	4b33      	ldr	r3, [pc, #204]	; (8001a20 <HVACState+0x220>)
 8001954:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= Btc_LegVents;
 8001956:	4b2a      	ldr	r3, [pc, #168]	; (8001a00 <HVACState+0x200>)
 8001958:	781a      	ldrb	r2, [r3, #0]
 800195a:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <HVACState+0x208>)
 800195c:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= Btc_MidVents;
 800195e:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <HVACState+0x20c>)
 8001960:	781a      	ldrb	r2, [r3, #0]
 8001962:	4b2b      	ldr	r3, [pc, #172]	; (8001a10 <HVACState+0x210>)
 8001964:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= Btc_WindshieldVents;
 8001966:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HVACState+0x214>)
 8001968:	781a      	ldrb	r2, [r3, #0]
 800196a:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <HVACState+0x218>)
 800196c:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_AutomaticMode == STD_HIGH)
 800196e:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <HVACState+0x204>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d10f      	bne.n	8001996 <HVACState+0x196>
	{

		HVAC_AutomaticMode_CurrentState 		= STD_HIGH;
 8001976:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <HVACState+0x224>)
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= STD_LOW;
 800197c:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <HVACState+0x220>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= STD_LOW;
 8001982:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <HVACState+0x218>)
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= STD_LOW;
 8001988:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <HVACState+0x210>)
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= STD_LOW;
 800198e:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <HVACState+0x208>)
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8001994:	e016      	b.n	80019c4 <HVACState+0x1c4>
	else if(Btc_NormalMode == STD_HIGH)
 8001996:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <HVACState+0x1f0>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d112      	bne.n	80019c4 <HVACState+0x1c4>
		HVAC_AutomaticMode_CurrentState 		= STD_LOW;
 800199e:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HVACState+0x224>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HVACState+0x21c>)
 80019a6:	781a      	ldrb	r2, [r3, #0]
 80019a8:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <HVACState+0x220>)
 80019aa:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= Btc_WindshieldVents;
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <HVACState+0x214>)
 80019ae:	781a      	ldrb	r2, [r3, #0]
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HVACState+0x218>)
 80019b2:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= Btc_MidVents;
 80019b4:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HVACState+0x20c>)
 80019b6:	781a      	ldrb	r2, [r3, #0]
 80019b8:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HVACState+0x210>)
 80019ba:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= Btc_LegVents;
 80019bc:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <HVACState+0x200>)
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HVACState+0x208>)
 80019c2:	701a      	strb	r2, [r3, #0]
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	200000d1 	.word	0x200000d1
 80019d4:	200000ca 	.word	0x200000ca
 80019d8:	200000d2 	.word	0x200000d2
 80019dc:	200000c7 	.word	0x200000c7
 80019e0:	200000cc 	.word	0x200000cc
 80019e4:	200000c2 	.word	0x200000c2
 80019e8:	200000cb 	.word	0x200000cb
 80019ec:	200000c1 	.word	0x200000c1
 80019f0:	200000d5 	.word	0x200000d5
 80019f4:	200000d4 	.word	0x200000d4
 80019f8:	200000c9 	.word	0x200000c9
 80019fc:	200000c0 	.word	0x200000c0
 8001a00:	200000cd 	.word	0x200000cd
 8001a04:	200000d3 	.word	0x200000d3
 8001a08:	200000c3 	.word	0x200000c3
 8001a0c:	200000ce 	.word	0x200000ce
 8001a10:	200000c4 	.word	0x200000c4
 8001a14:	200000cf 	.word	0x200000cf
 8001a18:	200000c5 	.word	0x200000c5
 8001a1c:	200000d0 	.word	0x200000d0
 8001a20:	200000c6 	.word	0x200000c6
 8001a24:	200000c8 	.word	0x200000c8

08001a28 <IntLightsRxBtcState>:
void IntLightsMainFunction();
void IntLightsToggleIntLights(uint8 PinState);
void IntLightsRxBtcState();

void IntLightsRxBtcState()
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0

	uint8 lightsStateFromBtcCommand = BtcReceivedDataOnBluetooth;
 8001a2e:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <IntLightsRxBtcState+0x98>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]

	switch(lightsStateFromBtcCommand)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	2b13      	cmp	r3, #19
 8001a3a:	d83b      	bhi.n	8001ab4 <IntLightsRxBtcState+0x8c>
 8001a3c:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <IntLightsRxBtcState+0x1c>)
 8001a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a42:	bf00      	nop
 8001a44:	08001a95 	.word	0x08001a95
 8001a48:	08001a9d 	.word	0x08001a9d
 8001a4c:	08001ab5 	.word	0x08001ab5
 8001a50:	08001ab5 	.word	0x08001ab5
 8001a54:	08001ab5 	.word	0x08001ab5
 8001a58:	08001ab5 	.word	0x08001ab5
 8001a5c:	08001ab5 	.word	0x08001ab5
 8001a60:	08001ab5 	.word	0x08001ab5
 8001a64:	08001ab5 	.word	0x08001ab5
 8001a68:	08001ab5 	.word	0x08001ab5
 8001a6c:	08001ab5 	.word	0x08001ab5
 8001a70:	08001ab5 	.word	0x08001ab5
 8001a74:	08001ab5 	.word	0x08001ab5
 8001a78:	08001ab5 	.word	0x08001ab5
 8001a7c:	08001ab5 	.word	0x08001ab5
 8001a80:	08001ab5 	.word	0x08001ab5
 8001a84:	08001ab5 	.word	0x08001ab5
 8001a88:	08001ab5 	.word	0x08001ab5
 8001a8c:	08001aa5 	.word	0x08001aa5
 8001a90:	08001aad 	.word	0x08001aad
	{
		case LIGHTSON_CENLOCON:

			IntLights_CurrentState = STD_HIGH;
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <IntLightsRxBtcState+0x9c>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]

			break;
 8001a9a:	e00b      	b.n	8001ab4 <IntLightsRxBtcState+0x8c>

		case LIGHTSOFF_CENLOCOFF:

			IntLights_CurrentState = STD_LOW;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <IntLightsRxBtcState+0x9c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]

			break;
 8001aa2:	e007      	b.n	8001ab4 <IntLightsRxBtcState+0x8c>

		case LIGHTSON_INTLIGHTSON:

			IntLights_CurrentState = STD_HIGH;
 8001aa4:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <IntLightsRxBtcState+0x9c>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	701a      	strb	r2, [r3, #0]

			break;
 8001aaa:	e003      	b.n	8001ab4 <IntLightsRxBtcState+0x8c>

		case LIGHTSOFF_INTLIGHTSOFF:

			IntLights_CurrentState = STD_LOW;
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <IntLightsRxBtcState+0x9c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]

			break;
 8001ab2:	bf00      	nop

	}

}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	20000094 	.word	0x20000094
 8001ac4:	200000f4 	.word	0x200000f4

08001ac8 <IntLightsMainFunction>:

void IntLightsMainFunction()
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0

	IntLightsRxBtcState();
 8001acc:	f7ff ffac 	bl	8001a28 <IntLightsRxBtcState>
	IntLightsToggleIntLights(IntLights_CurrentState);
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <IntLightsMainFunction+0x18>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 f805 	bl	8001ae4 <IntLightsToggleIntLights>

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200000f4 	.word	0x200000f4

08001ae4 <IntLightsToggleIntLights>:
	return E_OK;

}

void IntLightsToggleIntLights(uint8 PinState)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(INTERIOR_LIGHT_PORT, INTERIOR_LIGHT_PIN, PinState);
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	461a      	mov	r2, r3
 8001af2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001af6:	4803      	ldr	r0, [pc, #12]	; (8001b04 <IntLightsToggleIntLights+0x20>)
 8001af8:	f003 fe5e 	bl	80057b8 <HAL_GPIO_WritePin>

}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40020400 	.word	0x40020400

08001b08 <SecAlmVibeSenReadPin>:
void SecAlmState();
void SecAlmLightsBuzzerControl();
void SecAlmTurnOnExtLights();

StdReturnType SecAlmVibeSenReadPin()
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0

	uint8 PinState = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	71fb      	strb	r3, [r7, #7]

	PinState = HAL_GPIO_ReadPin(SECALM_VIBSEN_PORT, SECALM_VIBSEN_PIN);
 8001b12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b16:	4805      	ldr	r0, [pc, #20]	; (8001b2c <SecAlmVibeSenReadPin+0x24>)
 8001b18:	f003 fe28 	bl	800576c <HAL_GPIO_ReadPin>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	71fb      	strb	r3, [r7, #7]

	return PinState;
 8001b20:	79fb      	ldrb	r3, [r7, #7]

}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40020400 	.word	0x40020400

08001b30 <SecAlmVibSenStatus>:

StdReturnType SecAlmVibSenStatus()
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0

	uint8 status = STD_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	71fb      	strb	r3, [r7, #7]

	SecAlm_VibSenStatusFlag = SecAlmVibeSenReadPin();
 8001b3a:	f7ff ffe5 	bl	8001b08 <SecAlmVibeSenReadPin>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <SecAlmVibSenStatus+0x30>)
 8001b44:	601a      	str	r2, [r3, #0]

	if(SecAlm_VibSenStatusFlag >= 1000)
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <SecAlmVibSenStatus+0x30>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b4e:	d301      	bcc.n	8001b54 <SecAlmVibSenStatus+0x24>
	{

		status = STD_HIGH;
 8001b50:	2301      	movs	r3, #1
 8001b52:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* do nothing */
	}

	return status;
 8001b54:	79fb      	ldrb	r3, [r7, #7]

}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200000f8 	.word	0x200000f8

08001b64 <SecAlmState>:

void SecAlmState()
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0

	if(SecAlmVibSenStatus() == STD_HIGH && CenLoc_CurrentState == STD_LOW)
 8001b68:	f7ff ffe2 	bl	8001b30 <SecAlmVibSenStatus>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d106      	bne.n	8001b80 <SecAlmState+0x1c>
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <SecAlmState+0x20>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d102      	bne.n	8001b80 <SecAlmState+0x1c>
	{

		SecAlm_Trigger = STD_HIGH;
 8001b7a:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <SecAlmState+0x24>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000095 	.word	0x20000095
 8001b88:	200000f6 	.word	0x200000f6

08001b8c <SecAlmTurnOnExtLights>:

void SecAlmTurnOnExtLights()
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0

	ExtLightsLowBeam(SecAlm_PinStateChange);
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <SecAlmTurnOnExtLights+0x44>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fd35 	bl	8001604 <ExtLightsLowBeam>
	ExtLightsRearPositionLight(SecAlm_PinStateChange);
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <SecAlmTurnOnExtLights+0x44>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fd9c 	bl	80016dc <ExtLightsRearPositionLight>
	ExtLightsFrontFogLight(SecAlm_PinStateChange);
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <SecAlmTurnOnExtLights+0x44>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fd61 	bl	8001670 <ExtLightsFrontFogLight>
	ExtLightsRearFogLight(SecAlm_PinStateChange);
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <SecAlmTurnOnExtLights+0x44>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fda4 	bl	8001700 <ExtLightsRearFogLight>
	ExtLightsTurnSignalRight(SecAlm_PinStateChange);
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <SecAlmTurnOnExtLights+0x44>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fd7b 	bl	80016b8 <ExtLightsTurnSignalRight>
	ExtLightsTurnSignalLeft(SecAlm_PinStateChange);
 8001bc2:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <SecAlmTurnOnExtLights+0x44>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fd64 	bl	8001694 <ExtLightsTurnSignalLeft>

}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	200000fc 	.word	0x200000fc

08001bd4 <SecAlmLightsBuzzerControl>:

void SecAlmLightsBuzzerControl()
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0

	if(SecAlm_Trigger == STD_HIGH)
 8001bd8:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <SecAlmLightsBuzzerControl+0xdc>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d155      	bne.n	8001c8c <SecAlmLightsBuzzerControl+0xb8>
	{

		if(SecAlm_Timer5Value > 100000)
 8001be0:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <SecAlmLightsBuzzerControl+0xe0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a34      	ldr	r2, [pc, #208]	; (8001cb8 <SecAlmLightsBuzzerControl+0xe4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d902      	bls.n	8001bf0 <SecAlmLightsBuzzerControl+0x1c>
		{

			HAL_TIM_Base_Stop(&htim5);
 8001bea:	4834      	ldr	r0, [pc, #208]	; (8001cbc <SecAlmLightsBuzzerControl+0xe8>)
 8001bec:	f008 f9de 	bl	8009fac <HAL_TIM_Base_Stop>

			/* do nothing */

		}

		HAL_TIM_Base_Start(&htim5);
 8001bf0:	4832      	ldr	r0, [pc, #200]	; (8001cbc <SecAlmLightsBuzzerControl+0xe8>)
 8001bf2:	f008 f951 	bl	8009e98 <HAL_TIM_Base_Start>
		SecAlm_Timer5Value = __HAL_TIM_GET_COUNTER(&htim5);
 8001bf6:	4b31      	ldr	r3, [pc, #196]	; (8001cbc <SecAlmLightsBuzzerControl+0xe8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	4a2d      	ldr	r2, [pc, #180]	; (8001cb4 <SecAlmLightsBuzzerControl+0xe0>)
 8001bfe:	6013      	str	r3, [r2, #0]

		if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 8001c00:	4b2e      	ldr	r3, [pc, #184]	; (8001cbc <SecAlmLightsBuzzerControl+0xe8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	4a2e      	ldr	r2, [pc, #184]	; (8001cc0 <SecAlmLightsBuzzerControl+0xec>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d832      	bhi.n	8001c72 <SecAlmLightsBuzzerControl+0x9e>
		{

			HAL_TIM_Base_Start(&htim4);
 8001c0c:	482d      	ldr	r0, [pc, #180]	; (8001cc4 <SecAlmLightsBuzzerControl+0xf0>)
 8001c0e:	f008 f943 	bl	8009e98 <HAL_TIM_Base_Start>
			SecAlm_Timer4Value = __HAL_TIM_GET_COUNTER(&htim4);
 8001c12:	4b2c      	ldr	r3, [pc, #176]	; (8001cc4 <SecAlmLightsBuzzerControl+0xf0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	4a2b      	ldr	r2, [pc, #172]	; (8001cc8 <SecAlmLightsBuzzerControl+0xf4>)
 8001c1a:	6013      	str	r3, [r2, #0]

			if(__HAL_TIM_GET_COUNTER(&htim4) < 5000)
 8001c1c:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <SecAlmLightsBuzzerControl+0xf0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	f241 3287 	movw	r2, #4999	; 0x1387
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d80a      	bhi.n	8001c40 <SecAlmLightsBuzzerControl+0x6c>
			{

				SecAlm_PinStateChange = STD_HIGH;
 8001c2a:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <SecAlmLightsBuzzerControl+0xf8>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]
				SecAlmToggleAlarmBuzzer(SecAlm_PinStateChange);
 8001c30:	4b26      	ldr	r3, [pc, #152]	; (8001ccc <SecAlmLightsBuzzerControl+0xf8>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 f855 	bl	8001ce4 <SecAlmToggleAlarmBuzzer>
				SecAlmTurnOnExtLights();
 8001c3a:	f7ff ffa7 	bl	8001b8c <SecAlmTurnOnExtLights>

		/* do nothing */

	}

}
 8001c3e:	e034      	b.n	8001caa <SecAlmLightsBuzzerControl+0xd6>
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim4) && __HAL_TIM_GET_COUNTER(&htim4) < 10000)
 8001c40:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <SecAlmLightsBuzzerControl+0xf0>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d92d      	bls.n	8001caa <SecAlmLightsBuzzerControl+0xd6>
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <SecAlmLightsBuzzerControl+0xf0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d826      	bhi.n	8001caa <SecAlmLightsBuzzerControl+0xd6>
				SecAlm_PinStateChange = STD_LOW;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <SecAlmLightsBuzzerControl+0xf8>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
				SecAlmToggleAlarmBuzzer(SecAlm_PinStateChange);
 8001c62:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <SecAlmLightsBuzzerControl+0xf8>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f83c 	bl	8001ce4 <SecAlmToggleAlarmBuzzer>
				SecAlmTurnOnExtLights();
 8001c6c:	f7ff ff8e 	bl	8001b8c <SecAlmTurnOnExtLights>
}
 8001c70:	e01b      	b.n	8001caa <SecAlmLightsBuzzerControl+0xd6>
		else if(__HAL_TIM_GET_COUNTER(&htim5) > 100000)
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <SecAlmLightsBuzzerControl+0xe8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <SecAlmLightsBuzzerControl+0xe4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d915      	bls.n	8001caa <SecAlmLightsBuzzerControl+0xd6>
			SecAlm_Trigger = STD_LOW;
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <SecAlmLightsBuzzerControl+0xdc>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim5);
 8001c84:	480d      	ldr	r0, [pc, #52]	; (8001cbc <SecAlmLightsBuzzerControl+0xe8>)
 8001c86:	f008 f991 	bl	8009fac <HAL_TIM_Base_Stop>
}
 8001c8a:	e00e      	b.n	8001caa <SecAlmLightsBuzzerControl+0xd6>
	else if(SecAlm_Trigger == STD_LOW)
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <SecAlmLightsBuzzerControl+0xdc>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10a      	bne.n	8001caa <SecAlmLightsBuzzerControl+0xd6>
		HAL_TIM_Base_Stop(&htim4);
 8001c94:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <SecAlmLightsBuzzerControl+0xf0>)
 8001c96:	f008 f989 	bl	8009fac <HAL_TIM_Base_Stop>
		SecAlm_PinStateChange = STD_LOW;
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <SecAlmLightsBuzzerControl+0xf8>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
		SecAlm_VibSenStatusFlag = STD_LOW;
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <SecAlmLightsBuzzerControl+0xfc>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
		SecAlmTurnOnExtLights();
 8001ca6:	f7ff ff71 	bl	8001b8c <SecAlmTurnOnExtLights>
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200000f6 	.word	0x200000f6
 8001cb4:	20000100 	.word	0x20000100
 8001cb8:	000186a0 	.word	0x000186a0
 8001cbc:	20000674 	.word	0x20000674
 8001cc0:	0001869f 	.word	0x0001869f
 8001cc4:	200005c0 	.word	0x200005c0
 8001cc8:	20000104 	.word	0x20000104
 8001ccc:	200000fc 	.word	0x200000fc
 8001cd0:	200000f8 	.word	0x200000f8

08001cd4 <SecAlmMainFunction>:

void SecAlmMainFunction()
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0

	SecAlmState();
 8001cd8:	f7ff ff44 	bl	8001b64 <SecAlmState>
	SecAlmLightsBuzzerControl();
 8001cdc:	f7ff ff7a 	bl	8001bd4 <SecAlmLightsBuzzerControl>

}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <SecAlmToggleAlarmBuzzer>:
	return E_OK;

}

void SecAlmToggleAlarmBuzzer(uint8 PinState)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cf6:	4803      	ldr	r0, [pc, #12]	; (8001d04 <SecAlmToggleAlarmBuzzer+0x20>)
 8001cf8:	f003 fd5e 	bl	80057b8 <HAL_GPIO_WritePin>

}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40020400 	.word	0x40020400

08001d08 <SecAlmToggleAlarmLed>:

void SecAlmToggleAlarmLed(uint8 PinState)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	461a      	mov	r2, r3
 8001d16:	2180      	movs	r1, #128	; 0x80
 8001d18:	4803      	ldr	r0, [pc, #12]	; (8001d28 <SecAlmToggleAlarmLed+0x20>)
 8001d1a:	f003 fd4d 	bl	80057b8 <HAL_GPIO_WritePin>

}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40020000 	.word	0x40020000

08001d2c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d32:	463b      	mov	r3, r7
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d3e:	4b3e      	ldr	r3, [pc, #248]	; (8001e38 <MX_ADC1_Init+0x10c>)
 8001d40:	4a3e      	ldr	r2, [pc, #248]	; (8001e3c <MX_ADC1_Init+0x110>)
 8001d42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d44:	4b3c      	ldr	r3, [pc, #240]	; (8001e38 <MX_ADC1_Init+0x10c>)
 8001d46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d4c:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <MX_ADC1_Init+0x10c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001d52:	4b39      	ldr	r3, [pc, #228]	; (8001e38 <MX_ADC1_Init+0x10c>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d58:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <MX_ADC1_Init+0x10c>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d5e:	4b36      	ldr	r3, [pc, #216]	; (8001e38 <MX_ADC1_Init+0x10c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d66:	4b34      	ldr	r3, [pc, #208]	; (8001e38 <MX_ADC1_Init+0x10c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d6c:	4b32      	ldr	r3, [pc, #200]	; (8001e38 <MX_ADC1_Init+0x10c>)
 8001d6e:	4a34      	ldr	r2, [pc, #208]	; (8001e40 <MX_ADC1_Init+0x114>)
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d72:	4b31      	ldr	r3, [pc, #196]	; (8001e38 <MX_ADC1_Init+0x10c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001d78:	4b2f      	ldr	r3, [pc, #188]	; (8001e38 <MX_ADC1_Init+0x10c>)
 8001d7a:	2205      	movs	r2, #5
 8001d7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <MX_ADC1_Init+0x10c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d86:	4b2c      	ldr	r3, [pc, #176]	; (8001e38 <MX_ADC1_Init+0x10c>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d8c:	482a      	ldr	r0, [pc, #168]	; (8001e38 <MX_ADC1_Init+0x10c>)
 8001d8e:	f001 faa3 	bl	80032d8 <HAL_ADC_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d98:	f000 fbca 	bl	8002530 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001da0:	2301      	movs	r3, #1
 8001da2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001da8:	463b      	mov	r3, r7
 8001daa:	4619      	mov	r1, r3
 8001dac:	4822      	ldr	r0, [pc, #136]	; (8001e38 <MX_ADC1_Init+0x10c>)
 8001dae:	f001 fe97 	bl	8003ae0 <HAL_ADC_ConfigChannel>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001db8:	f000 fbba 	bl	8002530 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	481b      	ldr	r0, [pc, #108]	; (8001e38 <MX_ADC1_Init+0x10c>)
 8001dca:	f001 fe89 	bl	8003ae0 <HAL_ADC_ConfigChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001dd4:	f000 fbac 	bl	8002530 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001de0:	463b      	mov	r3, r7
 8001de2:	4619      	mov	r1, r3
 8001de4:	4814      	ldr	r0, [pc, #80]	; (8001e38 <MX_ADC1_Init+0x10c>)
 8001de6:	f001 fe7b 	bl	8003ae0 <HAL_ADC_ConfigChannel>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001df0:	f000 fb9e 	bl	8002530 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001df4:	2309      	movs	r3, #9
 8001df6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001df8:	2304      	movs	r3, #4
 8001dfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dfc:	463b      	mov	r3, r7
 8001dfe:	4619      	mov	r1, r3
 8001e00:	480d      	ldr	r0, [pc, #52]	; (8001e38 <MX_ADC1_Init+0x10c>)
 8001e02:	f001 fe6d 	bl	8003ae0 <HAL_ADC_ConfigChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001e0c:	f000 fb90 	bl	8002530 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <MX_ADC1_Init+0x118>)
 8001e12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001e14:	2305      	movs	r3, #5
 8001e16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001e18:	2307      	movs	r3, #7
 8001e1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4805      	ldr	r0, [pc, #20]	; (8001e38 <MX_ADC1_Init+0x10c>)
 8001e22:	f001 fe5d 	bl	8003ae0 <HAL_ADC_ConfigChannel>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8001e2c:	f000 fb80 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e30:	bf00      	nop
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000108 	.word	0x20000108
 8001e3c:	40012000 	.word	0x40012000
 8001e40:	0f000001 	.word	0x0f000001
 8001e44:	10000012 	.word	0x10000012

08001e48 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	; 0x30
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a4d      	ldr	r2, [pc, #308]	; (8001f9c <HAL_ADC_MspInit+0x154>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	f040 8094 	bne.w	8001f94 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61bb      	str	r3, [r7, #24]
 8001e70:	4b4b      	ldr	r3, [pc, #300]	; (8001fa0 <HAL_ADC_MspInit+0x158>)
 8001e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e74:	4a4a      	ldr	r2, [pc, #296]	; (8001fa0 <HAL_ADC_MspInit+0x158>)
 8001e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7c:	4b48      	ldr	r3, [pc, #288]	; (8001fa0 <HAL_ADC_MspInit+0x158>)
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	4b44      	ldr	r3, [pc, #272]	; (8001fa0 <HAL_ADC_MspInit+0x158>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	4a43      	ldr	r2, [pc, #268]	; (8001fa0 <HAL_ADC_MspInit+0x158>)
 8001e92:	f043 0304 	orr.w	r3, r3, #4
 8001e96:	6313      	str	r3, [r2, #48]	; 0x30
 8001e98:	4b41      	ldr	r3, [pc, #260]	; (8001fa0 <HAL_ADC_MspInit+0x158>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	4b3d      	ldr	r3, [pc, #244]	; (8001fa0 <HAL_ADC_MspInit+0x158>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4a3c      	ldr	r2, [pc, #240]	; (8001fa0 <HAL_ADC_MspInit+0x158>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb4:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <HAL_ADC_MspInit+0x158>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <HAL_ADC_MspInit+0x158>)
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	4a35      	ldr	r2, [pc, #212]	; (8001fa0 <HAL_ADC_MspInit+0x158>)
 8001eca:	f043 0302 	orr.w	r3, r3, #2
 8001ece:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed0:	4b33      	ldr	r3, [pc, #204]	; (8001fa0 <HAL_ADC_MspInit+0x158>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001edc:	2307      	movs	r3, #7
 8001ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	4619      	mov	r1, r3
 8001eee:	482d      	ldr	r0, [pc, #180]	; (8001fa4 <HAL_ADC_MspInit+0x15c>)
 8001ef0:	f003 f9a2 	bl	8005238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001ef4:	230e      	movs	r3, #14
 8001ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	4619      	mov	r1, r3
 8001f06:	4828      	ldr	r0, [pc, #160]	; (8001fa8 <HAL_ADC_MspInit+0x160>)
 8001f08:	f003 f996 	bl	8005238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f10:	2303      	movs	r3, #3
 8001f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f18:	f107 031c 	add.w	r3, r7, #28
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4823      	ldr	r0, [pc, #140]	; (8001fac <HAL_ADC_MspInit+0x164>)
 8001f20:	f003 f98a 	bl	8005238 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001f24:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <HAL_ADC_MspInit+0x168>)
 8001f26:	4a23      	ldr	r2, [pc, #140]	; (8001fb4 <HAL_ADC_MspInit+0x16c>)
 8001f28:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001f2a:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <HAL_ADC_MspInit+0x168>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f30:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <HAL_ADC_MspInit+0x168>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <HAL_ADC_MspInit+0x168>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f3c:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <HAL_ADC_MspInit+0x168>)
 8001f3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f42:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f44:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <HAL_ADC_MspInit+0x168>)
 8001f46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f4a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <HAL_ADC_MspInit+0x168>)
 8001f4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f52:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f54:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <HAL_ADC_MspInit+0x168>)
 8001f56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f5a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f5c:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <HAL_ADC_MspInit+0x168>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <HAL_ADC_MspInit+0x168>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f68:	4811      	ldr	r0, [pc, #68]	; (8001fb0 <HAL_ADC_MspInit+0x168>)
 8001f6a:	f002 fa05 	bl	8004378 <HAL_DMA_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001f74:	f000 fadc 	bl	8002530 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a0d      	ldr	r2, [pc, #52]	; (8001fb0 <HAL_ADC_MspInit+0x168>)
 8001f7c:	639a      	str	r2, [r3, #56]	; 0x38
 8001f7e:	4a0c      	ldr	r2, [pc, #48]	; (8001fb0 <HAL_ADC_MspInit+0x168>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2105      	movs	r1, #5
 8001f88:	2012      	movs	r0, #18
 8001f8a:	f002 f987 	bl	800429c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f8e:	2012      	movs	r0, #18
 8001f90:	f002 f9b0 	bl	80042f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001f94:	bf00      	nop
 8001f96:	3730      	adds	r7, #48	; 0x30
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40012000 	.word	0x40012000
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	2000016c 	.word	0x2000016c
 8001fb4:	40026410 	.word	0x40026410

08001fb8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_CRC_Init+0x20>)
 8001fbe:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <MX_CRC_Init+0x24>)
 8001fc0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_CRC_Init+0x20>)
 8001fc4:	f002 f9ae 	bl	8004324 <HAL_CRC_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001fce:	f000 faaf 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200001cc 	.word	0x200001cc
 8001fdc:	40023000 	.word	0x40023000

08001fe0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0b      	ldr	r2, [pc, #44]	; (800201c <HAL_CRC_MspInit+0x3c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d10d      	bne.n	800200e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_CRC_MspInit+0x40>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a09      	ldr	r2, [pc, #36]	; (8002020 <HAL_CRC_MspInit+0x40>)
 8001ffc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <HAL_CRC_MspInit+0x40>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40023000 	.word	0x40023000
 8002020:	40023800 	.word	0x40023800

08002024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <MX_DMA_Init+0x3c>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <MX_DMA_Init+0x3c>)
 8002034:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <MX_DMA_Init+0x3c>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2105      	movs	r1, #5
 800204a:	2038      	movs	r0, #56	; 0x38
 800204c:	f002 f926 	bl	800429c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002050:	2038      	movs	r0, #56	; 0x38
 8002052:	f002 f94f 	bl	80042f4 <HAL_NVIC_EnableIRQ>

}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800

08002064 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002068:	4a08      	ldr	r2, [pc, #32]	; (800208c <MX_FREERTOS_Init+0x28>)
 800206a:	2100      	movs	r1, #0
 800206c:	4808      	ldr	r0, [pc, #32]	; (8002090 <MX_FREERTOS_Init+0x2c>)
 800206e:	f00a f8ad 	bl	800c1cc <osThreadNew>
 8002072:	4603      	mov	r3, r0
 8002074:	4a07      	ldr	r2, [pc, #28]	; (8002094 <MX_FREERTOS_Init+0x30>)
 8002076:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8002078:	4a07      	ldr	r2, [pc, #28]	; (8002098 <MX_FREERTOS_Init+0x34>)
 800207a:	2100      	movs	r1, #0
 800207c:	4807      	ldr	r0, [pc, #28]	; (800209c <MX_FREERTOS_Init+0x38>)
 800207e:	f00a f8a5 	bl	800c1cc <osThreadNew>
 8002082:	4603      	mov	r3, r0
 8002084:	4a06      	ldr	r2, [pc, #24]	; (80020a0 <MX_FREERTOS_Init+0x3c>)
 8002086:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}
 800208c:	0800f54c 	.word	0x0800f54c
 8002090:	080020a5 	.word	0x080020a5
 8002094:	200001d8 	.word	0x200001d8
 8002098:	0800f570 	.word	0x0800f570
 800209c:	080020cd 	.word	0x080020cd
 80020a0:	200001dc 	.word	0x200001dc

080020a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  CenLocMainFunction();
 80020ac:	f7fe ffd2 	bl	8001054 <CenLocMainFunction>
	  BtcMainFunction();
 80020b0:	f7fe fd2c 	bl	8000b0c <BtcMainFunction>
	  ExtLightsMainFunction();
 80020b4:	f7fe ffda 	bl	800106c <ExtLightsMainFunction>
	  IntLightsMainFunction();
 80020b8:	f7ff fd06 	bl	8001ac8 <IntLightsMainFunction>
	  SecAlmMainFunction();
 80020bc:	f7ff fe0a 	bl	8001cd4 <SecAlmMainFunction>
	  HVACMainFunction();
 80020c0:	f7ff fb8e 	bl	80017e0 <HVACMainFunction>
    osDelay(1);
 80020c4:	2001      	movs	r0, #1
 80020c6:	f00a f913 	bl	800c2f0 <osDelay>
	  CenLocMainFunction();
 80020ca:	e7ef      	b.n	80020ac <StartDefaultTask+0x8>

080020cc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  OS_Counter++;
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <StartTask02+0x1c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	3301      	adds	r3, #1
 80020da:	4a03      	ldr	r2, [pc, #12]	; (80020e8 <StartTask02+0x1c>)
 80020dc:	6013      	str	r3, [r2, #0]
    osDelay(1);
 80020de:	2001      	movs	r0, #1
 80020e0:	f00a f906 	bl	800c2f0 <osDelay>
	  OS_Counter++;
 80020e4:	e7f6      	b.n	80020d4 <StartTask02+0x8>
 80020e6:	bf00      	nop
 80020e8:	200001d4 	.word	0x200001d4

080020ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <MX_GPIO_Init+0x84>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a1d      	ldr	r2, [pc, #116]	; (8002170 <MX_GPIO_Init+0x84>)
 80020fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <MX_GPIO_Init+0x84>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	4b17      	ldr	r3, [pc, #92]	; (8002170 <MX_GPIO_Init+0x84>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a16      	ldr	r2, [pc, #88]	; (8002170 <MX_GPIO_Init+0x84>)
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b14      	ldr	r3, [pc, #80]	; (8002170 <MX_GPIO_Init+0x84>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <MX_GPIO_Init+0x84>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a0f      	ldr	r2, [pc, #60]	; (8002170 <MX_GPIO_Init+0x84>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <MX_GPIO_Init+0x84>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <MX_GPIO_Init+0x84>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a08      	ldr	r2, [pc, #32]	; (8002170 <MX_GPIO_Init+0x84>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <MX_GPIO_Init+0x84>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	683b      	ldr	r3, [r7, #0]

}
 8002162:	bf00      	nop
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800

08002174 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <MX_I2C1_Init+0x50>)
 800217a:	4a13      	ldr	r2, [pc, #76]	; (80021c8 <MX_I2C1_Init+0x54>)
 800217c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800217e:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <MX_I2C1_Init+0x50>)
 8002180:	4a12      	ldr	r2, [pc, #72]	; (80021cc <MX_I2C1_Init+0x58>)
 8002182:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002184:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <MX_I2C1_Init+0x50>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800218a:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <MX_I2C1_Init+0x50>)
 800218c:	2200      	movs	r2, #0
 800218e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <MX_I2C1_Init+0x50>)
 8002192:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002196:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002198:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <MX_I2C1_Init+0x50>)
 800219a:	2200      	movs	r2, #0
 800219c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <MX_I2C1_Init+0x50>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021a4:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <MX_I2C1_Init+0x50>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <MX_I2C1_Init+0x50>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021b0:	4804      	ldr	r0, [pc, #16]	; (80021c4 <MX_I2C1_Init+0x50>)
 80021b2:	f003 fb33 	bl	800581c <HAL_I2C_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021bc:	f000 f9b8 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	200001e0 	.word	0x200001e0
 80021c8:	40005400 	.word	0x40005400
 80021cc:	000186a0 	.word	0x000186a0

080021d0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80021d4:	4b12      	ldr	r3, [pc, #72]	; (8002220 <MX_I2C3_Init+0x50>)
 80021d6:	4a13      	ldr	r2, [pc, #76]	; (8002224 <MX_I2C3_Init+0x54>)
 80021d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <MX_I2C3_Init+0x50>)
 80021dc:	4a12      	ldr	r2, [pc, #72]	; (8002228 <MX_I2C3_Init+0x58>)
 80021de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <MX_I2C3_Init+0x50>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <MX_I2C3_Init+0x50>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <MX_I2C3_Init+0x50>)
 80021ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021f2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <MX_I2C3_Init+0x50>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <MX_I2C3_Init+0x50>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002200:	4b07      	ldr	r3, [pc, #28]	; (8002220 <MX_I2C3_Init+0x50>)
 8002202:	2200      	movs	r2, #0
 8002204:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <MX_I2C3_Init+0x50>)
 8002208:	2200      	movs	r2, #0
 800220a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800220c:	4804      	ldr	r0, [pc, #16]	; (8002220 <MX_I2C3_Init+0x50>)
 800220e:	f003 fb05 	bl	800581c <HAL_I2C_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002218:	f000 f98a 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000264 	.word	0x20000264
 8002224:	40005c00 	.word	0x40005c00
 8002228:	000186a0 	.word	0x000186a0

0800222c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08c      	sub	sp, #48	; 0x30
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a4a      	ldr	r2, [pc, #296]	; (8002374 <HAL_I2C_MspInit+0x148>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d13d      	bne.n	80022ca <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	61bb      	str	r3, [r7, #24]
 8002252:	4b49      	ldr	r3, [pc, #292]	; (8002378 <HAL_I2C_MspInit+0x14c>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a48      	ldr	r2, [pc, #288]	; (8002378 <HAL_I2C_MspInit+0x14c>)
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b46      	ldr	r3, [pc, #280]	; (8002378 <HAL_I2C_MspInit+0x14c>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800226a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800226e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002270:	2312      	movs	r3, #18
 8002272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002278:	2303      	movs	r3, #3
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800227c:	2304      	movs	r3, #4
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002280:	f107 031c 	add.w	r3, r7, #28
 8002284:	4619      	mov	r1, r3
 8002286:	483d      	ldr	r0, [pc, #244]	; (800237c <HAL_I2C_MspInit+0x150>)
 8002288:	f002 ffd6 	bl	8005238 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	4b39      	ldr	r3, [pc, #228]	; (8002378 <HAL_I2C_MspInit+0x14c>)
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	4a38      	ldr	r2, [pc, #224]	; (8002378 <HAL_I2C_MspInit+0x14c>)
 8002296:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800229a:	6413      	str	r3, [r2, #64]	; 0x40
 800229c:	4b36      	ldr	r3, [pc, #216]	; (8002378 <HAL_I2C_MspInit+0x14c>)
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80022a8:	2200      	movs	r2, #0
 80022aa:	2105      	movs	r1, #5
 80022ac:	201f      	movs	r0, #31
 80022ae:	f001 fff5 	bl	800429c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80022b2:	201f      	movs	r0, #31
 80022b4:	f002 f81e 	bl	80042f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80022b8:	2200      	movs	r2, #0
 80022ba:	2105      	movs	r1, #5
 80022bc:	2020      	movs	r0, #32
 80022be:	f001 ffed 	bl	800429c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80022c2:	2020      	movs	r0, #32
 80022c4:	f002 f816 	bl	80042f4 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80022c8:	e050      	b.n	800236c <HAL_I2C_MspInit+0x140>
  else if(i2cHandle->Instance==I2C3)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a2c      	ldr	r2, [pc, #176]	; (8002380 <HAL_I2C_MspInit+0x154>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d14b      	bne.n	800236c <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	4b27      	ldr	r3, [pc, #156]	; (8002378 <HAL_I2C_MspInit+0x14c>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	4a26      	ldr	r2, [pc, #152]	; (8002378 <HAL_I2C_MspInit+0x14c>)
 80022de:	f043 0304 	orr.w	r3, r3, #4
 80022e2:	6313      	str	r3, [r2, #48]	; 0x30
 80022e4:	4b24      	ldr	r3, [pc, #144]	; (8002378 <HAL_I2C_MspInit+0x14c>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	4b20      	ldr	r3, [pc, #128]	; (8002378 <HAL_I2C_MspInit+0x14c>)
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	4a1f      	ldr	r2, [pc, #124]	; (8002378 <HAL_I2C_MspInit+0x14c>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002300:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_I2C_MspInit+0x14c>)
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800230c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002312:	2312      	movs	r3, #18
 8002314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231a:	2303      	movs	r3, #3
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800231e:	2304      	movs	r3, #4
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002322:	f107 031c 	add.w	r3, r7, #28
 8002326:	4619      	mov	r1, r3
 8002328:	4816      	ldr	r0, [pc, #88]	; (8002384 <HAL_I2C_MspInit+0x158>)
 800232a:	f002 ff85 	bl	8005238 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800232e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002334:	2312      	movs	r3, #18
 8002336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233c:	2303      	movs	r3, #3
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002340:	2304      	movs	r3, #4
 8002342:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002344:	f107 031c 	add.w	r3, r7, #28
 8002348:	4619      	mov	r1, r3
 800234a:	480f      	ldr	r0, [pc, #60]	; (8002388 <HAL_I2C_MspInit+0x15c>)
 800234c:	f002 ff74 	bl	8005238 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002350:	2300      	movs	r3, #0
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <HAL_I2C_MspInit+0x14c>)
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	4a07      	ldr	r2, [pc, #28]	; (8002378 <HAL_I2C_MspInit+0x14c>)
 800235a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800235e:	6413      	str	r3, [r2, #64]	; 0x40
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_I2C_MspInit+0x14c>)
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]
}
 800236c:	bf00      	nop
 800236e:	3730      	adds	r7, #48	; 0x30
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40005400 	.word	0x40005400
 8002378:	40023800 	.word	0x40023800
 800237c:	40020400 	.word	0x40020400
 8002380:	40005c00 	.word	0x40005c00
 8002384:	40020800 	.word	0x40020800
 8002388:	40020000 	.word	0x40020000

0800238c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002390:	f000 ff60 	bl	8003254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002394:	f000 f82c 	bl	80023f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002398:	f7ff fea8 	bl	80020ec <MX_GPIO_Init>
  MX_DMA_Init();
 800239c:	f7ff fe42 	bl	8002024 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80023a0:	f000 fdfa 	bl	8002f98 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80023a4:	f000 fbb4 	bl	8002b10 <MX_TIM2_Init>
  MX_TIM3_Init();
 80023a8:	f000 fc00 	bl	8002bac <MX_TIM3_Init>
  MX_TIM5_Init();
 80023ac:	f000 fc9a 	bl	8002ce4 <MX_TIM5_Init>
  MX_TIM4_Init();
 80023b0:	f000 fc4a 	bl	8002c48 <MX_TIM4_Init>
  MX_ADC1_Init();
 80023b4:	f7ff fcba 	bl	8001d2c <MX_ADC1_Init>
  MX_CRC_Init();
 80023b8:	f7ff fdfe 	bl	8001fb8 <MX_CRC_Init>
  MX_RTC_Init();
 80023bc:	f000 f8c8 	bl	8002550 <MX_RTC_Init>
  MX_I2C1_Init();
 80023c0:	f7ff fed8 	bl	8002174 <MX_I2C1_Init>
  MX_TIM9_Init();
 80023c4:	f000 fcde 	bl	8002d84 <MX_TIM9_Init>
  MX_I2C3_Init();
 80023c8:	f7ff ff02 	bl	80021d0 <MX_I2C3_Init>
  MX_SPI1_Init();
 80023cc:	f000 f9a6 	bl	800271c <MX_SPI1_Init>
  MX_MBEDTLS_Init();
 80023d0:	f009 fe66 	bl	800c0a0 <MX_MBEDTLS_Init>
  MX_TIM11_Init();
 80023d4:	f000 fd10 	bl	8002df8 <MX_TIM11_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 80023d8:	f009 fe62 	bl	800c0a0 <MX_MBEDTLS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80023dc:	f000 f872 	bl	80024c4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80023e0:	f009 feaa 	bl	800c138 <osKernelInitialize>
  MX_FREERTOS_Init();
 80023e4:	f7ff fe3e 	bl	8002064 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80023e8:	f009 feca 	bl	800c180 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80023ec:	e7fe      	b.n	80023ec <main+0x60>
	...

080023f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b094      	sub	sp, #80	; 0x50
 80023f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023f6:	f107 0320 	add.w	r3, r7, #32
 80023fa:	2230      	movs	r2, #48	; 0x30
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f00c fc46 	bl	800ec90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002414:	2300      	movs	r3, #0
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	4b28      	ldr	r3, [pc, #160]	; (80024bc <SystemClock_Config+0xcc>)
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	4a27      	ldr	r2, [pc, #156]	; (80024bc <SystemClock_Config+0xcc>)
 800241e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002422:	6413      	str	r3, [r2, #64]	; 0x40
 8002424:	4b25      	ldr	r3, [pc, #148]	; (80024bc <SystemClock_Config+0xcc>)
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002430:	2300      	movs	r3, #0
 8002432:	607b      	str	r3, [r7, #4]
 8002434:	4b22      	ldr	r3, [pc, #136]	; (80024c0 <SystemClock_Config+0xd0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a21      	ldr	r2, [pc, #132]	; (80024c0 <SystemClock_Config+0xd0>)
 800243a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	4b1f      	ldr	r3, [pc, #124]	; (80024c0 <SystemClock_Config+0xd0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800244c:	2309      	movs	r3, #9
 800244e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002450:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002456:	2301      	movs	r3, #1
 8002458:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800245a:	2302      	movs	r3, #2
 800245c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800245e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002462:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002464:	2304      	movs	r3, #4
 8002466:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002468:	2364      	movs	r3, #100	; 0x64
 800246a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800246c:	2302      	movs	r3, #2
 800246e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002470:	2304      	movs	r3, #4
 8002472:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002474:	f107 0320 	add.w	r3, r7, #32
 8002478:	4618      	mov	r0, r3
 800247a:	f005 f8e9 	bl	8007650 <HAL_RCC_OscConfig>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002484:	f000 f854 	bl	8002530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002488:	230f      	movs	r3, #15
 800248a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800248c:	2302      	movs	r3, #2
 800248e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002498:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800249e:	f107 030c 	add.w	r3, r7, #12
 80024a2:	2103      	movs	r1, #3
 80024a4:	4618      	mov	r0, r3
 80024a6:	f005 fbfb 	bl	8007ca0 <HAL_RCC_ClockConfig>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80024b0:	f000 f83e 	bl	8002530 <Error_Handler>
  }
}
 80024b4:	bf00      	nop
 80024b6:	3750      	adds	r7, #80	; 0x50
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40007000 	.word	0x40007000

080024c4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 80024c8:	2200      	movs	r2, #0
 80024ca:	2105      	movs	r1, #5
 80024cc:	2004      	movs	r0, #4
 80024ce:	f001 fee5 	bl	800429c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80024d2:	2004      	movs	r0, #4
 80024d4:	f001 ff0e 	bl	80042f4 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80024d8:	2200      	movs	r2, #0
 80024da:	2105      	movs	r1, #5
 80024dc:	201c      	movs	r0, #28
 80024de:	f001 fedd 	bl	800429c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024e2:	201c      	movs	r0, #28
 80024e4:	f001 ff06 	bl	80042f4 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80024e8:	2200      	movs	r2, #0
 80024ea:	2105      	movs	r1, #5
 80024ec:	201d      	movs	r0, #29
 80024ee:	f001 fed5 	bl	800429c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024f2:	201d      	movs	r0, #29
 80024f4:	f001 fefe 	bl	80042f4 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 80024f8:	2200      	movs	r2, #0
 80024fa:	2105      	movs	r1, #5
 80024fc:	2051      	movs	r0, #81	; 0x51
 80024fe:	f001 fecd 	bl	800429c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002502:	2051      	movs	r0, #81	; 0x51
 8002504:	f001 fef6 	bl	80042f4 <HAL_NVIC_EnableIRQ>
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d101      	bne.n	8002522 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800251e:	f000 febb 	bl	8003298 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40010000 	.word	0x40010000

08002530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002534:	b672      	cpsid	i
}
 8002536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002538:	e7fe      	b.n	8002538 <Error_Handler+0x8>

0800253a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b090      	sub	sp, #64	; 0x40
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002556:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
 8002564:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002566:	2300      	movs	r3, #0
 8002568:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800256a:	463b      	mov	r3, r7
 800256c:	2228      	movs	r2, #40	; 0x28
 800256e:	2100      	movs	r1, #0
 8002570:	4618      	mov	r0, r3
 8002572:	f00c fb8d 	bl	800ec90 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002576:	4b46      	ldr	r3, [pc, #280]	; (8002690 <MX_RTC_Init+0x140>)
 8002578:	4a46      	ldr	r2, [pc, #280]	; (8002694 <MX_RTC_Init+0x144>)
 800257a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800257c:	4b44      	ldr	r3, [pc, #272]	; (8002690 <MX_RTC_Init+0x140>)
 800257e:	2200      	movs	r2, #0
 8002580:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002582:	4b43      	ldr	r3, [pc, #268]	; (8002690 <MX_RTC_Init+0x140>)
 8002584:	227f      	movs	r2, #127	; 0x7f
 8002586:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002588:	4b41      	ldr	r3, [pc, #260]	; (8002690 <MX_RTC_Init+0x140>)
 800258a:	22ff      	movs	r2, #255	; 0xff
 800258c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800258e:	4b40      	ldr	r3, [pc, #256]	; (8002690 <MX_RTC_Init+0x140>)
 8002590:	2200      	movs	r2, #0
 8002592:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002594:	4b3e      	ldr	r3, [pc, #248]	; (8002690 <MX_RTC_Init+0x140>)
 8002596:	2200      	movs	r2, #0
 8002598:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800259a:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <MX_RTC_Init+0x140>)
 800259c:	2200      	movs	r2, #0
 800259e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80025a0:	483b      	ldr	r0, [pc, #236]	; (8002690 <MX_RTC_Init+0x140>)
 80025a2:	f006 f88d 	bl	80086c0 <HAL_RTC_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80025ac:	f7ff ffc0 	bl	8002530 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80025bc:	2300      	movs	r3, #0
 80025be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80025c6:	2300      	movs	r3, #0
 80025c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80025ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ce:	2201      	movs	r2, #1
 80025d0:	4619      	mov	r1, r3
 80025d2:	482f      	ldr	r0, [pc, #188]	; (8002690 <MX_RTC_Init+0x140>)
 80025d4:	f006 f978 	bl	80088c8 <HAL_RTC_SetTime>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80025de:	f7ff ffa7 	bl	8002530 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80025e8:	2301      	movs	r3, #1
 80025ea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80025ee:	2301      	movs	r3, #1
 80025f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80025fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025fe:	2201      	movs	r2, #1
 8002600:	4619      	mov	r1, r3
 8002602:	4823      	ldr	r0, [pc, #140]	; (8002690 <MX_RTC_Init+0x140>)
 8002604:	f006 faa8 	bl	8008b58 <HAL_RTC_SetDate>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800260e:	f7ff ff8f 	bl	8002530 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002612:	2300      	movs	r3, #0
 8002614:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002616:	2300      	movs	r3, #0
 8002618:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800261a:	2300      	movs	r3, #0
 800261c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002636:	2301      	movs	r3, #1
 8002638:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800263c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002642:	463b      	mov	r3, r7
 8002644:	2201      	movs	r2, #1
 8002646:	4619      	mov	r1, r3
 8002648:	4811      	ldr	r0, [pc, #68]	; (8002690 <MX_RTC_Init+0x140>)
 800264a:	f006 fb91 	bl	8008d70 <HAL_RTC_SetAlarm>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002654:	f7ff ff6c 	bl	8002530 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800265e:	463b      	mov	r3, r7
 8002660:	2201      	movs	r2, #1
 8002662:	4619      	mov	r1, r3
 8002664:	480a      	ldr	r0, [pc, #40]	; (8002690 <MX_RTC_Init+0x140>)
 8002666:	f006 fb83 	bl	8008d70 <HAL_RTC_SetAlarm>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002670:	f7ff ff5e 	bl	8002530 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002674:	2200      	movs	r2, #0
 8002676:	2100      	movs	r1, #0
 8002678:	4805      	ldr	r0, [pc, #20]	; (8002690 <MX_RTC_Init+0x140>)
 800267a:	f006 ff33 	bl	80094e4 <HAL_RTCEx_SetWakeUpTimer>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002684:	f7ff ff54 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002688:	bf00      	nop
 800268a:	3740      	adds	r7, #64	; 0x40
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	200002e8 	.word	0x200002e8
 8002694:	40002800 	.word	0x40002800

08002698 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026a0:	f107 0308 	add.w	r3, r7, #8
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
 80026b0:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a0c      	ldr	r2, [pc, #48]	; (80026e8 <HAL_RTC_MspInit+0x50>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d111      	bne.n	80026e0 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026bc:	2302      	movs	r3, #2
 80026be:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80026c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026c4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026c6:	f107 0308 	add.w	r3, r7, #8
 80026ca:	4618      	mov	r0, r3
 80026cc:	f005 fde2 	bl	8008294 <HAL_RCCEx_PeriphCLKConfig>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80026d6:	f7ff ff2b 	bl	8002530 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026da:	4b04      	ldr	r3, [pc, #16]	; (80026ec <HAL_RTC_MspInit+0x54>)
 80026dc:	2201      	movs	r2, #1
 80026de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80026e0:	bf00      	nop
 80026e2:	3720      	adds	r7, #32
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40002800 	.word	0x40002800
 80026ec:	42470e3c 	.word	0x42470e3c

080026f0 <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a05      	ldr	r2, [pc, #20]	; (8002714 <HAL_RTC_MspDeInit+0x24>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d102      	bne.n	8002708 <HAL_RTC_MspDeInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_RTC_MspDeInit+0x28>)
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40002800 	.word	0x40002800
 8002718:	42470e3c 	.word	0x42470e3c

0800271c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002720:	4b17      	ldr	r3, [pc, #92]	; (8002780 <MX_SPI1_Init+0x64>)
 8002722:	4a18      	ldr	r2, [pc, #96]	; (8002784 <MX_SPI1_Init+0x68>)
 8002724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002726:	4b16      	ldr	r3, [pc, #88]	; (8002780 <MX_SPI1_Init+0x64>)
 8002728:	f44f 7282 	mov.w	r2, #260	; 0x104
 800272c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800272e:	4b14      	ldr	r3, [pc, #80]	; (8002780 <MX_SPI1_Init+0x64>)
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <MX_SPI1_Init+0x64>)
 8002736:	2200      	movs	r2, #0
 8002738:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800273a:	4b11      	ldr	r3, [pc, #68]	; (8002780 <MX_SPI1_Init+0x64>)
 800273c:	2200      	movs	r2, #0
 800273e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002740:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <MX_SPI1_Init+0x64>)
 8002742:	2200      	movs	r2, #0
 8002744:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002746:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <MX_SPI1_Init+0x64>)
 8002748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800274c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <MX_SPI1_Init+0x64>)
 8002750:	2200      	movs	r2, #0
 8002752:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002754:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <MX_SPI1_Init+0x64>)
 8002756:	2200      	movs	r2, #0
 8002758:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <MX_SPI1_Init+0x64>)
 800275c:	2200      	movs	r2, #0
 800275e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <MX_SPI1_Init+0x64>)
 8002762:	2200      	movs	r2, #0
 8002764:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <MX_SPI1_Init+0x64>)
 8002768:	220a      	movs	r2, #10
 800276a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800276c:	4804      	ldr	r0, [pc, #16]	; (8002780 <MX_SPI1_Init+0x64>)
 800276e:	f006 ff8d 	bl	800968c <HAL_SPI_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002778:	f7ff feda 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20000324 	.word	0x20000324
 8002784:	40013000 	.word	0x40013000

08002788 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1d      	ldr	r2, [pc, #116]	; (800281c <HAL_SPI_MspInit+0x94>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d133      	bne.n	8002812 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <HAL_SPI_MspInit+0x98>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	4a1b      	ldr	r2, [pc, #108]	; (8002820 <HAL_SPI_MspInit+0x98>)
 80027b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027b8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ba:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_SPI_MspInit+0x98>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <HAL_SPI_MspInit+0x98>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	4a14      	ldr	r2, [pc, #80]	; (8002820 <HAL_SPI_MspInit+0x98>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6313      	str	r3, [r2, #48]	; 0x30
 80027d6:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_SPI_MspInit+0x98>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80027e2:	23e0      	movs	r3, #224	; 0xe0
 80027e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e6:	2302      	movs	r3, #2
 80027e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ee:	2303      	movs	r3, #3
 80027f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027f2:	2305      	movs	r3, #5
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f6:	f107 0314 	add.w	r3, r7, #20
 80027fa:	4619      	mov	r1, r3
 80027fc:	4809      	ldr	r0, [pc, #36]	; (8002824 <HAL_SPI_MspInit+0x9c>)
 80027fe:	f002 fd1b 	bl	8005238 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002802:	2200      	movs	r2, #0
 8002804:	2105      	movs	r1, #5
 8002806:	2023      	movs	r0, #35	; 0x23
 8002808:	f001 fd48 	bl	800429c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800280c:	2023      	movs	r0, #35	; 0x23
 800280e:	f001 fd71 	bl	80042f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002812:	bf00      	nop
 8002814:	3728      	adds	r7, #40	; 0x28
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40013000 	.word	0x40013000
 8002820:	40023800 	.word	0x40023800
 8002824:	40020000 	.word	0x40020000

08002828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	607b      	str	r3, [r7, #4]
 8002832:	4b1a      	ldr	r3, [pc, #104]	; (800289c <HAL_MspInit+0x74>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	4a19      	ldr	r2, [pc, #100]	; (800289c <HAL_MspInit+0x74>)
 8002838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800283c:	6453      	str	r3, [r2, #68]	; 0x44
 800283e:	4b17      	ldr	r3, [pc, #92]	; (800289c <HAL_MspInit+0x74>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	603b      	str	r3, [r7, #0]
 800284e:	4b13      	ldr	r3, [pc, #76]	; (800289c <HAL_MspInit+0x74>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	4a12      	ldr	r2, [pc, #72]	; (800289c <HAL_MspInit+0x74>)
 8002854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002858:	6413      	str	r3, [r2, #64]	; 0x40
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <HAL_MspInit+0x74>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	210f      	movs	r1, #15
 800286a:	f06f 0001 	mvn.w	r0, #1
 800286e:	f001 fd15 	bl	800429c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8002872:	2200      	movs	r2, #0
 8002874:	2105      	movs	r1, #5
 8002876:	2001      	movs	r0, #1
 8002878:	f001 fd10 	bl	800429c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800287c:	2001      	movs	r0, #1
 800287e:	f001 fd39 	bl	80042f4 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002882:	2200      	movs	r2, #0
 8002884:	2105      	movs	r1, #5
 8002886:	2005      	movs	r0, #5
 8002888:	f001 fd08 	bl	800429c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800288c:	2005      	movs	r0, #5
 800288e:	f001 fd31 	bl	80042f4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40023800 	.word	0x40023800

080028a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08c      	sub	sp, #48	; 0x30
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80028b0:	2300      	movs	r3, #0
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	4b2e      	ldr	r3, [pc, #184]	; (8002970 <HAL_InitTick+0xd0>)
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	4a2d      	ldr	r2, [pc, #180]	; (8002970 <HAL_InitTick+0xd0>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	6453      	str	r3, [r2, #68]	; 0x44
 80028c0:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <HAL_InitTick+0xd0>)
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028cc:	f107 020c 	add.w	r2, r7, #12
 80028d0:	f107 0310 	add.w	r3, r7, #16
 80028d4:	4611      	mov	r1, r2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f005 fcaa 	bl	8008230 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80028dc:	f005 fc94 	bl	8008208 <HAL_RCC_GetPCLK2Freq>
 80028e0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	4a23      	ldr	r2, [pc, #140]	; (8002974 <HAL_InitTick+0xd4>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	0c9b      	lsrs	r3, r3, #18
 80028ec:	3b01      	subs	r3, #1
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80028f0:	4b21      	ldr	r3, [pc, #132]	; (8002978 <HAL_InitTick+0xd8>)
 80028f2:	4a22      	ldr	r2, [pc, #136]	; (800297c <HAL_InitTick+0xdc>)
 80028f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80028f6:	4b20      	ldr	r3, [pc, #128]	; (8002978 <HAL_InitTick+0xd8>)
 80028f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028fc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80028fe:	4a1e      	ldr	r2, [pc, #120]	; (8002978 <HAL_InitTick+0xd8>)
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002904:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <HAL_InitTick+0xd8>)
 8002906:	2200      	movs	r2, #0
 8002908:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800290a:	4b1b      	ldr	r3, [pc, #108]	; (8002978 <HAL_InitTick+0xd8>)
 800290c:	2200      	movs	r2, #0
 800290e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002910:	4b19      	ldr	r3, [pc, #100]	; (8002978 <HAL_InitTick+0xd8>)
 8002912:	2200      	movs	r2, #0
 8002914:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002916:	4818      	ldr	r0, [pc, #96]	; (8002978 <HAL_InitTick+0xd8>)
 8002918:	f007 f9ec 	bl	8009cf4 <HAL_TIM_Base_Init>
 800291c:	4603      	mov	r3, r0
 800291e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002922:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002926:	2b00      	cmp	r3, #0
 8002928:	d11b      	bne.n	8002962 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800292a:	4813      	ldr	r0, [pc, #76]	; (8002978 <HAL_InitTick+0xd8>)
 800292c:	f007 fba0 	bl	800a070 <HAL_TIM_Base_Start_IT>
 8002930:	4603      	mov	r3, r0
 8002932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800293a:	2b00      	cmp	r3, #0
 800293c:	d111      	bne.n	8002962 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800293e:	2019      	movs	r0, #25
 8002940:	f001 fcd8 	bl	80042f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b0f      	cmp	r3, #15
 8002948:	d808      	bhi.n	800295c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800294a:	2200      	movs	r2, #0
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	2019      	movs	r0, #25
 8002950:	f001 fca4 	bl	800429c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002954:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <HAL_InitTick+0xe0>)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e002      	b.n	8002962 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002962:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002966:	4618      	mov	r0, r3
 8002968:	3730      	adds	r7, #48	; 0x30
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800
 8002974:	431bde83 	.word	0x431bde83
 8002978:	200003a4 	.word	0x200003a4
 800297c:	40010000 	.word	0x40010000
 8002980:	20000008 	.word	0x20000008

08002984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002988:	e7fe      	b.n	8002988 <NMI_Handler+0x4>

0800298a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800298e:	e7fe      	b.n	800298e <HardFault_Handler+0x4>

08002990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002994:	e7fe      	b.n	8002994 <MemManage_Handler+0x4>

08002996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800299a:	e7fe      	b.n	800299a <BusFault_Handler+0x4>

0800299c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029a0:	e7fe      	b.n	80029a0 <UsageFault_Handler+0x4>

080029a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80029b4:	f004 fe32 	bl	800761c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80029b8:	bf00      	nop
 80029ba:	bd80      	pop	{r7, pc}

080029bc <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80029c0:	f002 fa64 	bl	8004e8c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80029c4:	bf00      	nop
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80029dc:	4802      	ldr	r0, [pc, #8]	; (80029e8 <ADC_IRQHandler+0x10>)
 80029de:	f000 fdfd 	bl	80035dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000108 	.word	0x20000108

080029ec <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80029f0:	4802      	ldr	r0, [pc, #8]	; (80029fc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80029f2:	f007 fbcf 	bl	800a194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000728 	.word	0x20000728

08002a00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a04:	4802      	ldr	r0, [pc, #8]	; (8002a10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002a06:	f007 fbc5 	bl	800a194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	200003a4 	.word	0x200003a4

08002a14 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002a18:	4802      	ldr	r0, [pc, #8]	; (8002a24 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002a1a:	f007 fbbb 	bl	800a194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200007dc 	.word	0x200007dc

08002a28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a2c:	4802      	ldr	r0, [pc, #8]	; (8002a38 <TIM2_IRQHandler+0x10>)
 8002a2e:	f007 fbb1 	bl	800a194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000458 	.word	0x20000458

08002a3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a40:	4802      	ldr	r0, [pc, #8]	; (8002a4c <TIM3_IRQHandler+0x10>)
 8002a42:	f007 fba7 	bl	800a194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	2000050c 	.word	0x2000050c

08002a50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a54:	4802      	ldr	r0, [pc, #8]	; (8002a60 <TIM4_IRQHandler+0x10>)
 8002a56:	f007 fb9d 	bl	800a194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	200005c0 	.word	0x200005c0

08002a64 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002a68:	4802      	ldr	r0, [pc, #8]	; (8002a74 <I2C1_EV_IRQHandler+0x10>)
 8002a6a:	f003 f8e1 	bl	8005c30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	200001e0 	.word	0x200001e0

08002a78 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002a7c:	4802      	ldr	r0, [pc, #8]	; (8002a88 <I2C1_ER_IRQHandler+0x10>)
 8002a7e:	f003 fa48 	bl	8005f12 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	200001e0 	.word	0x200001e0

08002a8c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002a90:	4802      	ldr	r0, [pc, #8]	; (8002a9c <SPI1_IRQHandler+0x10>)
 8002a92:	f006 ffc9 	bl	8009a28 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000324 	.word	0x20000324

08002aa0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002aa4:	4802      	ldr	r0, [pc, #8]	; (8002ab0 <USART1_IRQHandler+0x10>)
 8002aa6:	f008 fb49 	bl	800b13c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000890 	.word	0x20000890

08002ab4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002ab8:	4802      	ldr	r0, [pc, #8]	; (8002ac4 <TIM5_IRQHandler+0x10>)
 8002aba:	f007 fb6b 	bl	800a194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000674 	.word	0x20000674

08002ac8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002acc:	4802      	ldr	r0, [pc, #8]	; (8002ad8 <DMA2_Stream0_IRQHandler+0x10>)
 8002ace:	f001 ff65 	bl	800499c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	2000016c 	.word	0x2000016c

08002adc <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <SystemInit+0x20>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af6:	4a05      	ldr	r2, [pc, #20]	; (8002b0c <SystemInit+0x20>)
 8002af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b16:	f107 0308 	add.w	r3, r7, #8
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	609a      	str	r2, [r3, #8]
 8002b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b24:	463b      	mov	r3, r7
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <MX_TIM2_Init+0x98>)
 8002b2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8002b34:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <MX_TIM2_Init+0x98>)
 8002b36:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <MX_TIM2_Init+0x98>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8002b42:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <MX_TIM2_Init+0x98>)
 8002b44:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b4a:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <MX_TIM2_Init+0x98>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b50:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <MX_TIM2_Init+0x98>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b56:	4814      	ldr	r0, [pc, #80]	; (8002ba8 <MX_TIM2_Init+0x98>)
 8002b58:	f007 f8cc 	bl	8009cf4 <HAL_TIM_Base_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002b62:	f7ff fce5 	bl	8002530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b6c:	f107 0308 	add.w	r3, r7, #8
 8002b70:	4619      	mov	r1, r3
 8002b72:	480d      	ldr	r0, [pc, #52]	; (8002ba8 <MX_TIM2_Init+0x98>)
 8002b74:	f007 fc36 	bl	800a3e4 <HAL_TIM_ConfigClockSource>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002b7e:	f7ff fcd7 	bl	8002530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b82:	2300      	movs	r3, #0
 8002b84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b8a:	463b      	mov	r3, r7
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4806      	ldr	r0, [pc, #24]	; (8002ba8 <MX_TIM2_Init+0x98>)
 8002b90:	f008 f904 	bl	800ad9c <HAL_TIMEx_MasterConfigSynchronization>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002b9a:	f7ff fcc9 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b9e:	bf00      	nop
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000458 	.word	0x20000458

08002bac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bb2:	f107 0308 	add.w	r3, r7, #8
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc0:	463b      	mov	r3, r7
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <MX_TIM3_Init+0x94>)
 8002bca:	4a1e      	ldr	r2, [pc, #120]	; (8002c44 <MX_TIM3_Init+0x98>)
 8002bcc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8002bce:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <MX_TIM3_Init+0x94>)
 8002bd0:	f242 720f 	movw	r2, #9999	; 0x270f
 8002bd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd6:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <MX_TIM3_Init+0x94>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8002bdc:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <MX_TIM3_Init+0x94>)
 8002bde:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002be2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002be4:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <MX_TIM3_Init+0x94>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bea:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <MX_TIM3_Init+0x94>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bf0:	4813      	ldr	r0, [pc, #76]	; (8002c40 <MX_TIM3_Init+0x94>)
 8002bf2:	f007 f87f 	bl	8009cf4 <HAL_TIM_Base_Init>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002bfc:	f7ff fc98 	bl	8002530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c06:	f107 0308 	add.w	r3, r7, #8
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	480c      	ldr	r0, [pc, #48]	; (8002c40 <MX_TIM3_Init+0x94>)
 8002c0e:	f007 fbe9 	bl	800a3e4 <HAL_TIM_ConfigClockSource>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002c18:	f7ff fc8a 	bl	8002530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c20:	2300      	movs	r3, #0
 8002c22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c24:	463b      	mov	r3, r7
 8002c26:	4619      	mov	r1, r3
 8002c28:	4805      	ldr	r0, [pc, #20]	; (8002c40 <MX_TIM3_Init+0x94>)
 8002c2a:	f008 f8b7 	bl	800ad9c <HAL_TIMEx_MasterConfigSynchronization>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002c34:	f7ff fc7c 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c38:	bf00      	nop
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	2000050c 	.word	0x2000050c
 8002c44:	40000400 	.word	0x40000400

08002c48 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c4e:	f107 0308 	add.w	r3, r7, #8
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	609a      	str	r2, [r3, #8]
 8002c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c5c:	463b      	mov	r3, r7
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c64:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <MX_TIM4_Init+0x94>)
 8002c66:	4a1e      	ldr	r2, [pc, #120]	; (8002ce0 <MX_TIM4_Init+0x98>)
 8002c68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <MX_TIM4_Init+0x94>)
 8002c6c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002c70:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c72:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <MX_TIM4_Init+0x94>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8002c78:	4b18      	ldr	r3, [pc, #96]	; (8002cdc <MX_TIM4_Init+0x94>)
 8002c7a:	f242 720f 	movw	r2, #9999	; 0x270f
 8002c7e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c80:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <MX_TIM4_Init+0x94>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c86:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <MX_TIM4_Init+0x94>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c8c:	4813      	ldr	r0, [pc, #76]	; (8002cdc <MX_TIM4_Init+0x94>)
 8002c8e:	f007 f831 	bl	8009cf4 <HAL_TIM_Base_Init>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002c98:	f7ff fc4a 	bl	8002530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ca0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ca2:	f107 0308 	add.w	r3, r7, #8
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	480c      	ldr	r0, [pc, #48]	; (8002cdc <MX_TIM4_Init+0x94>)
 8002caa:	f007 fb9b 	bl	800a3e4 <HAL_TIM_ConfigClockSource>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002cb4:	f7ff fc3c 	bl	8002530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cc0:	463b      	mov	r3, r7
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4805      	ldr	r0, [pc, #20]	; (8002cdc <MX_TIM4_Init+0x94>)
 8002cc6:	f008 f869 	bl	800ad9c <HAL_TIMEx_MasterConfigSynchronization>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002cd0:	f7ff fc2e 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002cd4:	bf00      	nop
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	200005c0 	.word	0x200005c0
 8002ce0:	40000800 	.word	0x40000800

08002ce4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cea:	f107 0308 	add.w	r3, r7, #8
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	605a      	str	r2, [r3, #4]
 8002cf4:	609a      	str	r2, [r3, #8]
 8002cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf8:	463b      	mov	r3, r7
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <MX_TIM5_Init+0x94>)
 8002d02:	4a1e      	ldr	r2, [pc, #120]	; (8002d7c <MX_TIM5_Init+0x98>)
 8002d04:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10000-1;
 8002d06:	4b1c      	ldr	r3, [pc, #112]	; (8002d78 <MX_TIM5_Init+0x94>)
 8002d08:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d0c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d0e:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <MX_TIM5_Init+0x94>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 110000-1;
 8002d14:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <MX_TIM5_Init+0x94>)
 8002d16:	4a1a      	ldr	r2, [pc, #104]	; (8002d80 <MX_TIM5_Init+0x9c>)
 8002d18:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d1a:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <MX_TIM5_Init+0x94>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d20:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <MX_TIM5_Init+0x94>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002d26:	4814      	ldr	r0, [pc, #80]	; (8002d78 <MX_TIM5_Init+0x94>)
 8002d28:	f006 ffe4 	bl	8009cf4 <HAL_TIM_Base_Init>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002d32:	f7ff fbfd 	bl	8002530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002d3c:	f107 0308 	add.w	r3, r7, #8
 8002d40:	4619      	mov	r1, r3
 8002d42:	480d      	ldr	r0, [pc, #52]	; (8002d78 <MX_TIM5_Init+0x94>)
 8002d44:	f007 fb4e 	bl	800a3e4 <HAL_TIM_ConfigClockSource>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002d4e:	f7ff fbef 	bl	8002530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d52:	2300      	movs	r3, #0
 8002d54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d5a:	463b      	mov	r3, r7
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4806      	ldr	r0, [pc, #24]	; (8002d78 <MX_TIM5_Init+0x94>)
 8002d60:	f008 f81c 	bl	800ad9c <HAL_TIMEx_MasterConfigSynchronization>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002d6a:	f7ff fbe1 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002d6e:	bf00      	nop
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000674 	.word	0x20000674
 8002d7c:	40000c00 	.word	0x40000c00
 8002d80:	0001adaf 	.word	0x0001adaf

08002d84 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d8a:	463b      	mov	r3, r7
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002d96:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <MX_TIM9_Init+0x6c>)
 8002d98:	4a16      	ldr	r2, [pc, #88]	; (8002df4 <MX_TIM9_Init+0x70>)
 8002d9a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10000-1;
 8002d9c:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <MX_TIM9_Init+0x6c>)
 8002d9e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002da2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <MX_TIM9_Init+0x6c>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000-1;
 8002daa:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <MX_TIM9_Init+0x6c>)
 8002dac:	f242 720f 	movw	r2, #9999	; 0x270f
 8002db0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002db2:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <MX_TIM9_Init+0x6c>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db8:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <MX_TIM9_Init+0x6c>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002dbe:	480c      	ldr	r0, [pc, #48]	; (8002df0 <MX_TIM9_Init+0x6c>)
 8002dc0:	f006 ff98 	bl	8009cf4 <HAL_TIM_Base_Init>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8002dca:	f7ff fbb1 	bl	8002530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd2:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002dd4:	463b      	mov	r3, r7
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4805      	ldr	r0, [pc, #20]	; (8002df0 <MX_TIM9_Init+0x6c>)
 8002dda:	f007 fb03 	bl	800a3e4 <HAL_TIM_ConfigClockSource>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8002de4:	f7ff fba4 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000728 	.word	0x20000728
 8002df4:	40014000 	.word	0x40014000

08002df8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002dfc:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <MX_TIM11_Init+0x40>)
 8002dfe:	4a0f      	ldr	r2, [pc, #60]	; (8002e3c <MX_TIM11_Init+0x44>)
 8002e00:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10000-1;
 8002e02:	4b0d      	ldr	r3, [pc, #52]	; (8002e38 <MX_TIM11_Init+0x40>)
 8002e04:	f242 720f 	movw	r2, #9999	; 0x270f
 8002e08:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <MX_TIM11_Init+0x40>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 8002e10:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <MX_TIM11_Init+0x40>)
 8002e12:	f242 720f 	movw	r2, #9999	; 0x270f
 8002e16:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e18:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <MX_TIM11_Init+0x40>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <MX_TIM11_Init+0x40>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002e24:	4804      	ldr	r0, [pc, #16]	; (8002e38 <MX_TIM11_Init+0x40>)
 8002e26:	f006 ff65 	bl	8009cf4 <HAL_TIM_Base_Init>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002e30:	f7ff fb7e 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002e34:	bf00      	nop
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	200007dc 	.word	0x200007dc
 8002e3c:	40014800 	.word	0x40014800

08002e40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e50:	d10e      	bne.n	8002e70 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	4b4a      	ldr	r3, [pc, #296]	; (8002f80 <HAL_TIM_Base_MspInit+0x140>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	4a49      	ldr	r2, [pc, #292]	; (8002f80 <HAL_TIM_Base_MspInit+0x140>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	6413      	str	r3, [r2, #64]	; 0x40
 8002e62:	4b47      	ldr	r3, [pc, #284]	; (8002f80 <HAL_TIM_Base_MspInit+0x140>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002e6e:	e082      	b.n	8002f76 <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM3)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a43      	ldr	r2, [pc, #268]	; (8002f84 <HAL_TIM_Base_MspInit+0x144>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d10e      	bne.n	8002e98 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	4b40      	ldr	r3, [pc, #256]	; (8002f80 <HAL_TIM_Base_MspInit+0x140>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	4a3f      	ldr	r2, [pc, #252]	; (8002f80 <HAL_TIM_Base_MspInit+0x140>)
 8002e84:	f043 0302 	orr.w	r3, r3, #2
 8002e88:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8a:	4b3d      	ldr	r3, [pc, #244]	; (8002f80 <HAL_TIM_Base_MspInit+0x140>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	61bb      	str	r3, [r7, #24]
 8002e94:	69bb      	ldr	r3, [r7, #24]
}
 8002e96:	e06e      	b.n	8002f76 <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM4)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a3a      	ldr	r2, [pc, #232]	; (8002f88 <HAL_TIM_Base_MspInit+0x148>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d116      	bne.n	8002ed0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	4b36      	ldr	r3, [pc, #216]	; (8002f80 <HAL_TIM_Base_MspInit+0x140>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	4a35      	ldr	r2, [pc, #212]	; (8002f80 <HAL_TIM_Base_MspInit+0x140>)
 8002eac:	f043 0304 	orr.w	r3, r3, #4
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb2:	4b33      	ldr	r3, [pc, #204]	; (8002f80 <HAL_TIM_Base_MspInit+0x140>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2105      	movs	r1, #5
 8002ec2:	201e      	movs	r0, #30
 8002ec4:	f001 f9ea 	bl	800429c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002ec8:	201e      	movs	r0, #30
 8002eca:	f001 fa13 	bl	80042f4 <HAL_NVIC_EnableIRQ>
}
 8002ece:	e052      	b.n	8002f76 <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM5)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a2d      	ldr	r2, [pc, #180]	; (8002f8c <HAL_TIM_Base_MspInit+0x14c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d116      	bne.n	8002f08 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <HAL_TIM_Base_MspInit+0x140>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	4a27      	ldr	r2, [pc, #156]	; (8002f80 <HAL_TIM_Base_MspInit+0x140>)
 8002ee4:	f043 0308 	orr.w	r3, r3, #8
 8002ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eea:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <HAL_TIM_Base_MspInit+0x140>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2105      	movs	r1, #5
 8002efa:	2032      	movs	r0, #50	; 0x32
 8002efc:	f001 f9ce 	bl	800429c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002f00:	2032      	movs	r0, #50	; 0x32
 8002f02:	f001 f9f7 	bl	80042f4 <HAL_NVIC_EnableIRQ>
}
 8002f06:	e036      	b.n	8002f76 <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM9)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a20      	ldr	r2, [pc, #128]	; (8002f90 <HAL_TIM_Base_MspInit+0x150>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d116      	bne.n	8002f40 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <HAL_TIM_Base_MspInit+0x140>)
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <HAL_TIM_Base_MspInit+0x140>)
 8002f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f20:	6453      	str	r3, [r2, #68]	; 0x44
 8002f22:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <HAL_TIM_Base_MspInit+0x140>)
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2105      	movs	r1, #5
 8002f32:	2018      	movs	r0, #24
 8002f34:	f001 f9b2 	bl	800429c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002f38:	2018      	movs	r0, #24
 8002f3a:	f001 f9db 	bl	80042f4 <HAL_NVIC_EnableIRQ>
}
 8002f3e:	e01a      	b.n	8002f76 <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM11)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a13      	ldr	r2, [pc, #76]	; (8002f94 <HAL_TIM_Base_MspInit+0x154>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d115      	bne.n	8002f76 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <HAL_TIM_Base_MspInit+0x140>)
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	4a0b      	ldr	r2, [pc, #44]	; (8002f80 <HAL_TIM_Base_MspInit+0x140>)
 8002f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f58:	6453      	str	r3, [r2, #68]	; 0x44
 8002f5a:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <HAL_TIM_Base_MspInit+0x140>)
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002f66:	2200      	movs	r2, #0
 8002f68:	2105      	movs	r1, #5
 8002f6a:	201a      	movs	r0, #26
 8002f6c:	f001 f996 	bl	800429c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002f70:	201a      	movs	r0, #26
 8002f72:	f001 f9bf 	bl	80042f4 <HAL_NVIC_EnableIRQ>
}
 8002f76:	bf00      	nop
 8002f78:	3720      	adds	r7, #32
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40000400 	.word	0x40000400
 8002f88:	40000800 	.word	0x40000800
 8002f8c:	40000c00 	.word	0x40000c00
 8002f90:	40014000 	.word	0x40014000
 8002f94:	40014800 	.word	0x40014800

08002f98 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002f9e:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <MX_USART1_UART_Init+0x50>)
 8002fa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fa4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002fa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002faa:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fbc:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fbe:	220c      	movs	r2, #12
 8002fc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fc2:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fce:	4805      	ldr	r0, [pc, #20]	; (8002fe4 <MX_USART1_UART_Init+0x4c>)
 8002fd0:	f007 ffc0 	bl	800af54 <HAL_UART_Init>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002fda:	f7ff faa9 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000890 	.word	0x20000890
 8002fe8:	40011000 	.word	0x40011000

08002fec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	; 0x28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff4:	f107 0314 	add.w	r3, r7, #20
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a2c      	ldr	r2, [pc, #176]	; (80030bc <HAL_UART_MspInit+0xd0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d152      	bne.n	80030b4 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <HAL_UART_MspInit+0xd4>)
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	4a2a      	ldr	r2, [pc, #168]	; (80030c0 <HAL_UART_MspInit+0xd4>)
 8003018:	f043 0310 	orr.w	r3, r3, #16
 800301c:	6453      	str	r3, [r2, #68]	; 0x44
 800301e:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <HAL_UART_MspInit+0xd4>)
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <HAL_UART_MspInit+0xd4>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a23      	ldr	r2, [pc, #140]	; (80030c0 <HAL_UART_MspInit+0xd4>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b21      	ldr	r3, [pc, #132]	; (80030c0 <HAL_UART_MspInit+0xd4>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_UART_MspInit+0xd4>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a1c      	ldr	r2, [pc, #112]	; (80030c0 <HAL_UART_MspInit+0xd4>)
 8003050:	f043 0302 	orr.w	r3, r3, #2
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <HAL_UART_MspInit+0xd4>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003068:	2302      	movs	r3, #2
 800306a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306c:	2300      	movs	r3, #0
 800306e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003070:	2303      	movs	r3, #3
 8003072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003074:	2307      	movs	r3, #7
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003078:	f107 0314 	add.w	r3, r7, #20
 800307c:	4619      	mov	r1, r3
 800307e:	4811      	ldr	r0, [pc, #68]	; (80030c4 <HAL_UART_MspInit+0xd8>)
 8003080:	f002 f8da 	bl	8005238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003088:	2302      	movs	r3, #2
 800308a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308c:	2300      	movs	r3, #0
 800308e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003090:	2303      	movs	r3, #3
 8003092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003094:	2307      	movs	r3, #7
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003098:	f107 0314 	add.w	r3, r7, #20
 800309c:	4619      	mov	r1, r3
 800309e:	480a      	ldr	r0, [pc, #40]	; (80030c8 <HAL_UART_MspInit+0xdc>)
 80030a0:	f002 f8ca 	bl	8005238 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80030a4:	2200      	movs	r2, #0
 80030a6:	2105      	movs	r1, #5
 80030a8:	2025      	movs	r0, #37	; 0x25
 80030aa:	f001 f8f7 	bl	800429c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030ae:	2025      	movs	r0, #37	; 0x25
 80030b0:	f001 f920 	bl	80042f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80030b4:	bf00      	nop
 80030b6:	3728      	adds	r7, #40	; 0x28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40011000 	.word	0x40011000
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40020000 	.word	0x40020000
 80030c8:	40020400 	.word	0x40020400

080030cc <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a05      	ldr	r2, [pc, #20]	; (80030f0 <HAL_UART_RxCpltCallback+0x24>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d104      	bne.n	80030e8 <HAL_UART_RxCpltCallback+0x1c>
  {

	//BtcReceivedDataIRQ = STD_HIGH;
    HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 80030de:	2201      	movs	r2, #1
 80030e0:	4904      	ldr	r1, [pc, #16]	; (80030f4 <HAL_UART_RxCpltCallback+0x28>)
 80030e2:	4805      	ldr	r0, [pc, #20]	; (80030f8 <HAL_UART_RxCpltCallback+0x2c>)
 80030e4:	f007 fffa 	bl	800b0dc <HAL_UART_Receive_IT>

	  /* do nothing */

  }

}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40011000 	.word	0x40011000
 80030f4:	20000094 	.word	0x20000094
 80030f8:	20000890 	.word	0x20000890

080030fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80030fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003134 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003100:	480d      	ldr	r0, [pc, #52]	; (8003138 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003102:	490e      	ldr	r1, [pc, #56]	; (800313c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003104:	4a0e      	ldr	r2, [pc, #56]	; (8003140 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003108:	e002      	b.n	8003110 <LoopCopyDataInit>

0800310a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800310a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800310c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800310e:	3304      	adds	r3, #4

08003110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003114:	d3f9      	bcc.n	800310a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003116:	4a0b      	ldr	r2, [pc, #44]	; (8003144 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003118:	4c0b      	ldr	r4, [pc, #44]	; (8003148 <LoopFillZerobss+0x26>)
  movs r3, #0
 800311a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800311c:	e001      	b.n	8003122 <LoopFillZerobss>

0800311e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800311e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003120:	3204      	adds	r2, #4

08003122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003124:	d3fb      	bcc.n	800311e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003126:	f7ff fce1 	bl	8002aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800312a:	f00b fd7f 	bl	800ec2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800312e:	f7ff f92d 	bl	800238c <main>
  bx  lr    
 8003132:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003134:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800313c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003140:	0800f624 	.word	0x0800f624
  ldr r2, =_sbss
 8003144:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003148:	20005348 	.word	0x20005348

0800314c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800314c:	e7fe      	b.n	800314c <DMA1_Stream0_IRQHandler>

0800314e <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d104      	bne.n	8003166 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800315c:	b672      	cpsid	i
}
 800315e:	bf00      	nop
 8003160:	f7ff f9e6 	bl	8002530 <Error_Handler>
 8003164:	e7fe      	b.n	8003164 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	7a1b      	ldrb	r3, [r3, #8]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d904      	bls.n	8003178 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800316e:	b672      	cpsid	i
}
 8003170:	bf00      	nop
 8003172:	f7ff f9dd 	bl	8002530 <Error_Handler>
 8003176:	e7fe      	b.n	8003176 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	7a1b      	ldrb	r3, [r3, #8]
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	b2d1      	uxtb	r1, r2
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	7211      	strb	r1, [r2, #8]
 8003184:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003186:	f3ef 8211 	mrs	r2, BASEPRI
 800318a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318e:	f383 8811 	msr	BASEPRI, r3
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	60fa      	str	r2, [r7, #12]
 800319c:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d104      	bne.n	80031c6 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80031bc:	b672      	cpsid	i
}
 80031be:	bf00      	nop
 80031c0:	f7ff f9b6 	bl	8002530 <Error_Handler>
 80031c4:	e7fe      	b.n	80031c4 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	7a1b      	ldrb	r3, [r3, #8]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	7a1b      	ldrb	r3, [r3, #8]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d904      	bls.n	80031e4 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80031da:	b672      	cpsid	i
}
 80031dc:	bf00      	nop
 80031de:	f7ff f9a7 	bl	8002530 <Error_Handler>
 80031e2:	e7fe      	b.n	80031e2 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	7a1b      	ldrb	r3, [r3, #8]
 80031e8:	461a      	mov	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80031f8:	bf00      	nop
}
 80031fa:	bf00      	nop
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d104      	bne.n	800321a <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003210:	b672      	cpsid	i
}
 8003212:	bf00      	nop
 8003214:	f7ff f98c 	bl	8002530 <Error_Handler>
 8003218:	e7fe      	b.n	8003218 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ff96 	bl	800314e <stm32_lock_acquire>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d104      	bne.n	8003242 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003238:	b672      	cpsid	i
}
 800323a:	bf00      	nop
 800323c:	f7ff f978 	bl	8002530 <Error_Handler>
 8003240:	e7fe      	b.n	8003240 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff ffb2 	bl	80031ae <stm32_lock_release>
}
 800324a:	bf00      	nop
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003258:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <HAL_Init+0x40>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a0d      	ldr	r2, [pc, #52]	; (8003294 <HAL_Init+0x40>)
 800325e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003262:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003264:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <HAL_Init+0x40>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <HAL_Init+0x40>)
 800326a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800326e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003270:	4b08      	ldr	r3, [pc, #32]	; (8003294 <HAL_Init+0x40>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a07      	ldr	r2, [pc, #28]	; (8003294 <HAL_Init+0x40>)
 8003276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800327c:	2003      	movs	r0, #3
 800327e:	f000 ffed 	bl	800425c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003282:	200f      	movs	r0, #15
 8003284:	f7ff fb0c 	bl	80028a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003288:	f7ff face 	bl	8002828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40023c00 	.word	0x40023c00

08003298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_IncTick+0x20>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_IncTick+0x24>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4413      	add	r3, r2
 80032a8:	4a04      	ldr	r2, [pc, #16]	; (80032bc <HAL_IncTick+0x24>)
 80032aa:	6013      	str	r3, [r2, #0]
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	2000000c 	.word	0x2000000c
 80032bc:	20000910 	.word	0x20000910

080032c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  return uwTick;
 80032c4:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <HAL_GetTick+0x14>)
 80032c6:	681b      	ldr	r3, [r3, #0]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	20000910 	.word	0x20000910

080032d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e16f      	b.n	80035ce <HAL_ADC_Init+0x2f6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a93      	ldr	r2, [pc, #588]	; (8003540 <HAL_ADC_Init+0x268>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d004      	beq.n	8003302 <HAL_ADC_Init+0x2a>
 80032f8:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80032fc:	4891      	ldr	r0, [pc, #580]	; (8003544 <HAL_ADC_Init+0x26c>)
 80032fe:	f7ff f91c 	bl	800253a <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d013      	beq.n	8003332 <HAL_ADC_Init+0x5a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003312:	d00e      	beq.n	8003332 <HAL_ADC_Init+0x5a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800331c:	d009      	beq.n	8003332 <HAL_ADC_Init+0x5a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003326:	d004      	beq.n	8003332 <HAL_ADC_Init+0x5a>
 8003328:	f240 1143 	movw	r1, #323	; 0x143
 800332c:	4885      	ldr	r0, [pc, #532]	; (8003544 <HAL_ADC_Init+0x26c>)
 800332e:	f7ff f904 	bl	800253a <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d013      	beq.n	8003362 <HAL_ADC_Init+0x8a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003342:	d00e      	beq.n	8003362 <HAL_ADC_Init+0x8a>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800334c:	d009      	beq.n	8003362 <HAL_ADC_Init+0x8a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003356:	d004      	beq.n	8003362 <HAL_ADC_Init+0x8a>
 8003358:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800335c:	4879      	ldr	r0, [pc, #484]	; (8003544 <HAL_ADC_Init+0x26c>)
 800335e:	f7ff f8ec 	bl	800253a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d008      	beq.n	800337c <HAL_ADC_Init+0xa4>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d004      	beq.n	800337c <HAL_ADC_Init+0xa4>
 8003372:	f240 1145 	movw	r1, #325	; 0x145
 8003376:	4873      	ldr	r0, [pc, #460]	; (8003544 <HAL_ADC_Init+0x26c>)
 8003378:	f7ff f8df 	bl	800253a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	7e1b      	ldrb	r3, [r3, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <HAL_ADC_Init+0xbe>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	7e1b      	ldrb	r3, [r3, #24]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d004      	beq.n	8003396 <HAL_ADC_Init+0xbe>
 800338c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003390:	486c      	ldr	r0, [pc, #432]	; (8003544 <HAL_ADC_Init+0x26c>)
 8003392:	f7ff f8d2 	bl	800253a <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	2b00      	cmp	r3, #0
 800339c:	d054      	beq.n	8003448 <HAL_ADC_Init+0x170>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033a6:	d04f      	beq.n	8003448 <HAL_ADC_Init+0x170>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033b0:	d04a      	beq.n	8003448 <HAL_ADC_Init+0x170>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033ba:	d045      	beq.n	8003448 <HAL_ADC_Init+0x170>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033c4:	d040      	beq.n	8003448 <HAL_ADC_Init+0x170>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80033ce:	d03b      	beq.n	8003448 <HAL_ADC_Init+0x170>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80033d8:	d036      	beq.n	8003448 <HAL_ADC_Init+0x170>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80033e2:	d031      	beq.n	8003448 <HAL_ADC_Init+0x170>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ec:	d02c      	beq.n	8003448 <HAL_ADC_Init+0x170>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 80033f6:	d027      	beq.n	8003448 <HAL_ADC_Init+0x170>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003400:	d022      	beq.n	8003448 <HAL_ADC_Init+0x170>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 800340a:	d01d      	beq.n	8003448 <HAL_ADC_Init+0x170>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003410:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003414:	d018      	beq.n	8003448 <HAL_ADC_Init+0x170>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 800341e:	d013      	beq.n	8003448 <HAL_ADC_Init+0x170>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003424:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003428:	d00e      	beq.n	8003448 <HAL_ADC_Init+0x170>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003432:	d009      	beq.n	8003448 <HAL_ADC_Init+0x170>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	4a43      	ldr	r2, [pc, #268]	; (8003548 <HAL_ADC_Init+0x270>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d004      	beq.n	8003448 <HAL_ADC_Init+0x170>
 800343e:	f240 1147 	movw	r1, #327	; 0x147
 8003442:	4840      	ldr	r0, [pc, #256]	; (8003544 <HAL_ADC_Init+0x26c>)
 8003444:	f7ff f879 	bl	800253a <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d009      	beq.n	8003464 <HAL_ADC_Init+0x18c>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003458:	d004      	beq.n	8003464 <HAL_ADC_Init+0x18c>
 800345a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800345e:	4839      	ldr	r0, [pc, #228]	; (8003544 <HAL_ADC_Init+0x26c>)
 8003460:	f7ff f86b 	bl	800253a <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_ADC_Init+0x19c>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	2b10      	cmp	r3, #16
 8003472:	d904      	bls.n	800347e <HAL_ADC_Init+0x1a6>
 8003474:	f240 1149 	movw	r1, #329	; 0x149
 8003478:	4832      	ldr	r0, [pc, #200]	; (8003544 <HAL_ADC_Init+0x26c>)
 800347a:	f7ff f85e 	bl	800253a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003484:	2b00      	cmp	r3, #0
 8003486:	d009      	beq.n	800349c <HAL_ADC_Init+0x1c4>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800348e:	2b01      	cmp	r3, #1
 8003490:	d004      	beq.n	800349c <HAL_ADC_Init+0x1c4>
 8003492:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8003496:	482b      	ldr	r0, [pc, #172]	; (8003544 <HAL_ADC_Init+0x26c>)
 8003498:	f7ff f84f 	bl	800253a <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d00c      	beq.n	80034be <HAL_ADC_Init+0x1e6>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d008      	beq.n	80034be <HAL_ADC_Init+0x1e6>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d004      	beq.n	80034be <HAL_ADC_Init+0x1e6>
 80034b4:	f240 114b 	movw	r1, #331	; 0x14b
 80034b8:	4822      	ldr	r0, [pc, #136]	; (8003544 <HAL_ADC_Init+0x26c>)
 80034ba:	f7ff f83e 	bl	800253a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d009      	beq.n	80034dc <HAL_ADC_Init+0x204>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d004      	beq.n	80034dc <HAL_ADC_Init+0x204>
 80034d2:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80034d6:	481b      	ldr	r0, [pc, #108]	; (8003544 <HAL_ADC_Init+0x26c>)
 80034d8:	f7ff f82f 	bl	800253a <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	4a19      	ldr	r2, [pc, #100]	; (8003548 <HAL_ADC_Init+0x270>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d017      	beq.n	8003516 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d013      	beq.n	8003516 <HAL_ADC_Init+0x23e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034f6:	d00e      	beq.n	8003516 <HAL_ADC_Init+0x23e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003500:	d009      	beq.n	8003516 <HAL_ADC_Init+0x23e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800350a:	d004      	beq.n	8003516 <HAL_ADC_Init+0x23e>
 800350c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8003510:	480c      	ldr	r0, [pc, #48]	; (8003544 <HAL_ADC_Init+0x26c>)
 8003512:	f7ff f812 	bl	800253a <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d131      	bne.n	8003582 <HAL_ADC_Init+0x2aa>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a0a      	ldr	r2, [pc, #40]	; (800354c <HAL_ADC_Init+0x274>)
 8003522:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <HAL_ADC_Init+0x278>)
 8003528:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a09      	ldr	r2, [pc, #36]	; (8003554 <HAL_ADC_Init+0x27c>)
 800352e:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a09      	ldr	r2, [pc, #36]	; (8003558 <HAL_ADC_Init+0x280>)
 8003534:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a08      	ldr	r2, [pc, #32]	; (800355c <HAL_ADC_Init+0x284>)
 800353a:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	e00f      	b.n	8003560 <HAL_ADC_Init+0x288>
 8003540:	40012000 	.word	0x40012000
 8003544:	0800ee54 	.word	0x0800ee54
 8003548:	0f000001 	.word	0x0f000001
 800354c:	08003a91 	.word	0x08003a91
 8003550:	08003aa5 	.word	0x08003aa5
 8003554:	08003ab9 	.word	0x08003ab9
 8003558:	08003acd 	.word	0x08003acd
 800355c:	080040ed 	.word	0x080040ed
 8003560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d102      	bne.n	800356c <HAL_ADC_Init+0x294>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a1b      	ldr	r2, [pc, #108]	; (80035d8 <HAL_ADC_Init+0x300>)
 800356a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f003 0310 	and.w	r3, r3, #16
 800358a:	2b00      	cmp	r3, #0
 800358c:	d118      	bne.n	80035c0 <HAL_ADC_Init+0x2e8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003596:	f023 0302 	bic.w	r3, r3, #2
 800359a:	f043 0202 	orr.w	r2, r3, #2
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fc12 	bl	8003dcc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f023 0303 	bic.w	r3, r3, #3
 80035b6:	f043 0201 	orr.w	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
 80035be:	e001      	b.n	80035c4 <HAL_ADC_Init+0x2ec>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	08001e49 	.word	0x08001e49

080035dc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	2300      	movs	r3, #0
 80035ea:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7e1b      	ldrb	r3, [r3, #24]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_ADC_IRQHandler+0x3a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	7e1b      	ldrb	r3, [r3, #24]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d004      	beq.n	8003616 <HAL_ADC_IRQHandler+0x3a>
 800360c:	f240 41b7 	movw	r1, #1207	; 0x4b7
 8003610:	4892      	ldr	r0, [pc, #584]	; (800385c <HAL_ADC_IRQHandler+0x280>)
 8003612:	f7fe ff92 	bl	800253a <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_ADC_IRQHandler+0x4a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	2b10      	cmp	r3, #16
 8003624:	d904      	bls.n	8003630 <HAL_ADC_IRQHandler+0x54>
 8003626:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
 800362a:	488c      	ldr	r0, [pc, #560]	; (800385c <HAL_ADC_IRQHandler+0x280>)
 800362c:	f7fe ff85 	bl	800253a <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d00c      	beq.n	8003652 <HAL_ADC_IRQHandler+0x76>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_ADC_IRQHandler+0x76>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d004      	beq.n	8003652 <HAL_ADC_IRQHandler+0x76>
 8003648:	f240 41b9 	movw	r1, #1209	; 0x4b9
 800364c:	4883      	ldr	r0, [pc, #524]	; (800385c <HAL_ADC_IRQHandler+0x280>)
 800364e:	f7fe ff74 	bl	800253a <assert_failed>
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d04a      	beq.n	80036fe <HAL_ADC_IRQHandler+0x122>
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d047      	beq.n	80036fe <HAL_ADC_IRQHandler+0x122>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b00      	cmp	r3, #0
 8003678:	d105      	bne.n	8003686 <HAL_ADC_IRQHandler+0xaa>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d12b      	bne.n	80036ec <HAL_ADC_IRQHandler+0x110>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003698:	2b00      	cmp	r3, #0
 800369a:	d127      	bne.n	80036ec <HAL_ADC_IRQHandler+0x110>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d006      	beq.n	80036b8 <HAL_ADC_IRQHandler+0xdc>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d119      	bne.n	80036ec <HAL_ADC_IRQHandler+0x110>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0220 	bic.w	r2, r2, #32
 80036c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d105      	bne.n	80036ec <HAL_ADC_IRQHandler+0x110>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	f043 0201 	orr.w	r2, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0212 	mvn.w	r2, #18
 80036fc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d058      	beq.n	80037c6 <HAL_ADC_IRQHandler+0x1ea>
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d055      	beq.n	80037c6 <HAL_ADC_IRQHandler+0x1ea>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f003 0310 	and.w	r3, r3, #16
 8003722:	2b00      	cmp	r3, #0
 8003724:	d105      	bne.n	8003732 <HAL_ADC_IRQHandler+0x156>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d139      	bne.n	80037b4 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003746:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800374a:	2b00      	cmp	r3, #0
 800374c:	d006      	beq.n	800375c <HAL_ADC_IRQHandler+0x180>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003758:	2b00      	cmp	r3, #0
 800375a:	d12b      	bne.n	80037b4 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003766:	2b00      	cmp	r3, #0
 8003768:	d124      	bne.n	80037b4 <HAL_ADC_IRQHandler+0x1d8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003774:	2b00      	cmp	r3, #0
 8003776:	d11d      	bne.n	80037b4 <HAL_ADC_IRQHandler+0x1d8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800377c:	2b00      	cmp	r3, #0
 800377e:	d119      	bne.n	80037b4 <HAL_ADC_IRQHandler+0x1d8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800378e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d105      	bne.n	80037b4 <HAL_ADC_IRQHandler+0x1d8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f043 0201 	orr.w	r2, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 020c 	mvn.w	r2, #12
 80037c4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d018      	beq.n	800380e <HAL_ADC_IRQHandler+0x232>
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d015      	beq.n	800380e <HAL_ADC_IRQHandler+0x232>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d10e      	bne.n	800380e <HAL_ADC_IRQHandler+0x232>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0201 	mvn.w	r2, #1
 800380c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800381c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d016      	beq.n	8003852 <HAL_ADC_IRQHandler+0x276>
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d013      	beq.n	8003852 <HAL_ADC_IRQHandler+0x276>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	f043 0202 	orr.w	r2, r3, #2
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f06f 0220 	mvn.w	r2, #32
 800383e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0220 	mvn.w	r2, #32
 8003850:	601a      	str	r2, [r3, #0]
  }
}
 8003852:	bf00      	nop
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	0800ee54 	.word	0x0800ee54

08003860 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	7e1b      	ldrb	r3, [r3, #24]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_ADC_Start_DMA+0x2a>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	7e1b      	ldrb	r3, [r3, #24]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d004      	beq.n	800388a <HAL_ADC_Start_DMA+0x2a>
 8003880:	f240 515a 	movw	r1, #1370	; 0x55a
 8003884:	487a      	ldr	r0, [pc, #488]	; (8003a70 <HAL_ADC_Start_DMA+0x210>)
 8003886:	f7fe fe58 	bl	800253a <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	2b00      	cmp	r3, #0
 8003890:	d013      	beq.n	80038ba <HAL_ADC_Start_DMA+0x5a>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800389a:	d00e      	beq.n	80038ba <HAL_ADC_Start_DMA+0x5a>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038a4:	d009      	beq.n	80038ba <HAL_ADC_Start_DMA+0x5a>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038ae:	d004      	beq.n	80038ba <HAL_ADC_Start_DMA+0x5a>
 80038b0:	f240 515b 	movw	r1, #1371	; 0x55b
 80038b4:	486e      	ldr	r0, [pc, #440]	; (8003a70 <HAL_ADC_Start_DMA+0x210>)
 80038b6:	f7fe fe40 	bl	800253a <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_ADC_Start_DMA+0x68>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e0ce      	b.n	8003a66 <HAL_ADC_Start_DMA+0x206>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d018      	beq.n	8003910 <HAL_ADC_Start_DMA+0xb0>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0201 	orr.w	r2, r2, #1
 80038ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038ee:	4b61      	ldr	r3, [pc, #388]	; (8003a74 <HAL_ADC_Start_DMA+0x214>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a61      	ldr	r2, [pc, #388]	; (8003a78 <HAL_ADC_Start_DMA+0x218>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	0c9a      	lsrs	r2, r3, #18
 80038fa:	4613      	mov	r3, r2
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	4413      	add	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003902:	e002      	b.n	800390a <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	3b01      	subs	r3, #1
 8003908:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f9      	bne.n	8003904 <HAL_ADC_Start_DMA+0xa4>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800391e:	d107      	bne.n	8003930 <HAL_ADC_Start_DMA+0xd0>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800392e:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b01      	cmp	r3, #1
 800393c:	f040 8086 	bne.w	8003a4c <HAL_ADC_Start_DMA+0x1ec>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <HAL_ADC_Start_DMA+0x112>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800396a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800397a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800397e:	d106      	bne.n	800398e <HAL_ADC_Start_DMA+0x12e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003984:	f023 0206 	bic.w	r2, r3, #6
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	645a      	str	r2, [r3, #68]	; 0x44
 800398c:	e002      	b.n	8003994 <HAL_ADC_Start_DMA+0x134>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800399c:	4b37      	ldr	r3, [pc, #220]	; (8003a7c <HAL_ADC_Start_DMA+0x21c>)
 800399e:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	4a36      	ldr	r2, [pc, #216]	; (8003a80 <HAL_ADC_Start_DMA+0x220>)
 80039a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ac:	4a35      	ldr	r2, [pc, #212]	; (8003a84 <HAL_ADC_Start_DMA+0x224>)
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	4a34      	ldr	r2, [pc, #208]	; (8003a88 <HAL_ADC_Start_DMA+0x228>)
 80039b6:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80039c0:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80039d0:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039e0:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	334c      	adds	r3, #76	; 0x4c
 80039ec:	4619      	mov	r1, r3
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f000 fedb 	bl	80047ac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10f      	bne.n	8003a22 <HAL_ADC_Start_DMA+0x1c2>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d129      	bne.n	8003a64 <HAL_ADC_Start_DMA+0x204>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a1e:	609a      	str	r2, [r3, #8]
 8003a20:	e020      	b.n	8003a64 <HAL_ADC_Start_DMA+0x204>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a19      	ldr	r2, [pc, #100]	; (8003a8c <HAL_ADC_Start_DMA+0x22c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d11b      	bne.n	8003a64 <HAL_ADC_Start_DMA+0x204>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d114      	bne.n	8003a64 <HAL_ADC_Start_DMA+0x204>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a48:	609a      	str	r2, [r3, #8]
 8003a4a:	e00b      	b.n	8003a64 <HAL_ADC_Start_DMA+0x204>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	f043 0210 	orr.w	r2, r3, #16
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5c:	f043 0201 	orr.w	r2, r3, #1
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	0800ee54 	.word	0x0800ee54
 8003a74:	20000004 	.word	0x20000004
 8003a78:	431bde83 	.word	0x431bde83
 8003a7c:	40012300 	.word	0x40012300
 8003a80:	08003fe1 	.word	0x08003fe1
 8003a84:	0800409f 	.word	0x0800409f
 8003a88:	080040bd 	.word	0x080040bd
 8003a8c:	40012000 	.word	0x40012000

08003a90 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b12      	cmp	r3, #18
 8003af4:	d909      	bls.n	8003b0a <HAL_ADC_ConfigChannel+0x2a>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a72      	ldr	r2, [pc, #456]	; (8003cc4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d004      	beq.n	8003b0a <HAL_ADC_ConfigChannel+0x2a>
 8003b00:	f240 618b 	movw	r1, #1675	; 0x68b
 8003b04:	4870      	ldr	r0, [pc, #448]	; (8003cc8 <HAL_ADC_ConfigChannel+0x1e8>)
 8003b06:	f7fe fd18 	bl	800253a <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_ADC_ConfigChannel+0x3a>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b10      	cmp	r3, #16
 8003b18:	d904      	bls.n	8003b24 <HAL_ADC_ConfigChannel+0x44>
 8003b1a:	f240 618c 	movw	r1, #1676	; 0x68c
 8003b1e:	486a      	ldr	r0, [pc, #424]	; (8003cc8 <HAL_ADC_ConfigChannel+0x1e8>)
 8003b20:	f7fe fd0b 	bl	800253a <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d020      	beq.n	8003b6e <HAL_ADC_ConfigChannel+0x8e>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d01c      	beq.n	8003b6e <HAL_ADC_ConfigChannel+0x8e>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d018      	beq.n	8003b6e <HAL_ADC_ConfigChannel+0x8e>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d014      	beq.n	8003b6e <HAL_ADC_ConfigChannel+0x8e>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d010      	beq.n	8003b6e <HAL_ADC_ConfigChannel+0x8e>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b05      	cmp	r3, #5
 8003b52:	d00c      	beq.n	8003b6e <HAL_ADC_ConfigChannel+0x8e>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	2b06      	cmp	r3, #6
 8003b5a:	d008      	beq.n	8003b6e <HAL_ADC_ConfigChannel+0x8e>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b07      	cmp	r3, #7
 8003b62:	d004      	beq.n	8003b6e <HAL_ADC_ConfigChannel+0x8e>
 8003b64:	f240 618d 	movw	r1, #1677	; 0x68d
 8003b68:	4857      	ldr	r0, [pc, #348]	; (8003cc8 <HAL_ADC_ConfigChannel+0x1e8>)
 8003b6a:	f7fe fce6 	bl	800253a <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x9c>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e118      	b.n	8003dae <HAL_ADC_ConfigChannel+0x2ce>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b09      	cmp	r3, #9
 8003b8a:	d925      	bls.n	8003bd8 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68d9      	ldr	r1, [r3, #12]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	4413      	add	r3, r2
 8003ba0:	3b1e      	subs	r3, #30
 8003ba2:	2207      	movs	r2, #7
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43da      	mvns	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	400a      	ands	r2, r1
 8003bb0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68d9      	ldr	r1, [r3, #12]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	4403      	add	r3, r0
 8003bca:	3b1e      	subs	r3, #30
 8003bcc:	409a      	lsls	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	60da      	str	r2, [r3, #12]
 8003bd6:	e022      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6919      	ldr	r1, [r3, #16]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	461a      	mov	r2, r3
 8003be6:	4613      	mov	r3, r2
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	4413      	add	r3, r2
 8003bec:	2207      	movs	r2, #7
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43da      	mvns	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6919      	ldr	r1, [r3, #16]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	4603      	mov	r3, r0
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	4403      	add	r3, r0
 8003c14:	409a      	lsls	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b06      	cmp	r3, #6
 8003c24:	d824      	bhi.n	8003c70 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	3b05      	subs	r3, #5
 8003c38:	221f      	movs	r2, #31
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43da      	mvns	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	400a      	ands	r2, r1
 8003c46:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	4618      	mov	r0, r3
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	3b05      	subs	r3, #5
 8003c62:	fa00 f203 	lsl.w	r2, r0, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8003c6e:	e051      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b0c      	cmp	r3, #12
 8003c76:	d829      	bhi.n	8003ccc <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	3b23      	subs	r3, #35	; 0x23
 8003c8a:	221f      	movs	r2, #31
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	43da      	mvns	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	400a      	ands	r2, r1
 8003c98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	3b23      	subs	r3, #35	; 0x23
 8003cb4:	fa00 f203 	lsl.w	r2, r0, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	631a      	str	r2, [r3, #48]	; 0x30
 8003cc0:	e028      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x234>
 8003cc2:	bf00      	nop
 8003cc4:	10000012 	.word	0x10000012
 8003cc8:	0800ee54 	.word	0x0800ee54
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	3b41      	subs	r3, #65	; 0x41
 8003cde:	221f      	movs	r2, #31
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43da      	mvns	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	400a      	ands	r2, r1
 8003cec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	3b41      	subs	r3, #65	; 0x41
 8003d08:	fa00 f203 	lsl.w	r2, r0, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d14:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <HAL_ADC_ConfigChannel+0x2d8>)
 8003d16:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a27      	ldr	r2, [pc, #156]	; (8003dbc <HAL_ADC_ConfigChannel+0x2dc>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d10f      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x262>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b12      	cmp	r3, #18
 8003d28:	d10b      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1d      	ldr	r2, [pc, #116]	; (8003dbc <HAL_ADC_ConfigChannel+0x2dc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d12b      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x2c4>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1b      	ldr	r2, [pc, #108]	; (8003dc0 <HAL_ADC_ConfigChannel+0x2e0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d003      	beq.n	8003d5e <HAL_ADC_ConfigChannel+0x27e>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b11      	cmp	r3, #17
 8003d5c:	d122      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a11      	ldr	r2, [pc, #68]	; (8003dc0 <HAL_ADC_ConfigChannel+0x2e0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d111      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d80:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <HAL_ADC_ConfigChannel+0x2e4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a10      	ldr	r2, [pc, #64]	; (8003dc8 <HAL_ADC_ConfigChannel+0x2e8>)
 8003d86:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8a:	0c9a      	lsrs	r2, r3, #18
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d96:	e002      	b.n	8003d9e <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f9      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40012300 	.word	0x40012300
 8003dbc:	40012000 	.word	0x40012000
 8003dc0:	10000012 	.word	0x10000012
 8003dc4:	20000004 	.word	0x20000004
 8003dc8:	431bde83 	.word	0x431bde83

08003dcc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dd4:	4b7f      	ldr	r3, [pc, #508]	; (8003fd4 <ADC_Init+0x208>)
 8003dd6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	431a      	orrs	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6859      	ldr	r1, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	021a      	lsls	r2, r3, #8
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6899      	ldr	r1, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	4a5e      	ldr	r2, [pc, #376]	; (8003fd8 <ADC_Init+0x20c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d022      	beq.n	8003eaa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6899      	ldr	r1, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6899      	ldr	r1, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	609a      	str	r2, [r3, #8]
 8003ea8:	e00f      	b.n	8003eca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003eb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ec8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0202 	bic.w	r2, r2, #2
 8003ed8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6899      	ldr	r1, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	7e1b      	ldrb	r3, [r3, #24]
 8003ee4:	005a      	lsls	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d028      	beq.n	8003f4a <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <ADC_Init+0x13c>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d904      	bls.n	8003f12 <ADC_Init+0x146>
 8003f08:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8003f0c:	4833      	ldr	r0, [pc, #204]	; (8003fdc <ADC_Init+0x210>)
 8003f0e:	f7fe fb14 	bl	800253a <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f20:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f30:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6859      	ldr	r1, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	035a      	lsls	r2, r3, #13
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	605a      	str	r2, [r3, #4]
 8003f48:	e007      	b.n	8003f5a <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f58:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	051a      	lsls	r2, r3, #20
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6899      	ldr	r1, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f9c:	025a      	lsls	r2, r3, #9
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6899      	ldr	r1, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	029a      	lsls	r2, r3, #10
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	609a      	str	r2, [r3, #8]
}
 8003fca:	bf00      	nop
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40012300 	.word	0x40012300
 8003fd8:	0f000001 	.word	0x0f000001
 8003fdc:	0800ee54 	.word	0x0800ee54

08003fe0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d13d      	bne.n	8004076 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d12b      	bne.n	800406c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004018:	2b00      	cmp	r3, #0
 800401a:	d127      	bne.n	800406c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004026:	2b00      	cmp	r3, #0
 8004028:	d006      	beq.n	8004038 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004034:	2b00      	cmp	r3, #0
 8004036:	d119      	bne.n	800406c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0220 	bic.w	r2, r2, #32
 8004046:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d105      	bne.n	800406c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	f043 0201 	orr.w	r2, r3, #1
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004074:	e00f      	b.n	8004096 <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	2b00      	cmp	r3, #0
 8004080:	d004      	beq.n	800408c <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	4798      	blx	r3
}
 800408a:	e004      	b.n	8004096 <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
}
 8004096:	bf00      	nop
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2240      	movs	r2, #64	; 0x40
 80040ce:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d4:	f043 0204 	orr.w	r2, r3, #4
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040e4:	bf00      	nop
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004110:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <__NVIC_SetPriorityGrouping+0x44>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800411c:	4013      	ands	r3, r2
 800411e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800412c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004132:	4a04      	ldr	r2, [pc, #16]	; (8004144 <__NVIC_SetPriorityGrouping+0x44>)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	60d3      	str	r3, [r2, #12]
}
 8004138:	bf00      	nop
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	e000ed00 	.word	0xe000ed00

08004148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <__NVIC_GetPriorityGrouping+0x18>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	0a1b      	lsrs	r3, r3, #8
 8004152:	f003 0307 	and.w	r3, r3, #7
}
 8004156:	4618      	mov	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	e000ed00 	.word	0xe000ed00

08004164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800416e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004172:	2b00      	cmp	r3, #0
 8004174:	db0b      	blt.n	800418e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	f003 021f 	and.w	r2, r3, #31
 800417c:	4907      	ldr	r1, [pc, #28]	; (800419c <__NVIC_EnableIRQ+0x38>)
 800417e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	2001      	movs	r0, #1
 8004186:	fa00 f202 	lsl.w	r2, r0, r2
 800418a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	e000e100 	.word	0xe000e100

080041a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	6039      	str	r1, [r7, #0]
 80041aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	db0a      	blt.n	80041ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	490c      	ldr	r1, [pc, #48]	; (80041ec <__NVIC_SetPriority+0x4c>)
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	0112      	lsls	r2, r2, #4
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	440b      	add	r3, r1
 80041c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041c8:	e00a      	b.n	80041e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	4908      	ldr	r1, [pc, #32]	; (80041f0 <__NVIC_SetPriority+0x50>)
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	3b04      	subs	r3, #4
 80041d8:	0112      	lsls	r2, r2, #4
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	440b      	add	r3, r1
 80041de:	761a      	strb	r2, [r3, #24]
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	e000e100 	.word	0xe000e100
 80041f0:	e000ed00 	.word	0xe000ed00

080041f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b089      	sub	sp, #36	; 0x24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f1c3 0307 	rsb	r3, r3, #7
 800420e:	2b04      	cmp	r3, #4
 8004210:	bf28      	it	cs
 8004212:	2304      	movcs	r3, #4
 8004214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	3304      	adds	r3, #4
 800421a:	2b06      	cmp	r3, #6
 800421c:	d902      	bls.n	8004224 <NVIC_EncodePriority+0x30>
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	3b03      	subs	r3, #3
 8004222:	e000      	b.n	8004226 <NVIC_EncodePriority+0x32>
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004228:	f04f 32ff 	mov.w	r2, #4294967295
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43da      	mvns	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	401a      	ands	r2, r3
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800423c:	f04f 31ff 	mov.w	r1, #4294967295
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	fa01 f303 	lsl.w	r3, r1, r3
 8004246:	43d9      	mvns	r1, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800424c:	4313      	orrs	r3, r2
         );
}
 800424e:	4618      	mov	r0, r3
 8004250:	3724      	adds	r7, #36	; 0x24
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
	...

0800425c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b07      	cmp	r3, #7
 8004268:	d00f      	beq.n	800428a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b06      	cmp	r3, #6
 800426e:	d00c      	beq.n	800428a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b05      	cmp	r3, #5
 8004274:	d009      	beq.n	800428a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b04      	cmp	r3, #4
 800427a:	d006      	beq.n	800428a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b03      	cmp	r3, #3
 8004280:	d003      	beq.n	800428a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004282:	2190      	movs	r1, #144	; 0x90
 8004284:	4804      	ldr	r0, [pc, #16]	; (8004298 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8004286:	f7fe f958 	bl	800253a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7ff ff38 	bl	8004100 <__NVIC_SetPriorityGrouping>
}
 8004290:	bf00      	nop
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	0800eec8 	.word	0x0800eec8

0800429c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b0f      	cmp	r3, #15
 80042b2:	d903      	bls.n	80042bc <HAL_NVIC_SetPriority+0x20>
 80042b4:	21a8      	movs	r1, #168	; 0xa8
 80042b6:	480e      	ldr	r0, [pc, #56]	; (80042f0 <HAL_NVIC_SetPriority+0x54>)
 80042b8:	f7fe f93f 	bl	800253a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b0f      	cmp	r3, #15
 80042c0:	d903      	bls.n	80042ca <HAL_NVIC_SetPriority+0x2e>
 80042c2:	21a9      	movs	r1, #169	; 0xa9
 80042c4:	480a      	ldr	r0, [pc, #40]	; (80042f0 <HAL_NVIC_SetPriority+0x54>)
 80042c6:	f7fe f938 	bl	800253a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042ca:	f7ff ff3d 	bl	8004148 <__NVIC_GetPriorityGrouping>
 80042ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	68b9      	ldr	r1, [r7, #8]
 80042d4:	6978      	ldr	r0, [r7, #20]
 80042d6:	f7ff ff8d 	bl	80041f4 <NVIC_EncodePriority>
 80042da:	4602      	mov	r2, r0
 80042dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042e0:	4611      	mov	r1, r2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff ff5c 	bl	80041a0 <__NVIC_SetPriority>
}
 80042e8:	bf00      	nop
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	0800eec8 	.word	0x0800eec8

080042f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80042fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004302:	2b00      	cmp	r3, #0
 8004304:	da03      	bge.n	800430e <HAL_NVIC_EnableIRQ+0x1a>
 8004306:	21bc      	movs	r1, #188	; 0xbc
 8004308:	4805      	ldr	r0, [pc, #20]	; (8004320 <HAL_NVIC_EnableIRQ+0x2c>)
 800430a:	f7fe f916 	bl	800253a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800430e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff ff26 	bl	8004164 <__NVIC_EnableIRQ>
}
 8004318:	bf00      	nop
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	0800eec8 	.word	0x0800eec8

08004324 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e017      	b.n	8004366 <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a0d      	ldr	r2, [pc, #52]	; (8004370 <HAL_CRC_Init+0x4c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <HAL_CRC_Init+0x24>
 8004340:	2168      	movs	r1, #104	; 0x68
 8004342:	480c      	ldr	r0, [pc, #48]	; (8004374 <HAL_CRC_Init+0x50>)
 8004344:	f7fe f8f9 	bl	800253a <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	795b      	ldrb	r3, [r3, #5]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d105      	bne.n	800435e <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7fd fe41 	bl	8001fe0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40023000 	.word	0x40023000
 8004374:	0800ef40 	.word	0x0800ef40

08004378 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004384:	f7fe ff9c 	bl	80032c0 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e203      	b.n	800479c <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a8b      	ldr	r2, [pc, #556]	; (80045c8 <HAL_DMA_Init+0x250>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d04e      	beq.n	800443c <HAL_DMA_Init+0xc4>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a8a      	ldr	r2, [pc, #552]	; (80045cc <HAL_DMA_Init+0x254>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d049      	beq.n	800443c <HAL_DMA_Init+0xc4>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a88      	ldr	r2, [pc, #544]	; (80045d0 <HAL_DMA_Init+0x258>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d044      	beq.n	800443c <HAL_DMA_Init+0xc4>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a87      	ldr	r2, [pc, #540]	; (80045d4 <HAL_DMA_Init+0x25c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d03f      	beq.n	800443c <HAL_DMA_Init+0xc4>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a85      	ldr	r2, [pc, #532]	; (80045d8 <HAL_DMA_Init+0x260>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d03a      	beq.n	800443c <HAL_DMA_Init+0xc4>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a84      	ldr	r2, [pc, #528]	; (80045dc <HAL_DMA_Init+0x264>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d035      	beq.n	800443c <HAL_DMA_Init+0xc4>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a82      	ldr	r2, [pc, #520]	; (80045e0 <HAL_DMA_Init+0x268>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d030      	beq.n	800443c <HAL_DMA_Init+0xc4>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a81      	ldr	r2, [pc, #516]	; (80045e4 <HAL_DMA_Init+0x26c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d02b      	beq.n	800443c <HAL_DMA_Init+0xc4>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a7f      	ldr	r2, [pc, #508]	; (80045e8 <HAL_DMA_Init+0x270>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d026      	beq.n	800443c <HAL_DMA_Init+0xc4>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a7e      	ldr	r2, [pc, #504]	; (80045ec <HAL_DMA_Init+0x274>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d021      	beq.n	800443c <HAL_DMA_Init+0xc4>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a7c      	ldr	r2, [pc, #496]	; (80045f0 <HAL_DMA_Init+0x278>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d01c      	beq.n	800443c <HAL_DMA_Init+0xc4>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a7b      	ldr	r2, [pc, #492]	; (80045f4 <HAL_DMA_Init+0x27c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d017      	beq.n	800443c <HAL_DMA_Init+0xc4>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a79      	ldr	r2, [pc, #484]	; (80045f8 <HAL_DMA_Init+0x280>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d012      	beq.n	800443c <HAL_DMA_Init+0xc4>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a78      	ldr	r2, [pc, #480]	; (80045fc <HAL_DMA_Init+0x284>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00d      	beq.n	800443c <HAL_DMA_Init+0xc4>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a76      	ldr	r2, [pc, #472]	; (8004600 <HAL_DMA_Init+0x288>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d008      	beq.n	800443c <HAL_DMA_Init+0xc4>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a75      	ldr	r2, [pc, #468]	; (8004604 <HAL_DMA_Init+0x28c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d003      	beq.n	800443c <HAL_DMA_Init+0xc4>
 8004434:	21b7      	movs	r1, #183	; 0xb7
 8004436:	4874      	ldr	r0, [pc, #464]	; (8004608 <HAL_DMA_Init+0x290>)
 8004438:	f7fe f87f 	bl	800253a <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d026      	beq.n	8004492 <HAL_DMA_Init+0x11a>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800444c:	d021      	beq.n	8004492 <HAL_DMA_Init+0x11a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004456:	d01c      	beq.n	8004492 <HAL_DMA_Init+0x11a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004460:	d017      	beq.n	8004492 <HAL_DMA_Init+0x11a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800446a:	d012      	beq.n	8004492 <HAL_DMA_Init+0x11a>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8004474:	d00d      	beq.n	8004492 <HAL_DMA_Init+0x11a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800447e:	d008      	beq.n	8004492 <HAL_DMA_Init+0x11a>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004488:	d003      	beq.n	8004492 <HAL_DMA_Init+0x11a>
 800448a:	21b8      	movs	r1, #184	; 0xb8
 800448c:	485e      	ldr	r0, [pc, #376]	; (8004608 <HAL_DMA_Init+0x290>)
 800448e:	f7fe f854 	bl	800253a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00b      	beq.n	80044b2 <HAL_DMA_Init+0x13a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2b40      	cmp	r3, #64	; 0x40
 80044a0:	d007      	beq.n	80044b2 <HAL_DMA_Init+0x13a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2b80      	cmp	r3, #128	; 0x80
 80044a8:	d003      	beq.n	80044b2 <HAL_DMA_Init+0x13a>
 80044aa:	21b9      	movs	r1, #185	; 0xb9
 80044ac:	4856      	ldr	r0, [pc, #344]	; (8004608 <HAL_DMA_Init+0x290>)
 80044ae:	f7fe f844 	bl	800253a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ba:	d007      	beq.n	80044cc <HAL_DMA_Init+0x154>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_DMA_Init+0x154>
 80044c4:	21ba      	movs	r1, #186	; 0xba
 80044c6:	4850      	ldr	r0, [pc, #320]	; (8004608 <HAL_DMA_Init+0x290>)
 80044c8:	f7fe f837 	bl	800253a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d4:	d007      	beq.n	80044e6 <HAL_DMA_Init+0x16e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_DMA_Init+0x16e>
 80044de:	21bb      	movs	r1, #187	; 0xbb
 80044e0:	4849      	ldr	r0, [pc, #292]	; (8004608 <HAL_DMA_Init+0x290>)
 80044e2:	f7fe f82a 	bl	800253a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00d      	beq.n	800450a <HAL_DMA_Init+0x192>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044f6:	d008      	beq.n	800450a <HAL_DMA_Init+0x192>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004500:	d003      	beq.n	800450a <HAL_DMA_Init+0x192>
 8004502:	21bc      	movs	r1, #188	; 0xbc
 8004504:	4840      	ldr	r0, [pc, #256]	; (8004608 <HAL_DMA_Init+0x290>)
 8004506:	f7fe f818 	bl	800253a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00d      	beq.n	800452e <HAL_DMA_Init+0x1b6>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800451a:	d008      	beq.n	800452e <HAL_DMA_Init+0x1b6>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004524:	d003      	beq.n	800452e <HAL_DMA_Init+0x1b6>
 8004526:	21bd      	movs	r1, #189	; 0xbd
 8004528:	4837      	ldr	r0, [pc, #220]	; (8004608 <HAL_DMA_Init+0x290>)
 800452a:	f7fe f806 	bl	800253a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00c      	beq.n	8004550 <HAL_DMA_Init+0x1d8>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800453e:	d007      	beq.n	8004550 <HAL_DMA_Init+0x1d8>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	2b20      	cmp	r3, #32
 8004546:	d003      	beq.n	8004550 <HAL_DMA_Init+0x1d8>
 8004548:	21be      	movs	r1, #190	; 0xbe
 800454a:	482f      	ldr	r0, [pc, #188]	; (8004608 <HAL_DMA_Init+0x290>)
 800454c:	f7fd fff5 	bl	800253a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d012      	beq.n	800457e <HAL_DMA_Init+0x206>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004560:	d00d      	beq.n	800457e <HAL_DMA_Init+0x206>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800456a:	d008      	beq.n	800457e <HAL_DMA_Init+0x206>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004574:	d003      	beq.n	800457e <HAL_DMA_Init+0x206>
 8004576:	21bf      	movs	r1, #191	; 0xbf
 8004578:	4823      	ldr	r0, [pc, #140]	; (8004608 <HAL_DMA_Init+0x290>)
 800457a:	f7fd ffde 	bl	800253a <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	2b00      	cmp	r3, #0
 8004584:	d007      	beq.n	8004596 <HAL_DMA_Init+0x21e>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	2b04      	cmp	r3, #4
 800458c:	d003      	beq.n	8004596 <HAL_DMA_Init+0x21e>
 800458e:	21c0      	movs	r1, #192	; 0xc0
 8004590:	481d      	ldr	r0, [pc, #116]	; (8004608 <HAL_DMA_Init+0x290>)
 8004592:	f7fd ffd2 	bl	800253a <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	2b00      	cmp	r3, #0
 800459c:	d064      	beq.n	8004668 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d032      	beq.n	800460c <HAL_DMA_Init+0x294>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d02e      	beq.n	800460c <HAL_DMA_Init+0x294>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d02a      	beq.n	800460c <HAL_DMA_Init+0x294>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d026      	beq.n	800460c <HAL_DMA_Init+0x294>
 80045be:	21c5      	movs	r1, #197	; 0xc5
 80045c0:	4811      	ldr	r0, [pc, #68]	; (8004608 <HAL_DMA_Init+0x290>)
 80045c2:	f7fd ffba 	bl	800253a <assert_failed>
 80045c6:	e021      	b.n	800460c <HAL_DMA_Init+0x294>
 80045c8:	40026010 	.word	0x40026010
 80045cc:	40026028 	.word	0x40026028
 80045d0:	40026040 	.word	0x40026040
 80045d4:	40026058 	.word	0x40026058
 80045d8:	40026070 	.word	0x40026070
 80045dc:	40026088 	.word	0x40026088
 80045e0:	400260a0 	.word	0x400260a0
 80045e4:	400260b8 	.word	0x400260b8
 80045e8:	40026410 	.word	0x40026410
 80045ec:	40026428 	.word	0x40026428
 80045f0:	40026440 	.word	0x40026440
 80045f4:	40026458 	.word	0x40026458
 80045f8:	40026470 	.word	0x40026470
 80045fc:	40026488 	.word	0x40026488
 8004600:	400264a0 	.word	0x400264a0
 8004604:	400264b8 	.word	0x400264b8
 8004608:	0800efb4 	.word	0x0800efb4
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	2b00      	cmp	r3, #0
 8004612:	d012      	beq.n	800463a <HAL_DMA_Init+0x2c2>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800461c:	d00d      	beq.n	800463a <HAL_DMA_Init+0x2c2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004622:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004626:	d008      	beq.n	800463a <HAL_DMA_Init+0x2c2>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004630:	d003      	beq.n	800463a <HAL_DMA_Init+0x2c2>
 8004632:	21c6      	movs	r1, #198	; 0xc6
 8004634:	485b      	ldr	r0, [pc, #364]	; (80047a4 <HAL_DMA_Init+0x42c>)
 8004636:	f7fd ff80 	bl	800253a <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	2b00      	cmp	r3, #0
 8004640:	d012      	beq.n	8004668 <HAL_DMA_Init+0x2f0>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800464a:	d00d      	beq.n	8004668 <HAL_DMA_Init+0x2f0>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004650:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004654:	d008      	beq.n	8004668 <HAL_DMA_Init+0x2f0>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800465e:	d003      	beq.n	8004668 <HAL_DMA_Init+0x2f0>
 8004660:	21c7      	movs	r1, #199	; 0xc7
 8004662:	4850      	ldr	r0, [pc, #320]	; (80047a4 <HAL_DMA_Init+0x42c>)
 8004664:	f7fd ff69 	bl	800253a <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0201 	bic.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004688:	e00f      	b.n	80046aa <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800468a:	f7fe fe19 	bl	80032c0 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b05      	cmp	r3, #5
 8004696:	d908      	bls.n	80046aa <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2203      	movs	r2, #3
 80046a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e078      	b.n	800479c <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e8      	bne.n	800468a <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	4b39      	ldr	r3, [pc, #228]	; (80047a8 <HAL_DMA_Init+0x430>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	2b04      	cmp	r3, #4
 8004702:	d107      	bne.n	8004714 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	4313      	orrs	r3, r2
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f023 0307 	bic.w	r3, r3, #7
 800472a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	2b04      	cmp	r3, #4
 800473c:	d117      	bne.n	800476e <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00e      	beq.n	800476e <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 fb1f 	bl	8004d94 <DMA_CheckFifoParam>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2240      	movs	r2, #64	; 0x40
 8004760:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800476a:	2301      	movs	r3, #1
 800476c:	e016      	b.n	800479c <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fad6 	bl	8004d28 <DMA_CalcBaseAndBitshift>
 800477c:	4603      	mov	r3, r0
 800477e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004784:	223f      	movs	r2, #63	; 0x3f
 8004786:	409a      	lsls	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	0800efb4 	.word	0x0800efb4
 80047a8:	f010803f 	.word	0xf010803f

080047ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_DMA_Start_IT+0x26>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d0:	d304      	bcc.n	80047dc <HAL_DMA_Start_IT+0x30>
 80047d2:	f240 11cb 	movw	r1, #459	; 0x1cb
 80047d6:	4827      	ldr	r0, [pc, #156]	; (8004874 <HAL_DMA_Start_IT+0xc8>)
 80047d8:	f7fd feaf 	bl	800253a <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_DMA_Start_IT+0x3e>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e040      	b.n	800486c <HAL_DMA_Start_IT+0xc0>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d12f      	bne.n	800485e <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2202      	movs	r2, #2
 8004802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 fa5a 	bl	8004ccc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481c:	223f      	movs	r2, #63	; 0x3f
 800481e:	409a      	lsls	r2, r3
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0216 	orr.w	r2, r2, #22
 8004832:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	d007      	beq.n	800484c <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0208 	orr.w	r2, r2, #8
 800484a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	e005      	b.n	800486a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004866:	2302      	movs	r3, #2
 8004868:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800486a:	7dfb      	ldrb	r3, [r7, #23]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	0800efb4 	.word	0x0800efb4

08004878 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004884:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004886:	f7fe fd1b 	bl	80032c0 <HAL_GetTick>
 800488a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d008      	beq.n	80048aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2280      	movs	r2, #128	; 0x80
 800489c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e052      	b.n	8004950 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0216 	bic.w	r2, r2, #22
 80048b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695a      	ldr	r2, [r3, #20]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d103      	bne.n	80048da <HAL_DMA_Abort+0x62>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d007      	beq.n	80048ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0208 	bic.w	r2, r2, #8
 80048e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0201 	bic.w	r2, r2, #1
 80048f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048fa:	e013      	b.n	8004924 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048fc:	f7fe fce0 	bl	80032c0 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b05      	cmp	r3, #5
 8004908:	d90c      	bls.n	8004924 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2203      	movs	r2, #3
 8004914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e015      	b.n	8004950 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e4      	bne.n	80048fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004936:	223f      	movs	r2, #63	; 0x3f
 8004938:	409a      	lsls	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d004      	beq.n	8004976 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2280      	movs	r2, #128	; 0x80
 8004970:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e00c      	b.n	8004990 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2205      	movs	r2, #5
 800497a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0201 	bic.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80049a8:	4b8e      	ldr	r3, [pc, #568]	; (8004be4 <HAL_DMA_IRQHandler+0x248>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a8e      	ldr	r2, [pc, #568]	; (8004be8 <HAL_DMA_IRQHandler+0x24c>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	0a9b      	lsrs	r3, r3, #10
 80049b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c6:	2208      	movs	r2, #8
 80049c8:	409a      	lsls	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4013      	ands	r3, r2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d01a      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d013      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0204 	bic.w	r2, r2, #4
 80049ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f4:	2208      	movs	r2, #8
 80049f6:	409a      	lsls	r2, r3
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a00:	f043 0201 	orr.w	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	409a      	lsls	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4013      	ands	r3, r2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d012      	beq.n	8004a3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00b      	beq.n	8004a3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	409a      	lsls	r2, r3
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a36:	f043 0202 	orr.w	r2, r3, #2
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a42:	2204      	movs	r2, #4
 8004a44:	409a      	lsls	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d012      	beq.n	8004a74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00b      	beq.n	8004a74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a60:	2204      	movs	r2, #4
 8004a62:	409a      	lsls	r2, r3
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6c:	f043 0204 	orr.w	r2, r3, #4
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a78:	2210      	movs	r2, #16
 8004a7a:	409a      	lsls	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d043      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d03c      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a96:	2210      	movs	r2, #16
 8004a98:	409a      	lsls	r2, r3
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d018      	beq.n	8004ade <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d108      	bne.n	8004acc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d024      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	4798      	blx	r3
 8004aca:	e01f      	b.n	8004b0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d01b      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	4798      	blx	r3
 8004adc:	e016      	b.n	8004b0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d107      	bne.n	8004afc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0208 	bic.w	r2, r2, #8
 8004afa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b10:	2220      	movs	r2, #32
 8004b12:	409a      	lsls	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 808f 	beq.w	8004c3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8087 	beq.w	8004c3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b32:	2220      	movs	r2, #32
 8004b34:	409a      	lsls	r2, r3
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b05      	cmp	r3, #5
 8004b44:	d136      	bne.n	8004bb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0216 	bic.w	r2, r2, #22
 8004b54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695a      	ldr	r2, [r3, #20]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d103      	bne.n	8004b76 <HAL_DMA_IRQHandler+0x1da>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d007      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0208 	bic.w	r2, r2, #8
 8004b84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8a:	223f      	movs	r2, #63	; 0x3f
 8004b8c:	409a      	lsls	r2, r3
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d07e      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	4798      	blx	r3
        }
        return;
 8004bb2:	e079      	b.n	8004ca8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d01d      	beq.n	8004bfe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10d      	bne.n	8004bec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d031      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	4798      	blx	r3
 8004be0:	e02c      	b.n	8004c3c <HAL_DMA_IRQHandler+0x2a0>
 8004be2:	bf00      	nop
 8004be4:	20000004 	.word	0x20000004
 8004be8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d023      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	4798      	blx	r3
 8004bfc:	e01e      	b.n	8004c3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10f      	bne.n	8004c2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0210 	bic.w	r2, r2, #16
 8004c1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d032      	beq.n	8004caa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d022      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2205      	movs	r2, #5
 8004c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0201 	bic.w	r2, r2, #1
 8004c66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	60bb      	str	r3, [r7, #8]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d307      	bcc.n	8004c84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1f2      	bne.n	8004c68 <HAL_DMA_IRQHandler+0x2cc>
 8004c82:	e000      	b.n	8004c86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d005      	beq.n	8004caa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	4798      	blx	r3
 8004ca6:	e000      	b.n	8004caa <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ca8:	bf00      	nop
    }
  }
}
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cbe:	b2db      	uxtb	r3, r3
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ce8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2b40      	cmp	r3, #64	; 0x40
 8004cf8:	d108      	bne.n	8004d0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d0a:	e007      	b.n	8004d1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	60da      	str	r2, [r3, #12]
}
 8004d1c:	bf00      	nop
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	3b10      	subs	r3, #16
 8004d38:	4a14      	ldr	r2, [pc, #80]	; (8004d8c <DMA_CalcBaseAndBitshift+0x64>)
 8004d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3e:	091b      	lsrs	r3, r3, #4
 8004d40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d42:	4a13      	ldr	r2, [pc, #76]	; (8004d90 <DMA_CalcBaseAndBitshift+0x68>)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4413      	add	r3, r2
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d909      	bls.n	8004d6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d5e:	f023 0303 	bic.w	r3, r3, #3
 8004d62:	1d1a      	adds	r2, r3, #4
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	659a      	str	r2, [r3, #88]	; 0x58
 8004d68:	e007      	b.n	8004d7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d72:	f023 0303 	bic.w	r3, r3, #3
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	aaaaaaab 	.word	0xaaaaaaab
 8004d90:	0800f5ac 	.word	0x0800f5ac

08004d94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d11f      	bne.n	8004dee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d856      	bhi.n	8004e62 <DMA_CheckFifoParam+0xce>
 8004db4:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <DMA_CheckFifoParam+0x28>)
 8004db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dba:	bf00      	nop
 8004dbc:	08004dcd 	.word	0x08004dcd
 8004dc0:	08004ddf 	.word	0x08004ddf
 8004dc4:	08004dcd 	.word	0x08004dcd
 8004dc8:	08004e63 	.word	0x08004e63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d046      	beq.n	8004e66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ddc:	e043      	b.n	8004e66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004de6:	d140      	bne.n	8004e6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dec:	e03d      	b.n	8004e6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df6:	d121      	bne.n	8004e3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d837      	bhi.n	8004e6e <DMA_CheckFifoParam+0xda>
 8004dfe:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <DMA_CheckFifoParam+0x70>)
 8004e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e04:	08004e15 	.word	0x08004e15
 8004e08:	08004e1b 	.word	0x08004e1b
 8004e0c:	08004e15 	.word	0x08004e15
 8004e10:	08004e2d 	.word	0x08004e2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	73fb      	strb	r3, [r7, #15]
      break;
 8004e18:	e030      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d025      	beq.n	8004e72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e2a:	e022      	b.n	8004e72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e34:	d11f      	bne.n	8004e76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e3a:	e01c      	b.n	8004e76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d903      	bls.n	8004e4a <DMA_CheckFifoParam+0xb6>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d003      	beq.n	8004e50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e48:	e018      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e4e:	e015      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00e      	beq.n	8004e7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e60:	e00b      	b.n	8004e7a <DMA_CheckFifoParam+0xe6>
      break;
 8004e62:	bf00      	nop
 8004e64:	e00a      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
      break;
 8004e66:	bf00      	nop
 8004e68:	e008      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
      break;
 8004e6a:	bf00      	nop
 8004e6c:	e006      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
      break;
 8004e6e:	bf00      	nop
 8004e70:	e004      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
      break;
 8004e72:	bf00      	nop
 8004e74:	e002      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
      break;   
 8004e76:	bf00      	nop
 8004e78:	e000      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
      break;
 8004e7a:	bf00      	nop
    }
  } 
  
  return status; 
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop

08004e8c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004e96:	4b4b      	ldr	r3, [pc, #300]	; (8004fc4 <HAL_FLASH_IRQHandler+0x138>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d020      	beq.n	8004ee4 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8004ea2:	4b49      	ldr	r3, [pc, #292]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d107      	bne.n	8004ebc <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8004eac:	4b46      	ldr	r3, [pc, #280]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8004eb2:	4b45      	ldr	r3, [pc, #276]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb8:	60da      	str	r2, [r3, #12]
 8004eba:	e00b      	b.n	8004ed4 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8004ebc:	4b42      	ldr	r3, [pc, #264]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d103      	bne.n	8004ece <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8004ec6:	4b40      	ldr	r3, [pc, #256]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	607b      	str	r3, [r7, #4]
 8004ecc:	e002      	b.n	8004ed4 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8004ece:	4b3e      	ldr	r3, [pc, #248]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8004ed4:	f000 f88e 	bl	8004ff4 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f881 	bl	8004fe0 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004ede:	4b3a      	ldr	r3, [pc, #232]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004ee4:	4b37      	ldr	r3, [pc, #220]	; (8004fc4 <HAL_FLASH_IRQHandler+0x138>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d04a      	beq.n	8004f86 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004ef0:	4b34      	ldr	r3, [pc, #208]	; (8004fc4 <HAL_FLASH_IRQHandler+0x138>)
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8004ef6:	4b34      	ldr	r3, [pc, #208]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d12d      	bne.n	8004f5c <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8004f00:	4b31      	ldr	r3, [pc, #196]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	3b01      	subs	r3, #1
 8004f06:	4a30      	ldr	r2, [pc, #192]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004f08:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8004f0a:	4b2f      	ldr	r3, [pc, #188]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d015      	beq.n	8004f3e <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8004f12:	4b2d      	ldr	r3, [pc, #180]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f857 	bl	8004fcc <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8004f1e:	4b2a      	ldr	r3, [pc, #168]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	3301      	adds	r3, #1
 8004f24:	4a28      	ldr	r2, [pc, #160]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004f26:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8004f28:	4b27      	ldr	r3, [pc, #156]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8004f2e:	4b26      	ldr	r3, [pc, #152]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004f30:	7a1b      	ldrb	r3, [r3, #8]
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	4619      	mov	r1, r3
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f8c2 	bl	80050c0 <FLASH_Erase_Sector>
 8004f3c:	e023      	b.n	8004f86 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8004f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f42:	607b      	str	r3, [r7, #4]
 8004f44:	4a20      	ldr	r2, [pc, #128]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004f4a:	4b1f      	ldr	r3, [pc, #124]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8004f50:	f000 f92c 	bl	80051ac <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f839 	bl	8004fcc <HAL_FLASH_EndOfOperationCallback>
 8004f5a:	e014      	b.n	8004f86 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8004f5c:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d107      	bne.n	8004f76 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8004f66:	f000 f921 	bl	80051ac <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8004f6a:	4b17      	ldr	r3, [pc, #92]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 f82c 	bl	8004fcc <HAL_FLASH_EndOfOperationCallback>
 8004f74:	e004      	b.n	8004f80 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8004f76:	4b14      	ldr	r3, [pc, #80]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 f826 	bl	8004fcc <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004f80:	4b11      	ldr	r3, [pc, #68]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8004f86:	4b10      	ldr	r3, [pc, #64]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d114      	bne.n	8004fba <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8004f90:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <HAL_FLASH_IRQHandler+0x138>)
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	4a0b      	ldr	r2, [pc, #44]	; (8004fc4 <HAL_FLASH_IRQHandler+0x138>)
 8004f96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f9a:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8004f9c:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <HAL_FLASH_IRQHandler+0x138>)
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	4a08      	ldr	r2, [pc, #32]	; (8004fc4 <HAL_FLASH_IRQHandler+0x138>)
 8004fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fa6:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8004fa8:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <HAL_FLASH_IRQHandler+0x138>)
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	4a05      	ldr	r2, [pc, #20]	; (8004fc4 <HAL_FLASH_IRQHandler+0x138>)
 8004fae:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004fb2:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004fb4:	4b04      	ldr	r3, [pc, #16]	; (8004fc8 <HAL_FLASH_IRQHandler+0x13c>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	761a      	strb	r2, [r3, #24]
  }
}
 8004fba:	bf00      	nop
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40023c00 	.word	0x40023c00
 8004fc8:	20000914 	.word	0x20000914

08004fcc <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004ff8:	4b2f      	ldr	r3, [pc, #188]	; (80050b8 <FLASH_SetErrorCode+0xc4>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	2b00      	cmp	r3, #0
 8005002:	d008      	beq.n	8005016 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005004:	4b2d      	ldr	r3, [pc, #180]	; (80050bc <FLASH_SetErrorCode+0xc8>)
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	f043 0310 	orr.w	r3, r3, #16
 800500c:	4a2b      	ldr	r2, [pc, #172]	; (80050bc <FLASH_SetErrorCode+0xc8>)
 800500e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005010:	4b29      	ldr	r3, [pc, #164]	; (80050b8 <FLASH_SetErrorCode+0xc4>)
 8005012:	2210      	movs	r2, #16
 8005014:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005016:	4b28      	ldr	r3, [pc, #160]	; (80050b8 <FLASH_SetErrorCode+0xc4>)
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b00      	cmp	r3, #0
 8005020:	d008      	beq.n	8005034 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005022:	4b26      	ldr	r3, [pc, #152]	; (80050bc <FLASH_SetErrorCode+0xc8>)
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f043 0308 	orr.w	r3, r3, #8
 800502a:	4a24      	ldr	r2, [pc, #144]	; (80050bc <FLASH_SetErrorCode+0xc8>)
 800502c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800502e:	4b22      	ldr	r3, [pc, #136]	; (80050b8 <FLASH_SetErrorCode+0xc4>)
 8005030:	2220      	movs	r2, #32
 8005032:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005034:	4b20      	ldr	r3, [pc, #128]	; (80050b8 <FLASH_SetErrorCode+0xc4>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503c:	2b00      	cmp	r3, #0
 800503e:	d008      	beq.n	8005052 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005040:	4b1e      	ldr	r3, [pc, #120]	; (80050bc <FLASH_SetErrorCode+0xc8>)
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	f043 0304 	orr.w	r3, r3, #4
 8005048:	4a1c      	ldr	r2, [pc, #112]	; (80050bc <FLASH_SetErrorCode+0xc8>)
 800504a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800504c:	4b1a      	ldr	r3, [pc, #104]	; (80050b8 <FLASH_SetErrorCode+0xc4>)
 800504e:	2240      	movs	r2, #64	; 0x40
 8005050:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005052:	4b19      	ldr	r3, [pc, #100]	; (80050b8 <FLASH_SetErrorCode+0xc4>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505a:	2b00      	cmp	r3, #0
 800505c:	d008      	beq.n	8005070 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800505e:	4b17      	ldr	r3, [pc, #92]	; (80050bc <FLASH_SetErrorCode+0xc8>)
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	f043 0302 	orr.w	r3, r3, #2
 8005066:	4a15      	ldr	r2, [pc, #84]	; (80050bc <FLASH_SetErrorCode+0xc8>)
 8005068:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800506a:	4b13      	ldr	r3, [pc, #76]	; (80050b8 <FLASH_SetErrorCode+0xc4>)
 800506c:	2280      	movs	r2, #128	; 0x80
 800506e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005070:	4b11      	ldr	r3, [pc, #68]	; (80050b8 <FLASH_SetErrorCode+0xc4>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005078:	2b00      	cmp	r3, #0
 800507a:	d009      	beq.n	8005090 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800507c:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <FLASH_SetErrorCode+0xc8>)
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	4a0d      	ldr	r2, [pc, #52]	; (80050bc <FLASH_SetErrorCode+0xc8>)
 8005086:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005088:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <FLASH_SetErrorCode+0xc4>)
 800508a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800508e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005090:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <FLASH_SetErrorCode+0xc4>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d008      	beq.n	80050ae <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800509c:	4b07      	ldr	r3, [pc, #28]	; (80050bc <FLASH_SetErrorCode+0xc8>)
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	f043 0320 	orr.w	r3, r3, #32
 80050a4:	4a05      	ldr	r2, [pc, #20]	; (80050bc <FLASH_SetErrorCode+0xc8>)
 80050a6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80050a8:	4b03      	ldr	r3, [pc, #12]	; (80050b8 <FLASH_SetErrorCode+0xc4>)
 80050aa:	2202      	movs	r2, #2
 80050ac:	60da      	str	r2, [r3, #12]
  }
}
 80050ae:	bf00      	nop
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	40023c00 	.word	0x40023c00
 80050bc:	20000914 	.word	0x20000914

080050c0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d019      	beq.n	800510a <FLASH_Erase_Sector+0x4a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d016      	beq.n	800510a <FLASH_Erase_Sector+0x4a>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d013      	beq.n	800510a <FLASH_Erase_Sector+0x4a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d010      	beq.n	800510a <FLASH_Erase_Sector+0x4a>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d00d      	beq.n	800510a <FLASH_Erase_Sector+0x4a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b05      	cmp	r3, #5
 80050f2:	d00a      	beq.n	800510a <FLASH_Erase_Sector+0x4a>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b06      	cmp	r3, #6
 80050f8:	d007      	beq.n	800510a <FLASH_Erase_Sector+0x4a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b07      	cmp	r3, #7
 80050fe:	d004      	beq.n	800510a <FLASH_Erase_Sector+0x4a>
 8005100:	f240 31d9 	movw	r1, #985	; 0x3d9
 8005104:	4827      	ldr	r0, [pc, #156]	; (80051a4 <FLASH_Erase_Sector+0xe4>)
 8005106:	f7fd fa18 	bl	800253a <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00d      	beq.n	800512c <FLASH_Erase_Sector+0x6c>
 8005110:	78fb      	ldrb	r3, [r7, #3]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d00a      	beq.n	800512c <FLASH_Erase_Sector+0x6c>
 8005116:	78fb      	ldrb	r3, [r7, #3]
 8005118:	2b02      	cmp	r3, #2
 800511a:	d007      	beq.n	800512c <FLASH_Erase_Sector+0x6c>
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	2b03      	cmp	r3, #3
 8005120:	d004      	beq.n	800512c <FLASH_Erase_Sector+0x6c>
 8005122:	f240 31da 	movw	r1, #986	; 0x3da
 8005126:	481f      	ldr	r0, [pc, #124]	; (80051a4 <FLASH_Erase_Sector+0xe4>)
 8005128:	f7fd fa07 	bl	800253a <assert_failed>

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800512c:	78fb      	ldrb	r3, [r7, #3]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d102      	bne.n	8005138 <FLASH_Erase_Sector+0x78>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	e010      	b.n	800515a <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d103      	bne.n	8005146 <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800513e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	e009      	b.n	800515a <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005146:	78fb      	ldrb	r3, [r7, #3]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d103      	bne.n	8005154 <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800514c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	e002      	b.n	800515a <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005154:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005158:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800515a:	4b13      	ldr	r3, [pc, #76]	; (80051a8 <FLASH_Erase_Sector+0xe8>)
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	4a12      	ldr	r2, [pc, #72]	; (80051a8 <FLASH_Erase_Sector+0xe8>)
 8005160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005164:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005166:	4b10      	ldr	r3, [pc, #64]	; (80051a8 <FLASH_Erase_Sector+0xe8>)
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	490f      	ldr	r1, [pc, #60]	; (80051a8 <FLASH_Erase_Sector+0xe8>)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005172:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <FLASH_Erase_Sector+0xe8>)
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	4a0c      	ldr	r2, [pc, #48]	; (80051a8 <FLASH_Erase_Sector+0xe8>)
 8005178:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800517c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800517e:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <FLASH_Erase_Sector+0xe8>)
 8005180:	691a      	ldr	r2, [r3, #16]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	4313      	orrs	r3, r2
 8005188:	4a07      	ldr	r2, [pc, #28]	; (80051a8 <FLASH_Erase_Sector+0xe8>)
 800518a:	f043 0302 	orr.w	r3, r3, #2
 800518e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005190:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <FLASH_Erase_Sector+0xe8>)
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	4a04      	ldr	r2, [pc, #16]	; (80051a8 <FLASH_Erase_Sector+0xe8>)
 8005196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800519a:	6113      	str	r3, [r2, #16]
}
 800519c:	bf00      	nop
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	0800f028 	.word	0x0800f028
 80051a8:	40023c00 	.word	0x40023c00

080051ac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80051b0:	4b20      	ldr	r3, [pc, #128]	; (8005234 <FLASH_FlushCaches+0x88>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d017      	beq.n	80051ec <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80051bc:	4b1d      	ldr	r3, [pc, #116]	; (8005234 <FLASH_FlushCaches+0x88>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a1c      	ldr	r2, [pc, #112]	; (8005234 <FLASH_FlushCaches+0x88>)
 80051c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051c6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80051c8:	4b1a      	ldr	r3, [pc, #104]	; (8005234 <FLASH_FlushCaches+0x88>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a19      	ldr	r2, [pc, #100]	; (8005234 <FLASH_FlushCaches+0x88>)
 80051ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	4b17      	ldr	r3, [pc, #92]	; (8005234 <FLASH_FlushCaches+0x88>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a16      	ldr	r2, [pc, #88]	; (8005234 <FLASH_FlushCaches+0x88>)
 80051da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051de:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80051e0:	4b14      	ldr	r3, [pc, #80]	; (8005234 <FLASH_FlushCaches+0x88>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a13      	ldr	r2, [pc, #76]	; (8005234 <FLASH_FlushCaches+0x88>)
 80051e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051ea:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80051ec:	4b11      	ldr	r3, [pc, #68]	; (8005234 <FLASH_FlushCaches+0x88>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d017      	beq.n	8005228 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80051f8:	4b0e      	ldr	r3, [pc, #56]	; (8005234 <FLASH_FlushCaches+0x88>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a0d      	ldr	r2, [pc, #52]	; (8005234 <FLASH_FlushCaches+0x88>)
 80051fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005202:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005204:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <FLASH_FlushCaches+0x88>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a0a      	ldr	r2, [pc, #40]	; (8005234 <FLASH_FlushCaches+0x88>)
 800520a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	4b08      	ldr	r3, [pc, #32]	; (8005234 <FLASH_FlushCaches+0x88>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a07      	ldr	r2, [pc, #28]	; (8005234 <FLASH_FlushCaches+0x88>)
 8005216:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800521a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800521c:	4b05      	ldr	r3, [pc, #20]	; (8005234 <FLASH_FlushCaches+0x88>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a04      	ldr	r2, [pc, #16]	; (8005234 <FLASH_FlushCaches+0x88>)
 8005222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005226:	6013      	str	r3, [r2, #0]
  }
}
 8005228:	bf00      	nop
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40023c00 	.word	0x40023c00

08005238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005246:	2300      	movs	r3, #0
 8005248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800524a:	2300      	movs	r3, #0
 800524c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a33      	ldr	r2, [pc, #204]	; (8005320 <HAL_GPIO_Init+0xe8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d017      	beq.n	8005286 <HAL_GPIO_Init+0x4e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a32      	ldr	r2, [pc, #200]	; (8005324 <HAL_GPIO_Init+0xec>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d013      	beq.n	8005286 <HAL_GPIO_Init+0x4e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a31      	ldr	r2, [pc, #196]	; (8005328 <HAL_GPIO_Init+0xf0>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00f      	beq.n	8005286 <HAL_GPIO_Init+0x4e>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a30      	ldr	r2, [pc, #192]	; (800532c <HAL_GPIO_Init+0xf4>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00b      	beq.n	8005286 <HAL_GPIO_Init+0x4e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a2f      	ldr	r2, [pc, #188]	; (8005330 <HAL_GPIO_Init+0xf8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d007      	beq.n	8005286 <HAL_GPIO_Init+0x4e>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a2e      	ldr	r2, [pc, #184]	; (8005334 <HAL_GPIO_Init+0xfc>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d003      	beq.n	8005286 <HAL_GPIO_Init+0x4e>
 800527e:	21ac      	movs	r1, #172	; 0xac
 8005280:	482d      	ldr	r0, [pc, #180]	; (8005338 <HAL_GPIO_Init+0x100>)
 8005282:	f7fd f95a 	bl	800253a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <HAL_GPIO_Init+0x64>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	0c1b      	lsrs	r3, r3, #16
 8005296:	041b      	lsls	r3, r3, #16
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <HAL_GPIO_Init+0x6c>
 800529c:	21ad      	movs	r1, #173	; 0xad
 800529e:	4826      	ldr	r0, [pc, #152]	; (8005338 <HAL_GPIO_Init+0x100>)
 80052a0:	f7fd f94b 	bl	800253a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d035      	beq.n	8005318 <HAL_GPIO_Init+0xe0>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d031      	beq.n	8005318 <HAL_GPIO_Init+0xe0>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b11      	cmp	r3, #17
 80052ba:	d02d      	beq.n	8005318 <HAL_GPIO_Init+0xe0>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d029      	beq.n	8005318 <HAL_GPIO_Init+0xe0>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b12      	cmp	r3, #18
 80052ca:	d025      	beq.n	8005318 <HAL_GPIO_Init+0xe0>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80052d4:	d020      	beq.n	8005318 <HAL_GPIO_Init+0xe0>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80052de:	d01b      	beq.n	8005318 <HAL_GPIO_Init+0xe0>
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80052e8:	d016      	beq.n	8005318 <HAL_GPIO_Init+0xe0>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80052f2:	d011      	beq.n	8005318 <HAL_GPIO_Init+0xe0>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80052fc:	d00c      	beq.n	8005318 <HAL_GPIO_Init+0xe0>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8005306:	d007      	beq.n	8005318 <HAL_GPIO_Init+0xe0>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b03      	cmp	r3, #3
 800530e:	d003      	beq.n	8005318 <HAL_GPIO_Init+0xe0>
 8005310:	21ae      	movs	r1, #174	; 0xae
 8005312:	4809      	ldr	r0, [pc, #36]	; (8005338 <HAL_GPIO_Init+0x100>)
 8005314:	f7fd f911 	bl	800253a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005318:	2300      	movs	r3, #0
 800531a:	61fb      	str	r3, [r7, #28]
 800531c:	e20c      	b.n	8005738 <HAL_GPIO_Init+0x500>
 800531e:	bf00      	nop
 8005320:	40020000 	.word	0x40020000
 8005324:	40020400 	.word	0x40020400
 8005328:	40020800 	.word	0x40020800
 800532c:	40020c00 	.word	0x40020c00
 8005330:	40021000 	.word	0x40021000
 8005334:	40021c00 	.word	0x40021c00
 8005338:	0800f0a0 	.word	0x0800f0a0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800533c:	2201      	movs	r2, #1
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4013      	ands	r3, r2
 800534e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	429a      	cmp	r2, r3
 8005356:	f040 81ec 	bne.w	8005732 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	2b01      	cmp	r3, #1
 8005364:	d005      	beq.n	8005372 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800536e:	2b02      	cmp	r3, #2
 8005370:	d144      	bne.n	80053fc <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00f      	beq.n	800539a <HAL_GPIO_Init+0x162>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d00b      	beq.n	800539a <HAL_GPIO_Init+0x162>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	2b02      	cmp	r3, #2
 8005388:	d007      	beq.n	800539a <HAL_GPIO_Init+0x162>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	2b03      	cmp	r3, #3
 8005390:	d003      	beq.n	800539a <HAL_GPIO_Init+0x162>
 8005392:	21c0      	movs	r1, #192	; 0xc0
 8005394:	4884      	ldr	r0, [pc, #528]	; (80055a8 <HAL_GPIO_Init+0x370>)
 8005396:	f7fd f8d0 	bl	800253a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	2203      	movs	r2, #3
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
 80053aa:	43db      	mvns	r3, r3
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	4013      	ands	r3, r2
 80053b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68da      	ldr	r2, [r3, #12]
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053d0:	2201      	movs	r2, #1
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	43db      	mvns	r3, r3
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	4013      	ands	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	091b      	lsrs	r3, r3, #4
 80053e6:	f003 0201 	and.w	r2, r3, #1
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	2b03      	cmp	r3, #3
 8005406:	d027      	beq.n	8005458 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00b      	beq.n	8005428 <HAL_GPIO_Init+0x1f0>
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d007      	beq.n	8005428 <HAL_GPIO_Init+0x1f0>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	2b02      	cmp	r3, #2
 800541e:	d003      	beq.n	8005428 <HAL_GPIO_Init+0x1f0>
 8005420:	21d1      	movs	r1, #209	; 0xd1
 8005422:	4861      	ldr	r0, [pc, #388]	; (80055a8 <HAL_GPIO_Init+0x370>)
 8005424:	f7fd f889 	bl	800253a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	2203      	movs	r2, #3
 8005434:	fa02 f303 	lsl.w	r3, r2, r3
 8005438:	43db      	mvns	r3, r3
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	4013      	ands	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	fa02 f303 	lsl.w	r3, r2, r3
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	4313      	orrs	r3, r2
 8005450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	2b02      	cmp	r3, #2
 8005462:	f040 80a3 	bne.w	80055ac <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d077      	beq.n	800555e <HAL_GPIO_Init+0x326>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	2b09      	cmp	r3, #9
 8005474:	d073      	beq.n	800555e <HAL_GPIO_Init+0x326>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d06f      	beq.n	800555e <HAL_GPIO_Init+0x326>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d06b      	beq.n	800555e <HAL_GPIO_Init+0x326>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d067      	beq.n	800555e <HAL_GPIO_Init+0x326>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d063      	beq.n	800555e <HAL_GPIO_Init+0x326>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d05f      	beq.n	800555e <HAL_GPIO_Init+0x326>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d05b      	beq.n	800555e <HAL_GPIO_Init+0x326>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d057      	beq.n	800555e <HAL_GPIO_Init+0x326>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d053      	beq.n	800555e <HAL_GPIO_Init+0x326>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d04f      	beq.n	800555e <HAL_GPIO_Init+0x326>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d04b      	beq.n	800555e <HAL_GPIO_Init+0x326>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d047      	beq.n	800555e <HAL_GPIO_Init+0x326>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d043      	beq.n	800555e <HAL_GPIO_Init+0x326>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	2b05      	cmp	r3, #5
 80054dc:	d03f      	beq.n	800555e <HAL_GPIO_Init+0x326>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	2b05      	cmp	r3, #5
 80054e4:	d03b      	beq.n	800555e <HAL_GPIO_Init+0x326>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	2b05      	cmp	r3, #5
 80054ec:	d037      	beq.n	800555e <HAL_GPIO_Init+0x326>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	2b06      	cmp	r3, #6
 80054f4:	d033      	beq.n	800555e <HAL_GPIO_Init+0x326>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	2b06      	cmp	r3, #6
 80054fc:	d02f      	beq.n	800555e <HAL_GPIO_Init+0x326>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b05      	cmp	r3, #5
 8005504:	d02b      	beq.n	800555e <HAL_GPIO_Init+0x326>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	2b06      	cmp	r3, #6
 800550c:	d027      	beq.n	800555e <HAL_GPIO_Init+0x326>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	2b07      	cmp	r3, #7
 8005514:	d023      	beq.n	800555e <HAL_GPIO_Init+0x326>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b07      	cmp	r3, #7
 800551c:	d01f      	beq.n	800555e <HAL_GPIO_Init+0x326>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b07      	cmp	r3, #7
 8005524:	d01b      	beq.n	800555e <HAL_GPIO_Init+0x326>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	2b08      	cmp	r3, #8
 800552c:	d017      	beq.n	800555e <HAL_GPIO_Init+0x326>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	2b0a      	cmp	r3, #10
 8005534:	d013      	beq.n	800555e <HAL_GPIO_Init+0x326>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b09      	cmp	r3, #9
 800553c:	d00f      	beq.n	800555e <HAL_GPIO_Init+0x326>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2b09      	cmp	r3, #9
 8005544:	d00b      	beq.n	800555e <HAL_GPIO_Init+0x326>
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	2b0c      	cmp	r3, #12
 800554c:	d007      	beq.n	800555e <HAL_GPIO_Init+0x326>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	2b0f      	cmp	r3, #15
 8005554:	d003      	beq.n	800555e <HAL_GPIO_Init+0x326>
 8005556:	21de      	movs	r1, #222	; 0xde
 8005558:	4813      	ldr	r0, [pc, #76]	; (80055a8 <HAL_GPIO_Init+0x370>)
 800555a:	f7fc ffee 	bl	800253a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	08da      	lsrs	r2, r3, #3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	3208      	adds	r2, #8
 8005566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800556a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	220f      	movs	r2, #15
 8005576:	fa02 f303 	lsl.w	r3, r2, r3
 800557a:	43db      	mvns	r3, r3
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	4013      	ands	r3, r2
 8005580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	691a      	ldr	r2, [r3, #16]
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	4313      	orrs	r3, r2
 8005596:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	08da      	lsrs	r2, r3, #3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3208      	adds	r2, #8
 80055a0:	69b9      	ldr	r1, [r7, #24]
 80055a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80055a6:	e001      	b.n	80055ac <HAL_GPIO_Init+0x374>
 80055a8:	0800f0a0 	.word	0x0800f0a0
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	2203      	movs	r2, #3
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	43db      	mvns	r3, r3
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	4013      	ands	r3, r2
 80055c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f003 0203 	and.w	r2, r3, #3
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 80a2 	beq.w	8005732 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	4b56      	ldr	r3, [pc, #344]	; (800574c <HAL_GPIO_Init+0x514>)
 80055f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f6:	4a55      	ldr	r2, [pc, #340]	; (800574c <HAL_GPIO_Init+0x514>)
 80055f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055fc:	6453      	str	r3, [r2, #68]	; 0x44
 80055fe:	4b53      	ldr	r3, [pc, #332]	; (800574c <HAL_GPIO_Init+0x514>)
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800560a:	4a51      	ldr	r2, [pc, #324]	; (8005750 <HAL_GPIO_Init+0x518>)
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	089b      	lsrs	r3, r3, #2
 8005610:	3302      	adds	r3, #2
 8005612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	220f      	movs	r2, #15
 8005622:	fa02 f303 	lsl.w	r3, r2, r3
 8005626:	43db      	mvns	r3, r3
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	4013      	ands	r3, r2
 800562c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a48      	ldr	r2, [pc, #288]	; (8005754 <HAL_GPIO_Init+0x51c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d019      	beq.n	800566a <HAL_GPIO_Init+0x432>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a47      	ldr	r2, [pc, #284]	; (8005758 <HAL_GPIO_Init+0x520>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d013      	beq.n	8005666 <HAL_GPIO_Init+0x42e>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a46      	ldr	r2, [pc, #280]	; (800575c <HAL_GPIO_Init+0x524>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00d      	beq.n	8005662 <HAL_GPIO_Init+0x42a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a45      	ldr	r2, [pc, #276]	; (8005760 <HAL_GPIO_Init+0x528>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d007      	beq.n	800565e <HAL_GPIO_Init+0x426>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a44      	ldr	r2, [pc, #272]	; (8005764 <HAL_GPIO_Init+0x52c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d101      	bne.n	800565a <HAL_GPIO_Init+0x422>
 8005656:	2304      	movs	r3, #4
 8005658:	e008      	b.n	800566c <HAL_GPIO_Init+0x434>
 800565a:	2307      	movs	r3, #7
 800565c:	e006      	b.n	800566c <HAL_GPIO_Init+0x434>
 800565e:	2303      	movs	r3, #3
 8005660:	e004      	b.n	800566c <HAL_GPIO_Init+0x434>
 8005662:	2302      	movs	r3, #2
 8005664:	e002      	b.n	800566c <HAL_GPIO_Init+0x434>
 8005666:	2301      	movs	r3, #1
 8005668:	e000      	b.n	800566c <HAL_GPIO_Init+0x434>
 800566a:	2300      	movs	r3, #0
 800566c:	69fa      	ldr	r2, [r7, #28]
 800566e:	f002 0203 	and.w	r2, r2, #3
 8005672:	0092      	lsls	r2, r2, #2
 8005674:	4093      	lsls	r3, r2
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	4313      	orrs	r3, r2
 800567a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800567c:	4934      	ldr	r1, [pc, #208]	; (8005750 <HAL_GPIO_Init+0x518>)
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	089b      	lsrs	r3, r3, #2
 8005682:	3302      	adds	r3, #2
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800568a:	4b37      	ldr	r3, [pc, #220]	; (8005768 <HAL_GPIO_Init+0x530>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	43db      	mvns	r3, r3
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	4013      	ands	r3, r2
 8005698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056ae:	4a2e      	ldr	r2, [pc, #184]	; (8005768 <HAL_GPIO_Init+0x530>)
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056b4:	4b2c      	ldr	r3, [pc, #176]	; (8005768 <HAL_GPIO_Init+0x530>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	43db      	mvns	r3, r3
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	4013      	ands	r3, r2
 80056c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056d8:	4a23      	ldr	r2, [pc, #140]	; (8005768 <HAL_GPIO_Init+0x530>)
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80056de:	4b22      	ldr	r3, [pc, #136]	; (8005768 <HAL_GPIO_Init+0x530>)
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	43db      	mvns	r3, r3
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	4013      	ands	r3, r2
 80056ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005702:	4a19      	ldr	r2, [pc, #100]	; (8005768 <HAL_GPIO_Init+0x530>)
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005708:	4b17      	ldr	r3, [pc, #92]	; (8005768 <HAL_GPIO_Init+0x530>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	43db      	mvns	r3, r3
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	4013      	ands	r3, r2
 8005716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	4313      	orrs	r3, r2
 800572a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800572c:	4a0e      	ldr	r2, [pc, #56]	; (8005768 <HAL_GPIO_Init+0x530>)
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	3301      	adds	r3, #1
 8005736:	61fb      	str	r3, [r7, #28]
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	2b0f      	cmp	r3, #15
 800573c:	f67f adfe 	bls.w	800533c <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8005740:	bf00      	nop
 8005742:	bf00      	nop
 8005744:	3720      	adds	r7, #32
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	40023800 	.word	0x40023800
 8005750:	40013800 	.word	0x40013800
 8005754:	40020000 	.word	0x40020000
 8005758:	40020400 	.word	0x40020400
 800575c:	40020800 	.word	0x40020800
 8005760:	40020c00 	.word	0x40020c00
 8005764:	40021000 	.word	0x40021000
 8005768:	40013c00 	.word	0x40013c00

0800576c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005778:	887b      	ldrh	r3, [r7, #2]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d004      	beq.n	8005788 <HAL_GPIO_ReadPin+0x1c>
 800577e:	887b      	ldrh	r3, [r7, #2]
 8005780:	0c1b      	lsrs	r3, r3, #16
 8005782:	041b      	lsls	r3, r3, #16
 8005784:	2b00      	cmp	r3, #0
 8005786:	d004      	beq.n	8005792 <HAL_GPIO_ReadPin+0x26>
 8005788:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800578c:	4809      	ldr	r0, [pc, #36]	; (80057b4 <HAL_GPIO_ReadPin+0x48>)
 800578e:	f7fc fed4 	bl	800253a <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691a      	ldr	r2, [r3, #16]
 8005796:	887b      	ldrh	r3, [r7, #2]
 8005798:	4013      	ands	r3, r2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800579e:	2301      	movs	r3, #1
 80057a0:	73fb      	strb	r3, [r7, #15]
 80057a2:	e001      	b.n	80057a8 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057a4:	2300      	movs	r3, #0
 80057a6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	0800f0a0 	.word	0x0800f0a0

080057b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	807b      	strh	r3, [r7, #2]
 80057c4:	4613      	mov	r3, r2
 80057c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80057c8:	887b      	ldrh	r3, [r7, #2]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d004      	beq.n	80057d8 <HAL_GPIO_WritePin+0x20>
 80057ce:	887b      	ldrh	r3, [r7, #2]
 80057d0:	0c1b      	lsrs	r3, r3, #16
 80057d2:	041b      	lsls	r3, r3, #16
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d004      	beq.n	80057e2 <HAL_GPIO_WritePin+0x2a>
 80057d8:	f240 119d 	movw	r1, #413	; 0x19d
 80057dc:	480e      	ldr	r0, [pc, #56]	; (8005818 <HAL_GPIO_WritePin+0x60>)
 80057de:	f7fc feac 	bl	800253a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80057e2:	787b      	ldrb	r3, [r7, #1]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d007      	beq.n	80057f8 <HAL_GPIO_WritePin+0x40>
 80057e8:	787b      	ldrb	r3, [r7, #1]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d004      	beq.n	80057f8 <HAL_GPIO_WritePin+0x40>
 80057ee:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80057f2:	4809      	ldr	r0, [pc, #36]	; (8005818 <HAL_GPIO_WritePin+0x60>)
 80057f4:	f7fc fea1 	bl	800253a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80057f8:	787b      	ldrb	r3, [r7, #1]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057fe:	887a      	ldrh	r2, [r7, #2]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005804:	e003      	b.n	800580e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005806:	887b      	ldrh	r3, [r7, #2]
 8005808:	041a      	lsls	r2, r3, #16
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	619a      	str	r2, [r3, #24]
}
 800580e:	bf00      	nop
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	0800f0a0 	.word	0x0800f0a0

0800581c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e1f7      	b.n	8005c1e <HAL_I2C_Init+0x402>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a81      	ldr	r2, [pc, #516]	; (8005a38 <HAL_I2C_Init+0x21c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00e      	beq.n	8005856 <HAL_I2C_Init+0x3a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a7f      	ldr	r2, [pc, #508]	; (8005a3c <HAL_I2C_Init+0x220>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d009      	beq.n	8005856 <HAL_I2C_Init+0x3a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a7e      	ldr	r2, [pc, #504]	; (8005a40 <HAL_I2C_Init+0x224>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d004      	beq.n	8005856 <HAL_I2C_Init+0x3a>
 800584c:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8005850:	487c      	ldr	r0, [pc, #496]	; (8005a44 <HAL_I2C_Init+0x228>)
 8005852:	f7fc fe72 	bl	800253a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d004      	beq.n	8005868 <HAL_I2C_Init+0x4c>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	4a79      	ldr	r2, [pc, #484]	; (8005a48 <HAL_I2C_Init+0x22c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d904      	bls.n	8005872 <HAL_I2C_Init+0x56>
 8005868:	f240 11bf 	movw	r1, #447	; 0x1bf
 800586c:	4875      	ldr	r0, [pc, #468]	; (8005a44 <HAL_I2C_Init+0x228>)
 800586e:	f7fc fe64 	bl	800253a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <HAL_I2C_Init+0x72>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005882:	d004      	beq.n	800588e <HAL_I2C_Init+0x72>
 8005884:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005888:	486e      	ldr	r0, [pc, #440]	; (8005a44 <HAL_I2C_Init+0x228>)
 800588a:	f7fc fe56 	bl	800253a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005896:	f023 0303 	bic.w	r3, r3, #3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d004      	beq.n	80058a8 <HAL_I2C_Init+0x8c>
 800589e:	f240 11c1 	movw	r1, #449	; 0x1c1
 80058a2:	4868      	ldr	r0, [pc, #416]	; (8005a44 <HAL_I2C_Init+0x228>)
 80058a4:	f7fc fe49 	bl	800253a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058b0:	d009      	beq.n	80058c6 <HAL_I2C_Init+0xaa>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058ba:	d004      	beq.n	80058c6 <HAL_I2C_Init+0xaa>
 80058bc:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80058c0:	4860      	ldr	r0, [pc, #384]	; (8005a44 <HAL_I2C_Init+0x228>)
 80058c2:	f7fc fe3a 	bl	800253a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d008      	beq.n	80058e0 <HAL_I2C_Init+0xc4>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d004      	beq.n	80058e0 <HAL_I2C_Init+0xc4>
 80058d6:	f240 11c3 	movw	r1, #451	; 0x1c3
 80058da:	485a      	ldr	r0, [pc, #360]	; (8005a44 <HAL_I2C_Init+0x228>)
 80058dc:	f7fc fe2d 	bl	800253a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d004      	beq.n	80058f6 <HAL_I2C_Init+0xda>
 80058ec:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80058f0:	4854      	ldr	r0, [pc, #336]	; (8005a44 <HAL_I2C_Init+0x228>)
 80058f2:	f7fc fe22 	bl	800253a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d008      	beq.n	8005910 <HAL_I2C_Init+0xf4>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	2b40      	cmp	r3, #64	; 0x40
 8005904:	d004      	beq.n	8005910 <HAL_I2C_Init+0xf4>
 8005906:	f240 11c5 	movw	r1, #453	; 0x1c5
 800590a:	484e      	ldr	r0, [pc, #312]	; (8005a44 <HAL_I2C_Init+0x228>)
 800590c:	f7fc fe15 	bl	800253a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d008      	beq.n	800592a <HAL_I2C_Init+0x10e>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	2b80      	cmp	r3, #128	; 0x80
 800591e:	d004      	beq.n	800592a <HAL_I2C_Init+0x10e>
 8005920:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8005924:	4847      	ldr	r0, [pc, #284]	; (8005a44 <HAL_I2C_Init+0x228>)
 8005926:	f7fc fe08 	bl	800253a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d12c      	bne.n	8005990 <HAL_I2C_Init+0x174>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a42      	ldr	r2, [pc, #264]	; (8005a4c <HAL_I2C_Init+0x230>)
 8005942:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a42      	ldr	r2, [pc, #264]	; (8005a50 <HAL_I2C_Init+0x234>)
 8005948:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a41      	ldr	r2, [pc, #260]	; (8005a54 <HAL_I2C_Init+0x238>)
 800594e:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a41      	ldr	r2, [pc, #260]	; (8005a58 <HAL_I2C_Init+0x23c>)
 8005954:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a40      	ldr	r2, [pc, #256]	; (8005a5c <HAL_I2C_Init+0x240>)
 800595a:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a40      	ldr	r2, [pc, #256]	; (8005a60 <HAL_I2C_Init+0x244>)
 8005960:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a3f      	ldr	r2, [pc, #252]	; (8005a64 <HAL_I2C_Init+0x248>)
 8005966:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a3f      	ldr	r2, [pc, #252]	; (8005a68 <HAL_I2C_Init+0x24c>)
 800596c:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a3e      	ldr	r2, [pc, #248]	; (8005a6c <HAL_I2C_Init+0x250>)
 8005972:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a3e      	ldr	r2, [pc, #248]	; (8005a70 <HAL_I2C_Init+0x254>)
 8005978:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <HAL_I2C_Init+0x16c>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a3b      	ldr	r2, [pc, #236]	; (8005a74 <HAL_I2C_Init+0x258>)
 8005986:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2224      	movs	r2, #36	; 0x24
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0201 	bic.w	r2, r2, #1
 80059a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80059c8:	f002 fc0a 	bl	80081e0 <HAL_RCC_GetPCLK1Freq>
 80059cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	4a29      	ldr	r2, [pc, #164]	; (8005a78 <HAL_I2C_Init+0x25c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d807      	bhi.n	80059e8 <HAL_I2C_Init+0x1cc>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4a28      	ldr	r2, [pc, #160]	; (8005a7c <HAL_I2C_Init+0x260>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	bf94      	ite	ls
 80059e0:	2301      	movls	r3, #1
 80059e2:	2300      	movhi	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	e006      	b.n	80059f6 <HAL_I2C_Init+0x1da>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4a25      	ldr	r2, [pc, #148]	; (8005a80 <HAL_I2C_Init+0x264>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	bf94      	ite	ls
 80059f0:	2301      	movls	r3, #1
 80059f2:	2300      	movhi	r3, #0
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <HAL_I2C_Init+0x1e2>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e10f      	b.n	8005c1e <HAL_I2C_Init+0x402>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4a20      	ldr	r2, [pc, #128]	; (8005a84 <HAL_I2C_Init+0x268>)
 8005a02:	fba2 2303 	umull	r2, r3, r2, r3
 8005a06:	0c9b      	lsrs	r3, r3, #18
 8005a08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	4a12      	ldr	r2, [pc, #72]	; (8005a78 <HAL_I2C_Init+0x25c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d82a      	bhi.n	8005a88 <HAL_I2C_Init+0x26c>
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	3301      	adds	r3, #1
 8005a36:	e031      	b.n	8005a9c <HAL_I2C_Init+0x280>
 8005a38:	40005400 	.word	0x40005400
 8005a3c:	40005800 	.word	0x40005800
 8005a40:	40005c00 	.word	0x40005c00
 8005a44:	0800f114 	.word	0x0800f114
 8005a48:	00061a80 	.word	0x00061a80
 8005a4c:	08006061 	.word	0x08006061
 8005a50:	08006075 	.word	0x08006075
 8005a54:	08006089 	.word	0x08006089
 8005a58:	0800609d 	.word	0x0800609d
 8005a5c:	080060cd 	.word	0x080060cd
 8005a60:	080060e1 	.word	0x080060e1
 8005a64:	080060f5 	.word	0x080060f5
 8005a68:	08006109 	.word	0x08006109
 8005a6c:	0800611d 	.word	0x0800611d
 8005a70:	080060b1 	.word	0x080060b1
 8005a74:	0800222d 	.word	0x0800222d
 8005a78:	000186a0 	.word	0x000186a0
 8005a7c:	001e847f 	.word	0x001e847f
 8005a80:	003d08ff 	.word	0x003d08ff
 8005a84:	431bde83 	.word	0x431bde83
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005a8e:	fb02 f303 	mul.w	r3, r2, r3
 8005a92:	4a65      	ldr	r2, [pc, #404]	; (8005c28 <HAL_I2C_Init+0x40c>)
 8005a94:	fba2 2303 	umull	r2, r3, r2, r3
 8005a98:	099b      	lsrs	r3, r3, #6
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6812      	ldr	r2, [r2, #0]
 8005aa0:	430b      	orrs	r3, r1
 8005aa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005aae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	495d      	ldr	r1, [pc, #372]	; (8005c2c <HAL_I2C_Init+0x410>)
 8005ab8:	428b      	cmp	r3, r1
 8005aba:	d819      	bhi.n	8005af0 <HAL_I2C_Init+0x2d4>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	1e59      	subs	r1, r3, #1
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005aca:	1c59      	adds	r1, r3, #1
 8005acc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ad0:	400b      	ands	r3, r1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <HAL_I2C_Init+0x2d0>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	1e59      	subs	r1, r3, #1
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aea:	e051      	b.n	8005b90 <HAL_I2C_Init+0x374>
 8005aec:	2304      	movs	r3, #4
 8005aee:	e04f      	b.n	8005b90 <HAL_I2C_Init+0x374>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d111      	bne.n	8005b1c <HAL_I2C_Init+0x300>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	1e58      	subs	r0, r3, #1
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6859      	ldr	r1, [r3, #4]
 8005b00:	460b      	mov	r3, r1
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	440b      	add	r3, r1
 8005b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	bf0c      	ite	eq
 8005b14:	2301      	moveq	r3, #1
 8005b16:	2300      	movne	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	e012      	b.n	8005b42 <HAL_I2C_Init+0x326>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	1e58      	subs	r0, r3, #1
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6859      	ldr	r1, [r3, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	0099      	lsls	r1, r3, #2
 8005b2c:	440b      	add	r3, r1
 8005b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b32:	3301      	adds	r3, #1
 8005b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	bf0c      	ite	eq
 8005b3c:	2301      	moveq	r3, #1
 8005b3e:	2300      	movne	r3, #0
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <HAL_I2C_Init+0x32e>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e022      	b.n	8005b90 <HAL_I2C_Init+0x374>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10e      	bne.n	8005b70 <HAL_I2C_Init+0x354>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	1e58      	subs	r0, r3, #1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6859      	ldr	r1, [r3, #4]
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	440b      	add	r3, r1
 8005b60:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b64:	3301      	adds	r3, #1
 8005b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b6e:	e00f      	b.n	8005b90 <HAL_I2C_Init+0x374>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	1e58      	subs	r0, r3, #1
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6859      	ldr	r1, [r3, #4]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	440b      	add	r3, r1
 8005b7e:	0099      	lsls	r1, r3, #2
 8005b80:	440b      	add	r3, r1
 8005b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b86:	3301      	adds	r3, #1
 8005b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b90:	6879      	ldr	r1, [r7, #4]
 8005b92:	6809      	ldr	r1, [r1, #0]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69da      	ldr	r2, [r3, #28]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005bbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6911      	ldr	r1, [r2, #16]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	68d2      	ldr	r2, [r2, #12]
 8005bca:	4311      	orrs	r1, r2
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6812      	ldr	r2, [r2, #0]
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695a      	ldr	r2, [r3, #20]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0201 	orr.w	r2, r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	10624dd3 	.word	0x10624dd3
 8005c2c:	000186a0 	.word	0x000186a0

08005c30 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c50:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c58:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
 8005c5c:	2b10      	cmp	r3, #16
 8005c5e:	d003      	beq.n	8005c68 <HAL_I2C_EV_IRQHandler+0x38>
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
 8005c62:	2b40      	cmp	r3, #64	; 0x40
 8005c64:	f040 80c1 	bne.w	8005dea <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10d      	bne.n	8005c9e <HAL_I2C_EV_IRQHandler+0x6e>
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005c88:	d003      	beq.n	8005c92 <HAL_I2C_EV_IRQHandler+0x62>
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005c90:	d101      	bne.n	8005c96 <HAL_I2C_EV_IRQHandler+0x66>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e000      	b.n	8005c98 <HAL_I2C_EV_IRQHandler+0x68>
 8005c96:	2300      	movs	r3, #0
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	f000 8132 	beq.w	8005f02 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00c      	beq.n	8005cc2 <HAL_I2C_EV_IRQHandler+0x92>
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	0a5b      	lsrs	r3, r3, #9
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d006      	beq.n	8005cc2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f001 fc95 	bl	80075e4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fd8f 	bl	80067de <I2C_Master_SB>
 8005cc0:	e092      	b.n	8005de8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	08db      	lsrs	r3, r3, #3
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d009      	beq.n	8005ce2 <HAL_I2C_EV_IRQHandler+0xb2>
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	0a5b      	lsrs	r3, r3, #9
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fe05 	bl	80068ea <I2C_Master_ADD10>
 8005ce0:	e082      	b.n	8005de8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	085b      	lsrs	r3, r3, #1
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d009      	beq.n	8005d02 <HAL_I2C_EV_IRQHandler+0xd2>
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	0a5b      	lsrs	r3, r3, #9
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fe1f 	bl	800693e <I2C_Master_ADDR>
 8005d00:	e072      	b.n	8005de8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	089b      	lsrs	r3, r3, #2
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d03b      	beq.n	8005d86 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d1c:	f000 80f3 	beq.w	8005f06 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	09db      	lsrs	r3, r3, #7
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00f      	beq.n	8005d4c <HAL_I2C_EV_IRQHandler+0x11c>
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	0a9b      	lsrs	r3, r3, #10
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d009      	beq.n	8005d4c <HAL_I2C_EV_IRQHandler+0x11c>
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	089b      	lsrs	r3, r3, #2
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d103      	bne.n	8005d4c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f9f3 	bl	8006130 <I2C_MasterTransmit_TXE>
 8005d4a:	e04d      	b.n	8005de8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	089b      	lsrs	r3, r3, #2
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 80d6 	beq.w	8005f06 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	0a5b      	lsrs	r3, r3, #9
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 80cf 	beq.w	8005f06 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005d68:	7bbb      	ldrb	r3, [r7, #14]
 8005d6a:	2b21      	cmp	r3, #33	; 0x21
 8005d6c:	d103      	bne.n	8005d76 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fa7d 	bl	800626e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d74:	e0c7      	b.n	8005f06 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
 8005d78:	2b40      	cmp	r3, #64	; 0x40
 8005d7a:	f040 80c4 	bne.w	8005f06 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 faee 	bl	8006360 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d84:	e0bf      	b.n	8005f06 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d94:	f000 80b7 	beq.w	8005f06 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	099b      	lsrs	r3, r3, #6
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00f      	beq.n	8005dc4 <HAL_I2C_EV_IRQHandler+0x194>
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	0a9b      	lsrs	r3, r3, #10
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d009      	beq.n	8005dc4 <HAL_I2C_EV_IRQHandler+0x194>
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	089b      	lsrs	r3, r3, #2
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d103      	bne.n	8005dc4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fb64 	bl	800648a <I2C_MasterReceive_RXNE>
 8005dc2:	e011      	b.n	8005de8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	089b      	lsrs	r3, r3, #2
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 809a 	beq.w	8005f06 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	0a5b      	lsrs	r3, r3, #9
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 8093 	beq.w	8005f06 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fc10 	bl	8006606 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005de6:	e08e      	b.n	8005f06 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005de8:	e08d      	b.n	8005f06 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d004      	beq.n	8005dfc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	61fb      	str	r3, [r7, #28]
 8005dfa:	e007      	b.n	8005e0c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	085b      	lsrs	r3, r3, #1
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d012      	beq.n	8005e3e <HAL_I2C_EV_IRQHandler+0x20e>
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	0a5b      	lsrs	r3, r3, #9
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00c      	beq.n	8005e3e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005e34:	69b9      	ldr	r1, [r7, #24]
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 ffd2 	bl	8006de0 <I2C_Slave_ADDR>
 8005e3c:	e066      	b.n	8005f0c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	091b      	lsrs	r3, r3, #4
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d009      	beq.n	8005e5e <HAL_I2C_EV_IRQHandler+0x22e>
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	0a5b      	lsrs	r3, r3, #9
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f001 f80c 	bl	8006e74 <I2C_Slave_STOPF>
 8005e5c:	e056      	b.n	8005f0c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e5e:	7bbb      	ldrb	r3, [r7, #14]
 8005e60:	2b21      	cmp	r3, #33	; 0x21
 8005e62:	d002      	beq.n	8005e6a <HAL_I2C_EV_IRQHandler+0x23a>
 8005e64:	7bbb      	ldrb	r3, [r7, #14]
 8005e66:	2b29      	cmp	r3, #41	; 0x29
 8005e68:	d125      	bne.n	8005eb6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	09db      	lsrs	r3, r3, #7
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00f      	beq.n	8005e96 <HAL_I2C_EV_IRQHandler+0x266>
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	0a9b      	lsrs	r3, r3, #10
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d009      	beq.n	8005e96 <HAL_I2C_EV_IRQHandler+0x266>
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	089b      	lsrs	r3, r3, #2
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d103      	bne.n	8005e96 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fee6 	bl	8006c60 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e94:	e039      	b.n	8005f0a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	089b      	lsrs	r3, r3, #2
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d033      	beq.n	8005f0a <HAL_I2C_EV_IRQHandler+0x2da>
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	0a5b      	lsrs	r3, r3, #9
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d02d      	beq.n	8005f0a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 ff14 	bl	8006cdc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005eb4:	e029      	b.n	8005f0a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	099b      	lsrs	r3, r3, #6
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00f      	beq.n	8005ee2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	0a9b      	lsrs	r3, r3, #10
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d009      	beq.n	8005ee2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	089b      	lsrs	r3, r3, #2
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d103      	bne.n	8005ee2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 ff1f 	bl	8006d1e <I2C_SlaveReceive_RXNE>
 8005ee0:	e014      	b.n	8005f0c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	089b      	lsrs	r3, r3, #2
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00e      	beq.n	8005f0c <HAL_I2C_EV_IRQHandler+0x2dc>
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	0a5b      	lsrs	r3, r3, #9
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d008      	beq.n	8005f0c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 ff4e 	bl	8006d9c <I2C_SlaveReceive_BTF>
 8005f00:	e004      	b.n	8005f0c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005f02:	bf00      	nop
 8005f04:	e002      	b.n	8005f0c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f06:	bf00      	nop
 8005f08:	e000      	b.n	8005f0c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f0a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005f0c:	3720      	adds	r7, #32
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b08a      	sub	sp, #40	; 0x28
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f34:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	0a1b      	lsrs	r3, r3, #8
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00e      	beq.n	8005f60 <HAL_I2C_ER_IRQHandler+0x4e>
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	0a1b      	lsrs	r3, r3, #8
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d008      	beq.n	8005f60 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	f043 0301 	orr.w	r3, r3, #1
 8005f54:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f5e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	0a5b      	lsrs	r3, r3, #9
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00e      	beq.n	8005f8a <HAL_I2C_ER_IRQHandler+0x78>
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	0a1b      	lsrs	r3, r3, #8
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d008      	beq.n	8005f8a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	f043 0302 	orr.w	r3, r3, #2
 8005f7e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005f88:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	0a9b      	lsrs	r3, r3, #10
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d03f      	beq.n	8006016 <HAL_I2C_ER_IRQHandler+0x104>
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	0a1b      	lsrs	r3, r3, #8
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d039      	beq.n	8006016 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005fa2:	7efb      	ldrb	r3, [r7, #27]
 8005fa4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fba:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005fbc:	7ebb      	ldrb	r3, [r7, #26]
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	d112      	bne.n	8005fe8 <HAL_I2C_ER_IRQHandler+0xd6>
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10f      	bne.n	8005fe8 <HAL_I2C_ER_IRQHandler+0xd6>
 8005fc8:	7cfb      	ldrb	r3, [r7, #19]
 8005fca:	2b21      	cmp	r3, #33	; 0x21
 8005fcc:	d008      	beq.n	8005fe0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005fce:	7cfb      	ldrb	r3, [r7, #19]
 8005fd0:	2b29      	cmp	r3, #41	; 0x29
 8005fd2:	d005      	beq.n	8005fe0 <HAL_I2C_ER_IRQHandler+0xce>
 8005fd4:	7cfb      	ldrb	r3, [r7, #19]
 8005fd6:	2b28      	cmp	r3, #40	; 0x28
 8005fd8:	d106      	bne.n	8005fe8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2b21      	cmp	r3, #33	; 0x21
 8005fde:	d103      	bne.n	8005fe8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f001 f87b 	bl	80070dc <I2C_Slave_AF>
 8005fe6:	e016      	b.n	8006016 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ff0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	f043 0304 	orr.w	r3, r3, #4
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005ffa:	7efb      	ldrb	r3, [r7, #27]
 8005ffc:	2b10      	cmp	r3, #16
 8005ffe:	d002      	beq.n	8006006 <HAL_I2C_ER_IRQHandler+0xf4>
 8006000:	7efb      	ldrb	r3, [r7, #27]
 8006002:	2b40      	cmp	r3, #64	; 0x40
 8006004:	d107      	bne.n	8006016 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006014:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	0adb      	lsrs	r3, r3, #11
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00e      	beq.n	8006040 <HAL_I2C_ER_IRQHandler+0x12e>
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	0a1b      	lsrs	r3, r3, #8
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d008      	beq.n	8006040 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	f043 0308 	orr.w	r3, r3, #8
 8006034:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800603e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	2b00      	cmp	r3, #0
 8006044:	d008      	beq.n	8006058 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	431a      	orrs	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f001 f8b4 	bl	80071c0 <I2C_ITError>
  }
}
 8006058:	bf00      	nop
 800605a:	3728      	adds	r7, #40	; 0x28
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	70fb      	strb	r3, [r7, #3]
 80060bc:	4613      	mov	r3, r2
 80060be:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006146:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006152:	2b00      	cmp	r3, #0
 8006154:	d153      	bne.n	80061fe <I2C_MasterTransmit_TXE+0xce>
 8006156:	7bfb      	ldrb	r3, [r7, #15]
 8006158:	2b21      	cmp	r3, #33	; 0x21
 800615a:	d150      	bne.n	80061fe <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b08      	cmp	r3, #8
 8006160:	d01e      	beq.n	80061a0 <I2C_MasterTransmit_TXE+0x70>
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2b20      	cmp	r3, #32
 8006166:	d01b      	beq.n	80061a0 <I2C_MasterTransmit_TXE+0x70>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800616e:	d017      	beq.n	80061a0 <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800617e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2211      	movs	r2, #17
 8006184:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2220      	movs	r2, #32
 8006192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800619e:	e062      	b.n	8006266 <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061ae:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061be:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b40      	cmp	r3, #64	; 0x40
 80061d8:	d108      	bne.n	80061ec <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80061ea:	e03c      	b.n	8006266 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80061fc:	e033      	b.n	8006266 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
 8006200:	2b21      	cmp	r3, #33	; 0x21
 8006202:	d005      	beq.n	8006210 <I2C_MasterTransmit_TXE+0xe0>
 8006204:	7bbb      	ldrb	r3, [r7, #14]
 8006206:	2b40      	cmp	r3, #64	; 0x40
 8006208:	d12d      	bne.n	8006266 <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	2b22      	cmp	r3, #34	; 0x22
 800620e:	d12a      	bne.n	8006266 <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006214:	b29b      	uxth	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d108      	bne.n	800622c <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006228:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800622a:	e01c      	b.n	8006266 <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b40      	cmp	r3, #64	; 0x40
 8006236:	d103      	bne.n	8006240 <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f891 	bl	8006360 <I2C_MemoryTransmit_TXE_BTF>
}
 800623e:	e012      	b.n	8006266 <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	781a      	ldrb	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625a:	b29b      	uxth	r3, r3
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006264:	e7ff      	b.n	8006266 <I2C_MasterTransmit_TXE+0x136>
 8006266:	bf00      	nop
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b21      	cmp	r3, #33	; 0x21
 8006286:	d167      	bne.n	8006358 <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800628c:	b29b      	uxth	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d012      	beq.n	80062b8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	781a      	ldrb	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	3b01      	subs	r3, #1
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80062b6:	e04f      	b.n	8006358 <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2b08      	cmp	r3, #8
 80062bc:	d01e      	beq.n	80062fc <I2C_MasterTransmit_BTF+0x8e>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b20      	cmp	r3, #32
 80062c2:	d01b      	beq.n	80062fc <I2C_MasterTransmit_BTF+0x8e>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062ca:	d017      	beq.n	80062fc <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062da:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2211      	movs	r2, #17
 80062e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	4798      	blx	r3
}
 80062fa:	e02d      	b.n	8006358 <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800630a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800631a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2220      	movs	r2, #32
 8006326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b40      	cmp	r3, #64	; 0x40
 8006334:	d108      	bne.n	8006348 <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	4798      	blx	r3
}
 8006346:	e007      	b.n	8006358 <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	4798      	blx	r3
}
 8006358:	bf00      	nop
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800636e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006374:	2b00      	cmp	r3, #0
 8006376:	d11d      	bne.n	80063b4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800637c:	2b01      	cmp	r3, #1
 800637e:	d10b      	bne.n	8006398 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006384:	b2da      	uxtb	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006390:	1c9a      	adds	r2, r3, #2
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006396:	e074      	b.n	8006482 <I2C_MemoryTransmit_TXE_BTF+0x122>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800639c:	b29b      	uxth	r3, r3
 800639e:	121b      	asrs	r3, r3, #8
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80063b2:	e066      	b.n	8006482 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 1U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d10b      	bne.n	80063d4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80063d2:	e056      	b.n	8006482 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 2U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d152      	bne.n	8006482 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
 80063de:	2b22      	cmp	r3, #34	; 0x22
 80063e0:	d10d      	bne.n	80063fe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063f0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80063fc:	e041      	b.n	8006482 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006402:	b29b      	uxth	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	d015      	beq.n	8006434 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006408:	7bfb      	ldrb	r3, [r7, #15]
 800640a:	2b21      	cmp	r3, #33	; 0x21
 800640c:	d112      	bne.n	8006434 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	781a      	ldrb	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006432:	e026      	b.n	8006482 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d121      	bne.n	8006482 <I2C_MemoryTransmit_TXE_BTF+0x122>
 800643e:	7bfb      	ldrb	r3, [r7, #15]
 8006440:	2b21      	cmp	r3, #33	; 0x21
 8006442:	d11e      	bne.n	8006482 <I2C_MemoryTransmit_TXE_BTF+0x122>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006452:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006462:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2220      	movs	r2, #32
 800646e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	4798      	blx	r3
}
 8006482:	bf00      	nop
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b084      	sub	sp, #16
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b22      	cmp	r3, #34	; 0x22
 800649c:	f040 80af 	bne.w	80065fe <I2C_MasterReceive_RXNE+0x174>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d921      	bls.n	80064f2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	691a      	ldr	r2, [r3, #16]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	3b01      	subs	r3, #1
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b03      	cmp	r3, #3
 80064dc:	f040 808f 	bne.w	80065fe <I2C_MasterReceive_RXNE+0x174>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ee:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80064f0:	e085      	b.n	80065fe <I2C_MasterReceive_RXNE+0x174>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d078      	beq.n	80065ec <I2C_MasterReceive_RXNE+0x162>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d002      	beq.n	8006506 <I2C_MasterReceive_RXNE+0x7c>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d172      	bne.n	80065ec <I2C_MasterReceive_RXNE+0x162>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f001 f83a 	bl	8007580 <I2C_WaitOnSTOPRequestThroughIT>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d144      	bne.n	800659c <I2C_MasterReceive_RXNE+0x112>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006520:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006530:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	691a      	ldr	r2, [r3, #16]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	b2d2      	uxtb	r2, r2
 800653e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800654e:	b29b      	uxth	r3, r3
 8006550:	3b01      	subs	r3, #1
 8006552:	b29a      	uxth	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2220      	movs	r2, #32
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b40      	cmp	r3, #64	; 0x40
 800656a:	d10b      	bne.n	8006584 <I2C_MasterReceive_RXNE+0xfa>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MemRxCpltCallback(hi2c);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006582:	e03c      	b.n	80065fe <I2C_MasterReceive_RXNE+0x174>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2212      	movs	r2, #18
 8006590:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800659a:	e030      	b.n	80065fe <I2C_MasterReceive_RXNE+0x174>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065aa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	691a      	ldr	r2, [r3, #16]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCallback(hi2c);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80065ea:	e008      	b.n	80065fe <I2C_MasterReceive_RXNE+0x174>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065fa:	605a      	str	r2, [r3, #4]
}
 80065fc:	e7ff      	b.n	80065fe <I2C_MasterReceive_RXNE+0x174>
 80065fe:	bf00      	nop
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006612:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006618:	b29b      	uxth	r3, r3
 800661a:	2b04      	cmp	r3, #4
 800661c:	d11b      	bne.n	8006656 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800662c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	691a      	ldr	r2, [r3, #16]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664a:	b29b      	uxth	r3, r3
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006654:	e0bf      	b.n	80067d6 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 3U)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665a:	b29b      	uxth	r3, r3
 800665c:	2b03      	cmp	r3, #3
 800665e:	d129      	bne.n	80066b4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800666e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b04      	cmp	r3, #4
 8006674:	d00a      	beq.n	800668c <I2C_MasterReceive_BTF+0x86>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b02      	cmp	r3, #2
 800667a:	d007      	beq.n	800668c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800668a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	691a      	ldr	r2, [r3, #16]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	1c5a      	adds	r2, r3, #1
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	3b01      	subs	r3, #1
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80066b2:	e090      	b.n	80067d6 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 2U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d178      	bne.n	80067b0 <I2C_MasterReceive_BTF+0x1aa>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d002      	beq.n	80066ca <I2C_MasterReceive_BTF+0xc4>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b10      	cmp	r3, #16
 80066c8:	d108      	bne.n	80066dc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	e019      	b.n	8006710 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d002      	beq.n	80066e8 <I2C_MasterReceive_BTF+0xe2>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d108      	bne.n	80066fa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066f6:	601a      	str	r2, [r3, #0]
 80066f8:	e00a      	b.n	8006710 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2b10      	cmp	r3, #16
 80066fe:	d007      	beq.n	8006710 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800670e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	691a      	ldr	r2, [r3, #16]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800672c:	b29b      	uxth	r3, r3
 800672e:	3b01      	subs	r3, #1
 8006730:	b29a      	uxth	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	691a      	ldr	r2, [r3, #16]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006752:	b29b      	uxth	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800676a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2220      	movs	r2, #32
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b40      	cmp	r3, #64	; 0x40
 800677e:	d10b      	bne.n	8006798 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MemRxCpltCallback(hi2c);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	4798      	blx	r3
}
 8006796:	e01e      	b.n	80067d6 <I2C_MasterReceive_BTF+0x1d0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2212      	movs	r2, #18
 80067a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	4798      	blx	r3
}
 80067ae:	e012      	b.n	80067d6 <I2C_MasterReceive_BTF+0x1d0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691a      	ldr	r2, [r3, #16]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	b2d2      	uxtb	r2, r2
 80067bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	3b01      	subs	r3, #1
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80067d6:	bf00      	nop
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b40      	cmp	r3, #64	; 0x40
 80067f0:	d117      	bne.n	8006822 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d109      	bne.n	800680e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	461a      	mov	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800680a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800680c:	e067      	b.n	80068de <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006812:	b2db      	uxtb	r3, r3
 8006814:	f043 0301 	orr.w	r3, r3, #1
 8006818:	b2da      	uxtb	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	611a      	str	r2, [r3, #16]
}
 8006820:	e05d      	b.n	80068de <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800682a:	d133      	bne.n	8006894 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b21      	cmp	r3, #33	; 0x21
 8006836:	d109      	bne.n	800684c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683c:	b2db      	uxtb	r3, r3
 800683e:	461a      	mov	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006848:	611a      	str	r2, [r3, #16]
 800684a:	e008      	b.n	800685e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006850:	b2db      	uxtb	r3, r3
 8006852:	f043 0301 	orr.w	r3, r3, #1
 8006856:	b2da      	uxtb	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006862:	2b00      	cmp	r3, #0
 8006864:	d004      	beq.n	8006870 <I2C_Master_SB+0x92>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800686a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686c:	2b00      	cmp	r3, #0
 800686e:	d108      	bne.n	8006882 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006874:	2b00      	cmp	r3, #0
 8006876:	d032      	beq.n	80068de <I2C_Master_SB+0x100>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687e:	2b00      	cmp	r3, #0
 8006880:	d02d      	beq.n	80068de <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006890:	605a      	str	r2, [r3, #4]
}
 8006892:	e024      	b.n	80068de <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10e      	bne.n	80068ba <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	11db      	asrs	r3, r3, #7
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	f003 0306 	and.w	r3, r3, #6
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	f063 030f 	orn	r3, r3, #15
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	611a      	str	r2, [r3, #16]
}
 80068b8:	e011      	b.n	80068de <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d10d      	bne.n	80068de <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	11db      	asrs	r3, r3, #7
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	f003 0306 	and.w	r3, r3, #6
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	f063 030e 	orn	r3, r3, #14
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	611a      	str	r2, [r3, #16]
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006902:	2b00      	cmp	r3, #0
 8006904:	d004      	beq.n	8006910 <I2C_Master_ADD10+0x26>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690c:	2b00      	cmp	r3, #0
 800690e:	d108      	bne.n	8006922 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00c      	beq.n	8006932 <I2C_Master_ADD10+0x48>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691e:	2b00      	cmp	r3, #0
 8006920:	d007      	beq.n	8006932 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006930:	605a      	str	r2, [r3, #4]
  }
}
 8006932:	bf00      	nop
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800693e:	b480      	push	{r7}
 8006940:	b091      	sub	sp, #68	; 0x44
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800694c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006954:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b22      	cmp	r3, #34	; 0x22
 8006966:	f040 8169 	bne.w	8006c3c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10f      	bne.n	8006992 <I2C_Master_ADDR+0x54>
 8006972:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006976:	2b40      	cmp	r3, #64	; 0x40
 8006978:	d10b      	bne.n	8006992 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800697a:	2300      	movs	r3, #0
 800697c:	633b      	str	r3, [r7, #48]	; 0x30
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	633b      	str	r3, [r7, #48]	; 0x30
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	633b      	str	r3, [r7, #48]	; 0x30
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	e160      	b.n	8006c54 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006996:	2b00      	cmp	r3, #0
 8006998:	d11d      	bne.n	80069d6 <I2C_Master_ADDR+0x98>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069a2:	d118      	bne.n	80069d6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069a4:	2300      	movs	r3, #0
 80069a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069c8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	651a      	str	r2, [r3, #80]	; 0x50
 80069d4:	e13e      	b.n	8006c54 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069da:	b29b      	uxth	r3, r3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d113      	bne.n	8006a08 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069e0:	2300      	movs	r3, #0
 80069e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	e115      	b.n	8006c34 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	f040 808a 	bne.w	8006b28 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a1a:	d137      	bne.n	8006a8c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a2a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a3a:	d113      	bne.n	8006a64 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a4a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	627b      	str	r3, [r7, #36]	; 0x24
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	e0e7      	b.n	8006c34 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a64:	2300      	movs	r3, #0
 8006a66:	623b      	str	r3, [r7, #32]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	623b      	str	r3, [r7, #32]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	623b      	str	r3, [r7, #32]
 8006a78:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a88:	601a      	str	r2, [r3, #0]
 8006a8a:	e0d3      	b.n	8006c34 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8e:	2b08      	cmp	r3, #8
 8006a90:	d02e      	beq.n	8006af0 <I2C_Master_ADDR+0x1b2>
 8006a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d02b      	beq.n	8006af0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9a:	2b12      	cmp	r3, #18
 8006a9c:	d102      	bne.n	8006aa4 <I2C_Master_ADDR+0x166>
 8006a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d125      	bne.n	8006af0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d00e      	beq.n	8006ac8 <I2C_Master_ADDR+0x18a>
 8006aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d00b      	beq.n	8006ac8 <I2C_Master_ADDR+0x18a>
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	2b10      	cmp	r3, #16
 8006ab4:	d008      	beq.n	8006ac8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	e007      	b.n	8006ad8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ad6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ad8:	2300      	movs	r3, #0
 8006ada:	61fb      	str	r3, [r7, #28]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	61fb      	str	r3, [r7, #28]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	61fb      	str	r3, [r7, #28]
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	e0a1      	b.n	8006c34 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006afe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b00:	2300      	movs	r3, #0
 8006b02:	61bb      	str	r3, [r7, #24]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	61bb      	str	r3, [r7, #24]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	61bb      	str	r3, [r7, #24]
 8006b14:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	e085      	b.n	8006c34 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d14d      	bne.n	8006bce <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d016      	beq.n	8006b66 <I2C_Master_ADDR+0x228>
 8006b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d013      	beq.n	8006b66 <I2C_Master_ADDR+0x228>
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	2b10      	cmp	r3, #16
 8006b42:	d010      	beq.n	8006b66 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b52:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	e007      	b.n	8006b76 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b74:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b84:	d117      	bne.n	8006bb6 <I2C_Master_ADDR+0x278>
 8006b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b8c:	d00b      	beq.n	8006ba6 <I2C_Master_ADDR+0x268>
 8006b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d008      	beq.n	8006ba6 <I2C_Master_ADDR+0x268>
 8006b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b96:	2b08      	cmp	r3, #8
 8006b98:	d005      	beq.n	8006ba6 <I2C_Master_ADDR+0x268>
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9c:	2b10      	cmp	r3, #16
 8006b9e:	d002      	beq.n	8006ba6 <I2C_Master_ADDR+0x268>
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba2:	2b20      	cmp	r3, #32
 8006ba4:	d107      	bne.n	8006bb6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bb4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	617b      	str	r3, [r7, #20]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	617b      	str	r3, [r7, #20]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	617b      	str	r3, [r7, #20]
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	e032      	b.n	8006c34 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006bdc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bec:	d117      	bne.n	8006c1e <I2C_Master_ADDR+0x2e0>
 8006bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006bf4:	d00b      	beq.n	8006c0e <I2C_Master_ADDR+0x2d0>
 8006bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d008      	beq.n	8006c0e <I2C_Master_ADDR+0x2d0>
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfe:	2b08      	cmp	r3, #8
 8006c00:	d005      	beq.n	8006c0e <I2C_Master_ADDR+0x2d0>
 8006c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c04:	2b10      	cmp	r3, #16
 8006c06:	d002      	beq.n	8006c0e <I2C_Master_ADDR+0x2d0>
 8006c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	d107      	bne.n	8006c1e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c1c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c1e:	2300      	movs	r3, #0
 8006c20:	613b      	str	r3, [r7, #16]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	613b      	str	r3, [r7, #16]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	613b      	str	r3, [r7, #16]
 8006c32:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006c3a:	e00b      	b.n	8006c54 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	60fb      	str	r3, [r7, #12]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	68fb      	ldr	r3, [r7, #12]
}
 8006c52:	e7ff      	b.n	8006c54 <I2C_Master_ADDR+0x316>
 8006c54:	bf00      	nop
 8006c56:	3744      	adds	r7, #68	; 0x44
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c6e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d02c      	beq.n	8006cd4 <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	781a      	ldrb	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	3b01      	subs	r3, #1
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d115      	bne.n	8006cd4 <I2C_SlaveTransmit_TXE+0x74>
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	2b29      	cmp	r3, #41	; 0x29
 8006cac:	d112      	bne.n	8006cd4 <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cbc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2221      	movs	r2, #33	; 0x21
 8006cc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2228      	movs	r2, #40	; 0x28
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006cd4:	bf00      	nop
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d011      	beq.n	8006d12 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	781a      	ldrb	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d2c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d02d      	beq.n	8006d94 <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	691a      	ldr	r2, [r3, #16]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d42:	b2d2      	uxtb	r2, r2
 8006d44:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d115      	bne.n	8006d94 <I2C_SlaveReceive_RXNE+0x76>
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
 8006d6a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d6c:	d112      	bne.n	8006d94 <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d7c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2222      	movs	r2, #34	; 0x22
 8006d82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2228      	movs	r2, #40	; 0x28
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006d94:	bf00      	nop
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d012      	beq.n	8006dd4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	691a      	ldr	r2, [r3, #16]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	b2d2      	uxtb	r2, r2
 8006dba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc0:	1c5a      	adds	r2, r3, #1
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006dea:	2300      	movs	r3, #0
 8006dec:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006dfa:	2b28      	cmp	r3, #40	; 0x28
 8006dfc:	d127      	bne.n	8006e4e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e0c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	089b      	lsrs	r3, r3, #2
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	09db      	lsrs	r3, r3, #7
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d103      	bne.n	8006e32 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	81bb      	strh	r3, [r7, #12]
 8006e30:	e002      	b.n	8006e38 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e44:	89ba      	ldrh	r2, [r7, #12]
 8006e46:	7bf9      	ldrb	r1, [r7, #15]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006e4c:	e00e      	b.n	8006e6c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60bb      	str	r3, [r7, #8]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	60bb      	str	r3, [r7, #8]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	60bb      	str	r3, [r7, #8]
 8006e62:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006e6c:	bf00      	nop
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e82:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685a      	ldr	r2, [r3, #4]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e92:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006e94:	2300      	movs	r3, #0
 8006e96:	60bb      	str	r3, [r7, #8]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	60bb      	str	r3, [r7, #8]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f042 0201 	orr.w	r2, r2, #1
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ec0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ed0:	d172      	bne.n	8006fb8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	2b22      	cmp	r3, #34	; 0x22
 8006ed6:	d002      	beq.n	8006ede <I2C_Slave_STOPF+0x6a>
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
 8006eda:	2b2a      	cmp	r3, #42	; 0x2a
 8006edc:	d135      	bne.n	8006f4a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d005      	beq.n	8006f02 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efa:	f043 0204 	orr.w	r2, r3, #4
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f10:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fd feca 	bl	8004cb0 <HAL_DMA_GetState>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d049      	beq.n	8006fb6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f26:	4a6b      	ldr	r2, [pc, #428]	; (80070d4 <I2C_Slave_STOPF+0x260>)
 8006f28:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fd fd12 	bl	8004958 <HAL_DMA_Abort_IT>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d03d      	beq.n	8006fb6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f44:	4610      	mov	r0, r2
 8006f46:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f48:	e035      	b.n	8006fb6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d005      	beq.n	8006f6e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	f043 0204 	orr.w	r2, r3, #4
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fd fe94 	bl	8004cb0 <HAL_DMA_GetState>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d014      	beq.n	8006fb8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f92:	4a50      	ldr	r2, [pc, #320]	; (80070d4 <I2C_Slave_STOPF+0x260>)
 8006f94:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fd fcdc 	bl	8004958 <HAL_DMA_Abort_IT>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d008      	beq.n	8006fb8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	4798      	blx	r3
 8006fb4:	e000      	b.n	8006fb8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006fb6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d03e      	beq.n	8007040 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b04      	cmp	r3, #4
 8006fce:	d112      	bne.n	8006ff6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	691a      	ldr	r2, [r3, #16]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fda:	b2d2      	uxtb	r2, r2
 8006fdc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe2:	1c5a      	adds	r2, r3, #1
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007000:	2b40      	cmp	r3, #64	; 0x40
 8007002:	d112      	bne.n	800702a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691a      	ldr	r2, [r3, #16]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	b2d2      	uxtb	r2, r2
 8007010:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007020:	b29b      	uxth	r3, r3
 8007022:	3b01      	subs	r3, #1
 8007024:	b29a      	uxth	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800702e:	b29b      	uxth	r3, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007038:	f043 0204 	orr.w	r2, r3, #4
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f8b9 	bl	80071c0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800704e:	e03c      	b.n	80070ca <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007050:	7bfb      	ldrb	r3, [r7, #15]
 8007052:	2b2a      	cmp	r3, #42	; 0x2a
 8007054:	d10a      	bne.n	800706c <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2228      	movs	r2, #40	; 0x28
 8007060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b28      	cmp	r3, #40	; 0x28
 8007076:	d112      	bne.n	800709e <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a17      	ldr	r2, [pc, #92]	; (80070d8 <I2C_Slave_STOPF+0x264>)
 800707c:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ListenCpltCallback(hi2c);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	4798      	blx	r3
}
 800709c:	e015      	b.n	80070ca <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a2:	2b22      	cmp	r3, #34	; 0x22
 80070a4:	d002      	beq.n	80070ac <I2C_Slave_STOPF+0x238>
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
 80070a8:	2b22      	cmp	r3, #34	; 0x22
 80070aa:	d10e      	bne.n	80070ca <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2220      	movs	r2, #32
 80070b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	4798      	blx	r3
}
 80070ca:	bf00      	nop
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	0800742d 	.word	0x0800742d
 80070d8:	ffff0000 	.word	0xffff0000

080070dc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ea:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	2b08      	cmp	r3, #8
 80070f6:	d002      	beq.n	80070fe <I2C_Slave_AF+0x22>
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2b20      	cmp	r3, #32
 80070fc:	d12a      	bne.n	8007154 <I2C_Slave_AF+0x78>
 80070fe:	7bfb      	ldrb	r3, [r7, #15]
 8007100:	2b28      	cmp	r3, #40	; 0x28
 8007102:	d127      	bne.n	8007154 <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a2d      	ldr	r2, [pc, #180]	; (80071bc <I2C_Slave_AF+0xe0>)
 8007108:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007118:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007122:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007132:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2220      	movs	r2, #32
 800713e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007152:	e02f      	b.n	80071b4 <I2C_Slave_AF+0xd8>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007154:	7bfb      	ldrb	r3, [r7, #15]
 8007156:	2b21      	cmp	r3, #33	; 0x21
 8007158:	d127      	bne.n	80071aa <I2C_Slave_AF+0xce>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a17      	ldr	r2, [pc, #92]	; (80071bc <I2C_Slave_AF+0xe0>)
 800715e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2221      	movs	r2, #33	; 0x21
 8007164:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2220      	movs	r2, #32
 800716a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007184:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800718e:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800719e:	601a      	str	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	4798      	blx	r3
}
 80071a8:	e004      	b.n	80071b4 <I2C_Slave_AF+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071b2:	615a      	str	r2, [r3, #20]
}
 80071b4:	bf00      	nop
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	ffff0000 	.word	0xffff0000

080071c0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80071d8:	7bbb      	ldrb	r3, [r7, #14]
 80071da:	2b10      	cmp	r3, #16
 80071dc:	d002      	beq.n	80071e4 <I2C_ITError+0x24>
 80071de:	7bbb      	ldrb	r3, [r7, #14]
 80071e0:	2b40      	cmp	r3, #64	; 0x40
 80071e2:	d10a      	bne.n	80071fa <I2C_ITError+0x3a>
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
 80071e6:	2b22      	cmp	r3, #34	; 0x22
 80071e8:	d107      	bne.n	80071fa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071f8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
 80071fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007200:	2b28      	cmp	r3, #40	; 0x28
 8007202:	d107      	bne.n	8007214 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2228      	movs	r2, #40	; 0x28
 800720e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007212:	e015      	b.n	8007240 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800721e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007222:	d00a      	beq.n	800723a <I2C_ITError+0x7a>
 8007224:	7bfb      	ldrb	r3, [r7, #15]
 8007226:	2b60      	cmp	r3, #96	; 0x60
 8007228:	d007      	beq.n	800723a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2220      	movs	r2, #32
 800722e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800724a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800724e:	d162      	bne.n	8007316 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800725e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007264:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b01      	cmp	r3, #1
 800726c:	d020      	beq.n	80072b0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007272:	4a6c      	ldr	r2, [pc, #432]	; (8007424 <I2C_ITError+0x264>)
 8007274:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727a:	4618      	mov	r0, r3
 800727c:	f7fd fb6c 	bl	8004958 <HAL_DMA_Abort_IT>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 808b 	beq.w	800739e <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f022 0201 	bic.w	r2, r2, #1
 8007296:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2220      	movs	r2, #32
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80072aa:	4610      	mov	r0, r2
 80072ac:	4798      	blx	r3
 80072ae:	e076      	b.n	800739e <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b4:	4a5b      	ldr	r2, [pc, #364]	; (8007424 <I2C_ITError+0x264>)
 80072b6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fd fb4b 	bl	8004958 <HAL_DMA_Abort_IT>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d06a      	beq.n	800739e <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d2:	2b40      	cmp	r3, #64	; 0x40
 80072d4:	d10b      	bne.n	80072ee <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	691a      	ldr	r2, [r3, #16]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	b2d2      	uxtb	r2, r2
 80072e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	1c5a      	adds	r2, r3, #1
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f022 0201 	bic.w	r2, r2, #1
 80072fc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2220      	movs	r2, #32
 8007302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007310:	4610      	mov	r0, r2
 8007312:	4798      	blx	r3
 8007314:	e043      	b.n	800739e <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b60      	cmp	r3, #96	; 0x60
 8007320:	d126      	bne.n	8007370 <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2220      	movs	r2, #32
 8007326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733a:	2b40      	cmp	r3, #64	; 0x40
 800733c:	d10b      	bne.n	8007356 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	691a      	ldr	r2, [r3, #16]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	b2d2      	uxtb	r2, r2
 800734a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f022 0201 	bic.w	r2, r2, #1
 8007364:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	4798      	blx	r3
 800736e:	e016      	b.n	800739e <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737a:	2b40      	cmp	r3, #64	; 0x40
 800737c:	d10b      	bne.n	8007396 <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	691a      	ldr	r2, [r3, #16]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	b2d2      	uxtb	r2, r2
 800738a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10e      	bne.n	80073cc <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d109      	bne.n	80073cc <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d104      	bne.n	80073cc <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d007      	beq.n	80073dc <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073da:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073e2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e8:	f003 0304 	and.w	r3, r3, #4
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d114      	bne.n	800741a <I2C_ITError+0x25a>
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
 80073f2:	2b28      	cmp	r3, #40	; 0x28
 80073f4:	d111      	bne.n	800741a <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a0b      	ldr	r2, [pc, #44]	; (8007428 <I2C_ITError+0x268>)
 80073fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2220      	movs	r2, #32
 8007406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800741a:	bf00      	nop
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	0800742d 	.word	0x0800742d
 8007428:	ffff0000 	.word	0xffff0000

0800742c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007444:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007446:	4b4c      	ldr	r3, [pc, #304]	; (8007578 <I2C_DMAAbort+0x14c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	08db      	lsrs	r3, r3, #3
 800744c:	4a4b      	ldr	r2, [pc, #300]	; (800757c <I2C_DMAAbort+0x150>)
 800744e:	fba2 2303 	umull	r2, r3, r2, r3
 8007452:	0a1a      	lsrs	r2, r3, #8
 8007454:	4613      	mov	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	00da      	lsls	r2, r3, #3
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d106      	bne.n	8007474 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	f043 0220 	orr.w	r2, r3, #32
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007472:	e00a      	b.n	800748a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3b01      	subs	r3, #1
 8007478:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007488:	d0ea      	beq.n	8007460 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800748e:	2b00      	cmp	r3, #0
 8007490:	d003      	beq.n	800749a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007496:	2200      	movs	r2, #0
 8007498:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d003      	beq.n	80074aa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a6:	2200      	movs	r2, #0
 80074a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074b8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2200      	movs	r2, #0
 80074be:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074cc:	2200      	movs	r2, #0
 80074ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d003      	beq.n	80074e0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074dc:	2200      	movs	r2, #0
 80074de:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 0201 	bic.w	r2, r2, #1
 80074ee:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b60      	cmp	r3, #96	; 0x60
 80074fa:	d10f      	bne.n	800751c <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	2220      	movs	r2, #32
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	2200      	movs	r2, #0
 8007510:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007516:	6978      	ldr	r0, [r7, #20]
 8007518:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800751a:	e028      	b.n	800756e <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800751c:	7cfb      	ldrb	r3, [r7, #19]
 800751e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007522:	2b28      	cmp	r3, #40	; 0x28
 8007524:	d117      	bne.n	8007556 <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f042 0201 	orr.w	r2, r2, #1
 8007534:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007544:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2200      	movs	r2, #0
 800754a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2228      	movs	r2, #40	; 0x28
 8007550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007554:	e007      	b.n	8007566 <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2220      	movs	r2, #32
 800755a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCallback(hi2c);
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756a:	6978      	ldr	r0, [r7, #20]
 800756c:	4798      	blx	r3
}
 800756e:	bf00      	nop
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	20000004 	.word	0x20000004
 800757c:	14f8b589 	.word	0x14f8b589

08007580 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007588:	2300      	movs	r3, #0
 800758a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800758c:	4b13      	ldr	r3, [pc, #76]	; (80075dc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	08db      	lsrs	r3, r3, #3
 8007592:	4a13      	ldr	r2, [pc, #76]	; (80075e0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007594:	fba2 2303 	umull	r2, r3, r2, r3
 8007598:	0a1a      	lsrs	r2, r3, #8
 800759a:	4613      	mov	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3b01      	subs	r3, #1
 80075a6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d107      	bne.n	80075be <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	f043 0220 	orr.w	r2, r3, #32
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e008      	b.n	80075d0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075cc:	d0e9      	beq.n	80075a2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3714      	adds	r7, #20
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	20000004 	.word	0x20000004
 80075e0:	14f8b589 	.word	0x14f8b589

080075e4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80075f4:	d103      	bne.n	80075fe <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80075fc:	e007      	b.n	800760e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007602:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007606:	d102      	bne.n	800760e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2208      	movs	r2, #8
 800760c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800760e:	bf00      	nop
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
	...

0800761c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8007620:	4b06      	ldr	r3, [pc, #24]	; (800763c <HAL_PWR_PVD_IRQHandler+0x20>)
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d005      	beq.n	8007638 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800762c:	f000 f808 	bl	8007640 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8007630:	4b02      	ldr	r3, [pc, #8]	; (800763c <HAL_PWR_PVD_IRQHandler+0x20>)
 8007632:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007636:	615a      	str	r2, [r3, #20]
  }
}
 8007638:	bf00      	nop
 800763a:	bd80      	pop	{r7, pc}
 800763c:	40013c00 	.word	0x40013c00

08007640 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8007640:	b480      	push	{r7}
 8007642:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8007644:	bf00      	nop
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
	...

08007650 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d101      	bne.n	8007662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e314      	b.n	8007c8c <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b0f      	cmp	r3, #15
 8007668:	d903      	bls.n	8007672 <HAL_RCC_OscConfig+0x22>
 800766a:	21e6      	movs	r1, #230	; 0xe6
 800766c:	4897      	ldr	r0, [pc, #604]	; (80078cc <HAL_RCC_OscConfig+0x27c>)
 800766e:	f7fa ff64 	bl	800253a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	f000 8088 	beq.w	8007790 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00d      	beq.n	80076a4 <HAL_RCC_OscConfig+0x54>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007690:	d008      	beq.n	80076a4 <HAL_RCC_OscConfig+0x54>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800769a:	d003      	beq.n	80076a4 <HAL_RCC_OscConfig+0x54>
 800769c:	21eb      	movs	r1, #235	; 0xeb
 800769e:	488b      	ldr	r0, [pc, #556]	; (80078cc <HAL_RCC_OscConfig+0x27c>)
 80076a0:	f7fa ff4b 	bl	800253a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076a4:	4b8a      	ldr	r3, [pc, #552]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f003 030c 	and.w	r3, r3, #12
 80076ac:	2b04      	cmp	r3, #4
 80076ae:	d00c      	beq.n	80076ca <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076b0:	4b87      	ldr	r3, [pc, #540]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076b8:	2b08      	cmp	r3, #8
 80076ba:	d112      	bne.n	80076e2 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076bc:	4b84      	ldr	r3, [pc, #528]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076c8:	d10b      	bne.n	80076e2 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076ca:	4b81      	ldr	r3, [pc, #516]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d05b      	beq.n	800778e <HAL_RCC_OscConfig+0x13e>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d157      	bne.n	800778e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e2d4      	b.n	8007c8c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076ea:	d106      	bne.n	80076fa <HAL_RCC_OscConfig+0xaa>
 80076ec:	4b78      	ldr	r3, [pc, #480]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a77      	ldr	r2, [pc, #476]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 80076f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	e01d      	b.n	8007736 <HAL_RCC_OscConfig+0xe6>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007702:	d10c      	bne.n	800771e <HAL_RCC_OscConfig+0xce>
 8007704:	4b72      	ldr	r3, [pc, #456]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a71      	ldr	r2, [pc, #452]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 800770a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800770e:	6013      	str	r3, [r2, #0]
 8007710:	4b6f      	ldr	r3, [pc, #444]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a6e      	ldr	r2, [pc, #440]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 8007716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800771a:	6013      	str	r3, [r2, #0]
 800771c:	e00b      	b.n	8007736 <HAL_RCC_OscConfig+0xe6>
 800771e:	4b6c      	ldr	r3, [pc, #432]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a6b      	ldr	r2, [pc, #428]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 8007724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007728:	6013      	str	r3, [r2, #0]
 800772a:	4b69      	ldr	r3, [pc, #420]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a68      	ldr	r2, [pc, #416]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 8007730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007734:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d013      	beq.n	8007766 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800773e:	f7fb fdbf 	bl	80032c0 <HAL_GetTick>
 8007742:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007744:	e008      	b.n	8007758 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007746:	f7fb fdbb 	bl	80032c0 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	2b64      	cmp	r3, #100	; 0x64
 8007752:	d901      	bls.n	8007758 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e299      	b.n	8007c8c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007758:	4b5d      	ldr	r3, [pc, #372]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d0f0      	beq.n	8007746 <HAL_RCC_OscConfig+0xf6>
 8007764:	e014      	b.n	8007790 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007766:	f7fb fdab 	bl	80032c0 <HAL_GetTick>
 800776a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800776c:	e008      	b.n	8007780 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800776e:	f7fb fda7 	bl	80032c0 <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	2b64      	cmp	r3, #100	; 0x64
 800777a:	d901      	bls.n	8007780 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	e285      	b.n	8007c8c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007780:	4b53      	ldr	r3, [pc, #332]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1f0      	bne.n	800776e <HAL_RCC_OscConfig+0x11e>
 800778c:	e000      	b.n	8007790 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800778e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d079      	beq.n	8007890 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d008      	beq.n	80077b6 <HAL_RCC_OscConfig+0x166>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d004      	beq.n	80077b6 <HAL_RCC_OscConfig+0x166>
 80077ac:	f240 111d 	movw	r1, #285	; 0x11d
 80077b0:	4846      	ldr	r0, [pc, #280]	; (80078cc <HAL_RCC_OscConfig+0x27c>)
 80077b2:	f7fa fec2 	bl	800253a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	2b1f      	cmp	r3, #31
 80077bc:	d904      	bls.n	80077c8 <HAL_RCC_OscConfig+0x178>
 80077be:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80077c2:	4842      	ldr	r0, [pc, #264]	; (80078cc <HAL_RCC_OscConfig+0x27c>)
 80077c4:	f7fa feb9 	bl	800253a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077c8:	4b41      	ldr	r3, [pc, #260]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f003 030c 	and.w	r3, r3, #12
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00b      	beq.n	80077ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077d4:	4b3e      	ldr	r3, [pc, #248]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077dc:	2b08      	cmp	r3, #8
 80077de:	d11c      	bne.n	800781a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077e0:	4b3b      	ldr	r3, [pc, #236]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d116      	bne.n	800781a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077ec:	4b38      	ldr	r3, [pc, #224]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0302 	and.w	r3, r3, #2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d005      	beq.n	8007804 <HAL_RCC_OscConfig+0x1b4>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d001      	beq.n	8007804 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e243      	b.n	8007c8c <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007804:	4b32      	ldr	r3, [pc, #200]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	00db      	lsls	r3, r3, #3
 8007812:	492f      	ldr	r1, [pc, #188]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 8007814:	4313      	orrs	r3, r2
 8007816:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007818:	e03a      	b.n	8007890 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d020      	beq.n	8007864 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007822:	4b2c      	ldr	r3, [pc, #176]	; (80078d4 <HAL_RCC_OscConfig+0x284>)
 8007824:	2201      	movs	r2, #1
 8007826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007828:	f7fb fd4a 	bl	80032c0 <HAL_GetTick>
 800782c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800782e:	e008      	b.n	8007842 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007830:	f7fb fd46 	bl	80032c0 <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	2b02      	cmp	r3, #2
 800783c:	d901      	bls.n	8007842 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e224      	b.n	8007c8c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007842:	4b23      	ldr	r3, [pc, #140]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d0f0      	beq.n	8007830 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800784e:	4b20      	ldr	r3, [pc, #128]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	00db      	lsls	r3, r3, #3
 800785c:	491c      	ldr	r1, [pc, #112]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 800785e:	4313      	orrs	r3, r2
 8007860:	600b      	str	r3, [r1, #0]
 8007862:	e015      	b.n	8007890 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007864:	4b1b      	ldr	r3, [pc, #108]	; (80078d4 <HAL_RCC_OscConfig+0x284>)
 8007866:	2200      	movs	r2, #0
 8007868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800786a:	f7fb fd29 	bl	80032c0 <HAL_GetTick>
 800786e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007870:	e008      	b.n	8007884 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007872:	f7fb fd25 	bl	80032c0 <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	2b02      	cmp	r3, #2
 800787e:	d901      	bls.n	8007884 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e203      	b.n	8007c8c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007884:	4b12      	ldr	r3, [pc, #72]	; (80078d0 <HAL_RCC_OscConfig+0x280>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1f0      	bne.n	8007872 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0308 	and.w	r3, r3, #8
 8007898:	2b00      	cmp	r3, #0
 800789a:	d045      	beq.n	8007928 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d008      	beq.n	80078b6 <HAL_RCC_OscConfig+0x266>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d004      	beq.n	80078b6 <HAL_RCC_OscConfig+0x266>
 80078ac:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80078b0:	4806      	ldr	r0, [pc, #24]	; (80078cc <HAL_RCC_OscConfig+0x27c>)
 80078b2:	f7fa fe42 	bl	800253a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d01e      	beq.n	80078fc <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078be:	4b06      	ldr	r3, [pc, #24]	; (80078d8 <HAL_RCC_OscConfig+0x288>)
 80078c0:	2201      	movs	r2, #1
 80078c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078c4:	f7fb fcfc 	bl	80032c0 <HAL_GetTick>
 80078c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078ca:	e010      	b.n	80078ee <HAL_RCC_OscConfig+0x29e>
 80078cc:	0800f188 	.word	0x0800f188
 80078d0:	40023800 	.word	0x40023800
 80078d4:	42470000 	.word	0x42470000
 80078d8:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078dc:	f7fb fcf0 	bl	80032c0 <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d901      	bls.n	80078ee <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e1ce      	b.n	8007c8c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078ee:	4b5e      	ldr	r3, [pc, #376]	; (8007a68 <HAL_RCC_OscConfig+0x418>)
 80078f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078f2:	f003 0302 	and.w	r3, r3, #2
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0f0      	beq.n	80078dc <HAL_RCC_OscConfig+0x28c>
 80078fa:	e015      	b.n	8007928 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078fc:	4b5b      	ldr	r3, [pc, #364]	; (8007a6c <HAL_RCC_OscConfig+0x41c>)
 80078fe:	2200      	movs	r2, #0
 8007900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007902:	f7fb fcdd 	bl	80032c0 <HAL_GetTick>
 8007906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007908:	e008      	b.n	800791c <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800790a:	f7fb fcd9 	bl	80032c0 <HAL_GetTick>
 800790e:	4602      	mov	r2, r0
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	2b02      	cmp	r3, #2
 8007916:	d901      	bls.n	800791c <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e1b7      	b.n	8007c8c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800791c:	4b52      	ldr	r3, [pc, #328]	; (8007a68 <HAL_RCC_OscConfig+0x418>)
 800791e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007920:	f003 0302 	and.w	r3, r3, #2
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1f0      	bne.n	800790a <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 80b0 	beq.w	8007a96 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007936:	2300      	movs	r3, #0
 8007938:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00c      	beq.n	800795c <HAL_RCC_OscConfig+0x30c>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d008      	beq.n	800795c <HAL_RCC_OscConfig+0x30c>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	2b05      	cmp	r3, #5
 8007950:	d004      	beq.n	800795c <HAL_RCC_OscConfig+0x30c>
 8007952:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8007956:	4846      	ldr	r0, [pc, #280]	; (8007a70 <HAL_RCC_OscConfig+0x420>)
 8007958:	f7fa fdef 	bl	800253a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800795c:	4b42      	ldr	r3, [pc, #264]	; (8007a68 <HAL_RCC_OscConfig+0x418>)
 800795e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10f      	bne.n	8007988 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007968:	2300      	movs	r3, #0
 800796a:	60bb      	str	r3, [r7, #8]
 800796c:	4b3e      	ldr	r3, [pc, #248]	; (8007a68 <HAL_RCC_OscConfig+0x418>)
 800796e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007970:	4a3d      	ldr	r2, [pc, #244]	; (8007a68 <HAL_RCC_OscConfig+0x418>)
 8007972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007976:	6413      	str	r3, [r2, #64]	; 0x40
 8007978:	4b3b      	ldr	r3, [pc, #236]	; (8007a68 <HAL_RCC_OscConfig+0x418>)
 800797a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007980:	60bb      	str	r3, [r7, #8]
 8007982:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007984:	2301      	movs	r3, #1
 8007986:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007988:	4b3a      	ldr	r3, [pc, #232]	; (8007a74 <HAL_RCC_OscConfig+0x424>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007990:	2b00      	cmp	r3, #0
 8007992:	d118      	bne.n	80079c6 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007994:	4b37      	ldr	r3, [pc, #220]	; (8007a74 <HAL_RCC_OscConfig+0x424>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a36      	ldr	r2, [pc, #216]	; (8007a74 <HAL_RCC_OscConfig+0x424>)
 800799a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800799e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079a0:	f7fb fc8e 	bl	80032c0 <HAL_GetTick>
 80079a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079a6:	e008      	b.n	80079ba <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079a8:	f7fb fc8a 	bl	80032c0 <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d901      	bls.n	80079ba <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e168      	b.n	8007c8c <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079ba:	4b2e      	ldr	r3, [pc, #184]	; (8007a74 <HAL_RCC_OscConfig+0x424>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d0f0      	beq.n	80079a8 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d106      	bne.n	80079dc <HAL_RCC_OscConfig+0x38c>
 80079ce:	4b26      	ldr	r3, [pc, #152]	; (8007a68 <HAL_RCC_OscConfig+0x418>)
 80079d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d2:	4a25      	ldr	r2, [pc, #148]	; (8007a68 <HAL_RCC_OscConfig+0x418>)
 80079d4:	f043 0301 	orr.w	r3, r3, #1
 80079d8:	6713      	str	r3, [r2, #112]	; 0x70
 80079da:	e01c      	b.n	8007a16 <HAL_RCC_OscConfig+0x3c6>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	2b05      	cmp	r3, #5
 80079e2:	d10c      	bne.n	80079fe <HAL_RCC_OscConfig+0x3ae>
 80079e4:	4b20      	ldr	r3, [pc, #128]	; (8007a68 <HAL_RCC_OscConfig+0x418>)
 80079e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e8:	4a1f      	ldr	r2, [pc, #124]	; (8007a68 <HAL_RCC_OscConfig+0x418>)
 80079ea:	f043 0304 	orr.w	r3, r3, #4
 80079ee:	6713      	str	r3, [r2, #112]	; 0x70
 80079f0:	4b1d      	ldr	r3, [pc, #116]	; (8007a68 <HAL_RCC_OscConfig+0x418>)
 80079f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f4:	4a1c      	ldr	r2, [pc, #112]	; (8007a68 <HAL_RCC_OscConfig+0x418>)
 80079f6:	f043 0301 	orr.w	r3, r3, #1
 80079fa:	6713      	str	r3, [r2, #112]	; 0x70
 80079fc:	e00b      	b.n	8007a16 <HAL_RCC_OscConfig+0x3c6>
 80079fe:	4b1a      	ldr	r3, [pc, #104]	; (8007a68 <HAL_RCC_OscConfig+0x418>)
 8007a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a02:	4a19      	ldr	r2, [pc, #100]	; (8007a68 <HAL_RCC_OscConfig+0x418>)
 8007a04:	f023 0301 	bic.w	r3, r3, #1
 8007a08:	6713      	str	r3, [r2, #112]	; 0x70
 8007a0a:	4b17      	ldr	r3, [pc, #92]	; (8007a68 <HAL_RCC_OscConfig+0x418>)
 8007a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0e:	4a16      	ldr	r2, [pc, #88]	; (8007a68 <HAL_RCC_OscConfig+0x418>)
 8007a10:	f023 0304 	bic.w	r3, r3, #4
 8007a14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d015      	beq.n	8007a4a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a1e:	f7fb fc4f 	bl	80032c0 <HAL_GetTick>
 8007a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a24:	e00a      	b.n	8007a3c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a26:	f7fb fc4b 	bl	80032c0 <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d901      	bls.n	8007a3c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e127      	b.n	8007c8c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a3c:	4b0a      	ldr	r3, [pc, #40]	; (8007a68 <HAL_RCC_OscConfig+0x418>)
 8007a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a40:	f003 0302 	and.w	r3, r3, #2
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d0ee      	beq.n	8007a26 <HAL_RCC_OscConfig+0x3d6>
 8007a48:	e01c      	b.n	8007a84 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a4a:	f7fb fc39 	bl	80032c0 <HAL_GetTick>
 8007a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a50:	e012      	b.n	8007a78 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a52:	f7fb fc35 	bl	80032c0 <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d909      	bls.n	8007a78 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e111      	b.n	8007c8c <HAL_RCC_OscConfig+0x63c>
 8007a68:	40023800 	.word	0x40023800
 8007a6c:	42470e80 	.word	0x42470e80
 8007a70:	0800f188 	.word	0x0800f188
 8007a74:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a78:	4b86      	ldr	r3, [pc, #536]	; (8007c94 <HAL_RCC_OscConfig+0x644>)
 8007a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a7c:	f003 0302 	and.w	r3, r3, #2
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1e6      	bne.n	8007a52 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a84:	7dfb      	ldrb	r3, [r7, #23]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d105      	bne.n	8007a96 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a8a:	4b82      	ldr	r3, [pc, #520]	; (8007c94 <HAL_RCC_OscConfig+0x644>)
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	4a81      	ldr	r2, [pc, #516]	; (8007c94 <HAL_RCC_OscConfig+0x644>)
 8007a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00c      	beq.n	8007ab8 <HAL_RCC_OscConfig+0x468>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d008      	beq.n	8007ab8 <HAL_RCC_OscConfig+0x468>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d004      	beq.n	8007ab8 <HAL_RCC_OscConfig+0x468>
 8007aae:	f240 11cd 	movw	r1, #461	; 0x1cd
 8007ab2:	4879      	ldr	r0, [pc, #484]	; (8007c98 <HAL_RCC_OscConfig+0x648>)
 8007ab4:	f7fa fd41 	bl	800253a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 80e4 	beq.w	8007c8a <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ac2:	4b74      	ldr	r3, [pc, #464]	; (8007c94 <HAL_RCC_OscConfig+0x644>)
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f003 030c 	and.w	r3, r3, #12
 8007aca:	2b08      	cmp	r3, #8
 8007acc:	f000 80a5 	beq.w	8007c1a <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	f040 8089 	bne.w	8007bec <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d009      	beq.n	8007af6 <HAL_RCC_OscConfig+0x4a6>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	69db      	ldr	r3, [r3, #28]
 8007ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007aea:	d004      	beq.n	8007af6 <HAL_RCC_OscConfig+0x4a6>
 8007aec:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8007af0:	4869      	ldr	r0, [pc, #420]	; (8007c98 <HAL_RCC_OscConfig+0x648>)
 8007af2:	f7fa fd22 	bl	800253a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	2b3f      	cmp	r3, #63	; 0x3f
 8007afc:	d904      	bls.n	8007b08 <HAL_RCC_OscConfig+0x4b8>
 8007afe:	f240 11d7 	movw	r1, #471	; 0x1d7
 8007b02:	4865      	ldr	r0, [pc, #404]	; (8007c98 <HAL_RCC_OscConfig+0x648>)
 8007b04:	f7fa fd19 	bl	800253a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	2b31      	cmp	r3, #49	; 0x31
 8007b0e:	d904      	bls.n	8007b1a <HAL_RCC_OscConfig+0x4ca>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b14:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007b18:	d904      	bls.n	8007b24 <HAL_RCC_OscConfig+0x4d4>
 8007b1a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8007b1e:	485e      	ldr	r0, [pc, #376]	; (8007c98 <HAL_RCC_OscConfig+0x648>)
 8007b20:	f7fa fd0b 	bl	800253a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d010      	beq.n	8007b4e <HAL_RCC_OscConfig+0x4fe>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d00c      	beq.n	8007b4e <HAL_RCC_OscConfig+0x4fe>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b38:	2b06      	cmp	r3, #6
 8007b3a:	d008      	beq.n	8007b4e <HAL_RCC_OscConfig+0x4fe>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b40:	2b08      	cmp	r3, #8
 8007b42:	d004      	beq.n	8007b4e <HAL_RCC_OscConfig+0x4fe>
 8007b44:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007b48:	4853      	ldr	r0, [pc, #332]	; (8007c98 <HAL_RCC_OscConfig+0x648>)
 8007b4a:	f7fa fcf6 	bl	800253a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d903      	bls.n	8007b5e <HAL_RCC_OscConfig+0x50e>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5a:	2b0f      	cmp	r3, #15
 8007b5c:	d904      	bls.n	8007b68 <HAL_RCC_OscConfig+0x518>
 8007b5e:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8007b62:	484d      	ldr	r0, [pc, #308]	; (8007c98 <HAL_RCC_OscConfig+0x648>)
 8007b64:	f7fa fce9 	bl	800253a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b68:	4b4c      	ldr	r3, [pc, #304]	; (8007c9c <HAL_RCC_OscConfig+0x64c>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b6e:	f7fb fba7 	bl	80032c0 <HAL_GetTick>
 8007b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b74:	e008      	b.n	8007b88 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b76:	f7fb fba3 	bl	80032c0 <HAL_GetTick>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d901      	bls.n	8007b88 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e081      	b.n	8007c8c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b88:	4b42      	ldr	r3, [pc, #264]	; (8007c94 <HAL_RCC_OscConfig+0x644>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1f0      	bne.n	8007b76 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	69da      	ldr	r2, [r3, #28]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	431a      	orrs	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	019b      	lsls	r3, r3, #6
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007baa:	085b      	lsrs	r3, r3, #1
 8007bac:	3b01      	subs	r3, #1
 8007bae:	041b      	lsls	r3, r3, #16
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb6:	061b      	lsls	r3, r3, #24
 8007bb8:	4936      	ldr	r1, [pc, #216]	; (8007c94 <HAL_RCC_OscConfig+0x644>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bbe:	4b37      	ldr	r3, [pc, #220]	; (8007c9c <HAL_RCC_OscConfig+0x64c>)
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bc4:	f7fb fb7c 	bl	80032c0 <HAL_GetTick>
 8007bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bca:	e008      	b.n	8007bde <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bcc:	f7fb fb78 	bl	80032c0 <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d901      	bls.n	8007bde <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e056      	b.n	8007c8c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bde:	4b2d      	ldr	r3, [pc, #180]	; (8007c94 <HAL_RCC_OscConfig+0x644>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d0f0      	beq.n	8007bcc <HAL_RCC_OscConfig+0x57c>
 8007bea:	e04e      	b.n	8007c8a <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bec:	4b2b      	ldr	r3, [pc, #172]	; (8007c9c <HAL_RCC_OscConfig+0x64c>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bf2:	f7fb fb65 	bl	80032c0 <HAL_GetTick>
 8007bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bf8:	e008      	b.n	8007c0c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bfa:	f7fb fb61 	bl	80032c0 <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d901      	bls.n	8007c0c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e03f      	b.n	8007c8c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c0c:	4b21      	ldr	r3, [pc, #132]	; (8007c94 <HAL_RCC_OscConfig+0x644>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1f0      	bne.n	8007bfa <HAL_RCC_OscConfig+0x5aa>
 8007c18:	e037      	b.n	8007c8a <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d101      	bne.n	8007c26 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e032      	b.n	8007c8c <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c26:	4b1b      	ldr	r3, [pc, #108]	; (8007c94 <HAL_RCC_OscConfig+0x644>)
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d028      	beq.n	8007c86 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d121      	bne.n	8007c86 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d11a      	bne.n	8007c86 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c56:	4013      	ands	r3, r2
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c5c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d111      	bne.n	8007c86 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6c:	085b      	lsrs	r3, r3, #1
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d107      	bne.n	8007c86 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c80:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d001      	beq.n	8007c8a <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e000      	b.n	8007c8c <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3718      	adds	r7, #24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	40023800 	.word	0x40023800
 8007c98:	0800f188 	.word	0x0800f188
 8007c9c:	42470060 	.word	0x42470060

08007ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d101      	bne.n	8007cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e174      	b.n	8007f9e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d003      	beq.n	8007cc4 <HAL_RCC_ClockConfig+0x24>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b0f      	cmp	r3, #15
 8007cc2:	d904      	bls.n	8007cce <HAL_RCC_ClockConfig+0x2e>
 8007cc4:	f240 215a 	movw	r1, #602	; 0x25a
 8007cc8:	487b      	ldr	r0, [pc, #492]	; (8007eb8 <HAL_RCC_ClockConfig+0x218>)
 8007cca:	f7fa fc36 	bl	800253a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d019      	beq.n	8007d08 <HAL_RCC_ClockConfig+0x68>
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d016      	beq.n	8007d08 <HAL_RCC_ClockConfig+0x68>
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d013      	beq.n	8007d08 <HAL_RCC_ClockConfig+0x68>
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	2b03      	cmp	r3, #3
 8007ce4:	d010      	beq.n	8007d08 <HAL_RCC_ClockConfig+0x68>
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b04      	cmp	r3, #4
 8007cea:	d00d      	beq.n	8007d08 <HAL_RCC_ClockConfig+0x68>
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	2b05      	cmp	r3, #5
 8007cf0:	d00a      	beq.n	8007d08 <HAL_RCC_ClockConfig+0x68>
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2b06      	cmp	r3, #6
 8007cf6:	d007      	beq.n	8007d08 <HAL_RCC_ClockConfig+0x68>
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2b07      	cmp	r3, #7
 8007cfc:	d004      	beq.n	8007d08 <HAL_RCC_ClockConfig+0x68>
 8007cfe:	f240 215b 	movw	r1, #603	; 0x25b
 8007d02:	486d      	ldr	r0, [pc, #436]	; (8007eb8 <HAL_RCC_ClockConfig+0x218>)
 8007d04:	f7fa fc19 	bl	800253a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d08:	4b6c      	ldr	r3, [pc, #432]	; (8007ebc <HAL_RCC_ClockConfig+0x21c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0307 	and.w	r3, r3, #7
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d90c      	bls.n	8007d30 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d16:	4b69      	ldr	r3, [pc, #420]	; (8007ebc <HAL_RCC_ClockConfig+0x21c>)
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	b2d2      	uxtb	r2, r2
 8007d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d1e:	4b67      	ldr	r3, [pc, #412]	; (8007ebc <HAL_RCC_ClockConfig+0x21c>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0307 	and.w	r3, r3, #7
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d001      	beq.n	8007d30 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e136      	b.n	8007f9e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0302 	and.w	r3, r3, #2
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d049      	beq.n	8007dd0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0304 	and.w	r3, r3, #4
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d005      	beq.n	8007d54 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d48:	4b5d      	ldr	r3, [pc, #372]	; (8007ec0 <HAL_RCC_ClockConfig+0x220>)
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	4a5c      	ldr	r2, [pc, #368]	; (8007ec0 <HAL_RCC_ClockConfig+0x220>)
 8007d4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0308 	and.w	r3, r3, #8
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d005      	beq.n	8007d6c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d60:	4b57      	ldr	r3, [pc, #348]	; (8007ec0 <HAL_RCC_ClockConfig+0x220>)
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	4a56      	ldr	r2, [pc, #344]	; (8007ec0 <HAL_RCC_ClockConfig+0x220>)
 8007d66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d024      	beq.n	8007dbe <HAL_RCC_ClockConfig+0x11e>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	2b80      	cmp	r3, #128	; 0x80
 8007d7a:	d020      	beq.n	8007dbe <HAL_RCC_ClockConfig+0x11e>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	2b90      	cmp	r3, #144	; 0x90
 8007d82:	d01c      	beq.n	8007dbe <HAL_RCC_ClockConfig+0x11e>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	2ba0      	cmp	r3, #160	; 0xa0
 8007d8a:	d018      	beq.n	8007dbe <HAL_RCC_ClockConfig+0x11e>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	2bb0      	cmp	r3, #176	; 0xb0
 8007d92:	d014      	beq.n	8007dbe <HAL_RCC_ClockConfig+0x11e>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	2bc0      	cmp	r3, #192	; 0xc0
 8007d9a:	d010      	beq.n	8007dbe <HAL_RCC_ClockConfig+0x11e>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	2bd0      	cmp	r3, #208	; 0xd0
 8007da2:	d00c      	beq.n	8007dbe <HAL_RCC_ClockConfig+0x11e>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	2be0      	cmp	r3, #224	; 0xe0
 8007daa:	d008      	beq.n	8007dbe <HAL_RCC_ClockConfig+0x11e>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	2bf0      	cmp	r3, #240	; 0xf0
 8007db2:	d004      	beq.n	8007dbe <HAL_RCC_ClockConfig+0x11e>
 8007db4:	f240 217e 	movw	r1, #638	; 0x27e
 8007db8:	483f      	ldr	r0, [pc, #252]	; (8007eb8 <HAL_RCC_ClockConfig+0x218>)
 8007dba:	f7fa fbbe 	bl	800253a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007dbe:	4b40      	ldr	r3, [pc, #256]	; (8007ec0 <HAL_RCC_ClockConfig+0x220>)
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	493d      	ldr	r1, [pc, #244]	; (8007ec0 <HAL_RCC_ClockConfig+0x220>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d059      	beq.n	8007e90 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d010      	beq.n	8007e06 <HAL_RCC_ClockConfig+0x166>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d00c      	beq.n	8007e06 <HAL_RCC_ClockConfig+0x166>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d008      	beq.n	8007e06 <HAL_RCC_ClockConfig+0x166>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	2b03      	cmp	r3, #3
 8007dfa:	d004      	beq.n	8007e06 <HAL_RCC_ClockConfig+0x166>
 8007dfc:	f240 2185 	movw	r1, #645	; 0x285
 8007e00:	482d      	ldr	r0, [pc, #180]	; (8007eb8 <HAL_RCC_ClockConfig+0x218>)
 8007e02:	f7fa fb9a 	bl	800253a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d107      	bne.n	8007e1e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e0e:	4b2c      	ldr	r3, [pc, #176]	; (8007ec0 <HAL_RCC_ClockConfig+0x220>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d119      	bne.n	8007e4e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e0bf      	b.n	8007f9e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d003      	beq.n	8007e2e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d107      	bne.n	8007e3e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e2e:	4b24      	ldr	r3, [pc, #144]	; (8007ec0 <HAL_RCC_ClockConfig+0x220>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d109      	bne.n	8007e4e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e0af      	b.n	8007f9e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e3e:	4b20      	ldr	r3, [pc, #128]	; (8007ec0 <HAL_RCC_ClockConfig+0x220>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 0302 	and.w	r3, r3, #2
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e0a7      	b.n	8007f9e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e4e:	4b1c      	ldr	r3, [pc, #112]	; (8007ec0 <HAL_RCC_ClockConfig+0x220>)
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f023 0203 	bic.w	r2, r3, #3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	4919      	ldr	r1, [pc, #100]	; (8007ec0 <HAL_RCC_ClockConfig+0x220>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e60:	f7fb fa2e 	bl	80032c0 <HAL_GetTick>
 8007e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e66:	e00a      	b.n	8007e7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e68:	f7fb fa2a 	bl	80032c0 <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d901      	bls.n	8007e7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e08f      	b.n	8007f9e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e7e:	4b10      	ldr	r3, [pc, #64]	; (8007ec0 <HAL_RCC_ClockConfig+0x220>)
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f003 020c 	and.w	r2, r3, #12
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d1eb      	bne.n	8007e68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e90:	4b0a      	ldr	r3, [pc, #40]	; (8007ebc <HAL_RCC_ClockConfig+0x21c>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0307 	and.w	r3, r3, #7
 8007e98:	683a      	ldr	r2, [r7, #0]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d212      	bcs.n	8007ec4 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e9e:	4b07      	ldr	r3, [pc, #28]	; (8007ebc <HAL_RCC_ClockConfig+0x21c>)
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	b2d2      	uxtb	r2, r2
 8007ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ea6:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <HAL_RCC_ClockConfig+0x21c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 0307 	and.w	r3, r3, #7
 8007eae:	683a      	ldr	r2, [r7, #0]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d007      	beq.n	8007ec4 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e072      	b.n	8007f9e <HAL_RCC_ClockConfig+0x2fe>
 8007eb8:	0800f188 	.word	0x0800f188
 8007ebc:	40023c00 	.word	0x40023c00
 8007ec0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d025      	beq.n	8007f1c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d018      	beq.n	8007f0a <HAL_RCC_ClockConfig+0x26a>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ee0:	d013      	beq.n	8007f0a <HAL_RCC_ClockConfig+0x26a>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007eea:	d00e      	beq.n	8007f0a <HAL_RCC_ClockConfig+0x26a>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007ef4:	d009      	beq.n	8007f0a <HAL_RCC_ClockConfig+0x26a>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007efe:	d004      	beq.n	8007f0a <HAL_RCC_ClockConfig+0x26a>
 8007f00:	f240 21c3 	movw	r1, #707	; 0x2c3
 8007f04:	4828      	ldr	r0, [pc, #160]	; (8007fa8 <HAL_RCC_ClockConfig+0x308>)
 8007f06:	f7fa fb18 	bl	800253a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f0a:	4b28      	ldr	r3, [pc, #160]	; (8007fac <HAL_RCC_ClockConfig+0x30c>)
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	4925      	ldr	r1, [pc, #148]	; (8007fac <HAL_RCC_ClockConfig+0x30c>)
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0308 	and.w	r3, r3, #8
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d026      	beq.n	8007f76 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d018      	beq.n	8007f62 <HAL_RCC_ClockConfig+0x2c2>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f38:	d013      	beq.n	8007f62 <HAL_RCC_ClockConfig+0x2c2>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007f42:	d00e      	beq.n	8007f62 <HAL_RCC_ClockConfig+0x2c2>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007f4c:	d009      	beq.n	8007f62 <HAL_RCC_ClockConfig+0x2c2>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007f56:	d004      	beq.n	8007f62 <HAL_RCC_ClockConfig+0x2c2>
 8007f58:	f240 21ca 	movw	r1, #714	; 0x2ca
 8007f5c:	4812      	ldr	r0, [pc, #72]	; (8007fa8 <HAL_RCC_ClockConfig+0x308>)
 8007f5e:	f7fa faec 	bl	800253a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f62:	4b12      	ldr	r3, [pc, #72]	; (8007fac <HAL_RCC_ClockConfig+0x30c>)
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	490e      	ldr	r1, [pc, #56]	; (8007fac <HAL_RCC_ClockConfig+0x30c>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f76:	f000 f821 	bl	8007fbc <HAL_RCC_GetSysClockFreq>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	4b0b      	ldr	r3, [pc, #44]	; (8007fac <HAL_RCC_ClockConfig+0x30c>)
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	091b      	lsrs	r3, r3, #4
 8007f82:	f003 030f 	and.w	r3, r3, #15
 8007f86:	490a      	ldr	r1, [pc, #40]	; (8007fb0 <HAL_RCC_ClockConfig+0x310>)
 8007f88:	5ccb      	ldrb	r3, [r1, r3]
 8007f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f8e:	4a09      	ldr	r2, [pc, #36]	; (8007fb4 <HAL_RCC_ClockConfig+0x314>)
 8007f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007f92:	4b09      	ldr	r3, [pc, #36]	; (8007fb8 <HAL_RCC_ClockConfig+0x318>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fa fc82 	bl	80028a0 <HAL_InitTick>

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	0800f188 	.word	0x0800f188
 8007fac:	40023800 	.word	0x40023800
 8007fb0:	0800f594 	.word	0x0800f594
 8007fb4:	20000004 	.word	0x20000004
 8007fb8:	20000008 	.word	0x20000008

08007fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fc0:	b094      	sub	sp, #80	; 0x50
 8007fc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8007fc8:	2300      	movs	r3, #0
 8007fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fcc:	2300      	movs	r3, #0
 8007fce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007fd4:	4b79      	ldr	r3, [pc, #484]	; (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f003 030c 	and.w	r3, r3, #12
 8007fdc:	2b08      	cmp	r3, #8
 8007fde:	d00d      	beq.n	8007ffc <HAL_RCC_GetSysClockFreq+0x40>
 8007fe0:	2b08      	cmp	r3, #8
 8007fe2:	f200 80e1 	bhi.w	80081a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d002      	beq.n	8007ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	d003      	beq.n	8007ff6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007fee:	e0db      	b.n	80081a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ff0:	4b73      	ldr	r3, [pc, #460]	; (80081c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007ff2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007ff4:	e0db      	b.n	80081ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ff6:	4b73      	ldr	r3, [pc, #460]	; (80081c4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007ff8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007ffa:	e0d8      	b.n	80081ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ffc:	4b6f      	ldr	r3, [pc, #444]	; (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008004:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008006:	4b6d      	ldr	r3, [pc, #436]	; (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d063      	beq.n	80080da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008012:	4b6a      	ldr	r3, [pc, #424]	; (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	099b      	lsrs	r3, r3, #6
 8008018:	2200      	movs	r2, #0
 800801a:	63bb      	str	r3, [r7, #56]	; 0x38
 800801c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800801e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008024:	633b      	str	r3, [r7, #48]	; 0x30
 8008026:	2300      	movs	r3, #0
 8008028:	637b      	str	r3, [r7, #52]	; 0x34
 800802a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800802e:	4622      	mov	r2, r4
 8008030:	462b      	mov	r3, r5
 8008032:	f04f 0000 	mov.w	r0, #0
 8008036:	f04f 0100 	mov.w	r1, #0
 800803a:	0159      	lsls	r1, r3, #5
 800803c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008040:	0150      	lsls	r0, r2, #5
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	4621      	mov	r1, r4
 8008048:	1a51      	subs	r1, r2, r1
 800804a:	6139      	str	r1, [r7, #16]
 800804c:	4629      	mov	r1, r5
 800804e:	eb63 0301 	sbc.w	r3, r3, r1
 8008052:	617b      	str	r3, [r7, #20]
 8008054:	f04f 0200 	mov.w	r2, #0
 8008058:	f04f 0300 	mov.w	r3, #0
 800805c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008060:	4659      	mov	r1, fp
 8008062:	018b      	lsls	r3, r1, #6
 8008064:	4651      	mov	r1, sl
 8008066:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800806a:	4651      	mov	r1, sl
 800806c:	018a      	lsls	r2, r1, #6
 800806e:	4651      	mov	r1, sl
 8008070:	ebb2 0801 	subs.w	r8, r2, r1
 8008074:	4659      	mov	r1, fp
 8008076:	eb63 0901 	sbc.w	r9, r3, r1
 800807a:	f04f 0200 	mov.w	r2, #0
 800807e:	f04f 0300 	mov.w	r3, #0
 8008082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800808a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800808e:	4690      	mov	r8, r2
 8008090:	4699      	mov	r9, r3
 8008092:	4623      	mov	r3, r4
 8008094:	eb18 0303 	adds.w	r3, r8, r3
 8008098:	60bb      	str	r3, [r7, #8]
 800809a:	462b      	mov	r3, r5
 800809c:	eb49 0303 	adc.w	r3, r9, r3
 80080a0:	60fb      	str	r3, [r7, #12]
 80080a2:	f04f 0200 	mov.w	r2, #0
 80080a6:	f04f 0300 	mov.w	r3, #0
 80080aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80080ae:	4629      	mov	r1, r5
 80080b0:	024b      	lsls	r3, r1, #9
 80080b2:	4621      	mov	r1, r4
 80080b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80080b8:	4621      	mov	r1, r4
 80080ba:	024a      	lsls	r2, r1, #9
 80080bc:	4610      	mov	r0, r2
 80080be:	4619      	mov	r1, r3
 80080c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080c2:	2200      	movs	r2, #0
 80080c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80080c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080cc:	f7f8 f888 	bl	80001e0 <__aeabi_uldivmod>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	4613      	mov	r3, r2
 80080d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080d8:	e058      	b.n	800818c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080da:	4b38      	ldr	r3, [pc, #224]	; (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	099b      	lsrs	r3, r3, #6
 80080e0:	2200      	movs	r2, #0
 80080e2:	4618      	mov	r0, r3
 80080e4:	4611      	mov	r1, r2
 80080e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80080ea:	623b      	str	r3, [r7, #32]
 80080ec:	2300      	movs	r3, #0
 80080ee:	627b      	str	r3, [r7, #36]	; 0x24
 80080f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80080f4:	4642      	mov	r2, r8
 80080f6:	464b      	mov	r3, r9
 80080f8:	f04f 0000 	mov.w	r0, #0
 80080fc:	f04f 0100 	mov.w	r1, #0
 8008100:	0159      	lsls	r1, r3, #5
 8008102:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008106:	0150      	lsls	r0, r2, #5
 8008108:	4602      	mov	r2, r0
 800810a:	460b      	mov	r3, r1
 800810c:	4641      	mov	r1, r8
 800810e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008112:	4649      	mov	r1, r9
 8008114:	eb63 0b01 	sbc.w	fp, r3, r1
 8008118:	f04f 0200 	mov.w	r2, #0
 800811c:	f04f 0300 	mov.w	r3, #0
 8008120:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008124:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008128:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800812c:	ebb2 040a 	subs.w	r4, r2, sl
 8008130:	eb63 050b 	sbc.w	r5, r3, fp
 8008134:	f04f 0200 	mov.w	r2, #0
 8008138:	f04f 0300 	mov.w	r3, #0
 800813c:	00eb      	lsls	r3, r5, #3
 800813e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008142:	00e2      	lsls	r2, r4, #3
 8008144:	4614      	mov	r4, r2
 8008146:	461d      	mov	r5, r3
 8008148:	4643      	mov	r3, r8
 800814a:	18e3      	adds	r3, r4, r3
 800814c:	603b      	str	r3, [r7, #0]
 800814e:	464b      	mov	r3, r9
 8008150:	eb45 0303 	adc.w	r3, r5, r3
 8008154:	607b      	str	r3, [r7, #4]
 8008156:	f04f 0200 	mov.w	r2, #0
 800815a:	f04f 0300 	mov.w	r3, #0
 800815e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008162:	4629      	mov	r1, r5
 8008164:	028b      	lsls	r3, r1, #10
 8008166:	4621      	mov	r1, r4
 8008168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800816c:	4621      	mov	r1, r4
 800816e:	028a      	lsls	r2, r1, #10
 8008170:	4610      	mov	r0, r2
 8008172:	4619      	mov	r1, r3
 8008174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008176:	2200      	movs	r2, #0
 8008178:	61bb      	str	r3, [r7, #24]
 800817a:	61fa      	str	r2, [r7, #28]
 800817c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008180:	f7f8 f82e 	bl	80001e0 <__aeabi_uldivmod>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	4613      	mov	r3, r2
 800818a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800818c:	4b0b      	ldr	r3, [pc, #44]	; (80081bc <HAL_RCC_GetSysClockFreq+0x200>)
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	0c1b      	lsrs	r3, r3, #16
 8008192:	f003 0303 	and.w	r3, r3, #3
 8008196:	3301      	adds	r3, #1
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800819c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800819e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80081a6:	e002      	b.n	80081ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081a8:	4b05      	ldr	r3, [pc, #20]	; (80081c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80081aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80081ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3750      	adds	r7, #80	; 0x50
 80081b4:	46bd      	mov	sp, r7
 80081b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081ba:	bf00      	nop
 80081bc:	40023800 	.word	0x40023800
 80081c0:	00f42400 	.word	0x00f42400
 80081c4:	007a1200 	.word	0x007a1200

080081c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081c8:	b480      	push	{r7}
 80081ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081cc:	4b03      	ldr	r3, [pc, #12]	; (80081dc <HAL_RCC_GetHCLKFreq+0x14>)
 80081ce:	681b      	ldr	r3, [r3, #0]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	20000004 	.word	0x20000004

080081e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80081e4:	f7ff fff0 	bl	80081c8 <HAL_RCC_GetHCLKFreq>
 80081e8:	4602      	mov	r2, r0
 80081ea:	4b05      	ldr	r3, [pc, #20]	; (8008200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	0a9b      	lsrs	r3, r3, #10
 80081f0:	f003 0307 	and.w	r3, r3, #7
 80081f4:	4903      	ldr	r1, [pc, #12]	; (8008204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081f6:	5ccb      	ldrb	r3, [r1, r3]
 80081f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	40023800 	.word	0x40023800
 8008204:	0800f5a4 	.word	0x0800f5a4

08008208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800820c:	f7ff ffdc 	bl	80081c8 <HAL_RCC_GetHCLKFreq>
 8008210:	4602      	mov	r2, r0
 8008212:	4b05      	ldr	r3, [pc, #20]	; (8008228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	0b5b      	lsrs	r3, r3, #13
 8008218:	f003 0307 	and.w	r3, r3, #7
 800821c:	4903      	ldr	r1, [pc, #12]	; (800822c <HAL_RCC_GetPCLK2Freq+0x24>)
 800821e:	5ccb      	ldrb	r3, [r1, r3]
 8008220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008224:	4618      	mov	r0, r3
 8008226:	bd80      	pop	{r7, pc}
 8008228:	40023800 	.word	0x40023800
 800822c:	0800f5a4 	.word	0x0800f5a4

08008230 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	220f      	movs	r2, #15
 800823e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008240:	4b12      	ldr	r3, [pc, #72]	; (800828c <HAL_RCC_GetClockConfig+0x5c>)
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f003 0203 	and.w	r2, r3, #3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800824c:	4b0f      	ldr	r3, [pc, #60]	; (800828c <HAL_RCC_GetClockConfig+0x5c>)
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008258:	4b0c      	ldr	r3, [pc, #48]	; (800828c <HAL_RCC_GetClockConfig+0x5c>)
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008264:	4b09      	ldr	r3, [pc, #36]	; (800828c <HAL_RCC_GetClockConfig+0x5c>)
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	08db      	lsrs	r3, r3, #3
 800826a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008272:	4b07      	ldr	r3, [pc, #28]	; (8008290 <HAL_RCC_GetClockConfig+0x60>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 0207 	and.w	r2, r3, #7
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	601a      	str	r2, [r3, #0]
}
 800827e:	bf00      	nop
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	40023800 	.word	0x40023800
 8008290:	40023c00 	.word	0x40023c00

08008294 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80082a0:	2300      	movs	r3, #0
 80082a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d003      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b0f      	cmp	r3, #15
 80082b2:	d904      	bls.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80082b4:	f640 11d7 	movw	r1, #2519	; 0x9d7
 80082b8:	4834      	ldr	r0, [pc, #208]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80082ba:	f7fa f93e 	bl	800253a <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 0301 	and.w	r3, r3, #1
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d105      	bne.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d066      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d903      	bls.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	2b07      	cmp	r3, #7
 80082e4:	d904      	bls.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80082e6:	f640 11de 	movw	r1, #2526	; 0x9de
 80082ea:	4828      	ldr	r0, [pc, #160]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80082ec:	f7fa f925 	bl	800253a <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	2b31      	cmp	r3, #49	; 0x31
 80082f6:	d904      	bls.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8008300:	d904      	bls.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8008302:	f640 11df 	movw	r1, #2527	; 0x9df
 8008306:	4821      	ldr	r0, [pc, #132]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8008308:	f7fa f917 	bl	800253a <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d903      	bls.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x88>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	2b3f      	cmp	r3, #63	; 0x3f
 800831a:	d904      	bls.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x92>
 800831c:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8008320:	481a      	ldr	r0, [pc, #104]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8008322:	f7fa f90a 	bl	800253a <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008326:	4b1a      	ldr	r3, [pc, #104]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8008328:	2200      	movs	r2, #0
 800832a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800832c:	f7fa ffc8 	bl	80032c0 <HAL_GetTick>
 8008330:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008332:	e008      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008334:	f7fa ffc4 	bl	80032c0 <HAL_GetTick>
 8008338:	4602      	mov	r2, r0
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	2b02      	cmp	r3, #2
 8008340:	d901      	bls.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008342:	2303      	movs	r3, #3
 8008344:	e1b3      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008346:	4b13      	ldr	r3, [pc, #76]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1f0      	bne.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	019b      	lsls	r3, r3, #6
 800835c:	431a      	orrs	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	071b      	lsls	r3, r3, #28
 8008364:	490b      	ldr	r1, [pc, #44]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8008366:	4313      	orrs	r3, r2
 8008368:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800836c:	4b08      	ldr	r3, [pc, #32]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800836e:	2201      	movs	r2, #1
 8008370:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008372:	f7fa ffa5 	bl	80032c0 <HAL_GetTick>
 8008376:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008378:	e00e      	b.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800837a:	f7fa ffa1 	bl	80032c0 <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	2b02      	cmp	r3, #2
 8008386:	d907      	bls.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e190      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800838c:	0800f1fc 	.word	0x0800f1fc
 8008390:	42470068 	.word	0x42470068
 8008394:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008398:	4b88      	ldr	r3, [pc, #544]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d0ea      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0302 	and.w	r3, r3, #2
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f000 8173 	beq.w	8008698 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ba:	f000 80a6 	beq.w	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083c6:	f000 80a0 	beq.w	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	4a7c      	ldr	r2, [pc, #496]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	f000 809a 	beq.w	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	4a7a      	ldr	r2, [pc, #488]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	f000 8094 	beq.w	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	4a78      	ldr	r2, [pc, #480]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	f000 808e 	beq.w	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	4a76      	ldr	r2, [pc, #472]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	f000 8088 	beq.w	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	4a74      	ldr	r2, [pc, #464]	; (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	f000 8082 	beq.w	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	4a72      	ldr	r2, [pc, #456]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d07c      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	4a70      	ldr	r2, [pc, #448]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d077      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	4a6f      	ldr	r2, [pc, #444]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d072      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	4a6d      	ldr	r2, [pc, #436]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d06d      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	4a6c      	ldr	r2, [pc, #432]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d068      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	4a6a      	ldr	r2, [pc, #424]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d063      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	4a69      	ldr	r2, [pc, #420]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d05e      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	4a67      	ldr	r2, [pc, #412]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d059      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	4a66      	ldr	r2, [pc, #408]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d054      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	4a64      	ldr	r2, [pc, #400]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d04f      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	4a63      	ldr	r2, [pc, #396]	; (80085fc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d04a      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	4a61      	ldr	r2, [pc, #388]	; (8008600 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d045      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	4a60      	ldr	r2, [pc, #384]	; (8008604 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d040      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	4a5e      	ldr	r2, [pc, #376]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d03b      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	4a5d      	ldr	r2, [pc, #372]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d036      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	4a5b      	ldr	r2, [pc, #364]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d031      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	4a5a      	ldr	r2, [pc, #360]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d02c      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	4a58      	ldr	r2, [pc, #352]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d027      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	4a57      	ldr	r2, [pc, #348]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d022      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	4a55      	ldr	r2, [pc, #340]	; (8008620 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d01d      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	4a54      	ldr	r2, [pc, #336]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d018      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	4a52      	ldr	r2, [pc, #328]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d013      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	4a51      	ldr	r2, [pc, #324]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d00e      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	4a4f      	ldr	r2, [pc, #316]	; (8008630 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d009      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	4a4e      	ldr	r2, [pc, #312]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d004      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008500:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 8008504:	484c      	ldr	r0, [pc, #304]	; (8008638 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8008506:	f7fa f818 	bl	800253a <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800850a:	2300      	movs	r3, #0
 800850c:	60fb      	str	r3, [r7, #12]
 800850e:	4b2b      	ldr	r3, [pc, #172]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008512:	4a2a      	ldr	r2, [pc, #168]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008518:	6413      	str	r3, [r2, #64]	; 0x40
 800851a:	4b28      	ldr	r3, [pc, #160]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800851c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008522:	60fb      	str	r3, [r7, #12]
 8008524:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008526:	4b45      	ldr	r3, [pc, #276]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a44      	ldr	r2, [pc, #272]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800852c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008530:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008532:	f7fa fec5 	bl	80032c0 <HAL_GetTick>
 8008536:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008538:	e008      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800853a:	f7fa fec1 	bl	80032c0 <HAL_GetTick>
 800853e:	4602      	mov	r2, r0
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	2b02      	cmp	r3, #2
 8008546:	d901      	bls.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e0b0      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800854c:	4b3b      	ldr	r3, [pc, #236]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008554:	2b00      	cmp	r3, #0
 8008556:	d0f0      	beq.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008558:	4b18      	ldr	r3, [pc, #96]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800855a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800855c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008560:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d073      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	429a      	cmp	r2, r3
 8008574:	d06c      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008576:	4b11      	ldr	r3, [pc, #68]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800857a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800857e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008580:	4b2f      	ldr	r3, [pc, #188]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8008582:	2201      	movs	r2, #1
 8008584:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008586:	4b2e      	ldr	r3, [pc, #184]	; (8008640 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8008588:	2200      	movs	r2, #0
 800858a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800858c:	4a0b      	ldr	r2, [pc, #44]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008592:	4b0a      	ldr	r3, [pc, #40]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	2b01      	cmp	r3, #1
 800859c:	d158      	bne.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800859e:	f7fa fe8f 	bl	80032c0 <HAL_GetTick>
 80085a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085a4:	e04e      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085a6:	f7fa fe8b 	bl	80032c0 <HAL_GetTick>
 80085aa:	4602      	mov	r2, r0
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d945      	bls.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e078      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80085bc:	40023800 	.word	0x40023800
 80085c0:	00020300 	.word	0x00020300
 80085c4:	00030300 	.word	0x00030300
 80085c8:	00040300 	.word	0x00040300
 80085cc:	00050300 	.word	0x00050300
 80085d0:	00060300 	.word	0x00060300
 80085d4:	00070300 	.word	0x00070300
 80085d8:	00080300 	.word	0x00080300
 80085dc:	00090300 	.word	0x00090300
 80085e0:	000a0300 	.word	0x000a0300
 80085e4:	000b0300 	.word	0x000b0300
 80085e8:	000c0300 	.word	0x000c0300
 80085ec:	000d0300 	.word	0x000d0300
 80085f0:	000e0300 	.word	0x000e0300
 80085f4:	000f0300 	.word	0x000f0300
 80085f8:	00100300 	.word	0x00100300
 80085fc:	00110300 	.word	0x00110300
 8008600:	00120300 	.word	0x00120300
 8008604:	00130300 	.word	0x00130300
 8008608:	00140300 	.word	0x00140300
 800860c:	00150300 	.word	0x00150300
 8008610:	00160300 	.word	0x00160300
 8008614:	00170300 	.word	0x00170300
 8008618:	00180300 	.word	0x00180300
 800861c:	00190300 	.word	0x00190300
 8008620:	001a0300 	.word	0x001a0300
 8008624:	001b0300 	.word	0x001b0300
 8008628:	001c0300 	.word	0x001c0300
 800862c:	001d0300 	.word	0x001d0300
 8008630:	001e0300 	.word	0x001e0300
 8008634:	001f0300 	.word	0x001f0300
 8008638:	0800f1fc 	.word	0x0800f1fc
 800863c:	40007000 	.word	0x40007000
 8008640:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008644:	4b1c      	ldr	r3, [pc, #112]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008648:	f003 0302 	and.w	r3, r3, #2
 800864c:	2b00      	cmp	r3, #0
 800864e:	d0aa      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800865c:	d10d      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800865e:	4b16      	ldr	r3, [pc, #88]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800866e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008672:	4911      	ldr	r1, [pc, #68]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008674:	4313      	orrs	r3, r2
 8008676:	608b      	str	r3, [r1, #8]
 8008678:	e005      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800867a:	4b0f      	ldr	r3, [pc, #60]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	4a0e      	ldr	r2, [pc, #56]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008680:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008684:	6093      	str	r3, [r2, #8]
 8008686:	4b0c      	ldr	r3, [pc, #48]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008688:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008692:	4909      	ldr	r1, [pc, #36]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008694:	4313      	orrs	r3, r2
 8008696:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 0308 	and.w	r3, r3, #8
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d003      	beq.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	7d1a      	ldrb	r2, [r3, #20]
 80086a8:	4b04      	ldr	r3, [pc, #16]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80086aa:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3718      	adds	r7, #24
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	40023800 	.word	0x40023800
 80086bc:	424711e0 	.word	0x424711e0

080086c0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d101      	bne.n	80086d6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e0e2      	b.n	800889c <HAL_RTC_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a72      	ldr	r2, [pc, #456]	; (80088a4 <HAL_RTC_Init+0x1e4>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d004      	beq.n	80086ea <HAL_RTC_Init+0x2a>
 80086e0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80086e4:	4870      	ldr	r0, [pc, #448]	; (80088a8 <HAL_RTC_Init+0x1e8>)
 80086e6:	f7f9 ff28 	bl	800253a <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	2b40      	cmp	r3, #64	; 0x40
 80086f0:	d008      	beq.n	8008704 <HAL_RTC_Init+0x44>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d004      	beq.n	8008704 <HAL_RTC_Init+0x44>
 80086fa:	f240 1105 	movw	r1, #261	; 0x105
 80086fe:	486a      	ldr	r0, [pc, #424]	; (80088a8 <HAL_RTC_Init+0x1e8>)
 8008700:	f7f9 ff1b 	bl	800253a <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	2b7f      	cmp	r3, #127	; 0x7f
 800870a:	d904      	bls.n	8008716 <HAL_RTC_Init+0x56>
 800870c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008710:	4865      	ldr	r0, [pc, #404]	; (80088a8 <HAL_RTC_Init+0x1e8>)
 8008712:	f7f9 ff12 	bl	800253a <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800871e:	d304      	bcc.n	800872a <HAL_RTC_Init+0x6a>
 8008720:	f240 1107 	movw	r1, #263	; 0x107
 8008724:	4860      	ldr	r0, [pc, #384]	; (80088a8 <HAL_RTC_Init+0x1e8>)
 8008726:	f7f9 ff08 	bl	800253a <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d013      	beq.n	800875a <HAL_RTC_Init+0x9a>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800873a:	d00e      	beq.n	800875a <HAL_RTC_Init+0x9a>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008744:	d009      	beq.n	800875a <HAL_RTC_Init+0x9a>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800874e:	d004      	beq.n	800875a <HAL_RTC_Init+0x9a>
 8008750:	f44f 7184 	mov.w	r1, #264	; 0x108
 8008754:	4854      	ldr	r0, [pc, #336]	; (80088a8 <HAL_RTC_Init+0x1e8>)
 8008756:	f7f9 fef0 	bl	800253a <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d009      	beq.n	8008776 <HAL_RTC_Init+0xb6>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800876a:	d004      	beq.n	8008776 <HAL_RTC_Init+0xb6>
 800876c:	f240 1109 	movw	r1, #265	; 0x109
 8008770:	484d      	ldr	r0, [pc, #308]	; (80088a8 <HAL_RTC_Init+0x1e8>)
 8008772:	f7f9 fee2 	bl	800253a <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d009      	beq.n	8008792 <HAL_RTC_Init+0xd2>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008786:	d004      	beq.n	8008792 <HAL_RTC_Init+0xd2>
 8008788:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800878c:	4846      	ldr	r0, [pc, #280]	; (80088a8 <HAL_RTC_Init+0x1e8>)
 800878e:	f7f9 fed4 	bl	800253a <assert_failed>

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	7f5b      	ldrb	r3, [r3, #29]
 8008796:	b2db      	uxtb	r3, r3
 8008798:	2b00      	cmp	r3, #0
 800879a:	d123      	bne.n	80087e4 <HAL_RTC_Init+0x124>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a41      	ldr	r2, [pc, #260]	; (80088ac <HAL_RTC_Init+0x1ec>)
 80087a6:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a41      	ldr	r2, [pc, #260]	; (80088b0 <HAL_RTC_Init+0x1f0>)
 80087ac:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a40      	ldr	r2, [pc, #256]	; (80088b4 <HAL_RTC_Init+0x1f4>)
 80087b2:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a40      	ldr	r2, [pc, #256]	; (80088b8 <HAL_RTC_Init+0x1f8>)
 80087b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a3f      	ldr	r2, [pc, #252]	; (80088bc <HAL_RTC_Init+0x1fc>)
 80087be:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(RTC_TAMPER2_SUPPORT)
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
#endif /* RTC_TAMPER2_SUPPORT */

    if (hrtc->MspInitCallback == NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d102      	bne.n	80087ce <HAL_RTC_Init+0x10e>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a3d      	ldr	r2, [pc, #244]	; (80088c0 <HAL_RTC_Init+0x200>)
 80087cc:	635a      	str	r2, [r3, #52]	; 0x34
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	4798      	blx	r3

    if (hrtc->MspDeInitCallback == NULL)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d102      	bne.n	80087e4 <HAL_RTC_Init+0x124>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a38      	ldr	r2, [pc, #224]	; (80088c4 <HAL_RTC_Init+0x204>)
 80087e2:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_RTC_MspInit(hrtc);
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2202      	movs	r2, #2
 80087e8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	22ca      	movs	r2, #202	; 0xca
 80087f0:	625a      	str	r2, [r3, #36]	; 0x24
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2253      	movs	r2, #83	; 0x53
 80087f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fdc8 	bl	8009390 <RTC_EnterInitMode>
 8008800:	4603      	mov	r3, r0
 8008802:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d12c      	bne.n	8008864 <HAL_RTC_Init+0x1a4>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	6812      	ldr	r2, [r2, #0]
 8008814:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800881c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6899      	ldr	r1, [r3, #8]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685a      	ldr	r2, [r3, #4]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	431a      	orrs	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	431a      	orrs	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	430a      	orrs	r2, r1
 800883a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	68d2      	ldr	r2, [r2, #12]
 8008844:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6919      	ldr	r1, [r3, #16]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	041a      	lsls	r2, r3, #16
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	430a      	orrs	r2, r1
 8008858:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fdcf 	bl	80093fe <RTC_ExitInitMode>
 8008860:	4603      	mov	r3, r0
 8008862:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008864:	7bfb      	ldrb	r3, [r7, #15]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d113      	bne.n	8008892 <HAL_RTC_Init+0x1d2>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008878:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	699a      	ldr	r2, [r3, #24]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	430a      	orrs	r2, r1
 800888a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	22ff      	movs	r2, #255	; 0xff
 8008898:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800889a:	7bfb      	ldrb	r3, [r7, #15]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	40002800 	.word	0x40002800
 80088a8:	0800f274 	.word	0x0800f274
 80088ac:	0800932d 	.word	0x0800932d
 80088b0:	08009679 	.word	0x08009679
 80088b4:	080094bb 	.word	0x080094bb
 80088b8:	08009665 	.word	0x08009665
 80088bc:	080094cf 	.word	0x080094cf
 80088c0:	08002699 	.word	0x08002699
 80088c4:	080026f1 	.word	0x080026f1

080088c8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80088c8:	b590      	push	{r4, r7, lr}
 80088ca:	b087      	sub	sp, #28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d007      	beq.n	80088ee <HAL_RTC_SetTime+0x26>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d004      	beq.n	80088ee <HAL_RTC_SetTime+0x26>
 80088e4:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 80088e8:	489a      	ldr	r0, [pc, #616]	; (8008b54 <HAL_RTC_SetTime+0x28c>)
 80088ea:	f7f9 fe26 	bl	800253a <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088f6:	d00d      	beq.n	8008914 <HAL_RTC_SetTime+0x4c>
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008900:	d008      	beq.n	8008914 <HAL_RTC_SetTime+0x4c>
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d004      	beq.n	8008914 <HAL_RTC_SetTime+0x4c>
 800890a:	f240 21b5 	movw	r1, #693	; 0x2b5
 800890e:	4891      	ldr	r0, [pc, #580]	; (8008b54 <HAL_RTC_SetTime+0x28c>)
 8008910:	f7f9 fe13 	bl	800253a <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d009      	beq.n	8008930 <HAL_RTC_SetTime+0x68>
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008924:	d004      	beq.n	8008930 <HAL_RTC_SetTime+0x68>
 8008926:	f240 21b6 	movw	r1, #694	; 0x2b6
 800892a:	488a      	ldr	r0, [pc, #552]	; (8008b54 <HAL_RTC_SetTime+0x28c>)
 800892c:	f7f9 fe05 	bl	800253a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	7f1b      	ldrb	r3, [r3, #28]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d101      	bne.n	800893c <HAL_RTC_SetTime+0x74>
 8008938:	2302      	movs	r3, #2
 800893a:	e107      	b.n	8008b4c <HAL_RTC_SetTime+0x284>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2201      	movs	r2, #1
 8008940:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2202      	movs	r2, #2
 8008946:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d15c      	bne.n	8008a08 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008958:	2b00      	cmp	r3, #0
 800895a:	d01a      	beq.n	8008992 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d003      	beq.n	800896c <HAL_RTC_SetTime+0xa4>
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	2b0c      	cmp	r3, #12
 800896a:	d904      	bls.n	8008976 <HAL_RTC_SetTime+0xae>
 800896c:	f240 21c1 	movw	r1, #705	; 0x2c1
 8008970:	4878      	ldr	r0, [pc, #480]	; (8008b54 <HAL_RTC_SetTime+0x28c>)
 8008972:	f7f9 fde2 	bl	800253a <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	78db      	ldrb	r3, [r3, #3]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d015      	beq.n	80089aa <HAL_RTC_SetTime+0xe2>
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	78db      	ldrb	r3, [r3, #3]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d011      	beq.n	80089aa <HAL_RTC_SetTime+0xe2>
 8008986:	f240 21c2 	movw	r1, #706	; 0x2c2
 800898a:	4872      	ldr	r0, [pc, #456]	; (8008b54 <HAL_RTC_SetTime+0x28c>)
 800898c:	f7f9 fdd5 	bl	800253a <assert_failed>
 8008990:	e00b      	b.n	80089aa <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	2200      	movs	r2, #0
 8008996:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	2b17      	cmp	r3, #23
 800899e:	d904      	bls.n	80089aa <HAL_RTC_SetTime+0xe2>
 80089a0:	f240 21c7 	movw	r1, #711	; 0x2c7
 80089a4:	486b      	ldr	r0, [pc, #428]	; (8008b54 <HAL_RTC_SetTime+0x28c>)
 80089a6:	f7f9 fdc8 	bl	800253a <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	785b      	ldrb	r3, [r3, #1]
 80089ae:	2b3b      	cmp	r3, #59	; 0x3b
 80089b0:	d904      	bls.n	80089bc <HAL_RTC_SetTime+0xf4>
 80089b2:	f240 21c9 	movw	r1, #713	; 0x2c9
 80089b6:	4867      	ldr	r0, [pc, #412]	; (8008b54 <HAL_RTC_SetTime+0x28c>)
 80089b8:	f7f9 fdbf 	bl	800253a <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	789b      	ldrb	r3, [r3, #2]
 80089c0:	2b3b      	cmp	r3, #59	; 0x3b
 80089c2:	d904      	bls.n	80089ce <HAL_RTC_SetTime+0x106>
 80089c4:	f240 21ca 	movw	r1, #714	; 0x2ca
 80089c8:	4862      	ldr	r0, [pc, #392]	; (8008b54 <HAL_RTC_SetTime+0x28c>)
 80089ca:	f7f9 fdb6 	bl	800253a <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f000 fd38 	bl	8009448 <RTC_ByteToBcd2>
 80089d8:	4603      	mov	r3, r0
 80089da:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	785b      	ldrb	r3, [r3, #1]
 80089e0:	4618      	mov	r0, r3
 80089e2:	f000 fd31 	bl	8009448 <RTC_ByteToBcd2>
 80089e6:	4603      	mov	r3, r0
 80089e8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80089ea:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	789b      	ldrb	r3, [r3, #2]
 80089f0:	4618      	mov	r0, r3
 80089f2:	f000 fd29 	bl	8009448 <RTC_ByteToBcd2>
 80089f6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80089f8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	78db      	ldrb	r3, [r3, #3]
 8008a00:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008a02:	4313      	orrs	r3, r2
 8008a04:	617b      	str	r3, [r7, #20]
 8008a06:	e062      	b.n	8008ace <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d022      	beq.n	8008a5c <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 fd31 	bl	8009482 <RTC_Bcd2ToByte>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d007      	beq.n	8008a36 <HAL_RTC_SetTime+0x16e>
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 fd29 	bl	8009482 <RTC_Bcd2ToByte>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b0c      	cmp	r3, #12
 8008a34:	d904      	bls.n	8008a40 <HAL_RTC_SetTime+0x178>
 8008a36:	f240 21d5 	movw	r1, #725	; 0x2d5
 8008a3a:	4846      	ldr	r0, [pc, #280]	; (8008b54 <HAL_RTC_SetTime+0x28c>)
 8008a3c:	f7f9 fd7d 	bl	800253a <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	78db      	ldrb	r3, [r3, #3]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d019      	beq.n	8008a7c <HAL_RTC_SetTime+0x1b4>
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	78db      	ldrb	r3, [r3, #3]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d015      	beq.n	8008a7c <HAL_RTC_SetTime+0x1b4>
 8008a50:	f240 21d6 	movw	r1, #726	; 0x2d6
 8008a54:	483f      	ldr	r0, [pc, #252]	; (8008b54 <HAL_RTC_SetTime+0x28c>)
 8008a56:	f7f9 fd70 	bl	800253a <assert_failed>
 8008a5a:	e00f      	b.n	8008a7c <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 fd0b 	bl	8009482 <RTC_Bcd2ToByte>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b17      	cmp	r3, #23
 8008a70:	d904      	bls.n	8008a7c <HAL_RTC_SetTime+0x1b4>
 8008a72:	f240 21db 	movw	r1, #731	; 0x2db
 8008a76:	4837      	ldr	r0, [pc, #220]	; (8008b54 <HAL_RTC_SetTime+0x28c>)
 8008a78:	f7f9 fd5f 	bl	800253a <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	785b      	ldrb	r3, [r3, #1]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 fcfe 	bl	8009482 <RTC_Bcd2ToByte>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b3b      	cmp	r3, #59	; 0x3b
 8008a8a:	d904      	bls.n	8008a96 <HAL_RTC_SetTime+0x1ce>
 8008a8c:	f240 21dd 	movw	r1, #733	; 0x2dd
 8008a90:	4830      	ldr	r0, [pc, #192]	; (8008b54 <HAL_RTC_SetTime+0x28c>)
 8008a92:	f7f9 fd52 	bl	800253a <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	789b      	ldrb	r3, [r3, #2]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 fcf1 	bl	8009482 <RTC_Bcd2ToByte>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b3b      	cmp	r3, #59	; 0x3b
 8008aa4:	d904      	bls.n	8008ab0 <HAL_RTC_SetTime+0x1e8>
 8008aa6:	f240 21de 	movw	r1, #734	; 0x2de
 8008aaa:	482a      	ldr	r0, [pc, #168]	; (8008b54 <HAL_RTC_SetTime+0x28c>)
 8008aac:	f7f9 fd45 	bl	800253a <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	785b      	ldrb	r3, [r3, #1]
 8008aba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008abc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008ac2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	78db      	ldrb	r3, [r3, #3]
 8008ac8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008aca:	4313      	orrs	r3, r2
 8008acc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	22ca      	movs	r2, #202	; 0xca
 8008ad4:	625a      	str	r2, [r3, #36]	; 0x24
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2253      	movs	r2, #83	; 0x53
 8008adc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f000 fc56 	bl	8009390 <RTC_EnterInitMode>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008ae8:	7cfb      	ldrb	r3, [r7, #19]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d120      	bne.n	8008b30 <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008af8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008afc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	689a      	ldr	r2, [r3, #8]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b0c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	6899      	ldr	r1, [r3, #8]
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	68da      	ldr	r2, [r3, #12]
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	431a      	orrs	r2, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	430a      	orrs	r2, r1
 8008b24:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f000 fc69 	bl	80093fe <RTC_ExitInitMode>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008b30:	7cfb      	ldrb	r3, [r7, #19]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d102      	bne.n	8008b3c <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	22ff      	movs	r2, #255	; 0xff
 8008b42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	771a      	strb	r2, [r3, #28]

  return status;
 8008b4a:	7cfb      	ldrb	r3, [r7, #19]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	371c      	adds	r7, #28
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd90      	pop	{r4, r7, pc}
 8008b54:	0800f274 	.word	0x0800f274

08008b58 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008b58:	b590      	push	{r4, r7, lr}
 8008b5a:	b087      	sub	sp, #28
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008b64:	2300      	movs	r3, #0
 8008b66:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d007      	beq.n	8008b7e <HAL_RTC_SetDate+0x26>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d004      	beq.n	8008b7e <HAL_RTC_SetDate+0x26>
 8008b74:	f240 3153 	movw	r1, #851	; 0x353
 8008b78:	487c      	ldr	r0, [pc, #496]	; (8008d6c <HAL_RTC_SetDate+0x214>)
 8008b7a:	f7f9 fcde 	bl	800253a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	7f1b      	ldrb	r3, [r3, #28]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d101      	bne.n	8008b8a <HAL_RTC_SetDate+0x32>
 8008b86:	2302      	movs	r3, #2
 8008b88:	e0ec      	b.n	8008d64 <HAL_RTC_SetDate+0x20c>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2202      	movs	r2, #2
 8008b94:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10e      	bne.n	8008bba <HAL_RTC_SetDate+0x62>
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	785b      	ldrb	r3, [r3, #1]
 8008ba0:	f003 0310 	and.w	r3, r3, #16
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d008      	beq.n	8008bba <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	785b      	ldrb	r3, [r3, #1]
 8008bac:	f023 0310 	bic.w	r3, r3, #16
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	330a      	adds	r3, #10
 8008bb4:	b2da      	uxtb	r2, r3
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d01c      	beq.n	8008bfc <HAL_RTC_SetDate+0xa4>
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d018      	beq.n	8008bfc <HAL_RTC_SetDate+0xa4>
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	d014      	beq.n	8008bfc <HAL_RTC_SetDate+0xa4>
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	2b04      	cmp	r3, #4
 8008bd8:	d010      	beq.n	8008bfc <HAL_RTC_SetDate+0xa4>
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	2b05      	cmp	r3, #5
 8008be0:	d00c      	beq.n	8008bfc <HAL_RTC_SetDate+0xa4>
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	2b06      	cmp	r3, #6
 8008be8:	d008      	beq.n	8008bfc <HAL_RTC_SetDate+0xa4>
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	2b07      	cmp	r3, #7
 8008bf0:	d004      	beq.n	8008bfc <HAL_RTC_SetDate+0xa4>
 8008bf2:	f240 315f 	movw	r1, #863	; 0x35f
 8008bf6:	485d      	ldr	r0, [pc, #372]	; (8008d6c <HAL_RTC_SetDate+0x214>)
 8008bf8:	f7f9 fc9f 	bl	800253a <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d13f      	bne.n	8008c82 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	78db      	ldrb	r3, [r3, #3]
 8008c06:	2b63      	cmp	r3, #99	; 0x63
 8008c08:	d904      	bls.n	8008c14 <HAL_RTC_SetDate+0xbc>
 8008c0a:	f240 3163 	movw	r1, #867	; 0x363
 8008c0e:	4857      	ldr	r0, [pc, #348]	; (8008d6c <HAL_RTC_SetDate+0x214>)
 8008c10:	f7f9 fc93 	bl	800253a <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	785b      	ldrb	r3, [r3, #1]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <HAL_RTC_SetDate+0xcc>
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	785b      	ldrb	r3, [r3, #1]
 8008c20:	2b0c      	cmp	r3, #12
 8008c22:	d904      	bls.n	8008c2e <HAL_RTC_SetDate+0xd6>
 8008c24:	f44f 7159 	mov.w	r1, #868	; 0x364
 8008c28:	4850      	ldr	r0, [pc, #320]	; (8008d6c <HAL_RTC_SetDate+0x214>)
 8008c2a:	f7f9 fc86 	bl	800253a <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	789b      	ldrb	r3, [r3, #2]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d003      	beq.n	8008c3e <HAL_RTC_SetDate+0xe6>
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	789b      	ldrb	r3, [r3, #2]
 8008c3a:	2b1f      	cmp	r3, #31
 8008c3c:	d904      	bls.n	8008c48 <HAL_RTC_SetDate+0xf0>
 8008c3e:	f240 3165 	movw	r1, #869	; 0x365
 8008c42:	484a      	ldr	r0, [pc, #296]	; (8008d6c <HAL_RTC_SetDate+0x214>)
 8008c44:	f7f9 fc79 	bl	800253a <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	78db      	ldrb	r3, [r3, #3]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fbfb 	bl	8009448 <RTC_ByteToBcd2>
 8008c52:	4603      	mov	r3, r0
 8008c54:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	785b      	ldrb	r3, [r3, #1]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 fbf4 	bl	8009448 <RTC_ByteToBcd2>
 8008c60:	4603      	mov	r3, r0
 8008c62:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008c64:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	789b      	ldrb	r3, [r3, #2]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 fbec 	bl	8009448 <RTC_ByteToBcd2>
 8008c70:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008c72:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	617b      	str	r3, [r7, #20]
 8008c80:	e045      	b.n	8008d0e <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	78db      	ldrb	r3, [r3, #3]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f000 fbfb 	bl	8009482 <RTC_Bcd2ToByte>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b63      	cmp	r3, #99	; 0x63
 8008c90:	d904      	bls.n	8008c9c <HAL_RTC_SetDate+0x144>
 8008c92:	f240 316e 	movw	r1, #878	; 0x36e
 8008c96:	4835      	ldr	r0, [pc, #212]	; (8008d6c <HAL_RTC_SetDate+0x214>)
 8008c98:	f7f9 fc4f 	bl	800253a <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	785b      	ldrb	r3, [r3, #1]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 fbee 	bl	8009482 <RTC_Bcd2ToByte>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d007      	beq.n	8008cbc <HAL_RTC_SetDate+0x164>
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	785b      	ldrb	r3, [r3, #1]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f000 fbe6 	bl	8009482 <RTC_Bcd2ToByte>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b0c      	cmp	r3, #12
 8008cba:	d904      	bls.n	8008cc6 <HAL_RTC_SetDate+0x16e>
 8008cbc:	f240 316f 	movw	r1, #879	; 0x36f
 8008cc0:	482a      	ldr	r0, [pc, #168]	; (8008d6c <HAL_RTC_SetDate+0x214>)
 8008cc2:	f7f9 fc3a 	bl	800253a <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	789b      	ldrb	r3, [r3, #2]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 fbd9 	bl	8009482 <RTC_Bcd2ToByte>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d007      	beq.n	8008ce6 <HAL_RTC_SetDate+0x18e>
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	789b      	ldrb	r3, [r3, #2]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f000 fbd1 	bl	8009482 <RTC_Bcd2ToByte>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b1f      	cmp	r3, #31
 8008ce4:	d904      	bls.n	8008cf0 <HAL_RTC_SetDate+0x198>
 8008ce6:	f44f 715c 	mov.w	r1, #880	; 0x370
 8008cea:	4820      	ldr	r0, [pc, #128]	; (8008d6c <HAL_RTC_SetDate+0x214>)
 8008cec:	f7f9 fc25 	bl	800253a <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	78db      	ldrb	r3, [r3, #3]
 8008cf4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	785b      	ldrb	r3, [r3, #1]
 8008cfa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008cfc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008d02:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	22ca      	movs	r2, #202	; 0xca
 8008d14:	625a      	str	r2, [r3, #36]	; 0x24
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2253      	movs	r2, #83	; 0x53
 8008d1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f000 fb36 	bl	8009390 <RTC_EnterInitMode>
 8008d24:	4603      	mov	r3, r0
 8008d26:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008d28:	7cfb      	ldrb	r3, [r7, #19]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10c      	bne.n	8008d48 <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008d38:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008d3c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	f000 fb5d 	bl	80093fe <RTC_ExitInitMode>
 8008d44:	4603      	mov	r3, r0
 8008d46:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008d48:	7cfb      	ldrb	r3, [r7, #19]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d102      	bne.n	8008d54 <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2201      	movs	r2, #1
 8008d52:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	22ff      	movs	r2, #255	; 0xff
 8008d5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	771a      	strb	r2, [r3, #28]

  return status;
 8008d62:	7cfb      	ldrb	r3, [r7, #19]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	371c      	adds	r7, #28
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd90      	pop	{r4, r7, pc}
 8008d6c:	0800f274 	.word	0x0800f274

08008d70 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008d70:	b590      	push	{r4, r7, lr}
 8008d72:	b089      	sub	sp, #36	; 0x24
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8008d80:	2300      	movs	r3, #0
 8008d82:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8008d84:	2300      	movs	r3, #0
 8008d86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d007      	beq.n	8008d9e <HAL_RTC_SetAlarm+0x2e>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d004      	beq.n	8008d9e <HAL_RTC_SetAlarm+0x2e>
 8008d94:	f240 31e7 	movw	r1, #999	; 0x3e7
 8008d98:	4876      	ldr	r0, [pc, #472]	; (8008f74 <HAL_RTC_SetAlarm+0x204>)
 8008d9a:	f7f9 fbce 	bl	800253a <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008da6:	d009      	beq.n	8008dbc <HAL_RTC_SetAlarm+0x4c>
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008db0:	d004      	beq.n	8008dbc <HAL_RTC_SetAlarm+0x4c>
 8008db2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008db6:	486f      	ldr	r0, [pc, #444]	; (8008f74 <HAL_RTC_SetAlarm+0x204>)
 8008db8:	f7f9 fbbf 	bl	800253a <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d004      	beq.n	8008dd2 <HAL_RTC_SetAlarm+0x62>
 8008dc8:	f240 31e9 	movw	r1, #1001	; 0x3e9
 8008dcc:	4869      	ldr	r0, [pc, #420]	; (8008f74 <HAL_RTC_SetAlarm+0x204>)
 8008dce:	f7f9 fbb4 	bl	800253a <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	69db      	ldr	r3, [r3, #28]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d009      	beq.n	8008dee <HAL_RTC_SetAlarm+0x7e>
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	69db      	ldr	r3, [r3, #28]
 8008dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008de2:	d004      	beq.n	8008dee <HAL_RTC_SetAlarm+0x7e>
 8008de4:	f240 31ea 	movw	r1, #1002	; 0x3ea
 8008de8:	4862      	ldr	r0, [pc, #392]	; (8008f74 <HAL_RTC_SetAlarm+0x204>)
 8008dea:	f7f9 fba6 	bl	800253a <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008df6:	d304      	bcc.n	8008e02 <HAL_RTC_SetAlarm+0x92>
 8008df8:	f240 31eb 	movw	r1, #1003	; 0x3eb
 8008dfc:	485d      	ldr	r0, [pc, #372]	; (8008f74 <HAL_RTC_SetAlarm+0x204>)
 8008dfe:	f7f9 fb9c 	bl	800253a <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d04f      	beq.n	8008eaa <HAL_RTC_SetAlarm+0x13a>
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e12:	d04a      	beq.n	8008eaa <HAL_RTC_SetAlarm+0x13a>
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e1c:	d045      	beq.n	8008eaa <HAL_RTC_SetAlarm+0x13a>
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e26:	d040      	beq.n	8008eaa <HAL_RTC_SetAlarm+0x13a>
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	699b      	ldr	r3, [r3, #24]
 8008e2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e30:	d03b      	beq.n	8008eaa <HAL_RTC_SetAlarm+0x13a>
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008e3a:	d036      	beq.n	8008eaa <HAL_RTC_SetAlarm+0x13a>
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	699b      	ldr	r3, [r3, #24]
 8008e40:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8008e44:	d031      	beq.n	8008eaa <HAL_RTC_SetAlarm+0x13a>
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	699b      	ldr	r3, [r3, #24]
 8008e4a:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8008e4e:	d02c      	beq.n	8008eaa <HAL_RTC_SetAlarm+0x13a>
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e58:	d027      	beq.n	8008eaa <HAL_RTC_SetAlarm+0x13a>
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8008e62:	d022      	beq.n	8008eaa <HAL_RTC_SetAlarm+0x13a>
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8008e6c:	d01d      	beq.n	8008eaa <HAL_RTC_SetAlarm+0x13a>
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8008e76:	d018      	beq.n	8008eaa <HAL_RTC_SetAlarm+0x13a>
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008e80:	d013      	beq.n	8008eaa <HAL_RTC_SetAlarm+0x13a>
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8008e8a:	d00e      	beq.n	8008eaa <HAL_RTC_SetAlarm+0x13a>
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8008e94:	d009      	beq.n	8008eaa <HAL_RTC_SetAlarm+0x13a>
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	699b      	ldr	r3, [r3, #24]
 8008e9a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008e9e:	d004      	beq.n	8008eaa <HAL_RTC_SetAlarm+0x13a>
 8008ea0:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
 8008ea4:	4833      	ldr	r0, [pc, #204]	; (8008f74 <HAL_RTC_SetAlarm+0x204>)
 8008ea6:	f7f9 fb48 	bl	800253a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	7f1b      	ldrb	r3, [r3, #28]
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d101      	bne.n	8008eb6 <HAL_RTC_SetAlarm+0x146>
 8008eb2:	2302      	movs	r3, #2
 8008eb4:	e235      	b.n	8009322 <HAL_RTC_SetAlarm+0x5b2>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2202      	movs	r2, #2
 8008ec0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f040 80ad 	bne.w	8009024 <HAL_RTC_SetAlarm+0x2b4>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d01a      	beq.n	8008f0e <HAL_RTC_SetAlarm+0x19e>
    {
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d003      	beq.n	8008ee8 <HAL_RTC_SetAlarm+0x178>
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	2b0c      	cmp	r3, #12
 8008ee6:	d904      	bls.n	8008ef2 <HAL_RTC_SetAlarm+0x182>
 8008ee8:	f240 31fa 	movw	r1, #1018	; 0x3fa
 8008eec:	4821      	ldr	r0, [pc, #132]	; (8008f74 <HAL_RTC_SetAlarm+0x204>)
 8008eee:	f7f9 fb24 	bl	800253a <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	78db      	ldrb	r3, [r3, #3]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d015      	beq.n	8008f26 <HAL_RTC_SetAlarm+0x1b6>
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	78db      	ldrb	r3, [r3, #3]
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d011      	beq.n	8008f26 <HAL_RTC_SetAlarm+0x1b6>
 8008f02:	f240 31fb 	movw	r1, #1019	; 0x3fb
 8008f06:	481b      	ldr	r0, [pc, #108]	; (8008f74 <HAL_RTC_SetAlarm+0x204>)
 8008f08:	f7f9 fb17 	bl	800253a <assert_failed>
 8008f0c:	e00b      	b.n	8008f26 <HAL_RTC_SetAlarm+0x1b6>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2200      	movs	r2, #0
 8008f12:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	2b17      	cmp	r3, #23
 8008f1a:	d904      	bls.n	8008f26 <HAL_RTC_SetAlarm+0x1b6>
 8008f1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008f20:	4814      	ldr	r0, [pc, #80]	; (8008f74 <HAL_RTC_SetAlarm+0x204>)
 8008f22:	f7f9 fb0a 	bl	800253a <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	785b      	ldrb	r3, [r3, #1]
 8008f2a:	2b3b      	cmp	r3, #59	; 0x3b
 8008f2c:	d904      	bls.n	8008f38 <HAL_RTC_SetAlarm+0x1c8>
 8008f2e:	f240 4102 	movw	r1, #1026	; 0x402
 8008f32:	4810      	ldr	r0, [pc, #64]	; (8008f74 <HAL_RTC_SetAlarm+0x204>)
 8008f34:	f7f9 fb01 	bl	800253a <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	789b      	ldrb	r3, [r3, #2]
 8008f3c:	2b3b      	cmp	r3, #59	; 0x3b
 8008f3e:	d904      	bls.n	8008f4a <HAL_RTC_SetAlarm+0x1da>
 8008f40:	f240 4103 	movw	r1, #1027	; 0x403
 8008f44:	480b      	ldr	r0, [pc, #44]	; (8008f74 <HAL_RTC_SetAlarm+0x204>)
 8008f46:	f7f9 faf8 	bl	800253a <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	69db      	ldr	r3, [r3, #28]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d112      	bne.n	8008f78 <HAL_RTC_SetAlarm+0x208>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d004      	beq.n	8008f66 <HAL_RTC_SetAlarm+0x1f6>
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f62:	2b1f      	cmp	r3, #31
 8008f64:	d930      	bls.n	8008fc8 <HAL_RTC_SetAlarm+0x258>
 8008f66:	f240 4107 	movw	r1, #1031	; 0x407
 8008f6a:	4802      	ldr	r0, [pc, #8]	; (8008f74 <HAL_RTC_SetAlarm+0x204>)
 8008f6c:	f7f9 fae5 	bl	800253a <assert_failed>
 8008f70:	e02a      	b.n	8008fc8 <HAL_RTC_SetAlarm+0x258>
 8008f72:	bf00      	nop
 8008f74:	0800f274 	.word	0x0800f274
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d022      	beq.n	8008fc8 <HAL_RTC_SetAlarm+0x258>
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d01d      	beq.n	8008fc8 <HAL_RTC_SetAlarm+0x258>
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f92:	2b03      	cmp	r3, #3
 8008f94:	d018      	beq.n	8008fc8 <HAL_RTC_SetAlarm+0x258>
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	d013      	beq.n	8008fc8 <HAL_RTC_SetAlarm+0x258>
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fa6:	2b05      	cmp	r3, #5
 8008fa8:	d00e      	beq.n	8008fc8 <HAL_RTC_SetAlarm+0x258>
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fb0:	2b06      	cmp	r3, #6
 8008fb2:	d009      	beq.n	8008fc8 <HAL_RTC_SetAlarm+0x258>
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fba:	2b07      	cmp	r3, #7
 8008fbc:	d004      	beq.n	8008fc8 <HAL_RTC_SetAlarm+0x258>
 8008fbe:	f240 410b 	movw	r1, #1035	; 0x40b
 8008fc2:	48a1      	ldr	r0, [pc, #644]	; (8009248 <HAL_RTC_SetAlarm+0x4d8>)
 8008fc4:	f7f9 fab9 	bl	800253a <assert_failed>
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 fa3b 	bl	8009448 <RTC_ByteToBcd2>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	785b      	ldrb	r3, [r3, #1]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 fa34 	bl	8009448 <RTC_ByteToBcd2>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008fe4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	789b      	ldrb	r3, [r3, #2]
 8008fea:	4618      	mov	r0, r3
 8008fec:	f000 fa2c 	bl	8009448 <RTC_ByteToBcd2>
 8008ff0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008ff2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	78db      	ldrb	r3, [r3, #3]
 8008ffa:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008ffc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009006:	4618      	mov	r0, r3
 8009008:	f000 fa1e 	bl	8009448 <RTC_ByteToBcd2>
 800900c:	4603      	mov	r3, r0
 800900e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009010:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009018:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800901e:	4313      	orrs	r3, r2
 8009020:	61fb      	str	r3, [r7, #28]
 8009022:	e0cd      	b.n	80091c0 <HAL_RTC_SetAlarm+0x450>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800902e:	2b00      	cmp	r3, #0
 8009030:	d022      	beq.n	8009078 <HAL_RTC_SetAlarm+0x308>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	4618      	mov	r0, r3
 8009038:	f000 fa23 	bl	8009482 <RTC_Bcd2ToByte>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d007      	beq.n	8009052 <HAL_RTC_SetAlarm+0x2e2>
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	4618      	mov	r0, r3
 8009048:	f000 fa1b 	bl	8009482 <RTC_Bcd2ToByte>
 800904c:	4603      	mov	r3, r0
 800904e:	2b0c      	cmp	r3, #12
 8009050:	d904      	bls.n	800905c <HAL_RTC_SetAlarm+0x2ec>
 8009052:	f240 411a 	movw	r1, #1050	; 0x41a
 8009056:	487c      	ldr	r0, [pc, #496]	; (8009248 <HAL_RTC_SetAlarm+0x4d8>)
 8009058:	f7f9 fa6f 	bl	800253a <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	78db      	ldrb	r3, [r3, #3]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d019      	beq.n	8009098 <HAL_RTC_SetAlarm+0x328>
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	78db      	ldrb	r3, [r3, #3]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d015      	beq.n	8009098 <HAL_RTC_SetAlarm+0x328>
 800906c:	f240 411b 	movw	r1, #1051	; 0x41b
 8009070:	4875      	ldr	r0, [pc, #468]	; (8009248 <HAL_RTC_SetAlarm+0x4d8>)
 8009072:	f7f9 fa62 	bl	800253a <assert_failed>
 8009076:	e00f      	b.n	8009098 <HAL_RTC_SetAlarm+0x328>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	2200      	movs	r2, #0
 800907c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	4618      	mov	r0, r3
 8009084:	f000 f9fd 	bl	8009482 <RTC_Bcd2ToByte>
 8009088:	4603      	mov	r3, r0
 800908a:	2b17      	cmp	r3, #23
 800908c:	d904      	bls.n	8009098 <HAL_RTC_SetAlarm+0x328>
 800908e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8009092:	486d      	ldr	r0, [pc, #436]	; (8009248 <HAL_RTC_SetAlarm+0x4d8>)
 8009094:	f7f9 fa51 	bl	800253a <assert_failed>
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	785b      	ldrb	r3, [r3, #1]
 800909c:	4618      	mov	r0, r3
 800909e:	f000 f9f0 	bl	8009482 <RTC_Bcd2ToByte>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b3b      	cmp	r3, #59	; 0x3b
 80090a6:	d904      	bls.n	80090b2 <HAL_RTC_SetAlarm+0x342>
 80090a8:	f240 4123 	movw	r1, #1059	; 0x423
 80090ac:	4866      	ldr	r0, [pc, #408]	; (8009248 <HAL_RTC_SetAlarm+0x4d8>)
 80090ae:	f7f9 fa44 	bl	800253a <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	789b      	ldrb	r3, [r3, #2]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 f9e3 	bl	8009482 <RTC_Bcd2ToByte>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b3b      	cmp	r3, #59	; 0x3b
 80090c0:	d904      	bls.n	80090cc <HAL_RTC_SetAlarm+0x35c>
 80090c2:	f240 4124 	movw	r1, #1060	; 0x424
 80090c6:	4860      	ldr	r0, [pc, #384]	; (8009248 <HAL_RTC_SetAlarm+0x4d8>)
 80090c8:	f7f9 fa37 	bl	800253a <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d117      	bne.n	8009104 <HAL_RTC_SetAlarm+0x394>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 f9d1 	bl	8009482 <RTC_Bcd2ToByte>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d008      	beq.n	80090f8 <HAL_RTC_SetAlarm+0x388>
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 f9c8 	bl	8009482 <RTC_Bcd2ToByte>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b1f      	cmp	r3, #31
 80090f6:	d949      	bls.n	800918c <HAL_RTC_SetAlarm+0x41c>
 80090f8:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80090fc:	4852      	ldr	r0, [pc, #328]	; (8009248 <HAL_RTC_SetAlarm+0x4d8>)
 80090fe:	f7f9 fa1c 	bl	800253a <assert_failed>
 8009102:	e043      	b.n	800918c <HAL_RTC_SetAlarm+0x41c>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	f893 3020 	ldrb.w	r3, [r3, #32]
 800910a:	4618      	mov	r0, r3
 800910c:	f000 f9b9 	bl	8009482 <RTC_Bcd2ToByte>
 8009110:	4603      	mov	r3, r0
 8009112:	2b01      	cmp	r3, #1
 8009114:	d03a      	beq.n	800918c <HAL_RTC_SetAlarm+0x41c>
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800911c:	4618      	mov	r0, r3
 800911e:	f000 f9b0 	bl	8009482 <RTC_Bcd2ToByte>
 8009122:	4603      	mov	r3, r0
 8009124:	2b02      	cmp	r3, #2
 8009126:	d031      	beq.n	800918c <HAL_RTC_SetAlarm+0x41c>
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800912e:	4618      	mov	r0, r3
 8009130:	f000 f9a7 	bl	8009482 <RTC_Bcd2ToByte>
 8009134:	4603      	mov	r3, r0
 8009136:	2b03      	cmp	r3, #3
 8009138:	d028      	beq.n	800918c <HAL_RTC_SetAlarm+0x41c>
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009140:	4618      	mov	r0, r3
 8009142:	f000 f99e 	bl	8009482 <RTC_Bcd2ToByte>
 8009146:	4603      	mov	r3, r0
 8009148:	2b04      	cmp	r3, #4
 800914a:	d01f      	beq.n	800918c <HAL_RTC_SetAlarm+0x41c>
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009152:	4618      	mov	r0, r3
 8009154:	f000 f995 	bl	8009482 <RTC_Bcd2ToByte>
 8009158:	4603      	mov	r3, r0
 800915a:	2b05      	cmp	r3, #5
 800915c:	d016      	beq.n	800918c <HAL_RTC_SetAlarm+0x41c>
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009164:	4618      	mov	r0, r3
 8009166:	f000 f98c 	bl	8009482 <RTC_Bcd2ToByte>
 800916a:	4603      	mov	r3, r0
 800916c:	2b06      	cmp	r3, #6
 800916e:	d00d      	beq.n	800918c <HAL_RTC_SetAlarm+0x41c>
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009176:	4618      	mov	r0, r3
 8009178:	f000 f983 	bl	8009482 <RTC_Bcd2ToByte>
 800917c:	4603      	mov	r3, r0
 800917e:	2b07      	cmp	r3, #7
 8009180:	d004      	beq.n	800918c <HAL_RTC_SetAlarm+0x41c>
 8009182:	f240 412c 	movw	r1, #1068	; 0x42c
 8009186:	4830      	ldr	r0, [pc, #192]	; (8009248 <HAL_RTC_SetAlarm+0x4d8>)
 8009188:	f7f9 f9d7 	bl	800253a <assert_failed>
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	785b      	ldrb	r3, [r3, #1]
 8009196:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009198:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800919e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	78db      	ldrb	r3, [r3, #3]
 80091a4:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80091a6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80091ae:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80091b0:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80091b6:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80091bc:	4313      	orrs	r3, r2
 80091be:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80091c8:	4313      	orrs	r3, r2
 80091ca:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	22ca      	movs	r2, #202	; 0xca
 80091d2:	625a      	str	r2, [r3, #36]	; 0x24
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2253      	movs	r2, #83	; 0x53
 80091da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091e4:	d14a      	bne.n	800927c <HAL_RTC_SetAlarm+0x50c>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	689a      	ldr	r2, [r3, #8]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80091f4:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	689a      	ldr	r2, [r3, #8]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009204:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	b2da      	uxtb	r2, r3
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8009216:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009218:	f7fa f852 	bl	80032c0 <HAL_GetTick>
 800921c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800921e:	e015      	b.n	800924c <HAL_RTC_SetAlarm+0x4dc>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009220:	f7fa f84e 	bl	80032c0 <HAL_GetTick>
 8009224:	4602      	mov	r2, r0
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800922e:	d90d      	bls.n	800924c <HAL_RTC_SetAlarm+0x4dc>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	22ff      	movs	r2, #255	; 0xff
 8009236:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2203      	movs	r2, #3
 800923c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009244:	2303      	movs	r3, #3
 8009246:	e06c      	b.n	8009322 <HAL_RTC_SetAlarm+0x5b2>
 8009248:	0800f274 	.word	0x0800f274
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	f003 0301 	and.w	r3, r3, #1
 8009256:	2b00      	cmp	r3, #0
 8009258:	d0e2      	beq.n	8009220 <HAL_RTC_SetAlarm+0x4b0>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	69fa      	ldr	r2, [r7, #28]
 8009260:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689a      	ldr	r2, [r3, #8]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009278:	609a      	str	r2, [r3, #8]
 800927a:	e047      	b.n	800930c <HAL_RTC_SetAlarm+0x59c>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689a      	ldr	r2, [r3, #8]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800928a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689a      	ldr	r2, [r3, #8]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800929a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	b2da      	uxtb	r2, r3
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f462 7220 	orn	r2, r2, #640	; 0x280
 80092ac:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80092ae:	f7fa f807 	bl	80032c0 <HAL_GetTick>
 80092b2:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80092b4:	e013      	b.n	80092de <HAL_RTC_SetAlarm+0x56e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80092b6:	f7fa f803 	bl	80032c0 <HAL_GetTick>
 80092ba:	4602      	mov	r2, r0
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	1ad3      	subs	r3, r2, r3
 80092c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092c4:	d90b      	bls.n	80092de <HAL_RTC_SetAlarm+0x56e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	22ff      	movs	r2, #255	; 0xff
 80092cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2203      	movs	r2, #3
 80092d2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e021      	b.n	8009322 <HAL_RTC_SetAlarm+0x5b2>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	f003 0302 	and.w	r3, r3, #2
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d0e4      	beq.n	80092b6 <HAL_RTC_SetAlarm+0x546>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	69fa      	ldr	r2, [r7, #28]
 80092f2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	697a      	ldr	r2, [r7, #20]
 80092fa:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	689a      	ldr	r2, [r3, #8]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800930a:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	22ff      	movs	r2, #255	; 0xff
 8009312:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2201      	movs	r2, #1
 8009318:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3724      	adds	r7, #36	; 0x24
 8009326:	46bd      	mov	sp, r7
 8009328:	bd90      	pop	{r4, r7, pc}
 800932a:	bf00      	nop

0800932c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009348:	2300      	movs	r3, #0
 800934a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68da      	ldr	r2, [r3, #12]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800935a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800935c:	f7f9 ffb0 	bl	80032c0 <HAL_GetTick>
 8009360:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009362:	e009      	b.n	8009378 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009364:	f7f9 ffac 	bl	80032c0 <HAL_GetTick>
 8009368:	4602      	mov	r2, r0
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009372:	d901      	bls.n	8009378 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009374:	2303      	movs	r3, #3
 8009376:	e007      	b.n	8009388 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	f003 0320 	and.w	r3, r3, #32
 8009382:	2b00      	cmp	r3, #0
 8009384:	d0ee      	beq.n	8009364 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009398:	2300      	movs	r3, #0
 800939a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d122      	bne.n	80093f4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68da      	ldr	r2, [r3, #12]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80093bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80093be:	f7f9 ff7f 	bl	80032c0 <HAL_GetTick>
 80093c2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80093c4:	e00c      	b.n	80093e0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80093c6:	f7f9 ff7b 	bl	80032c0 <HAL_GetTick>
 80093ca:	4602      	mov	r2, r0
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093d4:	d904      	bls.n	80093e0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2204      	movs	r2, #4
 80093da:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d102      	bne.n	80093f4 <RTC_EnterInitMode+0x64>
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d1e8      	bne.n	80093c6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b084      	sub	sp, #16
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68da      	ldr	r2, [r3, #12]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009418:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	f003 0320 	and.w	r3, r3, #32
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10a      	bne.n	800943e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f7ff ff89 	bl	8009340 <HAL_RTC_WaitForSynchro>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d004      	beq.n	800943e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2204      	movs	r2, #4
 8009438:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800943e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	4603      	mov	r3, r0
 8009450:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8009452:	2300      	movs	r3, #0
 8009454:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8009456:	e005      	b.n	8009464 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009458:	7bfb      	ldrb	r3, [r7, #15]
 800945a:	3301      	adds	r3, #1
 800945c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800945e:	79fb      	ldrb	r3, [r7, #7]
 8009460:	3b0a      	subs	r3, #10
 8009462:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009464:	79fb      	ldrb	r3, [r7, #7]
 8009466:	2b09      	cmp	r3, #9
 8009468:	d8f6      	bhi.n	8009458 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800946a:	7bfb      	ldrb	r3, [r7, #15]
 800946c:	011b      	lsls	r3, r3, #4
 800946e:	b2da      	uxtb	r2, r3
 8009470:	79fb      	ldrb	r3, [r7, #7]
 8009472:	4313      	orrs	r3, r2
 8009474:	b2db      	uxtb	r3, r3
}
 8009476:	4618      	mov	r0, r3
 8009478:	3714      	adds	r7, #20
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8009482:	b480      	push	{r7}
 8009484:	b085      	sub	sp, #20
 8009486:	af00      	add	r7, sp, #0
 8009488:	4603      	mov	r3, r0
 800948a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800948c:	2300      	movs	r3, #0
 800948e:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	091b      	lsrs	r3, r3, #4
 8009494:	b2db      	uxtb	r3, r3
 8009496:	461a      	mov	r2, r3
 8009498:	0092      	lsls	r2, r2, #2
 800949a:	4413      	add	r3, r2
 800949c:	005b      	lsls	r3, r3, #1
 800949e:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80094a0:	79fb      	ldrb	r3, [r7, #7]
 80094a2:	f003 030f 	and.w	r3, r3, #15
 80094a6:	b2da      	uxtb	r2, r3
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
 80094aa:	4413      	add	r3, r2
 80094ac:	b2db      	uxtb	r3, r3
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3714      	adds	r7, #20
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b083      	sub	sp, #12
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 80094c2:	bf00      	nop
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr

080094ce <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 80094ce:	b480      	push	{r7}
 80094d0:	b083      	sub	sp, #12
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 80094d6:	bf00      	nop
 80094d8:	370c      	adds	r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
	...

080094e4 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80094f0:	2300      	movs	r3, #0
 80094f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d013      	beq.n	8009522 <HAL_RTCEx_SetWakeUpTimer+0x3e>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d010      	beq.n	8009522 <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b02      	cmp	r3, #2
 8009504:	d00d      	beq.n	8009522 <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2b03      	cmp	r3, #3
 800950a:	d00a      	beq.n	8009522 <HAL_RTCEx_SetWakeUpTimer+0x3e>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b04      	cmp	r3, #4
 8009510:	d007      	beq.n	8009522 <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2b06      	cmp	r3, #6
 8009516:	d004      	beq.n	8009522 <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8009518:	f240 3165 	movw	r1, #869	; 0x365
 800951c:	4850      	ldr	r0, [pc, #320]	; (8009660 <HAL_RTCEx_SetWakeUpTimer+0x17c>)
 800951e:	f7f9 f80c 	bl	800253a <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009528:	d304      	bcc.n	8009534 <HAL_RTCEx_SetWakeUpTimer+0x50>
 800952a:	f240 3166 	movw	r1, #870	; 0x366
 800952e:	484c      	ldr	r0, [pc, #304]	; (8009660 <HAL_RTCEx_SetWakeUpTimer+0x17c>)
 8009530:	f7f9 f803 	bl	800253a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	7f1b      	ldrb	r3, [r3, #28]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d101      	bne.n	8009540 <HAL_RTCEx_SetWakeUpTimer+0x5c>
 800953c:	2302      	movs	r3, #2
 800953e:	e08a      	b.n	8009656 <HAL_RTCEx_SetWakeUpTimer+0x172>
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2201      	movs	r2, #1
 8009544:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2202      	movs	r2, #2
 800954a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	22ca      	movs	r2, #202	; 0xca
 8009552:	625a      	str	r2, [r3, #36]	; 0x24
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2253      	movs	r2, #83	; 0x53
 800955a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009566:	2b00      	cmp	r3, #0
 8009568:	d01e      	beq.n	80095a8 <HAL_RTCEx_SetWakeUpTimer+0xc4>
  {
    tickstart = HAL_GetTick();
 800956a:	f7f9 fea9 	bl	80032c0 <HAL_GetTick>
 800956e:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8009570:	e013      	b.n	800959a <HAL_RTCEx_SetWakeUpTimer+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009572:	f7f9 fea5 	bl	80032c0 <HAL_GetTick>
 8009576:	4602      	mov	r2, r0
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009580:	d90b      	bls.n	800959a <HAL_RTCEx_SetWakeUpTimer+0xb6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	22ff      	movs	r2, #255	; 0xff
 8009588:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2203      	movs	r2, #3
 800958e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009596:	2303      	movs	r3, #3
 8009598:	e05d      	b.n	8009656 <HAL_RTCEx_SetWakeUpTimer+0x172>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	f003 0304 	and.w	r3, r3, #4
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d1e4      	bne.n	8009572 <HAL_RTCEx_SetWakeUpTimer+0x8e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	689a      	ldr	r2, [r3, #8]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095b6:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	b2da      	uxtb	r2, r3
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80095c8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80095ca:	f7f9 fe79 	bl	80032c0 <HAL_GetTick>
 80095ce:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80095d0:	e013      	b.n	80095fa <HAL_RTCEx_SetWakeUpTimer+0x116>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80095d2:	f7f9 fe75 	bl	80032c0 <HAL_GetTick>
 80095d6:	4602      	mov	r2, r0
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095e0:	d90b      	bls.n	80095fa <HAL_RTCEx_SetWakeUpTimer+0x116>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	22ff      	movs	r2, #255	; 0xff
 80095e8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2203      	movs	r2, #3
 80095ee:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80095f6:	2303      	movs	r3, #3
 80095f8:	e02d      	b.n	8009656 <HAL_RTCEx_SetWakeUpTimer+0x172>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	f003 0304 	and.w	r3, r3, #4
 8009604:	2b00      	cmp	r3, #0
 8009606:	d0e4      	beq.n	80095d2 <HAL_RTCEx_SetWakeUpTimer+0xee>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	689a      	ldr	r2, [r3, #8]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f022 0207 	bic.w	r2, r2, #7
 8009616:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	6899      	ldr	r1, [r3, #8]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	430a      	orrs	r2, r1
 8009626:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	689a      	ldr	r2, [r3, #8]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800963e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	22ff      	movs	r2, #255	; 0xff
 8009646:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2201      	movs	r2, #1
 800964c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3718      	adds	r7, #24
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	0800f2e8 	.word	0x0800f2e8

08009664 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d101      	bne.n	800969e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e1ac      	b.n	80099f8 <HAL_SPI_Init+0x36c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a75      	ldr	r2, [pc, #468]	; (8009878 <HAL_SPI_Init+0x1ec>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d018      	beq.n	80096da <HAL_SPI_Init+0x4e>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a73      	ldr	r2, [pc, #460]	; (800987c <HAL_SPI_Init+0x1f0>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d013      	beq.n	80096da <HAL_SPI_Init+0x4e>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a72      	ldr	r2, [pc, #456]	; (8009880 <HAL_SPI_Init+0x1f4>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d00e      	beq.n	80096da <HAL_SPI_Init+0x4e>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a70      	ldr	r2, [pc, #448]	; (8009884 <HAL_SPI_Init+0x1f8>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d009      	beq.n	80096da <HAL_SPI_Init+0x4e>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a6f      	ldr	r2, [pc, #444]	; (8009888 <HAL_SPI_Init+0x1fc>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d004      	beq.n	80096da <HAL_SPI_Init+0x4e>
 80096d0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80096d4:	486d      	ldr	r0, [pc, #436]	; (800988c <HAL_SPI_Init+0x200>)
 80096d6:	f7f8 ff30 	bl	800253a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d009      	beq.n	80096f6 <HAL_SPI_Init+0x6a>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096ea:	d004      	beq.n	80096f6 <HAL_SPI_Init+0x6a>
 80096ec:	f240 1141 	movw	r1, #321	; 0x141
 80096f0:	4866      	ldr	r0, [pc, #408]	; (800988c <HAL_SPI_Init+0x200>)
 80096f2:	f7f8 ff22 	bl	800253a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00e      	beq.n	800971c <HAL_SPI_Init+0x90>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009706:	d009      	beq.n	800971c <HAL_SPI_Init+0x90>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009710:	d004      	beq.n	800971c <HAL_SPI_Init+0x90>
 8009712:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8009716:	485d      	ldr	r0, [pc, #372]	; (800988c <HAL_SPI_Init+0x200>)
 8009718:	f7f8 ff0f 	bl	800253a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009724:	d008      	beq.n	8009738 <HAL_SPI_Init+0xac>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d004      	beq.n	8009738 <HAL_SPI_Init+0xac>
 800972e:	f240 1143 	movw	r1, #323	; 0x143
 8009732:	4856      	ldr	r0, [pc, #344]	; (800988c <HAL_SPI_Init+0x200>)
 8009734:	f7f8 ff01 	bl	800253a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	699b      	ldr	r3, [r3, #24]
 800973c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009740:	d00d      	beq.n	800975e <HAL_SPI_Init+0xd2>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	699b      	ldr	r3, [r3, #24]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d009      	beq.n	800975e <HAL_SPI_Init+0xd2>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009752:	d004      	beq.n	800975e <HAL_SPI_Init+0xd2>
 8009754:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8009758:	484c      	ldr	r0, [pc, #304]	; (800988c <HAL_SPI_Init+0x200>)
 800975a:	f7f8 feee 	bl	800253a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	69db      	ldr	r3, [r3, #28]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d020      	beq.n	80097a8 <HAL_SPI_Init+0x11c>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	69db      	ldr	r3, [r3, #28]
 800976a:	2b08      	cmp	r3, #8
 800976c:	d01c      	beq.n	80097a8 <HAL_SPI_Init+0x11c>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	69db      	ldr	r3, [r3, #28]
 8009772:	2b10      	cmp	r3, #16
 8009774:	d018      	beq.n	80097a8 <HAL_SPI_Init+0x11c>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	69db      	ldr	r3, [r3, #28]
 800977a:	2b18      	cmp	r3, #24
 800977c:	d014      	beq.n	80097a8 <HAL_SPI_Init+0x11c>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	69db      	ldr	r3, [r3, #28]
 8009782:	2b20      	cmp	r3, #32
 8009784:	d010      	beq.n	80097a8 <HAL_SPI_Init+0x11c>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	69db      	ldr	r3, [r3, #28]
 800978a:	2b28      	cmp	r3, #40	; 0x28
 800978c:	d00c      	beq.n	80097a8 <HAL_SPI_Init+0x11c>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	69db      	ldr	r3, [r3, #28]
 8009792:	2b30      	cmp	r3, #48	; 0x30
 8009794:	d008      	beq.n	80097a8 <HAL_SPI_Init+0x11c>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	69db      	ldr	r3, [r3, #28]
 800979a:	2b38      	cmp	r3, #56	; 0x38
 800979c:	d004      	beq.n	80097a8 <HAL_SPI_Init+0x11c>
 800979e:	f240 1145 	movw	r1, #325	; 0x145
 80097a2:	483a      	ldr	r0, [pc, #232]	; (800988c <HAL_SPI_Init+0x200>)
 80097a4:	f7f8 fec9 	bl	800253a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6a1b      	ldr	r3, [r3, #32]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d008      	beq.n	80097c2 <HAL_SPI_Init+0x136>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a1b      	ldr	r3, [r3, #32]
 80097b4:	2b80      	cmp	r3, #128	; 0x80
 80097b6:	d004      	beq.n	80097c2 <HAL_SPI_Init+0x136>
 80097b8:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80097bc:	4833      	ldr	r0, [pc, #204]	; (800988c <HAL_SPI_Init+0x200>)
 80097be:	f7f8 febc 	bl	800253a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d008      	beq.n	80097dc <HAL_SPI_Init+0x150>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ce:	2b10      	cmp	r3, #16
 80097d0:	d004      	beq.n	80097dc <HAL_SPI_Init+0x150>
 80097d2:	f240 1147 	movw	r1, #327	; 0x147
 80097d6:	482d      	ldr	r0, [pc, #180]	; (800988c <HAL_SPI_Init+0x200>)
 80097d8:	f7f8 feaf 	bl	800253a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d155      	bne.n	8009890 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d008      	beq.n	80097fe <HAL_SPI_Init+0x172>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	d004      	beq.n	80097fe <HAL_SPI_Init+0x172>
 80097f4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80097f8:	4824      	ldr	r0, [pc, #144]	; (800988c <HAL_SPI_Init+0x200>)
 80097fa:	f7f8 fe9e 	bl	800253a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d008      	beq.n	8009818 <HAL_SPI_Init+0x18c>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	2b01      	cmp	r3, #1
 800980c:	d004      	beq.n	8009818 <HAL_SPI_Init+0x18c>
 800980e:	f240 114b 	movw	r1, #331	; 0x14b
 8009812:	481e      	ldr	r0, [pc, #120]	; (800988c <HAL_SPI_Init+0x200>)
 8009814:	f7f8 fe91 	bl	800253a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009820:	d125      	bne.n	800986e <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	69db      	ldr	r3, [r3, #28]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d05d      	beq.n	80098e6 <HAL_SPI_Init+0x25a>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	2b08      	cmp	r3, #8
 8009830:	d059      	beq.n	80098e6 <HAL_SPI_Init+0x25a>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	69db      	ldr	r3, [r3, #28]
 8009836:	2b10      	cmp	r3, #16
 8009838:	d055      	beq.n	80098e6 <HAL_SPI_Init+0x25a>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	69db      	ldr	r3, [r3, #28]
 800983e:	2b18      	cmp	r3, #24
 8009840:	d051      	beq.n	80098e6 <HAL_SPI_Init+0x25a>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	69db      	ldr	r3, [r3, #28]
 8009846:	2b20      	cmp	r3, #32
 8009848:	d04d      	beq.n	80098e6 <HAL_SPI_Init+0x25a>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	69db      	ldr	r3, [r3, #28]
 800984e:	2b28      	cmp	r3, #40	; 0x28
 8009850:	d049      	beq.n	80098e6 <HAL_SPI_Init+0x25a>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	69db      	ldr	r3, [r3, #28]
 8009856:	2b30      	cmp	r3, #48	; 0x30
 8009858:	d045      	beq.n	80098e6 <HAL_SPI_Init+0x25a>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	69db      	ldr	r3, [r3, #28]
 800985e:	2b38      	cmp	r3, #56	; 0x38
 8009860:	d041      	beq.n	80098e6 <HAL_SPI_Init+0x25a>
 8009862:	f240 114f 	movw	r1, #335	; 0x14f
 8009866:	4809      	ldr	r0, [pc, #36]	; (800988c <HAL_SPI_Init+0x200>)
 8009868:	f7f8 fe67 	bl	800253a <assert_failed>
 800986c:	e03b      	b.n	80098e6 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	61da      	str	r2, [r3, #28]
 8009874:	e037      	b.n	80098e6 <HAL_SPI_Init+0x25a>
 8009876:	bf00      	nop
 8009878:	40013000 	.word	0x40013000
 800987c:	40003800 	.word	0x40003800
 8009880:	40003c00 	.word	0x40003c00
 8009884:	40013400 	.word	0x40013400
 8009888:	40015000 	.word	0x40015000
 800988c:	0800f360 	.word	0x0800f360
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	69db      	ldr	r3, [r3, #28]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d020      	beq.n	80098da <HAL_SPI_Init+0x24e>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	69db      	ldr	r3, [r3, #28]
 800989c:	2b08      	cmp	r3, #8
 800989e:	d01c      	beq.n	80098da <HAL_SPI_Init+0x24e>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	69db      	ldr	r3, [r3, #28]
 80098a4:	2b10      	cmp	r3, #16
 80098a6:	d018      	beq.n	80098da <HAL_SPI_Init+0x24e>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	69db      	ldr	r3, [r3, #28]
 80098ac:	2b18      	cmp	r3, #24
 80098ae:	d014      	beq.n	80098da <HAL_SPI_Init+0x24e>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	69db      	ldr	r3, [r3, #28]
 80098b4:	2b20      	cmp	r3, #32
 80098b6:	d010      	beq.n	80098da <HAL_SPI_Init+0x24e>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	69db      	ldr	r3, [r3, #28]
 80098bc:	2b28      	cmp	r3, #40	; 0x28
 80098be:	d00c      	beq.n	80098da <HAL_SPI_Init+0x24e>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	69db      	ldr	r3, [r3, #28]
 80098c4:	2b30      	cmp	r3, #48	; 0x30
 80098c6:	d008      	beq.n	80098da <HAL_SPI_Init+0x24e>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	69db      	ldr	r3, [r3, #28]
 80098cc:	2b38      	cmp	r3, #56	; 0x38
 80098ce:	d004      	beq.n	80098da <HAL_SPI_Init+0x24e>
 80098d0:	f240 1159 	movw	r1, #345	; 0x159
 80098d4:	484a      	ldr	r0, [pc, #296]	; (8009a00 <HAL_SPI_Init+0x374>)
 80098d6:	f7f8 fe30 	bl	800253a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d126      	bne.n	8009946 <HAL_SPI_Init+0x2ba>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a40      	ldr	r2, [pc, #256]	; (8009a04 <HAL_SPI_Init+0x378>)
 8009904:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a3f      	ldr	r2, [pc, #252]	; (8009a08 <HAL_SPI_Init+0x37c>)
 800990a:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a3f      	ldr	r2, [pc, #252]	; (8009a0c <HAL_SPI_Init+0x380>)
 8009910:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a3e      	ldr	r2, [pc, #248]	; (8009a10 <HAL_SPI_Init+0x384>)
 8009916:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a3e      	ldr	r2, [pc, #248]	; (8009a14 <HAL_SPI_Init+0x388>)
 800991c:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4a3d      	ldr	r2, [pc, #244]	; (8009a18 <HAL_SPI_Init+0x38c>)
 8009922:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a3d      	ldr	r2, [pc, #244]	; (8009a1c <HAL_SPI_Init+0x390>)
 8009928:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a3c      	ldr	r2, [pc, #240]	; (8009a20 <HAL_SPI_Init+0x394>)
 800992e:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009934:	2b00      	cmp	r3, #0
 8009936:	d102      	bne.n	800993e <HAL_SPI_Init+0x2b2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a3a      	ldr	r2, [pc, #232]	; (8009a24 <HAL_SPI_Init+0x398>)
 800993c:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2202      	movs	r2, #2
 800994a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800995c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800996e:	431a      	orrs	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009978:	431a      	orrs	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	f003 0302 	and.w	r3, r3, #2
 8009982:	431a      	orrs	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	695b      	ldr	r3, [r3, #20]
 8009988:	f003 0301 	and.w	r3, r3, #1
 800998c:	431a      	orrs	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	699b      	ldr	r3, [r3, #24]
 8009992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009996:	431a      	orrs	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	69db      	ldr	r3, [r3, #28]
 800999c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099a0:	431a      	orrs	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099aa:	ea42 0103 	orr.w	r1, r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	430a      	orrs	r2, r1
 80099bc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	699b      	ldr	r3, [r3, #24]
 80099c2:	0c1b      	lsrs	r3, r3, #16
 80099c4:	f003 0104 	and.w	r1, r3, #4
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099cc:	f003 0210 	and.w	r2, r3, #16
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	430a      	orrs	r2, r1
 80099d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	69da      	ldr	r2, [r3, #28]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80099e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	0800f360 	.word	0x0800f360
 8009a04:	08009c29 	.word	0x08009c29
 8009a08:	08009c3d 	.word	0x08009c3d
 8009a0c:	08009c51 	.word	0x08009c51
 8009a10:	08009c65 	.word	0x08009c65
 8009a14:	08009c79 	.word	0x08009c79
 8009a18:	08009c8d 	.word	0x08009c8d
 8009a1c:	08009ca1 	.word	0x08009ca1
 8009a20:	08009cb5 	.word	0x08009cb5
 8009a24:	08002789 	.word	0x08002789

08009a28 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b088      	sub	sp, #32
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	099b      	lsrs	r3, r3, #6
 8009a44:	f003 0301 	and.w	r3, r3, #1
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10f      	bne.n	8009a6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00a      	beq.n	8009a6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	099b      	lsrs	r3, r3, #6
 8009a5a:	f003 0301 	and.w	r3, r3, #1
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d004      	beq.n	8009a6c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	4798      	blx	r3
    return;
 8009a6a:	e0d8      	b.n	8009c1e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	085b      	lsrs	r3, r3, #1
 8009a70:	f003 0301 	and.w	r3, r3, #1
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00a      	beq.n	8009a8e <HAL_SPI_IRQHandler+0x66>
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	09db      	lsrs	r3, r3, #7
 8009a7c:	f003 0301 	and.w	r3, r3, #1
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d004      	beq.n	8009a8e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	4798      	blx	r3
    return;
 8009a8c:	e0c7      	b.n	8009c1e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	095b      	lsrs	r3, r3, #5
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d10c      	bne.n	8009ab4 <HAL_SPI_IRQHandler+0x8c>
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	099b      	lsrs	r3, r3, #6
 8009a9e:	f003 0301 	and.w	r3, r3, #1
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d106      	bne.n	8009ab4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	0a1b      	lsrs	r3, r3, #8
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f000 80b5 	beq.w	8009c1e <HAL_SPI_IRQHandler+0x1f6>
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	095b      	lsrs	r3, r3, #5
 8009ab8:	f003 0301 	and.w	r3, r3, #1
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f000 80ae 	beq.w	8009c1e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	099b      	lsrs	r3, r3, #6
 8009ac6:	f003 0301 	and.w	r3, r3, #1
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d023      	beq.n	8009b16 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	2b03      	cmp	r3, #3
 8009ad8:	d011      	beq.n	8009afe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ade:	f043 0204 	orr.w	r2, r3, #4
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	617b      	str	r3, [r7, #20]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	617b      	str	r3, [r7, #20]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	617b      	str	r3, [r7, #20]
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	e00b      	b.n	8009b16 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009afe:	2300      	movs	r3, #0
 8009b00:	613b      	str	r3, [r7, #16]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	613b      	str	r3, [r7, #16]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	613b      	str	r3, [r7, #16]
 8009b12:	693b      	ldr	r3, [r7, #16]
        return;
 8009b14:	e083      	b.n	8009c1e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	095b      	lsrs	r3, r3, #5
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d014      	beq.n	8009b4c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b26:	f043 0201 	orr.w	r2, r3, #1
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009b2e:	2300      	movs	r3, #0
 8009b30:	60fb      	str	r3, [r7, #12]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	60fb      	str	r3, [r7, #12]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b48:	601a      	str	r2, [r3, #0]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	0a1b      	lsrs	r3, r3, #8
 8009b50:	f003 0301 	and.w	r3, r3, #1
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00c      	beq.n	8009b72 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b5c:	f043 0208 	orr.w	r2, r3, #8
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009b64:	2300      	movs	r3, #0
 8009b66:	60bb      	str	r3, [r7, #8]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	60bb      	str	r3, [r7, #8]
 8009b70:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d050      	beq.n	8009c1c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	685a      	ldr	r2, [r3, #4]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009b88:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	f003 0302 	and.w	r3, r3, #2
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d104      	bne.n	8009ba6 <HAL_SPI_IRQHandler+0x17e>
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d034      	beq.n	8009c10 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	685a      	ldr	r2, [r3, #4]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f022 0203 	bic.w	r2, r2, #3
 8009bb4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d011      	beq.n	8009be2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bc2:	4a18      	ldr	r2, [pc, #96]	; (8009c24 <HAL_SPI_IRQHandler+0x1fc>)
 8009bc4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7fa fec4 	bl	8004958 <HAL_DMA_Abort_IT>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d005      	beq.n	8009be2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d017      	beq.n	8009c1a <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bee:	4a0d      	ldr	r2, [pc, #52]	; (8009c24 <HAL_SPI_IRQHandler+0x1fc>)
 8009bf0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fa feae 	bl	8004958 <HAL_DMA_Abort_IT>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00b      	beq.n	8009c1a <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009c0e:	e004      	b.n	8009c1a <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009c18:	e000      	b.n	8009c1c <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8009c1a:	bf00      	nop
    return;
 8009c1c:	bf00      	nop
  }
}
 8009c1e:	3720      	adds	r7, #32
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	08009cc9 	.word	0x08009cc9

08009c28 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009c30:	bf00      	nop
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009c44:	bf00      	nop
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009c58:	bf00      	nop
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009cea:	bf00      	nop
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
	...

08009cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e0b2      	b.n	8009e6c <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a5a      	ldr	r2, [pc, #360]	; (8009e74 <HAL_TIM_Base_Init+0x180>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d027      	beq.n	8009d60 <HAL_TIM_Base_Init+0x6c>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d18:	d022      	beq.n	8009d60 <HAL_TIM_Base_Init+0x6c>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a56      	ldr	r2, [pc, #344]	; (8009e78 <HAL_TIM_Base_Init+0x184>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d01d      	beq.n	8009d60 <HAL_TIM_Base_Init+0x6c>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a54      	ldr	r2, [pc, #336]	; (8009e7c <HAL_TIM_Base_Init+0x188>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d018      	beq.n	8009d60 <HAL_TIM_Base_Init+0x6c>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a53      	ldr	r2, [pc, #332]	; (8009e80 <HAL_TIM_Base_Init+0x18c>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d013      	beq.n	8009d60 <HAL_TIM_Base_Init+0x6c>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a51      	ldr	r2, [pc, #324]	; (8009e84 <HAL_TIM_Base_Init+0x190>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d00e      	beq.n	8009d60 <HAL_TIM_Base_Init+0x6c>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a50      	ldr	r2, [pc, #320]	; (8009e88 <HAL_TIM_Base_Init+0x194>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d009      	beq.n	8009d60 <HAL_TIM_Base_Init+0x6c>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a4e      	ldr	r2, [pc, #312]	; (8009e8c <HAL_TIM_Base_Init+0x198>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d004      	beq.n	8009d60 <HAL_TIM_Base_Init+0x6c>
 8009d56:	f240 1113 	movw	r1, #275	; 0x113
 8009d5a:	484d      	ldr	r0, [pc, #308]	; (8009e90 <HAL_TIM_Base_Init+0x19c>)
 8009d5c:	f7f8 fbed 	bl	800253a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d014      	beq.n	8009d92 <HAL_TIM_Base_Init+0x9e>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	2b10      	cmp	r3, #16
 8009d6e:	d010      	beq.n	8009d92 <HAL_TIM_Base_Init+0x9e>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	2b20      	cmp	r3, #32
 8009d76:	d00c      	beq.n	8009d92 <HAL_TIM_Base_Init+0x9e>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	2b40      	cmp	r3, #64	; 0x40
 8009d7e:	d008      	beq.n	8009d92 <HAL_TIM_Base_Init+0x9e>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	2b60      	cmp	r3, #96	; 0x60
 8009d86:	d004      	beq.n	8009d92 <HAL_TIM_Base_Init+0x9e>
 8009d88:	f44f 718a 	mov.w	r1, #276	; 0x114
 8009d8c:	4840      	ldr	r0, [pc, #256]	; (8009e90 <HAL_TIM_Base_Init+0x19c>)
 8009d8e:	f7f8 fbd4 	bl	800253a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00e      	beq.n	8009db8 <HAL_TIM_Base_Init+0xc4>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009da2:	d009      	beq.n	8009db8 <HAL_TIM_Base_Init+0xc4>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	691b      	ldr	r3, [r3, #16]
 8009da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dac:	d004      	beq.n	8009db8 <HAL_TIM_Base_Init+0xc4>
 8009dae:	f240 1115 	movw	r1, #277	; 0x115
 8009db2:	4837      	ldr	r0, [pc, #220]	; (8009e90 <HAL_TIM_Base_Init+0x19c>)
 8009db4:	f7f8 fbc1 	bl	800253a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	699b      	ldr	r3, [r3, #24]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d008      	beq.n	8009dd2 <HAL_TIM_Base_Init+0xde>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	699b      	ldr	r3, [r3, #24]
 8009dc4:	2b80      	cmp	r3, #128	; 0x80
 8009dc6:	d004      	beq.n	8009dd2 <HAL_TIM_Base_Init+0xde>
 8009dc8:	f44f 718b 	mov.w	r1, #278	; 0x116
 8009dcc:	4830      	ldr	r0, [pc, #192]	; (8009e90 <HAL_TIM_Base_Init+0x19c>)
 8009dce:	f7f8 fbb4 	bl	800253a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d111      	bne.n	8009e02 <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 ff80 	bl	800acec <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d102      	bne.n	8009dfa <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a27      	ldr	r2, [pc, #156]	; (8009e94 <HAL_TIM_Base_Init+0x1a0>)
 8009df8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2202      	movs	r2, #2
 8009e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	3304      	adds	r3, #4
 8009e12:	4619      	mov	r1, r3
 8009e14:	4610      	mov	r0, r2
 8009e16:	f000 fe4f 	bl	800aab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2201      	movs	r2, #1
 8009e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2201      	movs	r2, #1
 8009e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3708      	adds	r7, #8
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	40010000 	.word	0x40010000
 8009e78:	40000400 	.word	0x40000400
 8009e7c:	40000800 	.word	0x40000800
 8009e80:	40000c00 	.word	0x40000c00
 8009e84:	40014000 	.word	0x40014000
 8009e88:	40014400 	.word	0x40014400
 8009e8c:	40014800 	.word	0x40014800
 8009e90:	0800f3d4 	.word	0x0800f3d4
 8009e94:	08002e41 	.word	0x08002e41

08009e98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a39      	ldr	r2, [pc, #228]	; (8009f8c <HAL_TIM_Base_Start+0xf4>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d027      	beq.n	8009efa <HAL_TIM_Base_Start+0x62>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eb2:	d022      	beq.n	8009efa <HAL_TIM_Base_Start+0x62>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a35      	ldr	r2, [pc, #212]	; (8009f90 <HAL_TIM_Base_Start+0xf8>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d01d      	beq.n	8009efa <HAL_TIM_Base_Start+0x62>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a34      	ldr	r2, [pc, #208]	; (8009f94 <HAL_TIM_Base_Start+0xfc>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d018      	beq.n	8009efa <HAL_TIM_Base_Start+0x62>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a32      	ldr	r2, [pc, #200]	; (8009f98 <HAL_TIM_Base_Start+0x100>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d013      	beq.n	8009efa <HAL_TIM_Base_Start+0x62>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a31      	ldr	r2, [pc, #196]	; (8009f9c <HAL_TIM_Base_Start+0x104>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d00e      	beq.n	8009efa <HAL_TIM_Base_Start+0x62>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a2f      	ldr	r2, [pc, #188]	; (8009fa0 <HAL_TIM_Base_Start+0x108>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d009      	beq.n	8009efa <HAL_TIM_Base_Start+0x62>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a2e      	ldr	r2, [pc, #184]	; (8009fa4 <HAL_TIM_Base_Start+0x10c>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d004      	beq.n	8009efa <HAL_TIM_Base_Start+0x62>
 8009ef0:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8009ef4:	482c      	ldr	r0, [pc, #176]	; (8009fa8 <HAL_TIM_Base_Start+0x110>)
 8009ef6:	f7f8 fb20 	bl	800253a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d001      	beq.n	8009f0a <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e03c      	b.n	8009f84 <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2202      	movs	r2, #2
 8009f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a1d      	ldr	r2, [pc, #116]	; (8009f8c <HAL_TIM_Base_Start+0xf4>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d018      	beq.n	8009f4e <HAL_TIM_Base_Start+0xb6>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f24:	d013      	beq.n	8009f4e <HAL_TIM_Base_Start+0xb6>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a19      	ldr	r2, [pc, #100]	; (8009f90 <HAL_TIM_Base_Start+0xf8>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d00e      	beq.n	8009f4e <HAL_TIM_Base_Start+0xb6>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a17      	ldr	r2, [pc, #92]	; (8009f94 <HAL_TIM_Base_Start+0xfc>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d009      	beq.n	8009f4e <HAL_TIM_Base_Start+0xb6>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a16      	ldr	r2, [pc, #88]	; (8009f98 <HAL_TIM_Base_Start+0x100>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d004      	beq.n	8009f4e <HAL_TIM_Base_Start+0xb6>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a14      	ldr	r2, [pc, #80]	; (8009f9c <HAL_TIM_Base_Start+0x104>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d111      	bne.n	8009f72 <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	f003 0307 	and.w	r3, r3, #7
 8009f58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2b06      	cmp	r3, #6
 8009f5e:	d010      	beq.n	8009f82 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f042 0201 	orr.w	r2, r2, #1
 8009f6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f70:	e007      	b.n	8009f82 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f042 0201 	orr.w	r2, r2, #1
 8009f80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	40010000 	.word	0x40010000
 8009f90:	40000400 	.word	0x40000400
 8009f94:	40000800 	.word	0x40000800
 8009f98:	40000c00 	.word	0x40000c00
 8009f9c:	40014000 	.word	0x40014000
 8009fa0:	40014400 	.word	0x40014400
 8009fa4:	40014800 	.word	0x40014800
 8009fa8:	0800f3d4 	.word	0x0800f3d4

08009fac <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a25      	ldr	r2, [pc, #148]	; (800a050 <HAL_TIM_Base_Stop+0xa4>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d027      	beq.n	800a00e <HAL_TIM_Base_Stop+0x62>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fc6:	d022      	beq.n	800a00e <HAL_TIM_Base_Stop+0x62>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a21      	ldr	r2, [pc, #132]	; (800a054 <HAL_TIM_Base_Stop+0xa8>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d01d      	beq.n	800a00e <HAL_TIM_Base_Stop+0x62>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a20      	ldr	r2, [pc, #128]	; (800a058 <HAL_TIM_Base_Stop+0xac>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d018      	beq.n	800a00e <HAL_TIM_Base_Stop+0x62>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a1e      	ldr	r2, [pc, #120]	; (800a05c <HAL_TIM_Base_Stop+0xb0>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d013      	beq.n	800a00e <HAL_TIM_Base_Stop+0x62>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a1d      	ldr	r2, [pc, #116]	; (800a060 <HAL_TIM_Base_Stop+0xb4>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d00e      	beq.n	800a00e <HAL_TIM_Base_Stop+0x62>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a1b      	ldr	r2, [pc, #108]	; (800a064 <HAL_TIM_Base_Stop+0xb8>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d009      	beq.n	800a00e <HAL_TIM_Base_Stop+0x62>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a1a      	ldr	r2, [pc, #104]	; (800a068 <HAL_TIM_Base_Stop+0xbc>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d004      	beq.n	800a00e <HAL_TIM_Base_Stop+0x62>
 800a004:	f240 11b9 	movw	r1, #441	; 0x1b9
 800a008:	4818      	ldr	r0, [pc, #96]	; (800a06c <HAL_TIM_Base_Stop+0xc0>)
 800a00a:	f7f8 fa96 	bl	800253a <assert_failed>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	6a1a      	ldr	r2, [r3, #32]
 800a014:	f241 1311 	movw	r3, #4369	; 0x1111
 800a018:	4013      	ands	r3, r2
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d10f      	bne.n	800a03e <HAL_TIM_Base_Stop+0x92>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	6a1a      	ldr	r2, [r3, #32]
 800a024:	f240 4344 	movw	r3, #1092	; 0x444
 800a028:	4013      	ands	r3, r2
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d107      	bne.n	800a03e <HAL_TIM_Base_Stop+0x92>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f022 0201 	bic.w	r2, r2, #1
 800a03c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3708      	adds	r7, #8
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	40010000 	.word	0x40010000
 800a054:	40000400 	.word	0x40000400
 800a058:	40000800 	.word	0x40000800
 800a05c:	40000c00 	.word	0x40000c00
 800a060:	40014000 	.word	0x40014000
 800a064:	40014400 	.word	0x40014400
 800a068:	40014800 	.word	0x40014800
 800a06c:	0800f3d4 	.word	0x0800f3d4

0800a070 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a3d      	ldr	r2, [pc, #244]	; (800a174 <HAL_TIM_Base_Start_IT+0x104>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d027      	beq.n	800a0d2 <HAL_TIM_Base_Start_IT+0x62>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a08a:	d022      	beq.n	800a0d2 <HAL_TIM_Base_Start_IT+0x62>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a39      	ldr	r2, [pc, #228]	; (800a178 <HAL_TIM_Base_Start_IT+0x108>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d01d      	beq.n	800a0d2 <HAL_TIM_Base_Start_IT+0x62>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a38      	ldr	r2, [pc, #224]	; (800a17c <HAL_TIM_Base_Start_IT+0x10c>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d018      	beq.n	800a0d2 <HAL_TIM_Base_Start_IT+0x62>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a36      	ldr	r2, [pc, #216]	; (800a180 <HAL_TIM_Base_Start_IT+0x110>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d013      	beq.n	800a0d2 <HAL_TIM_Base_Start_IT+0x62>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a35      	ldr	r2, [pc, #212]	; (800a184 <HAL_TIM_Base_Start_IT+0x114>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d00e      	beq.n	800a0d2 <HAL_TIM_Base_Start_IT+0x62>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a33      	ldr	r2, [pc, #204]	; (800a188 <HAL_TIM_Base_Start_IT+0x118>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d009      	beq.n	800a0d2 <HAL_TIM_Base_Start_IT+0x62>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a32      	ldr	r2, [pc, #200]	; (800a18c <HAL_TIM_Base_Start_IT+0x11c>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d004      	beq.n	800a0d2 <HAL_TIM_Base_Start_IT+0x62>
 800a0c8:	f240 11cf 	movw	r1, #463	; 0x1cf
 800a0cc:	4830      	ldr	r0, [pc, #192]	; (800a190 <HAL_TIM_Base_Start_IT+0x120>)
 800a0ce:	f7f8 fa34 	bl	800253a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d001      	beq.n	800a0e2 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e044      	b.n	800a16c <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2202      	movs	r2, #2
 800a0e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68da      	ldr	r2, [r3, #12]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f042 0201 	orr.w	r2, r2, #1
 800a0f8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a1d      	ldr	r2, [pc, #116]	; (800a174 <HAL_TIM_Base_Start_IT+0x104>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d018      	beq.n	800a136 <HAL_TIM_Base_Start_IT+0xc6>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a10c:	d013      	beq.n	800a136 <HAL_TIM_Base_Start_IT+0xc6>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a19      	ldr	r2, [pc, #100]	; (800a178 <HAL_TIM_Base_Start_IT+0x108>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d00e      	beq.n	800a136 <HAL_TIM_Base_Start_IT+0xc6>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a17      	ldr	r2, [pc, #92]	; (800a17c <HAL_TIM_Base_Start_IT+0x10c>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d009      	beq.n	800a136 <HAL_TIM_Base_Start_IT+0xc6>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a16      	ldr	r2, [pc, #88]	; (800a180 <HAL_TIM_Base_Start_IT+0x110>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d004      	beq.n	800a136 <HAL_TIM_Base_Start_IT+0xc6>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a14      	ldr	r2, [pc, #80]	; (800a184 <HAL_TIM_Base_Start_IT+0x114>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d111      	bne.n	800a15a <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	f003 0307 	and.w	r3, r3, #7
 800a140:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2b06      	cmp	r3, #6
 800a146:	d010      	beq.n	800a16a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f042 0201 	orr.w	r2, r2, #1
 800a156:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a158:	e007      	b.n	800a16a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f042 0201 	orr.w	r2, r2, #1
 800a168:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	40010000 	.word	0x40010000
 800a178:	40000400 	.word	0x40000400
 800a17c:	40000800 	.word	0x40000800
 800a180:	40000c00 	.word	0x40000c00
 800a184:	40014000 	.word	0x40014000
 800a188:	40014400 	.word	0x40014400
 800a18c:	40014800 	.word	0x40014800
 800a190:	0800f3d4 	.word	0x0800f3d4

0800a194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	f003 0302 	and.w	r3, r3, #2
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d128      	bne.n	800a1fc <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	f003 0302 	and.w	r3, r3, #2
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	d121      	bne.n	800a1fc <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f06f 0202 	mvn.w	r2, #2
 800a1c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	699b      	ldr	r3, [r3, #24]
 800a1ce:	f003 0303 	and.w	r3, r3, #3
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d005      	beq.n	800a1e2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	4798      	blx	r3
 800a1e0:	e009      	b.n	800a1f6 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	f003 0304 	and.w	r3, r3, #4
 800a206:	2b04      	cmp	r3, #4
 800a208:	d128      	bne.n	800a25c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	f003 0304 	and.w	r3, r3, #4
 800a214:	2b04      	cmp	r3, #4
 800a216:	d121      	bne.n	800a25c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f06f 0204 	mvn.w	r2, #4
 800a220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2202      	movs	r2, #2
 800a226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	699b      	ldr	r3, [r3, #24]
 800a22e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a232:	2b00      	cmp	r3, #0
 800a234:	d005      	beq.n	800a242 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	4798      	blx	r3
 800a240:	e009      	b.n	800a256 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	f003 0308 	and.w	r3, r3, #8
 800a266:	2b08      	cmp	r3, #8
 800a268:	d128      	bne.n	800a2bc <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	f003 0308 	and.w	r3, r3, #8
 800a274:	2b08      	cmp	r3, #8
 800a276:	d121      	bne.n	800a2bc <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f06f 0208 	mvn.w	r2, #8
 800a280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2204      	movs	r2, #4
 800a286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	69db      	ldr	r3, [r3, #28]
 800a28e:	f003 0303 	and.w	r3, r3, #3
 800a292:	2b00      	cmp	r3, #0
 800a294:	d005      	beq.n	800a2a2 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	4798      	blx	r3
 800a2a0:	e009      	b.n	800a2b6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	f003 0310 	and.w	r3, r3, #16
 800a2c6:	2b10      	cmp	r3, #16
 800a2c8:	d128      	bne.n	800a31c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	f003 0310 	and.w	r3, r3, #16
 800a2d4:	2b10      	cmp	r3, #16
 800a2d6:	d121      	bne.n	800a31c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f06f 0210 	mvn.w	r2, #16
 800a2e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2208      	movs	r2, #8
 800a2e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	69db      	ldr	r3, [r3, #28]
 800a2ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d005      	beq.n	800a302 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	4798      	blx	r3
 800a300:	e009      	b.n	800a316 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	f003 0301 	and.w	r3, r3, #1
 800a326:	2b01      	cmp	r3, #1
 800a328:	d110      	bne.n	800a34c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	f003 0301 	and.w	r3, r3, #1
 800a334:	2b01      	cmp	r3, #1
 800a336:	d109      	bne.n	800a34c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f06f 0201 	mvn.w	r2, #1
 800a340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a356:	2b80      	cmp	r3, #128	; 0x80
 800a358:	d110      	bne.n	800a37c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a364:	2b80      	cmp	r3, #128	; 0x80
 800a366:	d109      	bne.n	800a37c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a386:	2b40      	cmp	r3, #64	; 0x40
 800a388:	d110      	bne.n	800a3ac <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a394:	2b40      	cmp	r3, #64	; 0x40
 800a396:	d109      	bne.n	800a3ac <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	691b      	ldr	r3, [r3, #16]
 800a3b2:	f003 0320 	and.w	r3, r3, #32
 800a3b6:	2b20      	cmp	r3, #32
 800a3b8:	d110      	bne.n	800a3dc <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	f003 0320 	and.w	r3, r3, #32
 800a3c4:	2b20      	cmp	r3, #32
 800a3c6:	d109      	bne.n	800a3dc <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f06f 0220 	mvn.w	r2, #32
 800a3d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a3dc:	bf00      	nop
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d101      	bne.n	800a400 <HAL_TIM_ConfigClockSource+0x1c>
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	e2f0      	b.n	800a9e2 <HAL_TIM_ConfigClockSource+0x5fe>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2202      	movs	r2, #2
 800a40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a418:	d029      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0x8a>
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2b70      	cmp	r3, #112	; 0x70
 800a420:	d025      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0x8a>
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a42a:	d020      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0x8a>
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2b40      	cmp	r3, #64	; 0x40
 800a432:	d01c      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0x8a>
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b50      	cmp	r3, #80	; 0x50
 800a43a:	d018      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0x8a>
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2b60      	cmp	r3, #96	; 0x60
 800a442:	d014      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0x8a>
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d010      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0x8a>
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	2b10      	cmp	r3, #16
 800a452:	d00c      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0x8a>
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2b20      	cmp	r3, #32
 800a45a:	d008      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0x8a>
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2b30      	cmp	r3, #48	; 0x30
 800a462:	d004      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0x8a>
 800a464:	f241 41b7 	movw	r1, #5303	; 0x14b7
 800a468:	487c      	ldr	r0, [pc, #496]	; (800a65c <HAL_TIM_ConfigClockSource+0x278>)
 800a46a:	f7f8 f866 	bl	800253a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a47c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a484:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a496:	f000 80f1 	beq.w	800a67c <HAL_TIM_ConfigClockSource+0x298>
 800a49a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a49e:	f200 8293 	bhi.w	800a9c8 <HAL_TIM_ConfigClockSource+0x5e4>
 800a4a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4a6:	d02d      	beq.n	800a504 <HAL_TIM_ConfigClockSource+0x120>
 800a4a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ac:	f200 828c 	bhi.w	800a9c8 <HAL_TIM_ConfigClockSource+0x5e4>
 800a4b0:	2b70      	cmp	r3, #112	; 0x70
 800a4b2:	d05d      	beq.n	800a570 <HAL_TIM_ConfigClockSource+0x18c>
 800a4b4:	2b70      	cmp	r3, #112	; 0x70
 800a4b6:	f200 8287 	bhi.w	800a9c8 <HAL_TIM_ConfigClockSource+0x5e4>
 800a4ba:	2b60      	cmp	r3, #96	; 0x60
 800a4bc:	f000 81a0 	beq.w	800a800 <HAL_TIM_ConfigClockSource+0x41c>
 800a4c0:	2b60      	cmp	r3, #96	; 0x60
 800a4c2:	f200 8281 	bhi.w	800a9c8 <HAL_TIM_ConfigClockSource+0x5e4>
 800a4c6:	2b50      	cmp	r3, #80	; 0x50
 800a4c8:	f000 8144 	beq.w	800a754 <HAL_TIM_ConfigClockSource+0x370>
 800a4cc:	2b50      	cmp	r3, #80	; 0x50
 800a4ce:	f200 827b 	bhi.w	800a9c8 <HAL_TIM_ConfigClockSource+0x5e4>
 800a4d2:	2b40      	cmp	r3, #64	; 0x40
 800a4d4:	f000 81f6 	beq.w	800a8c4 <HAL_TIM_ConfigClockSource+0x4e0>
 800a4d8:	2b40      	cmp	r3, #64	; 0x40
 800a4da:	f200 8275 	bhi.w	800a9c8 <HAL_TIM_ConfigClockSource+0x5e4>
 800a4de:	2b30      	cmp	r3, #48	; 0x30
 800a4e0:	f000 8246 	beq.w	800a970 <HAL_TIM_ConfigClockSource+0x58c>
 800a4e4:	2b30      	cmp	r3, #48	; 0x30
 800a4e6:	f200 826f 	bhi.w	800a9c8 <HAL_TIM_ConfigClockSource+0x5e4>
 800a4ea:	2b20      	cmp	r3, #32
 800a4ec:	f000 8240 	beq.w	800a970 <HAL_TIM_ConfigClockSource+0x58c>
 800a4f0:	2b20      	cmp	r3, #32
 800a4f2:	f200 8269 	bhi.w	800a9c8 <HAL_TIM_ConfigClockSource+0x5e4>
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	f000 823a 	beq.w	800a970 <HAL_TIM_ConfigClockSource+0x58c>
 800a4fc:	2b10      	cmp	r3, #16
 800a4fe:	f000 8237 	beq.w	800a970 <HAL_TIM_ConfigClockSource+0x58c>
 800a502:	e261      	b.n	800a9c8 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a55      	ldr	r2, [pc, #340]	; (800a660 <HAL_TIM_ConfigClockSource+0x27c>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	f000 825f 	beq.w	800a9ce <HAL_TIM_ConfigClockSource+0x5ea>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a518:	f000 8259 	beq.w	800a9ce <HAL_TIM_ConfigClockSource+0x5ea>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a50      	ldr	r2, [pc, #320]	; (800a664 <HAL_TIM_ConfigClockSource+0x280>)
 800a522:	4293      	cmp	r3, r2
 800a524:	f000 8253 	beq.w	800a9ce <HAL_TIM_ConfigClockSource+0x5ea>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a4e      	ldr	r2, [pc, #312]	; (800a668 <HAL_TIM_ConfigClockSource+0x284>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	f000 824d 	beq.w	800a9ce <HAL_TIM_ConfigClockSource+0x5ea>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a4c      	ldr	r2, [pc, #304]	; (800a66c <HAL_TIM_ConfigClockSource+0x288>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	f000 8247 	beq.w	800a9ce <HAL_TIM_ConfigClockSource+0x5ea>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a4a      	ldr	r2, [pc, #296]	; (800a670 <HAL_TIM_ConfigClockSource+0x28c>)
 800a546:	4293      	cmp	r3, r2
 800a548:	f000 8241 	beq.w	800a9ce <HAL_TIM_ConfigClockSource+0x5ea>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a48      	ldr	r2, [pc, #288]	; (800a674 <HAL_TIM_ConfigClockSource+0x290>)
 800a552:	4293      	cmp	r3, r2
 800a554:	f000 823b 	beq.w	800a9ce <HAL_TIM_ConfigClockSource+0x5ea>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a46      	ldr	r2, [pc, #280]	; (800a678 <HAL_TIM_ConfigClockSource+0x294>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	f000 8235 	beq.w	800a9ce <HAL_TIM_ConfigClockSource+0x5ea>
 800a564:	f241 41c3 	movw	r1, #5315	; 0x14c3
 800a568:	483c      	ldr	r0, [pc, #240]	; (800a65c <HAL_TIM_ConfigClockSource+0x278>)
 800a56a:	f7f7 ffe6 	bl	800253a <assert_failed>
      break;
 800a56e:	e22e      	b.n	800a9ce <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a3a      	ldr	r2, [pc, #232]	; (800a660 <HAL_TIM_ConfigClockSource+0x27c>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d01d      	beq.n	800a5b6 <HAL_TIM_ConfigClockSource+0x1d2>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a582:	d018      	beq.n	800a5b6 <HAL_TIM_ConfigClockSource+0x1d2>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a36      	ldr	r2, [pc, #216]	; (800a664 <HAL_TIM_ConfigClockSource+0x280>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d013      	beq.n	800a5b6 <HAL_TIM_ConfigClockSource+0x1d2>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a35      	ldr	r2, [pc, #212]	; (800a668 <HAL_TIM_ConfigClockSource+0x284>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d00e      	beq.n	800a5b6 <HAL_TIM_ConfigClockSource+0x1d2>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a33      	ldr	r2, [pc, #204]	; (800a66c <HAL_TIM_ConfigClockSource+0x288>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d009      	beq.n	800a5b6 <HAL_TIM_ConfigClockSource+0x1d2>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a32      	ldr	r2, [pc, #200]	; (800a670 <HAL_TIM_ConfigClockSource+0x28c>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d004      	beq.n	800a5b6 <HAL_TIM_ConfigClockSource+0x1d2>
 800a5ac:	f241 41ca 	movw	r1, #5322	; 0x14ca
 800a5b0:	482a      	ldr	r0, [pc, #168]	; (800a65c <HAL_TIM_ConfigClockSource+0x278>)
 800a5b2:	f7f7 ffc2 	bl	800253a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d013      	beq.n	800a5e6 <HAL_TIM_ConfigClockSource+0x202>
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5c6:	d00e      	beq.n	800a5e6 <HAL_TIM_ConfigClockSource+0x202>
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5d0:	d009      	beq.n	800a5e6 <HAL_TIM_ConfigClockSource+0x202>
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a5da:	d004      	beq.n	800a5e6 <HAL_TIM_ConfigClockSource+0x202>
 800a5dc:	f241 41cd 	movw	r1, #5325	; 0x14cd
 800a5e0:	481e      	ldr	r0, [pc, #120]	; (800a65c <HAL_TIM_ConfigClockSource+0x278>)
 800a5e2:	f7f7 ffaa 	bl	800253a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5ee:	d014      	beq.n	800a61a <HAL_TIM_ConfigClockSource+0x236>
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d010      	beq.n	800a61a <HAL_TIM_ConfigClockSource+0x236>
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d00c      	beq.n	800a61a <HAL_TIM_ConfigClockSource+0x236>
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	2b02      	cmp	r3, #2
 800a606:	d008      	beq.n	800a61a <HAL_TIM_ConfigClockSource+0x236>
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	2b0a      	cmp	r3, #10
 800a60e:	d004      	beq.n	800a61a <HAL_TIM_ConfigClockSource+0x236>
 800a610:	f241 41ce 	movw	r1, #5326	; 0x14ce
 800a614:	4811      	ldr	r0, [pc, #68]	; (800a65c <HAL_TIM_ConfigClockSource+0x278>)
 800a616:	f7f7 ff90 	bl	800253a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	2b0f      	cmp	r3, #15
 800a620:	d904      	bls.n	800a62c <HAL_TIM_ConfigClockSource+0x248>
 800a622:	f241 41cf 	movw	r1, #5327	; 0x14cf
 800a626:	480d      	ldr	r0, [pc, #52]	; (800a65c <HAL_TIM_ConfigClockSource+0x278>)
 800a628:	f7f7 ff87 	bl	800253a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6818      	ldr	r0, [r3, #0]
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	6899      	ldr	r1, [r3, #8]
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	685a      	ldr	r2, [r3, #4]
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	f000 fb36 	bl	800acac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a64e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	609a      	str	r2, [r3, #8]
      break;
 800a658:	e1ba      	b.n	800a9d0 <HAL_TIM_ConfigClockSource+0x5ec>
 800a65a:	bf00      	nop
 800a65c:	0800f3d4 	.word	0x0800f3d4
 800a660:	40010000 	.word	0x40010000
 800a664:	40000400 	.word	0x40000400
 800a668:	40000800 	.word	0x40000800
 800a66c:	40000c00 	.word	0x40000c00
 800a670:	40014000 	.word	0x40014000
 800a674:	40014400 	.word	0x40014400
 800a678:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a8a      	ldr	r2, [pc, #552]	; (800a8ac <HAL_TIM_ConfigClockSource+0x4c8>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d018      	beq.n	800a6b8 <HAL_TIM_ConfigClockSource+0x2d4>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a68e:	d013      	beq.n	800a6b8 <HAL_TIM_ConfigClockSource+0x2d4>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a86      	ldr	r2, [pc, #536]	; (800a8b0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d00e      	beq.n	800a6b8 <HAL_TIM_ConfigClockSource+0x2d4>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a85      	ldr	r2, [pc, #532]	; (800a8b4 <HAL_TIM_ConfigClockSource+0x4d0>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d009      	beq.n	800a6b8 <HAL_TIM_ConfigClockSource+0x2d4>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a83      	ldr	r2, [pc, #524]	; (800a8b8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d004      	beq.n	800a6b8 <HAL_TIM_ConfigClockSource+0x2d4>
 800a6ae:	f241 41e2 	movw	r1, #5346	; 0x14e2
 800a6b2:	4882      	ldr	r0, [pc, #520]	; (800a8bc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a6b4:	f7f7 ff41 	bl	800253a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d013      	beq.n	800a6e8 <HAL_TIM_ConfigClockSource+0x304>
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6c8:	d00e      	beq.n	800a6e8 <HAL_TIM_ConfigClockSource+0x304>
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6d2:	d009      	beq.n	800a6e8 <HAL_TIM_ConfigClockSource+0x304>
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6dc:	d004      	beq.n	800a6e8 <HAL_TIM_ConfigClockSource+0x304>
 800a6de:	f241 41e5 	movw	r1, #5349	; 0x14e5
 800a6e2:	4876      	ldr	r0, [pc, #472]	; (800a8bc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a6e4:	f7f7 ff29 	bl	800253a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6f0:	d014      	beq.n	800a71c <HAL_TIM_ConfigClockSource+0x338>
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d010      	beq.n	800a71c <HAL_TIM_ConfigClockSource+0x338>
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00c      	beq.n	800a71c <HAL_TIM_ConfigClockSource+0x338>
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	2b02      	cmp	r3, #2
 800a708:	d008      	beq.n	800a71c <HAL_TIM_ConfigClockSource+0x338>
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	2b0a      	cmp	r3, #10
 800a710:	d004      	beq.n	800a71c <HAL_TIM_ConfigClockSource+0x338>
 800a712:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800a716:	4869      	ldr	r0, [pc, #420]	; (800a8bc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a718:	f7f7 ff0f 	bl	800253a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	2b0f      	cmp	r3, #15
 800a722:	d904      	bls.n	800a72e <HAL_TIM_ConfigClockSource+0x34a>
 800a724:	f241 41e7 	movw	r1, #5351	; 0x14e7
 800a728:	4864      	ldr	r0, [pc, #400]	; (800a8bc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a72a:	f7f7 ff06 	bl	800253a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6818      	ldr	r0, [r3, #0]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	6899      	ldr	r1, [r3, #8]
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	685a      	ldr	r2, [r3, #4]
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	f000 fab5 	bl	800acac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	689a      	ldr	r2, [r3, #8]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a750:	609a      	str	r2, [r3, #8]
      break;
 800a752:	e13d      	b.n	800a9d0 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a54      	ldr	r2, [pc, #336]	; (800a8ac <HAL_TIM_ConfigClockSource+0x4c8>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d01d      	beq.n	800a79a <HAL_TIM_ConfigClockSource+0x3b6>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a766:	d018      	beq.n	800a79a <HAL_TIM_ConfigClockSource+0x3b6>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a50      	ldr	r2, [pc, #320]	; (800a8b0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d013      	beq.n	800a79a <HAL_TIM_ConfigClockSource+0x3b6>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a4f      	ldr	r2, [pc, #316]	; (800a8b4 <HAL_TIM_ConfigClockSource+0x4d0>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d00e      	beq.n	800a79a <HAL_TIM_ConfigClockSource+0x3b6>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a4d      	ldr	r2, [pc, #308]	; (800a8b8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d009      	beq.n	800a79a <HAL_TIM_ConfigClockSource+0x3b6>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a4d      	ldr	r2, [pc, #308]	; (800a8c0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d004      	beq.n	800a79a <HAL_TIM_ConfigClockSource+0x3b6>
 800a790:	f241 41f6 	movw	r1, #5366	; 0x14f6
 800a794:	4849      	ldr	r0, [pc, #292]	; (800a8bc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a796:	f7f7 fed0 	bl	800253a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7a2:	d014      	beq.n	800a7ce <HAL_TIM_ConfigClockSource+0x3ea>
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d010      	beq.n	800a7ce <HAL_TIM_ConfigClockSource+0x3ea>
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00c      	beq.n	800a7ce <HAL_TIM_ConfigClockSource+0x3ea>
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d008      	beq.n	800a7ce <HAL_TIM_ConfigClockSource+0x3ea>
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	2b0a      	cmp	r3, #10
 800a7c2:	d004      	beq.n	800a7ce <HAL_TIM_ConfigClockSource+0x3ea>
 800a7c4:	f241 41f9 	movw	r1, #5369	; 0x14f9
 800a7c8:	483c      	ldr	r0, [pc, #240]	; (800a8bc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a7ca:	f7f7 feb6 	bl	800253a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	2b0f      	cmp	r3, #15
 800a7d4:	d904      	bls.n	800a7e0 <HAL_TIM_ConfigClockSource+0x3fc>
 800a7d6:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800a7da:	4838      	ldr	r0, [pc, #224]	; (800a8bc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a7dc:	f7f7 fead 	bl	800253a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6818      	ldr	r0, [r3, #0]
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	6859      	ldr	r1, [r3, #4]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	f000 f9e3 	bl	800abb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	2150      	movs	r1, #80	; 0x50
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 fa3c 	bl	800ac76 <TIM_ITRx_SetConfig>
      break;
 800a7fe:	e0e7      	b.n	800a9d0 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a29      	ldr	r2, [pc, #164]	; (800a8ac <HAL_TIM_ConfigClockSource+0x4c8>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d01d      	beq.n	800a846 <HAL_TIM_ConfigClockSource+0x462>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a812:	d018      	beq.n	800a846 <HAL_TIM_ConfigClockSource+0x462>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a25      	ldr	r2, [pc, #148]	; (800a8b0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d013      	beq.n	800a846 <HAL_TIM_ConfigClockSource+0x462>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a24      	ldr	r2, [pc, #144]	; (800a8b4 <HAL_TIM_ConfigClockSource+0x4d0>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d00e      	beq.n	800a846 <HAL_TIM_ConfigClockSource+0x462>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a22      	ldr	r2, [pc, #136]	; (800a8b8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d009      	beq.n	800a846 <HAL_TIM_ConfigClockSource+0x462>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a22      	ldr	r2, [pc, #136]	; (800a8c0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d004      	beq.n	800a846 <HAL_TIM_ConfigClockSource+0x462>
 800a83c:	f241 5106 	movw	r1, #5382	; 0x1506
 800a840:	481e      	ldr	r0, [pc, #120]	; (800a8bc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a842:	f7f7 fe7a 	bl	800253a <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a84e:	d014      	beq.n	800a87a <HAL_TIM_ConfigClockSource+0x496>
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d010      	beq.n	800a87a <HAL_TIM_ConfigClockSource+0x496>
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00c      	beq.n	800a87a <HAL_TIM_ConfigClockSource+0x496>
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	2b02      	cmp	r3, #2
 800a866:	d008      	beq.n	800a87a <HAL_TIM_ConfigClockSource+0x496>
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	2b0a      	cmp	r3, #10
 800a86e:	d004      	beq.n	800a87a <HAL_TIM_ConfigClockSource+0x496>
 800a870:	f241 5109 	movw	r1, #5385	; 0x1509
 800a874:	4811      	ldr	r0, [pc, #68]	; (800a8bc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a876:	f7f7 fe60 	bl	800253a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	2b0f      	cmp	r3, #15
 800a880:	d904      	bls.n	800a88c <HAL_TIM_ConfigClockSource+0x4a8>
 800a882:	f241 510a 	movw	r1, #5386	; 0x150a
 800a886:	480d      	ldr	r0, [pc, #52]	; (800a8bc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a888:	f7f7 fe57 	bl	800253a <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6818      	ldr	r0, [r3, #0]
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	6859      	ldr	r1, [r3, #4]
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	461a      	mov	r2, r3
 800a89a:	f000 f9bc 	bl	800ac16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2160      	movs	r1, #96	; 0x60
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f000 f9e6 	bl	800ac76 <TIM_ITRx_SetConfig>
      break;
 800a8aa:	e091      	b.n	800a9d0 <HAL_TIM_ConfigClockSource+0x5ec>
 800a8ac:	40010000 	.word	0x40010000
 800a8b0:	40000400 	.word	0x40000400
 800a8b4:	40000800 	.word	0x40000800
 800a8b8:	40000c00 	.word	0x40000c00
 800a8bc:	0800f3d4 	.word	0x0800f3d4
 800a8c0:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a48      	ldr	r2, [pc, #288]	; (800a9ec <HAL_TIM_ConfigClockSource+0x608>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d01d      	beq.n	800a90a <HAL_TIM_ConfigClockSource+0x526>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8d6:	d018      	beq.n	800a90a <HAL_TIM_ConfigClockSource+0x526>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a44      	ldr	r2, [pc, #272]	; (800a9f0 <HAL_TIM_ConfigClockSource+0x60c>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d013      	beq.n	800a90a <HAL_TIM_ConfigClockSource+0x526>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a43      	ldr	r2, [pc, #268]	; (800a9f4 <HAL_TIM_ConfigClockSource+0x610>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d00e      	beq.n	800a90a <HAL_TIM_ConfigClockSource+0x526>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a41      	ldr	r2, [pc, #260]	; (800a9f8 <HAL_TIM_ConfigClockSource+0x614>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d009      	beq.n	800a90a <HAL_TIM_ConfigClockSource+0x526>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a40      	ldr	r2, [pc, #256]	; (800a9fc <HAL_TIM_ConfigClockSource+0x618>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d004      	beq.n	800a90a <HAL_TIM_ConfigClockSource+0x526>
 800a900:	f241 5116 	movw	r1, #5398	; 0x1516
 800a904:	483e      	ldr	r0, [pc, #248]	; (800aa00 <HAL_TIM_ConfigClockSource+0x61c>)
 800a906:	f7f7 fe18 	bl	800253a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a912:	d014      	beq.n	800a93e <HAL_TIM_ConfigClockSource+0x55a>
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d010      	beq.n	800a93e <HAL_TIM_ConfigClockSource+0x55a>
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00c      	beq.n	800a93e <HAL_TIM_ConfigClockSource+0x55a>
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d008      	beq.n	800a93e <HAL_TIM_ConfigClockSource+0x55a>
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	2b0a      	cmp	r3, #10
 800a932:	d004      	beq.n	800a93e <HAL_TIM_ConfigClockSource+0x55a>
 800a934:	f241 5119 	movw	r1, #5401	; 0x1519
 800a938:	4831      	ldr	r0, [pc, #196]	; (800aa00 <HAL_TIM_ConfigClockSource+0x61c>)
 800a93a:	f7f7 fdfe 	bl	800253a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	2b0f      	cmp	r3, #15
 800a944:	d904      	bls.n	800a950 <HAL_TIM_ConfigClockSource+0x56c>
 800a946:	f241 511a 	movw	r1, #5402	; 0x151a
 800a94a:	482d      	ldr	r0, [pc, #180]	; (800aa00 <HAL_TIM_ConfigClockSource+0x61c>)
 800a94c:	f7f7 fdf5 	bl	800253a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6818      	ldr	r0, [r3, #0]
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	6859      	ldr	r1, [r3, #4]
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	461a      	mov	r2, r3
 800a95e:	f000 f92b 	bl	800abb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2140      	movs	r1, #64	; 0x40
 800a968:	4618      	mov	r0, r3
 800a96a:	f000 f984 	bl	800ac76 <TIM_ITRx_SetConfig>
      break;
 800a96e:	e02f      	b.n	800a9d0 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a1d      	ldr	r2, [pc, #116]	; (800a9ec <HAL_TIM_ConfigClockSource+0x608>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d01d      	beq.n	800a9b6 <HAL_TIM_ConfigClockSource+0x5d2>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a982:	d018      	beq.n	800a9b6 <HAL_TIM_ConfigClockSource+0x5d2>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a19      	ldr	r2, [pc, #100]	; (800a9f0 <HAL_TIM_ConfigClockSource+0x60c>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d013      	beq.n	800a9b6 <HAL_TIM_ConfigClockSource+0x5d2>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a18      	ldr	r2, [pc, #96]	; (800a9f4 <HAL_TIM_ConfigClockSource+0x610>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d00e      	beq.n	800a9b6 <HAL_TIM_ConfigClockSource+0x5d2>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a16      	ldr	r2, [pc, #88]	; (800a9f8 <HAL_TIM_ConfigClockSource+0x614>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d009      	beq.n	800a9b6 <HAL_TIM_ConfigClockSource+0x5d2>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a15      	ldr	r2, [pc, #84]	; (800a9fc <HAL_TIM_ConfigClockSource+0x618>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d004      	beq.n	800a9b6 <HAL_TIM_ConfigClockSource+0x5d2>
 800a9ac:	f241 5129 	movw	r1, #5417	; 0x1529
 800a9b0:	4813      	ldr	r0, [pc, #76]	; (800aa00 <HAL_TIM_ConfigClockSource+0x61c>)
 800a9b2:	f7f7 fdc2 	bl	800253a <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4619      	mov	r1, r3
 800a9c0:	4610      	mov	r0, r2
 800a9c2:	f000 f958 	bl	800ac76 <TIM_ITRx_SetConfig>
      break;
 800a9c6:	e003      	b.n	800a9d0 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a9cc:	e000      	b.n	800a9d0 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 800a9ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	40010000 	.word	0x40010000
 800a9f0:	40000400 	.word	0x40000400
 800a9f4:	40000800 	.word	0x40000800
 800a9f8:	40000c00 	.word	0x40000c00
 800a9fc:	40014000 	.word	0x40014000
 800aa00:	0800f3d4 	.word	0x0800f3d4

0800aa04 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800aa48:	bf00      	nop
 800aa4a:	370c      	adds	r7, #12
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa5c:	bf00      	nop
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa84:	bf00      	nop
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800aaac:	bf00      	nop
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a34      	ldr	r2, [pc, #208]	; (800ab9c <TIM_Base_SetConfig+0xe4>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d00f      	beq.n	800aaf0 <TIM_Base_SetConfig+0x38>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aad6:	d00b      	beq.n	800aaf0 <TIM_Base_SetConfig+0x38>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	4a31      	ldr	r2, [pc, #196]	; (800aba0 <TIM_Base_SetConfig+0xe8>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d007      	beq.n	800aaf0 <TIM_Base_SetConfig+0x38>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4a30      	ldr	r2, [pc, #192]	; (800aba4 <TIM_Base_SetConfig+0xec>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d003      	beq.n	800aaf0 <TIM_Base_SetConfig+0x38>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	4a2f      	ldr	r2, [pc, #188]	; (800aba8 <TIM_Base_SetConfig+0xf0>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d108      	bne.n	800ab02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	4313      	orrs	r3, r2
 800ab00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4a25      	ldr	r2, [pc, #148]	; (800ab9c <TIM_Base_SetConfig+0xe4>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d01b      	beq.n	800ab42 <TIM_Base_SetConfig+0x8a>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab10:	d017      	beq.n	800ab42 <TIM_Base_SetConfig+0x8a>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a22      	ldr	r2, [pc, #136]	; (800aba0 <TIM_Base_SetConfig+0xe8>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d013      	beq.n	800ab42 <TIM_Base_SetConfig+0x8a>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4a21      	ldr	r2, [pc, #132]	; (800aba4 <TIM_Base_SetConfig+0xec>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d00f      	beq.n	800ab42 <TIM_Base_SetConfig+0x8a>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	4a20      	ldr	r2, [pc, #128]	; (800aba8 <TIM_Base_SetConfig+0xf0>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d00b      	beq.n	800ab42 <TIM_Base_SetConfig+0x8a>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a1f      	ldr	r2, [pc, #124]	; (800abac <TIM_Base_SetConfig+0xf4>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d007      	beq.n	800ab42 <TIM_Base_SetConfig+0x8a>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a1e      	ldr	r2, [pc, #120]	; (800abb0 <TIM_Base_SetConfig+0xf8>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d003      	beq.n	800ab42 <TIM_Base_SetConfig+0x8a>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a1d      	ldr	r2, [pc, #116]	; (800abb4 <TIM_Base_SetConfig+0xfc>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d108      	bne.n	800ab54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	68fa      	ldr	r2, [r7, #12]
 800ab50:	4313      	orrs	r3, r2
 800ab52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	695b      	ldr	r3, [r3, #20]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	689a      	ldr	r2, [r3, #8]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a08      	ldr	r2, [pc, #32]	; (800ab9c <TIM_Base_SetConfig+0xe4>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d103      	bne.n	800ab88 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	691a      	ldr	r2, [r3, #16]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	615a      	str	r2, [r3, #20]
}
 800ab8e:	bf00      	nop
 800ab90:	3714      	adds	r7, #20
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr
 800ab9a:	bf00      	nop
 800ab9c:	40010000 	.word	0x40010000
 800aba0:	40000400 	.word	0x40000400
 800aba4:	40000800 	.word	0x40000800
 800aba8:	40000c00 	.word	0x40000c00
 800abac:	40014000 	.word	0x40014000
 800abb0:	40014400 	.word	0x40014400
 800abb4:	40014800 	.word	0x40014800

0800abb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abb8:	b480      	push	{r7}
 800abba:	b087      	sub	sp, #28
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6a1b      	ldr	r3, [r3, #32]
 800abc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	6a1b      	ldr	r3, [r3, #32]
 800abce:	f023 0201 	bic.w	r2, r3, #1
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	699b      	ldr	r3, [r3, #24]
 800abda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	011b      	lsls	r3, r3, #4
 800abe8:	693a      	ldr	r2, [r7, #16]
 800abea:	4313      	orrs	r3, r2
 800abec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	f023 030a 	bic.w	r3, r3, #10
 800abf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	697a      	ldr	r2, [r7, #20]
 800ac08:	621a      	str	r2, [r3, #32]
}
 800ac0a:	bf00      	nop
 800ac0c:	371c      	adds	r7, #28
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr

0800ac16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac16:	b480      	push	{r7}
 800ac18:	b087      	sub	sp, #28
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	60f8      	str	r0, [r7, #12]
 800ac1e:	60b9      	str	r1, [r7, #8]
 800ac20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6a1b      	ldr	r3, [r3, #32]
 800ac26:	f023 0210 	bic.w	r2, r3, #16
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	699b      	ldr	r3, [r3, #24]
 800ac32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6a1b      	ldr	r3, [r3, #32]
 800ac38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	031b      	lsls	r3, r3, #12
 800ac46:	697a      	ldr	r2, [r7, #20]
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	011b      	lsls	r3, r3, #4
 800ac58:	693a      	ldr	r2, [r7, #16]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	697a      	ldr	r2, [r7, #20]
 800ac62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	693a      	ldr	r2, [r7, #16]
 800ac68:	621a      	str	r2, [r3, #32]
}
 800ac6a:	bf00      	nop
 800ac6c:	371c      	adds	r7, #28
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr

0800ac76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac76:	b480      	push	{r7}
 800ac78:	b085      	sub	sp, #20
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
 800ac7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	f043 0307 	orr.w	r3, r3, #7
 800ac98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	609a      	str	r2, [r3, #8]
}
 800aca0:	bf00      	nop
 800aca2:	3714      	adds	r7, #20
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800acac:	b480      	push	{r7}
 800acae:	b087      	sub	sp, #28
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	607a      	str	r2, [r7, #4]
 800acb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	021a      	lsls	r2, r3, #8
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	431a      	orrs	r2, r3
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	697a      	ldr	r2, [r7, #20]
 800acd6:	4313      	orrs	r3, r2
 800acd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	697a      	ldr	r2, [r7, #20]
 800acde:	609a      	str	r2, [r3, #8]
}
 800ace0:	bf00      	nop
 800ace2:	371c      	adds	r7, #28
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a1c      	ldr	r2, [pc, #112]	; (800ad68 <TIM_ResetCallback+0x7c>)
 800acf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4a1b      	ldr	r2, [pc, #108]	; (800ad6c <TIM_ResetCallback+0x80>)
 800ad00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a1a      	ldr	r2, [pc, #104]	; (800ad70 <TIM_ResetCallback+0x84>)
 800ad08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	4a19      	ldr	r2, [pc, #100]	; (800ad74 <TIM_ResetCallback+0x88>)
 800ad10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a18      	ldr	r2, [pc, #96]	; (800ad78 <TIM_ResetCallback+0x8c>)
 800ad18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a17      	ldr	r2, [pc, #92]	; (800ad7c <TIM_ResetCallback+0x90>)
 800ad20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a16      	ldr	r2, [pc, #88]	; (800ad80 <TIM_ResetCallback+0x94>)
 800ad28:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a15      	ldr	r2, [pc, #84]	; (800ad84 <TIM_ResetCallback+0x98>)
 800ad30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a14      	ldr	r2, [pc, #80]	; (800ad88 <TIM_ResetCallback+0x9c>)
 800ad38:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a13      	ldr	r2, [pc, #76]	; (800ad8c <TIM_ResetCallback+0xa0>)
 800ad40:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a12      	ldr	r2, [pc, #72]	; (800ad90 <TIM_ResetCallback+0xa4>)
 800ad48:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a11      	ldr	r2, [pc, #68]	; (800ad94 <TIM_ResetCallback+0xa8>)
 800ad50:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4a10      	ldr	r2, [pc, #64]	; (800ad98 <TIM_ResetCallback+0xac>)
 800ad58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr
 800ad68:	0800250d 	.word	0x0800250d
 800ad6c:	0800aa05 	.word	0x0800aa05
 800ad70:	0800aa7d 	.word	0x0800aa7d
 800ad74:	0800aa91 	.word	0x0800aa91
 800ad78:	0800aa2d 	.word	0x0800aa2d
 800ad7c:	0800aa41 	.word	0x0800aa41
 800ad80:	0800aa19 	.word	0x0800aa19
 800ad84:	0800aa55 	.word	0x0800aa55
 800ad88:	0800aa69 	.word	0x0800aa69
 800ad8c:	0800aaa5 	.word	0x0800aaa5
 800ad90:	0800af19 	.word	0x0800af19
 800ad94:	0800af2d 	.word	0x0800af2d
 800ad98:	0800af41 	.word	0x0800af41

0800ad9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a55      	ldr	r2, [pc, #340]	; (800af00 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d018      	beq.n	800ade2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adb8:	d013      	beq.n	800ade2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a51      	ldr	r2, [pc, #324]	; (800af04 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d00e      	beq.n	800ade2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a4f      	ldr	r2, [pc, #316]	; (800af08 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d009      	beq.n	800ade2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a4e      	ldr	r2, [pc, #312]	; (800af0c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d004      	beq.n	800ade2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800add8:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800addc:	484c      	ldr	r0, [pc, #304]	; (800af10 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800adde:	f7f7 fbac 	bl	800253a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d020      	beq.n	800ae2c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b10      	cmp	r3, #16
 800adf0:	d01c      	beq.n	800ae2c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2b20      	cmp	r3, #32
 800adf8:	d018      	beq.n	800ae2c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2b30      	cmp	r3, #48	; 0x30
 800ae00:	d014      	beq.n	800ae2c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2b40      	cmp	r3, #64	; 0x40
 800ae08:	d010      	beq.n	800ae2c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2b50      	cmp	r3, #80	; 0x50
 800ae10:	d00c      	beq.n	800ae2c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2b60      	cmp	r3, #96	; 0x60
 800ae18:	d008      	beq.n	800ae2c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b70      	cmp	r3, #112	; 0x70
 800ae20:	d004      	beq.n	800ae2c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ae22:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800ae26:	483a      	ldr	r0, [pc, #232]	; (800af10 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800ae28:	f7f7 fb87 	bl	800253a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	2b80      	cmp	r3, #128	; 0x80
 800ae32:	d008      	beq.n	800ae46 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d004      	beq.n	800ae46 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800ae3c:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800ae40:	4833      	ldr	r0, [pc, #204]	; (800af10 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800ae42:	f7f7 fb7a 	bl	800253a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d101      	bne.n	800ae54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ae50:	2302      	movs	r3, #2
 800ae52:	e050      	b.n	800aef6 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2201      	movs	r2, #1
 800ae58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2202      	movs	r2, #2
 800ae60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4a1b      	ldr	r2, [pc, #108]	; (800af00 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d018      	beq.n	800aeca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aea0:	d013      	beq.n	800aeca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a17      	ldr	r2, [pc, #92]	; (800af04 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d00e      	beq.n	800aeca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a15      	ldr	r2, [pc, #84]	; (800af08 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d009      	beq.n	800aeca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a14      	ldr	r2, [pc, #80]	; (800af0c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d004      	beq.n	800aeca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a13      	ldr	r2, [pc, #76]	; (800af14 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d10c      	bne.n	800aee4 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aed0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	68ba      	ldr	r2, [r7, #8]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	68ba      	ldr	r2, [r7, #8]
 800aee2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	40010000 	.word	0x40010000
 800af04:	40000400 	.word	0x40000400
 800af08:	40000800 	.word	0x40000800
 800af0c:	40000c00 	.word	0x40000c00
 800af10:	0800f448 	.word	0x0800f448
 800af14:	40014000 	.word	0x40014000

0800af18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af20:	bf00      	nop
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800af34:	bf00      	nop
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af48:	bf00      	nop
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d101      	bne.n	800af66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af62:	2301      	movs	r3, #1
 800af64:	e0ab      	b.n	800b0be <HAL_UART_Init+0x16a>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	699b      	ldr	r3, [r3, #24]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d02c      	beq.n	800afc8 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a55      	ldr	r2, [pc, #340]	; (800b0c8 <HAL_UART_Init+0x174>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d00e      	beq.n	800af96 <HAL_UART_Init+0x42>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a53      	ldr	r2, [pc, #332]	; (800b0cc <HAL_UART_Init+0x178>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d009      	beq.n	800af96 <HAL_UART_Init+0x42>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a52      	ldr	r2, [pc, #328]	; (800b0d0 <HAL_UART_Init+0x17c>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d004      	beq.n	800af96 <HAL_UART_Init+0x42>
 800af8c:	f240 1173 	movw	r1, #371	; 0x173
 800af90:	4850      	ldr	r0, [pc, #320]	; (800b0d4 <HAL_UART_Init+0x180>)
 800af92:	f7f7 fad2 	bl	800253a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	699b      	ldr	r3, [r3, #24]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d028      	beq.n	800aff0 <HAL_UART_Init+0x9c>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	699b      	ldr	r3, [r3, #24]
 800afa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afa6:	d023      	beq.n	800aff0 <HAL_UART_Init+0x9c>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	699b      	ldr	r3, [r3, #24]
 800afac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afb0:	d01e      	beq.n	800aff0 <HAL_UART_Init+0x9c>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	699b      	ldr	r3, [r3, #24]
 800afb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afba:	d019      	beq.n	800aff0 <HAL_UART_Init+0x9c>
 800afbc:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800afc0:	4844      	ldr	r0, [pc, #272]	; (800b0d4 <HAL_UART_Init+0x180>)
 800afc2:	f7f7 faba 	bl	800253a <assert_failed>
 800afc6:	e013      	b.n	800aff0 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a3e      	ldr	r2, [pc, #248]	; (800b0c8 <HAL_UART_Init+0x174>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d00e      	beq.n	800aff0 <HAL_UART_Init+0x9c>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a3d      	ldr	r2, [pc, #244]	; (800b0cc <HAL_UART_Init+0x178>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d009      	beq.n	800aff0 <HAL_UART_Init+0x9c>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a3b      	ldr	r2, [pc, #236]	; (800b0d0 <HAL_UART_Init+0x17c>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d004      	beq.n	800aff0 <HAL_UART_Init+0x9c>
 800afe6:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800afea:	483a      	ldr	r0, [pc, #232]	; (800b0d4 <HAL_UART_Init+0x180>)
 800afec:	f7f7 faa5 	bl	800253a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d009      	beq.n	800b00c <HAL_UART_Init+0xb8>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b000:	d004      	beq.n	800b00c <HAL_UART_Init+0xb8>
 800b002:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800b006:	4833      	ldr	r0, [pc, #204]	; (800b0d4 <HAL_UART_Init+0x180>)
 800b008:	f7f7 fa97 	bl	800253a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	69db      	ldr	r3, [r3, #28]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d009      	beq.n	800b028 <HAL_UART_Init+0xd4>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	69db      	ldr	r3, [r3, #28]
 800b018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b01c:	d004      	beq.n	800b028 <HAL_UART_Init+0xd4>
 800b01e:	f240 117b 	movw	r1, #379	; 0x17b
 800b022:	482c      	ldr	r0, [pc, #176]	; (800b0d4 <HAL_UART_Init+0x180>)
 800b024:	f7f7 fa89 	bl	800253a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	2b00      	cmp	r3, #0
 800b032:	d111      	bne.n	800b058 <HAL_UART_Init+0x104>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 fb61 	bl	800b704 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b046:	2b00      	cmp	r3, #0
 800b048:	d102      	bne.n	800b050 <HAL_UART_Init+0xfc>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4a22      	ldr	r2, [pc, #136]	; (800b0d8 <HAL_UART_Init+0x184>)
 800b04e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2224      	movs	r2, #36	; 0x24
 800b05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68da      	ldr	r2, [r3, #12]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b06e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 fd5b 	bl	800bb2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	691a      	ldr	r2, [r3, #16]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b084:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	695a      	ldr	r2, [r3, #20]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b094:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	68da      	ldr	r2, [r3, #12]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b0a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2220      	movs	r2, #32
 800b0b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2220      	movs	r2, #32
 800b0b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	40011000 	.word	0x40011000
 800b0cc:	40004400 	.word	0x40004400
 800b0d0:	40011400 	.word	0x40011400
 800b0d4:	0800f4c0 	.word	0x0800f4c0
 800b0d8:	08002fed 	.word	0x08002fed

0800b0dc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	2b20      	cmp	r3, #32
 800b0f4:	d11d      	bne.n	800b132 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d002      	beq.n	800b102 <HAL_UART_Receive_IT+0x26>
 800b0fc:	88fb      	ldrh	r3, [r7, #6]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d101      	bne.n	800b106 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b102:	2301      	movs	r3, #1
 800b104:	e016      	b.n	800b134 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d101      	bne.n	800b114 <HAL_UART_Receive_IT+0x38>
 800b110:	2302      	movs	r3, #2
 800b112:	e00f      	b.n	800b134 <HAL_UART_Receive_IT+0x58>
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2201      	movs	r2, #1
 800b118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2200      	movs	r2, #0
 800b120:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b122:	88fb      	ldrh	r3, [r7, #6]
 800b124:	461a      	mov	r2, r3
 800b126:	68b9      	ldr	r1, [r7, #8]
 800b128:	68f8      	ldr	r0, [r7, #12]
 800b12a:	f000 fb23 	bl	800b774 <UART_Start_Receive_IT>
 800b12e:	4603      	mov	r3, r0
 800b130:	e000      	b.n	800b134 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b132:	2302      	movs	r3, #2
  }
}
 800b134:	4618      	mov	r0, r3
 800b136:	3710      	adds	r7, #16
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b0ba      	sub	sp, #232	; 0xe8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	695b      	ldr	r3, [r3, #20]
 800b15e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b162:	2300      	movs	r3, #0
 800b164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b168:	2300      	movs	r3, #0
 800b16a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b16e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b172:	f003 030f 	and.w	r3, r3, #15
 800b176:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b17a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10f      	bne.n	800b1a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b186:	f003 0320 	and.w	r3, r3, #32
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d009      	beq.n	800b1a2 <HAL_UART_IRQHandler+0x66>
 800b18e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b192:	f003 0320 	and.w	r3, r3, #32
 800b196:	2b00      	cmp	r3, #0
 800b198:	d003      	beq.n	800b1a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 fc09 	bl	800b9b2 <UART_Receive_IT>
      return;
 800b1a0:	e25b      	b.n	800b65a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b1a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	f000 80e1 	beq.w	800b36e <HAL_UART_IRQHandler+0x232>
 800b1ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1b0:	f003 0301 	and.w	r3, r3, #1
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d106      	bne.n	800b1c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b1b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f000 80d4 	beq.w	800b36e <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b1c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1ca:	f003 0301 	and.w	r3, r3, #1
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d00b      	beq.n	800b1ea <HAL_UART_IRQHandler+0xae>
 800b1d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d005      	beq.n	800b1ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e2:	f043 0201 	orr.w	r2, r3, #1
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b1ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1ee:	f003 0304 	and.w	r3, r3, #4
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00b      	beq.n	800b20e <HAL_UART_IRQHandler+0xd2>
 800b1f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1fa:	f003 0301 	and.w	r3, r3, #1
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d005      	beq.n	800b20e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b206:	f043 0202 	orr.w	r2, r3, #2
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b20e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b212:	f003 0302 	and.w	r3, r3, #2
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00b      	beq.n	800b232 <HAL_UART_IRQHandler+0xf6>
 800b21a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b21e:	f003 0301 	and.w	r3, r3, #1
 800b222:	2b00      	cmp	r3, #0
 800b224:	d005      	beq.n	800b232 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b22a:	f043 0204 	orr.w	r2, r3, #4
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b236:	f003 0308 	and.w	r3, r3, #8
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d011      	beq.n	800b262 <HAL_UART_IRQHandler+0x126>
 800b23e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b242:	f003 0320 	and.w	r3, r3, #32
 800b246:	2b00      	cmp	r3, #0
 800b248:	d105      	bne.n	800b256 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b24a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b24e:	f003 0301 	and.w	r3, r3, #1
 800b252:	2b00      	cmp	r3, #0
 800b254:	d005      	beq.n	800b262 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25a:	f043 0208 	orr.w	r2, r3, #8
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b266:	2b00      	cmp	r3, #0
 800b268:	f000 81f2 	beq.w	800b650 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b26c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b270:	f003 0320 	and.w	r3, r3, #32
 800b274:	2b00      	cmp	r3, #0
 800b276:	d008      	beq.n	800b28a <HAL_UART_IRQHandler+0x14e>
 800b278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b27c:	f003 0320 	and.w	r3, r3, #32
 800b280:	2b00      	cmp	r3, #0
 800b282:	d002      	beq.n	800b28a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 fb94 	bl	800b9b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	695b      	ldr	r3, [r3, #20]
 800b290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b294:	2b40      	cmp	r3, #64	; 0x40
 800b296:	bf0c      	ite	eq
 800b298:	2301      	moveq	r3, #1
 800b29a:	2300      	movne	r3, #0
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a6:	f003 0308 	and.w	r3, r3, #8
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d103      	bne.n	800b2b6 <HAL_UART_IRQHandler+0x17a>
 800b2ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d051      	beq.n	800b35a <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 fa9a 	bl	800b7f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	695b      	ldr	r3, [r3, #20]
 800b2c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2c6:	2b40      	cmp	r3, #64	; 0x40
 800b2c8:	d142      	bne.n	800b350 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	3314      	adds	r3, #20
 800b2d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b2d8:	e853 3f00 	ldrex	r3, [r3]
 800b2dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b2e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	3314      	adds	r3, #20
 800b2f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b2f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b2fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b302:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b306:	e841 2300 	strex	r3, r2, [r1]
 800b30a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b30e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1d9      	bne.n	800b2ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d013      	beq.n	800b346 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b322:	4a7f      	ldr	r2, [pc, #508]	; (800b520 <HAL_UART_IRQHandler+0x3e4>)
 800b324:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7f9 fb14 	bl	8004958 <HAL_DMA_Abort_IT>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d019      	beq.n	800b36a <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b33a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b340:	4610      	mov	r0, r2
 800b342:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b344:	e011      	b.n	800b36a <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b34e:	e00c      	b.n	800b36a <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b358:	e007      	b.n	800b36a <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b368:	e172      	b.n	800b650 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b36a:	bf00      	nop
    return;
 800b36c:	e170      	b.n	800b650 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b372:	2b01      	cmp	r3, #1
 800b374:	f040 814c 	bne.w	800b610 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b37c:	f003 0310 	and.w	r3, r3, #16
 800b380:	2b00      	cmp	r3, #0
 800b382:	f000 8145 	beq.w	800b610 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b38a:	f003 0310 	and.w	r3, r3, #16
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f000 813e 	beq.w	800b610 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b394:	2300      	movs	r3, #0
 800b396:	60bb      	str	r3, [r7, #8]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	60bb      	str	r3, [r7, #8]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	60bb      	str	r3, [r7, #8]
 800b3a8:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	695b      	ldr	r3, [r3, #20]
 800b3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b4:	2b40      	cmp	r3, #64	; 0x40
 800b3b6:	f040 80b5 	bne.w	800b524 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b3c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	f000 8142 	beq.w	800b654 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b3d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	f080 813b 	bcs.w	800b654 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b3e4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ea:	69db      	ldr	r3, [r3, #28]
 800b3ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3f0:	f000 8088 	beq.w	800b504 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	330c      	adds	r3, #12
 800b3fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b402:	e853 3f00 	ldrex	r3, [r3]
 800b406:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b40a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b40e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b412:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	330c      	adds	r3, #12
 800b41c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b420:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b424:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b428:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b42c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b430:	e841 2300 	strex	r3, r2, [r1]
 800b434:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b438:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1d9      	bne.n	800b3f4 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	3314      	adds	r3, #20
 800b446:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b44a:	e853 3f00 	ldrex	r3, [r3]
 800b44e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b450:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b452:	f023 0301 	bic.w	r3, r3, #1
 800b456:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	3314      	adds	r3, #20
 800b460:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b464:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b468:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b46a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b46c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b470:	e841 2300 	strex	r3, r2, [r1]
 800b474:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d1e1      	bne.n	800b440 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	3314      	adds	r3, #20
 800b482:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b486:	e853 3f00 	ldrex	r3, [r3]
 800b48a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b48c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b48e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b492:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	3314      	adds	r3, #20
 800b49c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b4a0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b4a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b4a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b4a8:	e841 2300 	strex	r3, r2, [r1]
 800b4ac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b4ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1e3      	bne.n	800b47c <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2220      	movs	r2, #32
 800b4b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	330c      	adds	r3, #12
 800b4c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4cc:	e853 3f00 	ldrex	r3, [r3]
 800b4d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b4d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4d4:	f023 0310 	bic.w	r3, r3, #16
 800b4d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	330c      	adds	r3, #12
 800b4e2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b4e6:	65ba      	str	r2, [r7, #88]	; 0x58
 800b4e8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b4ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b4ee:	e841 2300 	strex	r3, r2, [r1]
 800b4f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b4f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1e3      	bne.n	800b4c2 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7f9 f9ba 	bl	8004878 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b510:	b292      	uxth	r2, r2
 800b512:	1a8a      	subs	r2, r1, r2
 800b514:	b292      	uxth	r2, r2
 800b516:	4611      	mov	r1, r2
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b51c:	e09a      	b.n	800b654 <HAL_UART_IRQHandler+0x518>
 800b51e:	bf00      	nop
 800b520:	0800b8b7 	.word	0x0800b8b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	1ad3      	subs	r3, r2, r3
 800b530:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b538:	b29b      	uxth	r3, r3
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f000 808c 	beq.w	800b658 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b540:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b544:	2b00      	cmp	r3, #0
 800b546:	f000 8087 	beq.w	800b658 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	330c      	adds	r3, #12
 800b550:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b554:	e853 3f00 	ldrex	r3, [r3]
 800b558:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b55c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b560:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	330c      	adds	r3, #12
 800b56a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b56e:	647a      	str	r2, [r7, #68]	; 0x44
 800b570:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b572:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b574:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b576:	e841 2300 	strex	r3, r2, [r1]
 800b57a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b57c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d1e3      	bne.n	800b54a <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	3314      	adds	r3, #20
 800b588:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58c:	e853 3f00 	ldrex	r3, [r3]
 800b590:	623b      	str	r3, [r7, #32]
   return(result);
 800b592:	6a3b      	ldr	r3, [r7, #32]
 800b594:	f023 0301 	bic.w	r3, r3, #1
 800b598:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	3314      	adds	r3, #20
 800b5a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b5a6:	633a      	str	r2, [r7, #48]	; 0x30
 800b5a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5ae:	e841 2300 	strex	r3, r2, [r1]
 800b5b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d1e3      	bne.n	800b582 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2220      	movs	r2, #32
 800b5be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	330c      	adds	r3, #12
 800b5ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	e853 3f00 	ldrex	r3, [r3]
 800b5d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f023 0310 	bic.w	r3, r3, #16
 800b5de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	330c      	adds	r3, #12
 800b5e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b5ec:	61fa      	str	r2, [r7, #28]
 800b5ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f0:	69b9      	ldr	r1, [r7, #24]
 800b5f2:	69fa      	ldr	r2, [r7, #28]
 800b5f4:	e841 2300 	strex	r3, r2, [r1]
 800b5f8:	617b      	str	r3, [r7, #20]
   return(result);
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d1e3      	bne.n	800b5c8 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b604:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b608:	4611      	mov	r1, r2
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b60e:	e023      	b.n	800b658 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d009      	beq.n	800b630 <HAL_UART_IRQHandler+0x4f4>
 800b61c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b624:	2b00      	cmp	r3, #0
 800b626:	d003      	beq.n	800b630 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f959 	bl	800b8e0 <UART_Transmit_IT>
    return;
 800b62e:	e014      	b.n	800b65a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d00e      	beq.n	800b65a <HAL_UART_IRQHandler+0x51e>
 800b63c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b644:	2b00      	cmp	r3, #0
 800b646:	d008      	beq.n	800b65a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 f999 	bl	800b980 <UART_EndTransmit_IT>
    return;
 800b64e:	e004      	b.n	800b65a <HAL_UART_IRQHandler+0x51e>
    return;
 800b650:	bf00      	nop
 800b652:	e002      	b.n	800b65a <HAL_UART_IRQHandler+0x51e>
      return;
 800b654:	bf00      	nop
 800b656:	e000      	b.n	800b65a <HAL_UART_IRQHandler+0x51e>
      return;
 800b658:	bf00      	nop
  }
}
 800b65a:	37e8      	adds	r7, #232	; 0xe8
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b660:	b480      	push	{r7}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b668:	bf00      	nop
 800b66a:	370c      	adds	r7, #12
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b67c:	bf00      	nop
 800b67e:	370c      	adds	r7, #12
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr

0800b688 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b690:	bf00      	nop
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b6a4:	bf00      	nop
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b6b8:	bf00      	nop
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b6cc:	bf00      	nop
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b6e0:	bf00      	nop
 800b6e2:	370c      	adds	r7, #12
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr

0800b6ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b083      	sub	sp, #12
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b6f8:	bf00      	nop
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	4a10      	ldr	r2, [pc, #64]	; (800b750 <UART_InitCallbacksToDefault+0x4c>)
 800b710:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a0f      	ldr	r2, [pc, #60]	; (800b754 <UART_InitCallbacksToDefault+0x50>)
 800b716:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4a0f      	ldr	r2, [pc, #60]	; (800b758 <UART_InitCallbacksToDefault+0x54>)
 800b71c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	4a0e      	ldr	r2, [pc, #56]	; (800b75c <UART_InitCallbacksToDefault+0x58>)
 800b722:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	4a0e      	ldr	r2, [pc, #56]	; (800b760 <UART_InitCallbacksToDefault+0x5c>)
 800b728:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4a0d      	ldr	r2, [pc, #52]	; (800b764 <UART_InitCallbacksToDefault+0x60>)
 800b72e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	4a0d      	ldr	r2, [pc, #52]	; (800b768 <UART_InitCallbacksToDefault+0x64>)
 800b734:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	4a0c      	ldr	r2, [pc, #48]	; (800b76c <UART_InitCallbacksToDefault+0x68>)
 800b73a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	4a0c      	ldr	r2, [pc, #48]	; (800b770 <UART_InitCallbacksToDefault+0x6c>)
 800b740:	669a      	str	r2, [r3, #104]	; 0x68

}
 800b742:	bf00      	nop
 800b744:	370c      	adds	r7, #12
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	0800b675 	.word	0x0800b675
 800b754:	0800b661 	.word	0x0800b661
 800b758:	0800b689 	.word	0x0800b689
 800b75c:	080030cd 	.word	0x080030cd
 800b760:	0800b69d 	.word	0x0800b69d
 800b764:	0800b6b1 	.word	0x0800b6b1
 800b768:	0800b6c5 	.word	0x0800b6c5
 800b76c:	0800b6d9 	.word	0x0800b6d9
 800b770:	0800b6ed 	.word	0x0800b6ed

0800b774 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b774:	b480      	push	{r7}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	4613      	mov	r3, r2
 800b780:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	68ba      	ldr	r2, [r7, #8]
 800b786:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	88fa      	ldrh	r2, [r7, #6]
 800b78c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	88fa      	ldrh	r2, [r7, #6]
 800b792:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2200      	movs	r2, #0
 800b798:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2222      	movs	r2, #34	; 0x22
 800b79e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	691b      	ldr	r3, [r3, #16]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d007      	beq.n	800b7c2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	68da      	ldr	r2, [r3, #12]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7c0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	695a      	ldr	r2, [r3, #20]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f042 0201 	orr.w	r2, r2, #1
 800b7d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68da      	ldr	r2, [r3, #12]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f042 0220 	orr.w	r2, r2, #32
 800b7e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b7e2:	2300      	movs	r3, #0
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3714      	adds	r7, #20
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr

0800b7f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b095      	sub	sp, #84	; 0x54
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	330c      	adds	r3, #12
 800b7fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b802:	e853 3f00 	ldrex	r3, [r3]
 800b806:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b80e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	330c      	adds	r3, #12
 800b816:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b818:	643a      	str	r2, [r7, #64]	; 0x40
 800b81a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b81e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b820:	e841 2300 	strex	r3, r2, [r1]
 800b824:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d1e5      	bne.n	800b7f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	3314      	adds	r3, #20
 800b832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b834:	6a3b      	ldr	r3, [r7, #32]
 800b836:	e853 3f00 	ldrex	r3, [r3]
 800b83a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	f023 0301 	bic.w	r3, r3, #1
 800b842:	64bb      	str	r3, [r7, #72]	; 0x48
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	3314      	adds	r3, #20
 800b84a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b84c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b84e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b854:	e841 2300 	strex	r3, r2, [r1]
 800b858:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1e5      	bne.n	800b82c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b864:	2b01      	cmp	r3, #1
 800b866:	d119      	bne.n	800b89c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	330c      	adds	r3, #12
 800b86e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	e853 3f00 	ldrex	r3, [r3]
 800b876:	60bb      	str	r3, [r7, #8]
   return(result);
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	f023 0310 	bic.w	r3, r3, #16
 800b87e:	647b      	str	r3, [r7, #68]	; 0x44
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	330c      	adds	r3, #12
 800b886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b888:	61ba      	str	r2, [r7, #24]
 800b88a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88c:	6979      	ldr	r1, [r7, #20]
 800b88e:	69ba      	ldr	r2, [r7, #24]
 800b890:	e841 2300 	strex	r3, r2, [r1]
 800b894:	613b      	str	r3, [r7, #16]
   return(result);
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1e5      	bne.n	800b868 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2220      	movs	r2, #32
 800b8a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b8aa:	bf00      	nop
 800b8ac:	3754      	adds	r7, #84	; 0x54
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr

0800b8b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b084      	sub	sp, #16
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8d8:	bf00      	nop
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8ee:	b2db      	uxtb	r3, r3
 800b8f0:	2b21      	cmp	r3, #33	; 0x21
 800b8f2:	d13e      	bne.n	800b972 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8fc:	d114      	bne.n	800b928 <UART_Transmit_IT+0x48>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	691b      	ldr	r3, [r3, #16]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d110      	bne.n	800b928 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a1b      	ldr	r3, [r3, #32]
 800b90a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	881b      	ldrh	r3, [r3, #0]
 800b910:	461a      	mov	r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b91a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6a1b      	ldr	r3, [r3, #32]
 800b920:	1c9a      	adds	r2, r3, #2
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	621a      	str	r2, [r3, #32]
 800b926:	e008      	b.n	800b93a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6a1b      	ldr	r3, [r3, #32]
 800b92c:	1c59      	adds	r1, r3, #1
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	6211      	str	r1, [r2, #32]
 800b932:	781a      	ldrb	r2, [r3, #0]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b93e:	b29b      	uxth	r3, r3
 800b940:	3b01      	subs	r3, #1
 800b942:	b29b      	uxth	r3, r3
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	4619      	mov	r1, r3
 800b948:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d10f      	bne.n	800b96e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68da      	ldr	r2, [r3, #12]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b95c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	68da      	ldr	r2, [r3, #12]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b96c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b96e:	2300      	movs	r3, #0
 800b970:	e000      	b.n	800b974 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b972:	2302      	movs	r3, #2
  }
}
 800b974:	4618      	mov	r0, r3
 800b976:	3714      	adds	r7, #20
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	68da      	ldr	r2, [r3, #12]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b996:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2220      	movs	r2, #32
 800b99c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b08c      	sub	sp, #48	; 0x30
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	2b22      	cmp	r3, #34	; 0x22
 800b9c4:	f040 80ad 	bne.w	800bb22 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9d0:	d117      	bne.n	800ba02 <UART_Receive_IT+0x50>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	691b      	ldr	r3, [r3, #16]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d113      	bne.n	800ba02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9fa:	1c9a      	adds	r2, r3, #2
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	629a      	str	r2, [r3, #40]	; 0x28
 800ba00:	e026      	b.n	800ba50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba14:	d007      	beq.n	800ba26 <UART_Receive_IT+0x74>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d10a      	bne.n	800ba34 <UART_Receive_IT+0x82>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	691b      	ldr	r3, [r3, #16]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d106      	bne.n	800ba34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	b2da      	uxtb	r2, r3
 800ba2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba30:	701a      	strb	r2, [r3, #0]
 800ba32:	e008      	b.n	800ba46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba40:	b2da      	uxtb	r2, r3
 800ba42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba4a:	1c5a      	adds	r2, r3, #1
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	3b01      	subs	r3, #1
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d15c      	bne.n	800bb1e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	68da      	ldr	r2, [r3, #12]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f022 0220 	bic.w	r2, r2, #32
 800ba72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	68da      	ldr	r2, [r3, #12]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	695a      	ldr	r2, [r3, #20]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f022 0201 	bic.w	r2, r2, #1
 800ba92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2220      	movs	r2, #32
 800ba98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d136      	bne.n	800bb12 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	330c      	adds	r3, #12
 800bab0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	e853 3f00 	ldrex	r3, [r3]
 800bab8:	613b      	str	r3, [r7, #16]
   return(result);
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	f023 0310 	bic.w	r3, r3, #16
 800bac0:	627b      	str	r3, [r7, #36]	; 0x24
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	330c      	adds	r3, #12
 800bac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baca:	623a      	str	r2, [r7, #32]
 800bacc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bace:	69f9      	ldr	r1, [r7, #28]
 800bad0:	6a3a      	ldr	r2, [r7, #32]
 800bad2:	e841 2300 	strex	r3, r2, [r1]
 800bad6:	61bb      	str	r3, [r7, #24]
   return(result);
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d1e5      	bne.n	800baaa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f003 0310 	and.w	r3, r3, #16
 800bae8:	2b10      	cmp	r3, #16
 800baea:	d10a      	bne.n	800bb02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800baec:	2300      	movs	r3, #0
 800baee:	60fb      	str	r3, [r7, #12]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	60fb      	str	r3, [r7, #12]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	60fb      	str	r3, [r7, #12]
 800bb00:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800bb0a:	4611      	mov	r1, r2
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	4798      	blx	r3
 800bb10:	e003      	b.n	800bb1a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	e002      	b.n	800bb24 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	e000      	b.n	800bb24 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800bb22:	2302      	movs	r3, #2
  }
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3730      	adds	r7, #48	; 0x30
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb30:	b0c0      	sub	sp, #256	; 0x100
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800bb38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb3c:	685a      	ldr	r2, [r3, #4]
 800bb3e:	4bcf      	ldr	r3, [pc, #828]	; (800be7c <UART_SetConfig+0x350>)
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d904      	bls.n	800bb4e <UART_SetConfig+0x22>
 800bb44:	f640 6161 	movw	r1, #3681	; 0xe61
 800bb48:	48cd      	ldr	r0, [pc, #820]	; (800be80 <UART_SetConfig+0x354>)
 800bb4a:	f7f6 fcf6 	bl	800253a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800bb4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d00a      	beq.n	800bb6e <UART_SetConfig+0x42>
 800bb58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb62:	d004      	beq.n	800bb6e <UART_SetConfig+0x42>
 800bb64:	f640 6162 	movw	r1, #3682	; 0xe62
 800bb68:	48c5      	ldr	r0, [pc, #788]	; (800be80 <UART_SetConfig+0x354>)
 800bb6a:	f7f6 fce6 	bl	800253a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800bb6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb72:	691b      	ldr	r3, [r3, #16]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d010      	beq.n	800bb9a <UART_SetConfig+0x6e>
 800bb78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb7c:	691b      	ldr	r3, [r3, #16]
 800bb7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb82:	d00a      	beq.n	800bb9a <UART_SetConfig+0x6e>
 800bb84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb88:	691b      	ldr	r3, [r3, #16]
 800bb8a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bb8e:	d004      	beq.n	800bb9a <UART_SetConfig+0x6e>
 800bb90:	f640 6163 	movw	r1, #3683	; 0xe63
 800bb94:	48ba      	ldr	r0, [pc, #744]	; (800be80 <UART_SetConfig+0x354>)
 800bb96:	f7f6 fcd0 	bl	800253a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800bb9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb9e:	695a      	ldr	r2, [r3, #20]
 800bba0:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800bba4:	4013      	ands	r3, r2
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d104      	bne.n	800bbb4 <UART_SetConfig+0x88>
 800bbaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbae:	695b      	ldr	r3, [r3, #20]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d104      	bne.n	800bbbe <UART_SetConfig+0x92>
 800bbb4:	f640 6164 	movw	r1, #3684	; 0xe64
 800bbb8:	48b1      	ldr	r0, [pc, #708]	; (800be80 <UART_SetConfig+0x354>)
 800bbba:	f7f6 fcbe 	bl	800253a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bbbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	691b      	ldr	r3, [r3, #16]
 800bbc6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bbca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbce:	68d9      	ldr	r1, [r3, #12]
 800bbd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbd4:	681a      	ldr	r2, [r3, #0]
 800bbd6:	ea40 0301 	orr.w	r3, r0, r1
 800bbda:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bbdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbe0:	689a      	ldr	r2, [r3, #8]
 800bbe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	431a      	orrs	r2, r3
 800bbea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbee:	695b      	ldr	r3, [r3, #20]
 800bbf0:	431a      	orrs	r2, r3
 800bbf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbf6:	69db      	ldr	r3, [r3, #28]
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bbfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bc0a:	f021 010c 	bic.w	r1, r1, #12
 800bc0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bc18:	430b      	orrs	r3, r1
 800bc1a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bc1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	695b      	ldr	r3, [r3, #20]
 800bc24:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bc28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc2c:	6999      	ldr	r1, [r3, #24]
 800bc2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	ea40 0301 	orr.w	r3, r0, r1
 800bc38:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bc3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	4b90      	ldr	r3, [pc, #576]	; (800be84 <UART_SetConfig+0x358>)
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d005      	beq.n	800bc52 <UART_SetConfig+0x126>
 800bc46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	4b8e      	ldr	r3, [pc, #568]	; (800be88 <UART_SetConfig+0x35c>)
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d104      	bne.n	800bc5c <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bc52:	f7fc fad9 	bl	8008208 <HAL_RCC_GetPCLK2Freq>
 800bc56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bc5a:	e003      	b.n	800bc64 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bc5c:	f7fc fac0 	bl	80081e0 <HAL_RCC_GetPCLK1Freq>
 800bc60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc68:	69db      	ldr	r3, [r3, #28]
 800bc6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc6e:	f040 810f 	bne.w	800be90 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bc72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc76:	2200      	movs	r2, #0
 800bc78:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bc7c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bc80:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bc84:	4622      	mov	r2, r4
 800bc86:	462b      	mov	r3, r5
 800bc88:	1891      	adds	r1, r2, r2
 800bc8a:	65b9      	str	r1, [r7, #88]	; 0x58
 800bc8c:	415b      	adcs	r3, r3
 800bc8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bc94:	4621      	mov	r1, r4
 800bc96:	eb12 0801 	adds.w	r8, r2, r1
 800bc9a:	4629      	mov	r1, r5
 800bc9c:	eb43 0901 	adc.w	r9, r3, r1
 800bca0:	f04f 0200 	mov.w	r2, #0
 800bca4:	f04f 0300 	mov.w	r3, #0
 800bca8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bcac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bcb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bcb4:	4690      	mov	r8, r2
 800bcb6:	4699      	mov	r9, r3
 800bcb8:	4623      	mov	r3, r4
 800bcba:	eb18 0303 	adds.w	r3, r8, r3
 800bcbe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bcc2:	462b      	mov	r3, r5
 800bcc4:	eb49 0303 	adc.w	r3, r9, r3
 800bcc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bcd8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bcdc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bce0:	460b      	mov	r3, r1
 800bce2:	18db      	adds	r3, r3, r3
 800bce4:	653b      	str	r3, [r7, #80]	; 0x50
 800bce6:	4613      	mov	r3, r2
 800bce8:	eb42 0303 	adc.w	r3, r2, r3
 800bcec:	657b      	str	r3, [r7, #84]	; 0x54
 800bcee:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bcf2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bcf6:	f7f4 fa73 	bl	80001e0 <__aeabi_uldivmod>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	4b63      	ldr	r3, [pc, #396]	; (800be8c <UART_SetConfig+0x360>)
 800bd00:	fba3 2302 	umull	r2, r3, r3, r2
 800bd04:	095b      	lsrs	r3, r3, #5
 800bd06:	011c      	lsls	r4, r3, #4
 800bd08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd12:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bd16:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bd1a:	4642      	mov	r2, r8
 800bd1c:	464b      	mov	r3, r9
 800bd1e:	1891      	adds	r1, r2, r2
 800bd20:	64b9      	str	r1, [r7, #72]	; 0x48
 800bd22:	415b      	adcs	r3, r3
 800bd24:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd26:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bd2a:	4641      	mov	r1, r8
 800bd2c:	eb12 0a01 	adds.w	sl, r2, r1
 800bd30:	4649      	mov	r1, r9
 800bd32:	eb43 0b01 	adc.w	fp, r3, r1
 800bd36:	f04f 0200 	mov.w	r2, #0
 800bd3a:	f04f 0300 	mov.w	r3, #0
 800bd3e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bd42:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bd46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bd4a:	4692      	mov	sl, r2
 800bd4c:	469b      	mov	fp, r3
 800bd4e:	4643      	mov	r3, r8
 800bd50:	eb1a 0303 	adds.w	r3, sl, r3
 800bd54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd58:	464b      	mov	r3, r9
 800bd5a:	eb4b 0303 	adc.w	r3, fp, r3
 800bd5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bd62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd6e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bd72:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bd76:	460b      	mov	r3, r1
 800bd78:	18db      	adds	r3, r3, r3
 800bd7a:	643b      	str	r3, [r7, #64]	; 0x40
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	eb42 0303 	adc.w	r3, r2, r3
 800bd82:	647b      	str	r3, [r7, #68]	; 0x44
 800bd84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bd88:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bd8c:	f7f4 fa28 	bl	80001e0 <__aeabi_uldivmod>
 800bd90:	4602      	mov	r2, r0
 800bd92:	460b      	mov	r3, r1
 800bd94:	4611      	mov	r1, r2
 800bd96:	4b3d      	ldr	r3, [pc, #244]	; (800be8c <UART_SetConfig+0x360>)
 800bd98:	fba3 2301 	umull	r2, r3, r3, r1
 800bd9c:	095b      	lsrs	r3, r3, #5
 800bd9e:	2264      	movs	r2, #100	; 0x64
 800bda0:	fb02 f303 	mul.w	r3, r2, r3
 800bda4:	1acb      	subs	r3, r1, r3
 800bda6:	00db      	lsls	r3, r3, #3
 800bda8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bdac:	4b37      	ldr	r3, [pc, #220]	; (800be8c <UART_SetConfig+0x360>)
 800bdae:	fba3 2302 	umull	r2, r3, r3, r2
 800bdb2:	095b      	lsrs	r3, r3, #5
 800bdb4:	005b      	lsls	r3, r3, #1
 800bdb6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bdba:	441c      	add	r4, r3
 800bdbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bdc6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bdca:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bdce:	4642      	mov	r2, r8
 800bdd0:	464b      	mov	r3, r9
 800bdd2:	1891      	adds	r1, r2, r2
 800bdd4:	63b9      	str	r1, [r7, #56]	; 0x38
 800bdd6:	415b      	adcs	r3, r3
 800bdd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdda:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bdde:	4641      	mov	r1, r8
 800bde0:	1851      	adds	r1, r2, r1
 800bde2:	6339      	str	r1, [r7, #48]	; 0x30
 800bde4:	4649      	mov	r1, r9
 800bde6:	414b      	adcs	r3, r1
 800bde8:	637b      	str	r3, [r7, #52]	; 0x34
 800bdea:	f04f 0200 	mov.w	r2, #0
 800bdee:	f04f 0300 	mov.w	r3, #0
 800bdf2:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bdf6:	4659      	mov	r1, fp
 800bdf8:	00cb      	lsls	r3, r1, #3
 800bdfa:	4651      	mov	r1, sl
 800bdfc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be00:	4651      	mov	r1, sl
 800be02:	00ca      	lsls	r2, r1, #3
 800be04:	4610      	mov	r0, r2
 800be06:	4619      	mov	r1, r3
 800be08:	4603      	mov	r3, r0
 800be0a:	4642      	mov	r2, r8
 800be0c:	189b      	adds	r3, r3, r2
 800be0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be12:	464b      	mov	r3, r9
 800be14:	460a      	mov	r2, r1
 800be16:	eb42 0303 	adc.w	r3, r2, r3
 800be1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800be2a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800be2e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800be32:	460b      	mov	r3, r1
 800be34:	18db      	adds	r3, r3, r3
 800be36:	62bb      	str	r3, [r7, #40]	; 0x28
 800be38:	4613      	mov	r3, r2
 800be3a:	eb42 0303 	adc.w	r3, r2, r3
 800be3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800be44:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800be48:	f7f4 f9ca 	bl	80001e0 <__aeabi_uldivmod>
 800be4c:	4602      	mov	r2, r0
 800be4e:	460b      	mov	r3, r1
 800be50:	4b0e      	ldr	r3, [pc, #56]	; (800be8c <UART_SetConfig+0x360>)
 800be52:	fba3 1302 	umull	r1, r3, r3, r2
 800be56:	095b      	lsrs	r3, r3, #5
 800be58:	2164      	movs	r1, #100	; 0x64
 800be5a:	fb01 f303 	mul.w	r3, r1, r3
 800be5e:	1ad3      	subs	r3, r2, r3
 800be60:	00db      	lsls	r3, r3, #3
 800be62:	3332      	adds	r3, #50	; 0x32
 800be64:	4a09      	ldr	r2, [pc, #36]	; (800be8c <UART_SetConfig+0x360>)
 800be66:	fba2 2303 	umull	r2, r3, r2, r3
 800be6a:	095b      	lsrs	r3, r3, #5
 800be6c:	f003 0207 	and.w	r2, r3, #7
 800be70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4422      	add	r2, r4
 800be78:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800be7a:	e108      	b.n	800c08e <UART_SetConfig+0x562>
 800be7c:	00a037a0 	.word	0x00a037a0
 800be80:	0800f4c0 	.word	0x0800f4c0
 800be84:	40011000 	.word	0x40011000
 800be88:	40011400 	.word	0x40011400
 800be8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800be90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be94:	2200      	movs	r2, #0
 800be96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800be9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800be9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bea2:	4642      	mov	r2, r8
 800bea4:	464b      	mov	r3, r9
 800bea6:	1891      	adds	r1, r2, r2
 800bea8:	6239      	str	r1, [r7, #32]
 800beaa:	415b      	adcs	r3, r3
 800beac:	627b      	str	r3, [r7, #36]	; 0x24
 800beae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800beb2:	4641      	mov	r1, r8
 800beb4:	1854      	adds	r4, r2, r1
 800beb6:	4649      	mov	r1, r9
 800beb8:	eb43 0501 	adc.w	r5, r3, r1
 800bebc:	f04f 0200 	mov.w	r2, #0
 800bec0:	f04f 0300 	mov.w	r3, #0
 800bec4:	00eb      	lsls	r3, r5, #3
 800bec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800beca:	00e2      	lsls	r2, r4, #3
 800becc:	4614      	mov	r4, r2
 800bece:	461d      	mov	r5, r3
 800bed0:	4643      	mov	r3, r8
 800bed2:	18e3      	adds	r3, r4, r3
 800bed4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bed8:	464b      	mov	r3, r9
 800beda:	eb45 0303 	adc.w	r3, r5, r3
 800bede:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	2200      	movs	r2, #0
 800beea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800beee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bef2:	f04f 0200 	mov.w	r2, #0
 800bef6:	f04f 0300 	mov.w	r3, #0
 800befa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800befe:	4629      	mov	r1, r5
 800bf00:	008b      	lsls	r3, r1, #2
 800bf02:	4621      	mov	r1, r4
 800bf04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf08:	4621      	mov	r1, r4
 800bf0a:	008a      	lsls	r2, r1, #2
 800bf0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bf10:	f7f4 f966 	bl	80001e0 <__aeabi_uldivmod>
 800bf14:	4602      	mov	r2, r0
 800bf16:	460b      	mov	r3, r1
 800bf18:	4b60      	ldr	r3, [pc, #384]	; (800c09c <UART_SetConfig+0x570>)
 800bf1a:	fba3 2302 	umull	r2, r3, r3, r2
 800bf1e:	095b      	lsrs	r3, r3, #5
 800bf20:	011c      	lsls	r4, r3, #4
 800bf22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf26:	2200      	movs	r2, #0
 800bf28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bf2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bf30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bf34:	4642      	mov	r2, r8
 800bf36:	464b      	mov	r3, r9
 800bf38:	1891      	adds	r1, r2, r2
 800bf3a:	61b9      	str	r1, [r7, #24]
 800bf3c:	415b      	adcs	r3, r3
 800bf3e:	61fb      	str	r3, [r7, #28]
 800bf40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bf44:	4641      	mov	r1, r8
 800bf46:	1851      	adds	r1, r2, r1
 800bf48:	6139      	str	r1, [r7, #16]
 800bf4a:	4649      	mov	r1, r9
 800bf4c:	414b      	adcs	r3, r1
 800bf4e:	617b      	str	r3, [r7, #20]
 800bf50:	f04f 0200 	mov.w	r2, #0
 800bf54:	f04f 0300 	mov.w	r3, #0
 800bf58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bf5c:	4659      	mov	r1, fp
 800bf5e:	00cb      	lsls	r3, r1, #3
 800bf60:	4651      	mov	r1, sl
 800bf62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf66:	4651      	mov	r1, sl
 800bf68:	00ca      	lsls	r2, r1, #3
 800bf6a:	4610      	mov	r0, r2
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	4603      	mov	r3, r0
 800bf70:	4642      	mov	r2, r8
 800bf72:	189b      	adds	r3, r3, r2
 800bf74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf78:	464b      	mov	r3, r9
 800bf7a:	460a      	mov	r2, r1
 800bf7c:	eb42 0303 	adc.w	r3, r2, r3
 800bf80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	67bb      	str	r3, [r7, #120]	; 0x78
 800bf8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bf90:	f04f 0200 	mov.w	r2, #0
 800bf94:	f04f 0300 	mov.w	r3, #0
 800bf98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bf9c:	4649      	mov	r1, r9
 800bf9e:	008b      	lsls	r3, r1, #2
 800bfa0:	4641      	mov	r1, r8
 800bfa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bfa6:	4641      	mov	r1, r8
 800bfa8:	008a      	lsls	r2, r1, #2
 800bfaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bfae:	f7f4 f917 	bl	80001e0 <__aeabi_uldivmod>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	4b39      	ldr	r3, [pc, #228]	; (800c09c <UART_SetConfig+0x570>)
 800bfb8:	fba3 1302 	umull	r1, r3, r3, r2
 800bfbc:	095b      	lsrs	r3, r3, #5
 800bfbe:	2164      	movs	r1, #100	; 0x64
 800bfc0:	fb01 f303 	mul.w	r3, r1, r3
 800bfc4:	1ad3      	subs	r3, r2, r3
 800bfc6:	011b      	lsls	r3, r3, #4
 800bfc8:	3332      	adds	r3, #50	; 0x32
 800bfca:	4a34      	ldr	r2, [pc, #208]	; (800c09c <UART_SetConfig+0x570>)
 800bfcc:	fba2 2303 	umull	r2, r3, r2, r3
 800bfd0:	095b      	lsrs	r3, r3, #5
 800bfd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bfd6:	441c      	add	r4, r3
 800bfd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bfdc:	2200      	movs	r2, #0
 800bfde:	673b      	str	r3, [r7, #112]	; 0x70
 800bfe0:	677a      	str	r2, [r7, #116]	; 0x74
 800bfe2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bfe6:	4642      	mov	r2, r8
 800bfe8:	464b      	mov	r3, r9
 800bfea:	1891      	adds	r1, r2, r2
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	415b      	adcs	r3, r3
 800bff0:	60fb      	str	r3, [r7, #12]
 800bff2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bff6:	4641      	mov	r1, r8
 800bff8:	1851      	adds	r1, r2, r1
 800bffa:	6039      	str	r1, [r7, #0]
 800bffc:	4649      	mov	r1, r9
 800bffe:	414b      	adcs	r3, r1
 800c000:	607b      	str	r3, [r7, #4]
 800c002:	f04f 0200 	mov.w	r2, #0
 800c006:	f04f 0300 	mov.w	r3, #0
 800c00a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c00e:	4659      	mov	r1, fp
 800c010:	00cb      	lsls	r3, r1, #3
 800c012:	4651      	mov	r1, sl
 800c014:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c018:	4651      	mov	r1, sl
 800c01a:	00ca      	lsls	r2, r1, #3
 800c01c:	4610      	mov	r0, r2
 800c01e:	4619      	mov	r1, r3
 800c020:	4603      	mov	r3, r0
 800c022:	4642      	mov	r2, r8
 800c024:	189b      	adds	r3, r3, r2
 800c026:	66bb      	str	r3, [r7, #104]	; 0x68
 800c028:	464b      	mov	r3, r9
 800c02a:	460a      	mov	r2, r1
 800c02c:	eb42 0303 	adc.w	r3, r2, r3
 800c030:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	663b      	str	r3, [r7, #96]	; 0x60
 800c03c:	667a      	str	r2, [r7, #100]	; 0x64
 800c03e:	f04f 0200 	mov.w	r2, #0
 800c042:	f04f 0300 	mov.w	r3, #0
 800c046:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c04a:	4649      	mov	r1, r9
 800c04c:	008b      	lsls	r3, r1, #2
 800c04e:	4641      	mov	r1, r8
 800c050:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c054:	4641      	mov	r1, r8
 800c056:	008a      	lsls	r2, r1, #2
 800c058:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c05c:	f7f4 f8c0 	bl	80001e0 <__aeabi_uldivmod>
 800c060:	4602      	mov	r2, r0
 800c062:	460b      	mov	r3, r1
 800c064:	4b0d      	ldr	r3, [pc, #52]	; (800c09c <UART_SetConfig+0x570>)
 800c066:	fba3 1302 	umull	r1, r3, r3, r2
 800c06a:	095b      	lsrs	r3, r3, #5
 800c06c:	2164      	movs	r1, #100	; 0x64
 800c06e:	fb01 f303 	mul.w	r3, r1, r3
 800c072:	1ad3      	subs	r3, r2, r3
 800c074:	011b      	lsls	r3, r3, #4
 800c076:	3332      	adds	r3, #50	; 0x32
 800c078:	4a08      	ldr	r2, [pc, #32]	; (800c09c <UART_SetConfig+0x570>)
 800c07a:	fba2 2303 	umull	r2, r3, r2, r3
 800c07e:	095b      	lsrs	r3, r3, #5
 800c080:	f003 020f 	and.w	r2, r3, #15
 800c084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4422      	add	r2, r4
 800c08c:	609a      	str	r2, [r3, #8]
}
 800c08e:	bf00      	nop
 800c090:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c094:	46bd      	mov	sp, r7
 800c096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c09a:	bf00      	nop
 800c09c:	51eb851f 	.word	0x51eb851f

0800c0a0 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 800c0a4:	bf00      	nop
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr
	...

0800c0b0 <__NVIC_SetPriority>:
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b083      	sub	sp, #12
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	6039      	str	r1, [r7, #0]
 800c0ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c0bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	db0a      	blt.n	800c0da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	b2da      	uxtb	r2, r3
 800c0c8:	490c      	ldr	r1, [pc, #48]	; (800c0fc <__NVIC_SetPriority+0x4c>)
 800c0ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0ce:	0112      	lsls	r2, r2, #4
 800c0d0:	b2d2      	uxtb	r2, r2
 800c0d2:	440b      	add	r3, r1
 800c0d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c0d8:	e00a      	b.n	800c0f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	b2da      	uxtb	r2, r3
 800c0de:	4908      	ldr	r1, [pc, #32]	; (800c100 <__NVIC_SetPriority+0x50>)
 800c0e0:	79fb      	ldrb	r3, [r7, #7]
 800c0e2:	f003 030f 	and.w	r3, r3, #15
 800c0e6:	3b04      	subs	r3, #4
 800c0e8:	0112      	lsls	r2, r2, #4
 800c0ea:	b2d2      	uxtb	r2, r2
 800c0ec:	440b      	add	r3, r1
 800c0ee:	761a      	strb	r2, [r3, #24]
}
 800c0f0:	bf00      	nop
 800c0f2:	370c      	adds	r7, #12
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr
 800c0fc:	e000e100 	.word	0xe000e100
 800c100:	e000ed00 	.word	0xe000ed00

0800c104 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c104:	b580      	push	{r7, lr}
 800c106:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c108:	4b05      	ldr	r3, [pc, #20]	; (800c120 <SysTick_Handler+0x1c>)
 800c10a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c10c:	f002 f960 	bl	800e3d0 <xTaskGetSchedulerState>
 800c110:	4603      	mov	r3, r0
 800c112:	2b01      	cmp	r3, #1
 800c114:	d001      	beq.n	800c11a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c116:	f000 fd97 	bl	800cc48 <xPortSysTickHandler>
  }
}
 800c11a:	bf00      	nop
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	e000e010 	.word	0xe000e010

0800c124 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c124:	b580      	push	{r7, lr}
 800c126:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c128:	2100      	movs	r1, #0
 800c12a:	f06f 0004 	mvn.w	r0, #4
 800c12e:	f7ff ffbf 	bl	800c0b0 <__NVIC_SetPriority>
#endif
}
 800c132:	bf00      	nop
 800c134:	bd80      	pop	{r7, pc}
	...

0800c138 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c13e:	f3ef 8305 	mrs	r3, IPSR
 800c142:	603b      	str	r3, [r7, #0]
  return(result);
 800c144:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c146:	2b00      	cmp	r3, #0
 800c148:	d003      	beq.n	800c152 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c14a:	f06f 0305 	mvn.w	r3, #5
 800c14e:	607b      	str	r3, [r7, #4]
 800c150:	e00c      	b.n	800c16c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c152:	4b0a      	ldr	r3, [pc, #40]	; (800c17c <osKernelInitialize+0x44>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d105      	bne.n	800c166 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c15a:	4b08      	ldr	r3, [pc, #32]	; (800c17c <osKernelInitialize+0x44>)
 800c15c:	2201      	movs	r2, #1
 800c15e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c160:	2300      	movs	r3, #0
 800c162:	607b      	str	r3, [r7, #4]
 800c164:	e002      	b.n	800c16c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c166:	f04f 33ff 	mov.w	r3, #4294967295
 800c16a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c16c:	687b      	ldr	r3, [r7, #4]
}
 800c16e:	4618      	mov	r0, r3
 800c170:	370c      	adds	r7, #12
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr
 800c17a:	bf00      	nop
 800c17c:	20000934 	.word	0x20000934

0800c180 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c186:	f3ef 8305 	mrs	r3, IPSR
 800c18a:	603b      	str	r3, [r7, #0]
  return(result);
 800c18c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d003      	beq.n	800c19a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c192:	f06f 0305 	mvn.w	r3, #5
 800c196:	607b      	str	r3, [r7, #4]
 800c198:	e010      	b.n	800c1bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c19a:	4b0b      	ldr	r3, [pc, #44]	; (800c1c8 <osKernelStart+0x48>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d109      	bne.n	800c1b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c1a2:	f7ff ffbf 	bl	800c124 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c1a6:	4b08      	ldr	r3, [pc, #32]	; (800c1c8 <osKernelStart+0x48>)
 800c1a8:	2202      	movs	r2, #2
 800c1aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c1ac:	f001 fcb4 	bl	800db18 <vTaskStartScheduler>
      stat = osOK;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	607b      	str	r3, [r7, #4]
 800c1b4:	e002      	b.n	800c1bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c1b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c1bc:	687b      	ldr	r3, [r7, #4]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3708      	adds	r7, #8
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	20000934 	.word	0x20000934

0800c1cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b08e      	sub	sp, #56	; 0x38
 800c1d0:	af04      	add	r7, sp, #16
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1dc:	f3ef 8305 	mrs	r3, IPSR
 800c1e0:	617b      	str	r3, [r7, #20]
  return(result);
 800c1e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d17e      	bne.n	800c2e6 <osThreadNew+0x11a>
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d07b      	beq.n	800c2e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c1ee:	2380      	movs	r3, #128	; 0x80
 800c1f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c1f2:	2318      	movs	r3, #24
 800c1f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c1fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c1fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d045      	beq.n	800c292 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d002      	beq.n	800c214 <osThreadNew+0x48>
        name = attr->name;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	699b      	ldr	r3, [r3, #24]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d002      	beq.n	800c222 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	699b      	ldr	r3, [r3, #24]
 800c220:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c222:	69fb      	ldr	r3, [r7, #28]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d008      	beq.n	800c23a <osThreadNew+0x6e>
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	2b38      	cmp	r3, #56	; 0x38
 800c22c:	d805      	bhi.n	800c23a <osThreadNew+0x6e>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	f003 0301 	and.w	r3, r3, #1
 800c236:	2b00      	cmp	r3, #0
 800c238:	d001      	beq.n	800c23e <osThreadNew+0x72>
        return (NULL);
 800c23a:	2300      	movs	r3, #0
 800c23c:	e054      	b.n	800c2e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	695b      	ldr	r3, [r3, #20]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d003      	beq.n	800c24e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	695b      	ldr	r3, [r3, #20]
 800c24a:	089b      	lsrs	r3, r3, #2
 800c24c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d00e      	beq.n	800c274 <osThreadNew+0xa8>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	2bbb      	cmp	r3, #187	; 0xbb
 800c25c:	d90a      	bls.n	800c274 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c262:	2b00      	cmp	r3, #0
 800c264:	d006      	beq.n	800c274 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	695b      	ldr	r3, [r3, #20]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d002      	beq.n	800c274 <osThreadNew+0xa8>
        mem = 1;
 800c26e:	2301      	movs	r3, #1
 800c270:	61bb      	str	r3, [r7, #24]
 800c272:	e010      	b.n	800c296 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d10c      	bne.n	800c296 <osThreadNew+0xca>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d108      	bne.n	800c296 <osThreadNew+0xca>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	691b      	ldr	r3, [r3, #16]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d104      	bne.n	800c296 <osThreadNew+0xca>
          mem = 0;
 800c28c:	2300      	movs	r3, #0
 800c28e:	61bb      	str	r3, [r7, #24]
 800c290:	e001      	b.n	800c296 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c292:	2300      	movs	r3, #0
 800c294:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d110      	bne.n	800c2be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c2a4:	9202      	str	r2, [sp, #8]
 800c2a6:	9301      	str	r3, [sp, #4]
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	6a3a      	ldr	r2, [r7, #32]
 800c2b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c2b2:	68f8      	ldr	r0, [r7, #12]
 800c2b4:	f001 fa44 	bl	800d740 <xTaskCreateStatic>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	613b      	str	r3, [r7, #16]
 800c2bc:	e013      	b.n	800c2e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d110      	bne.n	800c2e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c2c4:	6a3b      	ldr	r3, [r7, #32]
 800c2c6:	b29a      	uxth	r2, r3
 800c2c8:	f107 0310 	add.w	r3, r7, #16
 800c2cc:	9301      	str	r3, [sp, #4]
 800c2ce:	69fb      	ldr	r3, [r7, #28]
 800c2d0:	9300      	str	r3, [sp, #0]
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c2d6:	68f8      	ldr	r0, [r7, #12]
 800c2d8:	f001 fa8f 	bl	800d7fa <xTaskCreate>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d001      	beq.n	800c2e6 <osThreadNew+0x11a>
            hTask = NULL;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c2e6:	693b      	ldr	r3, [r7, #16]
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3728      	adds	r7, #40	; 0x28
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b084      	sub	sp, #16
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2f8:	f3ef 8305 	mrs	r3, IPSR
 800c2fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800c2fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c300:	2b00      	cmp	r3, #0
 800c302:	d003      	beq.n	800c30c <osDelay+0x1c>
    stat = osErrorISR;
 800c304:	f06f 0305 	mvn.w	r3, #5
 800c308:	60fb      	str	r3, [r7, #12]
 800c30a:	e007      	b.n	800c31c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c30c:	2300      	movs	r3, #0
 800c30e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d002      	beq.n	800c31c <osDelay+0x2c>
      vTaskDelay(ticks);
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f001 fbca 	bl	800dab0 <vTaskDelay>
    }
  }

  return (stat);
 800c31c:	68fb      	ldr	r3, [r7, #12]
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3710      	adds	r7, #16
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
	...

0800c328 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	4a07      	ldr	r2, [pc, #28]	; (800c354 <vApplicationGetIdleTaskMemory+0x2c>)
 800c338:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	4a06      	ldr	r2, [pc, #24]	; (800c358 <vApplicationGetIdleTaskMemory+0x30>)
 800c33e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2280      	movs	r2, #128	; 0x80
 800c344:	601a      	str	r2, [r3, #0]
}
 800c346:	bf00      	nop
 800c348:	3714      	adds	r7, #20
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr
 800c352:	bf00      	nop
 800c354:	20000938 	.word	0x20000938
 800c358:	200009f4 	.word	0x200009f4

0800c35c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	4a07      	ldr	r2, [pc, #28]	; (800c388 <vApplicationGetTimerTaskMemory+0x2c>)
 800c36c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	4a06      	ldr	r2, [pc, #24]	; (800c38c <vApplicationGetTimerTaskMemory+0x30>)
 800c372:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c37a:	601a      	str	r2, [r3, #0]
}
 800c37c:	bf00      	nop
 800c37e:	3714      	adds	r7, #20
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr
 800c388:	20000bf4 	.word	0x20000bf4
 800c38c:	20000cb0 	.word	0x20000cb0

0800c390 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b08a      	sub	sp, #40	; 0x28
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c398:	2300      	movs	r3, #0
 800c39a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c39c:	f001 fc2c 	bl	800dbf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c3a0:	4b5b      	ldr	r3, [pc, #364]	; (800c510 <pvPortMalloc+0x180>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d101      	bne.n	800c3ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c3a8:	f000 f920 	bl	800c5ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c3ac:	4b59      	ldr	r3, [pc, #356]	; (800c514 <pvPortMalloc+0x184>)
 800c3ae:	681a      	ldr	r2, [r3, #0]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	4013      	ands	r3, r2
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	f040 8093 	bne.w	800c4e0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d01d      	beq.n	800c3fc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c3c0:	2208      	movs	r2, #8
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f003 0307 	and.w	r3, r3, #7
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d014      	beq.n	800c3fc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f023 0307 	bic.w	r3, r3, #7
 800c3d8:	3308      	adds	r3, #8
 800c3da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f003 0307 	and.w	r3, r3, #7
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00a      	beq.n	800c3fc <pvPortMalloc+0x6c>
	__asm volatile
 800c3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ea:	f383 8811 	msr	BASEPRI, r3
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	f3bf 8f4f 	dsb	sy
 800c3f6:	617b      	str	r3, [r7, #20]
}
 800c3f8:	bf00      	nop
 800c3fa:	e7fe      	b.n	800c3fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d06e      	beq.n	800c4e0 <pvPortMalloc+0x150>
 800c402:	4b45      	ldr	r3, [pc, #276]	; (800c518 <pvPortMalloc+0x188>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d869      	bhi.n	800c4e0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c40c:	4b43      	ldr	r3, [pc, #268]	; (800c51c <pvPortMalloc+0x18c>)
 800c40e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c410:	4b42      	ldr	r3, [pc, #264]	; (800c51c <pvPortMalloc+0x18c>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c416:	e004      	b.n	800c422 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d903      	bls.n	800c434 <pvPortMalloc+0xa4>
 800c42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d1f1      	bne.n	800c418 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c434:	4b36      	ldr	r3, [pc, #216]	; (800c510 <pvPortMalloc+0x180>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d050      	beq.n	800c4e0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c43e:	6a3b      	ldr	r3, [r7, #32]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2208      	movs	r2, #8
 800c444:	4413      	add	r3, r2
 800c446:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44a:	681a      	ldr	r2, [r3, #0]
 800c44c:	6a3b      	ldr	r3, [r7, #32]
 800c44e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c452:	685a      	ldr	r2, [r3, #4]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	1ad2      	subs	r2, r2, r3
 800c458:	2308      	movs	r3, #8
 800c45a:	005b      	lsls	r3, r3, #1
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d91f      	bls.n	800c4a0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	4413      	add	r3, r2
 800c466:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c468:	69bb      	ldr	r3, [r7, #24]
 800c46a:	f003 0307 	and.w	r3, r3, #7
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00a      	beq.n	800c488 <pvPortMalloc+0xf8>
	__asm volatile
 800c472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c476:	f383 8811 	msr	BASEPRI, r3
 800c47a:	f3bf 8f6f 	isb	sy
 800c47e:	f3bf 8f4f 	dsb	sy
 800c482:	613b      	str	r3, [r7, #16]
}
 800c484:	bf00      	nop
 800c486:	e7fe      	b.n	800c486 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48a:	685a      	ldr	r2, [r3, #4]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	1ad2      	subs	r2, r2, r3
 800c490:	69bb      	ldr	r3, [r7, #24]
 800c492:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c49a:	69b8      	ldr	r0, [r7, #24]
 800c49c:	f000 f908 	bl	800c6b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c4a0:	4b1d      	ldr	r3, [pc, #116]	; (800c518 <pvPortMalloc+0x188>)
 800c4a2:	681a      	ldr	r2, [r3, #0]
 800c4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	1ad3      	subs	r3, r2, r3
 800c4aa:	4a1b      	ldr	r2, [pc, #108]	; (800c518 <pvPortMalloc+0x188>)
 800c4ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c4ae:	4b1a      	ldr	r3, [pc, #104]	; (800c518 <pvPortMalloc+0x188>)
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	4b1b      	ldr	r3, [pc, #108]	; (800c520 <pvPortMalloc+0x190>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d203      	bcs.n	800c4c2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c4ba:	4b17      	ldr	r3, [pc, #92]	; (800c518 <pvPortMalloc+0x188>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4a18      	ldr	r2, [pc, #96]	; (800c520 <pvPortMalloc+0x190>)
 800c4c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c4:	685a      	ldr	r2, [r3, #4]
 800c4c6:	4b13      	ldr	r3, [pc, #76]	; (800c514 <pvPortMalloc+0x184>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	431a      	orrs	r2, r3
 800c4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c4d6:	4b13      	ldr	r3, [pc, #76]	; (800c524 <pvPortMalloc+0x194>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	4a11      	ldr	r2, [pc, #68]	; (800c524 <pvPortMalloc+0x194>)
 800c4de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c4e0:	f001 fb98 	bl	800dc14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	f003 0307 	and.w	r3, r3, #7
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d00a      	beq.n	800c504 <pvPortMalloc+0x174>
	__asm volatile
 800c4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f2:	f383 8811 	msr	BASEPRI, r3
 800c4f6:	f3bf 8f6f 	isb	sy
 800c4fa:	f3bf 8f4f 	dsb	sy
 800c4fe:	60fb      	str	r3, [r7, #12]
}
 800c500:	bf00      	nop
 800c502:	e7fe      	b.n	800c502 <pvPortMalloc+0x172>
	return pvReturn;
 800c504:	69fb      	ldr	r3, [r7, #28]
}
 800c506:	4618      	mov	r0, r3
 800c508:	3728      	adds	r7, #40	; 0x28
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	20004cb8 	.word	0x20004cb8
 800c514:	20004ccc 	.word	0x20004ccc
 800c518:	20004cbc 	.word	0x20004cbc
 800c51c:	20004cb0 	.word	0x20004cb0
 800c520:	20004cc0 	.word	0x20004cc0
 800c524:	20004cc4 	.word	0x20004cc4

0800c528 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b086      	sub	sp, #24
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d04d      	beq.n	800c5d6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c53a:	2308      	movs	r3, #8
 800c53c:	425b      	negs	r3, r3
 800c53e:	697a      	ldr	r2, [r7, #20]
 800c540:	4413      	add	r3, r2
 800c542:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	685a      	ldr	r2, [r3, #4]
 800c54c:	4b24      	ldr	r3, [pc, #144]	; (800c5e0 <vPortFree+0xb8>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4013      	ands	r3, r2
 800c552:	2b00      	cmp	r3, #0
 800c554:	d10a      	bne.n	800c56c <vPortFree+0x44>
	__asm volatile
 800c556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55a:	f383 8811 	msr	BASEPRI, r3
 800c55e:	f3bf 8f6f 	isb	sy
 800c562:	f3bf 8f4f 	dsb	sy
 800c566:	60fb      	str	r3, [r7, #12]
}
 800c568:	bf00      	nop
 800c56a:	e7fe      	b.n	800c56a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d00a      	beq.n	800c58a <vPortFree+0x62>
	__asm volatile
 800c574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c578:	f383 8811 	msr	BASEPRI, r3
 800c57c:	f3bf 8f6f 	isb	sy
 800c580:	f3bf 8f4f 	dsb	sy
 800c584:	60bb      	str	r3, [r7, #8]
}
 800c586:	bf00      	nop
 800c588:	e7fe      	b.n	800c588 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	685a      	ldr	r2, [r3, #4]
 800c58e:	4b14      	ldr	r3, [pc, #80]	; (800c5e0 <vPortFree+0xb8>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4013      	ands	r3, r2
 800c594:	2b00      	cmp	r3, #0
 800c596:	d01e      	beq.n	800c5d6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d11a      	bne.n	800c5d6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	685a      	ldr	r2, [r3, #4]
 800c5a4:	4b0e      	ldr	r3, [pc, #56]	; (800c5e0 <vPortFree+0xb8>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	43db      	mvns	r3, r3
 800c5aa:	401a      	ands	r2, r3
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c5b0:	f001 fb22 	bl	800dbf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	685a      	ldr	r2, [r3, #4]
 800c5b8:	4b0a      	ldr	r3, [pc, #40]	; (800c5e4 <vPortFree+0xbc>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4413      	add	r3, r2
 800c5be:	4a09      	ldr	r2, [pc, #36]	; (800c5e4 <vPortFree+0xbc>)
 800c5c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c5c2:	6938      	ldr	r0, [r7, #16]
 800c5c4:	f000 f874 	bl	800c6b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c5c8:	4b07      	ldr	r3, [pc, #28]	; (800c5e8 <vPortFree+0xc0>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	4a06      	ldr	r2, [pc, #24]	; (800c5e8 <vPortFree+0xc0>)
 800c5d0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c5d2:	f001 fb1f 	bl	800dc14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c5d6:	bf00      	nop
 800c5d8:	3718      	adds	r7, #24
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	20004ccc 	.word	0x20004ccc
 800c5e4:	20004cbc 	.word	0x20004cbc
 800c5e8:	20004cc8 	.word	0x20004cc8

0800c5ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b085      	sub	sp, #20
 800c5f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c5f2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c5f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c5f8:	4b27      	ldr	r3, [pc, #156]	; (800c698 <prvHeapInit+0xac>)
 800c5fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f003 0307 	and.w	r3, r3, #7
 800c602:	2b00      	cmp	r3, #0
 800c604:	d00c      	beq.n	800c620 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	3307      	adds	r3, #7
 800c60a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f023 0307 	bic.w	r3, r3, #7
 800c612:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c614:	68ba      	ldr	r2, [r7, #8]
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	1ad3      	subs	r3, r2, r3
 800c61a:	4a1f      	ldr	r2, [pc, #124]	; (800c698 <prvHeapInit+0xac>)
 800c61c:	4413      	add	r3, r2
 800c61e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c624:	4a1d      	ldr	r2, [pc, #116]	; (800c69c <prvHeapInit+0xb0>)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c62a:	4b1c      	ldr	r3, [pc, #112]	; (800c69c <prvHeapInit+0xb0>)
 800c62c:	2200      	movs	r2, #0
 800c62e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	68ba      	ldr	r2, [r7, #8]
 800c634:	4413      	add	r3, r2
 800c636:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c638:	2208      	movs	r2, #8
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	1a9b      	subs	r3, r3, r2
 800c63e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f023 0307 	bic.w	r3, r3, #7
 800c646:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	4a15      	ldr	r2, [pc, #84]	; (800c6a0 <prvHeapInit+0xb4>)
 800c64c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c64e:	4b14      	ldr	r3, [pc, #80]	; (800c6a0 <prvHeapInit+0xb4>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	2200      	movs	r2, #0
 800c654:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c656:	4b12      	ldr	r3, [pc, #72]	; (800c6a0 <prvHeapInit+0xb4>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2200      	movs	r2, #0
 800c65c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	1ad2      	subs	r2, r2, r3
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c66c:	4b0c      	ldr	r3, [pc, #48]	; (800c6a0 <prvHeapInit+0xb4>)
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	4a0a      	ldr	r2, [pc, #40]	; (800c6a4 <prvHeapInit+0xb8>)
 800c67a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	4a09      	ldr	r2, [pc, #36]	; (800c6a8 <prvHeapInit+0xbc>)
 800c682:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c684:	4b09      	ldr	r3, [pc, #36]	; (800c6ac <prvHeapInit+0xc0>)
 800c686:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c68a:	601a      	str	r2, [r3, #0]
}
 800c68c:	bf00      	nop
 800c68e:	3714      	adds	r7, #20
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr
 800c698:	200010b0 	.word	0x200010b0
 800c69c:	20004cb0 	.word	0x20004cb0
 800c6a0:	20004cb8 	.word	0x20004cb8
 800c6a4:	20004cc0 	.word	0x20004cc0
 800c6a8:	20004cbc 	.word	0x20004cbc
 800c6ac:	20004ccc 	.word	0x20004ccc

0800c6b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c6b8:	4b28      	ldr	r3, [pc, #160]	; (800c75c <prvInsertBlockIntoFreeList+0xac>)
 800c6ba:	60fb      	str	r3, [r7, #12]
 800c6bc:	e002      	b.n	800c6c4 <prvInsertBlockIntoFreeList+0x14>
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	60fb      	str	r3, [r7, #12]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d8f7      	bhi.n	800c6be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	68ba      	ldr	r2, [r7, #8]
 800c6d8:	4413      	add	r3, r2
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d108      	bne.n	800c6f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	685a      	ldr	r2, [r3, #4]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	441a      	add	r2, r3
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	68ba      	ldr	r2, [r7, #8]
 800c6fc:	441a      	add	r2, r3
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	429a      	cmp	r2, r3
 800c704:	d118      	bne.n	800c738 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	4b15      	ldr	r3, [pc, #84]	; (800c760 <prvInsertBlockIntoFreeList+0xb0>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	429a      	cmp	r2, r3
 800c710:	d00d      	beq.n	800c72e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	685a      	ldr	r2, [r3, #4]
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	441a      	add	r2, r3
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	601a      	str	r2, [r3, #0]
 800c72c:	e008      	b.n	800c740 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c72e:	4b0c      	ldr	r3, [pc, #48]	; (800c760 <prvInsertBlockIntoFreeList+0xb0>)
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	601a      	str	r2, [r3, #0]
 800c736:	e003      	b.n	800c740 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	429a      	cmp	r2, r3
 800c746:	d002      	beq.n	800c74e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c74e:	bf00      	nop
 800c750:	3714      	adds	r7, #20
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop
 800c75c:	20004cb0 	.word	0x20004cb0
 800c760:	20004cb8 	.word	0x20004cb8

0800c764 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c764:	b480      	push	{r7}
 800c766:	b083      	sub	sp, #12
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f103 0208 	add.w	r2, r3, #8
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f04f 32ff 	mov.w	r2, #4294967295
 800c77c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f103 0208 	add.w	r2, r3, #8
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f103 0208 	add.w	r2, r3, #8
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c798:	bf00      	nop
 800c79a:	370c      	adds	r7, #12
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c7b2:	bf00      	nop
 800c7b4:	370c      	adds	r7, #12
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr

0800c7be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7be:	b480      	push	{r7}
 800c7c0:	b085      	sub	sp, #20
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
 800c7c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	68fa      	ldr	r2, [r7, #12]
 800c7d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	689a      	ldr	r2, [r3, #8]
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	683a      	ldr	r2, [r7, #0]
 800c7e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	683a      	ldr	r2, [r7, #0]
 800c7e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	1c5a      	adds	r2, r3, #1
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	601a      	str	r2, [r3, #0]
}
 800c7fa:	bf00      	nop
 800c7fc:	3714      	adds	r7, #20
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr

0800c806 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c806:	b480      	push	{r7}
 800c808:	b085      	sub	sp, #20
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
 800c80e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c81c:	d103      	bne.n	800c826 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	691b      	ldr	r3, [r3, #16]
 800c822:	60fb      	str	r3, [r7, #12]
 800c824:	e00c      	b.n	800c840 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	3308      	adds	r3, #8
 800c82a:	60fb      	str	r3, [r7, #12]
 800c82c:	e002      	b.n	800c834 <vListInsert+0x2e>
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	60fb      	str	r3, [r7, #12]
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	68ba      	ldr	r2, [r7, #8]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d2f6      	bcs.n	800c82e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	685a      	ldr	r2, [r3, #4]
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	683a      	ldr	r2, [r7, #0]
 800c84e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	68fa      	ldr	r2, [r7, #12]
 800c854:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	683a      	ldr	r2, [r7, #0]
 800c85a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	1c5a      	adds	r2, r3, #1
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	601a      	str	r2, [r3, #0]
}
 800c86c:	bf00      	nop
 800c86e:	3714      	adds	r7, #20
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr

0800c878 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c878:	b480      	push	{r7}
 800c87a:	b085      	sub	sp, #20
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	691b      	ldr	r3, [r3, #16]
 800c884:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	6892      	ldr	r2, [r2, #8]
 800c88e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	6852      	ldr	r2, [r2, #4]
 800c898:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	687a      	ldr	r2, [r7, #4]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d103      	bne.n	800c8ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	689a      	ldr	r2, [r3, #8]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	1e5a      	subs	r2, r3, #1
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3714      	adds	r7, #20
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b085      	sub	sp, #20
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	3b04      	subs	r3, #4
 800c8dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c8e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	3b04      	subs	r3, #4
 800c8ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	f023 0201 	bic.w	r2, r3, #1
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	3b04      	subs	r3, #4
 800c8fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c8fc:	4a0c      	ldr	r2, [pc, #48]	; (800c930 <pxPortInitialiseStack+0x64>)
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	3b14      	subs	r3, #20
 800c906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c908:	687a      	ldr	r2, [r7, #4]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	3b04      	subs	r3, #4
 800c912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f06f 0202 	mvn.w	r2, #2
 800c91a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	3b20      	subs	r3, #32
 800c920:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c922:	68fb      	ldr	r3, [r7, #12]
}
 800c924:	4618      	mov	r0, r3
 800c926:	3714      	adds	r7, #20
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr
 800c930:	0800c935 	.word	0x0800c935

0800c934 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c934:	b480      	push	{r7}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c93a:	2300      	movs	r3, #0
 800c93c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c93e:	4b12      	ldr	r3, [pc, #72]	; (800c988 <prvTaskExitError+0x54>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c946:	d00a      	beq.n	800c95e <prvTaskExitError+0x2a>
	__asm volatile
 800c948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94c:	f383 8811 	msr	BASEPRI, r3
 800c950:	f3bf 8f6f 	isb	sy
 800c954:	f3bf 8f4f 	dsb	sy
 800c958:	60fb      	str	r3, [r7, #12]
}
 800c95a:	bf00      	nop
 800c95c:	e7fe      	b.n	800c95c <prvTaskExitError+0x28>
	__asm volatile
 800c95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	60bb      	str	r3, [r7, #8]
}
 800c970:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c972:	bf00      	nop
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d0fc      	beq.n	800c974 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c97a:	bf00      	nop
 800c97c:	bf00      	nop
 800c97e:	3714      	adds	r7, #20
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr
 800c988:	20000010 	.word	0x20000010
 800c98c:	00000000 	.word	0x00000000

0800c990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c990:	4b07      	ldr	r3, [pc, #28]	; (800c9b0 <pxCurrentTCBConst2>)
 800c992:	6819      	ldr	r1, [r3, #0]
 800c994:	6808      	ldr	r0, [r1, #0]
 800c996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c99a:	f380 8809 	msr	PSP, r0
 800c99e:	f3bf 8f6f 	isb	sy
 800c9a2:	f04f 0000 	mov.w	r0, #0
 800c9a6:	f380 8811 	msr	BASEPRI, r0
 800c9aa:	4770      	bx	lr
 800c9ac:	f3af 8000 	nop.w

0800c9b0 <pxCurrentTCBConst2>:
 800c9b0:	20004d18 	.word	0x20004d18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c9b4:	bf00      	nop
 800c9b6:	bf00      	nop

0800c9b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c9b8:	4808      	ldr	r0, [pc, #32]	; (800c9dc <prvPortStartFirstTask+0x24>)
 800c9ba:	6800      	ldr	r0, [r0, #0]
 800c9bc:	6800      	ldr	r0, [r0, #0]
 800c9be:	f380 8808 	msr	MSP, r0
 800c9c2:	f04f 0000 	mov.w	r0, #0
 800c9c6:	f380 8814 	msr	CONTROL, r0
 800c9ca:	b662      	cpsie	i
 800c9cc:	b661      	cpsie	f
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	f3bf 8f6f 	isb	sy
 800c9d6:	df00      	svc	0
 800c9d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c9da:	bf00      	nop
 800c9dc:	e000ed08 	.word	0xe000ed08

0800c9e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b086      	sub	sp, #24
 800c9e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c9e6:	4b46      	ldr	r3, [pc, #280]	; (800cb00 <xPortStartScheduler+0x120>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a46      	ldr	r2, [pc, #280]	; (800cb04 <xPortStartScheduler+0x124>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d10a      	bne.n	800ca06 <xPortStartScheduler+0x26>
	__asm volatile
 800c9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f4:	f383 8811 	msr	BASEPRI, r3
 800c9f8:	f3bf 8f6f 	isb	sy
 800c9fc:	f3bf 8f4f 	dsb	sy
 800ca00:	613b      	str	r3, [r7, #16]
}
 800ca02:	bf00      	nop
 800ca04:	e7fe      	b.n	800ca04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ca06:	4b3e      	ldr	r3, [pc, #248]	; (800cb00 <xPortStartScheduler+0x120>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a3f      	ldr	r2, [pc, #252]	; (800cb08 <xPortStartScheduler+0x128>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d10a      	bne.n	800ca26 <xPortStartScheduler+0x46>
	__asm volatile
 800ca10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca14:	f383 8811 	msr	BASEPRI, r3
 800ca18:	f3bf 8f6f 	isb	sy
 800ca1c:	f3bf 8f4f 	dsb	sy
 800ca20:	60fb      	str	r3, [r7, #12]
}
 800ca22:	bf00      	nop
 800ca24:	e7fe      	b.n	800ca24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ca26:	4b39      	ldr	r3, [pc, #228]	; (800cb0c <xPortStartScheduler+0x12c>)
 800ca28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	b2db      	uxtb	r3, r3
 800ca30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	22ff      	movs	r2, #255	; 0xff
 800ca36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ca40:	78fb      	ldrb	r3, [r7, #3]
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ca48:	b2da      	uxtb	r2, r3
 800ca4a:	4b31      	ldr	r3, [pc, #196]	; (800cb10 <xPortStartScheduler+0x130>)
 800ca4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ca4e:	4b31      	ldr	r3, [pc, #196]	; (800cb14 <xPortStartScheduler+0x134>)
 800ca50:	2207      	movs	r2, #7
 800ca52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca54:	e009      	b.n	800ca6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ca56:	4b2f      	ldr	r3, [pc, #188]	; (800cb14 <xPortStartScheduler+0x134>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	3b01      	subs	r3, #1
 800ca5c:	4a2d      	ldr	r2, [pc, #180]	; (800cb14 <xPortStartScheduler+0x134>)
 800ca5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ca60:	78fb      	ldrb	r3, [r7, #3]
 800ca62:	b2db      	uxtb	r3, r3
 800ca64:	005b      	lsls	r3, r3, #1
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca6a:	78fb      	ldrb	r3, [r7, #3]
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca72:	2b80      	cmp	r3, #128	; 0x80
 800ca74:	d0ef      	beq.n	800ca56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ca76:	4b27      	ldr	r3, [pc, #156]	; (800cb14 <xPortStartScheduler+0x134>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f1c3 0307 	rsb	r3, r3, #7
 800ca7e:	2b04      	cmp	r3, #4
 800ca80:	d00a      	beq.n	800ca98 <xPortStartScheduler+0xb8>
	__asm volatile
 800ca82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca86:	f383 8811 	msr	BASEPRI, r3
 800ca8a:	f3bf 8f6f 	isb	sy
 800ca8e:	f3bf 8f4f 	dsb	sy
 800ca92:	60bb      	str	r3, [r7, #8]
}
 800ca94:	bf00      	nop
 800ca96:	e7fe      	b.n	800ca96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ca98:	4b1e      	ldr	r3, [pc, #120]	; (800cb14 <xPortStartScheduler+0x134>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	021b      	lsls	r3, r3, #8
 800ca9e:	4a1d      	ldr	r2, [pc, #116]	; (800cb14 <xPortStartScheduler+0x134>)
 800caa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800caa2:	4b1c      	ldr	r3, [pc, #112]	; (800cb14 <xPortStartScheduler+0x134>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800caaa:	4a1a      	ldr	r2, [pc, #104]	; (800cb14 <xPortStartScheduler+0x134>)
 800caac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	b2da      	uxtb	r2, r3
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cab6:	4b18      	ldr	r3, [pc, #96]	; (800cb18 <xPortStartScheduler+0x138>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4a17      	ldr	r2, [pc, #92]	; (800cb18 <xPortStartScheduler+0x138>)
 800cabc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cac2:	4b15      	ldr	r3, [pc, #84]	; (800cb18 <xPortStartScheduler+0x138>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a14      	ldr	r2, [pc, #80]	; (800cb18 <xPortStartScheduler+0x138>)
 800cac8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cacc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cace:	f000 f8dd 	bl	800cc8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cad2:	4b12      	ldr	r3, [pc, #72]	; (800cb1c <xPortStartScheduler+0x13c>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cad8:	f000 f8fc 	bl	800ccd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cadc:	4b10      	ldr	r3, [pc, #64]	; (800cb20 <xPortStartScheduler+0x140>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a0f      	ldr	r2, [pc, #60]	; (800cb20 <xPortStartScheduler+0x140>)
 800cae2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cae6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cae8:	f7ff ff66 	bl	800c9b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800caec:	f001 f9fa 	bl	800dee4 <vTaskSwitchContext>
	prvTaskExitError();
 800caf0:	f7ff ff20 	bl	800c934 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3718      	adds	r7, #24
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	e000ed00 	.word	0xe000ed00
 800cb04:	410fc271 	.word	0x410fc271
 800cb08:	410fc270 	.word	0x410fc270
 800cb0c:	e000e400 	.word	0xe000e400
 800cb10:	20004cd0 	.word	0x20004cd0
 800cb14:	20004cd4 	.word	0x20004cd4
 800cb18:	e000ed20 	.word	0xe000ed20
 800cb1c:	20000010 	.word	0x20000010
 800cb20:	e000ef34 	.word	0xe000ef34

0800cb24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
	__asm volatile
 800cb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2e:	f383 8811 	msr	BASEPRI, r3
 800cb32:	f3bf 8f6f 	isb	sy
 800cb36:	f3bf 8f4f 	dsb	sy
 800cb3a:	607b      	str	r3, [r7, #4]
}
 800cb3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cb3e:	4b0f      	ldr	r3, [pc, #60]	; (800cb7c <vPortEnterCritical+0x58>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	3301      	adds	r3, #1
 800cb44:	4a0d      	ldr	r2, [pc, #52]	; (800cb7c <vPortEnterCritical+0x58>)
 800cb46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cb48:	4b0c      	ldr	r3, [pc, #48]	; (800cb7c <vPortEnterCritical+0x58>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d10f      	bne.n	800cb70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cb50:	4b0b      	ldr	r3, [pc, #44]	; (800cb80 <vPortEnterCritical+0x5c>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d00a      	beq.n	800cb70 <vPortEnterCritical+0x4c>
	__asm volatile
 800cb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5e:	f383 8811 	msr	BASEPRI, r3
 800cb62:	f3bf 8f6f 	isb	sy
 800cb66:	f3bf 8f4f 	dsb	sy
 800cb6a:	603b      	str	r3, [r7, #0]
}
 800cb6c:	bf00      	nop
 800cb6e:	e7fe      	b.n	800cb6e <vPortEnterCritical+0x4a>
	}
}
 800cb70:	bf00      	nop
 800cb72:	370c      	adds	r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr
 800cb7c:	20000010 	.word	0x20000010
 800cb80:	e000ed04 	.word	0xe000ed04

0800cb84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cb8a:	4b12      	ldr	r3, [pc, #72]	; (800cbd4 <vPortExitCritical+0x50>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d10a      	bne.n	800cba8 <vPortExitCritical+0x24>
	__asm volatile
 800cb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb96:	f383 8811 	msr	BASEPRI, r3
 800cb9a:	f3bf 8f6f 	isb	sy
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	607b      	str	r3, [r7, #4]
}
 800cba4:	bf00      	nop
 800cba6:	e7fe      	b.n	800cba6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cba8:	4b0a      	ldr	r3, [pc, #40]	; (800cbd4 <vPortExitCritical+0x50>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	3b01      	subs	r3, #1
 800cbae:	4a09      	ldr	r2, [pc, #36]	; (800cbd4 <vPortExitCritical+0x50>)
 800cbb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cbb2:	4b08      	ldr	r3, [pc, #32]	; (800cbd4 <vPortExitCritical+0x50>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d105      	bne.n	800cbc6 <vPortExitCritical+0x42>
 800cbba:	2300      	movs	r3, #0
 800cbbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	f383 8811 	msr	BASEPRI, r3
}
 800cbc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cbc6:	bf00      	nop
 800cbc8:	370c      	adds	r7, #12
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop
 800cbd4:	20000010 	.word	0x20000010
	...

0800cbe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cbe0:	f3ef 8009 	mrs	r0, PSP
 800cbe4:	f3bf 8f6f 	isb	sy
 800cbe8:	4b15      	ldr	r3, [pc, #84]	; (800cc40 <pxCurrentTCBConst>)
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	f01e 0f10 	tst.w	lr, #16
 800cbf0:	bf08      	it	eq
 800cbf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cbf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbfa:	6010      	str	r0, [r2, #0]
 800cbfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cc00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cc04:	f380 8811 	msr	BASEPRI, r0
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	f3bf 8f6f 	isb	sy
 800cc10:	f001 f968 	bl	800dee4 <vTaskSwitchContext>
 800cc14:	f04f 0000 	mov.w	r0, #0
 800cc18:	f380 8811 	msr	BASEPRI, r0
 800cc1c:	bc09      	pop	{r0, r3}
 800cc1e:	6819      	ldr	r1, [r3, #0]
 800cc20:	6808      	ldr	r0, [r1, #0]
 800cc22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc26:	f01e 0f10 	tst.w	lr, #16
 800cc2a:	bf08      	it	eq
 800cc2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cc30:	f380 8809 	msr	PSP, r0
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	4770      	bx	lr
 800cc3a:	bf00      	nop
 800cc3c:	f3af 8000 	nop.w

0800cc40 <pxCurrentTCBConst>:
 800cc40:	20004d18 	.word	0x20004d18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cc44:	bf00      	nop
 800cc46:	bf00      	nop

0800cc48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
	__asm volatile
 800cc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc52:	f383 8811 	msr	BASEPRI, r3
 800cc56:	f3bf 8f6f 	isb	sy
 800cc5a:	f3bf 8f4f 	dsb	sy
 800cc5e:	607b      	str	r3, [r7, #4]
}
 800cc60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cc62:	f001 f885 	bl	800dd70 <xTaskIncrementTick>
 800cc66:	4603      	mov	r3, r0
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d003      	beq.n	800cc74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cc6c:	4b06      	ldr	r3, [pc, #24]	; (800cc88 <xPortSysTickHandler+0x40>)
 800cc6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc72:	601a      	str	r2, [r3, #0]
 800cc74:	2300      	movs	r3, #0
 800cc76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	f383 8811 	msr	BASEPRI, r3
}
 800cc7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cc80:	bf00      	nop
 800cc82:	3708      	adds	r7, #8
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}
 800cc88:	e000ed04 	.word	0xe000ed04

0800cc8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cc90:	4b0b      	ldr	r3, [pc, #44]	; (800ccc0 <vPortSetupTimerInterrupt+0x34>)
 800cc92:	2200      	movs	r2, #0
 800cc94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cc96:	4b0b      	ldr	r3, [pc, #44]	; (800ccc4 <vPortSetupTimerInterrupt+0x38>)
 800cc98:	2200      	movs	r2, #0
 800cc9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cc9c:	4b0a      	ldr	r3, [pc, #40]	; (800ccc8 <vPortSetupTimerInterrupt+0x3c>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a0a      	ldr	r2, [pc, #40]	; (800cccc <vPortSetupTimerInterrupt+0x40>)
 800cca2:	fba2 2303 	umull	r2, r3, r2, r3
 800cca6:	099b      	lsrs	r3, r3, #6
 800cca8:	4a09      	ldr	r2, [pc, #36]	; (800ccd0 <vPortSetupTimerInterrupt+0x44>)
 800ccaa:	3b01      	subs	r3, #1
 800ccac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ccae:	4b04      	ldr	r3, [pc, #16]	; (800ccc0 <vPortSetupTimerInterrupt+0x34>)
 800ccb0:	2207      	movs	r2, #7
 800ccb2:	601a      	str	r2, [r3, #0]
}
 800ccb4:	bf00      	nop
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr
 800ccbe:	bf00      	nop
 800ccc0:	e000e010 	.word	0xe000e010
 800ccc4:	e000e018 	.word	0xe000e018
 800ccc8:	20000004 	.word	0x20000004
 800cccc:	10624dd3 	.word	0x10624dd3
 800ccd0:	e000e014 	.word	0xe000e014

0800ccd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ccd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cce4 <vPortEnableVFP+0x10>
 800ccd8:	6801      	ldr	r1, [r0, #0]
 800ccda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ccde:	6001      	str	r1, [r0, #0]
 800cce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cce2:	bf00      	nop
 800cce4:	e000ed88 	.word	0xe000ed88

0800cce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cce8:	b480      	push	{r7}
 800ccea:	b085      	sub	sp, #20
 800ccec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ccee:	f3ef 8305 	mrs	r3, IPSR
 800ccf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2b0f      	cmp	r3, #15
 800ccf8:	d914      	bls.n	800cd24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ccfa:	4a17      	ldr	r2, [pc, #92]	; (800cd58 <vPortValidateInterruptPriority+0x70>)
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	4413      	add	r3, r2
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cd04:	4b15      	ldr	r3, [pc, #84]	; (800cd5c <vPortValidateInterruptPriority+0x74>)
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	7afa      	ldrb	r2, [r7, #11]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d20a      	bcs.n	800cd24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd12:	f383 8811 	msr	BASEPRI, r3
 800cd16:	f3bf 8f6f 	isb	sy
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	607b      	str	r3, [r7, #4]
}
 800cd20:	bf00      	nop
 800cd22:	e7fe      	b.n	800cd22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cd24:	4b0e      	ldr	r3, [pc, #56]	; (800cd60 <vPortValidateInterruptPriority+0x78>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cd2c:	4b0d      	ldr	r3, [pc, #52]	; (800cd64 <vPortValidateInterruptPriority+0x7c>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d90a      	bls.n	800cd4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd38:	f383 8811 	msr	BASEPRI, r3
 800cd3c:	f3bf 8f6f 	isb	sy
 800cd40:	f3bf 8f4f 	dsb	sy
 800cd44:	603b      	str	r3, [r7, #0]
}
 800cd46:	bf00      	nop
 800cd48:	e7fe      	b.n	800cd48 <vPortValidateInterruptPriority+0x60>
	}
 800cd4a:	bf00      	nop
 800cd4c:	3714      	adds	r7, #20
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd54:	4770      	bx	lr
 800cd56:	bf00      	nop
 800cd58:	e000e3f0 	.word	0xe000e3f0
 800cd5c:	20004cd0 	.word	0x20004cd0
 800cd60:	e000ed0c 	.word	0xe000ed0c
 800cd64:	20004cd4 	.word	0x20004cd4

0800cd68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d10a      	bne.n	800cd92 <xQueueGenericReset+0x2a>
	__asm volatile
 800cd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd80:	f383 8811 	msr	BASEPRI, r3
 800cd84:	f3bf 8f6f 	isb	sy
 800cd88:	f3bf 8f4f 	dsb	sy
 800cd8c:	60bb      	str	r3, [r7, #8]
}
 800cd8e:	bf00      	nop
 800cd90:	e7fe      	b.n	800cd90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cd92:	f7ff fec7 	bl	800cb24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681a      	ldr	r2, [r3, #0]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd9e:	68f9      	ldr	r1, [r7, #12]
 800cda0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cda2:	fb01 f303 	mul.w	r3, r1, r3
 800cda6:	441a      	add	r2, r3
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdc2:	3b01      	subs	r3, #1
 800cdc4:	68f9      	ldr	r1, [r7, #12]
 800cdc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cdc8:	fb01 f303 	mul.w	r3, r1, r3
 800cdcc:	441a      	add	r2, r3
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	22ff      	movs	r2, #255	; 0xff
 800cdd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	22ff      	movs	r2, #255	; 0xff
 800cdde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d114      	bne.n	800ce12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	691b      	ldr	r3, [r3, #16]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d01a      	beq.n	800ce26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	3310      	adds	r3, #16
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f001 f929 	bl	800e04c <xTaskRemoveFromEventList>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d012      	beq.n	800ce26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ce00:	4b0c      	ldr	r3, [pc, #48]	; (800ce34 <xQueueGenericReset+0xcc>)
 800ce02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce06:	601a      	str	r2, [r3, #0]
 800ce08:	f3bf 8f4f 	dsb	sy
 800ce0c:	f3bf 8f6f 	isb	sy
 800ce10:	e009      	b.n	800ce26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	3310      	adds	r3, #16
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7ff fca4 	bl	800c764 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	3324      	adds	r3, #36	; 0x24
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7ff fc9f 	bl	800c764 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ce26:	f7ff fead 	bl	800cb84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ce2a:	2301      	movs	r3, #1
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3710      	adds	r7, #16
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	e000ed04 	.word	0xe000ed04

0800ce38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b08e      	sub	sp, #56	; 0x38
 800ce3c:	af02      	add	r7, sp, #8
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
 800ce44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d10a      	bne.n	800ce62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ce4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce50:	f383 8811 	msr	BASEPRI, r3
 800ce54:	f3bf 8f6f 	isb	sy
 800ce58:	f3bf 8f4f 	dsb	sy
 800ce5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ce5e:	bf00      	nop
 800ce60:	e7fe      	b.n	800ce60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d10a      	bne.n	800ce7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ce68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6c:	f383 8811 	msr	BASEPRI, r3
 800ce70:	f3bf 8f6f 	isb	sy
 800ce74:	f3bf 8f4f 	dsb	sy
 800ce78:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ce7a:	bf00      	nop
 800ce7c:	e7fe      	b.n	800ce7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d002      	beq.n	800ce8a <xQueueGenericCreateStatic+0x52>
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d001      	beq.n	800ce8e <xQueueGenericCreateStatic+0x56>
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	e000      	b.n	800ce90 <xQueueGenericCreateStatic+0x58>
 800ce8e:	2300      	movs	r3, #0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d10a      	bne.n	800ceaa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ce94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce98:	f383 8811 	msr	BASEPRI, r3
 800ce9c:	f3bf 8f6f 	isb	sy
 800cea0:	f3bf 8f4f 	dsb	sy
 800cea4:	623b      	str	r3, [r7, #32]
}
 800cea6:	bf00      	nop
 800cea8:	e7fe      	b.n	800cea8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d102      	bne.n	800ceb6 <xQueueGenericCreateStatic+0x7e>
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d101      	bne.n	800ceba <xQueueGenericCreateStatic+0x82>
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	e000      	b.n	800cebc <xQueueGenericCreateStatic+0x84>
 800ceba:	2300      	movs	r3, #0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d10a      	bne.n	800ced6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec4:	f383 8811 	msr	BASEPRI, r3
 800cec8:	f3bf 8f6f 	isb	sy
 800cecc:	f3bf 8f4f 	dsb	sy
 800ced0:	61fb      	str	r3, [r7, #28]
}
 800ced2:	bf00      	nop
 800ced4:	e7fe      	b.n	800ced4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ced6:	2350      	movs	r3, #80	; 0x50
 800ced8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	2b50      	cmp	r3, #80	; 0x50
 800cede:	d00a      	beq.n	800cef6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee4:	f383 8811 	msr	BASEPRI, r3
 800cee8:	f3bf 8f6f 	isb	sy
 800ceec:	f3bf 8f4f 	dsb	sy
 800cef0:	61bb      	str	r3, [r7, #24]
}
 800cef2:	bf00      	nop
 800cef4:	e7fe      	b.n	800cef4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cef6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d00d      	beq.n	800cf1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf04:	2201      	movs	r2, #1
 800cf06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cf0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cf0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf10:	9300      	str	r3, [sp, #0]
 800cf12:	4613      	mov	r3, r2
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	68b9      	ldr	r1, [r7, #8]
 800cf18:	68f8      	ldr	r0, [r7, #12]
 800cf1a:	f000 f805 	bl	800cf28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cf1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3730      	adds	r7, #48	; 0x30
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	60f8      	str	r0, [r7, #12]
 800cf30:	60b9      	str	r1, [r7, #8]
 800cf32:	607a      	str	r2, [r7, #4]
 800cf34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d103      	bne.n	800cf44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cf3c:	69bb      	ldr	r3, [r7, #24]
 800cf3e:	69ba      	ldr	r2, [r7, #24]
 800cf40:	601a      	str	r2, [r3, #0]
 800cf42:	e002      	b.n	800cf4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cf44:	69bb      	ldr	r3, [r7, #24]
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cf50:	69bb      	ldr	r3, [r7, #24]
 800cf52:	68ba      	ldr	r2, [r7, #8]
 800cf54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cf56:	2101      	movs	r1, #1
 800cf58:	69b8      	ldr	r0, [r7, #24]
 800cf5a:	f7ff ff05 	bl	800cd68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	78fa      	ldrb	r2, [r7, #3]
 800cf62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cf66:	bf00      	nop
 800cf68:	3710      	adds	r7, #16
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}
	...

0800cf70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b08e      	sub	sp, #56	; 0x38
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	60f8      	str	r0, [r7, #12]
 800cf78:	60b9      	str	r1, [r7, #8]
 800cf7a:	607a      	str	r2, [r7, #4]
 800cf7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d10a      	bne.n	800cfa2 <xQueueGenericSend+0x32>
	__asm volatile
 800cf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf90:	f383 8811 	msr	BASEPRI, r3
 800cf94:	f3bf 8f6f 	isb	sy
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf9e:	bf00      	nop
 800cfa0:	e7fe      	b.n	800cfa0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d103      	bne.n	800cfb0 <xQueueGenericSend+0x40>
 800cfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d101      	bne.n	800cfb4 <xQueueGenericSend+0x44>
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	e000      	b.n	800cfb6 <xQueueGenericSend+0x46>
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d10a      	bne.n	800cfd0 <xQueueGenericSend+0x60>
	__asm volatile
 800cfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfbe:	f383 8811 	msr	BASEPRI, r3
 800cfc2:	f3bf 8f6f 	isb	sy
 800cfc6:	f3bf 8f4f 	dsb	sy
 800cfca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cfcc:	bf00      	nop
 800cfce:	e7fe      	b.n	800cfce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	2b02      	cmp	r3, #2
 800cfd4:	d103      	bne.n	800cfde <xQueueGenericSend+0x6e>
 800cfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfda:	2b01      	cmp	r3, #1
 800cfdc:	d101      	bne.n	800cfe2 <xQueueGenericSend+0x72>
 800cfde:	2301      	movs	r3, #1
 800cfe0:	e000      	b.n	800cfe4 <xQueueGenericSend+0x74>
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d10a      	bne.n	800cffe <xQueueGenericSend+0x8e>
	__asm volatile
 800cfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfec:	f383 8811 	msr	BASEPRI, r3
 800cff0:	f3bf 8f6f 	isb	sy
 800cff4:	f3bf 8f4f 	dsb	sy
 800cff8:	623b      	str	r3, [r7, #32]
}
 800cffa:	bf00      	nop
 800cffc:	e7fe      	b.n	800cffc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cffe:	f001 f9e7 	bl	800e3d0 <xTaskGetSchedulerState>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d102      	bne.n	800d00e <xQueueGenericSend+0x9e>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d101      	bne.n	800d012 <xQueueGenericSend+0xa2>
 800d00e:	2301      	movs	r3, #1
 800d010:	e000      	b.n	800d014 <xQueueGenericSend+0xa4>
 800d012:	2300      	movs	r3, #0
 800d014:	2b00      	cmp	r3, #0
 800d016:	d10a      	bne.n	800d02e <xQueueGenericSend+0xbe>
	__asm volatile
 800d018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01c:	f383 8811 	msr	BASEPRI, r3
 800d020:	f3bf 8f6f 	isb	sy
 800d024:	f3bf 8f4f 	dsb	sy
 800d028:	61fb      	str	r3, [r7, #28]
}
 800d02a:	bf00      	nop
 800d02c:	e7fe      	b.n	800d02c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d02e:	f7ff fd79 	bl	800cb24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d302      	bcc.n	800d044 <xQueueGenericSend+0xd4>
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	2b02      	cmp	r3, #2
 800d042:	d129      	bne.n	800d098 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d044:	683a      	ldr	r2, [r7, #0]
 800d046:	68b9      	ldr	r1, [r7, #8]
 800d048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d04a:	f000 fa0b 	bl	800d464 <prvCopyDataToQueue>
 800d04e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d054:	2b00      	cmp	r3, #0
 800d056:	d010      	beq.n	800d07a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05a:	3324      	adds	r3, #36	; 0x24
 800d05c:	4618      	mov	r0, r3
 800d05e:	f000 fff5 	bl	800e04c <xTaskRemoveFromEventList>
 800d062:	4603      	mov	r3, r0
 800d064:	2b00      	cmp	r3, #0
 800d066:	d013      	beq.n	800d090 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d068:	4b3f      	ldr	r3, [pc, #252]	; (800d168 <xQueueGenericSend+0x1f8>)
 800d06a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d06e:	601a      	str	r2, [r3, #0]
 800d070:	f3bf 8f4f 	dsb	sy
 800d074:	f3bf 8f6f 	isb	sy
 800d078:	e00a      	b.n	800d090 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d007      	beq.n	800d090 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d080:	4b39      	ldr	r3, [pc, #228]	; (800d168 <xQueueGenericSend+0x1f8>)
 800d082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d086:	601a      	str	r2, [r3, #0]
 800d088:	f3bf 8f4f 	dsb	sy
 800d08c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d090:	f7ff fd78 	bl	800cb84 <vPortExitCritical>
				return pdPASS;
 800d094:	2301      	movs	r3, #1
 800d096:	e063      	b.n	800d160 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d103      	bne.n	800d0a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d09e:	f7ff fd71 	bl	800cb84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	e05c      	b.n	800d160 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d0a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d106      	bne.n	800d0ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d0ac:	f107 0314 	add.w	r3, r7, #20
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f001 f82f 	bl	800e114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d0ba:	f7ff fd63 	bl	800cb84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d0be:	f000 fd9b 	bl	800dbf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d0c2:	f7ff fd2f 	bl	800cb24 <vPortEnterCritical>
 800d0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0cc:	b25b      	sxtb	r3, r3
 800d0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0d2:	d103      	bne.n	800d0dc <xQueueGenericSend+0x16c>
 800d0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0e2:	b25b      	sxtb	r3, r3
 800d0e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0e8:	d103      	bne.n	800d0f2 <xQueueGenericSend+0x182>
 800d0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d0f2:	f7ff fd47 	bl	800cb84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d0f6:	1d3a      	adds	r2, r7, #4
 800d0f8:	f107 0314 	add.w	r3, r7, #20
 800d0fc:	4611      	mov	r1, r2
 800d0fe:	4618      	mov	r0, r3
 800d100:	f001 f81e 	bl	800e140 <xTaskCheckForTimeOut>
 800d104:	4603      	mov	r3, r0
 800d106:	2b00      	cmp	r3, #0
 800d108:	d124      	bne.n	800d154 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d10a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d10c:	f000 faa2 	bl	800d654 <prvIsQueueFull>
 800d110:	4603      	mov	r3, r0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d018      	beq.n	800d148 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d118:	3310      	adds	r3, #16
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	4611      	mov	r1, r2
 800d11e:	4618      	mov	r0, r3
 800d120:	f000 ff44 	bl	800dfac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d126:	f000 fa2d 	bl	800d584 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d12a:	f000 fd73 	bl	800dc14 <xTaskResumeAll>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	f47f af7c 	bne.w	800d02e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d136:	4b0c      	ldr	r3, [pc, #48]	; (800d168 <xQueueGenericSend+0x1f8>)
 800d138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d13c:	601a      	str	r2, [r3, #0]
 800d13e:	f3bf 8f4f 	dsb	sy
 800d142:	f3bf 8f6f 	isb	sy
 800d146:	e772      	b.n	800d02e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d14a:	f000 fa1b 	bl	800d584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d14e:	f000 fd61 	bl	800dc14 <xTaskResumeAll>
 800d152:	e76c      	b.n	800d02e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d156:	f000 fa15 	bl	800d584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d15a:	f000 fd5b 	bl	800dc14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d15e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d160:	4618      	mov	r0, r3
 800d162:	3738      	adds	r7, #56	; 0x38
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	e000ed04 	.word	0xe000ed04

0800d16c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b090      	sub	sp, #64	; 0x40
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	607a      	str	r2, [r7, #4]
 800d178:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d180:	2b00      	cmp	r3, #0
 800d182:	d10a      	bne.n	800d19a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d188:	f383 8811 	msr	BASEPRI, r3
 800d18c:	f3bf 8f6f 	isb	sy
 800d190:	f3bf 8f4f 	dsb	sy
 800d194:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d196:	bf00      	nop
 800d198:	e7fe      	b.n	800d198 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d103      	bne.n	800d1a8 <xQueueGenericSendFromISR+0x3c>
 800d1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d101      	bne.n	800d1ac <xQueueGenericSendFromISR+0x40>
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e000      	b.n	800d1ae <xQueueGenericSendFromISR+0x42>
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d10a      	bne.n	800d1c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b6:	f383 8811 	msr	BASEPRI, r3
 800d1ba:	f3bf 8f6f 	isb	sy
 800d1be:	f3bf 8f4f 	dsb	sy
 800d1c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d1c4:	bf00      	nop
 800d1c6:	e7fe      	b.n	800d1c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	2b02      	cmp	r3, #2
 800d1cc:	d103      	bne.n	800d1d6 <xQueueGenericSendFromISR+0x6a>
 800d1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d101      	bne.n	800d1da <xQueueGenericSendFromISR+0x6e>
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	e000      	b.n	800d1dc <xQueueGenericSendFromISR+0x70>
 800d1da:	2300      	movs	r3, #0
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d10a      	bne.n	800d1f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e4:	f383 8811 	msr	BASEPRI, r3
 800d1e8:	f3bf 8f6f 	isb	sy
 800d1ec:	f3bf 8f4f 	dsb	sy
 800d1f0:	623b      	str	r3, [r7, #32]
}
 800d1f2:	bf00      	nop
 800d1f4:	e7fe      	b.n	800d1f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d1f6:	f7ff fd77 	bl	800cce8 <vPortValidateInterruptPriority>
	__asm volatile
 800d1fa:	f3ef 8211 	mrs	r2, BASEPRI
 800d1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d202:	f383 8811 	msr	BASEPRI, r3
 800d206:	f3bf 8f6f 	isb	sy
 800d20a:	f3bf 8f4f 	dsb	sy
 800d20e:	61fa      	str	r2, [r7, #28]
 800d210:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d212:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d214:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d21e:	429a      	cmp	r2, r3
 800d220:	d302      	bcc.n	800d228 <xQueueGenericSendFromISR+0xbc>
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	2b02      	cmp	r3, #2
 800d226:	d12f      	bne.n	800d288 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d22a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d22e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d236:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d238:	683a      	ldr	r2, [r7, #0]
 800d23a:	68b9      	ldr	r1, [r7, #8]
 800d23c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d23e:	f000 f911 	bl	800d464 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d242:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d24a:	d112      	bne.n	800d272 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d250:	2b00      	cmp	r3, #0
 800d252:	d016      	beq.n	800d282 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d256:	3324      	adds	r3, #36	; 0x24
 800d258:	4618      	mov	r0, r3
 800d25a:	f000 fef7 	bl	800e04c <xTaskRemoveFromEventList>
 800d25e:	4603      	mov	r3, r0
 800d260:	2b00      	cmp	r3, #0
 800d262:	d00e      	beq.n	800d282 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d00b      	beq.n	800d282 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2201      	movs	r2, #1
 800d26e:	601a      	str	r2, [r3, #0]
 800d270:	e007      	b.n	800d282 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d272:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d276:	3301      	adds	r3, #1
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	b25a      	sxtb	r2, r3
 800d27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d282:	2301      	movs	r3, #1
 800d284:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d286:	e001      	b.n	800d28c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d288:	2300      	movs	r3, #0
 800d28a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d28e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	f383 8811 	msr	BASEPRI, r3
}
 800d296:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3740      	adds	r7, #64	; 0x40
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
	...

0800d2a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b08c      	sub	sp, #48	; 0x30
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	60b9      	str	r1, [r7, #8]
 800d2ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d10a      	bne.n	800d2d4 <xQueueReceive+0x30>
	__asm volatile
 800d2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c2:	f383 8811 	msr	BASEPRI, r3
 800d2c6:	f3bf 8f6f 	isb	sy
 800d2ca:	f3bf 8f4f 	dsb	sy
 800d2ce:	623b      	str	r3, [r7, #32]
}
 800d2d0:	bf00      	nop
 800d2d2:	e7fe      	b.n	800d2d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d103      	bne.n	800d2e2 <xQueueReceive+0x3e>
 800d2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d101      	bne.n	800d2e6 <xQueueReceive+0x42>
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e000      	b.n	800d2e8 <xQueueReceive+0x44>
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d10a      	bne.n	800d302 <xQueueReceive+0x5e>
	__asm volatile
 800d2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f0:	f383 8811 	msr	BASEPRI, r3
 800d2f4:	f3bf 8f6f 	isb	sy
 800d2f8:	f3bf 8f4f 	dsb	sy
 800d2fc:	61fb      	str	r3, [r7, #28]
}
 800d2fe:	bf00      	nop
 800d300:	e7fe      	b.n	800d300 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d302:	f001 f865 	bl	800e3d0 <xTaskGetSchedulerState>
 800d306:	4603      	mov	r3, r0
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d102      	bne.n	800d312 <xQueueReceive+0x6e>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d101      	bne.n	800d316 <xQueueReceive+0x72>
 800d312:	2301      	movs	r3, #1
 800d314:	e000      	b.n	800d318 <xQueueReceive+0x74>
 800d316:	2300      	movs	r3, #0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d10a      	bne.n	800d332 <xQueueReceive+0x8e>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d320:	f383 8811 	msr	BASEPRI, r3
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	61bb      	str	r3, [r7, #24]
}
 800d32e:	bf00      	nop
 800d330:	e7fe      	b.n	800d330 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d332:	f7ff fbf7 	bl	800cb24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d33a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d01f      	beq.n	800d382 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d342:	68b9      	ldr	r1, [r7, #8]
 800d344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d346:	f000 f8f7 	bl	800d538 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34c:	1e5a      	subs	r2, r3, #1
 800d34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d350:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d354:	691b      	ldr	r3, [r3, #16]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d00f      	beq.n	800d37a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35c:	3310      	adds	r3, #16
 800d35e:	4618      	mov	r0, r3
 800d360:	f000 fe74 	bl	800e04c <xTaskRemoveFromEventList>
 800d364:	4603      	mov	r3, r0
 800d366:	2b00      	cmp	r3, #0
 800d368:	d007      	beq.n	800d37a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d36a:	4b3d      	ldr	r3, [pc, #244]	; (800d460 <xQueueReceive+0x1bc>)
 800d36c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d370:	601a      	str	r2, [r3, #0]
 800d372:	f3bf 8f4f 	dsb	sy
 800d376:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d37a:	f7ff fc03 	bl	800cb84 <vPortExitCritical>
				return pdPASS;
 800d37e:	2301      	movs	r3, #1
 800d380:	e069      	b.n	800d456 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d103      	bne.n	800d390 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d388:	f7ff fbfc 	bl	800cb84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d38c:	2300      	movs	r3, #0
 800d38e:	e062      	b.n	800d456 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d392:	2b00      	cmp	r3, #0
 800d394:	d106      	bne.n	800d3a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d396:	f107 0310 	add.w	r3, r7, #16
 800d39a:	4618      	mov	r0, r3
 800d39c:	f000 feba 	bl	800e114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3a4:	f7ff fbee 	bl	800cb84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3a8:	f000 fc26 	bl	800dbf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3ac:	f7ff fbba 	bl	800cb24 <vPortEnterCritical>
 800d3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3b6:	b25b      	sxtb	r3, r3
 800d3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3bc:	d103      	bne.n	800d3c6 <xQueueReceive+0x122>
 800d3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3cc:	b25b      	sxtb	r3, r3
 800d3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d2:	d103      	bne.n	800d3dc <xQueueReceive+0x138>
 800d3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3dc:	f7ff fbd2 	bl	800cb84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3e0:	1d3a      	adds	r2, r7, #4
 800d3e2:	f107 0310 	add.w	r3, r7, #16
 800d3e6:	4611      	mov	r1, r2
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f000 fea9 	bl	800e140 <xTaskCheckForTimeOut>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d123      	bne.n	800d43c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3f6:	f000 f917 	bl	800d628 <prvIsQueueEmpty>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d017      	beq.n	800d430 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d402:	3324      	adds	r3, #36	; 0x24
 800d404:	687a      	ldr	r2, [r7, #4]
 800d406:	4611      	mov	r1, r2
 800d408:	4618      	mov	r0, r3
 800d40a:	f000 fdcf 	bl	800dfac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d40e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d410:	f000 f8b8 	bl	800d584 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d414:	f000 fbfe 	bl	800dc14 <xTaskResumeAll>
 800d418:	4603      	mov	r3, r0
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d189      	bne.n	800d332 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d41e:	4b10      	ldr	r3, [pc, #64]	; (800d460 <xQueueReceive+0x1bc>)
 800d420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d424:	601a      	str	r2, [r3, #0]
 800d426:	f3bf 8f4f 	dsb	sy
 800d42a:	f3bf 8f6f 	isb	sy
 800d42e:	e780      	b.n	800d332 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d432:	f000 f8a7 	bl	800d584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d436:	f000 fbed 	bl	800dc14 <xTaskResumeAll>
 800d43a:	e77a      	b.n	800d332 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d43c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d43e:	f000 f8a1 	bl	800d584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d442:	f000 fbe7 	bl	800dc14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d448:	f000 f8ee 	bl	800d628 <prvIsQueueEmpty>
 800d44c:	4603      	mov	r3, r0
 800d44e:	2b00      	cmp	r3, #0
 800d450:	f43f af6f 	beq.w	800d332 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d454:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d456:	4618      	mov	r0, r3
 800d458:	3730      	adds	r7, #48	; 0x30
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	e000ed04 	.word	0xe000ed04

0800d464 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b086      	sub	sp, #24
 800d468:	af00      	add	r7, sp, #0
 800d46a:	60f8      	str	r0, [r7, #12]
 800d46c:	60b9      	str	r1, [r7, #8]
 800d46e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d470:	2300      	movs	r3, #0
 800d472:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d478:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d10d      	bne.n	800d49e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d14d      	bne.n	800d526 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	689b      	ldr	r3, [r3, #8]
 800d48e:	4618      	mov	r0, r3
 800d490:	f000 ffbc 	bl	800e40c <xTaskPriorityDisinherit>
 800d494:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2200      	movs	r2, #0
 800d49a:	609a      	str	r2, [r3, #8]
 800d49c:	e043      	b.n	800d526 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d119      	bne.n	800d4d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	6858      	ldr	r0, [r3, #4]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	68b9      	ldr	r1, [r7, #8]
 800d4b0:	f001 fbe0 	bl	800ec74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	685a      	ldr	r2, [r3, #4]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4bc:	441a      	add	r2, r3
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	685a      	ldr	r2, [r3, #4]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	689b      	ldr	r3, [r3, #8]
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d32b      	bcc.n	800d526 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	605a      	str	r2, [r3, #4]
 800d4d6:	e026      	b.n	800d526 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	68d8      	ldr	r0, [r3, #12]
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	68b9      	ldr	r1, [r7, #8]
 800d4e4:	f001 fbc6 	bl	800ec74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	68da      	ldr	r2, [r3, #12]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4f0:	425b      	negs	r3, r3
 800d4f2:	441a      	add	r2, r3
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	68da      	ldr	r2, [r3, #12]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	429a      	cmp	r2, r3
 800d502:	d207      	bcs.n	800d514 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	689a      	ldr	r2, [r3, #8]
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d50c:	425b      	negs	r3, r3
 800d50e:	441a      	add	r2, r3
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2b02      	cmp	r3, #2
 800d518:	d105      	bne.n	800d526 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d002      	beq.n	800d526 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	3b01      	subs	r3, #1
 800d524:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	1c5a      	adds	r2, r3, #1
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d52e:	697b      	ldr	r3, [r7, #20]
}
 800d530:	4618      	mov	r0, r3
 800d532:	3718      	adds	r7, #24
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d546:	2b00      	cmp	r3, #0
 800d548:	d018      	beq.n	800d57c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	68da      	ldr	r2, [r3, #12]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d552:	441a      	add	r2, r3
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	68da      	ldr	r2, [r3, #12]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	429a      	cmp	r2, r3
 800d562:	d303      	bcc.n	800d56c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681a      	ldr	r2, [r3, #0]
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	68d9      	ldr	r1, [r3, #12]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d574:	461a      	mov	r2, r3
 800d576:	6838      	ldr	r0, [r7, #0]
 800d578:	f001 fb7c 	bl	800ec74 <memcpy>
	}
}
 800d57c:	bf00      	nop
 800d57e:	3708      	adds	r7, #8
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d58c:	f7ff faca 	bl	800cb24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d596:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d598:	e011      	b.n	800d5be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d012      	beq.n	800d5c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	3324      	adds	r3, #36	; 0x24
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f000 fd50 	bl	800e04c <xTaskRemoveFromEventList>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d001      	beq.n	800d5b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d5b2:	f000 fe27 	bl	800e204 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d5b6:	7bfb      	ldrb	r3, [r7, #15]
 800d5b8:	3b01      	subs	r3, #1
 800d5ba:	b2db      	uxtb	r3, r3
 800d5bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d5be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	dce9      	bgt.n	800d59a <prvUnlockQueue+0x16>
 800d5c6:	e000      	b.n	800d5ca <prvUnlockQueue+0x46>
					break;
 800d5c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	22ff      	movs	r2, #255	; 0xff
 800d5ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d5d2:	f7ff fad7 	bl	800cb84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d5d6:	f7ff faa5 	bl	800cb24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d5e2:	e011      	b.n	800d608 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	691b      	ldr	r3, [r3, #16]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d012      	beq.n	800d612 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	3310      	adds	r3, #16
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f000 fd2b 	bl	800e04c <xTaskRemoveFromEventList>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d001      	beq.n	800d600 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d5fc:	f000 fe02 	bl	800e204 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d600:	7bbb      	ldrb	r3, [r7, #14]
 800d602:	3b01      	subs	r3, #1
 800d604:	b2db      	uxtb	r3, r3
 800d606:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	dce9      	bgt.n	800d5e4 <prvUnlockQueue+0x60>
 800d610:	e000      	b.n	800d614 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d612:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	22ff      	movs	r2, #255	; 0xff
 800d618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d61c:	f7ff fab2 	bl	800cb84 <vPortExitCritical>
}
 800d620:	bf00      	nop
 800d622:	3710      	adds	r7, #16
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}

0800d628 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b084      	sub	sp, #16
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d630:	f7ff fa78 	bl	800cb24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d102      	bne.n	800d642 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d63c:	2301      	movs	r3, #1
 800d63e:	60fb      	str	r3, [r7, #12]
 800d640:	e001      	b.n	800d646 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d642:	2300      	movs	r3, #0
 800d644:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d646:	f7ff fa9d 	bl	800cb84 <vPortExitCritical>

	return xReturn;
 800d64a:	68fb      	ldr	r3, [r7, #12]
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3710      	adds	r7, #16
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d65c:	f7ff fa62 	bl	800cb24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d668:	429a      	cmp	r2, r3
 800d66a:	d102      	bne.n	800d672 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d66c:	2301      	movs	r3, #1
 800d66e:	60fb      	str	r3, [r7, #12]
 800d670:	e001      	b.n	800d676 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d672:	2300      	movs	r3, #0
 800d674:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d676:	f7ff fa85 	bl	800cb84 <vPortExitCritical>

	return xReturn;
 800d67a:	68fb      	ldr	r3, [r7, #12]
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3710      	adds	r7, #16
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d684:	b480      	push	{r7}
 800d686:	b085      	sub	sp, #20
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d68e:	2300      	movs	r3, #0
 800d690:	60fb      	str	r3, [r7, #12]
 800d692:	e014      	b.n	800d6be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d694:	4a0f      	ldr	r2, [pc, #60]	; (800d6d4 <vQueueAddToRegistry+0x50>)
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d10b      	bne.n	800d6b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d6a0:	490c      	ldr	r1, [pc, #48]	; (800d6d4 <vQueueAddToRegistry+0x50>)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	683a      	ldr	r2, [r7, #0]
 800d6a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d6aa:	4a0a      	ldr	r2, [pc, #40]	; (800d6d4 <vQueueAddToRegistry+0x50>)
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	00db      	lsls	r3, r3, #3
 800d6b0:	4413      	add	r3, r2
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d6b6:	e006      	b.n	800d6c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	60fb      	str	r3, [r7, #12]
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2b07      	cmp	r3, #7
 800d6c2:	d9e7      	bls.n	800d694 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d6c4:	bf00      	nop
 800d6c6:	bf00      	nop
 800d6c8:	3714      	adds	r7, #20
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d0:	4770      	bx	lr
 800d6d2:	bf00      	nop
 800d6d4:	20004cd8 	.word	0x20004cd8

0800d6d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b086      	sub	sp, #24
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	60f8      	str	r0, [r7, #12]
 800d6e0:	60b9      	str	r1, [r7, #8]
 800d6e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d6e8:	f7ff fa1c 	bl	800cb24 <vPortEnterCritical>
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6f2:	b25b      	sxtb	r3, r3
 800d6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6f8:	d103      	bne.n	800d702 <vQueueWaitForMessageRestricted+0x2a>
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d708:	b25b      	sxtb	r3, r3
 800d70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d70e:	d103      	bne.n	800d718 <vQueueWaitForMessageRestricted+0x40>
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	2200      	movs	r2, #0
 800d714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d718:	f7ff fa34 	bl	800cb84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d720:	2b00      	cmp	r3, #0
 800d722:	d106      	bne.n	800d732 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	3324      	adds	r3, #36	; 0x24
 800d728:	687a      	ldr	r2, [r7, #4]
 800d72a:	68b9      	ldr	r1, [r7, #8]
 800d72c:	4618      	mov	r0, r3
 800d72e:	f000 fc61 	bl	800dff4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d732:	6978      	ldr	r0, [r7, #20]
 800d734:	f7ff ff26 	bl	800d584 <prvUnlockQueue>
	}
 800d738:	bf00      	nop
 800d73a:	3718      	adds	r7, #24
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d740:	b580      	push	{r7, lr}
 800d742:	b08e      	sub	sp, #56	; 0x38
 800d744:	af04      	add	r7, sp, #16
 800d746:	60f8      	str	r0, [r7, #12]
 800d748:	60b9      	str	r1, [r7, #8]
 800d74a:	607a      	str	r2, [r7, #4]
 800d74c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d750:	2b00      	cmp	r3, #0
 800d752:	d10a      	bne.n	800d76a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d758:	f383 8811 	msr	BASEPRI, r3
 800d75c:	f3bf 8f6f 	isb	sy
 800d760:	f3bf 8f4f 	dsb	sy
 800d764:	623b      	str	r3, [r7, #32]
}
 800d766:	bf00      	nop
 800d768:	e7fe      	b.n	800d768 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d10a      	bne.n	800d786 <xTaskCreateStatic+0x46>
	__asm volatile
 800d770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d774:	f383 8811 	msr	BASEPRI, r3
 800d778:	f3bf 8f6f 	isb	sy
 800d77c:	f3bf 8f4f 	dsb	sy
 800d780:	61fb      	str	r3, [r7, #28]
}
 800d782:	bf00      	nop
 800d784:	e7fe      	b.n	800d784 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d786:	23bc      	movs	r3, #188	; 0xbc
 800d788:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	2bbc      	cmp	r3, #188	; 0xbc
 800d78e:	d00a      	beq.n	800d7a6 <xTaskCreateStatic+0x66>
	__asm volatile
 800d790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d794:	f383 8811 	msr	BASEPRI, r3
 800d798:	f3bf 8f6f 	isb	sy
 800d79c:	f3bf 8f4f 	dsb	sy
 800d7a0:	61bb      	str	r3, [r7, #24]
}
 800d7a2:	bf00      	nop
 800d7a4:	e7fe      	b.n	800d7a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d7a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d01e      	beq.n	800d7ec <xTaskCreateStatic+0xac>
 800d7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d01b      	beq.n	800d7ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d7bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c0:	2202      	movs	r2, #2
 800d7c2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	9303      	str	r3, [sp, #12]
 800d7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7cc:	9302      	str	r3, [sp, #8]
 800d7ce:	f107 0314 	add.w	r3, r7, #20
 800d7d2:	9301      	str	r3, [sp, #4]
 800d7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d6:	9300      	str	r3, [sp, #0]
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	68b9      	ldr	r1, [r7, #8]
 800d7de:	68f8      	ldr	r0, [r7, #12]
 800d7e0:	f000 f850 	bl	800d884 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d7e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7e6:	f000 f8f3 	bl	800d9d0 <prvAddNewTaskToReadyList>
 800d7ea:	e001      	b.n	800d7f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d7f0:	697b      	ldr	r3, [r7, #20]
	}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3728      	adds	r7, #40	; 0x28
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}

0800d7fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d7fa:	b580      	push	{r7, lr}
 800d7fc:	b08c      	sub	sp, #48	; 0x30
 800d7fe:	af04      	add	r7, sp, #16
 800d800:	60f8      	str	r0, [r7, #12]
 800d802:	60b9      	str	r1, [r7, #8]
 800d804:	603b      	str	r3, [r7, #0]
 800d806:	4613      	mov	r3, r2
 800d808:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d80a:	88fb      	ldrh	r3, [r7, #6]
 800d80c:	009b      	lsls	r3, r3, #2
 800d80e:	4618      	mov	r0, r3
 800d810:	f7fe fdbe 	bl	800c390 <pvPortMalloc>
 800d814:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d00e      	beq.n	800d83a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d81c:	20bc      	movs	r0, #188	; 0xbc
 800d81e:	f7fe fdb7 	bl	800c390 <pvPortMalloc>
 800d822:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d003      	beq.n	800d832 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d82a:	69fb      	ldr	r3, [r7, #28]
 800d82c:	697a      	ldr	r2, [r7, #20]
 800d82e:	631a      	str	r2, [r3, #48]	; 0x30
 800d830:	e005      	b.n	800d83e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d832:	6978      	ldr	r0, [r7, #20]
 800d834:	f7fe fe78 	bl	800c528 <vPortFree>
 800d838:	e001      	b.n	800d83e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d83a:	2300      	movs	r3, #0
 800d83c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d017      	beq.n	800d874 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	2200      	movs	r2, #0
 800d848:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d84c:	88fa      	ldrh	r2, [r7, #6]
 800d84e:	2300      	movs	r3, #0
 800d850:	9303      	str	r3, [sp, #12]
 800d852:	69fb      	ldr	r3, [r7, #28]
 800d854:	9302      	str	r3, [sp, #8]
 800d856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d858:	9301      	str	r3, [sp, #4]
 800d85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85c:	9300      	str	r3, [sp, #0]
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	68b9      	ldr	r1, [r7, #8]
 800d862:	68f8      	ldr	r0, [r7, #12]
 800d864:	f000 f80e 	bl	800d884 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d868:	69f8      	ldr	r0, [r7, #28]
 800d86a:	f000 f8b1 	bl	800d9d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d86e:	2301      	movs	r3, #1
 800d870:	61bb      	str	r3, [r7, #24]
 800d872:	e002      	b.n	800d87a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d874:	f04f 33ff 	mov.w	r3, #4294967295
 800d878:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d87a:	69bb      	ldr	r3, [r7, #24]
	}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3720      	adds	r7, #32
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b088      	sub	sp, #32
 800d888:	af00      	add	r7, sp, #0
 800d88a:	60f8      	str	r0, [r7, #12]
 800d88c:	60b9      	str	r1, [r7, #8]
 800d88e:	607a      	str	r2, [r7, #4]
 800d890:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d894:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	009b      	lsls	r3, r3, #2
 800d89a:	461a      	mov	r2, r3
 800d89c:	21a5      	movs	r1, #165	; 0xa5
 800d89e:	f001 f9f7 	bl	800ec90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d8ac:	3b01      	subs	r3, #1
 800d8ae:	009b      	lsls	r3, r3, #2
 800d8b0:	4413      	add	r3, r2
 800d8b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	f023 0307 	bic.w	r3, r3, #7
 800d8ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d8bc:	69bb      	ldr	r3, [r7, #24]
 800d8be:	f003 0307 	and.w	r3, r3, #7
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d00a      	beq.n	800d8dc <prvInitialiseNewTask+0x58>
	__asm volatile
 800d8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ca:	f383 8811 	msr	BASEPRI, r3
 800d8ce:	f3bf 8f6f 	isb	sy
 800d8d2:	f3bf 8f4f 	dsb	sy
 800d8d6:	617b      	str	r3, [r7, #20]
}
 800d8d8:	bf00      	nop
 800d8da:	e7fe      	b.n	800d8da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d01f      	beq.n	800d922 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	61fb      	str	r3, [r7, #28]
 800d8e6:	e012      	b.n	800d90e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d8e8:	68ba      	ldr	r2, [r7, #8]
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	4413      	add	r3, r2
 800d8ee:	7819      	ldrb	r1, [r3, #0]
 800d8f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8f2:	69fb      	ldr	r3, [r7, #28]
 800d8f4:	4413      	add	r3, r2
 800d8f6:	3334      	adds	r3, #52	; 0x34
 800d8f8:	460a      	mov	r2, r1
 800d8fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d8fc:	68ba      	ldr	r2, [r7, #8]
 800d8fe:	69fb      	ldr	r3, [r7, #28]
 800d900:	4413      	add	r3, r2
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d006      	beq.n	800d916 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	3301      	adds	r3, #1
 800d90c:	61fb      	str	r3, [r7, #28]
 800d90e:	69fb      	ldr	r3, [r7, #28]
 800d910:	2b0f      	cmp	r3, #15
 800d912:	d9e9      	bls.n	800d8e8 <prvInitialiseNewTask+0x64>
 800d914:	e000      	b.n	800d918 <prvInitialiseNewTask+0x94>
			{
				break;
 800d916:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91a:	2200      	movs	r2, #0
 800d91c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d920:	e003      	b.n	800d92a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d924:	2200      	movs	r2, #0
 800d926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92c:	2b37      	cmp	r3, #55	; 0x37
 800d92e:	d901      	bls.n	800d934 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d930:	2337      	movs	r3, #55	; 0x37
 800d932:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d938:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d93e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d942:	2200      	movs	r2, #0
 800d944:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d948:	3304      	adds	r3, #4
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7fe ff2a 	bl	800c7a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d952:	3318      	adds	r3, #24
 800d954:	4618      	mov	r0, r3
 800d956:	f7fe ff25 	bl	800c7a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d95e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d962:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d968:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d96e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d972:	2200      	movs	r2, #0
 800d974:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97a:	2200      	movs	r2, #0
 800d97c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d982:	3354      	adds	r3, #84	; 0x54
 800d984:	2260      	movs	r2, #96	; 0x60
 800d986:	2100      	movs	r1, #0
 800d988:	4618      	mov	r0, r3
 800d98a:	f001 f981 	bl	800ec90 <memset>
 800d98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d990:	4a0c      	ldr	r2, [pc, #48]	; (800d9c4 <prvInitialiseNewTask+0x140>)
 800d992:	659a      	str	r2, [r3, #88]	; 0x58
 800d994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d996:	4a0c      	ldr	r2, [pc, #48]	; (800d9c8 <prvInitialiseNewTask+0x144>)
 800d998:	65da      	str	r2, [r3, #92]	; 0x5c
 800d99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d99c:	4a0b      	ldr	r2, [pc, #44]	; (800d9cc <prvInitialiseNewTask+0x148>)
 800d99e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d9a0:	683a      	ldr	r2, [r7, #0]
 800d9a2:	68f9      	ldr	r1, [r7, #12]
 800d9a4:	69b8      	ldr	r0, [r7, #24]
 800d9a6:	f7fe ff91 	bl	800c8cc <pxPortInitialiseStack>
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d002      	beq.n	800d9bc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9bc:	bf00      	nop
 800d9be:	3720      	adds	r7, #32
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	0800f5d4 	.word	0x0800f5d4
 800d9c8:	0800f5f4 	.word	0x0800f5f4
 800d9cc:	0800f5b4 	.word	0x0800f5b4

0800d9d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d9d8:	f7ff f8a4 	bl	800cb24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d9dc:	4b2d      	ldr	r3, [pc, #180]	; (800da94 <prvAddNewTaskToReadyList+0xc4>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	4a2c      	ldr	r2, [pc, #176]	; (800da94 <prvAddNewTaskToReadyList+0xc4>)
 800d9e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d9e6:	4b2c      	ldr	r3, [pc, #176]	; (800da98 <prvAddNewTaskToReadyList+0xc8>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d109      	bne.n	800da02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d9ee:	4a2a      	ldr	r2, [pc, #168]	; (800da98 <prvAddNewTaskToReadyList+0xc8>)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d9f4:	4b27      	ldr	r3, [pc, #156]	; (800da94 <prvAddNewTaskToReadyList+0xc4>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	d110      	bne.n	800da1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d9fc:	f000 fc26 	bl	800e24c <prvInitialiseTaskLists>
 800da00:	e00d      	b.n	800da1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800da02:	4b26      	ldr	r3, [pc, #152]	; (800da9c <prvAddNewTaskToReadyList+0xcc>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d109      	bne.n	800da1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800da0a:	4b23      	ldr	r3, [pc, #140]	; (800da98 <prvAddNewTaskToReadyList+0xc8>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da14:	429a      	cmp	r2, r3
 800da16:	d802      	bhi.n	800da1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800da18:	4a1f      	ldr	r2, [pc, #124]	; (800da98 <prvAddNewTaskToReadyList+0xc8>)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800da1e:	4b20      	ldr	r3, [pc, #128]	; (800daa0 <prvAddNewTaskToReadyList+0xd0>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	3301      	adds	r3, #1
 800da24:	4a1e      	ldr	r2, [pc, #120]	; (800daa0 <prvAddNewTaskToReadyList+0xd0>)
 800da26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800da28:	4b1d      	ldr	r3, [pc, #116]	; (800daa0 <prvAddNewTaskToReadyList+0xd0>)
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da34:	4b1b      	ldr	r3, [pc, #108]	; (800daa4 <prvAddNewTaskToReadyList+0xd4>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	429a      	cmp	r2, r3
 800da3a:	d903      	bls.n	800da44 <prvAddNewTaskToReadyList+0x74>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da40:	4a18      	ldr	r2, [pc, #96]	; (800daa4 <prvAddNewTaskToReadyList+0xd4>)
 800da42:	6013      	str	r3, [r2, #0]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da48:	4613      	mov	r3, r2
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	4413      	add	r3, r2
 800da4e:	009b      	lsls	r3, r3, #2
 800da50:	4a15      	ldr	r2, [pc, #84]	; (800daa8 <prvAddNewTaskToReadyList+0xd8>)
 800da52:	441a      	add	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	3304      	adds	r3, #4
 800da58:	4619      	mov	r1, r3
 800da5a:	4610      	mov	r0, r2
 800da5c:	f7fe feaf 	bl	800c7be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800da60:	f7ff f890 	bl	800cb84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800da64:	4b0d      	ldr	r3, [pc, #52]	; (800da9c <prvAddNewTaskToReadyList+0xcc>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d00e      	beq.n	800da8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800da6c:	4b0a      	ldr	r3, [pc, #40]	; (800da98 <prvAddNewTaskToReadyList+0xc8>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da76:	429a      	cmp	r2, r3
 800da78:	d207      	bcs.n	800da8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800da7a:	4b0c      	ldr	r3, [pc, #48]	; (800daac <prvAddNewTaskToReadyList+0xdc>)
 800da7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da80:	601a      	str	r2, [r3, #0]
 800da82:	f3bf 8f4f 	dsb	sy
 800da86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da8a:	bf00      	nop
 800da8c:	3708      	adds	r7, #8
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
 800da92:	bf00      	nop
 800da94:	200051ec 	.word	0x200051ec
 800da98:	20004d18 	.word	0x20004d18
 800da9c:	200051f8 	.word	0x200051f8
 800daa0:	20005208 	.word	0x20005208
 800daa4:	200051f4 	.word	0x200051f4
 800daa8:	20004d1c 	.word	0x20004d1c
 800daac:	e000ed04 	.word	0xe000ed04

0800dab0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b084      	sub	sp, #16
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dab8:	2300      	movs	r3, #0
 800daba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d017      	beq.n	800daf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dac2:	4b13      	ldr	r3, [pc, #76]	; (800db10 <vTaskDelay+0x60>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d00a      	beq.n	800dae0 <vTaskDelay+0x30>
	__asm volatile
 800daca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dace:	f383 8811 	msr	BASEPRI, r3
 800dad2:	f3bf 8f6f 	isb	sy
 800dad6:	f3bf 8f4f 	dsb	sy
 800dada:	60bb      	str	r3, [r7, #8]
}
 800dadc:	bf00      	nop
 800dade:	e7fe      	b.n	800dade <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dae0:	f000 f88a 	bl	800dbf8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dae4:	2100      	movs	r1, #0
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f000 fcfe 	bl	800e4e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800daec:	f000 f892 	bl	800dc14 <xTaskResumeAll>
 800daf0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d107      	bne.n	800db08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800daf8:	4b06      	ldr	r3, [pc, #24]	; (800db14 <vTaskDelay+0x64>)
 800dafa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dafe:	601a      	str	r2, [r3, #0]
 800db00:	f3bf 8f4f 	dsb	sy
 800db04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db08:	bf00      	nop
 800db0a:	3710      	adds	r7, #16
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	20005214 	.word	0x20005214
 800db14:	e000ed04 	.word	0xe000ed04

0800db18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b08a      	sub	sp, #40	; 0x28
 800db1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800db1e:	2300      	movs	r3, #0
 800db20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800db22:	2300      	movs	r3, #0
 800db24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800db26:	463a      	mov	r2, r7
 800db28:	1d39      	adds	r1, r7, #4
 800db2a:	f107 0308 	add.w	r3, r7, #8
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fe fbfa 	bl	800c328 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800db34:	6839      	ldr	r1, [r7, #0]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	68ba      	ldr	r2, [r7, #8]
 800db3a:	9202      	str	r2, [sp, #8]
 800db3c:	9301      	str	r3, [sp, #4]
 800db3e:	2300      	movs	r3, #0
 800db40:	9300      	str	r3, [sp, #0]
 800db42:	2300      	movs	r3, #0
 800db44:	460a      	mov	r2, r1
 800db46:	4924      	ldr	r1, [pc, #144]	; (800dbd8 <vTaskStartScheduler+0xc0>)
 800db48:	4824      	ldr	r0, [pc, #144]	; (800dbdc <vTaskStartScheduler+0xc4>)
 800db4a:	f7ff fdf9 	bl	800d740 <xTaskCreateStatic>
 800db4e:	4603      	mov	r3, r0
 800db50:	4a23      	ldr	r2, [pc, #140]	; (800dbe0 <vTaskStartScheduler+0xc8>)
 800db52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800db54:	4b22      	ldr	r3, [pc, #136]	; (800dbe0 <vTaskStartScheduler+0xc8>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d002      	beq.n	800db62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800db5c:	2301      	movs	r3, #1
 800db5e:	617b      	str	r3, [r7, #20]
 800db60:	e001      	b.n	800db66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800db62:	2300      	movs	r3, #0
 800db64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d102      	bne.n	800db72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800db6c:	f000 fd10 	bl	800e590 <xTimerCreateTimerTask>
 800db70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	2b01      	cmp	r3, #1
 800db76:	d11b      	bne.n	800dbb0 <vTaskStartScheduler+0x98>
	__asm volatile
 800db78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7c:	f383 8811 	msr	BASEPRI, r3
 800db80:	f3bf 8f6f 	isb	sy
 800db84:	f3bf 8f4f 	dsb	sy
 800db88:	613b      	str	r3, [r7, #16]
}
 800db8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800db8c:	4b15      	ldr	r3, [pc, #84]	; (800dbe4 <vTaskStartScheduler+0xcc>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	3354      	adds	r3, #84	; 0x54
 800db92:	4a15      	ldr	r2, [pc, #84]	; (800dbe8 <vTaskStartScheduler+0xd0>)
 800db94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800db96:	4b15      	ldr	r3, [pc, #84]	; (800dbec <vTaskStartScheduler+0xd4>)
 800db98:	f04f 32ff 	mov.w	r2, #4294967295
 800db9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800db9e:	4b14      	ldr	r3, [pc, #80]	; (800dbf0 <vTaskStartScheduler+0xd8>)
 800dba0:	2201      	movs	r2, #1
 800dba2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dba4:	4b13      	ldr	r3, [pc, #76]	; (800dbf4 <vTaskStartScheduler+0xdc>)
 800dba6:	2200      	movs	r2, #0
 800dba8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dbaa:	f7fe ff19 	bl	800c9e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dbae:	e00e      	b.n	800dbce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbb6:	d10a      	bne.n	800dbce <vTaskStartScheduler+0xb6>
	__asm volatile
 800dbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbbc:	f383 8811 	msr	BASEPRI, r3
 800dbc0:	f3bf 8f6f 	isb	sy
 800dbc4:	f3bf 8f4f 	dsb	sy
 800dbc8:	60fb      	str	r3, [r7, #12]
}
 800dbca:	bf00      	nop
 800dbcc:	e7fe      	b.n	800dbcc <vTaskStartScheduler+0xb4>
}
 800dbce:	bf00      	nop
 800dbd0:	3718      	adds	r7, #24
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	0800f534 	.word	0x0800f534
 800dbdc:	0800e21d 	.word	0x0800e21d
 800dbe0:	20005210 	.word	0x20005210
 800dbe4:	20004d18 	.word	0x20004d18
 800dbe8:	20000014 	.word	0x20000014
 800dbec:	2000520c 	.word	0x2000520c
 800dbf0:	200051f8 	.word	0x200051f8
 800dbf4:	200051f0 	.word	0x200051f0

0800dbf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dbfc:	4b04      	ldr	r3, [pc, #16]	; (800dc10 <vTaskSuspendAll+0x18>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	3301      	adds	r3, #1
 800dc02:	4a03      	ldr	r2, [pc, #12]	; (800dc10 <vTaskSuspendAll+0x18>)
 800dc04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dc06:	bf00      	nop
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr
 800dc10:	20005214 	.word	0x20005214

0800dc14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dc22:	4b42      	ldr	r3, [pc, #264]	; (800dd2c <xTaskResumeAll+0x118>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d10a      	bne.n	800dc40 <xTaskResumeAll+0x2c>
	__asm volatile
 800dc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2e:	f383 8811 	msr	BASEPRI, r3
 800dc32:	f3bf 8f6f 	isb	sy
 800dc36:	f3bf 8f4f 	dsb	sy
 800dc3a:	603b      	str	r3, [r7, #0]
}
 800dc3c:	bf00      	nop
 800dc3e:	e7fe      	b.n	800dc3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dc40:	f7fe ff70 	bl	800cb24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dc44:	4b39      	ldr	r3, [pc, #228]	; (800dd2c <xTaskResumeAll+0x118>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	4a38      	ldr	r2, [pc, #224]	; (800dd2c <xTaskResumeAll+0x118>)
 800dc4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc4e:	4b37      	ldr	r3, [pc, #220]	; (800dd2c <xTaskResumeAll+0x118>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d162      	bne.n	800dd1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dc56:	4b36      	ldr	r3, [pc, #216]	; (800dd30 <xTaskResumeAll+0x11c>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d05e      	beq.n	800dd1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc5e:	e02f      	b.n	800dcc0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc60:	4b34      	ldr	r3, [pc, #208]	; (800dd34 <xTaskResumeAll+0x120>)
 800dc62:	68db      	ldr	r3, [r3, #12]
 800dc64:	68db      	ldr	r3, [r3, #12]
 800dc66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	3318      	adds	r3, #24
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7fe fe03 	bl	800c878 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	3304      	adds	r3, #4
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7fe fdfe 	bl	800c878 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc80:	4b2d      	ldr	r3, [pc, #180]	; (800dd38 <xTaskResumeAll+0x124>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d903      	bls.n	800dc90 <xTaskResumeAll+0x7c>
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc8c:	4a2a      	ldr	r2, [pc, #168]	; (800dd38 <xTaskResumeAll+0x124>)
 800dc8e:	6013      	str	r3, [r2, #0]
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc94:	4613      	mov	r3, r2
 800dc96:	009b      	lsls	r3, r3, #2
 800dc98:	4413      	add	r3, r2
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	4a27      	ldr	r2, [pc, #156]	; (800dd3c <xTaskResumeAll+0x128>)
 800dc9e:	441a      	add	r2, r3
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	3304      	adds	r3, #4
 800dca4:	4619      	mov	r1, r3
 800dca6:	4610      	mov	r0, r2
 800dca8:	f7fe fd89 	bl	800c7be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcb0:	4b23      	ldr	r3, [pc, #140]	; (800dd40 <xTaskResumeAll+0x12c>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d302      	bcc.n	800dcc0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dcba:	4b22      	ldr	r3, [pc, #136]	; (800dd44 <xTaskResumeAll+0x130>)
 800dcbc:	2201      	movs	r2, #1
 800dcbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dcc0:	4b1c      	ldr	r3, [pc, #112]	; (800dd34 <xTaskResumeAll+0x120>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d1cb      	bne.n	800dc60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d001      	beq.n	800dcd2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dcce:	f000 fb5f 	bl	800e390 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dcd2:	4b1d      	ldr	r3, [pc, #116]	; (800dd48 <xTaskResumeAll+0x134>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d010      	beq.n	800dd00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dcde:	f000 f847 	bl	800dd70 <xTaskIncrementTick>
 800dce2:	4603      	mov	r3, r0
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d002      	beq.n	800dcee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dce8:	4b16      	ldr	r3, [pc, #88]	; (800dd44 <xTaskResumeAll+0x130>)
 800dcea:	2201      	movs	r2, #1
 800dcec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	3b01      	subs	r3, #1
 800dcf2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d1f1      	bne.n	800dcde <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dcfa:	4b13      	ldr	r3, [pc, #76]	; (800dd48 <xTaskResumeAll+0x134>)
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dd00:	4b10      	ldr	r3, [pc, #64]	; (800dd44 <xTaskResumeAll+0x130>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d009      	beq.n	800dd1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dd08:	2301      	movs	r3, #1
 800dd0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dd0c:	4b0f      	ldr	r3, [pc, #60]	; (800dd4c <xTaskResumeAll+0x138>)
 800dd0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd12:	601a      	str	r2, [r3, #0]
 800dd14:	f3bf 8f4f 	dsb	sy
 800dd18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dd1c:	f7fe ff32 	bl	800cb84 <vPortExitCritical>

	return xAlreadyYielded;
 800dd20:	68bb      	ldr	r3, [r7, #8]
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3710      	adds	r7, #16
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	20005214 	.word	0x20005214
 800dd30:	200051ec 	.word	0x200051ec
 800dd34:	200051ac 	.word	0x200051ac
 800dd38:	200051f4 	.word	0x200051f4
 800dd3c:	20004d1c 	.word	0x20004d1c
 800dd40:	20004d18 	.word	0x20004d18
 800dd44:	20005200 	.word	0x20005200
 800dd48:	200051fc 	.word	0x200051fc
 800dd4c:	e000ed04 	.word	0xe000ed04

0800dd50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dd50:	b480      	push	{r7}
 800dd52:	b083      	sub	sp, #12
 800dd54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dd56:	4b05      	ldr	r3, [pc, #20]	; (800dd6c <xTaskGetTickCount+0x1c>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dd5c:	687b      	ldr	r3, [r7, #4]
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	370c      	adds	r7, #12
 800dd62:	46bd      	mov	sp, r7
 800dd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd68:	4770      	bx	lr
 800dd6a:	bf00      	nop
 800dd6c:	200051f0 	.word	0x200051f0

0800dd70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b086      	sub	sp, #24
 800dd74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dd76:	2300      	movs	r3, #0
 800dd78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd7a:	4b4f      	ldr	r3, [pc, #316]	; (800deb8 <xTaskIncrementTick+0x148>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	f040 808f 	bne.w	800dea2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dd84:	4b4d      	ldr	r3, [pc, #308]	; (800debc <xTaskIncrementTick+0x14c>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	3301      	adds	r3, #1
 800dd8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dd8c:	4a4b      	ldr	r2, [pc, #300]	; (800debc <xTaskIncrementTick+0x14c>)
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d120      	bne.n	800ddda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dd98:	4b49      	ldr	r3, [pc, #292]	; (800dec0 <xTaskIncrementTick+0x150>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d00a      	beq.n	800ddb8 <xTaskIncrementTick+0x48>
	__asm volatile
 800dda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda6:	f383 8811 	msr	BASEPRI, r3
 800ddaa:	f3bf 8f6f 	isb	sy
 800ddae:	f3bf 8f4f 	dsb	sy
 800ddb2:	603b      	str	r3, [r7, #0]
}
 800ddb4:	bf00      	nop
 800ddb6:	e7fe      	b.n	800ddb6 <xTaskIncrementTick+0x46>
 800ddb8:	4b41      	ldr	r3, [pc, #260]	; (800dec0 <xTaskIncrementTick+0x150>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	60fb      	str	r3, [r7, #12]
 800ddbe:	4b41      	ldr	r3, [pc, #260]	; (800dec4 <xTaskIncrementTick+0x154>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	4a3f      	ldr	r2, [pc, #252]	; (800dec0 <xTaskIncrementTick+0x150>)
 800ddc4:	6013      	str	r3, [r2, #0]
 800ddc6:	4a3f      	ldr	r2, [pc, #252]	; (800dec4 <xTaskIncrementTick+0x154>)
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	6013      	str	r3, [r2, #0]
 800ddcc:	4b3e      	ldr	r3, [pc, #248]	; (800dec8 <xTaskIncrementTick+0x158>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	4a3d      	ldr	r2, [pc, #244]	; (800dec8 <xTaskIncrementTick+0x158>)
 800ddd4:	6013      	str	r3, [r2, #0]
 800ddd6:	f000 fadb 	bl	800e390 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ddda:	4b3c      	ldr	r3, [pc, #240]	; (800decc <xTaskIncrementTick+0x15c>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	693a      	ldr	r2, [r7, #16]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d349      	bcc.n	800de78 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dde4:	4b36      	ldr	r3, [pc, #216]	; (800dec0 <xTaskIncrementTick+0x150>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d104      	bne.n	800ddf8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddee:	4b37      	ldr	r3, [pc, #220]	; (800decc <xTaskIncrementTick+0x15c>)
 800ddf0:	f04f 32ff 	mov.w	r2, #4294967295
 800ddf4:	601a      	str	r2, [r3, #0]
					break;
 800ddf6:	e03f      	b.n	800de78 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddf8:	4b31      	ldr	r3, [pc, #196]	; (800dec0 <xTaskIncrementTick+0x150>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	68db      	ldr	r3, [r3, #12]
 800ddfe:	68db      	ldr	r3, [r3, #12]
 800de00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	685b      	ldr	r3, [r3, #4]
 800de06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800de08:	693a      	ldr	r2, [r7, #16]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d203      	bcs.n	800de18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800de10:	4a2e      	ldr	r2, [pc, #184]	; (800decc <xTaskIncrementTick+0x15c>)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800de16:	e02f      	b.n	800de78 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	3304      	adds	r3, #4
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7fe fd2b 	bl	800c878 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de26:	2b00      	cmp	r3, #0
 800de28:	d004      	beq.n	800de34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	3318      	adds	r3, #24
 800de2e:	4618      	mov	r0, r3
 800de30:	f7fe fd22 	bl	800c878 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de38:	4b25      	ldr	r3, [pc, #148]	; (800ded0 <xTaskIncrementTick+0x160>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d903      	bls.n	800de48 <xTaskIncrementTick+0xd8>
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de44:	4a22      	ldr	r2, [pc, #136]	; (800ded0 <xTaskIncrementTick+0x160>)
 800de46:	6013      	str	r3, [r2, #0]
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de4c:	4613      	mov	r3, r2
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	4413      	add	r3, r2
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	4a1f      	ldr	r2, [pc, #124]	; (800ded4 <xTaskIncrementTick+0x164>)
 800de56:	441a      	add	r2, r3
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	3304      	adds	r3, #4
 800de5c:	4619      	mov	r1, r3
 800de5e:	4610      	mov	r0, r2
 800de60:	f7fe fcad 	bl	800c7be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de68:	4b1b      	ldr	r3, [pc, #108]	; (800ded8 <xTaskIncrementTick+0x168>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de6e:	429a      	cmp	r2, r3
 800de70:	d3b8      	bcc.n	800dde4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800de72:	2301      	movs	r3, #1
 800de74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de76:	e7b5      	b.n	800dde4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800de78:	4b17      	ldr	r3, [pc, #92]	; (800ded8 <xTaskIncrementTick+0x168>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de7e:	4915      	ldr	r1, [pc, #84]	; (800ded4 <xTaskIncrementTick+0x164>)
 800de80:	4613      	mov	r3, r2
 800de82:	009b      	lsls	r3, r3, #2
 800de84:	4413      	add	r3, r2
 800de86:	009b      	lsls	r3, r3, #2
 800de88:	440b      	add	r3, r1
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d901      	bls.n	800de94 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800de90:	2301      	movs	r3, #1
 800de92:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800de94:	4b11      	ldr	r3, [pc, #68]	; (800dedc <xTaskIncrementTick+0x16c>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d007      	beq.n	800deac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800de9c:	2301      	movs	r3, #1
 800de9e:	617b      	str	r3, [r7, #20]
 800dea0:	e004      	b.n	800deac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dea2:	4b0f      	ldr	r3, [pc, #60]	; (800dee0 <xTaskIncrementTick+0x170>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	3301      	adds	r3, #1
 800dea8:	4a0d      	ldr	r2, [pc, #52]	; (800dee0 <xTaskIncrementTick+0x170>)
 800deaa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800deac:	697b      	ldr	r3, [r7, #20]
}
 800deae:	4618      	mov	r0, r3
 800deb0:	3718      	adds	r7, #24
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
 800deb6:	bf00      	nop
 800deb8:	20005214 	.word	0x20005214
 800debc:	200051f0 	.word	0x200051f0
 800dec0:	200051a4 	.word	0x200051a4
 800dec4:	200051a8 	.word	0x200051a8
 800dec8:	20005204 	.word	0x20005204
 800decc:	2000520c 	.word	0x2000520c
 800ded0:	200051f4 	.word	0x200051f4
 800ded4:	20004d1c 	.word	0x20004d1c
 800ded8:	20004d18 	.word	0x20004d18
 800dedc:	20005200 	.word	0x20005200
 800dee0:	200051fc 	.word	0x200051fc

0800dee4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dee4:	b480      	push	{r7}
 800dee6:	b085      	sub	sp, #20
 800dee8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800deea:	4b2a      	ldr	r3, [pc, #168]	; (800df94 <vTaskSwitchContext+0xb0>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d003      	beq.n	800defa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800def2:	4b29      	ldr	r3, [pc, #164]	; (800df98 <vTaskSwitchContext+0xb4>)
 800def4:	2201      	movs	r2, #1
 800def6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800def8:	e046      	b.n	800df88 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800defa:	4b27      	ldr	r3, [pc, #156]	; (800df98 <vTaskSwitchContext+0xb4>)
 800defc:	2200      	movs	r2, #0
 800defe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df00:	4b26      	ldr	r3, [pc, #152]	; (800df9c <vTaskSwitchContext+0xb8>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	60fb      	str	r3, [r7, #12]
 800df06:	e010      	b.n	800df2a <vTaskSwitchContext+0x46>
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d10a      	bne.n	800df24 <vTaskSwitchContext+0x40>
	__asm volatile
 800df0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df12:	f383 8811 	msr	BASEPRI, r3
 800df16:	f3bf 8f6f 	isb	sy
 800df1a:	f3bf 8f4f 	dsb	sy
 800df1e:	607b      	str	r3, [r7, #4]
}
 800df20:	bf00      	nop
 800df22:	e7fe      	b.n	800df22 <vTaskSwitchContext+0x3e>
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	3b01      	subs	r3, #1
 800df28:	60fb      	str	r3, [r7, #12]
 800df2a:	491d      	ldr	r1, [pc, #116]	; (800dfa0 <vTaskSwitchContext+0xbc>)
 800df2c:	68fa      	ldr	r2, [r7, #12]
 800df2e:	4613      	mov	r3, r2
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	4413      	add	r3, r2
 800df34:	009b      	lsls	r3, r3, #2
 800df36:	440b      	add	r3, r1
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d0e4      	beq.n	800df08 <vTaskSwitchContext+0x24>
 800df3e:	68fa      	ldr	r2, [r7, #12]
 800df40:	4613      	mov	r3, r2
 800df42:	009b      	lsls	r3, r3, #2
 800df44:	4413      	add	r3, r2
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	4a15      	ldr	r2, [pc, #84]	; (800dfa0 <vTaskSwitchContext+0xbc>)
 800df4a:	4413      	add	r3, r2
 800df4c:	60bb      	str	r3, [r7, #8]
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	685b      	ldr	r3, [r3, #4]
 800df52:	685a      	ldr	r2, [r3, #4]
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	605a      	str	r2, [r3, #4]
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	685a      	ldr	r2, [r3, #4]
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	3308      	adds	r3, #8
 800df60:	429a      	cmp	r2, r3
 800df62:	d104      	bne.n	800df6e <vTaskSwitchContext+0x8a>
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	685b      	ldr	r3, [r3, #4]
 800df68:	685a      	ldr	r2, [r3, #4]
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	605a      	str	r2, [r3, #4]
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	68db      	ldr	r3, [r3, #12]
 800df74:	4a0b      	ldr	r2, [pc, #44]	; (800dfa4 <vTaskSwitchContext+0xc0>)
 800df76:	6013      	str	r3, [r2, #0]
 800df78:	4a08      	ldr	r2, [pc, #32]	; (800df9c <vTaskSwitchContext+0xb8>)
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df7e:	4b09      	ldr	r3, [pc, #36]	; (800dfa4 <vTaskSwitchContext+0xc0>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	3354      	adds	r3, #84	; 0x54
 800df84:	4a08      	ldr	r2, [pc, #32]	; (800dfa8 <vTaskSwitchContext+0xc4>)
 800df86:	6013      	str	r3, [r2, #0]
}
 800df88:	bf00      	nop
 800df8a:	3714      	adds	r7, #20
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr
 800df94:	20005214 	.word	0x20005214
 800df98:	20005200 	.word	0x20005200
 800df9c:	200051f4 	.word	0x200051f4
 800dfa0:	20004d1c 	.word	0x20004d1c
 800dfa4:	20004d18 	.word	0x20004d18
 800dfa8:	20000014 	.word	0x20000014

0800dfac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d10a      	bne.n	800dfd2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc0:	f383 8811 	msr	BASEPRI, r3
 800dfc4:	f3bf 8f6f 	isb	sy
 800dfc8:	f3bf 8f4f 	dsb	sy
 800dfcc:	60fb      	str	r3, [r7, #12]
}
 800dfce:	bf00      	nop
 800dfd0:	e7fe      	b.n	800dfd0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dfd2:	4b07      	ldr	r3, [pc, #28]	; (800dff0 <vTaskPlaceOnEventList+0x44>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	3318      	adds	r3, #24
 800dfd8:	4619      	mov	r1, r3
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f7fe fc13 	bl	800c806 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dfe0:	2101      	movs	r1, #1
 800dfe2:	6838      	ldr	r0, [r7, #0]
 800dfe4:	f000 fa80 	bl	800e4e8 <prvAddCurrentTaskToDelayedList>
}
 800dfe8:	bf00      	nop
 800dfea:	3710      	adds	r7, #16
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}
 800dff0:	20004d18 	.word	0x20004d18

0800dff4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b086      	sub	sp, #24
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d10a      	bne.n	800e01c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e00a:	f383 8811 	msr	BASEPRI, r3
 800e00e:	f3bf 8f6f 	isb	sy
 800e012:	f3bf 8f4f 	dsb	sy
 800e016:	617b      	str	r3, [r7, #20]
}
 800e018:	bf00      	nop
 800e01a:	e7fe      	b.n	800e01a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e01c:	4b0a      	ldr	r3, [pc, #40]	; (800e048 <vTaskPlaceOnEventListRestricted+0x54>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	3318      	adds	r3, #24
 800e022:	4619      	mov	r1, r3
 800e024:	68f8      	ldr	r0, [r7, #12]
 800e026:	f7fe fbca 	bl	800c7be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d002      	beq.n	800e036 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e030:	f04f 33ff 	mov.w	r3, #4294967295
 800e034:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e036:	6879      	ldr	r1, [r7, #4]
 800e038:	68b8      	ldr	r0, [r7, #8]
 800e03a:	f000 fa55 	bl	800e4e8 <prvAddCurrentTaskToDelayedList>
	}
 800e03e:	bf00      	nop
 800e040:	3718      	adds	r7, #24
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	20004d18 	.word	0x20004d18

0800e04c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b086      	sub	sp, #24
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	68db      	ldr	r3, [r3, #12]
 800e058:	68db      	ldr	r3, [r3, #12]
 800e05a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d10a      	bne.n	800e078 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e066:	f383 8811 	msr	BASEPRI, r3
 800e06a:	f3bf 8f6f 	isb	sy
 800e06e:	f3bf 8f4f 	dsb	sy
 800e072:	60fb      	str	r3, [r7, #12]
}
 800e074:	bf00      	nop
 800e076:	e7fe      	b.n	800e076 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	3318      	adds	r3, #24
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7fe fbfb 	bl	800c878 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e082:	4b1e      	ldr	r3, [pc, #120]	; (800e0fc <xTaskRemoveFromEventList+0xb0>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d11d      	bne.n	800e0c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	3304      	adds	r3, #4
 800e08e:	4618      	mov	r0, r3
 800e090:	f7fe fbf2 	bl	800c878 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e098:	4b19      	ldr	r3, [pc, #100]	; (800e100 <xTaskRemoveFromEventList+0xb4>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d903      	bls.n	800e0a8 <xTaskRemoveFromEventList+0x5c>
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a4:	4a16      	ldr	r2, [pc, #88]	; (800e100 <xTaskRemoveFromEventList+0xb4>)
 800e0a6:	6013      	str	r3, [r2, #0]
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ac:	4613      	mov	r3, r2
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	4413      	add	r3, r2
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	4a13      	ldr	r2, [pc, #76]	; (800e104 <xTaskRemoveFromEventList+0xb8>)
 800e0b6:	441a      	add	r2, r3
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	3304      	adds	r3, #4
 800e0bc:	4619      	mov	r1, r3
 800e0be:	4610      	mov	r0, r2
 800e0c0:	f7fe fb7d 	bl	800c7be <vListInsertEnd>
 800e0c4:	e005      	b.n	800e0d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	3318      	adds	r3, #24
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	480e      	ldr	r0, [pc, #56]	; (800e108 <xTaskRemoveFromEventList+0xbc>)
 800e0ce:	f7fe fb76 	bl	800c7be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e0d2:	693b      	ldr	r3, [r7, #16]
 800e0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0d6:	4b0d      	ldr	r3, [pc, #52]	; (800e10c <xTaskRemoveFromEventList+0xc0>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d905      	bls.n	800e0ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e0e4:	4b0a      	ldr	r3, [pc, #40]	; (800e110 <xTaskRemoveFromEventList+0xc4>)
 800e0e6:	2201      	movs	r2, #1
 800e0e8:	601a      	str	r2, [r3, #0]
 800e0ea:	e001      	b.n	800e0f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e0f0:	697b      	ldr	r3, [r7, #20]
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3718      	adds	r7, #24
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	20005214 	.word	0x20005214
 800e100:	200051f4 	.word	0x200051f4
 800e104:	20004d1c 	.word	0x20004d1c
 800e108:	200051ac 	.word	0x200051ac
 800e10c:	20004d18 	.word	0x20004d18
 800e110:	20005200 	.word	0x20005200

0800e114 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e11c:	4b06      	ldr	r3, [pc, #24]	; (800e138 <vTaskInternalSetTimeOutState+0x24>)
 800e11e:	681a      	ldr	r2, [r3, #0]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e124:	4b05      	ldr	r3, [pc, #20]	; (800e13c <vTaskInternalSetTimeOutState+0x28>)
 800e126:	681a      	ldr	r2, [r3, #0]
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	605a      	str	r2, [r3, #4]
}
 800e12c:	bf00      	nop
 800e12e:	370c      	adds	r7, #12
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr
 800e138:	20005204 	.word	0x20005204
 800e13c:	200051f0 	.word	0x200051f0

0800e140 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b088      	sub	sp, #32
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
 800e148:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d10a      	bne.n	800e166 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e154:	f383 8811 	msr	BASEPRI, r3
 800e158:	f3bf 8f6f 	isb	sy
 800e15c:	f3bf 8f4f 	dsb	sy
 800e160:	613b      	str	r3, [r7, #16]
}
 800e162:	bf00      	nop
 800e164:	e7fe      	b.n	800e164 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d10a      	bne.n	800e182 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e170:	f383 8811 	msr	BASEPRI, r3
 800e174:	f3bf 8f6f 	isb	sy
 800e178:	f3bf 8f4f 	dsb	sy
 800e17c:	60fb      	str	r3, [r7, #12]
}
 800e17e:	bf00      	nop
 800e180:	e7fe      	b.n	800e180 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e182:	f7fe fccf 	bl	800cb24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e186:	4b1d      	ldr	r3, [pc, #116]	; (800e1fc <xTaskCheckForTimeOut+0xbc>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	69ba      	ldr	r2, [r7, #24]
 800e192:	1ad3      	subs	r3, r2, r3
 800e194:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e19e:	d102      	bne.n	800e1a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	61fb      	str	r3, [r7, #28]
 800e1a4:	e023      	b.n	800e1ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	4b15      	ldr	r3, [pc, #84]	; (800e200 <xTaskCheckForTimeOut+0xc0>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d007      	beq.n	800e1c2 <xTaskCheckForTimeOut+0x82>
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	69ba      	ldr	r2, [r7, #24]
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d302      	bcc.n	800e1c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e1bc:	2301      	movs	r3, #1
 800e1be:	61fb      	str	r3, [r7, #28]
 800e1c0:	e015      	b.n	800e1ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	697a      	ldr	r2, [r7, #20]
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d20b      	bcs.n	800e1e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	1ad2      	subs	r2, r2, r3
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f7ff ff9b 	bl	800e114 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	61fb      	str	r3, [r7, #28]
 800e1e2:	e004      	b.n	800e1ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e1ee:	f7fe fcc9 	bl	800cb84 <vPortExitCritical>

	return xReturn;
 800e1f2:	69fb      	ldr	r3, [r7, #28]
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	3720      	adds	r7, #32
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}
 800e1fc:	200051f0 	.word	0x200051f0
 800e200:	20005204 	.word	0x20005204

0800e204 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e204:	b480      	push	{r7}
 800e206:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e208:	4b03      	ldr	r3, [pc, #12]	; (800e218 <vTaskMissedYield+0x14>)
 800e20a:	2201      	movs	r2, #1
 800e20c:	601a      	str	r2, [r3, #0]
}
 800e20e:	bf00      	nop
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr
 800e218:	20005200 	.word	0x20005200

0800e21c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b082      	sub	sp, #8
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e224:	f000 f852 	bl	800e2cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e228:	4b06      	ldr	r3, [pc, #24]	; (800e244 <prvIdleTask+0x28>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d9f9      	bls.n	800e224 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e230:	4b05      	ldr	r3, [pc, #20]	; (800e248 <prvIdleTask+0x2c>)
 800e232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e236:	601a      	str	r2, [r3, #0]
 800e238:	f3bf 8f4f 	dsb	sy
 800e23c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e240:	e7f0      	b.n	800e224 <prvIdleTask+0x8>
 800e242:	bf00      	nop
 800e244:	20004d1c 	.word	0x20004d1c
 800e248:	e000ed04 	.word	0xe000ed04

0800e24c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b082      	sub	sp, #8
 800e250:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e252:	2300      	movs	r3, #0
 800e254:	607b      	str	r3, [r7, #4]
 800e256:	e00c      	b.n	800e272 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e258:	687a      	ldr	r2, [r7, #4]
 800e25a:	4613      	mov	r3, r2
 800e25c:	009b      	lsls	r3, r3, #2
 800e25e:	4413      	add	r3, r2
 800e260:	009b      	lsls	r3, r3, #2
 800e262:	4a12      	ldr	r2, [pc, #72]	; (800e2ac <prvInitialiseTaskLists+0x60>)
 800e264:	4413      	add	r3, r2
 800e266:	4618      	mov	r0, r3
 800e268:	f7fe fa7c 	bl	800c764 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	3301      	adds	r3, #1
 800e270:	607b      	str	r3, [r7, #4]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2b37      	cmp	r3, #55	; 0x37
 800e276:	d9ef      	bls.n	800e258 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e278:	480d      	ldr	r0, [pc, #52]	; (800e2b0 <prvInitialiseTaskLists+0x64>)
 800e27a:	f7fe fa73 	bl	800c764 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e27e:	480d      	ldr	r0, [pc, #52]	; (800e2b4 <prvInitialiseTaskLists+0x68>)
 800e280:	f7fe fa70 	bl	800c764 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e284:	480c      	ldr	r0, [pc, #48]	; (800e2b8 <prvInitialiseTaskLists+0x6c>)
 800e286:	f7fe fa6d 	bl	800c764 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e28a:	480c      	ldr	r0, [pc, #48]	; (800e2bc <prvInitialiseTaskLists+0x70>)
 800e28c:	f7fe fa6a 	bl	800c764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e290:	480b      	ldr	r0, [pc, #44]	; (800e2c0 <prvInitialiseTaskLists+0x74>)
 800e292:	f7fe fa67 	bl	800c764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e296:	4b0b      	ldr	r3, [pc, #44]	; (800e2c4 <prvInitialiseTaskLists+0x78>)
 800e298:	4a05      	ldr	r2, [pc, #20]	; (800e2b0 <prvInitialiseTaskLists+0x64>)
 800e29a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e29c:	4b0a      	ldr	r3, [pc, #40]	; (800e2c8 <prvInitialiseTaskLists+0x7c>)
 800e29e:	4a05      	ldr	r2, [pc, #20]	; (800e2b4 <prvInitialiseTaskLists+0x68>)
 800e2a0:	601a      	str	r2, [r3, #0]
}
 800e2a2:	bf00      	nop
 800e2a4:	3708      	adds	r7, #8
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	20004d1c 	.word	0x20004d1c
 800e2b0:	2000517c 	.word	0x2000517c
 800e2b4:	20005190 	.word	0x20005190
 800e2b8:	200051ac 	.word	0x200051ac
 800e2bc:	200051c0 	.word	0x200051c0
 800e2c0:	200051d8 	.word	0x200051d8
 800e2c4:	200051a4 	.word	0x200051a4
 800e2c8:	200051a8 	.word	0x200051a8

0800e2cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b082      	sub	sp, #8
 800e2d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2d2:	e019      	b.n	800e308 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e2d4:	f7fe fc26 	bl	800cb24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2d8:	4b10      	ldr	r3, [pc, #64]	; (800e31c <prvCheckTasksWaitingTermination+0x50>)
 800e2da:	68db      	ldr	r3, [r3, #12]
 800e2dc:	68db      	ldr	r3, [r3, #12]
 800e2de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	3304      	adds	r3, #4
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f7fe fac7 	bl	800c878 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e2ea:	4b0d      	ldr	r3, [pc, #52]	; (800e320 <prvCheckTasksWaitingTermination+0x54>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	3b01      	subs	r3, #1
 800e2f0:	4a0b      	ldr	r2, [pc, #44]	; (800e320 <prvCheckTasksWaitingTermination+0x54>)
 800e2f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e2f4:	4b0b      	ldr	r3, [pc, #44]	; (800e324 <prvCheckTasksWaitingTermination+0x58>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	3b01      	subs	r3, #1
 800e2fa:	4a0a      	ldr	r2, [pc, #40]	; (800e324 <prvCheckTasksWaitingTermination+0x58>)
 800e2fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e2fe:	f7fe fc41 	bl	800cb84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 f810 	bl	800e328 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e308:	4b06      	ldr	r3, [pc, #24]	; (800e324 <prvCheckTasksWaitingTermination+0x58>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d1e1      	bne.n	800e2d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e310:	bf00      	nop
 800e312:	bf00      	nop
 800e314:	3708      	adds	r7, #8
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
 800e31a:	bf00      	nop
 800e31c:	200051c0 	.word	0x200051c0
 800e320:	200051ec 	.word	0x200051ec
 800e324:	200051d4 	.word	0x200051d4

0800e328 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b084      	sub	sp, #16
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	3354      	adds	r3, #84	; 0x54
 800e334:	4618      	mov	r0, r3
 800e336:	f000 fd0d 	bl	800ed54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e340:	2b00      	cmp	r3, #0
 800e342:	d108      	bne.n	800e356 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e348:	4618      	mov	r0, r3
 800e34a:	f7fe f8ed 	bl	800c528 <vPortFree>
				vPortFree( pxTCB );
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f7fe f8ea 	bl	800c528 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e354:	e018      	b.n	800e388 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d103      	bne.n	800e368 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f7fe f8e1 	bl	800c528 <vPortFree>
	}
 800e366:	e00f      	b.n	800e388 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e36e:	2b02      	cmp	r3, #2
 800e370:	d00a      	beq.n	800e388 <prvDeleteTCB+0x60>
	__asm volatile
 800e372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e376:	f383 8811 	msr	BASEPRI, r3
 800e37a:	f3bf 8f6f 	isb	sy
 800e37e:	f3bf 8f4f 	dsb	sy
 800e382:	60fb      	str	r3, [r7, #12]
}
 800e384:	bf00      	nop
 800e386:	e7fe      	b.n	800e386 <prvDeleteTCB+0x5e>
	}
 800e388:	bf00      	nop
 800e38a:	3710      	adds	r7, #16
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e390:	b480      	push	{r7}
 800e392:	b083      	sub	sp, #12
 800e394:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e396:	4b0c      	ldr	r3, [pc, #48]	; (800e3c8 <prvResetNextTaskUnblockTime+0x38>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d104      	bne.n	800e3aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e3a0:	4b0a      	ldr	r3, [pc, #40]	; (800e3cc <prvResetNextTaskUnblockTime+0x3c>)
 800e3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e3a8:	e008      	b.n	800e3bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3aa:	4b07      	ldr	r3, [pc, #28]	; (800e3c8 <prvResetNextTaskUnblockTime+0x38>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	68db      	ldr	r3, [r3, #12]
 800e3b0:	68db      	ldr	r3, [r3, #12]
 800e3b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	4a04      	ldr	r2, [pc, #16]	; (800e3cc <prvResetNextTaskUnblockTime+0x3c>)
 800e3ba:	6013      	str	r3, [r2, #0]
}
 800e3bc:	bf00      	nop
 800e3be:	370c      	adds	r7, #12
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr
 800e3c8:	200051a4 	.word	0x200051a4
 800e3cc:	2000520c 	.word	0x2000520c

0800e3d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b083      	sub	sp, #12
 800e3d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e3d6:	4b0b      	ldr	r3, [pc, #44]	; (800e404 <xTaskGetSchedulerState+0x34>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d102      	bne.n	800e3e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e3de:	2301      	movs	r3, #1
 800e3e0:	607b      	str	r3, [r7, #4]
 800e3e2:	e008      	b.n	800e3f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3e4:	4b08      	ldr	r3, [pc, #32]	; (800e408 <xTaskGetSchedulerState+0x38>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d102      	bne.n	800e3f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e3ec:	2302      	movs	r3, #2
 800e3ee:	607b      	str	r3, [r7, #4]
 800e3f0:	e001      	b.n	800e3f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e3f6:	687b      	ldr	r3, [r7, #4]
	}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	370c      	adds	r7, #12
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr
 800e404:	200051f8 	.word	0x200051f8
 800e408:	20005214 	.word	0x20005214

0800e40c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b086      	sub	sp, #24
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e418:	2300      	movs	r3, #0
 800e41a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d056      	beq.n	800e4d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e422:	4b2e      	ldr	r3, [pc, #184]	; (800e4dc <xTaskPriorityDisinherit+0xd0>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	693a      	ldr	r2, [r7, #16]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d00a      	beq.n	800e442 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e430:	f383 8811 	msr	BASEPRI, r3
 800e434:	f3bf 8f6f 	isb	sy
 800e438:	f3bf 8f4f 	dsb	sy
 800e43c:	60fb      	str	r3, [r7, #12]
}
 800e43e:	bf00      	nop
 800e440:	e7fe      	b.n	800e440 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e446:	2b00      	cmp	r3, #0
 800e448:	d10a      	bne.n	800e460 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e44e:	f383 8811 	msr	BASEPRI, r3
 800e452:	f3bf 8f6f 	isb	sy
 800e456:	f3bf 8f4f 	dsb	sy
 800e45a:	60bb      	str	r3, [r7, #8]
}
 800e45c:	bf00      	nop
 800e45e:	e7fe      	b.n	800e45e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e464:	1e5a      	subs	r2, r3, #1
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e472:	429a      	cmp	r2, r3
 800e474:	d02c      	beq.n	800e4d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d128      	bne.n	800e4d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	3304      	adds	r3, #4
 800e482:	4618      	mov	r0, r3
 800e484:	f7fe f9f8 	bl	800c878 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e48c:	693b      	ldr	r3, [r7, #16]
 800e48e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e494:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e498:	693b      	ldr	r3, [r7, #16]
 800e49a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4a0:	4b0f      	ldr	r3, [pc, #60]	; (800e4e0 <xTaskPriorityDisinherit+0xd4>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d903      	bls.n	800e4b0 <xTaskPriorityDisinherit+0xa4>
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4ac:	4a0c      	ldr	r2, [pc, #48]	; (800e4e0 <xTaskPriorityDisinherit+0xd4>)
 800e4ae:	6013      	str	r3, [r2, #0]
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4b4:	4613      	mov	r3, r2
 800e4b6:	009b      	lsls	r3, r3, #2
 800e4b8:	4413      	add	r3, r2
 800e4ba:	009b      	lsls	r3, r3, #2
 800e4bc:	4a09      	ldr	r2, [pc, #36]	; (800e4e4 <xTaskPriorityDisinherit+0xd8>)
 800e4be:	441a      	add	r2, r3
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	3304      	adds	r3, #4
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	4610      	mov	r0, r2
 800e4c8:	f7fe f979 	bl	800c7be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e4d0:	697b      	ldr	r3, [r7, #20]
	}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3718      	adds	r7, #24
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
 800e4da:	bf00      	nop
 800e4dc:	20004d18 	.word	0x20004d18
 800e4e0:	200051f4 	.word	0x200051f4
 800e4e4:	20004d1c 	.word	0x20004d1c

0800e4e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e4f2:	4b21      	ldr	r3, [pc, #132]	; (800e578 <prvAddCurrentTaskToDelayedList+0x90>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4f8:	4b20      	ldr	r3, [pc, #128]	; (800e57c <prvAddCurrentTaskToDelayedList+0x94>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	3304      	adds	r3, #4
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7fe f9ba 	bl	800c878 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e50a:	d10a      	bne.n	800e522 <prvAddCurrentTaskToDelayedList+0x3a>
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d007      	beq.n	800e522 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e512:	4b1a      	ldr	r3, [pc, #104]	; (800e57c <prvAddCurrentTaskToDelayedList+0x94>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	3304      	adds	r3, #4
 800e518:	4619      	mov	r1, r3
 800e51a:	4819      	ldr	r0, [pc, #100]	; (800e580 <prvAddCurrentTaskToDelayedList+0x98>)
 800e51c:	f7fe f94f 	bl	800c7be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e520:	e026      	b.n	800e570 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e522:	68fa      	ldr	r2, [r7, #12]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	4413      	add	r3, r2
 800e528:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e52a:	4b14      	ldr	r3, [pc, #80]	; (800e57c <prvAddCurrentTaskToDelayedList+0x94>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	68ba      	ldr	r2, [r7, #8]
 800e530:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e532:	68ba      	ldr	r2, [r7, #8]
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	429a      	cmp	r2, r3
 800e538:	d209      	bcs.n	800e54e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e53a:	4b12      	ldr	r3, [pc, #72]	; (800e584 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	4b0f      	ldr	r3, [pc, #60]	; (800e57c <prvAddCurrentTaskToDelayedList+0x94>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	3304      	adds	r3, #4
 800e544:	4619      	mov	r1, r3
 800e546:	4610      	mov	r0, r2
 800e548:	f7fe f95d 	bl	800c806 <vListInsert>
}
 800e54c:	e010      	b.n	800e570 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e54e:	4b0e      	ldr	r3, [pc, #56]	; (800e588 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	4b0a      	ldr	r3, [pc, #40]	; (800e57c <prvAddCurrentTaskToDelayedList+0x94>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	3304      	adds	r3, #4
 800e558:	4619      	mov	r1, r3
 800e55a:	4610      	mov	r0, r2
 800e55c:	f7fe f953 	bl	800c806 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e560:	4b0a      	ldr	r3, [pc, #40]	; (800e58c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	68ba      	ldr	r2, [r7, #8]
 800e566:	429a      	cmp	r2, r3
 800e568:	d202      	bcs.n	800e570 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e56a:	4a08      	ldr	r2, [pc, #32]	; (800e58c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	6013      	str	r3, [r2, #0]
}
 800e570:	bf00      	nop
 800e572:	3710      	adds	r7, #16
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}
 800e578:	200051f0 	.word	0x200051f0
 800e57c:	20004d18 	.word	0x20004d18
 800e580:	200051d8 	.word	0x200051d8
 800e584:	200051a8 	.word	0x200051a8
 800e588:	200051a4 	.word	0x200051a4
 800e58c:	2000520c 	.word	0x2000520c

0800e590 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b08a      	sub	sp, #40	; 0x28
 800e594:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e596:	2300      	movs	r3, #0
 800e598:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e59a:	f000 fb07 	bl	800ebac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e59e:	4b1c      	ldr	r3, [pc, #112]	; (800e610 <xTimerCreateTimerTask+0x80>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d021      	beq.n	800e5ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e5ae:	1d3a      	adds	r2, r7, #4
 800e5b0:	f107 0108 	add.w	r1, r7, #8
 800e5b4:	f107 030c 	add.w	r3, r7, #12
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7fd fecf 	bl	800c35c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e5be:	6879      	ldr	r1, [r7, #4]
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	68fa      	ldr	r2, [r7, #12]
 800e5c4:	9202      	str	r2, [sp, #8]
 800e5c6:	9301      	str	r3, [sp, #4]
 800e5c8:	2302      	movs	r3, #2
 800e5ca:	9300      	str	r3, [sp, #0]
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	460a      	mov	r2, r1
 800e5d0:	4910      	ldr	r1, [pc, #64]	; (800e614 <xTimerCreateTimerTask+0x84>)
 800e5d2:	4811      	ldr	r0, [pc, #68]	; (800e618 <xTimerCreateTimerTask+0x88>)
 800e5d4:	f7ff f8b4 	bl	800d740 <xTaskCreateStatic>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	4a10      	ldr	r2, [pc, #64]	; (800e61c <xTimerCreateTimerTask+0x8c>)
 800e5dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e5de:	4b0f      	ldr	r3, [pc, #60]	; (800e61c <xTimerCreateTimerTask+0x8c>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d001      	beq.n	800e5ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d10a      	bne.n	800e606 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f4:	f383 8811 	msr	BASEPRI, r3
 800e5f8:	f3bf 8f6f 	isb	sy
 800e5fc:	f3bf 8f4f 	dsb	sy
 800e600:	613b      	str	r3, [r7, #16]
}
 800e602:	bf00      	nop
 800e604:	e7fe      	b.n	800e604 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e606:	697b      	ldr	r3, [r7, #20]
}
 800e608:	4618      	mov	r0, r3
 800e60a:	3718      	adds	r7, #24
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}
 800e610:	20005248 	.word	0x20005248
 800e614:	0800f53c 	.word	0x0800f53c
 800e618:	0800e755 	.word	0x0800e755
 800e61c:	2000524c 	.word	0x2000524c

0800e620 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b08a      	sub	sp, #40	; 0x28
 800e624:	af00      	add	r7, sp, #0
 800e626:	60f8      	str	r0, [r7, #12]
 800e628:	60b9      	str	r1, [r7, #8]
 800e62a:	607a      	str	r2, [r7, #4]
 800e62c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e62e:	2300      	movs	r3, #0
 800e630:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d10a      	bne.n	800e64e <xTimerGenericCommand+0x2e>
	__asm volatile
 800e638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e63c:	f383 8811 	msr	BASEPRI, r3
 800e640:	f3bf 8f6f 	isb	sy
 800e644:	f3bf 8f4f 	dsb	sy
 800e648:	623b      	str	r3, [r7, #32]
}
 800e64a:	bf00      	nop
 800e64c:	e7fe      	b.n	800e64c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e64e:	4b1a      	ldr	r3, [pc, #104]	; (800e6b8 <xTimerGenericCommand+0x98>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d02a      	beq.n	800e6ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	2b05      	cmp	r3, #5
 800e666:	dc18      	bgt.n	800e69a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e668:	f7ff feb2 	bl	800e3d0 <xTaskGetSchedulerState>
 800e66c:	4603      	mov	r3, r0
 800e66e:	2b02      	cmp	r3, #2
 800e670:	d109      	bne.n	800e686 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e672:	4b11      	ldr	r3, [pc, #68]	; (800e6b8 <xTimerGenericCommand+0x98>)
 800e674:	6818      	ldr	r0, [r3, #0]
 800e676:	f107 0110 	add.w	r1, r7, #16
 800e67a:	2300      	movs	r3, #0
 800e67c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e67e:	f7fe fc77 	bl	800cf70 <xQueueGenericSend>
 800e682:	6278      	str	r0, [r7, #36]	; 0x24
 800e684:	e012      	b.n	800e6ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e686:	4b0c      	ldr	r3, [pc, #48]	; (800e6b8 <xTimerGenericCommand+0x98>)
 800e688:	6818      	ldr	r0, [r3, #0]
 800e68a:	f107 0110 	add.w	r1, r7, #16
 800e68e:	2300      	movs	r3, #0
 800e690:	2200      	movs	r2, #0
 800e692:	f7fe fc6d 	bl	800cf70 <xQueueGenericSend>
 800e696:	6278      	str	r0, [r7, #36]	; 0x24
 800e698:	e008      	b.n	800e6ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e69a:	4b07      	ldr	r3, [pc, #28]	; (800e6b8 <xTimerGenericCommand+0x98>)
 800e69c:	6818      	ldr	r0, [r3, #0]
 800e69e:	f107 0110 	add.w	r1, r7, #16
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	683a      	ldr	r2, [r7, #0]
 800e6a6:	f7fe fd61 	bl	800d16c <xQueueGenericSendFromISR>
 800e6aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3728      	adds	r7, #40	; 0x28
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	20005248 	.word	0x20005248

0800e6bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b088      	sub	sp, #32
 800e6c0:	af02      	add	r7, sp, #8
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6c6:	4b22      	ldr	r3, [pc, #136]	; (800e750 <prvProcessExpiredTimer+0x94>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	68db      	ldr	r3, [r3, #12]
 800e6cc:	68db      	ldr	r3, [r3, #12]
 800e6ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	3304      	adds	r3, #4
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7fe f8cf 	bl	800c878 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6e0:	f003 0304 	and.w	r3, r3, #4
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d022      	beq.n	800e72e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	699a      	ldr	r2, [r3, #24]
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	18d1      	adds	r1, r2, r3
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	683a      	ldr	r2, [r7, #0]
 800e6f4:	6978      	ldr	r0, [r7, #20]
 800e6f6:	f000 f8d1 	bl	800e89c <prvInsertTimerInActiveList>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d01f      	beq.n	800e740 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e700:	2300      	movs	r3, #0
 800e702:	9300      	str	r3, [sp, #0]
 800e704:	2300      	movs	r3, #0
 800e706:	687a      	ldr	r2, [r7, #4]
 800e708:	2100      	movs	r1, #0
 800e70a:	6978      	ldr	r0, [r7, #20]
 800e70c:	f7ff ff88 	bl	800e620 <xTimerGenericCommand>
 800e710:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d113      	bne.n	800e740 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e71c:	f383 8811 	msr	BASEPRI, r3
 800e720:	f3bf 8f6f 	isb	sy
 800e724:	f3bf 8f4f 	dsb	sy
 800e728:	60fb      	str	r3, [r7, #12]
}
 800e72a:	bf00      	nop
 800e72c:	e7fe      	b.n	800e72c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e734:	f023 0301 	bic.w	r3, r3, #1
 800e738:	b2da      	uxtb	r2, r3
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	6a1b      	ldr	r3, [r3, #32]
 800e744:	6978      	ldr	r0, [r7, #20]
 800e746:	4798      	blx	r3
}
 800e748:	bf00      	nop
 800e74a:	3718      	adds	r7, #24
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	20005240 	.word	0x20005240

0800e754 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b084      	sub	sp, #16
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e75c:	f107 0308 	add.w	r3, r7, #8
 800e760:	4618      	mov	r0, r3
 800e762:	f000 f857 	bl	800e814 <prvGetNextExpireTime>
 800e766:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	4619      	mov	r1, r3
 800e76c:	68f8      	ldr	r0, [r7, #12]
 800e76e:	f000 f803 	bl	800e778 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e772:	f000 f8d5 	bl	800e920 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e776:	e7f1      	b.n	800e75c <prvTimerTask+0x8>

0800e778 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b084      	sub	sp, #16
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e782:	f7ff fa39 	bl	800dbf8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e786:	f107 0308 	add.w	r3, r7, #8
 800e78a:	4618      	mov	r0, r3
 800e78c:	f000 f866 	bl	800e85c <prvSampleTimeNow>
 800e790:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d130      	bne.n	800e7fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d10a      	bne.n	800e7b4 <prvProcessTimerOrBlockTask+0x3c>
 800e79e:	687a      	ldr	r2, [r7, #4]
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d806      	bhi.n	800e7b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e7a6:	f7ff fa35 	bl	800dc14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e7aa:	68f9      	ldr	r1, [r7, #12]
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f7ff ff85 	bl	800e6bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e7b2:	e024      	b.n	800e7fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d008      	beq.n	800e7cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e7ba:	4b13      	ldr	r3, [pc, #76]	; (800e808 <prvProcessTimerOrBlockTask+0x90>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d101      	bne.n	800e7c8 <prvProcessTimerOrBlockTask+0x50>
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	e000      	b.n	800e7ca <prvProcessTimerOrBlockTask+0x52>
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e7cc:	4b0f      	ldr	r3, [pc, #60]	; (800e80c <prvProcessTimerOrBlockTask+0x94>)
 800e7ce:	6818      	ldr	r0, [r3, #0]
 800e7d0:	687a      	ldr	r2, [r7, #4]
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	1ad3      	subs	r3, r2, r3
 800e7d6:	683a      	ldr	r2, [r7, #0]
 800e7d8:	4619      	mov	r1, r3
 800e7da:	f7fe ff7d 	bl	800d6d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e7de:	f7ff fa19 	bl	800dc14 <xTaskResumeAll>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d10a      	bne.n	800e7fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e7e8:	4b09      	ldr	r3, [pc, #36]	; (800e810 <prvProcessTimerOrBlockTask+0x98>)
 800e7ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7ee:	601a      	str	r2, [r3, #0]
 800e7f0:	f3bf 8f4f 	dsb	sy
 800e7f4:	f3bf 8f6f 	isb	sy
}
 800e7f8:	e001      	b.n	800e7fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e7fa:	f7ff fa0b 	bl	800dc14 <xTaskResumeAll>
}
 800e7fe:	bf00      	nop
 800e800:	3710      	adds	r7, #16
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	20005244 	.word	0x20005244
 800e80c:	20005248 	.word	0x20005248
 800e810:	e000ed04 	.word	0xe000ed04

0800e814 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e814:	b480      	push	{r7}
 800e816:	b085      	sub	sp, #20
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e81c:	4b0e      	ldr	r3, [pc, #56]	; (800e858 <prvGetNextExpireTime+0x44>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d101      	bne.n	800e82a <prvGetNextExpireTime+0x16>
 800e826:	2201      	movs	r2, #1
 800e828:	e000      	b.n	800e82c <prvGetNextExpireTime+0x18>
 800e82a:	2200      	movs	r2, #0
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d105      	bne.n	800e844 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e838:	4b07      	ldr	r3, [pc, #28]	; (800e858 <prvGetNextExpireTime+0x44>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	68db      	ldr	r3, [r3, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	60fb      	str	r3, [r7, #12]
 800e842:	e001      	b.n	800e848 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e844:	2300      	movs	r3, #0
 800e846:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e848:	68fb      	ldr	r3, [r7, #12]
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3714      	adds	r7, #20
 800e84e:	46bd      	mov	sp, r7
 800e850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e854:	4770      	bx	lr
 800e856:	bf00      	nop
 800e858:	20005240 	.word	0x20005240

0800e85c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b084      	sub	sp, #16
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e864:	f7ff fa74 	bl	800dd50 <xTaskGetTickCount>
 800e868:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e86a:	4b0b      	ldr	r3, [pc, #44]	; (800e898 <prvSampleTimeNow+0x3c>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	68fa      	ldr	r2, [r7, #12]
 800e870:	429a      	cmp	r2, r3
 800e872:	d205      	bcs.n	800e880 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e874:	f000 f936 	bl	800eae4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2201      	movs	r2, #1
 800e87c:	601a      	str	r2, [r3, #0]
 800e87e:	e002      	b.n	800e886 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2200      	movs	r2, #0
 800e884:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e886:	4a04      	ldr	r2, [pc, #16]	; (800e898 <prvSampleTimeNow+0x3c>)
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e88c:	68fb      	ldr	r3, [r7, #12]
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3710      	adds	r7, #16
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	20005250 	.word	0x20005250

0800e89c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b086      	sub	sp, #24
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	60f8      	str	r0, [r7, #12]
 800e8a4:	60b9      	str	r1, [r7, #8]
 800e8a6:	607a      	str	r2, [r7, #4]
 800e8a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	68ba      	ldr	r2, [r7, #8]
 800e8b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	68fa      	ldr	r2, [r7, #12]
 800e8b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e8ba:	68ba      	ldr	r2, [r7, #8]
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d812      	bhi.n	800e8e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8c2:	687a      	ldr	r2, [r7, #4]
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	1ad2      	subs	r2, r2, r3
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	699b      	ldr	r3, [r3, #24]
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d302      	bcc.n	800e8d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	617b      	str	r3, [r7, #20]
 800e8d4:	e01b      	b.n	800e90e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e8d6:	4b10      	ldr	r3, [pc, #64]	; (800e918 <prvInsertTimerInActiveList+0x7c>)
 800e8d8:	681a      	ldr	r2, [r3, #0]
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	3304      	adds	r3, #4
 800e8de:	4619      	mov	r1, r3
 800e8e0:	4610      	mov	r0, r2
 800e8e2:	f7fd ff90 	bl	800c806 <vListInsert>
 800e8e6:	e012      	b.n	800e90e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e8e8:	687a      	ldr	r2, [r7, #4]
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	429a      	cmp	r2, r3
 800e8ee:	d206      	bcs.n	800e8fe <prvInsertTimerInActiveList+0x62>
 800e8f0:	68ba      	ldr	r2, [r7, #8]
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d302      	bcc.n	800e8fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	617b      	str	r3, [r7, #20]
 800e8fc:	e007      	b.n	800e90e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e8fe:	4b07      	ldr	r3, [pc, #28]	; (800e91c <prvInsertTimerInActiveList+0x80>)
 800e900:	681a      	ldr	r2, [r3, #0]
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	3304      	adds	r3, #4
 800e906:	4619      	mov	r1, r3
 800e908:	4610      	mov	r0, r2
 800e90a:	f7fd ff7c 	bl	800c806 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e90e:	697b      	ldr	r3, [r7, #20]
}
 800e910:	4618      	mov	r0, r3
 800e912:	3718      	adds	r7, #24
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}
 800e918:	20005244 	.word	0x20005244
 800e91c:	20005240 	.word	0x20005240

0800e920 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b08e      	sub	sp, #56	; 0x38
 800e924:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e926:	e0ca      	b.n	800eabe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	da18      	bge.n	800e960 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e92e:	1d3b      	adds	r3, r7, #4
 800e930:	3304      	adds	r3, #4
 800e932:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e936:	2b00      	cmp	r3, #0
 800e938:	d10a      	bne.n	800e950 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e93e:	f383 8811 	msr	BASEPRI, r3
 800e942:	f3bf 8f6f 	isb	sy
 800e946:	f3bf 8f4f 	dsb	sy
 800e94a:	61fb      	str	r3, [r7, #28]
}
 800e94c:	bf00      	nop
 800e94e:	e7fe      	b.n	800e94e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e956:	6850      	ldr	r0, [r2, #4]
 800e958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e95a:	6892      	ldr	r2, [r2, #8]
 800e95c:	4611      	mov	r1, r2
 800e95e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2b00      	cmp	r3, #0
 800e964:	f2c0 80aa 	blt.w	800eabc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96e:	695b      	ldr	r3, [r3, #20]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d004      	beq.n	800e97e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e976:	3304      	adds	r3, #4
 800e978:	4618      	mov	r0, r3
 800e97a:	f7fd ff7d 	bl	800c878 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e97e:	463b      	mov	r3, r7
 800e980:	4618      	mov	r0, r3
 800e982:	f7ff ff6b 	bl	800e85c <prvSampleTimeNow>
 800e986:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2b09      	cmp	r3, #9
 800e98c:	f200 8097 	bhi.w	800eabe <prvProcessReceivedCommands+0x19e>
 800e990:	a201      	add	r2, pc, #4	; (adr r2, 800e998 <prvProcessReceivedCommands+0x78>)
 800e992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e996:	bf00      	nop
 800e998:	0800e9c1 	.word	0x0800e9c1
 800e99c:	0800e9c1 	.word	0x0800e9c1
 800e9a0:	0800e9c1 	.word	0x0800e9c1
 800e9a4:	0800ea35 	.word	0x0800ea35
 800e9a8:	0800ea49 	.word	0x0800ea49
 800e9ac:	0800ea93 	.word	0x0800ea93
 800e9b0:	0800e9c1 	.word	0x0800e9c1
 800e9b4:	0800e9c1 	.word	0x0800e9c1
 800e9b8:	0800ea35 	.word	0x0800ea35
 800e9bc:	0800ea49 	.word	0x0800ea49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9c6:	f043 0301 	orr.w	r3, r3, #1
 800e9ca:	b2da      	uxtb	r2, r3
 800e9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e9d2:	68ba      	ldr	r2, [r7, #8]
 800e9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d6:	699b      	ldr	r3, [r3, #24]
 800e9d8:	18d1      	adds	r1, r2, r3
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9e0:	f7ff ff5c 	bl	800e89c <prvInsertTimerInActiveList>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d069      	beq.n	800eabe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ec:	6a1b      	ldr	r3, [r3, #32]
 800e9ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9f8:	f003 0304 	and.w	r3, r3, #4
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d05e      	beq.n	800eabe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ea00:	68ba      	ldr	r2, [r7, #8]
 800ea02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea04:	699b      	ldr	r3, [r3, #24]
 800ea06:	441a      	add	r2, r3
 800ea08:	2300      	movs	r3, #0
 800ea0a:	9300      	str	r3, [sp, #0]
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	2100      	movs	r1, #0
 800ea10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea12:	f7ff fe05 	bl	800e620 <xTimerGenericCommand>
 800ea16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ea18:	6a3b      	ldr	r3, [r7, #32]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d14f      	bne.n	800eabe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ea1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea22:	f383 8811 	msr	BASEPRI, r3
 800ea26:	f3bf 8f6f 	isb	sy
 800ea2a:	f3bf 8f4f 	dsb	sy
 800ea2e:	61bb      	str	r3, [r7, #24]
}
 800ea30:	bf00      	nop
 800ea32:	e7fe      	b.n	800ea32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea3a:	f023 0301 	bic.w	r3, r3, #1
 800ea3e:	b2da      	uxtb	r2, r3
 800ea40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ea46:	e03a      	b.n	800eabe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea4e:	f043 0301 	orr.w	r3, r3, #1
 800ea52:	b2da      	uxtb	r2, r3
 800ea54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ea5a:	68ba      	ldr	r2, [r7, #8]
 800ea5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ea60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea62:	699b      	ldr	r3, [r3, #24]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d10a      	bne.n	800ea7e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ea68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea6c:	f383 8811 	msr	BASEPRI, r3
 800ea70:	f3bf 8f6f 	isb	sy
 800ea74:	f3bf 8f4f 	dsb	sy
 800ea78:	617b      	str	r3, [r7, #20]
}
 800ea7a:	bf00      	nop
 800ea7c:	e7fe      	b.n	800ea7c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ea7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea80:	699a      	ldr	r2, [r3, #24]
 800ea82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea84:	18d1      	adds	r1, r2, r3
 800ea86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea8c:	f7ff ff06 	bl	800e89c <prvInsertTimerInActiveList>
					break;
 800ea90:	e015      	b.n	800eabe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ea92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea98:	f003 0302 	and.w	r3, r3, #2
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d103      	bne.n	800eaa8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800eaa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eaa2:	f7fd fd41 	bl	800c528 <vPortFree>
 800eaa6:	e00a      	b.n	800eabe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eaae:	f023 0301 	bic.w	r3, r3, #1
 800eab2:	b2da      	uxtb	r2, r3
 800eab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800eaba:	e000      	b.n	800eabe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800eabc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eabe:	4b08      	ldr	r3, [pc, #32]	; (800eae0 <prvProcessReceivedCommands+0x1c0>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	1d39      	adds	r1, r7, #4
 800eac4:	2200      	movs	r2, #0
 800eac6:	4618      	mov	r0, r3
 800eac8:	f7fe fbec 	bl	800d2a4 <xQueueReceive>
 800eacc:	4603      	mov	r3, r0
 800eace:	2b00      	cmp	r3, #0
 800ead0:	f47f af2a 	bne.w	800e928 <prvProcessReceivedCommands+0x8>
	}
}
 800ead4:	bf00      	nop
 800ead6:	bf00      	nop
 800ead8:	3730      	adds	r7, #48	; 0x30
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}
 800eade:	bf00      	nop
 800eae0:	20005248 	.word	0x20005248

0800eae4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b088      	sub	sp, #32
 800eae8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eaea:	e048      	b.n	800eb7e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eaec:	4b2d      	ldr	r3, [pc, #180]	; (800eba4 <prvSwitchTimerLists+0xc0>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eaf6:	4b2b      	ldr	r3, [pc, #172]	; (800eba4 <prvSwitchTimerLists+0xc0>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	68db      	ldr	r3, [r3, #12]
 800eafc:	68db      	ldr	r3, [r3, #12]
 800eafe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	3304      	adds	r3, #4
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7fd feb7 	bl	800c878 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	6a1b      	ldr	r3, [r3, #32]
 800eb0e:	68f8      	ldr	r0, [r7, #12]
 800eb10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb18:	f003 0304 	and.w	r3, r3, #4
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d02e      	beq.n	800eb7e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	699b      	ldr	r3, [r3, #24]
 800eb24:	693a      	ldr	r2, [r7, #16]
 800eb26:	4413      	add	r3, r2
 800eb28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eb2a:	68ba      	ldr	r2, [r7, #8]
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d90e      	bls.n	800eb50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	68ba      	ldr	r2, [r7, #8]
 800eb36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	68fa      	ldr	r2, [r7, #12]
 800eb3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eb3e:	4b19      	ldr	r3, [pc, #100]	; (800eba4 <prvSwitchTimerLists+0xc0>)
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	3304      	adds	r3, #4
 800eb46:	4619      	mov	r1, r3
 800eb48:	4610      	mov	r0, r2
 800eb4a:	f7fd fe5c 	bl	800c806 <vListInsert>
 800eb4e:	e016      	b.n	800eb7e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eb50:	2300      	movs	r3, #0
 800eb52:	9300      	str	r3, [sp, #0]
 800eb54:	2300      	movs	r3, #0
 800eb56:	693a      	ldr	r2, [r7, #16]
 800eb58:	2100      	movs	r1, #0
 800eb5a:	68f8      	ldr	r0, [r7, #12]
 800eb5c:	f7ff fd60 	bl	800e620 <xTimerGenericCommand>
 800eb60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d10a      	bne.n	800eb7e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800eb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb6c:	f383 8811 	msr	BASEPRI, r3
 800eb70:	f3bf 8f6f 	isb	sy
 800eb74:	f3bf 8f4f 	dsb	sy
 800eb78:	603b      	str	r3, [r7, #0]
}
 800eb7a:	bf00      	nop
 800eb7c:	e7fe      	b.n	800eb7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eb7e:	4b09      	ldr	r3, [pc, #36]	; (800eba4 <prvSwitchTimerLists+0xc0>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d1b1      	bne.n	800eaec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800eb88:	4b06      	ldr	r3, [pc, #24]	; (800eba4 <prvSwitchTimerLists+0xc0>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eb8e:	4b06      	ldr	r3, [pc, #24]	; (800eba8 <prvSwitchTimerLists+0xc4>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	4a04      	ldr	r2, [pc, #16]	; (800eba4 <prvSwitchTimerLists+0xc0>)
 800eb94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eb96:	4a04      	ldr	r2, [pc, #16]	; (800eba8 <prvSwitchTimerLists+0xc4>)
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	6013      	str	r3, [r2, #0]
}
 800eb9c:	bf00      	nop
 800eb9e:	3718      	adds	r7, #24
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}
 800eba4:	20005240 	.word	0x20005240
 800eba8:	20005244 	.word	0x20005244

0800ebac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ebb2:	f7fd ffb7 	bl	800cb24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ebb6:	4b15      	ldr	r3, [pc, #84]	; (800ec0c <prvCheckForValidListAndQueue+0x60>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d120      	bne.n	800ec00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ebbe:	4814      	ldr	r0, [pc, #80]	; (800ec10 <prvCheckForValidListAndQueue+0x64>)
 800ebc0:	f7fd fdd0 	bl	800c764 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ebc4:	4813      	ldr	r0, [pc, #76]	; (800ec14 <prvCheckForValidListAndQueue+0x68>)
 800ebc6:	f7fd fdcd 	bl	800c764 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ebca:	4b13      	ldr	r3, [pc, #76]	; (800ec18 <prvCheckForValidListAndQueue+0x6c>)
 800ebcc:	4a10      	ldr	r2, [pc, #64]	; (800ec10 <prvCheckForValidListAndQueue+0x64>)
 800ebce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ebd0:	4b12      	ldr	r3, [pc, #72]	; (800ec1c <prvCheckForValidListAndQueue+0x70>)
 800ebd2:	4a10      	ldr	r2, [pc, #64]	; (800ec14 <prvCheckForValidListAndQueue+0x68>)
 800ebd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	9300      	str	r3, [sp, #0]
 800ebda:	4b11      	ldr	r3, [pc, #68]	; (800ec20 <prvCheckForValidListAndQueue+0x74>)
 800ebdc:	4a11      	ldr	r2, [pc, #68]	; (800ec24 <prvCheckForValidListAndQueue+0x78>)
 800ebde:	2110      	movs	r1, #16
 800ebe0:	200a      	movs	r0, #10
 800ebe2:	f7fe f929 	bl	800ce38 <xQueueGenericCreateStatic>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	4a08      	ldr	r2, [pc, #32]	; (800ec0c <prvCheckForValidListAndQueue+0x60>)
 800ebea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ebec:	4b07      	ldr	r3, [pc, #28]	; (800ec0c <prvCheckForValidListAndQueue+0x60>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d005      	beq.n	800ec00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ebf4:	4b05      	ldr	r3, [pc, #20]	; (800ec0c <prvCheckForValidListAndQueue+0x60>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	490b      	ldr	r1, [pc, #44]	; (800ec28 <prvCheckForValidListAndQueue+0x7c>)
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7fe fd42 	bl	800d684 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ec00:	f7fd ffc0 	bl	800cb84 <vPortExitCritical>
}
 800ec04:	bf00      	nop
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}
 800ec0a:	bf00      	nop
 800ec0c:	20005248 	.word	0x20005248
 800ec10:	20005218 	.word	0x20005218
 800ec14:	2000522c 	.word	0x2000522c
 800ec18:	20005240 	.word	0x20005240
 800ec1c:	20005244 	.word	0x20005244
 800ec20:	200052f4 	.word	0x200052f4
 800ec24:	20005254 	.word	0x20005254
 800ec28:	0800f544 	.word	0x0800f544

0800ec2c <__libc_init_array>:
 800ec2c:	b570      	push	{r4, r5, r6, lr}
 800ec2e:	4d0d      	ldr	r5, [pc, #52]	; (800ec64 <__libc_init_array+0x38>)
 800ec30:	4c0d      	ldr	r4, [pc, #52]	; (800ec68 <__libc_init_array+0x3c>)
 800ec32:	1b64      	subs	r4, r4, r5
 800ec34:	10a4      	asrs	r4, r4, #2
 800ec36:	2600      	movs	r6, #0
 800ec38:	42a6      	cmp	r6, r4
 800ec3a:	d109      	bne.n	800ec50 <__libc_init_array+0x24>
 800ec3c:	4d0b      	ldr	r5, [pc, #44]	; (800ec6c <__libc_init_array+0x40>)
 800ec3e:	4c0c      	ldr	r4, [pc, #48]	; (800ec70 <__libc_init_array+0x44>)
 800ec40:	f000 f8f0 	bl	800ee24 <_init>
 800ec44:	1b64      	subs	r4, r4, r5
 800ec46:	10a4      	asrs	r4, r4, #2
 800ec48:	2600      	movs	r6, #0
 800ec4a:	42a6      	cmp	r6, r4
 800ec4c:	d105      	bne.n	800ec5a <__libc_init_array+0x2e>
 800ec4e:	bd70      	pop	{r4, r5, r6, pc}
 800ec50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec54:	4798      	blx	r3
 800ec56:	3601      	adds	r6, #1
 800ec58:	e7ee      	b.n	800ec38 <__libc_init_array+0xc>
 800ec5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec5e:	4798      	blx	r3
 800ec60:	3601      	adds	r6, #1
 800ec62:	e7f2      	b.n	800ec4a <__libc_init_array+0x1e>
 800ec64:	0800f61c 	.word	0x0800f61c
 800ec68:	0800f61c 	.word	0x0800f61c
 800ec6c:	0800f61c 	.word	0x0800f61c
 800ec70:	0800f620 	.word	0x0800f620

0800ec74 <memcpy>:
 800ec74:	440a      	add	r2, r1
 800ec76:	4291      	cmp	r1, r2
 800ec78:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec7c:	d100      	bne.n	800ec80 <memcpy+0xc>
 800ec7e:	4770      	bx	lr
 800ec80:	b510      	push	{r4, lr}
 800ec82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec8a:	4291      	cmp	r1, r2
 800ec8c:	d1f9      	bne.n	800ec82 <memcpy+0xe>
 800ec8e:	bd10      	pop	{r4, pc}

0800ec90 <memset>:
 800ec90:	4402      	add	r2, r0
 800ec92:	4603      	mov	r3, r0
 800ec94:	4293      	cmp	r3, r2
 800ec96:	d100      	bne.n	800ec9a <memset+0xa>
 800ec98:	4770      	bx	lr
 800ec9a:	f803 1b01 	strb.w	r1, [r3], #1
 800ec9e:	e7f9      	b.n	800ec94 <memset+0x4>

0800eca0 <_free_r>:
 800eca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eca2:	2900      	cmp	r1, #0
 800eca4:	d044      	beq.n	800ed30 <_free_r+0x90>
 800eca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecaa:	9001      	str	r0, [sp, #4]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	f1a1 0404 	sub.w	r4, r1, #4
 800ecb2:	bfb8      	it	lt
 800ecb4:	18e4      	addlt	r4, r4, r3
 800ecb6:	f000 f8a9 	bl	800ee0c <__malloc_lock>
 800ecba:	4a1e      	ldr	r2, [pc, #120]	; (800ed34 <_free_r+0x94>)
 800ecbc:	9801      	ldr	r0, [sp, #4]
 800ecbe:	6813      	ldr	r3, [r2, #0]
 800ecc0:	b933      	cbnz	r3, 800ecd0 <_free_r+0x30>
 800ecc2:	6063      	str	r3, [r4, #4]
 800ecc4:	6014      	str	r4, [r2, #0]
 800ecc6:	b003      	add	sp, #12
 800ecc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eccc:	f000 b8a4 	b.w	800ee18 <__malloc_unlock>
 800ecd0:	42a3      	cmp	r3, r4
 800ecd2:	d908      	bls.n	800ece6 <_free_r+0x46>
 800ecd4:	6825      	ldr	r5, [r4, #0]
 800ecd6:	1961      	adds	r1, r4, r5
 800ecd8:	428b      	cmp	r3, r1
 800ecda:	bf01      	itttt	eq
 800ecdc:	6819      	ldreq	r1, [r3, #0]
 800ecde:	685b      	ldreq	r3, [r3, #4]
 800ece0:	1949      	addeq	r1, r1, r5
 800ece2:	6021      	streq	r1, [r4, #0]
 800ece4:	e7ed      	b.n	800ecc2 <_free_r+0x22>
 800ece6:	461a      	mov	r2, r3
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	b10b      	cbz	r3, 800ecf0 <_free_r+0x50>
 800ecec:	42a3      	cmp	r3, r4
 800ecee:	d9fa      	bls.n	800ece6 <_free_r+0x46>
 800ecf0:	6811      	ldr	r1, [r2, #0]
 800ecf2:	1855      	adds	r5, r2, r1
 800ecf4:	42a5      	cmp	r5, r4
 800ecf6:	d10b      	bne.n	800ed10 <_free_r+0x70>
 800ecf8:	6824      	ldr	r4, [r4, #0]
 800ecfa:	4421      	add	r1, r4
 800ecfc:	1854      	adds	r4, r2, r1
 800ecfe:	42a3      	cmp	r3, r4
 800ed00:	6011      	str	r1, [r2, #0]
 800ed02:	d1e0      	bne.n	800ecc6 <_free_r+0x26>
 800ed04:	681c      	ldr	r4, [r3, #0]
 800ed06:	685b      	ldr	r3, [r3, #4]
 800ed08:	6053      	str	r3, [r2, #4]
 800ed0a:	4421      	add	r1, r4
 800ed0c:	6011      	str	r1, [r2, #0]
 800ed0e:	e7da      	b.n	800ecc6 <_free_r+0x26>
 800ed10:	d902      	bls.n	800ed18 <_free_r+0x78>
 800ed12:	230c      	movs	r3, #12
 800ed14:	6003      	str	r3, [r0, #0]
 800ed16:	e7d6      	b.n	800ecc6 <_free_r+0x26>
 800ed18:	6825      	ldr	r5, [r4, #0]
 800ed1a:	1961      	adds	r1, r4, r5
 800ed1c:	428b      	cmp	r3, r1
 800ed1e:	bf04      	itt	eq
 800ed20:	6819      	ldreq	r1, [r3, #0]
 800ed22:	685b      	ldreq	r3, [r3, #4]
 800ed24:	6063      	str	r3, [r4, #4]
 800ed26:	bf04      	itt	eq
 800ed28:	1949      	addeq	r1, r1, r5
 800ed2a:	6021      	streq	r1, [r4, #0]
 800ed2c:	6054      	str	r4, [r2, #4]
 800ed2e:	e7ca      	b.n	800ecc6 <_free_r+0x26>
 800ed30:	b003      	add	sp, #12
 800ed32:	bd30      	pop	{r4, r5, pc}
 800ed34:	20005344 	.word	0x20005344

0800ed38 <cleanup_glue>:
 800ed38:	b538      	push	{r3, r4, r5, lr}
 800ed3a:	460c      	mov	r4, r1
 800ed3c:	6809      	ldr	r1, [r1, #0]
 800ed3e:	4605      	mov	r5, r0
 800ed40:	b109      	cbz	r1, 800ed46 <cleanup_glue+0xe>
 800ed42:	f7ff fff9 	bl	800ed38 <cleanup_glue>
 800ed46:	4621      	mov	r1, r4
 800ed48:	4628      	mov	r0, r5
 800ed4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed4e:	f7ff bfa7 	b.w	800eca0 <_free_r>
	...

0800ed54 <_reclaim_reent>:
 800ed54:	4b2c      	ldr	r3, [pc, #176]	; (800ee08 <_reclaim_reent+0xb4>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	4283      	cmp	r3, r0
 800ed5a:	b570      	push	{r4, r5, r6, lr}
 800ed5c:	4604      	mov	r4, r0
 800ed5e:	d051      	beq.n	800ee04 <_reclaim_reent+0xb0>
 800ed60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ed62:	b143      	cbz	r3, 800ed76 <_reclaim_reent+0x22>
 800ed64:	68db      	ldr	r3, [r3, #12]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d14a      	bne.n	800ee00 <_reclaim_reent+0xac>
 800ed6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed6c:	6819      	ldr	r1, [r3, #0]
 800ed6e:	b111      	cbz	r1, 800ed76 <_reclaim_reent+0x22>
 800ed70:	4620      	mov	r0, r4
 800ed72:	f7ff ff95 	bl	800eca0 <_free_r>
 800ed76:	6961      	ldr	r1, [r4, #20]
 800ed78:	b111      	cbz	r1, 800ed80 <_reclaim_reent+0x2c>
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	f7ff ff90 	bl	800eca0 <_free_r>
 800ed80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ed82:	b111      	cbz	r1, 800ed8a <_reclaim_reent+0x36>
 800ed84:	4620      	mov	r0, r4
 800ed86:	f7ff ff8b 	bl	800eca0 <_free_r>
 800ed8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ed8c:	b111      	cbz	r1, 800ed94 <_reclaim_reent+0x40>
 800ed8e:	4620      	mov	r0, r4
 800ed90:	f7ff ff86 	bl	800eca0 <_free_r>
 800ed94:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ed96:	b111      	cbz	r1, 800ed9e <_reclaim_reent+0x4a>
 800ed98:	4620      	mov	r0, r4
 800ed9a:	f7ff ff81 	bl	800eca0 <_free_r>
 800ed9e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800eda0:	b111      	cbz	r1, 800eda8 <_reclaim_reent+0x54>
 800eda2:	4620      	mov	r0, r4
 800eda4:	f7ff ff7c 	bl	800eca0 <_free_r>
 800eda8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800edaa:	b111      	cbz	r1, 800edb2 <_reclaim_reent+0x5e>
 800edac:	4620      	mov	r0, r4
 800edae:	f7ff ff77 	bl	800eca0 <_free_r>
 800edb2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800edb4:	b111      	cbz	r1, 800edbc <_reclaim_reent+0x68>
 800edb6:	4620      	mov	r0, r4
 800edb8:	f7ff ff72 	bl	800eca0 <_free_r>
 800edbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edbe:	b111      	cbz	r1, 800edc6 <_reclaim_reent+0x72>
 800edc0:	4620      	mov	r0, r4
 800edc2:	f7ff ff6d 	bl	800eca0 <_free_r>
 800edc6:	69a3      	ldr	r3, [r4, #24]
 800edc8:	b1e3      	cbz	r3, 800ee04 <_reclaim_reent+0xb0>
 800edca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800edcc:	4620      	mov	r0, r4
 800edce:	4798      	blx	r3
 800edd0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800edd2:	b1b9      	cbz	r1, 800ee04 <_reclaim_reent+0xb0>
 800edd4:	4620      	mov	r0, r4
 800edd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800edda:	f7ff bfad 	b.w	800ed38 <cleanup_glue>
 800edde:	5949      	ldr	r1, [r1, r5]
 800ede0:	b941      	cbnz	r1, 800edf4 <_reclaim_reent+0xa0>
 800ede2:	3504      	adds	r5, #4
 800ede4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ede6:	2d80      	cmp	r5, #128	; 0x80
 800ede8:	68d9      	ldr	r1, [r3, #12]
 800edea:	d1f8      	bne.n	800edde <_reclaim_reent+0x8a>
 800edec:	4620      	mov	r0, r4
 800edee:	f7ff ff57 	bl	800eca0 <_free_r>
 800edf2:	e7ba      	b.n	800ed6a <_reclaim_reent+0x16>
 800edf4:	680e      	ldr	r6, [r1, #0]
 800edf6:	4620      	mov	r0, r4
 800edf8:	f7ff ff52 	bl	800eca0 <_free_r>
 800edfc:	4631      	mov	r1, r6
 800edfe:	e7ef      	b.n	800ede0 <_reclaim_reent+0x8c>
 800ee00:	2500      	movs	r5, #0
 800ee02:	e7ef      	b.n	800ede4 <_reclaim_reent+0x90>
 800ee04:	bd70      	pop	{r4, r5, r6, pc}
 800ee06:	bf00      	nop
 800ee08:	20000014 	.word	0x20000014

0800ee0c <__malloc_lock>:
 800ee0c:	4801      	ldr	r0, [pc, #4]	; (800ee14 <__malloc_lock+0x8>)
 800ee0e:	f7f4 b9f8 	b.w	8003202 <__retarget_lock_acquire_recursive>
 800ee12:	bf00      	nop
 800ee14:	20000904 	.word	0x20000904

0800ee18 <__malloc_unlock>:
 800ee18:	4801      	ldr	r0, [pc, #4]	; (800ee20 <__malloc_unlock+0x8>)
 800ee1a:	f7f4 ba06 	b.w	800322a <__retarget_lock_release_recursive>
 800ee1e:	bf00      	nop
 800ee20:	20000904 	.word	0x20000904

0800ee24 <_init>:
 800ee24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee26:	bf00      	nop
 800ee28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee2a:	bc08      	pop	{r3}
 800ee2c:	469e      	mov	lr, r3
 800ee2e:	4770      	bx	lr

0800ee30 <_fini>:
 800ee30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee32:	bf00      	nop
 800ee34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee36:	bc08      	pop	{r3}
 800ee38:	469e      	mov	lr, r3
 800ee3a:	4770      	bx	lr
