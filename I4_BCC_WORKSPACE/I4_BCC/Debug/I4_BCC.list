
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eacc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  0800ec6c  0800ec6c  0001ec6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f444  0800f444  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800f444  0800f444  0001f444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f44c  0800f44c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f44c  0800f44c  0001f44c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f450  0800f450  0001f450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800f454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052c0  20000078  0800f4cc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005338  0800f4cc  00025338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002db5f  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006a6b  00000000  00000000  0004dc07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002478  00000000  00000000  00054678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021a8  00000000  00000000  00056af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002157e  00000000  00000000  00058c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003aa2d  00000000  00000000  0007a216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b59dd  00000000  00000000  000b4c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016a620  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000976c  00000000  00000000  0016a670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ec54 	.word	0x0800ec54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800ec54 	.word	0x0800ec54

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <BtcRxVal>:
	return E_OK;

}

StdReturnType BtcRxVal()
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

	if(BtcReceivedDataOnBluetooth >= BTC_RX_HVAC_TEMPERATUREVALUE_MIN && BtcReceivedDataOnBluetooth <= BTC_RX_HVAC_TEMPERATUREVALUE_MAX)
 80004e8:	4bec      	ldr	r3, [pc, #944]	; (800089c <BtcRxVal+0x3b8>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b95      	cmp	r3, #149	; 0x95
 80004ee:	d908      	bls.n	8000502 <BtcRxVal+0x1e>
 80004f0:	4bea      	ldr	r3, [pc, #936]	; (800089c <BtcRxVal+0x3b8>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2ba6      	cmp	r3, #166	; 0xa6
 80004f6:	d804      	bhi.n	8000502 <BtcRxVal+0x1e>
	{

		Btc_TemperatureValue = BtcReceivedDataOnBluetooth;
 80004f8:	4be8      	ldr	r3, [pc, #928]	; (800089c <BtcRxVal+0x3b8>)
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	4be8      	ldr	r3, [pc, #928]	; (80008a0 <BtcRxVal+0x3bc>)
 80004fe:	701a      	strb	r2, [r3, #0]
 8000500:	e00b      	b.n	800051a <BtcRxVal+0x36>

	}
	else if(BtcReceivedDataOnBluetooth >= BTC_RX_HVAC_FANVALUE_MIN && BtcReceivedDataOnBluetooth <= BTC_RX_HVAC_FANVALUE_MAX)
 8000502:	4be6      	ldr	r3, [pc, #920]	; (800089c <BtcRxVal+0x3b8>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2ba9      	cmp	r3, #169	; 0xa9
 8000508:	d907      	bls.n	800051a <BtcRxVal+0x36>
 800050a:	4be4      	ldr	r3, [pc, #912]	; (800089c <BtcRxVal+0x3b8>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2bb1      	cmp	r3, #177	; 0xb1
 8000510:	d803      	bhi.n	800051a <BtcRxVal+0x36>
	{

		Btc_FanValue = BtcReceivedDataOnBluetooth;
 8000512:	4be2      	ldr	r3, [pc, #904]	; (800089c <BtcRxVal+0x3b8>)
 8000514:	781a      	ldrb	r2, [r3, #0]
 8000516:	4be3      	ldr	r3, [pc, #908]	; (80008a4 <BtcRxVal+0x3c0>)
 8000518:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	switch(BtcReceivedDataOnBluetooth)
 800051a:	4be0      	ldr	r3, [pc, #896]	; (800089c <BtcRxVal+0x3b8>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	3b01      	subs	r3, #1
 8000520:	2bd5      	cmp	r3, #213	; 0xd5
 8000522:	f200 8268 	bhi.w	80009f6 <BtcRxVal+0x512>
 8000526:	a201      	add	r2, pc, #4	; (adr r2, 800052c <BtcRxVal+0x48>)
 8000528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052c:	080008b5 	.word	0x080008b5
 8000530:	080008bd 	.word	0x080008bd
 8000534:	080008c5 	.word	0x080008c5
 8000538:	080008cd 	.word	0x080008cd
 800053c:	080008d5 	.word	0x080008d5
 8000540:	080008dd 	.word	0x080008dd
 8000544:	080008e5 	.word	0x080008e5
 8000548:	080008ed 	.word	0x080008ed
 800054c:	080008f5 	.word	0x080008f5
 8000550:	080008fd 	.word	0x080008fd
 8000554:	08000905 	.word	0x08000905
 8000558:	0800090d 	.word	0x0800090d
 800055c:	08000915 	.word	0x08000915
 8000560:	0800091d 	.word	0x0800091d
 8000564:	08000925 	.word	0x08000925
 8000568:	0800092d 	.word	0x0800092d
 800056c:	08000935 	.word	0x08000935
 8000570:	0800093d 	.word	0x0800093d
 8000574:	08000945 	.word	0x08000945
 8000578:	0800094d 	.word	0x0800094d
 800057c:	080009f7 	.word	0x080009f7
 8000580:	080009f7 	.word	0x080009f7
 8000584:	080009f7 	.word	0x080009f7
 8000588:	080009f7 	.word	0x080009f7
 800058c:	080009f7 	.word	0x080009f7
 8000590:	080009f7 	.word	0x080009f7
 8000594:	080009f7 	.word	0x080009f7
 8000598:	080009f7 	.word	0x080009f7
 800059c:	080009f7 	.word	0x080009f7
 80005a0:	080009f7 	.word	0x080009f7
 80005a4:	080009f7 	.word	0x080009f7
 80005a8:	080009f7 	.word	0x080009f7
 80005ac:	080009f7 	.word	0x080009f7
 80005b0:	080009f7 	.word	0x080009f7
 80005b4:	080009f7 	.word	0x080009f7
 80005b8:	080009f7 	.word	0x080009f7
 80005bc:	080009f7 	.word	0x080009f7
 80005c0:	080009f7 	.word	0x080009f7
 80005c4:	080009f7 	.word	0x080009f7
 80005c8:	080009f7 	.word	0x080009f7
 80005cc:	080009f7 	.word	0x080009f7
 80005d0:	080009f7 	.word	0x080009f7
 80005d4:	080009f7 	.word	0x080009f7
 80005d8:	080009f7 	.word	0x080009f7
 80005dc:	080009f7 	.word	0x080009f7
 80005e0:	080009f7 	.word	0x080009f7
 80005e4:	080009f7 	.word	0x080009f7
 80005e8:	080009f7 	.word	0x080009f7
 80005ec:	080009f7 	.word	0x080009f7
 80005f0:	080009f7 	.word	0x080009f7
 80005f4:	080009f7 	.word	0x080009f7
 80005f8:	080009f7 	.word	0x080009f7
 80005fc:	080009f7 	.word	0x080009f7
 8000600:	080009f7 	.word	0x080009f7
 8000604:	080009f7 	.word	0x080009f7
 8000608:	080009f7 	.word	0x080009f7
 800060c:	080009f7 	.word	0x080009f7
 8000610:	080009f7 	.word	0x080009f7
 8000614:	080009f7 	.word	0x080009f7
 8000618:	080009f7 	.word	0x080009f7
 800061c:	080009f7 	.word	0x080009f7
 8000620:	080009f7 	.word	0x080009f7
 8000624:	080009f7 	.word	0x080009f7
 8000628:	080009f7 	.word	0x080009f7
 800062c:	080009f7 	.word	0x080009f7
 8000630:	080009f7 	.word	0x080009f7
 8000634:	080009f7 	.word	0x080009f7
 8000638:	080009f7 	.word	0x080009f7
 800063c:	080009f7 	.word	0x080009f7
 8000640:	080009f7 	.word	0x080009f7
 8000644:	080009f7 	.word	0x080009f7
 8000648:	080009f7 	.word	0x080009f7
 800064c:	080009f7 	.word	0x080009f7
 8000650:	080009f7 	.word	0x080009f7
 8000654:	080009f7 	.word	0x080009f7
 8000658:	080009f7 	.word	0x080009f7
 800065c:	080009f7 	.word	0x080009f7
 8000660:	080009f7 	.word	0x080009f7
 8000664:	080009f7 	.word	0x080009f7
 8000668:	080009f7 	.word	0x080009f7
 800066c:	080009f7 	.word	0x080009f7
 8000670:	080009f7 	.word	0x080009f7
 8000674:	080009f7 	.word	0x080009f7
 8000678:	080009f7 	.word	0x080009f7
 800067c:	080009f7 	.word	0x080009f7
 8000680:	080009f7 	.word	0x080009f7
 8000684:	080009f7 	.word	0x080009f7
 8000688:	080009f7 	.word	0x080009f7
 800068c:	080009f7 	.word	0x080009f7
 8000690:	080009f7 	.word	0x080009f7
 8000694:	080009f7 	.word	0x080009f7
 8000698:	080009f7 	.word	0x080009f7
 800069c:	080009f7 	.word	0x080009f7
 80006a0:	080009f7 	.word	0x080009f7
 80006a4:	080009f7 	.word	0x080009f7
 80006a8:	080009f7 	.word	0x080009f7
 80006ac:	080009f7 	.word	0x080009f7
 80006b0:	080009f7 	.word	0x080009f7
 80006b4:	080009f7 	.word	0x080009f7
 80006b8:	08000885 	.word	0x08000885
 80006bc:	0800088d 	.word	0x0800088d
 80006c0:	08000895 	.word	0x08000895
 80006c4:	080008ad 	.word	0x080008ad
 80006c8:	080009f7 	.word	0x080009f7
 80006cc:	080009f7 	.word	0x080009f7
 80006d0:	080009f7 	.word	0x080009f7
 80006d4:	080009f7 	.word	0x080009f7
 80006d8:	080009f7 	.word	0x080009f7
 80006dc:	080009f7 	.word	0x080009f7
 80006e0:	080009f7 	.word	0x080009f7
 80006e4:	080009f7 	.word	0x080009f7
 80006e8:	080009f7 	.word	0x080009f7
 80006ec:	080009f7 	.word	0x080009f7
 80006f0:	080009f7 	.word	0x080009f7
 80006f4:	080009f7 	.word	0x080009f7
 80006f8:	080009f7 	.word	0x080009f7
 80006fc:	080009f7 	.word	0x080009f7
 8000700:	080009f7 	.word	0x080009f7
 8000704:	080009f7 	.word	0x080009f7
 8000708:	080009f7 	.word	0x080009f7
 800070c:	080009f7 	.word	0x080009f7
 8000710:	080009f7 	.word	0x080009f7
 8000714:	080009f7 	.word	0x080009f7
 8000718:	080009f7 	.word	0x080009f7
 800071c:	080009f7 	.word	0x080009f7
 8000720:	080009f7 	.word	0x080009f7
 8000724:	080009f7 	.word	0x080009f7
 8000728:	080009f7 	.word	0x080009f7
 800072c:	080009f7 	.word	0x080009f7
 8000730:	080009f7 	.word	0x080009f7
 8000734:	080009f7 	.word	0x080009f7
 8000738:	080009f7 	.word	0x080009f7
 800073c:	080009f7 	.word	0x080009f7
 8000740:	080009f7 	.word	0x080009f7
 8000744:	080009f7 	.word	0x080009f7
 8000748:	080009f7 	.word	0x080009f7
 800074c:	080009f7 	.word	0x080009f7
 8000750:	080009f7 	.word	0x080009f7
 8000754:	080009f7 	.word	0x080009f7
 8000758:	080009f7 	.word	0x080009f7
 800075c:	080009f7 	.word	0x080009f7
 8000760:	080009f7 	.word	0x080009f7
 8000764:	080009f7 	.word	0x080009f7
 8000768:	080009f7 	.word	0x080009f7
 800076c:	080009f7 	.word	0x080009f7
 8000770:	080009f7 	.word	0x080009f7
 8000774:	080009f7 	.word	0x080009f7
 8000778:	080009f7 	.word	0x080009f7
 800077c:	080009f7 	.word	0x080009f7
 8000780:	080009f7 	.word	0x080009f7
 8000784:	080009f7 	.word	0x080009f7
 8000788:	080009f7 	.word	0x080009f7
 800078c:	080009f7 	.word	0x080009f7
 8000790:	080009f7 	.word	0x080009f7
 8000794:	080009f7 	.word	0x080009f7
 8000798:	080009f7 	.word	0x080009f7
 800079c:	080009f7 	.word	0x080009f7
 80007a0:	080009f7 	.word	0x080009f7
 80007a4:	080009f7 	.word	0x080009f7
 80007a8:	080009f7 	.word	0x080009f7
 80007ac:	080009f7 	.word	0x080009f7
 80007b0:	080009f7 	.word	0x080009f7
 80007b4:	080009f7 	.word	0x080009f7
 80007b8:	080009f7 	.word	0x080009f7
 80007bc:	080009f7 	.word	0x080009f7
 80007c0:	080009f7 	.word	0x080009f7
 80007c4:	080009f7 	.word	0x080009f7
 80007c8:	080009f7 	.word	0x080009f7
 80007cc:	080009f7 	.word	0x080009f7
 80007d0:	080009f7 	.word	0x080009f7
 80007d4:	080009f7 	.word	0x080009f7
 80007d8:	080009f7 	.word	0x080009f7
 80007dc:	080009f7 	.word	0x080009f7
 80007e0:	080009f7 	.word	0x080009f7
 80007e4:	080009f7 	.word	0x080009f7
 80007e8:	080009f7 	.word	0x080009f7
 80007ec:	080009f7 	.word	0x080009f7
 80007f0:	080009f7 	.word	0x080009f7
 80007f4:	080009f7 	.word	0x080009f7
 80007f8:	080009f7 	.word	0x080009f7
 80007fc:	080009f7 	.word	0x080009f7
 8000800:	080009f7 	.word	0x080009f7
 8000804:	080009f7 	.word	0x080009f7
 8000808:	080009f7 	.word	0x080009f7
 800080c:	080009f7 	.word	0x080009f7
 8000810:	080009f7 	.word	0x080009f7
 8000814:	080009f7 	.word	0x080009f7
 8000818:	080009f7 	.word	0x080009f7
 800081c:	080009f7 	.word	0x080009f7
 8000820:	080009f7 	.word	0x080009f7
 8000824:	080009f7 	.word	0x080009f7
 8000828:	080009f7 	.word	0x080009f7
 800082c:	080009f7 	.word	0x080009f7
 8000830:	080009f7 	.word	0x080009f7
 8000834:	080009f7 	.word	0x080009f7
 8000838:	080009f7 	.word	0x080009f7
 800083c:	080009f7 	.word	0x080009f7
 8000840:	080009f7 	.word	0x080009f7
 8000844:	080009f7 	.word	0x080009f7
 8000848:	08000955 	.word	0x08000955
 800084c:	0800095d 	.word	0x0800095d
 8000850:	0800096b 	.word	0x0800096b
 8000854:	0800097f 	.word	0x0800097f
 8000858:	08000987 	.word	0x08000987
 800085c:	080009e1 	.word	0x080009e1
 8000860:	080009ef 	.word	0x080009ef
 8000864:	0800098f 	.word	0x0800098f
 8000868:	08000997 	.word	0x08000997
 800086c:	0800099f 	.word	0x0800099f
 8000870:	080009ad 	.word	0x080009ad
 8000874:	080009b5 	.word	0x080009b5
 8000878:	080009c3 	.word	0x080009c3
 800087c:	080009cb 	.word	0x080009cb
 8000880:	080009d9 	.word	0x080009d9
	{
		case BTC_RX_EXTLIGHTS_POSITIONZERO:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <BtcRxVal+0x3c4>)
 8000886:	2264      	movs	r2, #100	; 0x64
 8000888:	701a      	strb	r2, [r3, #0]

			break;
 800088a:	e0b5      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <BtcRxVal+0x3c4>)
 800088e:	2265      	movs	r2, #101	; 0x65
 8000890:	701a      	strb	r2, [r3, #0]

			break;
 8000892:	e0b1      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <BtcRxVal+0x3c4>)
 8000896:	2266      	movs	r2, #102	; 0x66
 8000898:	701a      	strb	r2, [r3, #0]

			break;
 800089a:	e0ad      	b.n	80009f8 <BtcRxVal+0x514>
 800089c:	20000094 	.word	0x20000094
 80008a0:	200000ca 	.word	0x200000ca
 80008a4:	200000cb 	.word	0x200000cb
 80008a8:	200000b6 	.word	0x200000b6

		case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 80008ac:	4b55      	ldr	r3, [pc, #340]	; (8000a04 <BtcRxVal+0x520>)
 80008ae:	2267      	movs	r2, #103	; 0x67
 80008b0:	701a      	strb	r2, [r3, #0]

			break;
 80008b2:	e0a1      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_CENLOC_ON:

			Btc_CenLoc = STD_HIGH;
 80008b4:	4b54      	ldr	r3, [pc, #336]	; (8000a08 <BtcRxVal+0x524>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]

			break;
 80008ba:	e09d      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_CENLOC_OFF:

			Btc_CenLoc = STD_LOW;
 80008bc:	4b52      	ldr	r3, [pc, #328]	; (8000a08 <BtcRxVal+0x524>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]

			break;
 80008c2:	e099      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_HIGBEAM_ON:

			Btc_HighBeam = STD_HIGH;
 80008c4:	4b51      	ldr	r3, [pc, #324]	; (8000a0c <BtcRxVal+0x528>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	701a      	strb	r2, [r3, #0]

			break;
 80008ca:	e095      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_HIGBEAM_OFF:

			Btc_HighBeam = STD_LOW;
 80008cc:	4b4f      	ldr	r3, [pc, #316]	; (8000a0c <BtcRxVal+0x528>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]

			break;
 80008d2:	e091      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON:

			Btc_FlashHighBeam = STD_HIGH;
 80008d4:	4b4e      	ldr	r3, [pc, #312]	; (8000a10 <BtcRxVal+0x52c>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]

			break;
 80008da:	e08d      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF:

			Btc_FlashHighBeam = STD_LOW;
 80008dc:	4b4c      	ldr	r3, [pc, #304]	; (8000a10 <BtcRxVal+0x52c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]

			break;
 80008e2:	e089      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:

			Btc_TurnSignalLeft = STD_HIGH;
 80008e4:	4b4b      	ldr	r3, [pc, #300]	; (8000a14 <BtcRxVal+0x530>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]

			break;
 80008ea:	e085      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:

			Btc_TurnSignalLeft = STD_LOW;
 80008ec:	4b49      	ldr	r3, [pc, #292]	; (8000a14 <BtcRxVal+0x530>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]

			break;
 80008f2:	e081      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_ON:

			Btc_TurnSignalRight = STD_HIGH;
 80008f4:	4b48      	ldr	r3, [pc, #288]	; (8000a18 <BtcRxVal+0x534>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]

			break;
 80008fa:	e07d      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_OFF:

			Btc_TurnSignalRight = STD_LOW;
 80008fc:	4b46      	ldr	r3, [pc, #280]	; (8000a18 <BtcRxVal+0x534>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]

			break;
 8000902:	e079      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:

			Btc_HazardLight = STD_HIGH;
 8000904:	4b45      	ldr	r3, [pc, #276]	; (8000a1c <BtcRxVal+0x538>)
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]

			break;
 800090a:	e075      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:

			Btc_HazardLight = STD_LOW;
 800090c:	4b43      	ldr	r3, [pc, #268]	; (8000a1c <BtcRxVal+0x538>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]

			break;
 8000912:	e071      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:

			Btc_FrontFogLight = STD_HIGH;
 8000914:	4b42      	ldr	r3, [pc, #264]	; (8000a20 <BtcRxVal+0x53c>)
 8000916:	2201      	movs	r2, #1
 8000918:	701a      	strb	r2, [r3, #0]

			break;
 800091a:	e06d      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:

			Btc_FrontFogLight = STD_LOW;
 800091c:	4b40      	ldr	r3, [pc, #256]	; (8000a20 <BtcRxVal+0x53c>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]

			break;
 8000922:	e069      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:

			Btc_RearFogLight = STD_HIGH;
 8000924:	4b3f      	ldr	r3, [pc, #252]	; (8000a24 <BtcRxVal+0x540>)
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]

			break;
 800092a:	e065      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:

			Btc_RearFogLight = STD_LOW;
 800092c:	4b3d      	ldr	r3, [pc, #244]	; (8000a24 <BtcRxVal+0x540>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]

			break;
 8000932:	e061      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTON:

			Btc_BrakeLight = STD_HIGH;
 8000934:	4b3c      	ldr	r3, [pc, #240]	; (8000a28 <BtcRxVal+0x544>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]

			break;
 800093a:	e05d      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:

			Btc_BrakeLight = STD_LOW;
 800093c:	4b3a      	ldr	r3, [pc, #232]	; (8000a28 <BtcRxVal+0x544>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]

			break;
 8000942:	e059      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:

			Btc_IntLights = STD_HIGH;
 8000944:	4b39      	ldr	r3, [pc, #228]	; (8000a2c <BtcRxVal+0x548>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]

			break;
 800094a:	e055      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:

			Btc_IntLights = STD_LOW;
 800094c:	4b37      	ldr	r3, [pc, #220]	; (8000a2c <BtcRxVal+0x548>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]

			break;
 8000952:	e051      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_NORMALMODE_ON:

			Btc_NormalMode = STD_HIGH;
 8000954:	4b36      	ldr	r3, [pc, #216]	; (8000a30 <BtcRxVal+0x54c>)
 8000956:	2201      	movs	r2, #1
 8000958:	701a      	strb	r2, [r3, #0]

			break;
 800095a:	e04d      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_RECIRCULATIONMODE_ON:

			Btc_NormalMode = STD_LOW;
 800095c:	4b34      	ldr	r3, [pc, #208]	; (8000a30 <BtcRxVal+0x54c>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
			Btc_RecirculationMode = STD_HIGH;
 8000962:	4b34      	ldr	r3, [pc, #208]	; (8000a34 <BtcRxVal+0x550>)
 8000964:	2201      	movs	r2, #1
 8000966:	701a      	strb	r2, [r3, #0]

			break;
 8000968:	e046      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_AUTOMATICMODE_ON:

			Btc_NormalMode = STD_LOW;
 800096a:	4b31      	ldr	r3, [pc, #196]	; (8000a30 <BtcRxVal+0x54c>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
			Btc_RecirculationMode = STD_LOW;
 8000970:	4b30      	ldr	r3, [pc, #192]	; (8000a34 <BtcRxVal+0x550>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_HIGH;
 8000976:	4b30      	ldr	r3, [pc, #192]	; (8000a38 <BtcRxVal+0x554>)
 8000978:	2201      	movs	r2, #1
 800097a:	701a      	strb	r2, [r3, #0]

			break;
 800097c:	e03c      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_BACKWINDOWDEFROSTON:

			Btc_BackwindowDefrost = STD_HIGH;
 800097e:	4b2f      	ldr	r3, [pc, #188]	; (8000a3c <BtcRxVal+0x558>)
 8000980:	2201      	movs	r2, #1
 8000982:	701a      	strb	r2, [r3, #0]

			break;
 8000984:	e038      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_BACKWINDOWDEFROSTOFF:

			Btc_BackwindowDefrost = STD_LOW;
 8000986:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <BtcRxVal+0x558>)
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]

			break;
 800098c:	e034      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_AC_ON:

			Btc_AC = STD_HIGH;
 800098e:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <BtcRxVal+0x55c>)
 8000990:	2201      	movs	r2, #1
 8000992:	701a      	strb	r2, [r3, #0]

			break;
 8000994:	e030      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_AC_OFF:

			Btc_AC = STD_LOW;
 8000996:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <BtcRxVal+0x55c>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]

			break;
 800099c:	e02c      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_LEGVENT_ON:

			Btc_LegVents = STD_HIGH;
 800099e:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <BtcRxVal+0x560>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_LOW;
 80009a4:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <BtcRxVal+0x554>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]

			break;
 80009aa:	e025      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_LEGVENT_OFF:

			Btc_LegVents = STD_LOW;
 80009ac:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <BtcRxVal+0x560>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]

			break;
 80009b2:	e021      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_MIDVENT_ON:

			Btc_MidVents = STD_HIGH;
 80009b4:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <BtcRxVal+0x564>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_LOW;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <BtcRxVal+0x554>)
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]

			break;
 80009c0:	e01a      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_MIDVENT_OFF:

			Btc_MidVents = STD_LOW;
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <BtcRxVal+0x564>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]

			break;
 80009c8:	e016      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_WINDSHIELDVENT_ON:

			Btc_WindshieldVents = STD_HIGH;
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <BtcRxVal+0x568>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_LOW;
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <BtcRxVal+0x554>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]

			break;
 80009d6:	e00f      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_WINDSHIELDVENT_OFF:

			Btc_WindshieldVents = STD_LOW;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <BtcRxVal+0x568>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]

			break;
 80009de:	e00b      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_WINDSHIELDDEFROST_ON:

			Btc_WindshieldDefrost = STD_HIGH;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <BtcRxVal+0x56c>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_LOW;
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <BtcRxVal+0x554>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]

			break;
 80009ec:	e004      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_WINDSHIELDDEFROST_OFF:

			Btc_WindshieldDefrost = STD_LOW;
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <BtcRxVal+0x56c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]

			break;
 80009f4:	e000      	b.n	80009f8 <BtcRxVal+0x514>

		default:

			break;
 80009f6:	bf00      	nop

	}

	return 1;
 80009f8:	2301      	movs	r3, #1

}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	200000b6 	.word	0x200000b6
 8000a08:	2000009f 	.word	0x2000009f
 8000a0c:	200000b7 	.word	0x200000b7
 8000a10:	200000b8 	.word	0x200000b8
 8000a14:	200000ba 	.word	0x200000ba
 8000a18:	200000bb 	.word	0x200000bb
 8000a1c:	200000bc 	.word	0x200000bc
 8000a20:	200000b9 	.word	0x200000b9
 8000a24:	200000be 	.word	0x200000be
 8000a28:	200000bd 	.word	0x200000bd
 8000a2c:	200000f5 	.word	0x200000f5
 8000a30:	200000d4 	.word	0x200000d4
 8000a34:	200000d3 	.word	0x200000d3
 8000a38:	200000d2 	.word	0x200000d2
 8000a3c:	200000d0 	.word	0x200000d0
 8000a40:	200000d1 	.word	0x200000d1
 8000a44:	200000cc 	.word	0x200000cc
 8000a48:	200000cd 	.word	0x200000cd
 8000a4c:	200000ce 	.word	0x200000ce
 8000a50:	200000cf 	.word	0x200000cf

08000a54 <BtcEnableUart>:

StdReturnType BtcEnableUart()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0

	uint8 status = STD_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	71fb      	strb	r3, [r7, #7]

	if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) != E_NOT_OK)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	490e      	ldr	r1, [pc, #56]	; (8000a9c <BtcEnableUart+0x48>)
 8000a62:	480f      	ldr	r0, [pc, #60]	; (8000aa0 <BtcEnableUart+0x4c>)
 8000a64:	f00a fa4e 	bl	800af04 <HAL_UART_Receive_IT>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d007      	beq.n	8000a7e <BtcEnableUart+0x2a>
	{
		HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	490a      	ldr	r1, [pc, #40]	; (8000a9c <BtcEnableUart+0x48>)
 8000a72:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <BtcEnableUart+0x4c>)
 8000a74:	f00a fa46 	bl	800af04 <HAL_UART_Receive_IT>
		status = E_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	71fb      	strb	r3, [r7, #7]
 8000a7c:	e009      	b.n	8000a92 <BtcEnableUart+0x3e>
	}
	else if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) == E_NOT_OK)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4906      	ldr	r1, [pc, #24]	; (8000a9c <BtcEnableUart+0x48>)
 8000a82:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <BtcEnableUart+0x4c>)
 8000a84:	f00a fa3e 	bl	800af04 <HAL_UART_Receive_IT>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d101      	bne.n	8000a92 <BtcEnableUart+0x3e>
	{
		status = E_NOT_OK;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* do nothing */
	}

	return status;
 8000a92:	79fb      	ldrb	r3, [r7, #7]

}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000094 	.word	0x20000094
 8000aa0:	20000880 	.word	0x20000880

08000aa4 <BtcMainFunction>:

void BtcMainFunction()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

	BtcEnableUart();
 8000aa8:	f7ff ffd4 	bl	8000a54 <BtcEnableUart>
	BtcRxVal();
 8000aac:	f7ff fd1a 	bl	80004e4 <BtcRxVal>

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <CenLocState>:

	return E_OK;
}

StdReturnType CenLocState()
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0

	uint8 status = E_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	71fb      	strb	r3, [r7, #7]

	if(CenLoc_PreviousState != CenLoc_CurrentState)
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <CenLocState+0x64>)
 8000ac0:	781a      	ldrb	r2, [r3, #0]
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <CenLocState+0x68>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d01e      	beq.n	8000b08 <CenLocState+0x54>
	{

		CenLoc_ExtLights_LockedState 	= CenLoc_PreviousState;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <CenLocState+0x64>)
 8000acc:	781a      	ldrb	r2, [r3, #0]
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <CenLocState+0x6c>)
 8000ad0:	701a      	strb	r2, [r3, #0]
		CenLoc_ExtLights_UnlockedState 	= CenLoc_CurrentState;
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <CenLocState+0x68>)
 8000ad4:	781a      	ldrb	r2, [r3, #0]
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <CenLocState+0x70>)
 8000ad8:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 			= CenLoc_CurrentState;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <CenLocState+0x68>)
 8000adc:	781a      	ldrb	r2, [r3, #0]
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <CenLocState+0x64>)
 8000ae0:	701a      	strb	r2, [r3, #0]
		CenLoc_LockUnlockFlag 			= !CenLoc_CurrentState;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <CenLocState+0x68>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bf0c      	ite	eq
 8000aea:	2301      	moveq	r3, #1
 8000aec:	2300      	movne	r3, #0
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <CenLocState+0x74>)
 8000af4:	701a      	strb	r2, [r3, #0]
		CenLoc_LockCounter 				= STD_LOW;
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <CenLocState+0x78>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
		CenLoc_UnlockCounter 			= STD_LOW;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <CenLocState+0x7c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
		SecAlm_Counter 					= STD_LOW;
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <CenLocState+0x80>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	return status;
 8000b08:	79fb      	ldrb	r3, [r7, #7]

}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000096 	.word	0x20000096
 8000b1c:	20000095 	.word	0x20000095
 8000b20:	20000099 	.word	0x20000099
 8000b24:	20000098 	.word	0x20000098
 8000b28:	20000097 	.word	0x20000097
 8000b2c:	2000009c 	.word	0x2000009c
 8000b30:	2000009d 	.word	0x2000009d
 8000b34:	200000f7 	.word	0x200000f7

08000b38 <CenLocSecAlmStateToOff>:

void CenLocSecAlmStateToOff()
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH)
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <CenLocSecAlmStateToOff+0x1c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d102      	bne.n	8000b4a <CenLocSecAlmStateToOff+0x12>
	{

		SecAlm_Trigger = STD_LOW;
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <CenLocSecAlmStateToOff+0x20>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	20000095 	.word	0x20000095
 8000b58:	200000f6 	.word	0x200000f6

08000b5c <CenLocRxBtcState>:

void CenLocRxBtcState()
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

	if(Btc_CenLoc == STD_HIGH)
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <CenLocRxBtcState+0x30>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d104      	bne.n	8000b72 <CenLocRxBtcState+0x16>
	{

		CenLoc_CurrentState = Btc_CenLoc;
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <CenLocRxBtcState+0x30>)
 8000b6a:	781a      	ldrb	r2, [r3, #0]
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <CenLocRxBtcState+0x34>)
 8000b6e:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8000b70:	e007      	b.n	8000b82 <CenLocRxBtcState+0x26>
	else if(Btc_CenLoc == STD_LOW)
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <CenLocRxBtcState+0x30>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d103      	bne.n	8000b82 <CenLocRxBtcState+0x26>
		CenLoc_CurrentState = Btc_CenLoc;
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <CenLocRxBtcState+0x30>)
 8000b7c:	781a      	ldrb	r2, [r3, #0]
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <CenLocRxBtcState+0x34>)
 8000b80:	701a      	strb	r2, [r3, #0]
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	2000009f 	.word	0x2000009f
 8000b90:	20000095 	.word	0x20000095

08000b94 <CenLocToggleDoorLED>:

void CenLocToggleDoorLED(uint8 PinState)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CENLOC_DOOR_LED_PORT, CENLOC_DOOR_LED_PIN, PinState);
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	2140      	movs	r1, #64	; 0x40
 8000ba4:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <CenLocToggleDoorLED+0x20>)
 8000ba6:	f004 fd1b 	bl	80055e0 <HAL_GPIO_WritePin>

}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40020400 	.word	0x40020400

08000bb8 <CenLocFollowMeHome>:

void CenLocFollowMeHome()
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0


	CenLoc_Timer5Value = __HAL_TIM_GET_COUNTER(&htim5);
 8000bbc:	4b37      	ldr	r3, [pc, #220]	; (8000c9c <CenLocFollowMeHome+0xe4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc2:	4a37      	ldr	r2, [pc, #220]	; (8000ca0 <CenLocFollowMeHome+0xe8>)
 8000bc4:	6013      	str	r3, [r2, #0]

	if(CenLoc_ExtLights_LockedState == STD_LOW && CenLoc_ExtLights_UnlockedState == STD_HIGH && CenLoc_Timer5StartStopFlag == 0)
 8000bc6:	4b37      	ldr	r3, [pc, #220]	; (8000ca4 <CenLocFollowMeHome+0xec>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d115      	bne.n	8000bfa <CenLocFollowMeHome+0x42>
 8000bce:	4b36      	ldr	r3, [pc, #216]	; (8000ca8 <CenLocFollowMeHome+0xf0>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d111      	bne.n	8000bfa <CenLocFollowMeHome+0x42>
 8000bd6:	4b35      	ldr	r3, [pc, #212]	; (8000cac <CenLocFollowMeHome+0xf4>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d10d      	bne.n	8000bfa <CenLocFollowMeHome+0x42>
	{

		CenLoc_Timer5StartStopFlag = 1;
 8000bde:	4b33      	ldr	r3, [pc, #204]	; (8000cac <CenLocFollowMeHome+0xf4>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim5, 0);
 8000be4:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <CenLocFollowMeHome+0xe4>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2200      	movs	r2, #0
 8000bea:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&htim5);
 8000bec:	482b      	ldr	r0, [pc, #172]	; (8000c9c <CenLocFollowMeHome+0xe4>)
 8000bee:	f009 f867 	bl	8009cc0 <HAL_TIM_Base_Start>
		Timer5ChangeState = 1;
 8000bf2:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <CenLocFollowMeHome+0xf8>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
 8000bf8:	e018      	b.n	8000c2c <CenLocFollowMeHome+0x74>

	}
	else if(CenLoc_ExtLights_LockedState == STD_HIGH && CenLoc_ExtLights_UnlockedState == STD_LOW && CenLoc_Timer5StartStopFlag == 1)
 8000bfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <CenLocFollowMeHome+0xec>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d114      	bne.n	8000c2c <CenLocFollowMeHome+0x74>
 8000c02:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <CenLocFollowMeHome+0xf0>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d110      	bne.n	8000c2c <CenLocFollowMeHome+0x74>
 8000c0a:	4b28      	ldr	r3, [pc, #160]	; (8000cac <CenLocFollowMeHome+0xf4>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d10c      	bne.n	8000c2c <CenLocFollowMeHome+0x74>
	{

		CenLoc_Timer5StartStopFlag = 0;
 8000c12:	4b26      	ldr	r3, [pc, #152]	; (8000cac <CenLocFollowMeHome+0xf4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim5, 0);
 8000c18:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <CenLocFollowMeHome+0xe4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&htim5);
 8000c20:	481e      	ldr	r0, [pc, #120]	; (8000c9c <CenLocFollowMeHome+0xe4>)
 8000c22:	f009 f84d 	bl	8009cc0 <HAL_TIM_Base_Start>
		Timer5ChangeState = 0;
 8000c26:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <CenLocFollowMeHome+0xf8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(__HAL_TIM_GET_COUNTER(&htim5) < 100000 && (Timer5ChangeState == 1 || Timer5ChangeState == 0))
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <CenLocFollowMeHome+0xe4>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c32:	4a20      	ldr	r2, [pc, #128]	; (8000cb4 <CenLocFollowMeHome+0xfc>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d80b      	bhi.n	8000c50 <CenLocFollowMeHome+0x98>
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <CenLocFollowMeHome+0xf8>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d003      	beq.n	8000c48 <CenLocFollowMeHome+0x90>
 8000c40:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <CenLocFollowMeHome+0xf8>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d103      	bne.n	8000c50 <CenLocFollowMeHome+0x98>
	{

		CenLoc_FollowMeHomeState = STD_HIGH;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <CenLocFollowMeHome+0x100>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	e00e      	b.n	8000c6e <CenLocFollowMeHome+0xb6>

	}
	else if(__HAL_TIM_GET_COUNTER(&htim5) >= 100000)
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <CenLocFollowMeHome+0xe4>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c56:	4a17      	ldr	r2, [pc, #92]	; (8000cb4 <CenLocFollowMeHome+0xfc>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d908      	bls.n	8000c6e <CenLocFollowMeHome+0xb6>
	{

		CenLoc_FollowMeHomeState = STD_LOW;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <CenLocFollowMeHome+0x100>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
		Timer5ChangeState = 2;
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <CenLocFollowMeHome+0xf8>)
 8000c64:	2202      	movs	r2, #2
 8000c66:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop(&htim5);
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <CenLocFollowMeHome+0xe4>)
 8000c6a:	f009 f8b3 	bl	8009dd4 <HAL_TIM_Base_Stop>

	}

	ExtLightsFrontFogLight(CenLoc_FollowMeHomeState);
 8000c6e:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <CenLocFollowMeHome+0x100>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 fc84 	bl	8001580 <ExtLightsFrontFogLight>
	ExtLightsDayTimeRunningLight(CenLoc_FollowMeHomeState);
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <CenLocFollowMeHome+0x100>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fc6d 	bl	800155c <ExtLightsDayTimeRunningLight>
	ExtLightsLowBeam(CenLoc_FollowMeHomeState);
 8000c82:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <CenLocFollowMeHome+0x100>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 fc44 	bl	8001514 <ExtLightsLowBeam>
	ExtLightsRearPositionLight(CenLoc_FollowMeHomeState);
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <CenLocFollowMeHome+0x100>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 fcab 	bl	80015ec <ExtLightsRearPositionLight>

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000664 	.word	0x20000664
 8000ca0:	200000a8 	.word	0x200000a8
 8000ca4:	20000099 	.word	0x20000099
 8000ca8:	20000098 	.word	0x20000098
 8000cac:	2000009e 	.word	0x2000009e
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	0001869f 	.word	0x0001869f
 8000cb8:	2000009a 	.word	0x2000009a

08000cbc <CenLocBlinkSignals>:

void CenLocBlinkSignals()
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0

	ExtLightsTurnSignalLeft(CenLoc_BlinkState);
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <CenLocBlinkSignals+0x1c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fc6d 	bl	80015a4 <ExtLightsTurnSignalLeft>
	ExtLightsTurnSignalRight(CenLoc_BlinkState);
 8000cca:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <CenLocBlinkSignals+0x1c>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 fc7a 	bl	80015c8 <ExtLightsTurnSignalRight>

}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2000009b 	.word	0x2000009b

08000cdc <CenLocLockUnlockStates>:

StdReturnType CenLocLockUnlockStates()
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0

	uint8 status = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	71fb      	strb	r3, [r7, #7]

	if(CenLoc_CurrentState == STD_HIGH && SecAlm_Trigger == STD_LOW)
 8000ce6:	4b9b      	ldr	r3, [pc, #620]	; (8000f54 <CenLocLockUnlockStates+0x278>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d17e      	bne.n	8000dec <CenLocLockUnlockStates+0x110>
 8000cee:	4b9a      	ldr	r3, [pc, #616]	; (8000f58 <CenLocLockUnlockStates+0x27c>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d17a      	bne.n	8000dec <CenLocLockUnlockStates+0x110>
	{

		HAL_TIM_Base_Stop(&htim3);
 8000cf6:	4899      	ldr	r0, [pc, #612]	; (8000f5c <CenLocLockUnlockStates+0x280>)
 8000cf8:	f009 f86c 	bl	8009dd4 <HAL_TIM_Base_Stop>
		CenLocToggleDoorLED(CenLoc_CurrentState);
 8000cfc:	4b95      	ldr	r3, [pc, #596]	; (8000f54 <CenLocLockUnlockStates+0x278>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff47 	bl	8000b94 <CenLocToggleDoorLED>
		SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 8000d06:	4b93      	ldr	r3, [pc, #588]	; (8000f54 <CenLocLockUnlockStates+0x278>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	bf0c      	ite	eq
 8000d0e:	2301      	moveq	r3, #1
 8000d10:	2300      	movne	r3, #0
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 ff33 	bl	8001b80 <SecAlmToggleAlarmLed>
		CenLocFollowMeHome();
 8000d1a:	f7ff ff4d 	bl	8000bb8 <CenLocFollowMeHome>

		if(CenLoc_LockCounter < 4)
 8000d1e:	4b90      	ldr	r3, [pc, #576]	; (8000f60 <CenLocLockUnlockStates+0x284>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b03      	cmp	r3, #3
 8000d24:	d858      	bhi.n	8000dd8 <CenLocLockUnlockStates+0xfc>
		{

			HAL_TIM_Base_Start(&htim2);
 8000d26:	488f      	ldr	r0, [pc, #572]	; (8000f64 <CenLocLockUnlockStates+0x288>)
 8000d28:	f008 ffca 	bl	8009cc0 <HAL_TIM_Base_Start>
			CenLoc_Timer2Value = __HAL_TIM_GET_COUNTER(&htim2);
 8000d2c:	4b8d      	ldr	r3, [pc, #564]	; (8000f64 <CenLocLockUnlockStates+0x288>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d32:	4a8d      	ldr	r2, [pc, #564]	; (8000f68 <CenLocLockUnlockStates+0x28c>)
 8000d34:	6013      	str	r3, [r2, #0]

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000d36:	4b8b      	ldr	r3, [pc, #556]	; (8000f64 <CenLocLockUnlockStates+0x288>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d805      	bhi.n	8000d50 <CenLocLockUnlockStates+0x74>
			{

				CenLoc_BlinkState = STD_HIGH;
 8000d44:	4b89      	ldr	r3, [pc, #548]	; (8000f6c <CenLocLockUnlockStates+0x290>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 8000d4a:	f7ff ffb7 	bl	8000cbc <CenLocBlinkSignals>
		if(CenLoc_LockCounter < 4)
 8000d4e:	e0fe      	b.n	8000f4e <CenLocLockUnlockStates+0x272>

			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000d50:	4b84      	ldr	r3, [pc, #528]	; (8000f64 <CenLocLockUnlockStates+0x288>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d56:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d90c      	bls.n	8000d78 <CenLocLockUnlockStates+0x9c>
 8000d5e:	4b81      	ldr	r3, [pc, #516]	; (8000f64 <CenLocLockUnlockStates+0x288>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d64:	f241 3287 	movw	r2, #4999	; 0x1387
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d805      	bhi.n	8000d78 <CenLocLockUnlockStates+0x9c>
			{

				CenLoc_BlinkState = STD_LOW;
 8000d6c:	4b7f      	ldr	r3, [pc, #508]	; (8000f6c <CenLocLockUnlockStates+0x290>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 8000d72:	f7ff ffa3 	bl	8000cbc <CenLocBlinkSignals>
 8000d76:	e038      	b.n	8000dea <CenLocLockUnlockStates+0x10e>

			}
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8000d78:	4b7a      	ldr	r3, [pc, #488]	; (8000f64 <CenLocLockUnlockStates+0x288>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d90c      	bls.n	8000da0 <CenLocLockUnlockStates+0xc4>
 8000d86:	4b77      	ldr	r3, [pc, #476]	; (8000f64 <CenLocLockUnlockStates+0x288>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8c:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d805      	bhi.n	8000da0 <CenLocLockUnlockStates+0xc4>
			{

				CenLoc_BlinkState = STD_HIGH;
 8000d94:	4b75      	ldr	r3, [pc, #468]	; (8000f6c <CenLocLockUnlockStates+0x290>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 8000d9a:	f7ff ff8f 	bl	8000cbc <CenLocBlinkSignals>
 8000d9e:	e024      	b.n	8000dea <CenLocLockUnlockStates+0x10e>

			}
			else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8000da0:	4b70      	ldr	r3, [pc, #448]	; (8000f64 <CenLocLockUnlockStates+0x288>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da6:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000daa:	4293      	cmp	r3, r2
 8000dac:	f240 80cf 	bls.w	8000f4e <CenLocLockUnlockStates+0x272>
 8000db0:	4b6c      	ldr	r3, [pc, #432]	; (8000f64 <CenLocLockUnlockStates+0x288>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	f200 80c7 	bhi.w	8000f4e <CenLocLockUnlockStates+0x272>
			{

				CenLoc_BlinkState = STD_LOW;
 8000dc0:	4b6a      	ldr	r3, [pc, #424]	; (8000f6c <CenLocLockUnlockStates+0x290>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 8000dc6:	f7ff ff79 	bl	8000cbc <CenLocBlinkSignals>
				CenLoc_LockCounter = CenLoc_LockCounter + 1;
 8000dca:	4b65      	ldr	r3, [pc, #404]	; (8000f60 <CenLocLockUnlockStates+0x284>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b63      	ldr	r3, [pc, #396]	; (8000f60 <CenLocLockUnlockStates+0x284>)
 8000dd4:	701a      	strb	r2, [r3, #0]
		if(CenLoc_LockCounter < 4)
 8000dd6:	e0ba      	b.n	8000f4e <CenLocLockUnlockStates+0x272>

				/* do nothing */

			}
		}
		else if(CenLoc_LockCounter >= 4)
 8000dd8:	4b61      	ldr	r3, [pc, #388]	; (8000f60 <CenLocLockUnlockStates+0x284>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	f240 80b6 	bls.w	8000f4e <CenLocLockUnlockStates+0x272>
		{

			HAL_TIM_Base_Stop(&htim2);
 8000de2:	4860      	ldr	r0, [pc, #384]	; (8000f64 <CenLocLockUnlockStates+0x288>)
 8000de4:	f008 fff6 	bl	8009dd4 <HAL_TIM_Base_Stop>
		if(CenLoc_LockCounter < 4)
 8000de8:	e0b1      	b.n	8000f4e <CenLocLockUnlockStates+0x272>
 8000dea:	e0b0      	b.n	8000f4e <CenLocLockUnlockStates+0x272>
			/* do nothing */

		}

	}
	else if(CenLoc_CurrentState == STD_LOW && SecAlm_Trigger == STD_LOW)
 8000dec:	4b59      	ldr	r3, [pc, #356]	; (8000f54 <CenLocLockUnlockStates+0x278>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f040 80c4 	bne.w	8000f7e <CenLocLockUnlockStates+0x2a2>
 8000df6:	4b58      	ldr	r3, [pc, #352]	; (8000f58 <CenLocLockUnlockStates+0x27c>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f040 80bf 	bne.w	8000f7e <CenLocLockUnlockStates+0x2a2>
	{

		CenLocToggleDoorLED(CenLoc_CurrentState);
 8000e00:	4b54      	ldr	r3, [pc, #336]	; (8000f54 <CenLocLockUnlockStates+0x278>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fec5 	bl	8000b94 <CenLocToggleDoorLED>
		HAL_TIM_Base_Start(&htim3);
 8000e0a:	4854      	ldr	r0, [pc, #336]	; (8000f5c <CenLocLockUnlockStates+0x280>)
 8000e0c:	f008 ff58 	bl	8009cc0 <HAL_TIM_Base_Start>
		CenLoc_Timer3Value = __HAL_TIM_GET_COUNTER(&htim3);
 8000e10:	4b52      	ldr	r3, [pc, #328]	; (8000f5c <CenLocLockUnlockStates+0x280>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e16:	4a56      	ldr	r2, [pc, #344]	; (8000f70 <CenLocLockUnlockStates+0x294>)
 8000e18:	6013      	str	r3, [r2, #0]
		CenLocFollowMeHome();
 8000e1a:	f7ff fecd 	bl	8000bb8 <CenLocFollowMeHome>

		if(40000 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 41250)
 8000e1e:	4b4f      	ldr	r3, [pc, #316]	; (8000f5c <CenLocLockUnlockStates+0x280>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e24:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d911      	bls.n	8000e50 <CenLocLockUnlockStates+0x174>
 8000e2c:	4b4b      	ldr	r3, [pc, #300]	; (8000f5c <CenLocLockUnlockStates+0x280>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e32:	f24a 1221 	movw	r2, #41249	; 0xa121
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d80a      	bhi.n	8000e50 <CenLocLockUnlockStates+0x174>
		{

			SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 8000e3a:	4b46      	ldr	r3, [pc, #280]	; (8000f54 <CenLocLockUnlockStates+0x278>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	bf0c      	ite	eq
 8000e42:	2301      	moveq	r3, #1
 8000e44:	2300      	movne	r3, #0
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fe99 	bl	8001b80 <SecAlmToggleAlarmLed>
 8000e4e:	e03f      	b.n	8000ed0 <CenLocLockUnlockStates+0x1f4>

		}
		else if(41250 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 42500)
 8000e50:	4b42      	ldr	r3, [pc, #264]	; (8000f5c <CenLocLockUnlockStates+0x280>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e56:	f24a 1222 	movw	r2, #41250	; 0xa122
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d90c      	bls.n	8000e78 <CenLocLockUnlockStates+0x19c>
 8000e5e:	4b3f      	ldr	r3, [pc, #252]	; (8000f5c <CenLocLockUnlockStates+0x280>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e64:	f24a 6203 	movw	r2, #42499	; 0xa603
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d805      	bhi.n	8000e78 <CenLocLockUnlockStates+0x19c>
		{

			SecAlmToggleAlarmLed(CenLoc_CurrentState);
 8000e6c:	4b39      	ldr	r3, [pc, #228]	; (8000f54 <CenLocLockUnlockStates+0x278>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fe85 	bl	8001b80 <SecAlmToggleAlarmLed>
 8000e76:	e02b      	b.n	8000ed0 <CenLocLockUnlockStates+0x1f4>

		}
		else if(42500 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 43750)
 8000e78:	4b38      	ldr	r3, [pc, #224]	; (8000f5c <CenLocLockUnlockStates+0x280>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7e:	f24a 6204 	movw	r2, #42500	; 0xa604
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d911      	bls.n	8000eaa <CenLocLockUnlockStates+0x1ce>
 8000e86:	4b35      	ldr	r3, [pc, #212]	; (8000f5c <CenLocLockUnlockStates+0x280>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8c:	f64a 22e5 	movw	r2, #43749	; 0xaae5
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d80a      	bhi.n	8000eaa <CenLocLockUnlockStates+0x1ce>
		{

			SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 8000e94:	4b2f      	ldr	r3, [pc, #188]	; (8000f54 <CenLocLockUnlockStates+0x278>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	bf0c      	ite	eq
 8000e9c:	2301      	moveq	r3, #1
 8000e9e:	2300      	movne	r3, #0
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 fe6c 	bl	8001b80 <SecAlmToggleAlarmLed>
 8000ea8:	e012      	b.n	8000ed0 <CenLocLockUnlockStates+0x1f4>

		}
		else if(43750 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 45000)
 8000eaa:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <CenLocLockUnlockStates+0x280>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb0:	f64a 22e6 	movw	r2, #43750	; 0xaae6
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d90b      	bls.n	8000ed0 <CenLocLockUnlockStates+0x1f4>
 8000eb8:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <CenLocLockUnlockStates+0x280>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebe:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d804      	bhi.n	8000ed0 <CenLocLockUnlockStates+0x1f4>
		{

			SecAlmToggleAlarmLed(CenLoc_CurrentState);
 8000ec6:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <CenLocLockUnlockStates+0x278>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fe58 	bl	8001b80 <SecAlmToggleAlarmLed>

			/* do nothing */

		}

		if(CenLoc_UnlockCounter < 2 && CenLoc_LockUnlockFlag == STD_HIGH)
 8000ed0:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <CenLocLockUnlockStates+0x298>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d832      	bhi.n	8000f3e <CenLocLockUnlockStates+0x262>
 8000ed8:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <CenLocLockUnlockStates+0x29c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d12e      	bne.n	8000f3e <CenLocLockUnlockStates+0x262>
		{

			HAL_TIM_Base_Start(&htim2);
 8000ee0:	4820      	ldr	r0, [pc, #128]	; (8000f64 <CenLocLockUnlockStates+0x288>)
 8000ee2:	f008 feed 	bl	8009cc0 <HAL_TIM_Base_Start>
			CenLoc_Timer2Value = __HAL_TIM_GET_COUNTER(&htim2);
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <CenLocLockUnlockStates+0x288>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eec:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <CenLocLockUnlockStates+0x28c>)
 8000eee:	6013      	str	r3, [r2, #0]

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <CenLocLockUnlockStates+0x288>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef6:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d805      	bhi.n	8000f0a <CenLocLockUnlockStates+0x22e>
			{

				CenLoc_BlinkState = STD_HIGH;
 8000efe:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <CenLocLockUnlockStates+0x290>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 8000f04:	f7ff feda 	bl	8000cbc <CenLocBlinkSignals>
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000f08:	e038      	b.n	8000f7c <CenLocLockUnlockStates+0x2a0>

			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <CenLocLockUnlockStates+0x288>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f10:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d931      	bls.n	8000f7c <CenLocLockUnlockStates+0x2a0>
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <CenLocLockUnlockStates+0x288>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d82a      	bhi.n	8000f7c <CenLocLockUnlockStates+0x2a0>
			{

				CenLoc_BlinkState = STD_LOW;
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <CenLocLockUnlockStates+0x290>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 8000f2c:	f7ff fec6 	bl	8000cbc <CenLocBlinkSignals>
				CenLoc_UnlockCounter = CenLoc_UnlockCounter + 1;
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <CenLocLockUnlockStates+0x298>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <CenLocLockUnlockStates+0x298>)
 8000f3a:	701a      	strb	r2, [r3, #0]
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000f3c:	e01e      	b.n	8000f7c <CenLocLockUnlockStates+0x2a0>
				/* do nothing */

			}

		}
		else if(CenLoc_UnlockCounter >= 2)
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <CenLocLockUnlockStates+0x298>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d91b      	bls.n	8000f7e <CenLocLockUnlockStates+0x2a2>
		{

			HAL_TIM_Base_Stop(&htim2);
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <CenLocLockUnlockStates+0x288>)
 8000f48:	f008 ff44 	bl	8009dd4 <HAL_TIM_Base_Stop>
 8000f4c:	e017      	b.n	8000f7e <CenLocLockUnlockStates+0x2a2>
		if(CenLoc_LockCounter < 4)
 8000f4e:	bf00      	nop
 8000f50:	e015      	b.n	8000f7e <CenLocLockUnlockStates+0x2a2>
 8000f52:	bf00      	nop
 8000f54:	20000095 	.word	0x20000095
 8000f58:	200000f6 	.word	0x200000f6
 8000f5c:	200004fc 	.word	0x200004fc
 8000f60:	2000009c 	.word	0x2000009c
 8000f64:	20000448 	.word	0x20000448
 8000f68:	200000a0 	.word	0x200000a0
 8000f6c:	2000009b 	.word	0x2000009b
 8000f70:	200000a4 	.word	0x200000a4
 8000f74:	2000009d 	.word	0x2000009d
 8000f78:	20000097 	.word	0x20000097
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000f7c:	bf00      	nop

		/* do nothing */

	}

	return status;
 8000f7e:	79fb      	ldrb	r3, [r7, #7]

}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <CenLocMainFunction>:

void CenLocMainFunction()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

	CenLocRxBtcState();
 8000f8c:	f7ff fde6 	bl	8000b5c <CenLocRxBtcState>
	CenLocSecAlmStateToOff();
 8000f90:	f7ff fdd2 	bl	8000b38 <CenLocSecAlmStateToOff>
	CenLocState();
 8000f94:	f7ff fd8e 	bl	8000ab4 <CenLocState>
	CenLocLockUnlockStates();
 8000f98:	f7ff fea0 	bl	8000cdc <CenLocLockUnlockStates>

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <ExtLightsMainFunction>:
void ExtLightsLightState();
StdReturnType ExtLightsInit();
uint32 ExtLightsLightReadSensorValue();

void ExtLightsMainFunction()
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0

	ExtLightsRxBtcState();
 8000fa4:	f000 f9e6 	bl	8001374 <ExtLightsRxBtcState>
	ExtLightsLightState();
 8000fa8:	f000 f802 	bl	8000fb0 <ExtLightsLightState>

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <ExtLightsLightState>:
	return E_OK;

}

void ExtLightsLightState()
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0

	uint8 lightSensorState = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	71fb      	strb	r3, [r7, #7]

	ExtLightsHighBeam(ExtLights_HighBeam_CurrentState);
 8000fba:	4b98      	ldr	r3, [pc, #608]	; (800121c <ExtLightsLightState+0x26c>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 faba 	bl	8001538 <ExtLightsHighBeam>
	ExtLightsHighBeam(ExtLights_FlashHighBeam_CurrentState);
 8000fc4:	4b96      	ldr	r3, [pc, #600]	; (8001220 <ExtLightsLightState+0x270>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fab5 	bl	8001538 <ExtLightsHighBeam>
	ExtLightsFrontFogLight(ExtLights_FrontFogLight_CurrentState);
 8000fce:	4b95      	ldr	r3, [pc, #596]	; (8001224 <ExtLightsLightState+0x274>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fad4 	bl	8001580 <ExtLightsFrontFogLight>
	ExtLightsRearFogLight(ExtLights_RearFogLight_CurrentState);
 8000fd8:	4b93      	ldr	r3, [pc, #588]	; (8001228 <ExtLightsLightState+0x278>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 fb17 	bl	8001610 <ExtLightsRearFogLight>
	ExtLightsReverseLight(ExtLights_ReverseLight_CurrentState);
 8000fe2:	4b92      	ldr	r3, [pc, #584]	; (800122c <ExtLightsLightState+0x27c>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fb24 	bl	8001634 <ExtLightsReverseLight>


	if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATEZERO)
 8000fec:	4b90      	ldr	r3, [pc, #576]	; (8001230 <ExtLightsLightState+0x280>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b64      	cmp	r3, #100	; 0x64
 8000ff2:	d10c      	bne.n	800100e <ExtLightsLightState+0x5e>
	{

		ExtLightsLowBeam(STD_LOW);
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 fa8d 	bl	8001514 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(STD_LOW);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 faae 	bl	800155c <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(STD_LOW);
 8001000:	2000      	movs	r0, #0
 8001002:	f000 faf3 	bl	80015ec <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(STD_LOW);
 8001006:	2000      	movs	r0, #0
 8001008:	f000 fb26 	bl	8001658 <ExtLightsLicensePlateLight>
 800100c:	e048      	b.n	80010a0 <ExtLightsLightState+0xf0>

	}
	else if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATEONE)
 800100e:	4b88      	ldr	r3, [pc, #544]	; (8001230 <ExtLightsLightState+0x280>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b65      	cmp	r3, #101	; 0x65
 8001014:	d123      	bne.n	800105e <ExtLightsLightState+0xae>
	{

		lightSensorState = ExtLightsLightReadSensorValue();
 8001016:	f000 fa6b 	bl	80014f0 <ExtLightsLightReadSensorValue>
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]

		if(lightSensorState < EXTLIGHTS_LIGHTSENSOR_DAYNIGHTVALUE)
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2b95      	cmp	r3, #149	; 0x95
 8001022:	d80c      	bhi.n	800103e <ExtLightsLightState+0x8e>
		{

			ExtLightsLowBeam(STD_HIGH);
 8001024:	2001      	movs	r0, #1
 8001026:	f000 fa75 	bl	8001514 <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_HIGH);
 800102a:	2001      	movs	r0, #1
 800102c:	f000 fa96 	bl	800155c <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_HIGH);
 8001030:	2001      	movs	r0, #1
 8001032:	f000 fadb 	bl	80015ec <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_HIGH);
 8001036:	2001      	movs	r0, #1
 8001038:	f000 fb0e 	bl	8001658 <ExtLightsLicensePlateLight>
 800103c:	e030      	b.n	80010a0 <ExtLightsLightState+0xf0>

		}
		else if(lightSensorState > EXTLIGHTS_LIGHTSENSOR_DAYNIGHTVALUE)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b96      	cmp	r3, #150	; 0x96
 8001042:	d92d      	bls.n	80010a0 <ExtLightsLightState+0xf0>
		{

			ExtLightsLowBeam(STD_LOW);
 8001044:	2000      	movs	r0, #0
 8001046:	f000 fa65 	bl	8001514 <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_HIGH);
 800104a:	2001      	movs	r0, #1
 800104c:	f000 fa86 	bl	800155c <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_LOW);
 8001050:	2000      	movs	r0, #0
 8001052:	f000 facb 	bl	80015ec <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_LOW);
 8001056:	2000      	movs	r0, #0
 8001058:	f000 fafe 	bl	8001658 <ExtLightsLicensePlateLight>
 800105c:	e020      	b.n	80010a0 <ExtLightsLightState+0xf0>

		}

	}
	else if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATETWO)
 800105e:	4b74      	ldr	r3, [pc, #464]	; (8001230 <ExtLightsLightState+0x280>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b66      	cmp	r3, #102	; 0x66
 8001064:	d10c      	bne.n	8001080 <ExtLightsLightState+0xd0>
	{

		ExtLightsLowBeam(STD_LOW);
 8001066:	2000      	movs	r0, #0
 8001068:	f000 fa54 	bl	8001514 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(STD_HIGH);
 800106c:	2001      	movs	r0, #1
 800106e:	f000 fa75 	bl	800155c <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(STD_HIGH);
 8001072:	2001      	movs	r0, #1
 8001074:	f000 faba 	bl	80015ec <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(STD_HIGH);
 8001078:	2001      	movs	r0, #1
 800107a:	f000 faed 	bl	8001658 <ExtLightsLicensePlateLight>
 800107e:	e00f      	b.n	80010a0 <ExtLightsLightState+0xf0>

	}
	else if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATETHREE)
 8001080:	4b6b      	ldr	r3, [pc, #428]	; (8001230 <ExtLightsLightState+0x280>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b67      	cmp	r3, #103	; 0x67
 8001086:	d10b      	bne.n	80010a0 <ExtLightsLightState+0xf0>
	{

		ExtLightsLowBeam(STD_HIGH);
 8001088:	2001      	movs	r0, #1
 800108a:	f000 fa43 	bl	8001514 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(STD_HIGH);
 800108e:	2001      	movs	r0, #1
 8001090:	f000 fa64 	bl	800155c <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(STD_HIGH);
 8001094:	2001      	movs	r0, #1
 8001096:	f000 faa9 	bl	80015ec <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(STD_HIGH);
 800109a:	2001      	movs	r0, #1
 800109c:	f000 fadc 	bl	8001658 <ExtLightsLicensePlateLight>

		/* do nothing */

	}

	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 80010a0:	4b64      	ldr	r3, [pc, #400]	; (8001234 <ExtLightsLightState+0x284>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d155      	bne.n	8001154 <ExtLightsLightState+0x1a4>
	{

		HAL_TIM_Base_Start(&htim2);
 80010a8:	4863      	ldr	r0, [pc, #396]	; (8001238 <ExtLightsLightState+0x288>)
 80010aa:	f008 fe09 	bl	8009cc0 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 80010ae:	4b62      	ldr	r3, [pc, #392]	; (8001238 <ExtLightsLightState+0x288>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b4:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d805      	bhi.n	80010c8 <ExtLightsLightState+0x118>
		{

			ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 80010bc:	4b5d      	ldr	r3, [pc, #372]	; (8001234 <ExtLightsLightState+0x284>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 fa6f 	bl	80015a4 <ExtLightsTurnSignalLeft>
 80010c6:	e04e      	b.n	8001166 <ExtLightsLightState+0x1b6>

		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2)  && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 80010c8:	4b5b      	ldr	r3, [pc, #364]	; (8001238 <ExtLightsLightState+0x288>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ce:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d911      	bls.n	80010fa <ExtLightsLightState+0x14a>
 80010d6:	4b58      	ldr	r3, [pc, #352]	; (8001238 <ExtLightsLightState+0x288>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010dc:	f241 3287 	movw	r2, #4999	; 0x1387
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d80a      	bhi.n	80010fa <ExtLightsLightState+0x14a>
		{

			ExtLightsTurnSignalLeft(!ExtLights_TurnSignalLeft_CurrentState);
 80010e4:	4b53      	ldr	r3, [pc, #332]	; (8001234 <ExtLightsLightState+0x284>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	bf0c      	ite	eq
 80010ec:	2301      	moveq	r3, #1
 80010ee:	2300      	movne	r3, #0
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fa56 	bl	80015a4 <ExtLightsTurnSignalLeft>
 80010f8:	e035      	b.n	8001166 <ExtLightsLightState+0x1b6>

		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 80010fa:	4b4f      	ldr	r3, [pc, #316]	; (8001238 <ExtLightsLightState+0x288>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001100:	f241 3288 	movw	r2, #5000	; 0x1388
 8001104:	4293      	cmp	r3, r2
 8001106:	d90c      	bls.n	8001122 <ExtLightsLightState+0x172>
 8001108:	4b4b      	ldr	r3, [pc, #300]	; (8001238 <ExtLightsLightState+0x288>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110e:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8001112:	4293      	cmp	r3, r2
 8001114:	d805      	bhi.n	8001122 <ExtLightsLightState+0x172>
		{

			ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 8001116:	4b47      	ldr	r3, [pc, #284]	; (8001234 <ExtLightsLightState+0x284>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fa42 	bl	80015a4 <ExtLightsTurnSignalLeft>
 8001120:	e021      	b.n	8001166 <ExtLightsLightState+0x1b6>

		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8001122:	4b45      	ldr	r3, [pc, #276]	; (8001238 <ExtLightsLightState+0x288>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800112c:	4293      	cmp	r3, r2
 800112e:	d91a      	bls.n	8001166 <ExtLightsLightState+0x1b6>
 8001130:	4b41      	ldr	r3, [pc, #260]	; (8001238 <ExtLightsLightState+0x288>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	f242 720f 	movw	r2, #9999	; 0x270f
 800113a:	4293      	cmp	r3, r2
 800113c:	d813      	bhi.n	8001166 <ExtLightsLightState+0x1b6>
		{

			ExtLightsTurnSignalLeft(!ExtLights_TurnSignalLeft_CurrentState);
 800113e:	4b3d      	ldr	r3, [pc, #244]	; (8001234 <ExtLightsLightState+0x284>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	bf0c      	ite	eq
 8001146:	2301      	moveq	r3, #1
 8001148:	2300      	movne	r3, #0
 800114a:	b2db      	uxtb	r3, r3
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fa29 	bl	80015a4 <ExtLightsTurnSignalLeft>
 8001152:	e008      	b.n	8001166 <ExtLightsLightState+0x1b6>
			/* do nothing */

		}

	}
	else if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW)
 8001154:	4b37      	ldr	r3, [pc, #220]	; (8001234 <ExtLightsLightState+0x284>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d104      	bne.n	8001166 <ExtLightsLightState+0x1b6>
	{

		ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 800115c:	4b35      	ldr	r3, [pc, #212]	; (8001234 <ExtLightsLightState+0x284>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f000 fa1f 	bl	80015a4 <ExtLightsTurnSignalLeft>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8001166:	4b35      	ldr	r3, [pc, #212]	; (800123c <ExtLightsLightState+0x28c>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d168      	bne.n	8001240 <ExtLightsLightState+0x290>
	{

		HAL_TIM_Base_Start(&htim2);
 800116e:	4832      	ldr	r0, [pc, #200]	; (8001238 <ExtLightsLightState+0x288>)
 8001170:	f008 fda6 	bl	8009cc0 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8001174:	4b30      	ldr	r3, [pc, #192]	; (8001238 <ExtLightsLightState+0x288>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800117e:	4293      	cmp	r3, r2
 8001180:	d805      	bhi.n	800118e <ExtLightsLightState+0x1de>
		{

			ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 8001182:	4b2e      	ldr	r3, [pc, #184]	; (800123c <ExtLightsLightState+0x28c>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f000 fa1e 	bl	80015c8 <ExtLightsTurnSignalRight>
 800118c:	e061      	b.n	8001252 <ExtLightsLightState+0x2a2>

		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <ExtLightsLightState+0x288>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001198:	4293      	cmp	r3, r2
 800119a:	d911      	bls.n	80011c0 <ExtLightsLightState+0x210>
 800119c:	4b26      	ldr	r3, [pc, #152]	; (8001238 <ExtLightsLightState+0x288>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a2:	f241 3287 	movw	r2, #4999	; 0x1387
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d80a      	bhi.n	80011c0 <ExtLightsLightState+0x210>
		{

			ExtLightsTurnSignalRight(!ExtLights_TurnSignalRight_CurrentState);
 80011aa:	4b24      	ldr	r3, [pc, #144]	; (800123c <ExtLightsLightState+0x28c>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	bf0c      	ite	eq
 80011b2:	2301      	moveq	r3, #1
 80011b4:	2300      	movne	r3, #0
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fa05 	bl	80015c8 <ExtLightsTurnSignalRight>
 80011be:	e048      	b.n	8001252 <ExtLightsLightState+0x2a2>

		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <ExtLightsLightState+0x288>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d90c      	bls.n	80011e8 <ExtLightsLightState+0x238>
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <ExtLightsLightState+0x288>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80011d8:	4293      	cmp	r3, r2
 80011da:	d805      	bhi.n	80011e8 <ExtLightsLightState+0x238>
		{

			ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <ExtLightsLightState+0x28c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 f9f1 	bl	80015c8 <ExtLightsTurnSignalRight>
 80011e6:	e034      	b.n	8001252 <ExtLightsLightState+0x2a2>

		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <ExtLightsLightState+0x288>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ee:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d92d      	bls.n	8001252 <ExtLightsLightState+0x2a2>
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <ExtLightsLightState+0x288>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001200:	4293      	cmp	r3, r2
 8001202:	d826      	bhi.n	8001252 <ExtLightsLightState+0x2a2>
		{

			ExtLightsTurnSignalRight(!ExtLights_TurnSignalRight_CurrentState);
 8001204:	4b0d      	ldr	r3, [pc, #52]	; (800123c <ExtLightsLightState+0x28c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	bf0c      	ite	eq
 800120c:	2301      	moveq	r3, #1
 800120e:	2300      	movne	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f9d8 	bl	80015c8 <ExtLightsTurnSignalRight>
 8001218:	e01b      	b.n	8001252 <ExtLightsLightState+0x2a2>
 800121a:	bf00      	nop
 800121c:	200000b0 	.word	0x200000b0
 8001220:	200000ae 	.word	0x200000ae
 8001224:	200000b1 	.word	0x200000b1
 8001228:	200000b5 	.word	0x200000b5
 800122c:	200000ac 	.word	0x200000ac
 8001230:	200000af 	.word	0x200000af
 8001234:	200000b2 	.word	0x200000b2
 8001238:	20000448 	.word	0x20000448
 800123c:	200000b3 	.word	0x200000b3

			/* do nothing */

		}
	}
	else if(ExtLights_TurnSignalRight_CurrentState == STD_LOW)
 8001240:	4b49      	ldr	r3, [pc, #292]	; (8001368 <ExtLightsLightState+0x3b8>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d104      	bne.n	8001252 <ExtLightsLightState+0x2a2>
	{

		ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 8001248:	4b47      	ldr	r3, [pc, #284]	; (8001368 <ExtLightsLightState+0x3b8>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f000 f9bb 	bl	80015c8 <ExtLightsTurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 8001252:	4b46      	ldr	r3, [pc, #280]	; (800136c <ExtLightsLightState+0x3bc>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d173      	bne.n	8001342 <ExtLightsLightState+0x392>
	{

		HAL_TIM_Base_Start(&htim2);
 800125a:	4845      	ldr	r0, [pc, #276]	; (8001370 <ExtLightsLightState+0x3c0>)
 800125c:	f008 fd30 	bl	8009cc0 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8001260:	4b43      	ldr	r3, [pc, #268]	; (8001370 <ExtLightsLightState+0x3c0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800126a:	4293      	cmp	r3, r2
 800126c:	d80a      	bhi.n	8001284 <ExtLightsLightState+0x2d4>
		{

			ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 800126e:	4b3f      	ldr	r3, [pc, #252]	; (800136c <ExtLightsLightState+0x3bc>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f9a8 	bl	80015c8 <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 8001278:	4b3c      	ldr	r3, [pc, #240]	; (800136c <ExtLightsLightState+0x3bc>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f991 	bl	80015a4 <ExtLightsTurnSignalLeft>

		/* do nothing */

	}

}
 8001282:	e06d      	b.n	8001360 <ExtLightsLightState+0x3b0>
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8001284:	4b3a      	ldr	r3, [pc, #232]	; (8001370 <ExtLightsLightState+0x3c0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800128e:	4293      	cmp	r3, r2
 8001290:	d91b      	bls.n	80012ca <ExtLightsLightState+0x31a>
 8001292:	4b37      	ldr	r3, [pc, #220]	; (8001370 <ExtLightsLightState+0x3c0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	f241 3287 	movw	r2, #4999	; 0x1387
 800129c:	4293      	cmp	r3, r2
 800129e:	d814      	bhi.n	80012ca <ExtLightsLightState+0x31a>
			ExtLightsTurnSignalRight(!ExtLights_HazardLight_CurrentState);
 80012a0:	4b32      	ldr	r3, [pc, #200]	; (800136c <ExtLightsLightState+0x3bc>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	bf0c      	ite	eq
 80012a8:	2301      	moveq	r3, #1
 80012aa:	2300      	movne	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f98a 	bl	80015c8 <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(!ExtLights_HazardLight_CurrentState);
 80012b4:	4b2d      	ldr	r3, [pc, #180]	; (800136c <ExtLightsLightState+0x3bc>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bf0c      	ite	eq
 80012bc:	2301      	moveq	r3, #1
 80012be:	2300      	movne	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 f96e 	bl	80015a4 <ExtLightsTurnSignalLeft>
 80012c8:	e04a      	b.n	8001360 <ExtLightsLightState+0x3b0>
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2)&& __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 80012ca:	4b29      	ldr	r3, [pc, #164]	; (8001370 <ExtLightsLightState+0x3c0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d911      	bls.n	80012fc <ExtLightsLightState+0x34c>
 80012d8:	4b25      	ldr	r3, [pc, #148]	; (8001370 <ExtLightsLightState+0x3c0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012de:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d80a      	bhi.n	80012fc <ExtLightsLightState+0x34c>
			ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 80012e6:	4b21      	ldr	r3, [pc, #132]	; (800136c <ExtLightsLightState+0x3bc>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f96c 	bl	80015c8 <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 80012f0:	4b1e      	ldr	r3, [pc, #120]	; (800136c <ExtLightsLightState+0x3bc>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 f955 	bl	80015a4 <ExtLightsTurnSignalLeft>
 80012fa:	e031      	b.n	8001360 <ExtLightsLightState+0x3b0>
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 80012fc:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <ExtLightsLightState+0x3c0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001306:	4293      	cmp	r3, r2
 8001308:	d92a      	bls.n	8001360 <ExtLightsLightState+0x3b0>
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <ExtLightsLightState+0x3c0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	f242 720f 	movw	r2, #9999	; 0x270f
 8001314:	4293      	cmp	r3, r2
 8001316:	d823      	bhi.n	8001360 <ExtLightsLightState+0x3b0>
			ExtLightsTurnSignalRight(!ExtLights_HazardLight_CurrentState);
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <ExtLightsLightState+0x3bc>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	bf0c      	ite	eq
 8001320:	2301      	moveq	r3, #1
 8001322:	2300      	movne	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f94e 	bl	80015c8 <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(!ExtLights_HazardLight_CurrentState);
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <ExtLightsLightState+0x3bc>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	bf0c      	ite	eq
 8001334:	2301      	moveq	r3, #1
 8001336:	2300      	movne	r3, #0
 8001338:	b2db      	uxtb	r3, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f932 	bl	80015a4 <ExtLightsTurnSignalLeft>
}
 8001340:	e00e      	b.n	8001360 <ExtLightsLightState+0x3b0>
	else if(ExtLights_HazardLight_CurrentState == STD_LOW)
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <ExtLightsLightState+0x3bc>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10a      	bne.n	8001360 <ExtLightsLightState+0x3b0>
		ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <ExtLightsLightState+0x3bc>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f93a 	bl	80015c8 <ExtLightsTurnSignalRight>
		ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <ExtLightsLightState+0x3bc>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f000 f923 	bl	80015a4 <ExtLightsTurnSignalLeft>
}
 800135e:	e7ff      	b.n	8001360 <ExtLightsLightState+0x3b0>
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200000b3 	.word	0x200000b3
 800136c:	200000b4 	.word	0x200000b4
 8001370:	20000448 	.word	0x20000448

08001374 <ExtLightsRxBtcState>:

void ExtLightsRxBtcState()
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

	if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATEZERO)
 8001378:	4b4d      	ldr	r3, [pc, #308]	; (80014b0 <ExtLightsRxBtcState+0x13c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b64      	cmp	r3, #100	; 0x64
 800137e:	d103      	bne.n	8001388 <ExtLightsRxBtcState+0x14>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATEZERO;
 8001380:	4b4c      	ldr	r3, [pc, #304]	; (80014b4 <ExtLightsRxBtcState+0x140>)
 8001382:	2264      	movs	r2, #100	; 0x64
 8001384:	701a      	strb	r2, [r3, #0]
 8001386:	e016      	b.n	80013b6 <ExtLightsRxBtcState+0x42>

	}
	else if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATEONE)
 8001388:	4b49      	ldr	r3, [pc, #292]	; (80014b0 <ExtLightsRxBtcState+0x13c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b65      	cmp	r3, #101	; 0x65
 800138e:	d103      	bne.n	8001398 <ExtLightsRxBtcState+0x24>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATEONE;
 8001390:	4b48      	ldr	r3, [pc, #288]	; (80014b4 <ExtLightsRxBtcState+0x140>)
 8001392:	2265      	movs	r2, #101	; 0x65
 8001394:	701a      	strb	r2, [r3, #0]
 8001396:	e00e      	b.n	80013b6 <ExtLightsRxBtcState+0x42>

	}
	else if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATETWO)
 8001398:	4b45      	ldr	r3, [pc, #276]	; (80014b0 <ExtLightsRxBtcState+0x13c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b66      	cmp	r3, #102	; 0x66
 800139e:	d103      	bne.n	80013a8 <ExtLightsRxBtcState+0x34>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATETWO;
 80013a0:	4b44      	ldr	r3, [pc, #272]	; (80014b4 <ExtLightsRxBtcState+0x140>)
 80013a2:	2266      	movs	r2, #102	; 0x66
 80013a4:	701a      	strb	r2, [r3, #0]
 80013a6:	e006      	b.n	80013b6 <ExtLightsRxBtcState+0x42>

	}
	else if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATETHREE)
 80013a8:	4b41      	ldr	r3, [pc, #260]	; (80014b0 <ExtLightsRxBtcState+0x13c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b67      	cmp	r3, #103	; 0x67
 80013ae:	d102      	bne.n	80013b6 <ExtLightsRxBtcState+0x42>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATETHREE;
 80013b0:	4b40      	ldr	r3, [pc, #256]	; (80014b4 <ExtLightsRxBtcState+0x140>)
 80013b2:	2267      	movs	r2, #103	; 0x67
 80013b4:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_HighBeam == STD_HIGH)
 80013b6:	4b40      	ldr	r3, [pc, #256]	; (80014b8 <ExtLightsRxBtcState+0x144>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d104      	bne.n	80013c8 <ExtLightsRxBtcState+0x54>
	{

		ExtLights_HighBeam_CurrentState = Btc_HighBeam;
 80013be:	4b3e      	ldr	r3, [pc, #248]	; (80014b8 <ExtLightsRxBtcState+0x144>)
 80013c0:	781a      	ldrb	r2, [r3, #0]
 80013c2:	4b3e      	ldr	r3, [pc, #248]	; (80014bc <ExtLightsRxBtcState+0x148>)
 80013c4:	701a      	strb	r2, [r3, #0]
 80013c6:	e007      	b.n	80013d8 <ExtLightsRxBtcState+0x64>

	}
	else if(Btc_HighBeam == STD_LOW)
 80013c8:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <ExtLightsRxBtcState+0x144>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d103      	bne.n	80013d8 <ExtLightsRxBtcState+0x64>
	{

		ExtLights_HighBeam_CurrentState = Btc_HighBeam;
 80013d0:	4b39      	ldr	r3, [pc, #228]	; (80014b8 <ExtLightsRxBtcState+0x144>)
 80013d2:	781a      	ldrb	r2, [r3, #0]
 80013d4:	4b39      	ldr	r3, [pc, #228]	; (80014bc <ExtLightsRxBtcState+0x148>)
 80013d6:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_FrontFogLight == STD_HIGH)
 80013d8:	4b39      	ldr	r3, [pc, #228]	; (80014c0 <ExtLightsRxBtcState+0x14c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d104      	bne.n	80013ea <ExtLightsRxBtcState+0x76>
	{

		ExtLights_FrontFogLight_CurrentState = Btc_FrontFogLight;
 80013e0:	4b37      	ldr	r3, [pc, #220]	; (80014c0 <ExtLightsRxBtcState+0x14c>)
 80013e2:	781a      	ldrb	r2, [r3, #0]
 80013e4:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <ExtLightsRxBtcState+0x150>)
 80013e6:	701a      	strb	r2, [r3, #0]
 80013e8:	e007      	b.n	80013fa <ExtLightsRxBtcState+0x86>

	}
	else if(Btc_FrontFogLight == STD_LOW)
 80013ea:	4b35      	ldr	r3, [pc, #212]	; (80014c0 <ExtLightsRxBtcState+0x14c>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d103      	bne.n	80013fa <ExtLightsRxBtcState+0x86>
	{

		ExtLights_FrontFogLight_CurrentState = Btc_FrontFogLight;
 80013f2:	4b33      	ldr	r3, [pc, #204]	; (80014c0 <ExtLightsRxBtcState+0x14c>)
 80013f4:	781a      	ldrb	r2, [r3, #0]
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <ExtLightsRxBtcState+0x150>)
 80013f8:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_RearFogLight == STD_HIGH)
 80013fa:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <ExtLightsRxBtcState+0x154>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d104      	bne.n	800140c <ExtLightsRxBtcState+0x98>
	{

		ExtLights_RearFogLight_CurrentState = Btc_RearFogLight;
 8001402:	4b31      	ldr	r3, [pc, #196]	; (80014c8 <ExtLightsRxBtcState+0x154>)
 8001404:	781a      	ldrb	r2, [r3, #0]
 8001406:	4b31      	ldr	r3, [pc, #196]	; (80014cc <ExtLightsRxBtcState+0x158>)
 8001408:	701a      	strb	r2, [r3, #0]
 800140a:	e007      	b.n	800141c <ExtLightsRxBtcState+0xa8>

	}
	else if(Btc_RearFogLight == STD_LOW)
 800140c:	4b2e      	ldr	r3, [pc, #184]	; (80014c8 <ExtLightsRxBtcState+0x154>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d103      	bne.n	800141c <ExtLightsRxBtcState+0xa8>
	{

		ExtLights_RearFogLight_CurrentState = Btc_RearFogLight;
 8001414:	4b2c      	ldr	r3, [pc, #176]	; (80014c8 <ExtLightsRxBtcState+0x154>)
 8001416:	781a      	ldrb	r2, [r3, #0]
 8001418:	4b2c      	ldr	r3, [pc, #176]	; (80014cc <ExtLightsRxBtcState+0x158>)
 800141a:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_BrakeLight == STD_HIGH)
 800141c:	4b2c      	ldr	r3, [pc, #176]	; (80014d0 <ExtLightsRxBtcState+0x15c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d104      	bne.n	800142e <ExtLightsRxBtcState+0xba>
	{

		ExtLights_BrakeLight_CurrentState = Btc_BrakeLight;
 8001424:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <ExtLightsRxBtcState+0x15c>)
 8001426:	781a      	ldrb	r2, [r3, #0]
 8001428:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <ExtLightsRxBtcState+0x160>)
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	e007      	b.n	800143e <ExtLightsRxBtcState+0xca>

	}
	else if(Btc_BrakeLight == STD_LOW)
 800142e:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <ExtLightsRxBtcState+0x15c>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d103      	bne.n	800143e <ExtLightsRxBtcState+0xca>
	{

		ExtLights_BrakeLight_CurrentState = Btc_BrakeLight;
 8001436:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <ExtLightsRxBtcState+0x15c>)
 8001438:	781a      	ldrb	r2, [r3, #0]
 800143a:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <ExtLightsRxBtcState+0x160>)
 800143c:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_TurnSignalLeft == STD_HIGH)
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <ExtLightsRxBtcState+0x164>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d104      	bne.n	8001450 <ExtLightsRxBtcState+0xdc>
	{

		ExtLights_TurnSignalLeft_CurrentState = Btc_TurnSignalLeft;
 8001446:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <ExtLightsRxBtcState+0x164>)
 8001448:	781a      	ldrb	r2, [r3, #0]
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <ExtLightsRxBtcState+0x168>)
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	e007      	b.n	8001460 <ExtLightsRxBtcState+0xec>

	}
	else if(Btc_TurnSignalLeft == STD_LOW)
 8001450:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <ExtLightsRxBtcState+0x164>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d103      	bne.n	8001460 <ExtLightsRxBtcState+0xec>
	{

		ExtLights_TurnSignalLeft_CurrentState = Btc_TurnSignalLeft;
 8001458:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <ExtLightsRxBtcState+0x164>)
 800145a:	781a      	ldrb	r2, [r3, #0]
 800145c:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <ExtLightsRxBtcState+0x168>)
 800145e:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_TurnSignalRight == STD_HIGH)
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <ExtLightsRxBtcState+0x16c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d104      	bne.n	8001472 <ExtLightsRxBtcState+0xfe>
	{

		ExtLights_TurnSignalRight_CurrentState = Btc_TurnSignalRight;
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <ExtLightsRxBtcState+0x16c>)
 800146a:	781a      	ldrb	r2, [r3, #0]
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <ExtLightsRxBtcState+0x170>)
 800146e:	701a      	strb	r2, [r3, #0]
 8001470:	e007      	b.n	8001482 <ExtLightsRxBtcState+0x10e>

	}
	else if(Btc_TurnSignalRight == STD_LOW)
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <ExtLightsRxBtcState+0x16c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d103      	bne.n	8001482 <ExtLightsRxBtcState+0x10e>
	{

		ExtLights_TurnSignalRight_CurrentState = Btc_TurnSignalRight;
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <ExtLightsRxBtcState+0x16c>)
 800147c:	781a      	ldrb	r2, [r3, #0]
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <ExtLightsRxBtcState+0x170>)
 8001480:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_HazardLight == STD_HIGH)
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <ExtLightsRxBtcState+0x174>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d104      	bne.n	8001494 <ExtLightsRxBtcState+0x120>
	{

		ExtLights_HazardLight_CurrentState = Btc_HazardLight;
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <ExtLightsRxBtcState+0x174>)
 800148c:	781a      	ldrb	r2, [r3, #0]
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <ExtLightsRxBtcState+0x178>)
 8001490:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8001492:	e007      	b.n	80014a4 <ExtLightsRxBtcState+0x130>
	else if(Btc_HazardLight == STD_LOW)
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <ExtLightsRxBtcState+0x174>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d103      	bne.n	80014a4 <ExtLightsRxBtcState+0x130>
		ExtLights_HazardLight_CurrentState = Btc_HazardLight;
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <ExtLightsRxBtcState+0x174>)
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <ExtLightsRxBtcState+0x178>)
 80014a2:	701a      	strb	r2, [r3, #0]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	200000b6 	.word	0x200000b6
 80014b4:	200000af 	.word	0x200000af
 80014b8:	200000b7 	.word	0x200000b7
 80014bc:	200000b0 	.word	0x200000b0
 80014c0:	200000b9 	.word	0x200000b9
 80014c4:	200000b1 	.word	0x200000b1
 80014c8:	200000be 	.word	0x200000be
 80014cc:	200000b5 	.word	0x200000b5
 80014d0:	200000bd 	.word	0x200000bd
 80014d4:	200000ad 	.word	0x200000ad
 80014d8:	200000ba 	.word	0x200000ba
 80014dc:	200000b2 	.word	0x200000b2
 80014e0:	200000bb 	.word	0x200000bb
 80014e4:	200000b3 	.word	0x200000b3
 80014e8:	200000bc 	.word	0x200000bc
 80014ec:	200000b4 	.word	0x200000b4

080014f0 <ExtLightsLightReadSensorValue>:

uint32 ExtLightsLightReadSensorValue()
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0

	uint8 sensorValue = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	71fb      	strb	r3, [r7, #7]

	sensorValue = ADC_BUFFER[2];
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <ExtLightsLightReadSensorValue+0x20>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	71fb      	strb	r3, [r7, #7]

	return sensorValue;
 8001500:	79fb      	ldrb	r3, [r7, #7]

}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	200000dc 	.word	0x200000dc

08001514 <ExtLightsLowBeam>:

void ExtLightsLowBeam(uint8 PinState)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_LOWBEAM_PORT, EXTLIGHTS_LOWBEAM_PIN, PinState);
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	461a      	mov	r2, r3
 8001522:	2120      	movs	r1, #32
 8001524:	4803      	ldr	r0, [pc, #12]	; (8001534 <ExtLightsLowBeam+0x20>)
 8001526:	f004 f85b 	bl	80055e0 <HAL_GPIO_WritePin>

}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40020000 	.word	0x40020000

08001538 <ExtLightsHighBeam>:

void ExtLightsHighBeam(uint8 PinState)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	461a      	mov	r2, r3
 8001546:	2120      	movs	r1, #32
 8001548:	4803      	ldr	r0, [pc, #12]	; (8001558 <ExtLightsHighBeam+0x20>)
 800154a:	f004 f849 	bl	80055e0 <HAL_GPIO_WritePin>

}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40020000 	.word	0x40020000

0800155c <ExtLightsDayTimeRunningLight>:

void ExtLightsDayTimeRunningLight(uint8 PinState)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_DAYTIMERUNNINGLIGHT_PORT, EXTLIGHTS_DAYTIMERUNNINGLIGHT_PIN, PinState);
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	461a      	mov	r2, r3
 800156a:	2120      	movs	r1, #32
 800156c:	4803      	ldr	r0, [pc, #12]	; (800157c <ExtLightsDayTimeRunningLight+0x20>)
 800156e:	f004 f837 	bl	80055e0 <HAL_GPIO_WritePin>

}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40020000 	.word	0x40020000

08001580 <ExtLightsFrontFogLight>:

void ExtLightsFrontFogLight(uint8 PinState)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_FRONTFOGLIGHT_PORT, EXTLIGHTS_FRONTFOGLIGHT_PIN, PinState);
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	461a      	mov	r2, r3
 800158e:	2120      	movs	r1, #32
 8001590:	4803      	ldr	r0, [pc, #12]	; (80015a0 <ExtLightsFrontFogLight+0x20>)
 8001592:	f004 f825 	bl	80055e0 <HAL_GPIO_WritePin>

}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40020000 	.word	0x40020000

080015a4 <ExtLightsTurnSignalLeft>:

void ExtLightsTurnSignalLeft(uint8 PinState)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALLEFT_PORT, EXTLIGHTS_TURNSIGNALLEFT_PIN, PinState);
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	461a      	mov	r2, r3
 80015b2:	2120      	movs	r1, #32
 80015b4:	4803      	ldr	r0, [pc, #12]	; (80015c4 <ExtLightsTurnSignalLeft+0x20>)
 80015b6:	f004 f813 	bl	80055e0 <HAL_GPIO_WritePin>

}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40020000 	.word	0x40020000

080015c8 <ExtLightsTurnSignalRight>:

void ExtLightsTurnSignalRight(uint8 PinState)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALRIGHT_PORT, EXTLIGHTS_TURNSIGNALRIGHT_PIN, PinState);
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	461a      	mov	r2, r3
 80015d6:	2120      	movs	r1, #32
 80015d8:	4803      	ldr	r0, [pc, #12]	; (80015e8 <ExtLightsTurnSignalRight+0x20>)
 80015da:	f004 f801 	bl	80055e0 <HAL_GPIO_WritePin>

}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40020000 	.word	0x40020000

080015ec <ExtLightsRearPositionLight>:

void ExtLightsRearPositionLight(uint8 PinState)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REARPOSITIONLIGHT_PORT, EXTLIGHTS_REARPOSITIONLIGHT_PIN, PinState);
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	461a      	mov	r2, r3
 80015fa:	2120      	movs	r1, #32
 80015fc:	4803      	ldr	r0, [pc, #12]	; (800160c <ExtLightsRearPositionLight+0x20>)
 80015fe:	f003 ffef 	bl	80055e0 <HAL_GPIO_WritePin>

}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40020000 	.word	0x40020000

08001610 <ExtLightsRearFogLight>:

void ExtLightsRearFogLight(uint8 PinState)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REARFOGLIGHT_PORT, EXTLIGHTS_REARFOGLIGHT_PIN, PinState);
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	461a      	mov	r2, r3
 800161e:	2120      	movs	r1, #32
 8001620:	4803      	ldr	r0, [pc, #12]	; (8001630 <ExtLightsRearFogLight+0x20>)
 8001622:	f003 ffdd 	bl	80055e0 <HAL_GPIO_WritePin>

}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40020000 	.word	0x40020000

08001634 <ExtLightsReverseLight>:
	HAL_GPIO_WritePin(EXTLIGHTS_BRAKELIGHT_PORT, EXTLIGHTS_BRAKELIGHT_PIN, PinState);

}

void ExtLightsReverseLight(uint8 PinState)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	461a      	mov	r2, r3
 8001642:	2120      	movs	r1, #32
 8001644:	4803      	ldr	r0, [pc, #12]	; (8001654 <ExtLightsReverseLight+0x20>)
 8001646:	f003 ffcb 	bl	80055e0 <HAL_GPIO_WritePin>

}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40020000 	.word	0x40020000

08001658 <ExtLightsLicensePlateLight>:

void ExtLightsLicensePlateLight(uint8 PinState)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_LICENSEPLATELIGHT_PORT, EXTLIGHTS_LICENSEPLATELIGHT_PIN, PinState);
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	461a      	mov	r2, r3
 8001666:	2120      	movs	r1, #32
 8001668:	4803      	ldr	r0, [pc, #12]	; (8001678 <ExtLightsLicensePlateLight+0x20>)
 800166a:	f003 ffb9 	bl	80055e0 <HAL_GPIO_WritePin>

}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40020000 	.word	0x40020000

0800167c <HVACTemSenReturnTemperatureValue>:
	}

}

float HVACTemSenReturnTemperatureValue(float TemSenVal)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	ed87 0a01 	vstr	s0, [r7, #4]

	/* redo */

	return 1;
 8001686:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800168a:	ee07 3a90 	vmov	s15, r3

}
 800168e:	eeb0 0a67 	vmov.f32	s0, s15
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HVACTemSenAdcReceivedValues>:

float HVACTemSenAdcReceivedValues()
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0

	uint32 RxTem = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, 6);
 80016a6:	2206      	movs	r2, #6
 80016a8:	490f      	ldr	r1, [pc, #60]	; (80016e8 <HVACTemSenAdcReceivedValues+0x4c>)
 80016aa:	4810      	ldr	r0, [pc, #64]	; (80016ec <HVACTemSenAdcReceivedValues+0x50>)
 80016ac:	f002 f812 	bl	80036d4 <HAL_ADC_Start_DMA>
	RxTem = HVACTemSenReturnTemperatureValue(ADC_BUFFER[0]);
 80016b0:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <HVACTemSenAdcReceivedValues+0x4c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	ee07 3a90 	vmov	s15, r3
 80016b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016bc:	eeb0 0a67 	vmov.f32	s0, s15
 80016c0:	f7ff ffdc 	bl	800167c <HVACTemSenReturnTemperatureValue>
 80016c4:	eef0 7a40 	vmov.f32	s15, s0
 80016c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016cc:	ee17 3a90 	vmov	r3, s15
 80016d0:	607b      	str	r3, [r7, #4]

	return RxTem;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	ee07 3a90 	vmov	s15, r3
 80016d8:	eef8 7a67 	vcvt.f32.u32	s15, s15

}
 80016dc:	eeb0 0a67 	vmov.f32	s0, s15
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200000dc 	.word	0x200000dc
 80016ec:	200000f8 	.word	0x200000f8

080016f0 <HVACMainFunction>:


}

void HVACMainFunction()
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0

	//HVACI2cTxToLcd();
	HVAC_TemSenRxTemperature = HVACTemSenAdcReceivedValues();
 80016f4:	f7ff ffd2 	bl	800169c <HVACTemSenAdcReceivedValues>
 80016f8:	eef0 7a40 	vmov.f32	s15, s0
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <HVACMainFunction+0x1c>)
 80016fe:	edc3 7a00 	vstr	s15, [r3]
	HVACState();
 8001702:	f000 f805 	bl	8001710 <HVACState>

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200000d8 	.word	0x200000d8

08001710 <HVACState>:

void HVACState()
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0

	HVAC_BackwindowDefrost_CurrentState 	= Btc_BackwindowDefrost;
 8001716:	4ba4      	ldr	r3, [pc, #656]	; (80019a8 <HVACState+0x298>)
 8001718:	781a      	ldrb	r2, [r3, #0]
 800171a:	4ba4      	ldr	r3, [pc, #656]	; (80019ac <HVACState+0x29c>)
 800171c:	701a      	strb	r2, [r3, #0]
	HVAC_AC_CurrentState 					= Btc_AC;
 800171e:	4ba4      	ldr	r3, [pc, #656]	; (80019b0 <HVACState+0x2a0>)
 8001720:	781a      	ldrb	r2, [r3, #0]
 8001722:	4ba4      	ldr	r3, [pc, #656]	; (80019b4 <HVACState+0x2a4>)
 8001724:	701a      	strb	r2, [r3, #0]
	HVAC_RecirculationMode_CurrentState 	= Btc_RecirculationMode;
 8001726:	4ba4      	ldr	r3, [pc, #656]	; (80019b8 <HVACState+0x2a8>)
 8001728:	781a      	ldrb	r2, [r3, #0]
 800172a:	4ba4      	ldr	r3, [pc, #656]	; (80019bc <HVACState+0x2ac>)
 800172c:	701a      	strb	r2, [r3, #0]

	if(Btc_TemperatureValue != STD_LOW)
 800172e:	4ba4      	ldr	r3, [pc, #656]	; (80019c0 <HVACState+0x2b0>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d004      	beq.n	8001740 <HVACState+0x30>
	{

		HVAC_TemperatureValue = Btc_TemperatureValue;
 8001736:	4ba2      	ldr	r3, [pc, #648]	; (80019c0 <HVACState+0x2b0>)
 8001738:	781a      	ldrb	r2, [r3, #0]
 800173a:	4ba2      	ldr	r3, [pc, #648]	; (80019c4 <HVACState+0x2b4>)
 800173c:	701a      	strb	r2, [r3, #0]
 800173e:	e009      	b.n	8001754 <HVACState+0x44>

	}
	else if(Btc_TemperatureValue == STD_LOW)
 8001740:	4b9f      	ldr	r3, [pc, #636]	; (80019c0 <HVACState+0x2b0>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d105      	bne.n	8001754 <HVACState+0x44>
	{

		Btc_TemperatureValue 	= 22;
 8001748:	4b9d      	ldr	r3, [pc, #628]	; (80019c0 <HVACState+0x2b0>)
 800174a:	2216      	movs	r2, #22
 800174c:	701a      	strb	r2, [r3, #0]
		Btc_FanValue 		= 1;
 800174e:	4b9e      	ldr	r3, [pc, #632]	; (80019c8 <HVACState+0x2b8>)
 8001750:	2201      	movs	r2, #1
 8001752:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_FanValue == STD_LOW)
 8001754:	4b9c      	ldr	r3, [pc, #624]	; (80019c8 <HVACState+0x2b8>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d103      	bne.n	8001764 <HVACState+0x54>
	{

		HVAC_CurrentState = STD_LOW;
 800175c:	4b9b      	ldr	r3, [pc, #620]	; (80019cc <HVACState+0x2bc>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
 8001762:	e00a      	b.n	800177a <HVACState+0x6a>

	}
	else if(Btc_FanValue != STD_LOW)
 8001764:	4b98      	ldr	r3, [pc, #608]	; (80019c8 <HVACState+0x2b8>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d006      	beq.n	800177a <HVACState+0x6a>
	{

		HVAC_CurrentState 	= STD_HIGH;
 800176c:	4b97      	ldr	r3, [pc, #604]	; (80019cc <HVACState+0x2bc>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]
		HVAC_FanValue 		= Btc_FanValue;
 8001772:	4b95      	ldr	r3, [pc, #596]	; (80019c8 <HVACState+0x2b8>)
 8001774:	781a      	ldrb	r2, [r3, #0]
 8001776:	4b96      	ldr	r3, [pc, #600]	; (80019d0 <HVACState+0x2c0>)
 8001778:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_LegVents == STD_HIGH)
 800177a:	4b96      	ldr	r3, [pc, #600]	; (80019d4 <HVACState+0x2c4>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d107      	bne.n	8001792 <HVACState+0x82>
	{

		Btc_AutomaticMode 			= STD_LOW;
 8001782:	4b95      	ldr	r3, [pc, #596]	; (80019d8 <HVACState+0x2c8>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 	= Btc_LegVents;
 8001788:	4b92      	ldr	r3, [pc, #584]	; (80019d4 <HVACState+0x2c4>)
 800178a:	781a      	ldrb	r2, [r3, #0]
 800178c:	4b93      	ldr	r3, [pc, #588]	; (80019dc <HVACState+0x2cc>)
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	e00a      	b.n	80017a8 <HVACState+0x98>

	}
	else if(Btc_LegVents == STD_LOW)
 8001792:	4b90      	ldr	r3, [pc, #576]	; (80019d4 <HVACState+0x2c4>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d106      	bne.n	80017a8 <HVACState+0x98>
	{

		Btc_AutomaticMode 			= STD_LOW;
 800179a:	4b8f      	ldr	r3, [pc, #572]	; (80019d8 <HVACState+0x2c8>)
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 	= Btc_LegVents;
 80017a0:	4b8c      	ldr	r3, [pc, #560]	; (80019d4 <HVACState+0x2c4>)
 80017a2:	781a      	ldrb	r2, [r3, #0]
 80017a4:	4b8d      	ldr	r3, [pc, #564]	; (80019dc <HVACState+0x2cc>)
 80017a6:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_MidVents == STD_HIGH)
 80017a8:	4b8d      	ldr	r3, [pc, #564]	; (80019e0 <HVACState+0x2d0>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d107      	bne.n	80017c0 <HVACState+0xb0>
	{

		Btc_AutomaticMode 			= STD_LOW;
 80017b0:	4b89      	ldr	r3, [pc, #548]	; (80019d8 <HVACState+0x2c8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 	= Btc_MidVents;
 80017b6:	4b8a      	ldr	r3, [pc, #552]	; (80019e0 <HVACState+0x2d0>)
 80017b8:	781a      	ldrb	r2, [r3, #0]
 80017ba:	4b8a      	ldr	r3, [pc, #552]	; (80019e4 <HVACState+0x2d4>)
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	e00a      	b.n	80017d6 <HVACState+0xc6>

	}
	else if(Btc_MidVents == STD_LOW)
 80017c0:	4b87      	ldr	r3, [pc, #540]	; (80019e0 <HVACState+0x2d0>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d106      	bne.n	80017d6 <HVACState+0xc6>
	{

		Btc_AutomaticMode 			= STD_LOW;
 80017c8:	4b83      	ldr	r3, [pc, #524]	; (80019d8 <HVACState+0x2c8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 	= Btc_MidVents;
 80017ce:	4b84      	ldr	r3, [pc, #528]	; (80019e0 <HVACState+0x2d0>)
 80017d0:	781a      	ldrb	r2, [r3, #0]
 80017d2:	4b84      	ldr	r3, [pc, #528]	; (80019e4 <HVACState+0x2d4>)
 80017d4:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_WindshieldVents == STD_HIGH)
 80017d6:	4b84      	ldr	r3, [pc, #528]	; (80019e8 <HVACState+0x2d8>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d107      	bne.n	80017ee <HVACState+0xde>
	{

		Btc_AutomaticMode 					= STD_LOW;
 80017de:	4b7e      	ldr	r3, [pc, #504]	; (80019d8 <HVACState+0x2c8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 	= Btc_WindshieldVents;
 80017e4:	4b80      	ldr	r3, [pc, #512]	; (80019e8 <HVACState+0x2d8>)
 80017e6:	781a      	ldrb	r2, [r3, #0]
 80017e8:	4b80      	ldr	r3, [pc, #512]	; (80019ec <HVACState+0x2dc>)
 80017ea:	701a      	strb	r2, [r3, #0]
 80017ec:	e00a      	b.n	8001804 <HVACState+0xf4>

	}
	else if(Btc_WindshieldVents == STD_LOW)
 80017ee:	4b7e      	ldr	r3, [pc, #504]	; (80019e8 <HVACState+0x2d8>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d106      	bne.n	8001804 <HVACState+0xf4>
	{

		Btc_AutomaticMode 					= STD_LOW;
 80017f6:	4b78      	ldr	r3, [pc, #480]	; (80019d8 <HVACState+0x2c8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 	= Btc_WindshieldVents;
 80017fc:	4b7a      	ldr	r3, [pc, #488]	; (80019e8 <HVACState+0x2d8>)
 80017fe:	781a      	ldrb	r2, [r3, #0]
 8001800:	4b7a      	ldr	r3, [pc, #488]	; (80019ec <HVACState+0x2dc>)
 8001802:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_WindshieldDefrost == STD_HIGH)
 8001804:	4b7a      	ldr	r3, [pc, #488]	; (80019f0 <HVACState+0x2e0>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d110      	bne.n	800182e <HVACState+0x11e>
	{

		Btc_AutomaticMode				 		= STD_LOW;
 800180c:	4b72      	ldr	r3, [pc, #456]	; (80019d8 <HVACState+0x2c8>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 8001812:	4b77      	ldr	r3, [pc, #476]	; (80019f0 <HVACState+0x2e0>)
 8001814:	781a      	ldrb	r2, [r3, #0]
 8001816:	4b77      	ldr	r3, [pc, #476]	; (80019f4 <HVACState+0x2e4>)
 8001818:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= STD_LOW;
 800181a:	4b70      	ldr	r3, [pc, #448]	; (80019dc <HVACState+0x2cc>)
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= STD_LOW;
 8001820:	4b70      	ldr	r3, [pc, #448]	; (80019e4 <HVACState+0x2d4>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= STD_LOW;
 8001826:	4b71      	ldr	r3, [pc, #452]	; (80019ec <HVACState+0x2dc>)
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
 800182c:	e016      	b.n	800185c <HVACState+0x14c>

	}
	else if(Btc_WindshieldDefrost == STD_LOW)
 800182e:	4b70      	ldr	r3, [pc, #448]	; (80019f0 <HVACState+0x2e0>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d112      	bne.n	800185c <HVACState+0x14c>
	{

		Btc_AutomaticMode				 		= STD_LOW;
 8001836:	4b68      	ldr	r3, [pc, #416]	; (80019d8 <HVACState+0x2c8>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 800183c:	4b6c      	ldr	r3, [pc, #432]	; (80019f0 <HVACState+0x2e0>)
 800183e:	781a      	ldrb	r2, [r3, #0]
 8001840:	4b6c      	ldr	r3, [pc, #432]	; (80019f4 <HVACState+0x2e4>)
 8001842:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= Btc_LegVents;
 8001844:	4b63      	ldr	r3, [pc, #396]	; (80019d4 <HVACState+0x2c4>)
 8001846:	781a      	ldrb	r2, [r3, #0]
 8001848:	4b64      	ldr	r3, [pc, #400]	; (80019dc <HVACState+0x2cc>)
 800184a:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= Btc_MidVents;
 800184c:	4b64      	ldr	r3, [pc, #400]	; (80019e0 <HVACState+0x2d0>)
 800184e:	781a      	ldrb	r2, [r3, #0]
 8001850:	4b64      	ldr	r3, [pc, #400]	; (80019e4 <HVACState+0x2d4>)
 8001852:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= Btc_WindshieldVents;
 8001854:	4b64      	ldr	r3, [pc, #400]	; (80019e8 <HVACState+0x2d8>)
 8001856:	781a      	ldrb	r2, [r3, #0]
 8001858:	4b64      	ldr	r3, [pc, #400]	; (80019ec <HVACState+0x2dc>)
 800185a:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_AutomaticMode == STD_HIGH)
 800185c:	4b5e      	ldr	r3, [pc, #376]	; (80019d8 <HVACState+0x2c8>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b01      	cmp	r3, #1
 8001862:	f040 80e5 	bne.w	8001a30 <HVACState+0x320>
	{

		HVAC_AutomaticMode_CurrentState 		= STD_HIGH;
 8001866:	4b64      	ldr	r3, [pc, #400]	; (80019f8 <HVACState+0x2e8>)
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= STD_LOW;
 800186c:	4b61      	ldr	r3, [pc, #388]	; (80019f4 <HVACState+0x2e4>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= STD_LOW;
 8001872:	4b5e      	ldr	r3, [pc, #376]	; (80019ec <HVACState+0x2dc>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= STD_LOW;
 8001878:	4b5a      	ldr	r3, [pc, #360]	; (80019e4 <HVACState+0x2d4>)
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= STD_LOW;
 800187e:	4b57      	ldr	r3, [pc, #348]	; (80019dc <HVACState+0x2cc>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]

		if(HVAC_TemperatureValue < HVAC_TemSenRxTemperature)
 8001884:	4b4f      	ldr	r3, [pc, #316]	; (80019c4 <HVACState+0x2b4>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001890:	4b5a      	ldr	r3, [pc, #360]	; (80019fc <HVACState+0x2ec>)
 8001892:	edd3 7a00 	vldr	s15, [r3]
 8001896:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800189a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189e:	d542      	bpl.n	8001926 <HVACState+0x216>
		{

			if((HVAC_TemSenRxTemperature - HVAC_TemperatureValue) * 2 > 7)
 80018a0:	4b56      	ldr	r3, [pc, #344]	; (80019fc <HVACState+0x2ec>)
 80018a2:	ed93 7a00 	vldr	s14, [r3]
 80018a6:	4b47      	ldr	r3, [pc, #284]	; (80019c4 <HVACState+0x2b4>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	ee07 3a90 	vmov	s15, r3
 80018ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018ba:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80018be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c6:	dd03      	ble.n	80018d0 <HVACState+0x1c0>
			{

				HVAC_FanValue = 7;
 80018c8:	4b41      	ldr	r3, [pc, #260]	; (80019d0 <HVACState+0x2c0>)
 80018ca:	2207      	movs	r2, #7
 80018cc:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 80018ce:	e0c6      	b.n	8001a5e <HVACState+0x34e>
			else if((HVAC_TemSenRxTemperature - HVAC_TemperatureValue) * 2 <= 7)
 80018d0:	4b4a      	ldr	r3, [pc, #296]	; (80019fc <HVACState+0x2ec>)
 80018d2:	ed93 7a00 	vldr	s14, [r3]
 80018d6:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <HVACState+0x2b4>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	ee07 3a90 	vmov	s15, r3
 80018de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018ea:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80018ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f6:	d900      	bls.n	80018fa <HVACState+0x1ea>
}
 80018f8:	e0b1      	b.n	8001a5e <HVACState+0x34e>
				HVAC_FanValue = (HVAC_TemSenRxTemperature - HVAC_TemperatureValue) * 2;
 80018fa:	4b40      	ldr	r3, [pc, #256]	; (80019fc <HVACState+0x2ec>)
 80018fc:	ed93 7a00 	vldr	s14, [r3]
 8001900:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <HVACState+0x2b4>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	ee07 3a90 	vmov	s15, r3
 8001908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800190c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001910:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001918:	edc7 7a01 	vstr	s15, [r7, #4]
 800191c:	793b      	ldrb	r3, [r7, #4]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <HVACState+0x2c0>)
 8001922:	701a      	strb	r2, [r3, #0]
}
 8001924:	e09b      	b.n	8001a5e <HVACState+0x34e>
		else if(HVAC_TemperatureValue >= HVAC_TemSenRxTemperature)
 8001926:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <HVACState+0x2b4>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001932:	4b32      	ldr	r3, [pc, #200]	; (80019fc <HVACState+0x2ec>)
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800193c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001940:	da00      	bge.n	8001944 <HVACState+0x234>
}
 8001942:	e08c      	b.n	8001a5e <HVACState+0x34e>
			if((HVAC_TemSenRxTemperature - HVAC_TemperatureValue) / 2 < 1)
 8001944:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HVACState+0x2ec>)
 8001946:	ed93 7a00 	vldr	s14, [r3]
 800194a:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <HVACState+0x2b4>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	ee07 3a90 	vmov	s15, r3
 8001952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001956:	ee37 7a67 	vsub.f32	s14, s14, s15
 800195a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800195e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001962:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001966:	eef4 7ac7 	vcmpe.f32	s15, s14
 800196a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196e:	d503      	bpl.n	8001978 <HVACState+0x268>
				HVAC_FanValue = 1;
 8001970:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <HVACState+0x2c0>)
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
}
 8001976:	e072      	b.n	8001a5e <HVACState+0x34e>
			else if((HVAC_TemSenRxTemperature - HVAC_TemperatureValue) / 2 > 1)
 8001978:	4b20      	ldr	r3, [pc, #128]	; (80019fc <HVACState+0x2ec>)
 800197a:	ed93 7a00 	vldr	s14, [r3]
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HVACState+0x2b4>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	ee07 3a90 	vmov	s15, r3
 8001986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800198a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800198e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001992:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001996:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800199a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a2:	dc2d      	bgt.n	8001a00 <HVACState+0x2f0>
}
 80019a4:	e05b      	b.n	8001a5e <HVACState+0x34e>
 80019a6:	bf00      	nop
 80019a8:	200000d0 	.word	0x200000d0
 80019ac:	200000c9 	.word	0x200000c9
 80019b0:	200000d1 	.word	0x200000d1
 80019b4:	200000c6 	.word	0x200000c6
 80019b8:	200000d3 	.word	0x200000d3
 80019bc:	200000c8 	.word	0x200000c8
 80019c0:	200000ca 	.word	0x200000ca
 80019c4:	200000c0 	.word	0x200000c0
 80019c8:	200000cb 	.word	0x200000cb
 80019cc:	200000bf 	.word	0x200000bf
 80019d0:	200000c1 	.word	0x200000c1
 80019d4:	200000cc 	.word	0x200000cc
 80019d8:	200000d2 	.word	0x200000d2
 80019dc:	200000c2 	.word	0x200000c2
 80019e0:	200000cd 	.word	0x200000cd
 80019e4:	200000c3 	.word	0x200000c3
 80019e8:	200000ce 	.word	0x200000ce
 80019ec:	200000c4 	.word	0x200000c4
 80019f0:	200000cf 	.word	0x200000cf
 80019f4:	200000c5 	.word	0x200000c5
 80019f8:	200000c7 	.word	0x200000c7
 80019fc:	200000d8 	.word	0x200000d8
				HVAC_FanValue = (HVAC_TemSenRxTemperature - HVAC_TemperatureValue) / 2;
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HVACState+0x35c>)
 8001a02:	ed93 7a00 	vldr	s14, [r3]
 8001a06:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <HVACState+0x360>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a16:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a22:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a26:	793b      	ldrb	r3, [r7, #4]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HVACState+0x364>)
 8001a2c:	701a      	strb	r2, [r3, #0]
}
 8001a2e:	e016      	b.n	8001a5e <HVACState+0x34e>
	else if(Btc_NormalMode == STD_HIGH)
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HVACState+0x368>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d112      	bne.n	8001a5e <HVACState+0x34e>
		HVAC_AutomaticMode_CurrentState 		= STD_LOW;
 8001a38:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <HVACState+0x36c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <HVACState+0x370>)
 8001a40:	781a      	ldrb	r2, [r3, #0]
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HVACState+0x374>)
 8001a44:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= Btc_WindshieldVents;
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <HVACState+0x378>)
 8001a48:	781a      	ldrb	r2, [r3, #0]
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HVACState+0x37c>)
 8001a4c:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= Btc_MidVents;
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <HVACState+0x380>)
 8001a50:	781a      	ldrb	r2, [r3, #0]
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <HVACState+0x384>)
 8001a54:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= Btc_LegVents;
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HVACState+0x388>)
 8001a58:	781a      	ldrb	r2, [r3, #0]
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <HVACState+0x38c>)
 8001a5c:	701a      	strb	r2, [r3, #0]
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	200000d8 	.word	0x200000d8
 8001a70:	200000c0 	.word	0x200000c0
 8001a74:	200000c1 	.word	0x200000c1
 8001a78:	200000d4 	.word	0x200000d4
 8001a7c:	200000c7 	.word	0x200000c7
 8001a80:	200000cf 	.word	0x200000cf
 8001a84:	200000c5 	.word	0x200000c5
 8001a88:	200000ce 	.word	0x200000ce
 8001a8c:	200000c4 	.word	0x200000c4
 8001a90:	200000cd 	.word	0x200000cd
 8001a94:	200000c3 	.word	0x200000c3
 8001a98:	200000cc 	.word	0x200000cc
 8001a9c:	200000c2 	.word	0x200000c2

08001aa0 <IntLightsRxBtcState>:
void IntLightsMainFunction();
void IntLightsToggleIntLights(uint8 PinState);
void IntLightsRxBtcState();

void IntLightsRxBtcState()
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0

	uint8 lightsStateFromBtcCommand = BtcReceivedDataOnBluetooth;
 8001aa6:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <IntLightsRxBtcState+0x98>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	71fb      	strb	r3, [r7, #7]

	switch(lightsStateFromBtcCommand)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	2b13      	cmp	r3, #19
 8001ab2:	d83b      	bhi.n	8001b2c <IntLightsRxBtcState+0x8c>
 8001ab4:	a201      	add	r2, pc, #4	; (adr r2, 8001abc <IntLightsRxBtcState+0x1c>)
 8001ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aba:	bf00      	nop
 8001abc:	08001b0d 	.word	0x08001b0d
 8001ac0:	08001b15 	.word	0x08001b15
 8001ac4:	08001b2d 	.word	0x08001b2d
 8001ac8:	08001b2d 	.word	0x08001b2d
 8001acc:	08001b2d 	.word	0x08001b2d
 8001ad0:	08001b2d 	.word	0x08001b2d
 8001ad4:	08001b2d 	.word	0x08001b2d
 8001ad8:	08001b2d 	.word	0x08001b2d
 8001adc:	08001b2d 	.word	0x08001b2d
 8001ae0:	08001b2d 	.word	0x08001b2d
 8001ae4:	08001b2d 	.word	0x08001b2d
 8001ae8:	08001b2d 	.word	0x08001b2d
 8001aec:	08001b2d 	.word	0x08001b2d
 8001af0:	08001b2d 	.word	0x08001b2d
 8001af4:	08001b2d 	.word	0x08001b2d
 8001af8:	08001b2d 	.word	0x08001b2d
 8001afc:	08001b2d 	.word	0x08001b2d
 8001b00:	08001b2d 	.word	0x08001b2d
 8001b04:	08001b1d 	.word	0x08001b1d
 8001b08:	08001b25 	.word	0x08001b25
	{
		case LIGHTSON_CENLOCON:

			IntLights_CurrentState = STD_HIGH;
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <IntLightsRxBtcState+0x9c>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	701a      	strb	r2, [r3, #0]

			break;
 8001b12:	e00b      	b.n	8001b2c <IntLightsRxBtcState+0x8c>

		case LIGHTSOFF_CENLOCOFF:

			IntLights_CurrentState = STD_LOW;
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <IntLightsRxBtcState+0x9c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]

			break;
 8001b1a:	e007      	b.n	8001b2c <IntLightsRxBtcState+0x8c>

		case LIGHTSON_INTLIGHTSON:

			IntLights_CurrentState = STD_HIGH;
 8001b1c:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <IntLightsRxBtcState+0x9c>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]

			break;
 8001b22:	e003      	b.n	8001b2c <IntLightsRxBtcState+0x8c>

		case LIGHTSOFF_INTLIGHTSOFF:

			IntLights_CurrentState = STD_LOW;
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <IntLightsRxBtcState+0x9c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]

			break;
 8001b2a:	bf00      	nop

	}

}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	20000094 	.word	0x20000094
 8001b3c:	200000f4 	.word	0x200000f4

08001b40 <IntLightsMainFunction>:

void IntLightsMainFunction()
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0

	IntLightsRxBtcState();
 8001b44:	f7ff ffac 	bl	8001aa0 <IntLightsRxBtcState>
	IntLightsToggleIntLights(IntLights_CurrentState);
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <IntLightsMainFunction+0x18>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 f805 	bl	8001b5c <IntLightsToggleIntLights>

}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200000f4 	.word	0x200000f4

08001b5c <IntLightsToggleIntLights>:
	return E_OK;

}

void IntLightsToggleIntLights(uint8 PinState)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(INTERIOR_LIGHT_PORT, INTERIOR_LIGHT_PIN, PinState);
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b6e:	4803      	ldr	r0, [pc, #12]	; (8001b7c <IntLightsToggleIntLights+0x20>)
 8001b70:	f003 fd36 	bl	80055e0 <HAL_GPIO_WritePin>

}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40020400 	.word	0x40020400

08001b80 <SecAlmToggleAlarmLed>:
	HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);

}

void SecAlmToggleAlarmLed(uint8 PinState)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2180      	movs	r1, #128	; 0x80
 8001b90:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <SecAlmToggleAlarmLed+0x20>)
 8001b92:	f003 fd25 	bl	80055e0 <HAL_GPIO_WritePin>

}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40020000 	.word	0x40020000

08001ba4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001baa:	463b      	mov	r3, r7
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bb6:	4b3e      	ldr	r3, [pc, #248]	; (8001cb0 <MX_ADC1_Init+0x10c>)
 8001bb8:	4a3e      	ldr	r2, [pc, #248]	; (8001cb4 <MX_ADC1_Init+0x110>)
 8001bba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bbc:	4b3c      	ldr	r3, [pc, #240]	; (8001cb0 <MX_ADC1_Init+0x10c>)
 8001bbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bc2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bc4:	4b3a      	ldr	r3, [pc, #232]	; (8001cb0 <MX_ADC1_Init+0x10c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001bca:	4b39      	ldr	r3, [pc, #228]	; (8001cb0 <MX_ADC1_Init+0x10c>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001bd0:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <MX_ADC1_Init+0x10c>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bd6:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <MX_ADC1_Init+0x10c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bde:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <MX_ADC1_Init+0x10c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001be4:	4b32      	ldr	r3, [pc, #200]	; (8001cb0 <MX_ADC1_Init+0x10c>)
 8001be6:	4a34      	ldr	r2, [pc, #208]	; (8001cb8 <MX_ADC1_Init+0x114>)
 8001be8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bea:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <MX_ADC1_Init+0x10c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001bf0:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <MX_ADC1_Init+0x10c>)
 8001bf2:	2205      	movs	r2, #5
 8001bf4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bf6:	4b2e      	ldr	r3, [pc, #184]	; (8001cb0 <MX_ADC1_Init+0x10c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bfe:	4b2c      	ldr	r3, [pc, #176]	; (8001cb0 <MX_ADC1_Init+0x10c>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c04:	482a      	ldr	r0, [pc, #168]	; (8001cb0 <MX_ADC1_Init+0x10c>)
 8001c06:	f001 faa1 	bl	800314c <HAL_ADC_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c10:	f000 fbc8 	bl	80023a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c14:	2301      	movs	r3, #1
 8001c16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c20:	463b      	mov	r3, r7
 8001c22:	4619      	mov	r1, r3
 8001c24:	4822      	ldr	r0, [pc, #136]	; (8001cb0 <MX_ADC1_Init+0x10c>)
 8001c26:	f001 fe95 	bl	8003954 <HAL_ADC_ConfigChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c30:	f000 fbb8 	bl	80023a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c34:	2302      	movs	r3, #2
 8001c36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	4619      	mov	r1, r3
 8001c40:	481b      	ldr	r0, [pc, #108]	; (8001cb0 <MX_ADC1_Init+0x10c>)
 8001c42:	f001 fe87 	bl	8003954 <HAL_ADC_ConfigChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001c4c:	f000 fbaa 	bl	80023a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001c50:	2303      	movs	r3, #3
 8001c52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001c54:	2303      	movs	r3, #3
 8001c56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c58:	463b      	mov	r3, r7
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4814      	ldr	r0, [pc, #80]	; (8001cb0 <MX_ADC1_Init+0x10c>)
 8001c5e:	f001 fe79 	bl	8003954 <HAL_ADC_ConfigChannel>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001c68:	f000 fb9c 	bl	80023a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001c6c:	2309      	movs	r3, #9
 8001c6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001c70:	2304      	movs	r3, #4
 8001c72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c74:	463b      	mov	r3, r7
 8001c76:	4619      	mov	r1, r3
 8001c78:	480d      	ldr	r0, [pc, #52]	; (8001cb0 <MX_ADC1_Init+0x10c>)
 8001c7a:	f001 fe6b 	bl	8003954 <HAL_ADC_ConfigChannel>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001c84:	f000 fb8e 	bl	80023a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MX_ADC1_Init+0x118>)
 8001c8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001c8c:	2305      	movs	r3, #5
 8001c8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001c90:	2307      	movs	r3, #7
 8001c92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c94:	463b      	mov	r3, r7
 8001c96:	4619      	mov	r1, r3
 8001c98:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <MX_ADC1_Init+0x10c>)
 8001c9a:	f001 fe5b 	bl	8003954 <HAL_ADC_ConfigChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8001ca4:	f000 fb7e 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	200000f8 	.word	0x200000f8
 8001cb4:	40012000 	.word	0x40012000
 8001cb8:	0f000001 	.word	0x0f000001
 8001cbc:	10000012 	.word	0x10000012

08001cc0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08c      	sub	sp, #48	; 0x30
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a4d      	ldr	r2, [pc, #308]	; (8001e14 <HAL_ADC_MspInit+0x154>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	f040 8094 	bne.w	8001e0c <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61bb      	str	r3, [r7, #24]
 8001ce8:	4b4b      	ldr	r3, [pc, #300]	; (8001e18 <HAL_ADC_MspInit+0x158>)
 8001cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cec:	4a4a      	ldr	r2, [pc, #296]	; (8001e18 <HAL_ADC_MspInit+0x158>)
 8001cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf2:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf4:	4b48      	ldr	r3, [pc, #288]	; (8001e18 <HAL_ADC_MspInit+0x158>)
 8001cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	4b44      	ldr	r3, [pc, #272]	; (8001e18 <HAL_ADC_MspInit+0x158>)
 8001d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d08:	4a43      	ldr	r2, [pc, #268]	; (8001e18 <HAL_ADC_MspInit+0x158>)
 8001d0a:	f043 0304 	orr.w	r3, r3, #4
 8001d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d10:	4b41      	ldr	r3, [pc, #260]	; (8001e18 <HAL_ADC_MspInit+0x158>)
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	4b3d      	ldr	r3, [pc, #244]	; (8001e18 <HAL_ADC_MspInit+0x158>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	4a3c      	ldr	r2, [pc, #240]	; (8001e18 <HAL_ADC_MspInit+0x158>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2c:	4b3a      	ldr	r3, [pc, #232]	; (8001e18 <HAL_ADC_MspInit+0x158>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <HAL_ADC_MspInit+0x158>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	4a35      	ldr	r2, [pc, #212]	; (8001e18 <HAL_ADC_MspInit+0x158>)
 8001d42:	f043 0302 	orr.w	r3, r3, #2
 8001d46:	6313      	str	r3, [r2, #48]	; 0x30
 8001d48:	4b33      	ldr	r3, [pc, #204]	; (8001e18 <HAL_ADC_MspInit+0x158>)
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001d54:	2307      	movs	r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d60:	f107 031c 	add.w	r3, r7, #28
 8001d64:	4619      	mov	r1, r3
 8001d66:	482d      	ldr	r0, [pc, #180]	; (8001e1c <HAL_ADC_MspInit+0x15c>)
 8001d68:	f003 f9a0 	bl	80050ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001d6c:	230e      	movs	r3, #14
 8001d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d70:	2303      	movs	r3, #3
 8001d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4828      	ldr	r0, [pc, #160]	; (8001e20 <HAL_ADC_MspInit+0x160>)
 8001d80:	f003 f994 	bl	80050ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d84:	2302      	movs	r3, #2
 8001d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	4619      	mov	r1, r3
 8001d96:	4823      	ldr	r0, [pc, #140]	; (8001e24 <HAL_ADC_MspInit+0x164>)
 8001d98:	f003 f988 	bl	80050ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001d9c:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <HAL_ADC_MspInit+0x168>)
 8001d9e:	4a23      	ldr	r2, [pc, #140]	; (8001e2c <HAL_ADC_MspInit+0x16c>)
 8001da0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001da2:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <HAL_ADC_MspInit+0x168>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001da8:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <HAL_ADC_MspInit+0x168>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dae:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <HAL_ADC_MspInit+0x168>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001db4:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <HAL_ADC_MspInit+0x168>)
 8001db6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <HAL_ADC_MspInit+0x168>)
 8001dbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dc2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001dc4:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <HAL_ADC_MspInit+0x168>)
 8001dc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dca:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001dcc:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HAL_ADC_MspInit+0x168>)
 8001dce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dd2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HAL_ADC_MspInit+0x168>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dda:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <HAL_ADC_MspInit+0x168>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001de0:	4811      	ldr	r0, [pc, #68]	; (8001e28 <HAL_ADC_MspInit+0x168>)
 8001de2:	f002 fa03 	bl	80041ec <HAL_DMA_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001dec:	f000 fada 	bl	80023a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <HAL_ADC_MspInit+0x168>)
 8001df4:	639a      	str	r2, [r3, #56]	; 0x38
 8001df6:	4a0c      	ldr	r2, [pc, #48]	; (8001e28 <HAL_ADC_MspInit+0x168>)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2105      	movs	r1, #5
 8001e00:	2012      	movs	r0, #18
 8001e02:	f002 f985 	bl	8004110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001e06:	2012      	movs	r0, #18
 8001e08:	f002 f9ae 	bl	8004168 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3730      	adds	r7, #48	; 0x30
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40012000 	.word	0x40012000
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	40020000 	.word	0x40020000
 8001e24:	40020400 	.word	0x40020400
 8001e28:	2000015c 	.word	0x2000015c
 8001e2c:	40026410 	.word	0x40026410

08001e30 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <MX_CRC_Init+0x20>)
 8001e36:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <MX_CRC_Init+0x24>)
 8001e38:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001e3a:	4805      	ldr	r0, [pc, #20]	; (8001e50 <MX_CRC_Init+0x20>)
 8001e3c:	f002 f9ac 	bl	8004198 <HAL_CRC_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001e46:	f000 faad 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200001bc 	.word	0x200001bc
 8001e54:	40023000 	.word	0x40023000

08001e58 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <HAL_CRC_MspInit+0x3c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d10d      	bne.n	8001e86 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <HAL_CRC_MspInit+0x40>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a09      	ldr	r2, [pc, #36]	; (8001e98 <HAL_CRC_MspInit+0x40>)
 8001e74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <HAL_CRC_MspInit+0x40>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40023000 	.word	0x40023000
 8001e98:	40023800 	.word	0x40023800

08001e9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <MX_DMA_Init+0x3c>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <MX_DMA_Init+0x3c>)
 8001eac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <MX_DMA_Init+0x3c>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2105      	movs	r1, #5
 8001ec2:	2038      	movs	r0, #56	; 0x38
 8001ec4:	f002 f924 	bl	8004110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ec8:	2038      	movs	r0, #56	; 0x38
 8001eca:	f002 f94d 	bl	8004168 <HAL_NVIC_EnableIRQ>

}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800

08001edc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001ee0:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <MX_FREERTOS_Init+0x28>)
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4808      	ldr	r0, [pc, #32]	; (8001f08 <MX_FREERTOS_Init+0x2c>)
 8001ee6:	f00a f885 	bl	800bff4 <osThreadNew>
 8001eea:	4603      	mov	r3, r0
 8001eec:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <MX_FREERTOS_Init+0x30>)
 8001eee:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <MX_FREERTOS_Init+0x34>)
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4807      	ldr	r0, [pc, #28]	; (8001f14 <MX_FREERTOS_Init+0x38>)
 8001ef6:	f00a f87d 	bl	800bff4 <osThreadNew>
 8001efa:	4603      	mov	r3, r0
 8001efc:	4a06      	ldr	r2, [pc, #24]	; (8001f18 <MX_FREERTOS_Init+0x3c>)
 8001efe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	0800f37c 	.word	0x0800f37c
 8001f08:	08001f1d 	.word	0x08001f1d
 8001f0c:	200001c8 	.word	0x200001c8
 8001f10:	0800f3a0 	.word	0x0800f3a0
 8001f14:	08001f41 	.word	0x08001f41
 8001f18:	200001cc 	.word	0x200001cc

08001f1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  CenLocMainFunction();
 8001f24:	f7ff f830 	bl	8000f88 <CenLocMainFunction>
	  BtcMainFunction();
 8001f28:	f7fe fdbc 	bl	8000aa4 <BtcMainFunction>
	  ExtLightsMainFunction();
 8001f2c:	f7ff f838 	bl	8000fa0 <ExtLightsMainFunction>
	  IntLightsMainFunction();
 8001f30:	f7ff fe06 	bl	8001b40 <IntLightsMainFunction>
	  //SecAlmMainFunction();
	  HVACMainFunction();
 8001f34:	f7ff fbdc 	bl	80016f0 <HVACMainFunction>
    osDelay(1);
 8001f38:	2001      	movs	r0, #1
 8001f3a:	f00a f8ed 	bl	800c118 <osDelay>
	  CenLocMainFunction();
 8001f3e:	e7f1      	b.n	8001f24 <StartDefaultTask+0x8>

08001f40 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  OS_Counter++;
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <StartTask02+0x1c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	4a03      	ldr	r2, [pc, #12]	; (8001f5c <StartTask02+0x1c>)
 8001f50:	6013      	str	r3, [r2, #0]
    osDelay(1);
 8001f52:	2001      	movs	r0, #1
 8001f54:	f00a f8e0 	bl	800c118 <osDelay>
	  OS_Counter++;
 8001f58:	e7f6      	b.n	8001f48 <StartTask02+0x8>
 8001f5a:	bf00      	nop
 8001f5c:	200001c4 	.word	0x200001c4

08001f60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <MX_GPIO_Init+0x84>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a1d      	ldr	r2, [pc, #116]	; (8001fe4 <MX_GPIO_Init+0x84>)
 8001f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <MX_GPIO_Init+0x84>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	4b17      	ldr	r3, [pc, #92]	; (8001fe4 <MX_GPIO_Init+0x84>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a16      	ldr	r2, [pc, #88]	; (8001fe4 <MX_GPIO_Init+0x84>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <MX_GPIO_Init+0x84>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <MX_GPIO_Init+0x84>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a0f      	ldr	r2, [pc, #60]	; (8001fe4 <MX_GPIO_Init+0x84>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <MX_GPIO_Init+0x84>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <MX_GPIO_Init+0x84>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a08      	ldr	r2, [pc, #32]	; (8001fe4 <MX_GPIO_Init+0x84>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <MX_GPIO_Init+0x84>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]

}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800

08001fe8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <MX_I2C1_Init+0x50>)
 8001fee:	4a13      	ldr	r2, [pc, #76]	; (800203c <MX_I2C1_Init+0x54>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <MX_I2C1_Init+0x50>)
 8001ff4:	4a12      	ldr	r2, [pc, #72]	; (8002040 <MX_I2C1_Init+0x58>)
 8001ff6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <MX_I2C1_Init+0x50>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <MX_I2C1_Init+0x50>)
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <MX_I2C1_Init+0x50>)
 8002006:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800200a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <MX_I2C1_Init+0x50>)
 800200e:	2200      	movs	r2, #0
 8002010:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <MX_I2C1_Init+0x50>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <MX_I2C1_Init+0x50>)
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <MX_I2C1_Init+0x50>)
 8002020:	2200      	movs	r2, #0
 8002022:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002024:	4804      	ldr	r0, [pc, #16]	; (8002038 <MX_I2C1_Init+0x50>)
 8002026:	f003 fb0d 	bl	8005644 <HAL_I2C_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002030:	f000 f9b8 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	200001d0 	.word	0x200001d0
 800203c:	40005400 	.word	0x40005400
 8002040:	000186a0 	.word	0x000186a0

08002044 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <MX_I2C3_Init+0x50>)
 800204a:	4a13      	ldr	r2, [pc, #76]	; (8002098 <MX_I2C3_Init+0x54>)
 800204c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_I2C3_Init+0x50>)
 8002050:	4a12      	ldr	r2, [pc, #72]	; (800209c <MX_I2C3_Init+0x58>)
 8002052:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <MX_I2C3_Init+0x50>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <MX_I2C3_Init+0x50>)
 800205c:	2200      	movs	r2, #0
 800205e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MX_I2C3_Init+0x50>)
 8002062:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002066:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <MX_I2C3_Init+0x50>)
 800206a:	2200      	movs	r2, #0
 800206c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <MX_I2C3_Init+0x50>)
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002074:	4b07      	ldr	r3, [pc, #28]	; (8002094 <MX_I2C3_Init+0x50>)
 8002076:	2200      	movs	r2, #0
 8002078:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <MX_I2C3_Init+0x50>)
 800207c:	2200      	movs	r2, #0
 800207e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002080:	4804      	ldr	r0, [pc, #16]	; (8002094 <MX_I2C3_Init+0x50>)
 8002082:	f003 fadf 	bl	8005644 <HAL_I2C_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800208c:	f000 f98a 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000254 	.word	0x20000254
 8002098:	40005c00 	.word	0x40005c00
 800209c:	000186a0 	.word	0x000186a0

080020a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08c      	sub	sp, #48	; 0x30
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 031c 	add.w	r3, r7, #28
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a4a      	ldr	r2, [pc, #296]	; (80021e8 <HAL_I2C_MspInit+0x148>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d13d      	bne.n	800213e <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
 80020c6:	4b49      	ldr	r3, [pc, #292]	; (80021ec <HAL_I2C_MspInit+0x14c>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	4a48      	ldr	r2, [pc, #288]	; (80021ec <HAL_I2C_MspInit+0x14c>)
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	6313      	str	r3, [r2, #48]	; 0x30
 80020d2:	4b46      	ldr	r3, [pc, #280]	; (80021ec <HAL_I2C_MspInit+0x14c>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	61bb      	str	r3, [r7, #24]
 80020dc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80020de:	f44f 7310 	mov.w	r3, #576	; 0x240
 80020e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020e4:	2312      	movs	r3, #18
 80020e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ec:	2303      	movs	r3, #3
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020f0:	2304      	movs	r3, #4
 80020f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f4:	f107 031c 	add.w	r3, r7, #28
 80020f8:	4619      	mov	r1, r3
 80020fa:	483d      	ldr	r0, [pc, #244]	; (80021f0 <HAL_I2C_MspInit+0x150>)
 80020fc:	f002 ffd6 	bl	80050ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	4b39      	ldr	r3, [pc, #228]	; (80021ec <HAL_I2C_MspInit+0x14c>)
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	4a38      	ldr	r2, [pc, #224]	; (80021ec <HAL_I2C_MspInit+0x14c>)
 800210a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800210e:	6413      	str	r3, [r2, #64]	; 0x40
 8002110:	4b36      	ldr	r3, [pc, #216]	; (80021ec <HAL_I2C_MspInit+0x14c>)
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800211c:	2200      	movs	r2, #0
 800211e:	2105      	movs	r1, #5
 8002120:	201f      	movs	r0, #31
 8002122:	f001 fff5 	bl	8004110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002126:	201f      	movs	r0, #31
 8002128:	f002 f81e 	bl	8004168 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800212c:	2200      	movs	r2, #0
 800212e:	2105      	movs	r1, #5
 8002130:	2020      	movs	r0, #32
 8002132:	f001 ffed 	bl	8004110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002136:	2020      	movs	r0, #32
 8002138:	f002 f816 	bl	8004168 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800213c:	e050      	b.n	80021e0 <HAL_I2C_MspInit+0x140>
  else if(i2cHandle->Instance==I2C3)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a2c      	ldr	r2, [pc, #176]	; (80021f4 <HAL_I2C_MspInit+0x154>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d14b      	bne.n	80021e0 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002148:	2300      	movs	r3, #0
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	4b27      	ldr	r3, [pc, #156]	; (80021ec <HAL_I2C_MspInit+0x14c>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	4a26      	ldr	r2, [pc, #152]	; (80021ec <HAL_I2C_MspInit+0x14c>)
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	6313      	str	r3, [r2, #48]	; 0x30
 8002158:	4b24      	ldr	r3, [pc, #144]	; (80021ec <HAL_I2C_MspInit+0x14c>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	4b20      	ldr	r3, [pc, #128]	; (80021ec <HAL_I2C_MspInit+0x14c>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	4a1f      	ldr	r2, [pc, #124]	; (80021ec <HAL_I2C_MspInit+0x14c>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6313      	str	r3, [r2, #48]	; 0x30
 8002174:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <HAL_I2C_MspInit+0x14c>)
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002180:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002186:	2312      	movs	r3, #18
 8002188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218e:	2303      	movs	r3, #3
 8002190:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002192:	2304      	movs	r3, #4
 8002194:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002196:	f107 031c 	add.w	r3, r7, #28
 800219a:	4619      	mov	r1, r3
 800219c:	4816      	ldr	r0, [pc, #88]	; (80021f8 <HAL_I2C_MspInit+0x158>)
 800219e:	f002 ff85 	bl	80050ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a8:	2312      	movs	r3, #18
 80021aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b0:	2303      	movs	r3, #3
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021b4:	2304      	movs	r3, #4
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	4619      	mov	r1, r3
 80021be:	480f      	ldr	r0, [pc, #60]	; (80021fc <HAL_I2C_MspInit+0x15c>)
 80021c0:	f002 ff74 	bl	80050ac <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80021c4:	2300      	movs	r3, #0
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_I2C_MspInit+0x14c>)
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	4a07      	ldr	r2, [pc, #28]	; (80021ec <HAL_I2C_MspInit+0x14c>)
 80021ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021d2:	6413      	str	r3, [r2, #64]	; 0x40
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_I2C_MspInit+0x14c>)
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	68bb      	ldr	r3, [r7, #8]
}
 80021e0:	bf00      	nop
 80021e2:	3730      	adds	r7, #48	; 0x30
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40005400 	.word	0x40005400
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40020400 	.word	0x40020400
 80021f4:	40005c00 	.word	0x40005c00
 80021f8:	40020800 	.word	0x40020800
 80021fc:	40020000 	.word	0x40020000

08002200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002204:	f000 ff60 	bl	80030c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002208:	f000 f82c 	bl	8002264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800220c:	f7ff fea8 	bl	8001f60 <MX_GPIO_Init>
  MX_DMA_Init();
 8002210:	f7ff fe44 	bl	8001e9c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002214:	f000 fdfa 	bl	8002e0c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002218:	f000 fbb4 	bl	8002984 <MX_TIM2_Init>
  MX_TIM3_Init();
 800221c:	f000 fc00 	bl	8002a20 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002220:	f000 fc9a 	bl	8002b58 <MX_TIM5_Init>
  MX_TIM4_Init();
 8002224:	f000 fc4a 	bl	8002abc <MX_TIM4_Init>
  MX_ADC1_Init();
 8002228:	f7ff fcbc 	bl	8001ba4 <MX_ADC1_Init>
  MX_CRC_Init();
 800222c:	f7ff fe00 	bl	8001e30 <MX_CRC_Init>
  MX_RTC_Init();
 8002230:	f000 f8c8 	bl	80023c4 <MX_RTC_Init>
  MX_I2C1_Init();
 8002234:	f7ff fed8 	bl	8001fe8 <MX_I2C1_Init>
  MX_TIM9_Init();
 8002238:	f000 fcde 	bl	8002bf8 <MX_TIM9_Init>
  MX_I2C3_Init();
 800223c:	f7ff ff02 	bl	8002044 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002240:	f000 f9a6 	bl	8002590 <MX_SPI1_Init>
  MX_MBEDTLS_Init();
 8002244:	f009 fe40 	bl	800bec8 <MX_MBEDTLS_Init>
  MX_TIM11_Init();
 8002248:	f000 fd10 	bl	8002c6c <MX_TIM11_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 800224c:	f009 fe3c 	bl	800bec8 <MX_MBEDTLS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002250:	f000 f872 	bl	8002338 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002254:	f009 fe84 	bl	800bf60 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002258:	f7ff fe40 	bl	8001edc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800225c:	f009 fea4 	bl	800bfa8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002260:	e7fe      	b.n	8002260 <main+0x60>
	...

08002264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b094      	sub	sp, #80	; 0x50
 8002268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800226a:	f107 0320 	add.w	r3, r7, #32
 800226e:	2230      	movs	r2, #48	; 0x30
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f00c fc24 	bl	800eac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002288:	2300      	movs	r3, #0
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	4b28      	ldr	r3, [pc, #160]	; (8002330 <SystemClock_Config+0xcc>)
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	4a27      	ldr	r2, [pc, #156]	; (8002330 <SystemClock_Config+0xcc>)
 8002292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002296:	6413      	str	r3, [r2, #64]	; 0x40
 8002298:	4b25      	ldr	r3, [pc, #148]	; (8002330 <SystemClock_Config+0xcc>)
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022a4:	2300      	movs	r3, #0
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	4b22      	ldr	r3, [pc, #136]	; (8002334 <SystemClock_Config+0xd0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a21      	ldr	r2, [pc, #132]	; (8002334 <SystemClock_Config+0xd0>)
 80022ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <SystemClock_Config+0xd0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80022c0:	2309      	movs	r3, #9
 80022c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80022ca:	2301      	movs	r3, #1
 80022cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ce:	2302      	movs	r3, #2
 80022d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80022d8:	2304      	movs	r3, #4
 80022da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80022dc:	2364      	movs	r3, #100	; 0x64
 80022de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022e0:	2302      	movs	r3, #2
 80022e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022e4:	2304      	movs	r3, #4
 80022e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022e8:	f107 0320 	add.w	r3, r7, #32
 80022ec:	4618      	mov	r0, r3
 80022ee:	f005 f8c3 	bl	8007478 <HAL_RCC_OscConfig>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80022f8:	f000 f854 	bl	80023a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022fc:	230f      	movs	r3, #15
 80022fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002300:	2302      	movs	r3, #2
 8002302:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800230c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002312:	f107 030c 	add.w	r3, r7, #12
 8002316:	2103      	movs	r1, #3
 8002318:	4618      	mov	r0, r3
 800231a:	f005 fbd5 	bl	8007ac8 <HAL_RCC_ClockConfig>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002324:	f000 f83e 	bl	80023a4 <Error_Handler>
  }
}
 8002328:	bf00      	nop
 800232a:	3750      	adds	r7, #80	; 0x50
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40023800 	.word	0x40023800
 8002334:	40007000 	.word	0x40007000

08002338 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 800233c:	2200      	movs	r2, #0
 800233e:	2105      	movs	r1, #5
 8002340:	2004      	movs	r0, #4
 8002342:	f001 fee5 	bl	8004110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8002346:	2004      	movs	r0, #4
 8002348:	f001 ff0e 	bl	8004168 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800234c:	2200      	movs	r2, #0
 800234e:	2105      	movs	r1, #5
 8002350:	201c      	movs	r0, #28
 8002352:	f001 fedd 	bl	8004110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002356:	201c      	movs	r0, #28
 8002358:	f001 ff06 	bl	8004168 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800235c:	2200      	movs	r2, #0
 800235e:	2105      	movs	r1, #5
 8002360:	201d      	movs	r0, #29
 8002362:	f001 fed5 	bl	8004110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002366:	201d      	movs	r0, #29
 8002368:	f001 fefe 	bl	8004168 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 800236c:	2200      	movs	r2, #0
 800236e:	2105      	movs	r1, #5
 8002370:	2051      	movs	r0, #81	; 0x51
 8002372:	f001 fecd 	bl	8004110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002376:	2051      	movs	r0, #81	; 0x51
 8002378:	f001 fef6 	bl	8004168 <HAL_NVIC_EnableIRQ>
}
 800237c:	bf00      	nop
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d101      	bne.n	8002396 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002392:	f000 febb 	bl	800310c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40010000 	.word	0x40010000

080023a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a8:	b672      	cpsid	i
}
 80023aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023ac:	e7fe      	b.n	80023ac <Error_Handler+0x8>

080023ae <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b090      	sub	sp, #64	; 0x40
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80023ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80023da:	2300      	movs	r3, #0
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80023de:	463b      	mov	r3, r7
 80023e0:	2228      	movs	r2, #40	; 0x28
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f00c fb6b 	bl	800eac0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80023ea:	4b46      	ldr	r3, [pc, #280]	; (8002504 <MX_RTC_Init+0x140>)
 80023ec:	4a46      	ldr	r2, [pc, #280]	; (8002508 <MX_RTC_Init+0x144>)
 80023ee:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80023f0:	4b44      	ldr	r3, [pc, #272]	; (8002504 <MX_RTC_Init+0x140>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80023f6:	4b43      	ldr	r3, [pc, #268]	; (8002504 <MX_RTC_Init+0x140>)
 80023f8:	227f      	movs	r2, #127	; 0x7f
 80023fa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80023fc:	4b41      	ldr	r3, [pc, #260]	; (8002504 <MX_RTC_Init+0x140>)
 80023fe:	22ff      	movs	r2, #255	; 0xff
 8002400:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002402:	4b40      	ldr	r3, [pc, #256]	; (8002504 <MX_RTC_Init+0x140>)
 8002404:	2200      	movs	r2, #0
 8002406:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002408:	4b3e      	ldr	r3, [pc, #248]	; (8002504 <MX_RTC_Init+0x140>)
 800240a:	2200      	movs	r2, #0
 800240c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800240e:	4b3d      	ldr	r3, [pc, #244]	; (8002504 <MX_RTC_Init+0x140>)
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002414:	483b      	ldr	r0, [pc, #236]	; (8002504 <MX_RTC_Init+0x140>)
 8002416:	f006 f867 	bl	80084e8 <HAL_RTC_Init>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002420:	f7ff ffc0 	bl	80023a4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002424:	2300      	movs	r3, #0
 8002426:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800242a:	2300      	movs	r3, #0
 800242c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8002430:	2300      	movs	r3, #0
 8002432:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002436:	2300      	movs	r3, #0
 8002438:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800243a:	2300      	movs	r3, #0
 800243c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800243e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002442:	2201      	movs	r2, #1
 8002444:	4619      	mov	r1, r3
 8002446:	482f      	ldr	r0, [pc, #188]	; (8002504 <MX_RTC_Init+0x140>)
 8002448:	f006 f952 	bl	80086f0 <HAL_RTC_SetTime>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002452:	f7ff ffa7 	bl	80023a4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002456:	2301      	movs	r3, #1
 8002458:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800245c:	2301      	movs	r3, #1
 800245e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8002462:	2301      	movs	r3, #1
 8002464:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8002468:	2300      	movs	r3, #0
 800246a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800246e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002472:	2201      	movs	r2, #1
 8002474:	4619      	mov	r1, r3
 8002476:	4823      	ldr	r0, [pc, #140]	; (8002504 <MX_RTC_Init+0x140>)
 8002478:	f006 fa82 	bl	8008980 <HAL_RTC_SetDate>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002482:	f7ff ff8f 	bl	80023a4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002486:	2300      	movs	r3, #0
 8002488:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800248a:	2300      	movs	r3, #0
 800248c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800248e:	2300      	movs	r3, #0
 8002490:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002492:	2300      	movs	r3, #0
 8002494:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80024aa:	2301      	movs	r3, #1
 80024ac:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80024b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80024b6:	463b      	mov	r3, r7
 80024b8:	2201      	movs	r2, #1
 80024ba:	4619      	mov	r1, r3
 80024bc:	4811      	ldr	r0, [pc, #68]	; (8002504 <MX_RTC_Init+0x140>)
 80024be:	f006 fb6b 	bl	8008b98 <HAL_RTC_SetAlarm>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80024c8:	f7ff ff6c 	bl	80023a4 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80024cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80024d2:	463b      	mov	r3, r7
 80024d4:	2201      	movs	r2, #1
 80024d6:	4619      	mov	r1, r3
 80024d8:	480a      	ldr	r0, [pc, #40]	; (8002504 <MX_RTC_Init+0x140>)
 80024da:	f006 fb5d 	bl	8008b98 <HAL_RTC_SetAlarm>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 80024e4:	f7ff ff5e 	bl	80023a4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80024e8:	2200      	movs	r2, #0
 80024ea:	2100      	movs	r1, #0
 80024ec:	4805      	ldr	r0, [pc, #20]	; (8002504 <MX_RTC_Init+0x140>)
 80024ee:	f006 ff0d 	bl	800930c <HAL_RTCEx_SetWakeUpTimer>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_RTC_Init+0x138>
  {
    Error_Handler();
 80024f8:	f7ff ff54 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80024fc:	bf00      	nop
 80024fe:	3740      	adds	r7, #64	; 0x40
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	200002d8 	.word	0x200002d8
 8002508:	40002800 	.word	0x40002800

0800250c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002514:	f107 0308 	add.w	r3, r7, #8
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
 8002524:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a0c      	ldr	r2, [pc, #48]	; (800255c <HAL_RTC_MspInit+0x50>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d111      	bne.n	8002554 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002530:	2302      	movs	r3, #2
 8002532:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002538:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800253a:	f107 0308 	add.w	r3, r7, #8
 800253e:	4618      	mov	r0, r3
 8002540:	f005 fdbc 	bl	80080bc <HAL_RCCEx_PeriphCLKConfig>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800254a:	f7ff ff2b 	bl	80023a4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800254e:	4b04      	ldr	r3, [pc, #16]	; (8002560 <HAL_RTC_MspInit+0x54>)
 8002550:	2201      	movs	r2, #1
 8002552:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002554:	bf00      	nop
 8002556:	3720      	adds	r7, #32
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40002800 	.word	0x40002800
 8002560:	42470e3c 	.word	0x42470e3c

08002564 <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a05      	ldr	r2, [pc, #20]	; (8002588 <HAL_RTC_MspDeInit+0x24>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d102      	bne.n	800257c <HAL_RTC_MspDeInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_RTC_MspDeInit+0x28>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	40002800 	.word	0x40002800
 800258c:	42470e3c 	.word	0x42470e3c

08002590 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002594:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <MX_SPI1_Init+0x64>)
 8002596:	4a18      	ldr	r2, [pc, #96]	; (80025f8 <MX_SPI1_Init+0x68>)
 8002598:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800259a:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <MX_SPI1_Init+0x64>)
 800259c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025a2:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <MX_SPI1_Init+0x64>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025a8:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <MX_SPI1_Init+0x64>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ae:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <MX_SPI1_Init+0x64>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <MX_SPI1_Init+0x64>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <MX_SPI1_Init+0x64>)
 80025bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025c2:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <MX_SPI1_Init+0x64>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025c8:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <MX_SPI1_Init+0x64>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <MX_SPI1_Init+0x64>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025d4:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <MX_SPI1_Init+0x64>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <MX_SPI1_Init+0x64>)
 80025dc:	220a      	movs	r2, #10
 80025de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025e0:	4804      	ldr	r0, [pc, #16]	; (80025f4 <MX_SPI1_Init+0x64>)
 80025e2:	f006 ff67 	bl	80094b4 <HAL_SPI_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80025ec:	f7ff feda 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000314 	.word	0x20000314
 80025f8:	40013000 	.word	0x40013000

080025fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	; 0x28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1d      	ldr	r2, [pc, #116]	; (8002690 <HAL_SPI_MspInit+0x94>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d133      	bne.n	8002686 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <HAL_SPI_MspInit+0x98>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	4a1b      	ldr	r2, [pc, #108]	; (8002694 <HAL_SPI_MspInit+0x98>)
 8002628:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800262c:	6453      	str	r3, [r2, #68]	; 0x44
 800262e:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_SPI_MspInit+0x98>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <HAL_SPI_MspInit+0x98>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	4a14      	ldr	r2, [pc, #80]	; (8002694 <HAL_SPI_MspInit+0x98>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6313      	str	r3, [r2, #48]	; 0x30
 800264a:	4b12      	ldr	r3, [pc, #72]	; (8002694 <HAL_SPI_MspInit+0x98>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002656:	23e0      	movs	r3, #224	; 0xe0
 8002658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
 800265c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002662:	2303      	movs	r3, #3
 8002664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002666:	2305      	movs	r3, #5
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	4619      	mov	r1, r3
 8002670:	4809      	ldr	r0, [pc, #36]	; (8002698 <HAL_SPI_MspInit+0x9c>)
 8002672:	f002 fd1b 	bl	80050ac <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	2105      	movs	r1, #5
 800267a:	2023      	movs	r0, #35	; 0x23
 800267c:	f001 fd48 	bl	8004110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002680:	2023      	movs	r0, #35	; 0x23
 8002682:	f001 fd71 	bl	8004168 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002686:	bf00      	nop
 8002688:	3728      	adds	r7, #40	; 0x28
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40013000 	.word	0x40013000
 8002694:	40023800 	.word	0x40023800
 8002698:	40020000 	.word	0x40020000

0800269c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <HAL_MspInit+0x74>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	4a19      	ldr	r2, [pc, #100]	; (8002710 <HAL_MspInit+0x74>)
 80026ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b0:	6453      	str	r3, [r2, #68]	; 0x44
 80026b2:	4b17      	ldr	r3, [pc, #92]	; (8002710 <HAL_MspInit+0x74>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	4b13      	ldr	r3, [pc, #76]	; (8002710 <HAL_MspInit+0x74>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	4a12      	ldr	r2, [pc, #72]	; (8002710 <HAL_MspInit+0x74>)
 80026c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026cc:	6413      	str	r3, [r2, #64]	; 0x40
 80026ce:	4b10      	ldr	r3, [pc, #64]	; (8002710 <HAL_MspInit+0x74>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	210f      	movs	r1, #15
 80026de:	f06f 0001 	mvn.w	r0, #1
 80026e2:	f001 fd15 	bl	8004110 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 80026e6:	2200      	movs	r2, #0
 80026e8:	2105      	movs	r1, #5
 80026ea:	2001      	movs	r0, #1
 80026ec:	f001 fd10 	bl	8004110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80026f0:	2001      	movs	r0, #1
 80026f2:	f001 fd39 	bl	8004168 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2105      	movs	r1, #5
 80026fa:	2005      	movs	r0, #5
 80026fc:	f001 fd08 	bl	8004110 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002700:	2005      	movs	r0, #5
 8002702:	f001 fd31 	bl	8004168 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800

08002714 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08c      	sub	sp, #48	; 0x30
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002724:	2300      	movs	r3, #0
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	4b2e      	ldr	r3, [pc, #184]	; (80027e4 <HAL_InitTick+0xd0>)
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	4a2d      	ldr	r2, [pc, #180]	; (80027e4 <HAL_InitTick+0xd0>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6453      	str	r3, [r2, #68]	; 0x44
 8002734:	4b2b      	ldr	r3, [pc, #172]	; (80027e4 <HAL_InitTick+0xd0>)
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002740:	f107 020c 	add.w	r2, r7, #12
 8002744:	f107 0310 	add.w	r3, r7, #16
 8002748:	4611      	mov	r1, r2
 800274a:	4618      	mov	r0, r3
 800274c:	f005 fc84 	bl	8008058 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002750:	f005 fc6e 	bl	8008030 <HAL_RCC_GetPCLK2Freq>
 8002754:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002758:	4a23      	ldr	r2, [pc, #140]	; (80027e8 <HAL_InitTick+0xd4>)
 800275a:	fba2 2303 	umull	r2, r3, r2, r3
 800275e:	0c9b      	lsrs	r3, r3, #18
 8002760:	3b01      	subs	r3, #1
 8002762:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002764:	4b21      	ldr	r3, [pc, #132]	; (80027ec <HAL_InitTick+0xd8>)
 8002766:	4a22      	ldr	r2, [pc, #136]	; (80027f0 <HAL_InitTick+0xdc>)
 8002768:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800276a:	4b20      	ldr	r3, [pc, #128]	; (80027ec <HAL_InitTick+0xd8>)
 800276c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002770:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002772:	4a1e      	ldr	r2, [pc, #120]	; (80027ec <HAL_InitTick+0xd8>)
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002778:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <HAL_InitTick+0xd8>)
 800277a:	2200      	movs	r2, #0
 800277c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800277e:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_InitTick+0xd8>)
 8002780:	2200      	movs	r2, #0
 8002782:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_InitTick+0xd8>)
 8002786:	2200      	movs	r2, #0
 8002788:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800278a:	4818      	ldr	r0, [pc, #96]	; (80027ec <HAL_InitTick+0xd8>)
 800278c:	f007 f9c6 	bl	8009b1c <HAL_TIM_Base_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002796:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800279a:	2b00      	cmp	r3, #0
 800279c:	d11b      	bne.n	80027d6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800279e:	4813      	ldr	r0, [pc, #76]	; (80027ec <HAL_InitTick+0xd8>)
 80027a0:	f007 fb7a 	bl	8009e98 <HAL_TIM_Base_Start_IT>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80027aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d111      	bne.n	80027d6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80027b2:	2019      	movs	r0, #25
 80027b4:	f001 fcd8 	bl	8004168 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b0f      	cmp	r3, #15
 80027bc:	d808      	bhi.n	80027d0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80027be:	2200      	movs	r2, #0
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	2019      	movs	r0, #25
 80027c4:	f001 fca4 	bl	8004110 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027c8:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <HAL_InitTick+0xe0>)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	e002      	b.n	80027d6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80027d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3730      	adds	r7, #48	; 0x30
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40023800 	.word	0x40023800
 80027e8:	431bde83 	.word	0x431bde83
 80027ec:	20000394 	.word	0x20000394
 80027f0:	40010000 	.word	0x40010000
 80027f4:	20000008 	.word	0x20000008

080027f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027fc:	e7fe      	b.n	80027fc <NMI_Handler+0x4>

080027fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002802:	e7fe      	b.n	8002802 <HardFault_Handler+0x4>

08002804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002808:	e7fe      	b.n	8002808 <MemManage_Handler+0x4>

0800280a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800280e:	e7fe      	b.n	800280e <BusFault_Handler+0x4>

08002810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002814:	e7fe      	b.n	8002814 <UsageFault_Handler+0x4>

08002816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002828:	f004 fe0c 	bl	8007444 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}

08002830 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002834:	f002 fa64 	bl	8004d00 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}

0800283c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <ADC_IRQHandler+0x10>)
 8002852:	f000 fdfd 	bl	8003450 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200000f8 	.word	0x200000f8

08002860 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002864:	4802      	ldr	r0, [pc, #8]	; (8002870 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002866:	f007 fba9 	bl	8009fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000718 	.word	0x20000718

08002874 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002878:	4802      	ldr	r0, [pc, #8]	; (8002884 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800287a:	f007 fb9f 	bl	8009fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000394 	.word	0x20000394

08002888 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800288c:	4802      	ldr	r0, [pc, #8]	; (8002898 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800288e:	f007 fb95 	bl	8009fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	200007cc 	.word	0x200007cc

0800289c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028a0:	4802      	ldr	r0, [pc, #8]	; (80028ac <TIM2_IRQHandler+0x10>)
 80028a2:	f007 fb8b 	bl	8009fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000448 	.word	0x20000448

080028b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028b4:	4802      	ldr	r0, [pc, #8]	; (80028c0 <TIM3_IRQHandler+0x10>)
 80028b6:	f007 fb81 	bl	8009fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200004fc 	.word	0x200004fc

080028c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <TIM4_IRQHandler+0x10>)
 80028ca:	f007 fb77 	bl	8009fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	200005b0 	.word	0x200005b0

080028d8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <I2C1_EV_IRQHandler+0x10>)
 80028de:	f003 f8bb 	bl	8005a58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200001d0 	.word	0x200001d0

080028ec <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80028f0:	4802      	ldr	r0, [pc, #8]	; (80028fc <I2C1_ER_IRQHandler+0x10>)
 80028f2:	f003 fa22 	bl	8005d3a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	200001d0 	.word	0x200001d0

08002900 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002904:	4802      	ldr	r0, [pc, #8]	; (8002910 <SPI1_IRQHandler+0x10>)
 8002906:	f006 ffa3 	bl	8009850 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000314 	.word	0x20000314

08002914 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <USART1_IRQHandler+0x10>)
 800291a:	f008 fb23 	bl	800af64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000880 	.word	0x20000880

08002928 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800292c:	4802      	ldr	r0, [pc, #8]	; (8002938 <TIM5_IRQHandler+0x10>)
 800292e:	f007 fb45 	bl	8009fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000664 	.word	0x20000664

0800293c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002940:	4802      	ldr	r0, [pc, #8]	; (800294c <DMA2_Stream0_IRQHandler+0x10>)
 8002942:	f001 ff65 	bl	8004810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	2000015c 	.word	0x2000015c

08002950 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <SystemInit+0x20>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296a:	4a05      	ldr	r2, [pc, #20]	; (8002980 <SystemInit+0x20>)
 800296c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800298a:	f107 0308 	add.w	r3, r7, #8
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	609a      	str	r2, [r3, #8]
 8002996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002998:	463b      	mov	r3, r7
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029a0:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <MX_TIM2_Init+0x98>)
 80029a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 80029a8:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <MX_TIM2_Init+0x98>)
 80029aa:	f242 720f 	movw	r2, #9999	; 0x270f
 80029ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b0:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <MX_TIM2_Init+0x98>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80029b6:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <MX_TIM2_Init+0x98>)
 80029b8:	f242 720f 	movw	r2, #9999	; 0x270f
 80029bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029be:	4b17      	ldr	r3, [pc, #92]	; (8002a1c <MX_TIM2_Init+0x98>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029c4:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <MX_TIM2_Init+0x98>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029ca:	4814      	ldr	r0, [pc, #80]	; (8002a1c <MX_TIM2_Init+0x98>)
 80029cc:	f007 f8a6 	bl	8009b1c <HAL_TIM_Base_Init>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80029d6:	f7ff fce5 	bl	80023a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029e0:	f107 0308 	add.w	r3, r7, #8
 80029e4:	4619      	mov	r1, r3
 80029e6:	480d      	ldr	r0, [pc, #52]	; (8002a1c <MX_TIM2_Init+0x98>)
 80029e8:	f007 fc10 	bl	800a20c <HAL_TIM_ConfigClockSource>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80029f2:	f7ff fcd7 	bl	80023a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029f6:	2300      	movs	r3, #0
 80029f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029fe:	463b      	mov	r3, r7
 8002a00:	4619      	mov	r1, r3
 8002a02:	4806      	ldr	r0, [pc, #24]	; (8002a1c <MX_TIM2_Init+0x98>)
 8002a04:	f008 f8de 	bl	800abc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002a0e:	f7ff fcc9 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a12:	bf00      	nop
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000448 	.word	0x20000448

08002a20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a26:	f107 0308 	add.w	r3, r7, #8
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	609a      	str	r2, [r3, #8]
 8002a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a34:	463b      	mov	r3, r7
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a3c:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <MX_TIM3_Init+0x94>)
 8002a3e:	4a1e      	ldr	r2, [pc, #120]	; (8002ab8 <MX_TIM3_Init+0x98>)
 8002a40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8002a42:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <MX_TIM3_Init+0x94>)
 8002a44:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <MX_TIM3_Init+0x94>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8002a50:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <MX_TIM3_Init+0x94>)
 8002a52:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002a56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a58:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <MX_TIM3_Init+0x94>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a5e:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <MX_TIM3_Init+0x94>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a64:	4813      	ldr	r0, [pc, #76]	; (8002ab4 <MX_TIM3_Init+0x94>)
 8002a66:	f007 f859 	bl	8009b1c <HAL_TIM_Base_Init>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002a70:	f7ff fc98 	bl	80023a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a7a:	f107 0308 	add.w	r3, r7, #8
 8002a7e:	4619      	mov	r1, r3
 8002a80:	480c      	ldr	r0, [pc, #48]	; (8002ab4 <MX_TIM3_Init+0x94>)
 8002a82:	f007 fbc3 	bl	800a20c <HAL_TIM_ConfigClockSource>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002a8c:	f7ff fc8a 	bl	80023a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a90:	2300      	movs	r3, #0
 8002a92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a94:	2300      	movs	r3, #0
 8002a96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a98:	463b      	mov	r3, r7
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4805      	ldr	r0, [pc, #20]	; (8002ab4 <MX_TIM3_Init+0x94>)
 8002a9e:	f008 f891 	bl	800abc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002aa8:	f7ff fc7c 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002aac:	bf00      	nop
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	200004fc 	.word	0x200004fc
 8002ab8:	40000400 	.word	0x40000400

08002abc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ac2:	f107 0308 	add.w	r3, r7, #8
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	605a      	str	r2, [r3, #4]
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ad0:	463b      	mov	r3, r7
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <MX_TIM4_Init+0x94>)
 8002ada:	4a1e      	ldr	r2, [pc, #120]	; (8002b54 <MX_TIM4_Init+0x98>)
 8002adc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8002ade:	4b1c      	ldr	r3, [pc, #112]	; (8002b50 <MX_TIM4_Init+0x94>)
 8002ae0:	f242 720f 	movw	r2, #9999	; 0x270f
 8002ae4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <MX_TIM4_Init+0x94>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8002aec:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <MX_TIM4_Init+0x94>)
 8002aee:	f242 720f 	movw	r2, #9999	; 0x270f
 8002af2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af4:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <MX_TIM4_Init+0x94>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <MX_TIM4_Init+0x94>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b00:	4813      	ldr	r0, [pc, #76]	; (8002b50 <MX_TIM4_Init+0x94>)
 8002b02:	f007 f80b 	bl	8009b1c <HAL_TIM_Base_Init>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002b0c:	f7ff fc4a 	bl	80023a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b16:	f107 0308 	add.w	r3, r7, #8
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	480c      	ldr	r0, [pc, #48]	; (8002b50 <MX_TIM4_Init+0x94>)
 8002b1e:	f007 fb75 	bl	800a20c <HAL_TIM_ConfigClockSource>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002b28:	f7ff fc3c 	bl	80023a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b34:	463b      	mov	r3, r7
 8002b36:	4619      	mov	r1, r3
 8002b38:	4805      	ldr	r0, [pc, #20]	; (8002b50 <MX_TIM4_Init+0x94>)
 8002b3a:	f008 f843 	bl	800abc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002b44:	f7ff fc2e 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b48:	bf00      	nop
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	200005b0 	.word	0x200005b0
 8002b54:	40000800 	.word	0x40000800

08002b58 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b5e:	f107 0308 	add.w	r3, r7, #8
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	605a      	str	r2, [r3, #4]
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b6c:	463b      	mov	r3, r7
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b74:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <MX_TIM5_Init+0x94>)
 8002b76:	4a1e      	ldr	r2, [pc, #120]	; (8002bf0 <MX_TIM5_Init+0x98>)
 8002b78:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10000-1;
 8002b7a:	4b1c      	ldr	r3, [pc, #112]	; (8002bec <MX_TIM5_Init+0x94>)
 8002b7c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b80:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b82:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <MX_TIM5_Init+0x94>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 110000-1;
 8002b88:	4b18      	ldr	r3, [pc, #96]	; (8002bec <MX_TIM5_Init+0x94>)
 8002b8a:	4a1a      	ldr	r2, [pc, #104]	; (8002bf4 <MX_TIM5_Init+0x9c>)
 8002b8c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b8e:	4b17      	ldr	r3, [pc, #92]	; (8002bec <MX_TIM5_Init+0x94>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b94:	4b15      	ldr	r3, [pc, #84]	; (8002bec <MX_TIM5_Init+0x94>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002b9a:	4814      	ldr	r0, [pc, #80]	; (8002bec <MX_TIM5_Init+0x94>)
 8002b9c:	f006 ffbe 	bl	8009b1c <HAL_TIM_Base_Init>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002ba6:	f7ff fbfd 	bl	80023a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002bb0:	f107 0308 	add.w	r3, r7, #8
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	480d      	ldr	r0, [pc, #52]	; (8002bec <MX_TIM5_Init+0x94>)
 8002bb8:	f007 fb28 	bl	800a20c <HAL_TIM_ConfigClockSource>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002bc2:	f7ff fbef 	bl	80023a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002bce:	463b      	mov	r3, r7
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4806      	ldr	r0, [pc, #24]	; (8002bec <MX_TIM5_Init+0x94>)
 8002bd4:	f007 fff6 	bl	800abc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002bde:	f7ff fbe1 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002be2:	bf00      	nop
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000664 	.word	0x20000664
 8002bf0:	40000c00 	.word	0x40000c00
 8002bf4:	0001adaf 	.word	0x0001adaf

08002bf8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bfe:	463b      	mov	r3, r7
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002c0a:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <MX_TIM9_Init+0x6c>)
 8002c0c:	4a16      	ldr	r2, [pc, #88]	; (8002c68 <MX_TIM9_Init+0x70>)
 8002c0e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10000-1;
 8002c10:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <MX_TIM9_Init+0x6c>)
 8002c12:	f242 720f 	movw	r2, #9999	; 0x270f
 8002c16:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <MX_TIM9_Init+0x6c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000-1;
 8002c1e:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <MX_TIM9_Init+0x6c>)
 8002c20:	f242 720f 	movw	r2, #9999	; 0x270f
 8002c24:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c26:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <MX_TIM9_Init+0x6c>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c2c:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <MX_TIM9_Init+0x6c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002c32:	480c      	ldr	r0, [pc, #48]	; (8002c64 <MX_TIM9_Init+0x6c>)
 8002c34:	f006 ff72 	bl	8009b1c <HAL_TIM_Base_Init>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8002c3e:	f7ff fbb1 	bl	80023a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c46:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002c48:	463b      	mov	r3, r7
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4805      	ldr	r0, [pc, #20]	; (8002c64 <MX_TIM9_Init+0x6c>)
 8002c4e:	f007 fadd 	bl	800a20c <HAL_TIM_ConfigClockSource>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8002c58:	f7ff fba4 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002c5c:	bf00      	nop
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	20000718 	.word	0x20000718
 8002c68:	40014000 	.word	0x40014000

08002c6c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002c70:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <MX_TIM11_Init+0x40>)
 8002c72:	4a0f      	ldr	r2, [pc, #60]	; (8002cb0 <MX_TIM11_Init+0x44>)
 8002c74:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10000-1;
 8002c76:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <MX_TIM11_Init+0x40>)
 8002c78:	f242 720f 	movw	r2, #9999	; 0x270f
 8002c7c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <MX_TIM11_Init+0x40>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 8002c84:	4b09      	ldr	r3, [pc, #36]	; (8002cac <MX_TIM11_Init+0x40>)
 8002c86:	f242 720f 	movw	r2, #9999	; 0x270f
 8002c8a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c8c:	4b07      	ldr	r3, [pc, #28]	; (8002cac <MX_TIM11_Init+0x40>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <MX_TIM11_Init+0x40>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002c98:	4804      	ldr	r0, [pc, #16]	; (8002cac <MX_TIM11_Init+0x40>)
 8002c9a:	f006 ff3f 	bl	8009b1c <HAL_TIM_Base_Init>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002ca4:	f7ff fb7e 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002ca8:	bf00      	nop
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	200007cc 	.word	0x200007cc
 8002cb0:	40014800 	.word	0x40014800

08002cb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc4:	d10e      	bne.n	8002ce4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
 8002cca:	4b4a      	ldr	r3, [pc, #296]	; (8002df4 <HAL_TIM_Base_MspInit+0x140>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a49      	ldr	r2, [pc, #292]	; (8002df4 <HAL_TIM_Base_MspInit+0x140>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b47      	ldr	r3, [pc, #284]	; (8002df4 <HAL_TIM_Base_MspInit+0x140>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002ce2:	e082      	b.n	8002dea <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM3)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a43      	ldr	r2, [pc, #268]	; (8002df8 <HAL_TIM_Base_MspInit+0x144>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d10e      	bne.n	8002d0c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
 8002cf2:	4b40      	ldr	r3, [pc, #256]	; (8002df4 <HAL_TIM_Base_MspInit+0x140>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	4a3f      	ldr	r2, [pc, #252]	; (8002df4 <HAL_TIM_Base_MspInit+0x140>)
 8002cf8:	f043 0302 	orr.w	r3, r3, #2
 8002cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfe:	4b3d      	ldr	r3, [pc, #244]	; (8002df4 <HAL_TIM_Base_MspInit+0x140>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	61bb      	str	r3, [r7, #24]
 8002d08:	69bb      	ldr	r3, [r7, #24]
}
 8002d0a:	e06e      	b.n	8002dea <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM4)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a3a      	ldr	r2, [pc, #232]	; (8002dfc <HAL_TIM_Base_MspInit+0x148>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d116      	bne.n	8002d44 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	4b36      	ldr	r3, [pc, #216]	; (8002df4 <HAL_TIM_Base_MspInit+0x140>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4a35      	ldr	r2, [pc, #212]	; (8002df4 <HAL_TIM_Base_MspInit+0x140>)
 8002d20:	f043 0304 	orr.w	r3, r3, #4
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
 8002d26:	4b33      	ldr	r3, [pc, #204]	; (8002df4 <HAL_TIM_Base_MspInit+0x140>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002d32:	2200      	movs	r2, #0
 8002d34:	2105      	movs	r1, #5
 8002d36:	201e      	movs	r0, #30
 8002d38:	f001 f9ea 	bl	8004110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d3c:	201e      	movs	r0, #30
 8002d3e:	f001 fa13 	bl	8004168 <HAL_NVIC_EnableIRQ>
}
 8002d42:	e052      	b.n	8002dea <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM5)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a2d      	ldr	r2, [pc, #180]	; (8002e00 <HAL_TIM_Base_MspInit+0x14c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d116      	bne.n	8002d7c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	4b28      	ldr	r3, [pc, #160]	; (8002df4 <HAL_TIM_Base_MspInit+0x140>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	4a27      	ldr	r2, [pc, #156]	; (8002df4 <HAL_TIM_Base_MspInit+0x140>)
 8002d58:	f043 0308 	orr.w	r3, r3, #8
 8002d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d5e:	4b25      	ldr	r3, [pc, #148]	; (8002df4 <HAL_TIM_Base_MspInit+0x140>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2105      	movs	r1, #5
 8002d6e:	2032      	movs	r0, #50	; 0x32
 8002d70:	f001 f9ce 	bl	8004110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002d74:	2032      	movs	r0, #50	; 0x32
 8002d76:	f001 f9f7 	bl	8004168 <HAL_NVIC_EnableIRQ>
}
 8002d7a:	e036      	b.n	8002dea <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM9)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a20      	ldr	r2, [pc, #128]	; (8002e04 <HAL_TIM_Base_MspInit+0x150>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d116      	bne.n	8002db4 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <HAL_TIM_Base_MspInit+0x140>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <HAL_TIM_Base_MspInit+0x140>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d94:	6453      	str	r3, [r2, #68]	; 0x44
 8002d96:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <HAL_TIM_Base_MspInit+0x140>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002da2:	2200      	movs	r2, #0
 8002da4:	2105      	movs	r1, #5
 8002da6:	2018      	movs	r0, #24
 8002da8:	f001 f9b2 	bl	8004110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002dac:	2018      	movs	r0, #24
 8002dae:	f001 f9db 	bl	8004168 <HAL_NVIC_EnableIRQ>
}
 8002db2:	e01a      	b.n	8002dea <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM11)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a13      	ldr	r2, [pc, #76]	; (8002e08 <HAL_TIM_Base_MspInit+0x154>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d115      	bne.n	8002dea <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <HAL_TIM_Base_MspInit+0x140>)
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	4a0b      	ldr	r2, [pc, #44]	; (8002df4 <HAL_TIM_Base_MspInit+0x140>)
 8002dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dce:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <HAL_TIM_Base_MspInit+0x140>)
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2105      	movs	r1, #5
 8002dde:	201a      	movs	r0, #26
 8002de0:	f001 f996 	bl	8004110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002de4:	201a      	movs	r0, #26
 8002de6:	f001 f9bf 	bl	8004168 <HAL_NVIC_EnableIRQ>
}
 8002dea:	bf00      	nop
 8002dec:	3720      	adds	r7, #32
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40000400 	.word	0x40000400
 8002dfc:	40000800 	.word	0x40000800
 8002e00:	40000c00 	.word	0x40000c00
 8002e04:	40014000 	.word	0x40014000
 8002e08:	40014800 	.word	0x40014800

08002e0c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e10:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <MX_USART1_UART_Init+0x4c>)
 8002e12:	4a12      	ldr	r2, [pc, #72]	; (8002e5c <MX_USART1_UART_Init+0x50>)
 8002e14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <MX_USART1_UART_Init+0x4c>)
 8002e18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <MX_USART1_UART_Init+0x4c>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e24:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <MX_USART1_UART_Init+0x4c>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <MX_USART1_UART_Init+0x4c>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e30:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <MX_USART1_UART_Init+0x4c>)
 8002e32:	220c      	movs	r2, #12
 8002e34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e36:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <MX_USART1_UART_Init+0x4c>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <MX_USART1_UART_Init+0x4c>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e42:	4805      	ldr	r0, [pc, #20]	; (8002e58 <MX_USART1_UART_Init+0x4c>)
 8002e44:	f007 ff9a 	bl	800ad7c <HAL_UART_Init>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e4e:	f7ff faa9 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000880 	.word	0x20000880
 8002e5c:	40011000 	.word	0x40011000

08002e60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	; 0x28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	f107 0314 	add.w	r3, r7, #20
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a2c      	ldr	r2, [pc, #176]	; (8002f30 <HAL_UART_MspInit+0xd0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d152      	bne.n	8002f28 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	4b2b      	ldr	r3, [pc, #172]	; (8002f34 <HAL_UART_MspInit+0xd4>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	4a2a      	ldr	r2, [pc, #168]	; (8002f34 <HAL_UART_MspInit+0xd4>)
 8002e8c:	f043 0310 	orr.w	r3, r3, #16
 8002e90:	6453      	str	r3, [r2, #68]	; 0x44
 8002e92:	4b28      	ldr	r3, [pc, #160]	; (8002f34 <HAL_UART_MspInit+0xd4>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	613b      	str	r3, [r7, #16]
 8002e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_UART_MspInit+0xd4>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4a23      	ldr	r2, [pc, #140]	; (8002f34 <HAL_UART_MspInit+0xd4>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6313      	str	r3, [r2, #48]	; 0x30
 8002eae:	4b21      	ldr	r3, [pc, #132]	; (8002f34 <HAL_UART_MspInit+0xd4>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_UART_MspInit+0xd4>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	4a1c      	ldr	r2, [pc, #112]	; (8002f34 <HAL_UART_MspInit+0xd4>)
 8002ec4:	f043 0302 	orr.w	r3, r3, #2
 8002ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eca:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <HAL_UART_MspInit+0xd4>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002edc:	2302      	movs	r3, #2
 8002ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ee8:	2307      	movs	r3, #7
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eec:	f107 0314 	add.w	r3, r7, #20
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4811      	ldr	r0, [pc, #68]	; (8002f38 <HAL_UART_MspInit+0xd8>)
 8002ef4:	f002 f8da 	bl	80050ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ef8:	2380      	movs	r3, #128	; 0x80
 8002efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efc:	2302      	movs	r3, #2
 8002efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f04:	2303      	movs	r3, #3
 8002f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f08:	2307      	movs	r3, #7
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	4619      	mov	r1, r3
 8002f12:	480a      	ldr	r0, [pc, #40]	; (8002f3c <HAL_UART_MspInit+0xdc>)
 8002f14:	f002 f8ca 	bl	80050ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002f18:	2200      	movs	r2, #0
 8002f1a:	2105      	movs	r1, #5
 8002f1c:	2025      	movs	r0, #37	; 0x25
 8002f1e:	f001 f8f7 	bl	8004110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f22:	2025      	movs	r0, #37	; 0x25
 8002f24:	f001 f920 	bl	8004168 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002f28:	bf00      	nop
 8002f2a:	3728      	adds	r7, #40	; 0x28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40011000 	.word	0x40011000
 8002f34:	40023800 	.word	0x40023800
 8002f38:	40020000 	.word	0x40020000
 8002f3c:	40020400 	.word	0x40020400

08002f40 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a05      	ldr	r2, [pc, #20]	; (8002f64 <HAL_UART_RxCpltCallback+0x24>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d104      	bne.n	8002f5c <HAL_UART_RxCpltCallback+0x1c>
  {

	//BtcReceivedDataIRQ = STD_HIGH;
    HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 8002f52:	2201      	movs	r2, #1
 8002f54:	4904      	ldr	r1, [pc, #16]	; (8002f68 <HAL_UART_RxCpltCallback+0x28>)
 8002f56:	4805      	ldr	r0, [pc, #20]	; (8002f6c <HAL_UART_RxCpltCallback+0x2c>)
 8002f58:	f007 ffd4 	bl	800af04 <HAL_UART_Receive_IT>

	  /* do nothing */

  }

}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40011000 	.word	0x40011000
 8002f68:	20000094 	.word	0x20000094
 8002f6c:	20000880 	.word	0x20000880

08002f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f74:	480d      	ldr	r0, [pc, #52]	; (8002fac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f76:	490e      	ldr	r1, [pc, #56]	; (8002fb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f78:	4a0e      	ldr	r2, [pc, #56]	; (8002fb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f7c:	e002      	b.n	8002f84 <LoopCopyDataInit>

08002f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f82:	3304      	adds	r3, #4

08002f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f88:	d3f9      	bcc.n	8002f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f8a:	4a0b      	ldr	r2, [pc, #44]	; (8002fb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f8c:	4c0b      	ldr	r4, [pc, #44]	; (8002fbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f90:	e001      	b.n	8002f96 <LoopFillZerobss>

08002f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f94:	3204      	adds	r2, #4

08002f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f98:	d3fb      	bcc.n	8002f92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f9a:	f7ff fce1 	bl	8002960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f9e:	f00b fd5d 	bl	800ea5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fa2:	f7ff f92d 	bl	8002200 <main>
  bx  lr    
 8002fa6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fb0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002fb4:	0800f454 	.word	0x0800f454
  ldr r2, =_sbss
 8002fb8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002fbc:	20005338 	.word	0x20005338

08002fc0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fc0:	e7fe      	b.n	8002fc0 <DMA1_Stream0_IRQHandler>

08002fc2 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d104      	bne.n	8002fda <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002fd0:	b672      	cpsid	i
}
 8002fd2:	bf00      	nop
 8002fd4:	f7ff f9e6 	bl	80023a4 <Error_Handler>
 8002fd8:	e7fe      	b.n	8002fd8 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	7a1b      	ldrb	r3, [r3, #8]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d904      	bls.n	8002fec <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe2:	b672      	cpsid	i
}
 8002fe4:	bf00      	nop
 8002fe6:	f7ff f9dd 	bl	80023a4 <Error_Handler>
 8002fea:	e7fe      	b.n	8002fea <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	7a1b      	ldrb	r3, [r3, #8]
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	b2d1      	uxtb	r1, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	7211      	strb	r1, [r2, #8]
 8002ff8:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ffa:	f3ef 8211 	mrs	r2, BASEPRI
 8002ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	60fa      	str	r2, [r7, #12]
 8003010:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800301a:	bf00      	nop
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d104      	bne.n	800303a <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003030:	b672      	cpsid	i
}
 8003032:	bf00      	nop
 8003034:	f7ff f9b6 	bl	80023a4 <Error_Handler>
 8003038:	e7fe      	b.n	8003038 <stm32_lock_release+0x16>
  lock->nesting_level--;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	7a1b      	ldrb	r3, [r3, #8]
 800303e:	3b01      	subs	r3, #1
 8003040:	b2da      	uxtb	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	7a1b      	ldrb	r3, [r3, #8]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d904      	bls.n	8003058 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800304e:	b672      	cpsid	i
}
 8003050:	bf00      	nop
 8003052:	f7ff f9a7 	bl	80023a4 <Error_Handler>
 8003056:	e7fe      	b.n	8003056 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	7a1b      	ldrb	r3, [r3, #8]
 800305c:	461a      	mov	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003064:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800306c:	bf00      	nop
}
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d104      	bne.n	800308e <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003084:	b672      	cpsid	i
}
 8003086:	bf00      	nop
 8003088:	f7ff f98c 	bl	80023a4 <Error_Handler>
 800308c:	e7fe      	b.n	800308c <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff ff96 	bl	8002fc2 <stm32_lock_acquire>
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d104      	bne.n	80030b6 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80030ac:	b672      	cpsid	i
}
 80030ae:	bf00      	nop
 80030b0:	f7ff f978 	bl	80023a4 <Error_Handler>
 80030b4:	e7fe      	b.n	80030b4 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ffb2 	bl	8003022 <stm32_lock_release>
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030cc:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <HAL_Init+0x40>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0d      	ldr	r2, [pc, #52]	; (8003108 <HAL_Init+0x40>)
 80030d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_Init+0x40>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a0a      	ldr	r2, [pc, #40]	; (8003108 <HAL_Init+0x40>)
 80030de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030e4:	4b08      	ldr	r3, [pc, #32]	; (8003108 <HAL_Init+0x40>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a07      	ldr	r2, [pc, #28]	; (8003108 <HAL_Init+0x40>)
 80030ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030f0:	2003      	movs	r0, #3
 80030f2:	f000 ffed 	bl	80040d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030f6:	200f      	movs	r0, #15
 80030f8:	f7ff fb0c 	bl	8002714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030fc:	f7ff face 	bl	800269c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40023c00 	.word	0x40023c00

0800310c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_IncTick+0x20>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_IncTick+0x24>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4413      	add	r3, r2
 800311c:	4a04      	ldr	r2, [pc, #16]	; (8003130 <HAL_IncTick+0x24>)
 800311e:	6013      	str	r3, [r2, #0]
}
 8003120:	bf00      	nop
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	2000000c 	.word	0x2000000c
 8003130:	20000900 	.word	0x20000900

08003134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return uwTick;
 8003138:	4b03      	ldr	r3, [pc, #12]	; (8003148 <HAL_GetTick+0x14>)
 800313a:	681b      	ldr	r3, [r3, #0]
}
 800313c:	4618      	mov	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20000900 	.word	0x20000900

0800314c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e16f      	b.n	8003442 <HAL_ADC_Init+0x2f6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a93      	ldr	r2, [pc, #588]	; (80033b4 <HAL_ADC_Init+0x268>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d004      	beq.n	8003176 <HAL_ADC_Init+0x2a>
 800316c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8003170:	4891      	ldr	r0, [pc, #580]	; (80033b8 <HAL_ADC_Init+0x26c>)
 8003172:	f7ff f91c 	bl	80023ae <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d013      	beq.n	80031a6 <HAL_ADC_Init+0x5a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003186:	d00e      	beq.n	80031a6 <HAL_ADC_Init+0x5a>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003190:	d009      	beq.n	80031a6 <HAL_ADC_Init+0x5a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800319a:	d004      	beq.n	80031a6 <HAL_ADC_Init+0x5a>
 800319c:	f240 1143 	movw	r1, #323	; 0x143
 80031a0:	4885      	ldr	r0, [pc, #532]	; (80033b8 <HAL_ADC_Init+0x26c>)
 80031a2:	f7ff f904 	bl	80023ae <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d013      	beq.n	80031d6 <HAL_ADC_Init+0x8a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031b6:	d00e      	beq.n	80031d6 <HAL_ADC_Init+0x8a>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031c0:	d009      	beq.n	80031d6 <HAL_ADC_Init+0x8a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031ca:	d004      	beq.n	80031d6 <HAL_ADC_Init+0x8a>
 80031cc:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80031d0:	4879      	ldr	r0, [pc, #484]	; (80033b8 <HAL_ADC_Init+0x26c>)
 80031d2:	f7ff f8ec 	bl	80023ae <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d008      	beq.n	80031f0 <HAL_ADC_Init+0xa4>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d004      	beq.n	80031f0 <HAL_ADC_Init+0xa4>
 80031e6:	f240 1145 	movw	r1, #325	; 0x145
 80031ea:	4873      	ldr	r0, [pc, #460]	; (80033b8 <HAL_ADC_Init+0x26c>)
 80031ec:	f7ff f8df 	bl	80023ae <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	7e1b      	ldrb	r3, [r3, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_ADC_Init+0xbe>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	7e1b      	ldrb	r3, [r3, #24]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d004      	beq.n	800320a <HAL_ADC_Init+0xbe>
 8003200:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003204:	486c      	ldr	r0, [pc, #432]	; (80033b8 <HAL_ADC_Init+0x26c>)
 8003206:	f7ff f8d2 	bl	80023ae <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	2b00      	cmp	r3, #0
 8003210:	d054      	beq.n	80032bc <HAL_ADC_Init+0x170>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800321a:	d04f      	beq.n	80032bc <HAL_ADC_Init+0x170>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003224:	d04a      	beq.n	80032bc <HAL_ADC_Init+0x170>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800322e:	d045      	beq.n	80032bc <HAL_ADC_Init+0x170>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003238:	d040      	beq.n	80032bc <HAL_ADC_Init+0x170>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003242:	d03b      	beq.n	80032bc <HAL_ADC_Init+0x170>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800324c:	d036      	beq.n	80032bc <HAL_ADC_Init+0x170>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8003256:	d031      	beq.n	80032bc <HAL_ADC_Init+0x170>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003260:	d02c      	beq.n	80032bc <HAL_ADC_Init+0x170>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003266:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 800326a:	d027      	beq.n	80032bc <HAL_ADC_Init+0x170>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003270:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003274:	d022      	beq.n	80032bc <HAL_ADC_Init+0x170>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 800327e:	d01d      	beq.n	80032bc <HAL_ADC_Init+0x170>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003288:	d018      	beq.n	80032bc <HAL_ADC_Init+0x170>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8003292:	d013      	beq.n	80032bc <HAL_ADC_Init+0x170>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800329c:	d00e      	beq.n	80032bc <HAL_ADC_Init+0x170>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80032a6:	d009      	beq.n	80032bc <HAL_ADC_Init+0x170>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ac:	4a43      	ldr	r2, [pc, #268]	; (80033bc <HAL_ADC_Init+0x270>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d004      	beq.n	80032bc <HAL_ADC_Init+0x170>
 80032b2:	f240 1147 	movw	r1, #327	; 0x147
 80032b6:	4840      	ldr	r0, [pc, #256]	; (80033b8 <HAL_ADC_Init+0x26c>)
 80032b8:	f7ff f879 	bl	80023ae <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d009      	beq.n	80032d8 <HAL_ADC_Init+0x18c>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032cc:	d004      	beq.n	80032d8 <HAL_ADC_Init+0x18c>
 80032ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80032d2:	4839      	ldr	r0, [pc, #228]	; (80033b8 <HAL_ADC_Init+0x26c>)
 80032d4:	f7ff f86b 	bl	80023ae <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_ADC_Init+0x19c>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	2b10      	cmp	r3, #16
 80032e6:	d904      	bls.n	80032f2 <HAL_ADC_Init+0x1a6>
 80032e8:	f240 1149 	movw	r1, #329	; 0x149
 80032ec:	4832      	ldr	r0, [pc, #200]	; (80033b8 <HAL_ADC_Init+0x26c>)
 80032ee:	f7ff f85e 	bl	80023ae <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d009      	beq.n	8003310 <HAL_ADC_Init+0x1c4>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003302:	2b01      	cmp	r3, #1
 8003304:	d004      	beq.n	8003310 <HAL_ADC_Init+0x1c4>
 8003306:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800330a:	482b      	ldr	r0, [pc, #172]	; (80033b8 <HAL_ADC_Init+0x26c>)
 800330c:	f7ff f84f 	bl	80023ae <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d00c      	beq.n	8003332 <HAL_ADC_Init+0x1e6>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d008      	beq.n	8003332 <HAL_ADC_Init+0x1e6>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d004      	beq.n	8003332 <HAL_ADC_Init+0x1e6>
 8003328:	f240 114b 	movw	r1, #331	; 0x14b
 800332c:	4822      	ldr	r0, [pc, #136]	; (80033b8 <HAL_ADC_Init+0x26c>)
 800332e:	f7ff f83e 	bl	80023ae <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d009      	beq.n	8003350 <HAL_ADC_Init+0x204>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d004      	beq.n	8003350 <HAL_ADC_Init+0x204>
 8003346:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800334a:	481b      	ldr	r0, [pc, #108]	; (80033b8 <HAL_ADC_Init+0x26c>)
 800334c:	f7ff f82f 	bl	80023ae <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	4a19      	ldr	r2, [pc, #100]	; (80033bc <HAL_ADC_Init+0x270>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d017      	beq.n	800338a <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	2b00      	cmp	r3, #0
 8003360:	d013      	beq.n	800338a <HAL_ADC_Init+0x23e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800336a:	d00e      	beq.n	800338a <HAL_ADC_Init+0x23e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003374:	d009      	beq.n	800338a <HAL_ADC_Init+0x23e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800337e:	d004      	beq.n	800338a <HAL_ADC_Init+0x23e>
 8003380:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8003384:	480c      	ldr	r0, [pc, #48]	; (80033b8 <HAL_ADC_Init+0x26c>)
 8003386:	f7ff f812 	bl	80023ae <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	d131      	bne.n	80033f6 <HAL_ADC_Init+0x2aa>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a0a      	ldr	r2, [pc, #40]	; (80033c0 <HAL_ADC_Init+0x274>)
 8003396:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <HAL_ADC_Init+0x278>)
 800339c:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a09      	ldr	r2, [pc, #36]	; (80033c8 <HAL_ADC_Init+0x27c>)
 80033a2:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a09      	ldr	r2, [pc, #36]	; (80033cc <HAL_ADC_Init+0x280>)
 80033a8:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a08      	ldr	r2, [pc, #32]	; (80033d0 <HAL_ADC_Init+0x284>)
 80033ae:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	e00f      	b.n	80033d4 <HAL_ADC_Init+0x288>
 80033b4:	40012000 	.word	0x40012000
 80033b8:	0800ec84 	.word	0x0800ec84
 80033bc:	0f000001 	.word	0x0f000001
 80033c0:	08003905 	.word	0x08003905
 80033c4:	08003919 	.word	0x08003919
 80033c8:	0800392d 	.word	0x0800392d
 80033cc:	08003941 	.word	0x08003941
 80033d0:	08003f61 	.word	0x08003f61
 80033d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d102      	bne.n	80033e0 <HAL_ADC_Init+0x294>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a1b      	ldr	r2, [pc, #108]	; (800344c <HAL_ADC_Init+0x300>)
 80033de:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d118      	bne.n	8003434 <HAL_ADC_Init+0x2e8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800340a:	f023 0302 	bic.w	r3, r3, #2
 800340e:	f043 0202 	orr.w	r2, r3, #2
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fc12 	bl	8003c40 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f023 0303 	bic.w	r3, r3, #3
 800342a:	f043 0201 	orr.w	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	641a      	str	r2, [r3, #64]	; 0x40
 8003432:	e001      	b.n	8003438 <HAL_ADC_Init+0x2ec>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003440:	7bfb      	ldrb	r3, [r7, #15]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	08001cc1 	.word	0x08001cc1

08003450 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	2300      	movs	r3, #0
 800345e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	7e1b      	ldrb	r3, [r3, #24]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_ADC_IRQHandler+0x3a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	7e1b      	ldrb	r3, [r3, #24]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d004      	beq.n	800348a <HAL_ADC_IRQHandler+0x3a>
 8003480:	f240 41b7 	movw	r1, #1207	; 0x4b7
 8003484:	4892      	ldr	r0, [pc, #584]	; (80036d0 <HAL_ADC_IRQHandler+0x280>)
 8003486:	f7fe ff92 	bl	80023ae <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_ADC_IRQHandler+0x4a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	2b10      	cmp	r3, #16
 8003498:	d904      	bls.n	80034a4 <HAL_ADC_IRQHandler+0x54>
 800349a:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
 800349e:	488c      	ldr	r0, [pc, #560]	; (80036d0 <HAL_ADC_IRQHandler+0x280>)
 80034a0:	f7fe ff85 	bl	80023ae <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d00c      	beq.n	80034c6 <HAL_ADC_IRQHandler+0x76>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_ADC_IRQHandler+0x76>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d004      	beq.n	80034c6 <HAL_ADC_IRQHandler+0x76>
 80034bc:	f240 41b9 	movw	r1, #1209	; 0x4b9
 80034c0:	4883      	ldr	r0, [pc, #524]	; (80036d0 <HAL_ADC_IRQHandler+0x280>)
 80034c2:	f7fe ff74 	bl	80023ae <assert_failed>
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d04a      	beq.n	8003572 <HAL_ADC_IRQHandler+0x122>
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d047      	beq.n	8003572 <HAL_ADC_IRQHandler+0x122>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d105      	bne.n	80034fa <HAL_ADC_IRQHandler+0xaa>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d12b      	bne.n	8003560 <HAL_ADC_IRQHandler+0x110>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800350c:	2b00      	cmp	r3, #0
 800350e:	d127      	bne.n	8003560 <HAL_ADC_IRQHandler+0x110>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800351a:	2b00      	cmp	r3, #0
 800351c:	d006      	beq.n	800352c <HAL_ADC_IRQHandler+0xdc>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003528:	2b00      	cmp	r3, #0
 800352a:	d119      	bne.n	8003560 <HAL_ADC_IRQHandler+0x110>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0220 	bic.w	r2, r2, #32
 800353a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d105      	bne.n	8003560 <HAL_ADC_IRQHandler+0x110>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	f043 0201 	orr.w	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0212 	mvn.w	r2, #18
 8003570:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003580:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d058      	beq.n	800363a <HAL_ADC_IRQHandler+0x1ea>
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d055      	beq.n	800363a <HAL_ADC_IRQHandler+0x1ea>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 0310 	and.w	r3, r3, #16
 8003596:	2b00      	cmp	r3, #0
 8003598:	d105      	bne.n	80035a6 <HAL_ADC_IRQHandler+0x156>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d139      	bne.n	8003628 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d006      	beq.n	80035d0 <HAL_ADC_IRQHandler+0x180>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d12b      	bne.n	8003628 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d124      	bne.n	8003628 <HAL_ADC_IRQHandler+0x1d8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d11d      	bne.n	8003628 <HAL_ADC_IRQHandler+0x1d8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d119      	bne.n	8003628 <HAL_ADC_IRQHandler+0x1d8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003602:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003618:	2b00      	cmp	r3, #0
 800361a:	d105      	bne.n	8003628 <HAL_ADC_IRQHandler+0x1d8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	f043 0201 	orr.w	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 020c 	mvn.w	r2, #12
 8003638:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003648:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d018      	beq.n	8003682 <HAL_ADC_IRQHandler+0x232>
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d015      	beq.n	8003682 <HAL_ADC_IRQHandler+0x232>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b01      	cmp	r3, #1
 8003662:	d10e      	bne.n	8003682 <HAL_ADC_IRQHandler+0x232>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0201 	mvn.w	r2, #1
 8003680:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003690:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d016      	beq.n	80036c6 <HAL_ADC_IRQHandler+0x276>
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d013      	beq.n	80036c6 <HAL_ADC_IRQHandler+0x276>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	f043 0202 	orr.w	r2, r3, #2
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f06f 0220 	mvn.w	r2, #32
 80036b2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0220 	mvn.w	r2, #32
 80036c4:	601a      	str	r2, [r3, #0]
  }
}
 80036c6:	bf00      	nop
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	0800ec84 	.word	0x0800ec84

080036d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	7e1b      	ldrb	r3, [r3, #24]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <HAL_ADC_Start_DMA+0x2a>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	7e1b      	ldrb	r3, [r3, #24]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d004      	beq.n	80036fe <HAL_ADC_Start_DMA+0x2a>
 80036f4:	f240 515a 	movw	r1, #1370	; 0x55a
 80036f8:	487a      	ldr	r0, [pc, #488]	; (80038e4 <HAL_ADC_Start_DMA+0x210>)
 80036fa:	f7fe fe58 	bl	80023ae <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d013      	beq.n	800372e <HAL_ADC_Start_DMA+0x5a>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800370e:	d00e      	beq.n	800372e <HAL_ADC_Start_DMA+0x5a>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003718:	d009      	beq.n	800372e <HAL_ADC_Start_DMA+0x5a>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003722:	d004      	beq.n	800372e <HAL_ADC_Start_DMA+0x5a>
 8003724:	f240 515b 	movw	r1, #1371	; 0x55b
 8003728:	486e      	ldr	r0, [pc, #440]	; (80038e4 <HAL_ADC_Start_DMA+0x210>)
 800372a:	f7fe fe40 	bl	80023ae <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_ADC_Start_DMA+0x68>
 8003738:	2302      	movs	r3, #2
 800373a:	e0ce      	b.n	80038da <HAL_ADC_Start_DMA+0x206>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b01      	cmp	r3, #1
 8003750:	d018      	beq.n	8003784 <HAL_ADC_Start_DMA+0xb0>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0201 	orr.w	r2, r2, #1
 8003760:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003762:	4b61      	ldr	r3, [pc, #388]	; (80038e8 <HAL_ADC_Start_DMA+0x214>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a61      	ldr	r2, [pc, #388]	; (80038ec <HAL_ADC_Start_DMA+0x218>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	0c9a      	lsrs	r2, r3, #18
 800376e:	4613      	mov	r3, r2
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	4413      	add	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003776:	e002      	b.n	800377e <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	3b01      	subs	r3, #1
 800377c:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f9      	bne.n	8003778 <HAL_ADC_Start_DMA+0xa4>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003792:	d107      	bne.n	80037a4 <HAL_ADC_Start_DMA+0xd0>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037a2:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	f040 8086 	bne.w	80038c0 <HAL_ADC_Start_DMA+0x1ec>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80037bc:	f023 0301 	bic.w	r3, r3, #1
 80037c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d007      	beq.n	80037e6 <HAL_ADC_Start_DMA+0x112>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f2:	d106      	bne.n	8003802 <HAL_ADC_Start_DMA+0x12e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	f023 0206 	bic.w	r2, r3, #6
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	645a      	str	r2, [r3, #68]	; 0x44
 8003800:	e002      	b.n	8003808 <HAL_ADC_Start_DMA+0x134>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003810:	4b37      	ldr	r3, [pc, #220]	; (80038f0 <HAL_ADC_Start_DMA+0x21c>)
 8003812:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	4a36      	ldr	r2, [pc, #216]	; (80038f4 <HAL_ADC_Start_DMA+0x220>)
 800381a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	4a35      	ldr	r2, [pc, #212]	; (80038f8 <HAL_ADC_Start_DMA+0x224>)
 8003822:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	4a34      	ldr	r2, [pc, #208]	; (80038fc <HAL_ADC_Start_DMA+0x228>)
 800382a:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003834:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003844:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003854:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	334c      	adds	r3, #76	; 0x4c
 8003860:	4619      	mov	r1, r3
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f000 fedb 	bl	8004620 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10f      	bne.n	8003896 <HAL_ADC_Start_DMA+0x1c2>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d129      	bne.n	80038d8 <HAL_ADC_Start_DMA+0x204>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	e020      	b.n	80038d8 <HAL_ADC_Start_DMA+0x204>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a19      	ldr	r2, [pc, #100]	; (8003900 <HAL_ADC_Start_DMA+0x22c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d11b      	bne.n	80038d8 <HAL_ADC_Start_DMA+0x204>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d114      	bne.n	80038d8 <HAL_ADC_Start_DMA+0x204>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80038bc:	609a      	str	r2, [r3, #8]
 80038be:	e00b      	b.n	80038d8 <HAL_ADC_Start_DMA+0x204>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	f043 0210 	orr.w	r2, r3, #16
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d0:	f043 0201 	orr.w	r2, r3, #1
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	0800ec84 	.word	0x0800ec84
 80038e8:	20000004 	.word	0x20000004
 80038ec:	431bde83 	.word	0x431bde83
 80038f0:	40012300 	.word	0x40012300
 80038f4:	08003e55 	.word	0x08003e55
 80038f8:	08003f13 	.word	0x08003f13
 80038fc:	08003f31 	.word	0x08003f31
 8003900:	40012000 	.word	0x40012000

08003904 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b12      	cmp	r3, #18
 8003968:	d909      	bls.n	800397e <HAL_ADC_ConfigChannel+0x2a>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a72      	ldr	r2, [pc, #456]	; (8003b38 <HAL_ADC_ConfigChannel+0x1e4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d004      	beq.n	800397e <HAL_ADC_ConfigChannel+0x2a>
 8003974:	f240 618b 	movw	r1, #1675	; 0x68b
 8003978:	4870      	ldr	r0, [pc, #448]	; (8003b3c <HAL_ADC_ConfigChannel+0x1e8>)
 800397a:	f7fe fd18 	bl	80023ae <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_ADC_ConfigChannel+0x3a>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b10      	cmp	r3, #16
 800398c:	d904      	bls.n	8003998 <HAL_ADC_ConfigChannel+0x44>
 800398e:	f240 618c 	movw	r1, #1676	; 0x68c
 8003992:	486a      	ldr	r0, [pc, #424]	; (8003b3c <HAL_ADC_ConfigChannel+0x1e8>)
 8003994:	f7fe fd0b 	bl	80023ae <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d020      	beq.n	80039e2 <HAL_ADC_ConfigChannel+0x8e>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d01c      	beq.n	80039e2 <HAL_ADC_ConfigChannel+0x8e>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d018      	beq.n	80039e2 <HAL_ADC_ConfigChannel+0x8e>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d014      	beq.n	80039e2 <HAL_ADC_ConfigChannel+0x8e>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d010      	beq.n	80039e2 <HAL_ADC_ConfigChannel+0x8e>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2b05      	cmp	r3, #5
 80039c6:	d00c      	beq.n	80039e2 <HAL_ADC_ConfigChannel+0x8e>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b06      	cmp	r3, #6
 80039ce:	d008      	beq.n	80039e2 <HAL_ADC_ConfigChannel+0x8e>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b07      	cmp	r3, #7
 80039d6:	d004      	beq.n	80039e2 <HAL_ADC_ConfigChannel+0x8e>
 80039d8:	f240 618d 	movw	r1, #1677	; 0x68d
 80039dc:	4857      	ldr	r0, [pc, #348]	; (8003b3c <HAL_ADC_ConfigChannel+0x1e8>)
 80039de:	f7fe fce6 	bl	80023ae <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x9c>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e118      	b.n	8003c22 <HAL_ADC_ConfigChannel+0x2ce>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b09      	cmp	r3, #9
 80039fe:	d925      	bls.n	8003a4c <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68d9      	ldr	r1, [r3, #12]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4613      	mov	r3, r2
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	4413      	add	r3, r2
 8003a14:	3b1e      	subs	r3, #30
 8003a16:	2207      	movs	r2, #7
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43da      	mvns	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	400a      	ands	r2, r1
 8003a24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68d9      	ldr	r1, [r3, #12]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	4618      	mov	r0, r3
 8003a38:	4603      	mov	r3, r0
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	4403      	add	r3, r0
 8003a3e:	3b1e      	subs	r3, #30
 8003a40:	409a      	lsls	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	60da      	str	r2, [r3, #12]
 8003a4a:	e022      	b.n	8003a92 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6919      	ldr	r1, [r3, #16]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	4413      	add	r3, r2
 8003a60:	2207      	movs	r2, #7
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43da      	mvns	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	400a      	ands	r2, r1
 8003a6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6919      	ldr	r1, [r3, #16]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	4618      	mov	r0, r3
 8003a82:	4603      	mov	r3, r0
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	4403      	add	r3, r0
 8003a88:	409a      	lsls	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b06      	cmp	r3, #6
 8003a98:	d824      	bhi.n	8003ae4 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3b05      	subs	r3, #5
 8003aac:	221f      	movs	r2, #31
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43da      	mvns	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	400a      	ands	r2, r1
 8003aba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	4618      	mov	r0, r3
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3b05      	subs	r3, #5
 8003ad6:	fa00 f203 	lsl.w	r2, r0, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	635a      	str	r2, [r3, #52]	; 0x34
 8003ae2:	e051      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b0c      	cmp	r3, #12
 8003aea:	d829      	bhi.n	8003b40 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	3b23      	subs	r3, #35	; 0x23
 8003afe:	221f      	movs	r2, #31
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43da      	mvns	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	400a      	ands	r2, r1
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	3b23      	subs	r3, #35	; 0x23
 8003b28:	fa00 f203 	lsl.w	r2, r0, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30
 8003b34:	e028      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x234>
 8003b36:	bf00      	nop
 8003b38:	10000012 	.word	0x10000012
 8003b3c:	0800ec84 	.word	0x0800ec84
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	3b41      	subs	r3, #65	; 0x41
 8003b52:	221f      	movs	r2, #31
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43da      	mvns	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	400a      	ands	r2, r1
 8003b60:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	4618      	mov	r0, r3
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	3b41      	subs	r3, #65	; 0x41
 8003b7c:	fa00 f203 	lsl.w	r2, r0, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b88:	4b28      	ldr	r3, [pc, #160]	; (8003c2c <HAL_ADC_ConfigChannel+0x2d8>)
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a27      	ldr	r2, [pc, #156]	; (8003c30 <HAL_ADC_ConfigChannel+0x2dc>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d10f      	bne.n	8003bb6 <HAL_ADC_ConfigChannel+0x262>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b12      	cmp	r3, #18
 8003b9c:	d10b      	bne.n	8003bb6 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1d      	ldr	r2, [pc, #116]	; (8003c30 <HAL_ADC_ConfigChannel+0x2dc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d12b      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x2c4>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1b      	ldr	r2, [pc, #108]	; (8003c34 <HAL_ADC_ConfigChannel+0x2e0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d003      	beq.n	8003bd2 <HAL_ADC_ConfigChannel+0x27e>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b11      	cmp	r3, #17
 8003bd0:	d122      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a11      	ldr	r2, [pc, #68]	; (8003c34 <HAL_ADC_ConfigChannel+0x2e0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d111      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003bf4:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <HAL_ADC_ConfigChannel+0x2e4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a10      	ldr	r2, [pc, #64]	; (8003c3c <HAL_ADC_ConfigChannel+0x2e8>)
 8003bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfe:	0c9a      	lsrs	r2, r3, #18
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c0a:	e002      	b.n	8003c12 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1f9      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40012300 	.word	0x40012300
 8003c30:	40012000 	.word	0x40012000
 8003c34:	10000012 	.word	0x10000012
 8003c38:	20000004 	.word	0x20000004
 8003c3c:	431bde83 	.word	0x431bde83

08003c40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c48:	4b7f      	ldr	r3, [pc, #508]	; (8003e48 <ADC_Init+0x208>)
 8003c4a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	431a      	orrs	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6859      	ldr	r1, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	021a      	lsls	r2, r3, #8
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6859      	ldr	r1, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6899      	ldr	r1, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd2:	4a5e      	ldr	r2, [pc, #376]	; (8003e4c <ADC_Init+0x20c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d022      	beq.n	8003d1e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ce6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6899      	ldr	r1, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6899      	ldr	r1, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	609a      	str	r2, [r3, #8]
 8003d1c:	e00f      	b.n	8003d3e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0202 	bic.w	r2, r2, #2
 8003d4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6899      	ldr	r1, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	7e1b      	ldrb	r3, [r3, #24]
 8003d58:	005a      	lsls	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d028      	beq.n	8003dbe <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <ADC_Init+0x13c>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d904      	bls.n	8003d86 <ADC_Init+0x146>
 8003d7c:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8003d80:	4833      	ldr	r0, [pc, #204]	; (8003e50 <ADC_Init+0x210>)
 8003d82:	f7fe fb14 	bl	80023ae <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d94:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003da4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6859      	ldr	r1, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	3b01      	subs	r3, #1
 8003db2:	035a      	lsls	r2, r3, #13
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	e007      	b.n	8003dce <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dcc:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	3b01      	subs	r3, #1
 8003dea:	051a      	lsls	r2, r3, #20
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6899      	ldr	r1, [r3, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e10:	025a      	lsls	r2, r3, #9
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6899      	ldr	r1, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	029a      	lsls	r2, r3, #10
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	609a      	str	r2, [r3, #8]
}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40012300 	.word	0x40012300
 8003e4c:	0f000001 	.word	0x0f000001
 8003e50:	0800ec84 	.word	0x0800ec84

08003e54 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d13d      	bne.n	8003eea <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d12b      	bne.n	8003ee0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d127      	bne.n	8003ee0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d006      	beq.n	8003eac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d119      	bne.n	8003ee0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0220 	bic.w	r2, r2, #32
 8003eba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d105      	bne.n	8003ee0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	f043 0201 	orr.w	r2, r3, #1
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ee8:	e00f      	b.n	8003f0a <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f003 0310 	and.w	r3, r3, #16
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d004      	beq.n	8003f00 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	4798      	blx	r3
}
 8003efe:	e004      	b.n	8003f0a <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	4798      	blx	r3
}
 8003f0a:	bf00      	nop
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b084      	sub	sp, #16
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f28:	bf00      	nop
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3c:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2240      	movs	r2, #64	; 0x40
 8003f42:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f48:	f043 0204 	orr.w	r2, r3, #4
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f84:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f90:	4013      	ands	r3, r2
 8003f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fa6:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	60d3      	str	r3, [r2, #12]
}
 8003fac:	bf00      	nop
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	e000ed00 	.word	0xe000ed00

08003fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fc0:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	0a1b      	lsrs	r3, r3, #8
 8003fc6:	f003 0307 	and.w	r3, r3, #7
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	e000ed00 	.word	0xe000ed00

08003fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	db0b      	blt.n	8004002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fea:	79fb      	ldrb	r3, [r7, #7]
 8003fec:	f003 021f 	and.w	r2, r3, #31
 8003ff0:	4907      	ldr	r1, [pc, #28]	; (8004010 <__NVIC_EnableIRQ+0x38>)
 8003ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8003ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	e000e100 	.word	0xe000e100

08004014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	4603      	mov	r3, r0
 800401c:	6039      	str	r1, [r7, #0]
 800401e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004024:	2b00      	cmp	r3, #0
 8004026:	db0a      	blt.n	800403e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	b2da      	uxtb	r2, r3
 800402c:	490c      	ldr	r1, [pc, #48]	; (8004060 <__NVIC_SetPriority+0x4c>)
 800402e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004032:	0112      	lsls	r2, r2, #4
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	440b      	add	r3, r1
 8004038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800403c:	e00a      	b.n	8004054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	b2da      	uxtb	r2, r3
 8004042:	4908      	ldr	r1, [pc, #32]	; (8004064 <__NVIC_SetPriority+0x50>)
 8004044:	79fb      	ldrb	r3, [r7, #7]
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	3b04      	subs	r3, #4
 800404c:	0112      	lsls	r2, r2, #4
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	440b      	add	r3, r1
 8004052:	761a      	strb	r2, [r3, #24]
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	e000e100 	.word	0xe000e100
 8004064:	e000ed00 	.word	0xe000ed00

08004068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004068:	b480      	push	{r7}
 800406a:	b089      	sub	sp, #36	; 0x24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f1c3 0307 	rsb	r3, r3, #7
 8004082:	2b04      	cmp	r3, #4
 8004084:	bf28      	it	cs
 8004086:	2304      	movcs	r3, #4
 8004088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	3304      	adds	r3, #4
 800408e:	2b06      	cmp	r3, #6
 8004090:	d902      	bls.n	8004098 <NVIC_EncodePriority+0x30>
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	3b03      	subs	r3, #3
 8004096:	e000      	b.n	800409a <NVIC_EncodePriority+0x32>
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800409c:	f04f 32ff 	mov.w	r2, #4294967295
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43da      	mvns	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	401a      	ands	r2, r3
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040b0:	f04f 31ff 	mov.w	r1, #4294967295
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ba:	43d9      	mvns	r1, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040c0:	4313      	orrs	r3, r2
         );
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3724      	adds	r7, #36	; 0x24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
	...

080040d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b07      	cmp	r3, #7
 80040dc:	d00f      	beq.n	80040fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b06      	cmp	r3, #6
 80040e2:	d00c      	beq.n	80040fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b05      	cmp	r3, #5
 80040e8:	d009      	beq.n	80040fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d006      	beq.n	80040fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b03      	cmp	r3, #3
 80040f4:	d003      	beq.n	80040fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80040f6:	2190      	movs	r1, #144	; 0x90
 80040f8:	4804      	ldr	r0, [pc, #16]	; (800410c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80040fa:	f7fe f958 	bl	80023ae <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff ff38 	bl	8003f74 <__NVIC_SetPriorityGrouping>
}
 8004104:	bf00      	nop
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	0800ecf8 	.word	0x0800ecf8

08004110 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b0f      	cmp	r3, #15
 8004126:	d903      	bls.n	8004130 <HAL_NVIC_SetPriority+0x20>
 8004128:	21a8      	movs	r1, #168	; 0xa8
 800412a:	480e      	ldr	r0, [pc, #56]	; (8004164 <HAL_NVIC_SetPriority+0x54>)
 800412c:	f7fe f93f 	bl	80023ae <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b0f      	cmp	r3, #15
 8004134:	d903      	bls.n	800413e <HAL_NVIC_SetPriority+0x2e>
 8004136:	21a9      	movs	r1, #169	; 0xa9
 8004138:	480a      	ldr	r0, [pc, #40]	; (8004164 <HAL_NVIC_SetPriority+0x54>)
 800413a:	f7fe f938 	bl	80023ae <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800413e:	f7ff ff3d 	bl	8003fbc <__NVIC_GetPriorityGrouping>
 8004142:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	6978      	ldr	r0, [r7, #20]
 800414a:	f7ff ff8d 	bl	8004068 <NVIC_EncodePriority>
 800414e:	4602      	mov	r2, r0
 8004150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004154:	4611      	mov	r1, r2
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff ff5c 	bl	8004014 <__NVIC_SetPriority>
}
 800415c:	bf00      	nop
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	0800ecf8 	.word	0x0800ecf8

08004168 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8004172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004176:	2b00      	cmp	r3, #0
 8004178:	da03      	bge.n	8004182 <HAL_NVIC_EnableIRQ+0x1a>
 800417a:	21bc      	movs	r1, #188	; 0xbc
 800417c:	4805      	ldr	r0, [pc, #20]	; (8004194 <HAL_NVIC_EnableIRQ+0x2c>)
 800417e:	f7fe f916 	bl	80023ae <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff ff26 	bl	8003fd8 <__NVIC_EnableIRQ>
}
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	0800ecf8 	.word	0x0800ecf8

08004198 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e017      	b.n	80041da <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a0d      	ldr	r2, [pc, #52]	; (80041e4 <HAL_CRC_Init+0x4c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d003      	beq.n	80041bc <HAL_CRC_Init+0x24>
 80041b4:	2168      	movs	r1, #104	; 0x68
 80041b6:	480c      	ldr	r0, [pc, #48]	; (80041e8 <HAL_CRC_Init+0x50>)
 80041b8:	f7fe f8f9 	bl	80023ae <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	795b      	ldrb	r3, [r3, #5]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d105      	bne.n	80041d2 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7fd fe43 	bl	8001e58 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40023000 	.word	0x40023000
 80041e8:	0800ed70 	.word	0x0800ed70

080041ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80041f8:	f7fe ff9c 	bl	8003134 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e203      	b.n	8004610 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a8b      	ldr	r2, [pc, #556]	; (800443c <HAL_DMA_Init+0x250>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d04e      	beq.n	80042b0 <HAL_DMA_Init+0xc4>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a8a      	ldr	r2, [pc, #552]	; (8004440 <HAL_DMA_Init+0x254>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d049      	beq.n	80042b0 <HAL_DMA_Init+0xc4>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a88      	ldr	r2, [pc, #544]	; (8004444 <HAL_DMA_Init+0x258>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d044      	beq.n	80042b0 <HAL_DMA_Init+0xc4>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a87      	ldr	r2, [pc, #540]	; (8004448 <HAL_DMA_Init+0x25c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d03f      	beq.n	80042b0 <HAL_DMA_Init+0xc4>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a85      	ldr	r2, [pc, #532]	; (800444c <HAL_DMA_Init+0x260>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d03a      	beq.n	80042b0 <HAL_DMA_Init+0xc4>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a84      	ldr	r2, [pc, #528]	; (8004450 <HAL_DMA_Init+0x264>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d035      	beq.n	80042b0 <HAL_DMA_Init+0xc4>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a82      	ldr	r2, [pc, #520]	; (8004454 <HAL_DMA_Init+0x268>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d030      	beq.n	80042b0 <HAL_DMA_Init+0xc4>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a81      	ldr	r2, [pc, #516]	; (8004458 <HAL_DMA_Init+0x26c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d02b      	beq.n	80042b0 <HAL_DMA_Init+0xc4>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a7f      	ldr	r2, [pc, #508]	; (800445c <HAL_DMA_Init+0x270>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d026      	beq.n	80042b0 <HAL_DMA_Init+0xc4>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a7e      	ldr	r2, [pc, #504]	; (8004460 <HAL_DMA_Init+0x274>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d021      	beq.n	80042b0 <HAL_DMA_Init+0xc4>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a7c      	ldr	r2, [pc, #496]	; (8004464 <HAL_DMA_Init+0x278>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d01c      	beq.n	80042b0 <HAL_DMA_Init+0xc4>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a7b      	ldr	r2, [pc, #492]	; (8004468 <HAL_DMA_Init+0x27c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d017      	beq.n	80042b0 <HAL_DMA_Init+0xc4>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a79      	ldr	r2, [pc, #484]	; (800446c <HAL_DMA_Init+0x280>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d012      	beq.n	80042b0 <HAL_DMA_Init+0xc4>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a78      	ldr	r2, [pc, #480]	; (8004470 <HAL_DMA_Init+0x284>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00d      	beq.n	80042b0 <HAL_DMA_Init+0xc4>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a76      	ldr	r2, [pc, #472]	; (8004474 <HAL_DMA_Init+0x288>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d008      	beq.n	80042b0 <HAL_DMA_Init+0xc4>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a75      	ldr	r2, [pc, #468]	; (8004478 <HAL_DMA_Init+0x28c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d003      	beq.n	80042b0 <HAL_DMA_Init+0xc4>
 80042a8:	21b7      	movs	r1, #183	; 0xb7
 80042aa:	4874      	ldr	r0, [pc, #464]	; (800447c <HAL_DMA_Init+0x290>)
 80042ac:	f7fe f87f 	bl	80023ae <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d026      	beq.n	8004306 <HAL_DMA_Init+0x11a>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042c0:	d021      	beq.n	8004306 <HAL_DMA_Init+0x11a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042ca:	d01c      	beq.n	8004306 <HAL_DMA_Init+0x11a>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80042d4:	d017      	beq.n	8004306 <HAL_DMA_Init+0x11a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042de:	d012      	beq.n	8004306 <HAL_DMA_Init+0x11a>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80042e8:	d00d      	beq.n	8004306 <HAL_DMA_Init+0x11a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80042f2:	d008      	beq.n	8004306 <HAL_DMA_Init+0x11a>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80042fc:	d003      	beq.n	8004306 <HAL_DMA_Init+0x11a>
 80042fe:	21b8      	movs	r1, #184	; 0xb8
 8004300:	485e      	ldr	r0, [pc, #376]	; (800447c <HAL_DMA_Init+0x290>)
 8004302:	f7fe f854 	bl	80023ae <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00b      	beq.n	8004326 <HAL_DMA_Init+0x13a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	2b40      	cmp	r3, #64	; 0x40
 8004314:	d007      	beq.n	8004326 <HAL_DMA_Init+0x13a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2b80      	cmp	r3, #128	; 0x80
 800431c:	d003      	beq.n	8004326 <HAL_DMA_Init+0x13a>
 800431e:	21b9      	movs	r1, #185	; 0xb9
 8004320:	4856      	ldr	r0, [pc, #344]	; (800447c <HAL_DMA_Init+0x290>)
 8004322:	f7fe f844 	bl	80023ae <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800432e:	d007      	beq.n	8004340 <HAL_DMA_Init+0x154>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_DMA_Init+0x154>
 8004338:	21ba      	movs	r1, #186	; 0xba
 800433a:	4850      	ldr	r0, [pc, #320]	; (800447c <HAL_DMA_Init+0x290>)
 800433c:	f7fe f837 	bl	80023ae <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004348:	d007      	beq.n	800435a <HAL_DMA_Init+0x16e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_DMA_Init+0x16e>
 8004352:	21bb      	movs	r1, #187	; 0xbb
 8004354:	4849      	ldr	r0, [pc, #292]	; (800447c <HAL_DMA_Init+0x290>)
 8004356:	f7fe f82a 	bl	80023ae <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00d      	beq.n	800437e <HAL_DMA_Init+0x192>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800436a:	d008      	beq.n	800437e <HAL_DMA_Init+0x192>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004374:	d003      	beq.n	800437e <HAL_DMA_Init+0x192>
 8004376:	21bc      	movs	r1, #188	; 0xbc
 8004378:	4840      	ldr	r0, [pc, #256]	; (800447c <HAL_DMA_Init+0x290>)
 800437a:	f7fe f818 	bl	80023ae <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00d      	beq.n	80043a2 <HAL_DMA_Init+0x1b6>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800438e:	d008      	beq.n	80043a2 <HAL_DMA_Init+0x1b6>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004398:	d003      	beq.n	80043a2 <HAL_DMA_Init+0x1b6>
 800439a:	21bd      	movs	r1, #189	; 0xbd
 800439c:	4837      	ldr	r0, [pc, #220]	; (800447c <HAL_DMA_Init+0x290>)
 800439e:	f7fe f806 	bl	80023ae <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00c      	beq.n	80043c4 <HAL_DMA_Init+0x1d8>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b2:	d007      	beq.n	80043c4 <HAL_DMA_Init+0x1d8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d003      	beq.n	80043c4 <HAL_DMA_Init+0x1d8>
 80043bc:	21be      	movs	r1, #190	; 0xbe
 80043be:	482f      	ldr	r0, [pc, #188]	; (800447c <HAL_DMA_Init+0x290>)
 80043c0:	f7fd fff5 	bl	80023ae <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d012      	beq.n	80043f2 <HAL_DMA_Init+0x206>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d4:	d00d      	beq.n	80043f2 <HAL_DMA_Init+0x206>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043de:	d008      	beq.n	80043f2 <HAL_DMA_Init+0x206>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043e8:	d003      	beq.n	80043f2 <HAL_DMA_Init+0x206>
 80043ea:	21bf      	movs	r1, #191	; 0xbf
 80043ec:	4823      	ldr	r0, [pc, #140]	; (800447c <HAL_DMA_Init+0x290>)
 80043ee:	f7fd ffde 	bl	80023ae <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <HAL_DMA_Init+0x21e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d003      	beq.n	800440a <HAL_DMA_Init+0x21e>
 8004402:	21c0      	movs	r1, #192	; 0xc0
 8004404:	481d      	ldr	r0, [pc, #116]	; (800447c <HAL_DMA_Init+0x290>)
 8004406:	f7fd ffd2 	bl	80023ae <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	2b00      	cmp	r3, #0
 8004410:	d064      	beq.n	80044dc <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004416:	2b00      	cmp	r3, #0
 8004418:	d032      	beq.n	8004480 <HAL_DMA_Init+0x294>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441e:	2b01      	cmp	r3, #1
 8004420:	d02e      	beq.n	8004480 <HAL_DMA_Init+0x294>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	2b02      	cmp	r3, #2
 8004428:	d02a      	beq.n	8004480 <HAL_DMA_Init+0x294>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	2b03      	cmp	r3, #3
 8004430:	d026      	beq.n	8004480 <HAL_DMA_Init+0x294>
 8004432:	21c5      	movs	r1, #197	; 0xc5
 8004434:	4811      	ldr	r0, [pc, #68]	; (800447c <HAL_DMA_Init+0x290>)
 8004436:	f7fd ffba 	bl	80023ae <assert_failed>
 800443a:	e021      	b.n	8004480 <HAL_DMA_Init+0x294>
 800443c:	40026010 	.word	0x40026010
 8004440:	40026028 	.word	0x40026028
 8004444:	40026040 	.word	0x40026040
 8004448:	40026058 	.word	0x40026058
 800444c:	40026070 	.word	0x40026070
 8004450:	40026088 	.word	0x40026088
 8004454:	400260a0 	.word	0x400260a0
 8004458:	400260b8 	.word	0x400260b8
 800445c:	40026410 	.word	0x40026410
 8004460:	40026428 	.word	0x40026428
 8004464:	40026440 	.word	0x40026440
 8004468:	40026458 	.word	0x40026458
 800446c:	40026470 	.word	0x40026470
 8004470:	40026488 	.word	0x40026488
 8004474:	400264a0 	.word	0x400264a0
 8004478:	400264b8 	.word	0x400264b8
 800447c:	0800ede4 	.word	0x0800ede4
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	2b00      	cmp	r3, #0
 8004486:	d012      	beq.n	80044ae <HAL_DMA_Init+0x2c2>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004490:	d00d      	beq.n	80044ae <HAL_DMA_Init+0x2c2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800449a:	d008      	beq.n	80044ae <HAL_DMA_Init+0x2c2>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044a4:	d003      	beq.n	80044ae <HAL_DMA_Init+0x2c2>
 80044a6:	21c6      	movs	r1, #198	; 0xc6
 80044a8:	485b      	ldr	r0, [pc, #364]	; (8004618 <HAL_DMA_Init+0x42c>)
 80044aa:	f7fd ff80 	bl	80023ae <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d012      	beq.n	80044dc <HAL_DMA_Init+0x2f0>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044be:	d00d      	beq.n	80044dc <HAL_DMA_Init+0x2f0>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044c8:	d008      	beq.n	80044dc <HAL_DMA_Init+0x2f0>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80044d2:	d003      	beq.n	80044dc <HAL_DMA_Init+0x2f0>
 80044d4:	21c7      	movs	r1, #199	; 0xc7
 80044d6:	4850      	ldr	r0, [pc, #320]	; (8004618 <HAL_DMA_Init+0x42c>)
 80044d8:	f7fd ff69 	bl	80023ae <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0201 	bic.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044fc:	e00f      	b.n	800451e <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044fe:	f7fe fe19 	bl	8003134 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b05      	cmp	r3, #5
 800450a:	d908      	bls.n	800451e <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2203      	movs	r2, #3
 8004516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e078      	b.n	8004610 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e8      	bne.n	80044fe <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4b39      	ldr	r3, [pc, #228]	; (800461c <HAL_DMA_Init+0x430>)
 8004538:	4013      	ands	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800454a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004556:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004562:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	2b04      	cmp	r3, #4
 8004576:	d107      	bne.n	8004588 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	4313      	orrs	r3, r2
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f023 0307 	bic.w	r3, r3, #7
 800459e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d117      	bne.n	80045e2 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00e      	beq.n	80045e2 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fb1f 	bl	8004c08 <DMA_CheckFifoParam>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d008      	beq.n	80045e2 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2240      	movs	r2, #64	; 0x40
 80045d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80045de:	2301      	movs	r3, #1
 80045e0:	e016      	b.n	8004610 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fad6 	bl	8004b9c <DMA_CalcBaseAndBitshift>
 80045f0:	4603      	mov	r3, r0
 80045f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f8:	223f      	movs	r2, #63	; 0x3f
 80045fa:	409a      	lsls	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	0800ede4 	.word	0x0800ede4
 800461c:	f010803f 	.word	0xf010803f

08004620 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004636:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_DMA_Start_IT+0x26>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004644:	d304      	bcc.n	8004650 <HAL_DMA_Start_IT+0x30>
 8004646:	f240 11cb 	movw	r1, #459	; 0x1cb
 800464a:	4827      	ldr	r0, [pc, #156]	; (80046e8 <HAL_DMA_Start_IT+0xc8>)
 800464c:	f7fd feaf 	bl	80023ae <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_DMA_Start_IT+0x3e>
 800465a:	2302      	movs	r3, #2
 800465c:	e040      	b.n	80046e0 <HAL_DMA_Start_IT+0xc0>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b01      	cmp	r3, #1
 8004670:	d12f      	bne.n	80046d2 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2202      	movs	r2, #2
 8004676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	68b9      	ldr	r1, [r7, #8]
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 fa5a 	bl	8004b40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004690:	223f      	movs	r2, #63	; 0x3f
 8004692:	409a      	lsls	r2, r3
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0216 	orr.w	r2, r2, #22
 80046a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0208 	orr.w	r2, r2, #8
 80046be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	e005      	b.n	80046de <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046da:	2302      	movs	r3, #2
 80046dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046de:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	0800ede4 	.word	0x0800ede4

080046ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046fa:	f7fe fd1b 	bl	8003134 <HAL_GetTick>
 80046fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d008      	beq.n	800471e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2280      	movs	r2, #128	; 0x80
 8004710:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e052      	b.n	80047c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0216 	bic.w	r2, r2, #22
 800472c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695a      	ldr	r2, [r3, #20]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800473c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d103      	bne.n	800474e <HAL_DMA_Abort+0x62>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800474a:	2b00      	cmp	r3, #0
 800474c:	d007      	beq.n	800475e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0208 	bic.w	r2, r2, #8
 800475c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0201 	bic.w	r2, r2, #1
 800476c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800476e:	e013      	b.n	8004798 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004770:	f7fe fce0 	bl	8003134 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b05      	cmp	r3, #5
 800477c:	d90c      	bls.n	8004798 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2203      	movs	r2, #3
 8004788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e015      	b.n	80047c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1e4      	bne.n	8004770 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047aa:	223f      	movs	r2, #63	; 0x3f
 80047ac:	409a      	lsls	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d004      	beq.n	80047ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2280      	movs	r2, #128	; 0x80
 80047e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e00c      	b.n	8004804 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2205      	movs	r2, #5
 80047ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0201 	bic.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800481c:	4b8e      	ldr	r3, [pc, #568]	; (8004a58 <HAL_DMA_IRQHandler+0x248>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a8e      	ldr	r2, [pc, #568]	; (8004a5c <HAL_DMA_IRQHandler+0x24c>)
 8004822:	fba2 2303 	umull	r2, r3, r2, r3
 8004826:	0a9b      	lsrs	r3, r3, #10
 8004828:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483a:	2208      	movs	r2, #8
 800483c:	409a      	lsls	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4013      	ands	r3, r2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01a      	beq.n	800487c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d013      	beq.n	800487c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0204 	bic.w	r2, r2, #4
 8004862:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004868:	2208      	movs	r2, #8
 800486a:	409a      	lsls	r2, r3
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004874:	f043 0201 	orr.w	r2, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004880:	2201      	movs	r2, #1
 8004882:	409a      	lsls	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4013      	ands	r3, r2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d012      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00b      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489e:	2201      	movs	r2, #1
 80048a0:	409a      	lsls	r2, r3
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048aa:	f043 0202 	orr.w	r2, r3, #2
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b6:	2204      	movs	r2, #4
 80048b8:	409a      	lsls	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4013      	ands	r3, r2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d012      	beq.n	80048e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d4:	2204      	movs	r2, #4
 80048d6:	409a      	lsls	r2, r3
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e0:	f043 0204 	orr.w	r2, r3, #4
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ec:	2210      	movs	r2, #16
 80048ee:	409a      	lsls	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4013      	ands	r3, r2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d043      	beq.n	8004980 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d03c      	beq.n	8004980 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490a:	2210      	movs	r2, #16
 800490c:	409a      	lsls	r2, r3
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d018      	beq.n	8004952 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d108      	bne.n	8004940 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d024      	beq.n	8004980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	4798      	blx	r3
 800493e:	e01f      	b.n	8004980 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004944:	2b00      	cmp	r3, #0
 8004946:	d01b      	beq.n	8004980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	4798      	blx	r3
 8004950:	e016      	b.n	8004980 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495c:	2b00      	cmp	r3, #0
 800495e:	d107      	bne.n	8004970 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0208 	bic.w	r2, r2, #8
 800496e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004984:	2220      	movs	r2, #32
 8004986:	409a      	lsls	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4013      	ands	r3, r2
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 808f 	beq.w	8004ab0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 8087 	beq.w	8004ab0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a6:	2220      	movs	r2, #32
 80049a8:	409a      	lsls	r2, r3
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b05      	cmp	r3, #5
 80049b8:	d136      	bne.n	8004a28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0216 	bic.w	r2, r2, #22
 80049c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695a      	ldr	r2, [r3, #20]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d103      	bne.n	80049ea <HAL_DMA_IRQHandler+0x1da>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d007      	beq.n	80049fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0208 	bic.w	r2, r2, #8
 80049f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049fe:	223f      	movs	r2, #63	; 0x3f
 8004a00:	409a      	lsls	r2, r3
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d07e      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	4798      	blx	r3
        }
        return;
 8004a26:	e079      	b.n	8004b1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d01d      	beq.n	8004a72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10d      	bne.n	8004a60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d031      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	4798      	blx	r3
 8004a54:	e02c      	b.n	8004ab0 <HAL_DMA_IRQHandler+0x2a0>
 8004a56:	bf00      	nop
 8004a58:	20000004 	.word	0x20000004
 8004a5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d023      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	4798      	blx	r3
 8004a70:	e01e      	b.n	8004ab0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10f      	bne.n	8004aa0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0210 	bic.w	r2, r2, #16
 8004a8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d032      	beq.n	8004b1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d022      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2205      	movs	r2, #5
 8004ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0201 	bic.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d307      	bcc.n	8004af8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f2      	bne.n	8004adc <HAL_DMA_IRQHandler+0x2cc>
 8004af6:	e000      	b.n	8004afa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004af8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d005      	beq.n	8004b1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	4798      	blx	r3
 8004b1a:	e000      	b.n	8004b1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b1c:	bf00      	nop
    }
  }
}
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b32:	b2db      	uxtb	r3, r3
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b40      	cmp	r3, #64	; 0x40
 8004b6c:	d108      	bne.n	8004b80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b7e:	e007      	b.n	8004b90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	60da      	str	r2, [r3, #12]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	3b10      	subs	r3, #16
 8004bac:	4a14      	ldr	r2, [pc, #80]	; (8004c00 <DMA_CalcBaseAndBitshift+0x64>)
 8004bae:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb2:	091b      	lsrs	r3, r3, #4
 8004bb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004bb6:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <DMA_CalcBaseAndBitshift+0x68>)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4413      	add	r3, r2
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d909      	bls.n	8004bde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bd2:	f023 0303 	bic.w	r3, r3, #3
 8004bd6:	1d1a      	adds	r2, r3, #4
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	659a      	str	r2, [r3, #88]	; 0x58
 8004bdc:	e007      	b.n	8004bee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004be6:	f023 0303 	bic.w	r3, r3, #3
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	aaaaaaab 	.word	0xaaaaaaab
 8004c04:	0800f3dc 	.word	0x0800f3dc

08004c08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d11f      	bne.n	8004c62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d856      	bhi.n	8004cd6 <DMA_CheckFifoParam+0xce>
 8004c28:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <DMA_CheckFifoParam+0x28>)
 8004c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2e:	bf00      	nop
 8004c30:	08004c41 	.word	0x08004c41
 8004c34:	08004c53 	.word	0x08004c53
 8004c38:	08004c41 	.word	0x08004c41
 8004c3c:	08004cd7 	.word	0x08004cd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d046      	beq.n	8004cda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c50:	e043      	b.n	8004cda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c5a:	d140      	bne.n	8004cde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c60:	e03d      	b.n	8004cde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c6a:	d121      	bne.n	8004cb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d837      	bhi.n	8004ce2 <DMA_CheckFifoParam+0xda>
 8004c72:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <DMA_CheckFifoParam+0x70>)
 8004c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c78:	08004c89 	.word	0x08004c89
 8004c7c:	08004c8f 	.word	0x08004c8f
 8004c80:	08004c89 	.word	0x08004c89
 8004c84:	08004ca1 	.word	0x08004ca1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c8c:	e030      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d025      	beq.n	8004ce6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c9e:	e022      	b.n	8004ce6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ca8:	d11f      	bne.n	8004cea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004cae:	e01c      	b.n	8004cea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d903      	bls.n	8004cbe <DMA_CheckFifoParam+0xb6>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	d003      	beq.n	8004cc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004cbc:	e018      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc2:	e015      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00e      	beq.n	8004cee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd4:	e00b      	b.n	8004cee <DMA_CheckFifoParam+0xe6>
      break;
 8004cd6:	bf00      	nop
 8004cd8:	e00a      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cda:	bf00      	nop
 8004cdc:	e008      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cde:	bf00      	nop
 8004ce0:	e006      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8004ce2:	bf00      	nop
 8004ce4:	e004      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8004ce6:	bf00      	nop
 8004ce8:	e002      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004cea:	bf00      	nop
 8004cec:	e000      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cee:	bf00      	nop
    }
  } 
  
  return status; 
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop

08004d00 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004d0a:	4b4b      	ldr	r3, [pc, #300]	; (8004e38 <HAL_FLASH_IRQHandler+0x138>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d020      	beq.n	8004d58 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8004d16:	4b49      	ldr	r3, [pc, #292]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d107      	bne.n	8004d30 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8004d20:	4b46      	ldr	r3, [pc, #280]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8004d26:	4b45      	ldr	r3, [pc, #276]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004d28:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2c:	60da      	str	r2, [r3, #12]
 8004d2e:	e00b      	b.n	8004d48 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8004d30:	4b42      	ldr	r3, [pc, #264]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d103      	bne.n	8004d42 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8004d3a:	4b40      	ldr	r3, [pc, #256]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	607b      	str	r3, [r7, #4]
 8004d40:	e002      	b.n	8004d48 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8004d42:	4b3e      	ldr	r3, [pc, #248]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8004d48:	f000 f88e 	bl	8004e68 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f881 	bl	8004e54 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004d52:	4b3a      	ldr	r3, [pc, #232]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004d58:	4b37      	ldr	r3, [pc, #220]	; (8004e38 <HAL_FLASH_IRQHandler+0x138>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d04a      	beq.n	8004dfa <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004d64:	4b34      	ldr	r3, [pc, #208]	; (8004e38 <HAL_FLASH_IRQHandler+0x138>)
 8004d66:	2201      	movs	r2, #1
 8004d68:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8004d6a:	4b34      	ldr	r3, [pc, #208]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d12d      	bne.n	8004dd0 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8004d74:	4b31      	ldr	r3, [pc, #196]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	4a30      	ldr	r2, [pc, #192]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004d7c:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8004d7e:	4b2f      	ldr	r3, [pc, #188]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d015      	beq.n	8004db2 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8004d86:	4b2d      	ldr	r3, [pc, #180]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f857 	bl	8004e40 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8004d92:	4b2a      	ldr	r3, [pc, #168]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	3301      	adds	r3, #1
 8004d98:	4a28      	ldr	r2, [pc, #160]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004d9a:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8004d9c:	4b27      	ldr	r3, [pc, #156]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8004da2:	4b26      	ldr	r3, [pc, #152]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004da4:	7a1b      	ldrb	r3, [r3, #8]
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	4619      	mov	r1, r3
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f8c2 	bl	8004f34 <FLASH_Erase_Sector>
 8004db0:	e023      	b.n	8004dfa <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8004db2:	f04f 33ff 	mov.w	r3, #4294967295
 8004db6:	607b      	str	r3, [r7, #4]
 8004db8:	4a20      	ldr	r2, [pc, #128]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004dbe:	4b1f      	ldr	r3, [pc, #124]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8004dc4:	f000 f92c 	bl	8005020 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f839 	bl	8004e40 <HAL_FLASH_EndOfOperationCallback>
 8004dce:	e014      	b.n	8004dfa <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8004dd0:	4b1a      	ldr	r3, [pc, #104]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d107      	bne.n	8004dea <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8004dda:	f000 f921 	bl	8005020 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8004dde:	4b17      	ldr	r3, [pc, #92]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 f82c 	bl	8004e40 <HAL_FLASH_EndOfOperationCallback>
 8004de8:	e004      	b.n	8004df4 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8004dea:	4b14      	ldr	r3, [pc, #80]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 f826 	bl	8004e40 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004df4:	4b11      	ldr	r3, [pc, #68]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8004dfa:	4b10      	ldr	r3, [pc, #64]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d114      	bne.n	8004e2e <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8004e04:	4b0c      	ldr	r3, [pc, #48]	; (8004e38 <HAL_FLASH_IRQHandler+0x138>)
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	4a0b      	ldr	r2, [pc, #44]	; (8004e38 <HAL_FLASH_IRQHandler+0x138>)
 8004e0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e0e:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8004e10:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <HAL_FLASH_IRQHandler+0x138>)
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <HAL_FLASH_IRQHandler+0x138>)
 8004e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e1a:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8004e1c:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <HAL_FLASH_IRQHandler+0x138>)
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	4a05      	ldr	r2, [pc, #20]	; (8004e38 <HAL_FLASH_IRQHandler+0x138>)
 8004e22:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004e26:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004e28:	4b04      	ldr	r3, [pc, #16]	; (8004e3c <HAL_FLASH_IRQHandler+0x13c>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	761a      	strb	r2, [r3, #24]
  }
}
 8004e2e:	bf00      	nop
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	40023c00 	.word	0x40023c00
 8004e3c:	20000904 	.word	0x20000904

08004e40 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004e6c:	4b2f      	ldr	r3, [pc, #188]	; (8004f2c <FLASH_SetErrorCode+0xc4>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f003 0310 	and.w	r3, r3, #16
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d008      	beq.n	8004e8a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004e78:	4b2d      	ldr	r3, [pc, #180]	; (8004f30 <FLASH_SetErrorCode+0xc8>)
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	f043 0310 	orr.w	r3, r3, #16
 8004e80:	4a2b      	ldr	r2, [pc, #172]	; (8004f30 <FLASH_SetErrorCode+0xc8>)
 8004e82:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004e84:	4b29      	ldr	r3, [pc, #164]	; (8004f2c <FLASH_SetErrorCode+0xc4>)
 8004e86:	2210      	movs	r2, #16
 8004e88:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004e8a:	4b28      	ldr	r3, [pc, #160]	; (8004f2c <FLASH_SetErrorCode+0xc4>)
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d008      	beq.n	8004ea8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004e96:	4b26      	ldr	r3, [pc, #152]	; (8004f30 <FLASH_SetErrorCode+0xc8>)
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	f043 0308 	orr.w	r3, r3, #8
 8004e9e:	4a24      	ldr	r2, [pc, #144]	; (8004f30 <FLASH_SetErrorCode+0xc8>)
 8004ea0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004ea2:	4b22      	ldr	r3, [pc, #136]	; (8004f2c <FLASH_SetErrorCode+0xc4>)
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004ea8:	4b20      	ldr	r3, [pc, #128]	; (8004f2c <FLASH_SetErrorCode+0xc4>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d008      	beq.n	8004ec6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004eb4:	4b1e      	ldr	r3, [pc, #120]	; (8004f30 <FLASH_SetErrorCode+0xc8>)
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	f043 0304 	orr.w	r3, r3, #4
 8004ebc:	4a1c      	ldr	r2, [pc, #112]	; (8004f30 <FLASH_SetErrorCode+0xc8>)
 8004ebe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004ec0:	4b1a      	ldr	r3, [pc, #104]	; (8004f2c <FLASH_SetErrorCode+0xc4>)
 8004ec2:	2240      	movs	r2, #64	; 0x40
 8004ec4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004ec6:	4b19      	ldr	r3, [pc, #100]	; (8004f2c <FLASH_SetErrorCode+0xc4>)
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d008      	beq.n	8004ee4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004ed2:	4b17      	ldr	r3, [pc, #92]	; (8004f30 <FLASH_SetErrorCode+0xc8>)
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f043 0302 	orr.w	r3, r3, #2
 8004eda:	4a15      	ldr	r2, [pc, #84]	; (8004f30 <FLASH_SetErrorCode+0xc8>)
 8004edc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004ede:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <FLASH_SetErrorCode+0xc4>)
 8004ee0:	2280      	movs	r2, #128	; 0x80
 8004ee2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004ee4:	4b11      	ldr	r3, [pc, #68]	; (8004f2c <FLASH_SetErrorCode+0xc4>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d009      	beq.n	8004f04 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004ef0:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <FLASH_SetErrorCode+0xc8>)
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	4a0d      	ldr	r2, [pc, #52]	; (8004f30 <FLASH_SetErrorCode+0xc8>)
 8004efa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004efc:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <FLASH_SetErrorCode+0xc4>)
 8004efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f02:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004f04:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <FLASH_SetErrorCode+0xc4>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d008      	beq.n	8004f22 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004f10:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <FLASH_SetErrorCode+0xc8>)
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	f043 0320 	orr.w	r3, r3, #32
 8004f18:	4a05      	ldr	r2, [pc, #20]	; (8004f30 <FLASH_SetErrorCode+0xc8>)
 8004f1a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004f1c:	4b03      	ldr	r3, [pc, #12]	; (8004f2c <FLASH_SetErrorCode+0xc4>)
 8004f1e:	2202      	movs	r2, #2
 8004f20:	60da      	str	r2, [r3, #12]
  }
}
 8004f22:	bf00      	nop
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	40023c00 	.word	0x40023c00
 8004f30:	20000904 	.word	0x20000904

08004f34 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d019      	beq.n	8004f7e <FLASH_Erase_Sector+0x4a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d016      	beq.n	8004f7e <FLASH_Erase_Sector+0x4a>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d013      	beq.n	8004f7e <FLASH_Erase_Sector+0x4a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d010      	beq.n	8004f7e <FLASH_Erase_Sector+0x4a>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d00d      	beq.n	8004f7e <FLASH_Erase_Sector+0x4a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b05      	cmp	r3, #5
 8004f66:	d00a      	beq.n	8004f7e <FLASH_Erase_Sector+0x4a>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b06      	cmp	r3, #6
 8004f6c:	d007      	beq.n	8004f7e <FLASH_Erase_Sector+0x4a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b07      	cmp	r3, #7
 8004f72:	d004      	beq.n	8004f7e <FLASH_Erase_Sector+0x4a>
 8004f74:	f240 31d9 	movw	r1, #985	; 0x3d9
 8004f78:	4827      	ldr	r0, [pc, #156]	; (8005018 <FLASH_Erase_Sector+0xe4>)
 8004f7a:	f7fd fa18 	bl	80023ae <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8004f7e:	78fb      	ldrb	r3, [r7, #3]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00d      	beq.n	8004fa0 <FLASH_Erase_Sector+0x6c>
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d00a      	beq.n	8004fa0 <FLASH_Erase_Sector+0x6c>
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d007      	beq.n	8004fa0 <FLASH_Erase_Sector+0x6c>
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d004      	beq.n	8004fa0 <FLASH_Erase_Sector+0x6c>
 8004f96:	f240 31da 	movw	r1, #986	; 0x3da
 8004f9a:	481f      	ldr	r0, [pc, #124]	; (8005018 <FLASH_Erase_Sector+0xe4>)
 8004f9c:	f7fd fa07 	bl	80023ae <assert_failed>

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d102      	bne.n	8004fac <FLASH_Erase_Sector+0x78>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	e010      	b.n	8004fce <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004fac:	78fb      	ldrb	r3, [r7, #3]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d103      	bne.n	8004fba <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	e009      	b.n	8004fce <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004fba:	78fb      	ldrb	r3, [r7, #3]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d103      	bne.n	8004fc8 <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	e002      	b.n	8004fce <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004fc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004fcc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <FLASH_Erase_Sector+0xe8>)
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	4a12      	ldr	r2, [pc, #72]	; (800501c <FLASH_Erase_Sector+0xe8>)
 8004fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004fda:	4b10      	ldr	r3, [pc, #64]	; (800501c <FLASH_Erase_Sector+0xe8>)
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	490f      	ldr	r1, [pc, #60]	; (800501c <FLASH_Erase_Sector+0xe8>)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004fe6:	4b0d      	ldr	r3, [pc, #52]	; (800501c <FLASH_Erase_Sector+0xe8>)
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	4a0c      	ldr	r2, [pc, #48]	; (800501c <FLASH_Erase_Sector+0xe8>)
 8004fec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004ff0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004ff2:	4b0a      	ldr	r3, [pc, #40]	; (800501c <FLASH_Erase_Sector+0xe8>)
 8004ff4:	691a      	ldr	r2, [r3, #16]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	4a07      	ldr	r2, [pc, #28]	; (800501c <FLASH_Erase_Sector+0xe8>)
 8004ffe:	f043 0302 	orr.w	r3, r3, #2
 8005002:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005004:	4b05      	ldr	r3, [pc, #20]	; (800501c <FLASH_Erase_Sector+0xe8>)
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	4a04      	ldr	r2, [pc, #16]	; (800501c <FLASH_Erase_Sector+0xe8>)
 800500a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800500e:	6113      	str	r3, [r2, #16]
}
 8005010:	bf00      	nop
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	0800ee58 	.word	0x0800ee58
 800501c:	40023c00 	.word	0x40023c00

08005020 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005024:	4b20      	ldr	r3, [pc, #128]	; (80050a8 <FLASH_FlushCaches+0x88>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800502c:	2b00      	cmp	r3, #0
 800502e:	d017      	beq.n	8005060 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005030:	4b1d      	ldr	r3, [pc, #116]	; (80050a8 <FLASH_FlushCaches+0x88>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1c      	ldr	r2, [pc, #112]	; (80050a8 <FLASH_FlushCaches+0x88>)
 8005036:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800503a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800503c:	4b1a      	ldr	r3, [pc, #104]	; (80050a8 <FLASH_FlushCaches+0x88>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a19      	ldr	r2, [pc, #100]	; (80050a8 <FLASH_FlushCaches+0x88>)
 8005042:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	4b17      	ldr	r3, [pc, #92]	; (80050a8 <FLASH_FlushCaches+0x88>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a16      	ldr	r2, [pc, #88]	; (80050a8 <FLASH_FlushCaches+0x88>)
 800504e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005052:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005054:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <FLASH_FlushCaches+0x88>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a13      	ldr	r2, [pc, #76]	; (80050a8 <FLASH_FlushCaches+0x88>)
 800505a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800505e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005060:	4b11      	ldr	r3, [pc, #68]	; (80050a8 <FLASH_FlushCaches+0x88>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005068:	2b00      	cmp	r3, #0
 800506a:	d017      	beq.n	800509c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800506c:	4b0e      	ldr	r3, [pc, #56]	; (80050a8 <FLASH_FlushCaches+0x88>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a0d      	ldr	r2, [pc, #52]	; (80050a8 <FLASH_FlushCaches+0x88>)
 8005072:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005076:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005078:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <FLASH_FlushCaches+0x88>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a0a      	ldr	r2, [pc, #40]	; (80050a8 <FLASH_FlushCaches+0x88>)
 800507e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	4b08      	ldr	r3, [pc, #32]	; (80050a8 <FLASH_FlushCaches+0x88>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a07      	ldr	r2, [pc, #28]	; (80050a8 <FLASH_FlushCaches+0x88>)
 800508a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800508e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <FLASH_FlushCaches+0x88>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a04      	ldr	r2, [pc, #16]	; (80050a8 <FLASH_FlushCaches+0x88>)
 8005096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800509a:	6013      	str	r3, [r2, #0]
  }
}
 800509c:	bf00      	nop
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40023c00 	.word	0x40023c00

080050ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b088      	sub	sp, #32
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050be:	2300      	movs	r3, #0
 80050c0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a33      	ldr	r2, [pc, #204]	; (8005194 <HAL_GPIO_Init+0xe8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d017      	beq.n	80050fa <HAL_GPIO_Init+0x4e>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a32      	ldr	r2, [pc, #200]	; (8005198 <HAL_GPIO_Init+0xec>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d013      	beq.n	80050fa <HAL_GPIO_Init+0x4e>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a31      	ldr	r2, [pc, #196]	; (800519c <HAL_GPIO_Init+0xf0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00f      	beq.n	80050fa <HAL_GPIO_Init+0x4e>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a30      	ldr	r2, [pc, #192]	; (80051a0 <HAL_GPIO_Init+0xf4>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00b      	beq.n	80050fa <HAL_GPIO_Init+0x4e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a2f      	ldr	r2, [pc, #188]	; (80051a4 <HAL_GPIO_Init+0xf8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d007      	beq.n	80050fa <HAL_GPIO_Init+0x4e>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a2e      	ldr	r2, [pc, #184]	; (80051a8 <HAL_GPIO_Init+0xfc>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d003      	beq.n	80050fa <HAL_GPIO_Init+0x4e>
 80050f2:	21ac      	movs	r1, #172	; 0xac
 80050f4:	482d      	ldr	r0, [pc, #180]	; (80051ac <HAL_GPIO_Init+0x100>)
 80050f6:	f7fd f95a 	bl	80023ae <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	b29b      	uxth	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d005      	beq.n	8005110 <HAL_GPIO_Init+0x64>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	0c1b      	lsrs	r3, r3, #16
 800510a:	041b      	lsls	r3, r3, #16
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_GPIO_Init+0x6c>
 8005110:	21ad      	movs	r1, #173	; 0xad
 8005112:	4826      	ldr	r0, [pc, #152]	; (80051ac <HAL_GPIO_Init+0x100>)
 8005114:	f7fd f94b 	bl	80023ae <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d035      	beq.n	800518c <HAL_GPIO_Init+0xe0>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d031      	beq.n	800518c <HAL_GPIO_Init+0xe0>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b11      	cmp	r3, #17
 800512e:	d02d      	beq.n	800518c <HAL_GPIO_Init+0xe0>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b02      	cmp	r3, #2
 8005136:	d029      	beq.n	800518c <HAL_GPIO_Init+0xe0>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b12      	cmp	r3, #18
 800513e:	d025      	beq.n	800518c <HAL_GPIO_Init+0xe0>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005148:	d020      	beq.n	800518c <HAL_GPIO_Init+0xe0>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005152:	d01b      	beq.n	800518c <HAL_GPIO_Init+0xe0>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800515c:	d016      	beq.n	800518c <HAL_GPIO_Init+0xe0>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8005166:	d011      	beq.n	800518c <HAL_GPIO_Init+0xe0>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8005170:	d00c      	beq.n	800518c <HAL_GPIO_Init+0xe0>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800517a:	d007      	beq.n	800518c <HAL_GPIO_Init+0xe0>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b03      	cmp	r3, #3
 8005182:	d003      	beq.n	800518c <HAL_GPIO_Init+0xe0>
 8005184:	21ae      	movs	r1, #174	; 0xae
 8005186:	4809      	ldr	r0, [pc, #36]	; (80051ac <HAL_GPIO_Init+0x100>)
 8005188:	f7fd f911 	bl	80023ae <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800518c:	2300      	movs	r3, #0
 800518e:	61fb      	str	r3, [r7, #28]
 8005190:	e20c      	b.n	80055ac <HAL_GPIO_Init+0x500>
 8005192:	bf00      	nop
 8005194:	40020000 	.word	0x40020000
 8005198:	40020400 	.word	0x40020400
 800519c:	40020800 	.word	0x40020800
 80051a0:	40020c00 	.word	0x40020c00
 80051a4:	40021000 	.word	0x40021000
 80051a8:	40021c00 	.word	0x40021c00
 80051ac:	0800eed0 	.word	0x0800eed0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051b0:	2201      	movs	r2, #1
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	fa02 f303 	lsl.w	r3, r2, r3
 80051b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4013      	ands	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	f040 81ec 	bne.w	80055a6 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d005      	beq.n	80051e6 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d144      	bne.n	8005270 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00f      	beq.n	800520e <HAL_GPIO_Init+0x162>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d00b      	beq.n	800520e <HAL_GPIO_Init+0x162>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d007      	beq.n	800520e <HAL_GPIO_Init+0x162>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	2b03      	cmp	r3, #3
 8005204:	d003      	beq.n	800520e <HAL_GPIO_Init+0x162>
 8005206:	21c0      	movs	r1, #192	; 0xc0
 8005208:	4884      	ldr	r0, [pc, #528]	; (800541c <HAL_GPIO_Init+0x370>)
 800520a:	f7fd f8d0 	bl	80023ae <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	2203      	movs	r2, #3
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	43db      	mvns	r3, r3
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	4013      	ands	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	4313      	orrs	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005244:	2201      	movs	r2, #1
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	43db      	mvns	r3, r3
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	4013      	ands	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	091b      	lsrs	r3, r3, #4
 800525a:	f003 0201 	and.w	r2, r3, #1
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	4313      	orrs	r3, r2
 8005268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f003 0303 	and.w	r3, r3, #3
 8005278:	2b03      	cmp	r3, #3
 800527a:	d027      	beq.n	80052cc <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00b      	beq.n	800529c <HAL_GPIO_Init+0x1f0>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d007      	beq.n	800529c <HAL_GPIO_Init+0x1f0>
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b02      	cmp	r3, #2
 8005292:	d003      	beq.n	800529c <HAL_GPIO_Init+0x1f0>
 8005294:	21d1      	movs	r1, #209	; 0xd1
 8005296:	4861      	ldr	r0, [pc, #388]	; (800541c <HAL_GPIO_Init+0x370>)
 8005298:	f7fd f889 	bl	80023ae <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	2203      	movs	r2, #3
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	43db      	mvns	r3, r3
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	4013      	ands	r3, r2
 80052b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f003 0303 	and.w	r3, r3, #3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	f040 80a3 	bne.w	8005420 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d077      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	2b09      	cmp	r3, #9
 80052e8:	d073      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d06f      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d06b      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d067      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d063      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d05f      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d05b      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	2b02      	cmp	r3, #2
 8005320:	d057      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d053      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d04f      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	2b04      	cmp	r3, #4
 8005338:	d04b      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2b04      	cmp	r3, #4
 8005340:	d047      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b04      	cmp	r3, #4
 8005348:	d043      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	2b05      	cmp	r3, #5
 8005350:	d03f      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	2b05      	cmp	r3, #5
 8005358:	d03b      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b05      	cmp	r3, #5
 8005360:	d037      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	2b06      	cmp	r3, #6
 8005368:	d033      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	2b06      	cmp	r3, #6
 8005370:	d02f      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	2b05      	cmp	r3, #5
 8005378:	d02b      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	2b06      	cmp	r3, #6
 8005380:	d027      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	2b07      	cmp	r3, #7
 8005388:	d023      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b07      	cmp	r3, #7
 8005390:	d01f      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	2b07      	cmp	r3, #7
 8005398:	d01b      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d017      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	2b0a      	cmp	r3, #10
 80053a8:	d013      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	2b09      	cmp	r3, #9
 80053b0:	d00f      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	2b09      	cmp	r3, #9
 80053b8:	d00b      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b0c      	cmp	r3, #12
 80053c0:	d007      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b0f      	cmp	r3, #15
 80053c8:	d003      	beq.n	80053d2 <HAL_GPIO_Init+0x326>
 80053ca:	21de      	movs	r1, #222	; 0xde
 80053cc:	4813      	ldr	r0, [pc, #76]	; (800541c <HAL_GPIO_Init+0x370>)
 80053ce:	f7fc ffee 	bl	80023ae <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	08da      	lsrs	r2, r3, #3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3208      	adds	r2, #8
 80053da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	220f      	movs	r2, #15
 80053ea:	fa02 f303 	lsl.w	r3, r2, r3
 80053ee:	43db      	mvns	r3, r3
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	4013      	ands	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	691a      	ldr	r2, [r3, #16]
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	fa02 f303 	lsl.w	r3, r2, r3
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	4313      	orrs	r3, r2
 800540a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	08da      	lsrs	r2, r3, #3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3208      	adds	r2, #8
 8005414:	69b9      	ldr	r1, [r7, #24]
 8005416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800541a:	e001      	b.n	8005420 <HAL_GPIO_Init+0x374>
 800541c:	0800eed0 	.word	0x0800eed0
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	2203      	movs	r2, #3
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	43db      	mvns	r3, r3
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	4013      	ands	r3, r2
 8005436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f003 0203 	and.w	r2, r3, #3
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	4313      	orrs	r3, r2
 800544c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 80a2 	beq.w	80055a6 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005462:	2300      	movs	r3, #0
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	4b56      	ldr	r3, [pc, #344]	; (80055c0 <HAL_GPIO_Init+0x514>)
 8005468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546a:	4a55      	ldr	r2, [pc, #340]	; (80055c0 <HAL_GPIO_Init+0x514>)
 800546c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005470:	6453      	str	r3, [r2, #68]	; 0x44
 8005472:	4b53      	ldr	r3, [pc, #332]	; (80055c0 <HAL_GPIO_Init+0x514>)
 8005474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800547e:	4a51      	ldr	r2, [pc, #324]	; (80055c4 <HAL_GPIO_Init+0x518>)
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	089b      	lsrs	r3, r3, #2
 8005484:	3302      	adds	r3, #2
 8005486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800548a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	220f      	movs	r2, #15
 8005496:	fa02 f303 	lsl.w	r3, r2, r3
 800549a:	43db      	mvns	r3, r3
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	4013      	ands	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a48      	ldr	r2, [pc, #288]	; (80055c8 <HAL_GPIO_Init+0x51c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d019      	beq.n	80054de <HAL_GPIO_Init+0x432>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a47      	ldr	r2, [pc, #284]	; (80055cc <HAL_GPIO_Init+0x520>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d013      	beq.n	80054da <HAL_GPIO_Init+0x42e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a46      	ldr	r2, [pc, #280]	; (80055d0 <HAL_GPIO_Init+0x524>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00d      	beq.n	80054d6 <HAL_GPIO_Init+0x42a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a45      	ldr	r2, [pc, #276]	; (80055d4 <HAL_GPIO_Init+0x528>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d007      	beq.n	80054d2 <HAL_GPIO_Init+0x426>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a44      	ldr	r2, [pc, #272]	; (80055d8 <HAL_GPIO_Init+0x52c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d101      	bne.n	80054ce <HAL_GPIO_Init+0x422>
 80054ca:	2304      	movs	r3, #4
 80054cc:	e008      	b.n	80054e0 <HAL_GPIO_Init+0x434>
 80054ce:	2307      	movs	r3, #7
 80054d0:	e006      	b.n	80054e0 <HAL_GPIO_Init+0x434>
 80054d2:	2303      	movs	r3, #3
 80054d4:	e004      	b.n	80054e0 <HAL_GPIO_Init+0x434>
 80054d6:	2302      	movs	r3, #2
 80054d8:	e002      	b.n	80054e0 <HAL_GPIO_Init+0x434>
 80054da:	2301      	movs	r3, #1
 80054dc:	e000      	b.n	80054e0 <HAL_GPIO_Init+0x434>
 80054de:	2300      	movs	r3, #0
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	f002 0203 	and.w	r2, r2, #3
 80054e6:	0092      	lsls	r2, r2, #2
 80054e8:	4093      	lsls	r3, r2
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054f0:	4934      	ldr	r1, [pc, #208]	; (80055c4 <HAL_GPIO_Init+0x518>)
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	089b      	lsrs	r3, r3, #2
 80054f6:	3302      	adds	r3, #2
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054fe:	4b37      	ldr	r3, [pc, #220]	; (80055dc <HAL_GPIO_Init+0x530>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	43db      	mvns	r3, r3
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	4013      	ands	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005522:	4a2e      	ldr	r2, [pc, #184]	; (80055dc <HAL_GPIO_Init+0x530>)
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005528:	4b2c      	ldr	r3, [pc, #176]	; (80055dc <HAL_GPIO_Init+0x530>)
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	43db      	mvns	r3, r3
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	4013      	ands	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800554c:	4a23      	ldr	r2, [pc, #140]	; (80055dc <HAL_GPIO_Init+0x530>)
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005552:	4b22      	ldr	r3, [pc, #136]	; (80055dc <HAL_GPIO_Init+0x530>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	43db      	mvns	r3, r3
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	4013      	ands	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005576:	4a19      	ldr	r2, [pc, #100]	; (80055dc <HAL_GPIO_Init+0x530>)
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800557c:	4b17      	ldr	r3, [pc, #92]	; (80055dc <HAL_GPIO_Init+0x530>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	43db      	mvns	r3, r3
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	4013      	ands	r3, r2
 800558a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	4313      	orrs	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055a0:	4a0e      	ldr	r2, [pc, #56]	; (80055dc <HAL_GPIO_Init+0x530>)
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	3301      	adds	r3, #1
 80055aa:	61fb      	str	r3, [r7, #28]
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	2b0f      	cmp	r3, #15
 80055b0:	f67f adfe 	bls.w	80051b0 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop
 80055b8:	3720      	adds	r7, #32
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	40023800 	.word	0x40023800
 80055c4:	40013800 	.word	0x40013800
 80055c8:	40020000 	.word	0x40020000
 80055cc:	40020400 	.word	0x40020400
 80055d0:	40020800 	.word	0x40020800
 80055d4:	40020c00 	.word	0x40020c00
 80055d8:	40021000 	.word	0x40021000
 80055dc:	40013c00 	.word	0x40013c00

080055e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	807b      	strh	r3, [r7, #2]
 80055ec:	4613      	mov	r3, r2
 80055ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80055f0:	887b      	ldrh	r3, [r7, #2]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d004      	beq.n	8005600 <HAL_GPIO_WritePin+0x20>
 80055f6:	887b      	ldrh	r3, [r7, #2]
 80055f8:	0c1b      	lsrs	r3, r3, #16
 80055fa:	041b      	lsls	r3, r3, #16
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d004      	beq.n	800560a <HAL_GPIO_WritePin+0x2a>
 8005600:	f240 119d 	movw	r1, #413	; 0x19d
 8005604:	480e      	ldr	r0, [pc, #56]	; (8005640 <HAL_GPIO_WritePin+0x60>)
 8005606:	f7fc fed2 	bl	80023ae <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800560a:	787b      	ldrb	r3, [r7, #1]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d007      	beq.n	8005620 <HAL_GPIO_WritePin+0x40>
 8005610:	787b      	ldrb	r3, [r7, #1]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d004      	beq.n	8005620 <HAL_GPIO_WritePin+0x40>
 8005616:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800561a:	4809      	ldr	r0, [pc, #36]	; (8005640 <HAL_GPIO_WritePin+0x60>)
 800561c:	f7fc fec7 	bl	80023ae <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8005620:	787b      	ldrb	r3, [r7, #1]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005626:	887a      	ldrh	r2, [r7, #2]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800562c:	e003      	b.n	8005636 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800562e:	887b      	ldrh	r3, [r7, #2]
 8005630:	041a      	lsls	r2, r3, #16
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	619a      	str	r2, [r3, #24]
}
 8005636:	bf00      	nop
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	0800eed0 	.word	0x0800eed0

08005644 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e1f7      	b.n	8005a46 <HAL_I2C_Init+0x402>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a81      	ldr	r2, [pc, #516]	; (8005860 <HAL_I2C_Init+0x21c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d00e      	beq.n	800567e <HAL_I2C_Init+0x3a>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a7f      	ldr	r2, [pc, #508]	; (8005864 <HAL_I2C_Init+0x220>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d009      	beq.n	800567e <HAL_I2C_Init+0x3a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a7e      	ldr	r2, [pc, #504]	; (8005868 <HAL_I2C_Init+0x224>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d004      	beq.n	800567e <HAL_I2C_Init+0x3a>
 8005674:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8005678:	487c      	ldr	r0, [pc, #496]	; (800586c <HAL_I2C_Init+0x228>)
 800567a:	f7fc fe98 	bl	80023ae <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d004      	beq.n	8005690 <HAL_I2C_Init+0x4c>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	4a79      	ldr	r2, [pc, #484]	; (8005870 <HAL_I2C_Init+0x22c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d904      	bls.n	800569a <HAL_I2C_Init+0x56>
 8005690:	f240 11bf 	movw	r1, #447	; 0x1bf
 8005694:	4875      	ldr	r0, [pc, #468]	; (800586c <HAL_I2C_Init+0x228>)
 8005696:	f7fc fe8a 	bl	80023ae <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d009      	beq.n	80056b6 <HAL_I2C_Init+0x72>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056aa:	d004      	beq.n	80056b6 <HAL_I2C_Init+0x72>
 80056ac:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80056b0:	486e      	ldr	r0, [pc, #440]	; (800586c <HAL_I2C_Init+0x228>)
 80056b2:	f7fc fe7c 	bl	80023ae <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80056be:	f023 0303 	bic.w	r3, r3, #3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d004      	beq.n	80056d0 <HAL_I2C_Init+0x8c>
 80056c6:	f240 11c1 	movw	r1, #449	; 0x1c1
 80056ca:	4868      	ldr	r0, [pc, #416]	; (800586c <HAL_I2C_Init+0x228>)
 80056cc:	f7fc fe6f 	bl	80023ae <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056d8:	d009      	beq.n	80056ee <HAL_I2C_Init+0xaa>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056e2:	d004      	beq.n	80056ee <HAL_I2C_Init+0xaa>
 80056e4:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80056e8:	4860      	ldr	r0, [pc, #384]	; (800586c <HAL_I2C_Init+0x228>)
 80056ea:	f7fc fe60 	bl	80023ae <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d008      	beq.n	8005708 <HAL_I2C_Init+0xc4>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d004      	beq.n	8005708 <HAL_I2C_Init+0xc4>
 80056fe:	f240 11c3 	movw	r1, #451	; 0x1c3
 8005702:	485a      	ldr	r0, [pc, #360]	; (800586c <HAL_I2C_Init+0x228>)
 8005704:	f7fc fe53 	bl	80023ae <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8005710:	2b00      	cmp	r3, #0
 8005712:	d004      	beq.n	800571e <HAL_I2C_Init+0xda>
 8005714:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8005718:	4854      	ldr	r0, [pc, #336]	; (800586c <HAL_I2C_Init+0x228>)
 800571a:	f7fc fe48 	bl	80023ae <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d008      	beq.n	8005738 <HAL_I2C_Init+0xf4>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	2b40      	cmp	r3, #64	; 0x40
 800572c:	d004      	beq.n	8005738 <HAL_I2C_Init+0xf4>
 800572e:	f240 11c5 	movw	r1, #453	; 0x1c5
 8005732:	484e      	ldr	r0, [pc, #312]	; (800586c <HAL_I2C_Init+0x228>)
 8005734:	f7fc fe3b 	bl	80023ae <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d008      	beq.n	8005752 <HAL_I2C_Init+0x10e>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	2b80      	cmp	r3, #128	; 0x80
 8005746:	d004      	beq.n	8005752 <HAL_I2C_Init+0x10e>
 8005748:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800574c:	4847      	ldr	r0, [pc, #284]	; (800586c <HAL_I2C_Init+0x228>)
 800574e:	f7fc fe2e 	bl	80023ae <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d12c      	bne.n	80057b8 <HAL_I2C_Init+0x174>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a42      	ldr	r2, [pc, #264]	; (8005874 <HAL_I2C_Init+0x230>)
 800576a:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a42      	ldr	r2, [pc, #264]	; (8005878 <HAL_I2C_Init+0x234>)
 8005770:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a41      	ldr	r2, [pc, #260]	; (800587c <HAL_I2C_Init+0x238>)
 8005776:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a41      	ldr	r2, [pc, #260]	; (8005880 <HAL_I2C_Init+0x23c>)
 800577c:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a40      	ldr	r2, [pc, #256]	; (8005884 <HAL_I2C_Init+0x240>)
 8005782:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a40      	ldr	r2, [pc, #256]	; (8005888 <HAL_I2C_Init+0x244>)
 8005788:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a3f      	ldr	r2, [pc, #252]	; (800588c <HAL_I2C_Init+0x248>)
 800578e:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a3f      	ldr	r2, [pc, #252]	; (8005890 <HAL_I2C_Init+0x24c>)
 8005794:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a3e      	ldr	r2, [pc, #248]	; (8005894 <HAL_I2C_Init+0x250>)
 800579a:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a3e      	ldr	r2, [pc, #248]	; (8005898 <HAL_I2C_Init+0x254>)
 80057a0:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d102      	bne.n	80057b0 <HAL_I2C_Init+0x16c>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a3b      	ldr	r2, [pc, #236]	; (800589c <HAL_I2C_Init+0x258>)
 80057ae:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2224      	movs	r2, #36	; 0x24
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0201 	bic.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80057f0:	f002 fc0a 	bl	8008008 <HAL_RCC_GetPCLK1Freq>
 80057f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	4a29      	ldr	r2, [pc, #164]	; (80058a0 <HAL_I2C_Init+0x25c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d807      	bhi.n	8005810 <HAL_I2C_Init+0x1cc>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4a28      	ldr	r2, [pc, #160]	; (80058a4 <HAL_I2C_Init+0x260>)
 8005804:	4293      	cmp	r3, r2
 8005806:	bf94      	ite	ls
 8005808:	2301      	movls	r3, #1
 800580a:	2300      	movhi	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	e006      	b.n	800581e <HAL_I2C_Init+0x1da>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4a25      	ldr	r2, [pc, #148]	; (80058a8 <HAL_I2C_Init+0x264>)
 8005814:	4293      	cmp	r3, r2
 8005816:	bf94      	ite	ls
 8005818:	2301      	movls	r3, #1
 800581a:	2300      	movhi	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <HAL_I2C_Init+0x1e2>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e10f      	b.n	8005a46 <HAL_I2C_Init+0x402>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4a20      	ldr	r2, [pc, #128]	; (80058ac <HAL_I2C_Init+0x268>)
 800582a:	fba2 2303 	umull	r2, r3, r2, r3
 800582e:	0c9b      	lsrs	r3, r3, #18
 8005830:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	430a      	orrs	r2, r1
 8005844:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	4a12      	ldr	r2, [pc, #72]	; (80058a0 <HAL_I2C_Init+0x25c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d82a      	bhi.n	80058b0 <HAL_I2C_Init+0x26c>
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	3301      	adds	r3, #1
 800585e:	e031      	b.n	80058c4 <HAL_I2C_Init+0x280>
 8005860:	40005400 	.word	0x40005400
 8005864:	40005800 	.word	0x40005800
 8005868:	40005c00 	.word	0x40005c00
 800586c:	0800ef44 	.word	0x0800ef44
 8005870:	00061a80 	.word	0x00061a80
 8005874:	08005e89 	.word	0x08005e89
 8005878:	08005e9d 	.word	0x08005e9d
 800587c:	08005eb1 	.word	0x08005eb1
 8005880:	08005ec5 	.word	0x08005ec5
 8005884:	08005ef5 	.word	0x08005ef5
 8005888:	08005f09 	.word	0x08005f09
 800588c:	08005f1d 	.word	0x08005f1d
 8005890:	08005f31 	.word	0x08005f31
 8005894:	08005f45 	.word	0x08005f45
 8005898:	08005ed9 	.word	0x08005ed9
 800589c:	080020a1 	.word	0x080020a1
 80058a0:	000186a0 	.word	0x000186a0
 80058a4:	001e847f 	.word	0x001e847f
 80058a8:	003d08ff 	.word	0x003d08ff
 80058ac:	431bde83 	.word	0x431bde83
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058b6:	fb02 f303 	mul.w	r3, r2, r3
 80058ba:	4a65      	ldr	r2, [pc, #404]	; (8005a50 <HAL_I2C_Init+0x40c>)
 80058bc:	fba2 2303 	umull	r2, r3, r2, r3
 80058c0:	099b      	lsrs	r3, r3, #6
 80058c2:	3301      	adds	r3, #1
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6812      	ldr	r2, [r2, #0]
 80058c8:	430b      	orrs	r3, r1
 80058ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	495d      	ldr	r1, [pc, #372]	; (8005a54 <HAL_I2C_Init+0x410>)
 80058e0:	428b      	cmp	r3, r1
 80058e2:	d819      	bhi.n	8005918 <HAL_I2C_Init+0x2d4>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	1e59      	subs	r1, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80058f2:	1c59      	adds	r1, r3, #1
 80058f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80058f8:	400b      	ands	r3, r1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <HAL_I2C_Init+0x2d0>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1e59      	subs	r1, r3, #1
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	fbb1 f3f3 	udiv	r3, r1, r3
 800590c:	3301      	adds	r3, #1
 800590e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005912:	e051      	b.n	80059b8 <HAL_I2C_Init+0x374>
 8005914:	2304      	movs	r3, #4
 8005916:	e04f      	b.n	80059b8 <HAL_I2C_Init+0x374>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d111      	bne.n	8005944 <HAL_I2C_Init+0x300>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	1e58      	subs	r0, r3, #1
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6859      	ldr	r1, [r3, #4]
 8005928:	460b      	mov	r3, r1
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	440b      	add	r3, r1
 800592e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005932:	3301      	adds	r3, #1
 8005934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005938:	2b00      	cmp	r3, #0
 800593a:	bf0c      	ite	eq
 800593c:	2301      	moveq	r3, #1
 800593e:	2300      	movne	r3, #0
 8005940:	b2db      	uxtb	r3, r3
 8005942:	e012      	b.n	800596a <HAL_I2C_Init+0x326>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	1e58      	subs	r0, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6859      	ldr	r1, [r3, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	440b      	add	r3, r1
 8005952:	0099      	lsls	r1, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	fbb0 f3f3 	udiv	r3, r0, r3
 800595a:	3301      	adds	r3, #1
 800595c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005960:	2b00      	cmp	r3, #0
 8005962:	bf0c      	ite	eq
 8005964:	2301      	moveq	r3, #1
 8005966:	2300      	movne	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <HAL_I2C_Init+0x32e>
 800596e:	2301      	movs	r3, #1
 8005970:	e022      	b.n	80059b8 <HAL_I2C_Init+0x374>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10e      	bne.n	8005998 <HAL_I2C_Init+0x354>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	1e58      	subs	r0, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6859      	ldr	r1, [r3, #4]
 8005982:	460b      	mov	r3, r1
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	440b      	add	r3, r1
 8005988:	fbb0 f3f3 	udiv	r3, r0, r3
 800598c:	3301      	adds	r3, #1
 800598e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005996:	e00f      	b.n	80059b8 <HAL_I2C_Init+0x374>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	1e58      	subs	r0, r3, #1
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6859      	ldr	r1, [r3, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	440b      	add	r3, r1
 80059a6:	0099      	lsls	r1, r3, #2
 80059a8:	440b      	add	r3, r1
 80059aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ae:	3301      	adds	r3, #1
 80059b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	6809      	ldr	r1, [r1, #0]
 80059bc:	4313      	orrs	r3, r2
 80059be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69da      	ldr	r2, [r3, #28]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6911      	ldr	r1, [r2, #16]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	68d2      	ldr	r2, [r2, #12]
 80059f2:	4311      	orrs	r1, r2
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6812      	ldr	r2, [r2, #0]
 80059f8:	430b      	orrs	r3, r1
 80059fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695a      	ldr	r2, [r3, #20]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0201 	orr.w	r2, r2, #1
 8005a26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	10624dd3 	.word	0x10624dd3
 8005a54:	000186a0 	.word	0x000186a0

08005a58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a80:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005a82:	7bfb      	ldrb	r3, [r7, #15]
 8005a84:	2b10      	cmp	r3, #16
 8005a86:	d003      	beq.n	8005a90 <HAL_I2C_EV_IRQHandler+0x38>
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	2b40      	cmp	r3, #64	; 0x40
 8005a8c:	f040 80c1 	bne.w	8005c12 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10d      	bne.n	8005ac6 <HAL_I2C_EV_IRQHandler+0x6e>
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005ab0:	d003      	beq.n	8005aba <HAL_I2C_EV_IRQHandler+0x62>
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005ab8:	d101      	bne.n	8005abe <HAL_I2C_EV_IRQHandler+0x66>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <HAL_I2C_EV_IRQHandler+0x68>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	f000 8132 	beq.w	8005d2a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00c      	beq.n	8005aea <HAL_I2C_EV_IRQHandler+0x92>
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	0a5b      	lsrs	r3, r3, #9
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d006      	beq.n	8005aea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f001 fc95 	bl	800740c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fd8f 	bl	8006606 <I2C_Master_SB>
 8005ae8:	e092      	b.n	8005c10 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	08db      	lsrs	r3, r3, #3
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d009      	beq.n	8005b0a <HAL_I2C_EV_IRQHandler+0xb2>
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	0a5b      	lsrs	r3, r3, #9
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fe05 	bl	8006712 <I2C_Master_ADD10>
 8005b08:	e082      	b.n	8005c10 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	085b      	lsrs	r3, r3, #1
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d009      	beq.n	8005b2a <HAL_I2C_EV_IRQHandler+0xd2>
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	0a5b      	lsrs	r3, r3, #9
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fe1f 	bl	8006766 <I2C_Master_ADDR>
 8005b28:	e072      	b.n	8005c10 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	089b      	lsrs	r3, r3, #2
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d03b      	beq.n	8005bae <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b44:	f000 80f3 	beq.w	8005d2e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	09db      	lsrs	r3, r3, #7
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00f      	beq.n	8005b74 <HAL_I2C_EV_IRQHandler+0x11c>
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	0a9b      	lsrs	r3, r3, #10
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d009      	beq.n	8005b74 <HAL_I2C_EV_IRQHandler+0x11c>
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	089b      	lsrs	r3, r3, #2
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d103      	bne.n	8005b74 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f9f3 	bl	8005f58 <I2C_MasterTransmit_TXE>
 8005b72:	e04d      	b.n	8005c10 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	089b      	lsrs	r3, r3, #2
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 80d6 	beq.w	8005d2e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	0a5b      	lsrs	r3, r3, #9
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 80cf 	beq.w	8005d2e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005b90:	7bbb      	ldrb	r3, [r7, #14]
 8005b92:	2b21      	cmp	r3, #33	; 0x21
 8005b94:	d103      	bne.n	8005b9e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fa7d 	bl	8006096 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b9c:	e0c7      	b.n	8005d2e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	2b40      	cmp	r3, #64	; 0x40
 8005ba2:	f040 80c4 	bne.w	8005d2e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 faee 	bl	8006188 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bac:	e0bf      	b.n	8005d2e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bbc:	f000 80b7 	beq.w	8005d2e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	099b      	lsrs	r3, r3, #6
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00f      	beq.n	8005bec <HAL_I2C_EV_IRQHandler+0x194>
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	0a9b      	lsrs	r3, r3, #10
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d009      	beq.n	8005bec <HAL_I2C_EV_IRQHandler+0x194>
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	089b      	lsrs	r3, r3, #2
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d103      	bne.n	8005bec <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 fb64 	bl	80062b2 <I2C_MasterReceive_RXNE>
 8005bea:	e011      	b.n	8005c10 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	089b      	lsrs	r3, r3, #2
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 809a 	beq.w	8005d2e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	0a5b      	lsrs	r3, r3, #9
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 8093 	beq.w	8005d2e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fc10 	bl	800642e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c0e:	e08e      	b.n	8005d2e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005c10:	e08d      	b.n	8005d2e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d004      	beq.n	8005c24 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	695b      	ldr	r3, [r3, #20]
 8005c20:	61fb      	str	r3, [r7, #28]
 8005c22:	e007      	b.n	8005c34 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	085b      	lsrs	r3, r3, #1
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d012      	beq.n	8005c66 <HAL_I2C_EV_IRQHandler+0x20e>
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	0a5b      	lsrs	r3, r3, #9
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00c      	beq.n	8005c66 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005c5c:	69b9      	ldr	r1, [r7, #24]
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 ffd2 	bl	8006c08 <I2C_Slave_ADDR>
 8005c64:	e066      	b.n	8005d34 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	091b      	lsrs	r3, r3, #4
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d009      	beq.n	8005c86 <HAL_I2C_EV_IRQHandler+0x22e>
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	0a5b      	lsrs	r3, r3, #9
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f001 f80c 	bl	8006c9c <I2C_Slave_STOPF>
 8005c84:	e056      	b.n	8005d34 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005c86:	7bbb      	ldrb	r3, [r7, #14]
 8005c88:	2b21      	cmp	r3, #33	; 0x21
 8005c8a:	d002      	beq.n	8005c92 <HAL_I2C_EV_IRQHandler+0x23a>
 8005c8c:	7bbb      	ldrb	r3, [r7, #14]
 8005c8e:	2b29      	cmp	r3, #41	; 0x29
 8005c90:	d125      	bne.n	8005cde <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	09db      	lsrs	r3, r3, #7
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00f      	beq.n	8005cbe <HAL_I2C_EV_IRQHandler+0x266>
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	0a9b      	lsrs	r3, r3, #10
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d009      	beq.n	8005cbe <HAL_I2C_EV_IRQHandler+0x266>
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	089b      	lsrs	r3, r3, #2
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d103      	bne.n	8005cbe <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fee6 	bl	8006a88 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cbc:	e039      	b.n	8005d32 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	089b      	lsrs	r3, r3, #2
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d033      	beq.n	8005d32 <HAL_I2C_EV_IRQHandler+0x2da>
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	0a5b      	lsrs	r3, r3, #9
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d02d      	beq.n	8005d32 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 ff14 	bl	8006b04 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cdc:	e029      	b.n	8005d32 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	099b      	lsrs	r3, r3, #6
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00f      	beq.n	8005d0a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	0a9b      	lsrs	r3, r3, #10
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d009      	beq.n	8005d0a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	089b      	lsrs	r3, r3, #2
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d103      	bne.n	8005d0a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 ff1f 	bl	8006b46 <I2C_SlaveReceive_RXNE>
 8005d08:	e014      	b.n	8005d34 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	089b      	lsrs	r3, r3, #2
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00e      	beq.n	8005d34 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	0a5b      	lsrs	r3, r3, #9
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d008      	beq.n	8005d34 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 ff4e 	bl	8006bc4 <I2C_SlaveReceive_BTF>
 8005d28:	e004      	b.n	8005d34 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005d2a:	bf00      	nop
 8005d2c:	e002      	b.n	8005d34 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d2e:	bf00      	nop
 8005d30:	e000      	b.n	8005d34 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d32:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005d34:	3720      	adds	r7, #32
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b08a      	sub	sp, #40	; 0x28
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005d52:	2300      	movs	r3, #0
 8005d54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d5c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	0a1b      	lsrs	r3, r3, #8
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00e      	beq.n	8005d88 <HAL_I2C_ER_IRQHandler+0x4e>
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	0a1b      	lsrs	r3, r3, #8
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d008      	beq.n	8005d88 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	f043 0301 	orr.w	r3, r3, #1
 8005d7c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d86:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	0a5b      	lsrs	r3, r3, #9
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00e      	beq.n	8005db2 <HAL_I2C_ER_IRQHandler+0x78>
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	0a1b      	lsrs	r3, r3, #8
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d008      	beq.n	8005db2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	f043 0302 	orr.w	r3, r3, #2
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005db0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	0a9b      	lsrs	r3, r3, #10
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d03f      	beq.n	8005e3e <HAL_I2C_ER_IRQHandler+0x104>
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	0a1b      	lsrs	r3, r3, #8
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d039      	beq.n	8005e3e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005dca:	7efb      	ldrb	r3, [r7, #27]
 8005dcc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ddc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005de4:	7ebb      	ldrb	r3, [r7, #26]
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d112      	bne.n	8005e10 <HAL_I2C_ER_IRQHandler+0xd6>
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10f      	bne.n	8005e10 <HAL_I2C_ER_IRQHandler+0xd6>
 8005df0:	7cfb      	ldrb	r3, [r7, #19]
 8005df2:	2b21      	cmp	r3, #33	; 0x21
 8005df4:	d008      	beq.n	8005e08 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005df6:	7cfb      	ldrb	r3, [r7, #19]
 8005df8:	2b29      	cmp	r3, #41	; 0x29
 8005dfa:	d005      	beq.n	8005e08 <HAL_I2C_ER_IRQHandler+0xce>
 8005dfc:	7cfb      	ldrb	r3, [r7, #19]
 8005dfe:	2b28      	cmp	r3, #40	; 0x28
 8005e00:	d106      	bne.n	8005e10 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2b21      	cmp	r3, #33	; 0x21
 8005e06:	d103      	bne.n	8005e10 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f001 f87b 	bl	8006f04 <I2C_Slave_AF>
 8005e0e:	e016      	b.n	8005e3e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e18:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	f043 0304 	orr.w	r3, r3, #4
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005e22:	7efb      	ldrb	r3, [r7, #27]
 8005e24:	2b10      	cmp	r3, #16
 8005e26:	d002      	beq.n	8005e2e <HAL_I2C_ER_IRQHandler+0xf4>
 8005e28:	7efb      	ldrb	r3, [r7, #27]
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	d107      	bne.n	8005e3e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e3c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	0adb      	lsrs	r3, r3, #11
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00e      	beq.n	8005e68 <HAL_I2C_ER_IRQHandler+0x12e>
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	0a1b      	lsrs	r3, r3, #8
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d008      	beq.n	8005e68 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	f043 0308 	orr.w	r3, r3, #8
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005e66:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d008      	beq.n	8005e80 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	431a      	orrs	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f001 f8b4 	bl	8006fe8 <I2C_ITError>
  }
}
 8005e80:	bf00      	nop
 8005e82:	3728      	adds	r7, #40	; 0x28
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	70fb      	strb	r3, [r7, #3]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f66:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f6e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d153      	bne.n	8006026 <I2C_MasterTransmit_TXE+0xce>
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
 8005f80:	2b21      	cmp	r3, #33	; 0x21
 8005f82:	d150      	bne.n	8006026 <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d01e      	beq.n	8005fc8 <I2C_MasterTransmit_TXE+0x70>
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b20      	cmp	r3, #32
 8005f8e:	d01b      	beq.n	8005fc8 <I2C_MasterTransmit_TXE+0x70>
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f96:	d017      	beq.n	8005fc8 <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fa6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2211      	movs	r2, #17
 8005fac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005fc6:	e062      	b.n	800608e <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fd6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b40      	cmp	r3, #64	; 0x40
 8006000:	d108      	bne.n	8006014 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006012:	e03c      	b.n	800608e <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006024:	e033      	b.n	800608e <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006026:	7bfb      	ldrb	r3, [r7, #15]
 8006028:	2b21      	cmp	r3, #33	; 0x21
 800602a:	d005      	beq.n	8006038 <I2C_MasterTransmit_TXE+0xe0>
 800602c:	7bbb      	ldrb	r3, [r7, #14]
 800602e:	2b40      	cmp	r3, #64	; 0x40
 8006030:	d12d      	bne.n	800608e <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	2b22      	cmp	r3, #34	; 0x22
 8006036:	d12a      	bne.n	800608e <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603c:	b29b      	uxth	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d108      	bne.n	8006054 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006050:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006052:	e01c      	b.n	800608e <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b40      	cmp	r3, #64	; 0x40
 800605e:	d103      	bne.n	8006068 <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f891 	bl	8006188 <I2C_MemoryTransmit_TXE_BTF>
}
 8006066:	e012      	b.n	800608e <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	781a      	ldrb	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006082:	b29b      	uxth	r3, r3
 8006084:	3b01      	subs	r3, #1
 8006086:	b29a      	uxth	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800608c:	e7ff      	b.n	800608e <I2C_MasterTransmit_TXE+0x136>
 800608e:	bf00      	nop
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b21      	cmp	r3, #33	; 0x21
 80060ae:	d167      	bne.n	8006180 <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d012      	beq.n	80060e0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	781a      	ldrb	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	3b01      	subs	r3, #1
 80060d8:	b29a      	uxth	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80060de:	e04f      	b.n	8006180 <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d01e      	beq.n	8006124 <I2C_MasterTransmit_BTF+0x8e>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d01b      	beq.n	8006124 <I2C_MasterTransmit_BTF+0x8e>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060f2:	d017      	beq.n	8006124 <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006102:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2211      	movs	r2, #17
 8006108:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2220      	movs	r2, #32
 8006116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	4798      	blx	r3
}
 8006122:	e02d      	b.n	8006180 <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006132:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006142:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b40      	cmp	r3, #64	; 0x40
 800615c:	d108      	bne.n	8006170 <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	4798      	blx	r3
}
 800616e:	e007      	b.n	8006180 <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	4798      	blx	r3
}
 8006180:	bf00      	nop
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006196:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800619c:	2b00      	cmp	r3, #0
 800619e:	d11d      	bne.n	80061dc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d10b      	bne.n	80061c0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b8:	1c9a      	adds	r2, r3, #2
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80061be:	e074      	b.n	80062aa <I2C_MemoryTransmit_TXE_BTF+0x122>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	121b      	asrs	r3, r3, #8
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80061da:	e066      	b.n	80062aa <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 1U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d10b      	bne.n	80061fc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80061fa:	e056      	b.n	80062aa <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 2U)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006200:	2b02      	cmp	r3, #2
 8006202:	d152      	bne.n	80062aa <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	2b22      	cmp	r3, #34	; 0x22
 8006208:	d10d      	bne.n	8006226 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006218:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006224:	e041      	b.n	80062aa <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800622a:	b29b      	uxth	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	d015      	beq.n	800625c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006230:	7bfb      	ldrb	r3, [r7, #15]
 8006232:	2b21      	cmp	r3, #33	; 0x21
 8006234:	d112      	bne.n	800625c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623a:	781a      	ldrb	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800625a:	e026      	b.n	80062aa <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006260:	b29b      	uxth	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d121      	bne.n	80062aa <I2C_MemoryTransmit_TXE_BTF+0x122>
 8006266:	7bfb      	ldrb	r3, [r7, #15]
 8006268:	2b21      	cmp	r3, #33	; 0x21
 800626a:	d11e      	bne.n	80062aa <I2C_MemoryTransmit_TXE_BTF+0x122>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800627a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800628a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2220      	movs	r2, #32
 8006296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	4798      	blx	r3
}
 80062aa:	bf00      	nop
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b084      	sub	sp, #16
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b22      	cmp	r3, #34	; 0x22
 80062c4:	f040 80af 	bne.w	8006426 <I2C_MasterReceive_RXNE+0x174>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d921      	bls.n	800631a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006300:	b29b      	uxth	r3, r3
 8006302:	2b03      	cmp	r3, #3
 8006304:	f040 808f 	bne.w	8006426 <I2C_MasterReceive_RXNE+0x174>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006316:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006318:	e085      	b.n	8006426 <I2C_MasterReceive_RXNE+0x174>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631e:	2b02      	cmp	r3, #2
 8006320:	d078      	beq.n	8006414 <I2C_MasterReceive_RXNE+0x162>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d002      	beq.n	800632e <I2C_MasterReceive_RXNE+0x7c>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d172      	bne.n	8006414 <I2C_MasterReceive_RXNE+0x162>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f001 f83a 	bl	80073a8 <I2C_WaitOnSTOPRequestThroughIT>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d144      	bne.n	80063c4 <I2C_MasterReceive_RXNE+0x112>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006348:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006358:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006376:	b29b      	uxth	r3, r3
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b40      	cmp	r3, #64	; 0x40
 8006392:	d10b      	bne.n	80063ac <I2C_MasterReceive_RXNE+0xfa>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MemRxCpltCallback(hi2c);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80063aa:	e03c      	b.n	8006426 <I2C_MasterReceive_RXNE+0x174>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2212      	movs	r2, #18
 80063b8:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80063c2:	e030      	b.n	8006426 <I2C_MasterReceive_RXNE+0x174>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063d2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691a      	ldr	r2, [r3, #16]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	3b01      	subs	r3, #1
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2220      	movs	r2, #32
 80063fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCallback(hi2c);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006412:	e008      	b.n	8006426 <I2C_MasterReceive_RXNE+0x174>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006422:	605a      	str	r2, [r3, #4]
}
 8006424:	e7ff      	b.n	8006426 <I2C_MasterReceive_RXNE+0x174>
 8006426:	bf00      	nop
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b084      	sub	sp, #16
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b04      	cmp	r3, #4
 8006444:	d11b      	bne.n	800647e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006454:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	691a      	ldr	r2, [r3, #16]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	b2d2      	uxtb	r2, r2
 8006462:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006472:	b29b      	uxth	r3, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800647c:	e0bf      	b.n	80065fe <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 3U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006482:	b29b      	uxth	r3, r3
 8006484:	2b03      	cmp	r3, #3
 8006486:	d129      	bne.n	80064dc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006496:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b04      	cmp	r3, #4
 800649c:	d00a      	beq.n	80064b4 <I2C_MasterReceive_BTF+0x86>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d007      	beq.n	80064b4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064b2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	691a      	ldr	r2, [r3, #16]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	3b01      	subs	r3, #1
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80064da:	e090      	b.n	80065fe <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 2U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d178      	bne.n	80065d8 <I2C_MasterReceive_BTF+0x1aa>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d002      	beq.n	80064f2 <I2C_MasterReceive_BTF+0xc4>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b10      	cmp	r3, #16
 80064f0:	d108      	bne.n	8006504 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	e019      	b.n	8006538 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2b04      	cmp	r3, #4
 8006508:	d002      	beq.n	8006510 <I2C_MasterReceive_BTF+0xe2>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b02      	cmp	r3, #2
 800650e:	d108      	bne.n	8006522 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	e00a      	b.n	8006538 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2b10      	cmp	r3, #16
 8006526:	d007      	beq.n	8006538 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006536:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	691a      	ldr	r2, [r3, #16]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	b2d2      	uxtb	r2, r2
 8006544:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006554:	b29b      	uxth	r3, r3
 8006556:	3b01      	subs	r3, #1
 8006558:	b29a      	uxth	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	691a      	ldr	r2, [r3, #16]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	b2d2      	uxtb	r2, r2
 800656a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657a:	b29b      	uxth	r3, r3
 800657c:	3b01      	subs	r3, #1
 800657e:	b29a      	uxth	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006592:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2220      	movs	r2, #32
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b40      	cmp	r3, #64	; 0x40
 80065a6:	d10b      	bne.n	80065c0 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MemRxCpltCallback(hi2c);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	4798      	blx	r3
}
 80065be:	e01e      	b.n	80065fe <I2C_MasterReceive_BTF+0x1d0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2212      	movs	r2, #18
 80065cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	4798      	blx	r3
}
 80065d6:	e012      	b.n	80065fe <I2C_MasterReceive_BTF+0x1d0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	691a      	ldr	r2, [r3, #16]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	b2d2      	uxtb	r2, r2
 80065e4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80065fe:	bf00      	nop
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006606:	b480      	push	{r7}
 8006608:	b083      	sub	sp, #12
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b40      	cmp	r3, #64	; 0x40
 8006618:	d117      	bne.n	800664a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661e:	2b00      	cmp	r3, #0
 8006620:	d109      	bne.n	8006636 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006626:	b2db      	uxtb	r3, r3
 8006628:	461a      	mov	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006632:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006634:	e067      	b.n	8006706 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663a:	b2db      	uxtb	r3, r3
 800663c:	f043 0301 	orr.w	r3, r3, #1
 8006640:	b2da      	uxtb	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	611a      	str	r2, [r3, #16]
}
 8006648:	e05d      	b.n	8006706 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006652:	d133      	bne.n	80066bc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b21      	cmp	r3, #33	; 0x21
 800665e:	d109      	bne.n	8006674 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006664:	b2db      	uxtb	r3, r3
 8006666:	461a      	mov	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006670:	611a      	str	r2, [r3, #16]
 8006672:	e008      	b.n	8006686 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006678:	b2db      	uxtb	r3, r3
 800667a:	f043 0301 	orr.w	r3, r3, #1
 800667e:	b2da      	uxtb	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668a:	2b00      	cmp	r3, #0
 800668c:	d004      	beq.n	8006698 <I2C_Master_SB+0x92>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006694:	2b00      	cmp	r3, #0
 8006696:	d108      	bne.n	80066aa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669c:	2b00      	cmp	r3, #0
 800669e:	d032      	beq.n	8006706 <I2C_Master_SB+0x100>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d02d      	beq.n	8006706 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066b8:	605a      	str	r2, [r3, #4]
}
 80066ba:	e024      	b.n	8006706 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10e      	bne.n	80066e2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	11db      	asrs	r3, r3, #7
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	f003 0306 	and.w	r3, r3, #6
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	f063 030f 	orn	r3, r3, #15
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	611a      	str	r2, [r3, #16]
}
 80066e0:	e011      	b.n	8006706 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d10d      	bne.n	8006706 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	11db      	asrs	r3, r3, #7
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	f003 0306 	and.w	r3, r3, #6
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	f063 030e 	orn	r3, r3, #14
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	611a      	str	r2, [r3, #16]
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671e:	b2da      	uxtb	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800672a:	2b00      	cmp	r3, #0
 800672c:	d004      	beq.n	8006738 <I2C_Master_ADD10+0x26>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006734:	2b00      	cmp	r3, #0
 8006736:	d108      	bne.n	800674a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00c      	beq.n	800675a <I2C_Master_ADD10+0x48>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006746:	2b00      	cmp	r3, #0
 8006748:	d007      	beq.n	800675a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006758:	605a      	str	r2, [r3, #4]
  }
}
 800675a:	bf00      	nop
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006766:	b480      	push	{r7}
 8006768:	b091      	sub	sp, #68	; 0x44
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006774:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006782:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b22      	cmp	r3, #34	; 0x22
 800678e:	f040 8169 	bne.w	8006a64 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10f      	bne.n	80067ba <I2C_Master_ADDR+0x54>
 800679a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d10b      	bne.n	80067ba <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067a2:	2300      	movs	r3, #0
 80067a4:	633b      	str	r3, [r7, #48]	; 0x30
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	633b      	str	r3, [r7, #48]	; 0x30
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	633b      	str	r3, [r7, #48]	; 0x30
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	e160      	b.n	8006a7c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d11d      	bne.n	80067fe <I2C_Master_ADDR+0x98>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067ca:	d118      	bne.n	80067fe <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067cc:	2300      	movs	r3, #0
 80067ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067f0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	651a      	str	r2, [r3, #80]	; 0x50
 80067fc:	e13e      	b.n	8006a7c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006802:	b29b      	uxth	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d113      	bne.n	8006830 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006808:	2300      	movs	r3, #0
 800680a:	62bb      	str	r3, [r7, #40]	; 0x28
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	62bb      	str	r3, [r7, #40]	; 0x28
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	62bb      	str	r3, [r7, #40]	; 0x28
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	e115      	b.n	8006a5c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006834:	b29b      	uxth	r3, r3
 8006836:	2b01      	cmp	r3, #1
 8006838:	f040 808a 	bne.w	8006950 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800683c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006842:	d137      	bne.n	80068b4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006852:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800685e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006862:	d113      	bne.n	800688c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006872:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006874:	2300      	movs	r3, #0
 8006876:	627b      	str	r3, [r7, #36]	; 0x24
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	627b      	str	r3, [r7, #36]	; 0x24
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	627b      	str	r3, [r7, #36]	; 0x24
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	e0e7      	b.n	8006a5c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800688c:	2300      	movs	r3, #0
 800688e:	623b      	str	r3, [r7, #32]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	623b      	str	r3, [r7, #32]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	623b      	str	r3, [r7, #32]
 80068a0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	e0d3      	b.n	8006a5c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80068b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b6:	2b08      	cmp	r3, #8
 80068b8:	d02e      	beq.n	8006918 <I2C_Master_ADDR+0x1b2>
 80068ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068bc:	2b20      	cmp	r3, #32
 80068be:	d02b      	beq.n	8006918 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80068c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c2:	2b12      	cmp	r3, #18
 80068c4:	d102      	bne.n	80068cc <I2C_Master_ADDR+0x166>
 80068c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d125      	bne.n	8006918 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80068cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d00e      	beq.n	80068f0 <I2C_Master_ADDR+0x18a>
 80068d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d00b      	beq.n	80068f0 <I2C_Master_ADDR+0x18a>
 80068d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068da:	2b10      	cmp	r3, #16
 80068dc:	d008      	beq.n	80068f0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	e007      	b.n	8006900 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068fe:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006900:	2300      	movs	r3, #0
 8006902:	61fb      	str	r3, [r7, #28]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	61fb      	str	r3, [r7, #28]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	61fb      	str	r3, [r7, #28]
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	e0a1      	b.n	8006a5c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006926:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006928:	2300      	movs	r3, #0
 800692a:	61bb      	str	r3, [r7, #24]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	61bb      	str	r3, [r7, #24]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	61bb      	str	r3, [r7, #24]
 800693c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	e085      	b.n	8006a5c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006954:	b29b      	uxth	r3, r3
 8006956:	2b02      	cmp	r3, #2
 8006958:	d14d      	bne.n	80069f6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800695a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695c:	2b04      	cmp	r3, #4
 800695e:	d016      	beq.n	800698e <I2C_Master_ADDR+0x228>
 8006960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006962:	2b02      	cmp	r3, #2
 8006964:	d013      	beq.n	800698e <I2C_Master_ADDR+0x228>
 8006966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006968:	2b10      	cmp	r3, #16
 800696a:	d010      	beq.n	800698e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800697a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	e007      	b.n	800699e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800699c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ac:	d117      	bne.n	80069de <I2C_Master_ADDR+0x278>
 80069ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069b4:	d00b      	beq.n	80069ce <I2C_Master_ADDR+0x268>
 80069b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d008      	beq.n	80069ce <I2C_Master_ADDR+0x268>
 80069bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069be:	2b08      	cmp	r3, #8
 80069c0:	d005      	beq.n	80069ce <I2C_Master_ADDR+0x268>
 80069c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c4:	2b10      	cmp	r3, #16
 80069c6:	d002      	beq.n	80069ce <I2C_Master_ADDR+0x268>
 80069c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d107      	bne.n	80069de <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069dc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069de:	2300      	movs	r3, #0
 80069e0:	617b      	str	r3, [r7, #20]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	617b      	str	r3, [r7, #20]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	617b      	str	r3, [r7, #20]
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	e032      	b.n	8006a5c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a04:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a14:	d117      	bne.n	8006a46 <I2C_Master_ADDR+0x2e0>
 8006a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a1c:	d00b      	beq.n	8006a36 <I2C_Master_ADDR+0x2d0>
 8006a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d008      	beq.n	8006a36 <I2C_Master_ADDR+0x2d0>
 8006a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a26:	2b08      	cmp	r3, #8
 8006a28:	d005      	beq.n	8006a36 <I2C_Master_ADDR+0x2d0>
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2c:	2b10      	cmp	r3, #16
 8006a2e:	d002      	beq.n	8006a36 <I2C_Master_ADDR+0x2d0>
 8006a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a32:	2b20      	cmp	r3, #32
 8006a34:	d107      	bne.n	8006a46 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a44:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a46:	2300      	movs	r3, #0
 8006a48:	613b      	str	r3, [r7, #16]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	613b      	str	r3, [r7, #16]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	613b      	str	r3, [r7, #16]
 8006a5a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006a62:	e00b      	b.n	8006a7c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a64:	2300      	movs	r3, #0
 8006a66:	60fb      	str	r3, [r7, #12]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	68fb      	ldr	r3, [r7, #12]
}
 8006a7a:	e7ff      	b.n	8006a7c <I2C_Master_ADDR+0x316>
 8006a7c:	bf00      	nop
 8006a7e:	3744      	adds	r7, #68	; 0x44
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a96:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d02c      	beq.n	8006afc <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa6:	781a      	ldrb	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	1c5a      	adds	r2, r3, #1
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d115      	bne.n	8006afc <I2C_SlaveTransmit_TXE+0x74>
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
 8006ad2:	2b29      	cmp	r3, #41	; 0x29
 8006ad4:	d112      	bne.n	8006afc <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ae4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2221      	movs	r2, #33	; 0x21
 8006aea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2228      	movs	r2, #40	; 0x28
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006afc:	bf00      	nop
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d011      	beq.n	8006b3a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1a:	781a      	ldrb	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	1c5a      	adds	r2, r3, #1
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	3b01      	subs	r3, #1
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b54:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d02d      	beq.n	8006bbc <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691a      	ldr	r2, [r3, #16]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d115      	bne.n	8006bbc <I2C_SlaveReceive_RXNE+0x76>
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
 8006b92:	2b2a      	cmp	r3, #42	; 0x2a
 8006b94:	d112      	bne.n	8006bbc <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ba4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2222      	movs	r2, #34	; 0x22
 8006baa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2228      	movs	r2, #40	; 0x28
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006bbc:	bf00      	nop
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d012      	beq.n	8006bfc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	691a      	ldr	r2, [r3, #16]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	b2d2      	uxtb	r2, r2
 8006be2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	1c5a      	adds	r2, r3, #1
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006c12:	2300      	movs	r3, #0
 8006c14:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c22:	2b28      	cmp	r3, #40	; 0x28
 8006c24:	d127      	bne.n	8006c76 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c34:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	089b      	lsrs	r3, r3, #2
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006c42:	2301      	movs	r3, #1
 8006c44:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	09db      	lsrs	r3, r3, #7
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d103      	bne.n	8006c5a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	81bb      	strh	r3, [r7, #12]
 8006c58:	e002      	b.n	8006c60 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c6c:	89ba      	ldrh	r2, [r7, #12]
 8006c6e:	7bf9      	ldrb	r1, [r7, #15]
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006c74:	e00e      	b.n	8006c94 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c76:	2300      	movs	r3, #0
 8006c78:	60bb      	str	r3, [r7, #8]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	60bb      	str	r3, [r7, #8]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	60bb      	str	r3, [r7, #8]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006c94:	bf00      	nop
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006caa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685a      	ldr	r2, [r3, #4]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006cba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	60bb      	str	r3, [r7, #8]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	60bb      	str	r3, [r7, #8]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0201 	orr.w	r2, r2, #1
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ce8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cf8:	d172      	bne.n	8006de0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
 8006cfc:	2b22      	cmp	r3, #34	; 0x22
 8006cfe:	d002      	beq.n	8006d06 <I2C_Slave_STOPF+0x6a>
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	2b2a      	cmp	r3, #42	; 0x2a
 8006d04:	d135      	bne.n	8006d72 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d005      	beq.n	8006d2a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d22:	f043 0204 	orr.w	r2, r3, #4
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fd fef0 	bl	8004b24 <HAL_DMA_GetState>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d049      	beq.n	8006dde <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4e:	4a6b      	ldr	r2, [pc, #428]	; (8006efc <I2C_Slave_STOPF+0x260>)
 8006d50:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fd fd38 	bl	80047cc <HAL_DMA_Abort_IT>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d03d      	beq.n	8006dde <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d70:	e035      	b.n	8006dde <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d005      	beq.n	8006d96 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	f043 0204 	orr.w	r2, r3, #4
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006da4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fd feba 	bl	8004b24 <HAL_DMA_GetState>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d014      	beq.n	8006de0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dba:	4a50      	ldr	r2, [pc, #320]	; (8006efc <I2C_Slave_STOPF+0x260>)
 8006dbc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fd fd02 	bl	80047cc <HAL_DMA_Abort_IT>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d008      	beq.n	8006de0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006dd8:	4610      	mov	r0, r2
 8006dda:	4798      	blx	r3
 8006ddc:	e000      	b.n	8006de0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006dde:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d03e      	beq.n	8006e68 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	f003 0304 	and.w	r3, r3, #4
 8006df4:	2b04      	cmp	r3, #4
 8006df6:	d112      	bne.n	8006e1e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	691a      	ldr	r2, [r3, #16]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	1c5a      	adds	r2, r3, #1
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	3b01      	subs	r3, #1
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e28:	2b40      	cmp	r3, #64	; 0x40
 8006e2a:	d112      	bne.n	8006e52 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	691a      	ldr	r2, [r3, #16]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e36:	b2d2      	uxtb	r2, r2
 8006e38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d005      	beq.n	8006e68 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e60:	f043 0204 	orr.w	r2, r3, #4
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f8b9 	bl	8006fe8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006e76:	e03c      	b.n	8006ef2 <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
 8006e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e7c:	d10a      	bne.n	8006e94 <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2228      	movs	r2, #40	; 0x28
 8006e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b28      	cmp	r3, #40	; 0x28
 8006e9e:	d112      	bne.n	8006ec6 <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a17      	ldr	r2, [pc, #92]	; (8006f00 <I2C_Slave_STOPF+0x264>)
 8006ea4:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ListenCpltCallback(hi2c);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	4798      	blx	r3
}
 8006ec4:	e015      	b.n	8006ef2 <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eca:	2b22      	cmp	r3, #34	; 0x22
 8006ecc:	d002      	beq.n	8006ed4 <I2C_Slave_STOPF+0x238>
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
 8006ed0:	2b22      	cmp	r3, #34	; 0x22
 8006ed2:	d10e      	bne.n	8006ef2 <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2220      	movs	r2, #32
 8006ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	4798      	blx	r3
}
 8006ef2:	bf00      	nop
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	08007255 	.word	0x08007255
 8006f00:	ffff0000 	.word	0xffff0000

08006f04 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f12:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f18:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2b08      	cmp	r3, #8
 8006f1e:	d002      	beq.n	8006f26 <I2C_Slave_AF+0x22>
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2b20      	cmp	r3, #32
 8006f24:	d12a      	bne.n	8006f7c <I2C_Slave_AF+0x78>
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
 8006f28:	2b28      	cmp	r3, #40	; 0x28
 8006f2a:	d127      	bne.n	8006f7c <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a2d      	ldr	r2, [pc, #180]	; (8006fe4 <I2C_Slave_AF+0xe0>)
 8006f30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f40:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f4a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f5a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006f7a:	e02f      	b.n	8006fdc <I2C_Slave_AF+0xd8>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	2b21      	cmp	r3, #33	; 0x21
 8006f80:	d127      	bne.n	8006fd2 <I2C_Slave_AF+0xce>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a17      	ldr	r2, [pc, #92]	; (8006fe4 <I2C_Slave_AF+0xe0>)
 8006f86:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2221      	movs	r2, #33	; 0x21
 8006f8c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2220      	movs	r2, #32
 8006f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fac:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006fb6:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fc6:	601a      	str	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	4798      	blx	r3
}
 8006fd0:	e004      	b.n	8006fdc <I2C_Slave_AF+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006fda:	615a      	str	r2, [r3, #20]
}
 8006fdc:	bf00      	nop
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	ffff0000 	.word	0xffff0000

08006fe8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ffe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	2b10      	cmp	r3, #16
 8007004:	d002      	beq.n	800700c <I2C_ITError+0x24>
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	2b40      	cmp	r3, #64	; 0x40
 800700a:	d10a      	bne.n	8007022 <I2C_ITError+0x3a>
 800700c:	7bfb      	ldrb	r3, [r7, #15]
 800700e:	2b22      	cmp	r3, #34	; 0x22
 8007010:	d107      	bne.n	8007022 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007020:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007022:	7bfb      	ldrb	r3, [r7, #15]
 8007024:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007028:	2b28      	cmp	r3, #40	; 0x28
 800702a:	d107      	bne.n	800703c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2228      	movs	r2, #40	; 0x28
 8007036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800703a:	e015      	b.n	8007068 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800704a:	d00a      	beq.n	8007062 <I2C_ITError+0x7a>
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	2b60      	cmp	r3, #96	; 0x60
 8007050:	d007      	beq.n	8007062 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2220      	movs	r2, #32
 8007056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007076:	d162      	bne.n	800713e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007086:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b01      	cmp	r3, #1
 8007094:	d020      	beq.n	80070d8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800709a:	4a6c      	ldr	r2, [pc, #432]	; (800724c <I2C_ITError+0x264>)
 800709c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fd fb92 	bl	80047cc <HAL_DMA_Abort_IT>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 808b 	beq.w	80071c6 <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f022 0201 	bic.w	r2, r2, #1
 80070be:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2220      	movs	r2, #32
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80070d2:	4610      	mov	r0, r2
 80070d4:	4798      	blx	r3
 80070d6:	e076      	b.n	80071c6 <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070dc:	4a5b      	ldr	r2, [pc, #364]	; (800724c <I2C_ITError+0x264>)
 80070de:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fd fb71 	bl	80047cc <HAL_DMA_Abort_IT>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d06a      	beq.n	80071c6 <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fa:	2b40      	cmp	r3, #64	; 0x40
 80070fc:	d10b      	bne.n	8007116 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	691a      	ldr	r2, [r3, #16]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	b2d2      	uxtb	r2, r2
 800710a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f022 0201 	bic.w	r2, r2, #1
 8007124:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2220      	movs	r2, #32
 800712a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007138:	4610      	mov	r0, r2
 800713a:	4798      	blx	r3
 800713c:	e043      	b.n	80071c6 <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b60      	cmp	r3, #96	; 0x60
 8007148:	d126      	bne.n	8007198 <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2220      	movs	r2, #32
 800714e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007162:	2b40      	cmp	r3, #64	; 0x40
 8007164:	d10b      	bne.n	800717e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	691a      	ldr	r2, [r3, #16]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	b2d2      	uxtb	r2, r2
 8007172:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 0201 	bic.w	r2, r2, #1
 800718c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	4798      	blx	r3
 8007196:	e016      	b.n	80071c6 <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a2:	2b40      	cmp	r3, #64	; 0x40
 80071a4:	d10b      	bne.n	80071be <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	691a      	ldr	r2, [r3, #16]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b0:	b2d2      	uxtb	r2, r2
 80071b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10e      	bne.n	80071f4 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d109      	bne.n	80071f4 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d104      	bne.n	80071f4 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d007      	beq.n	8007204 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007202:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800720a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	2b04      	cmp	r3, #4
 8007216:	d114      	bne.n	8007242 <I2C_ITError+0x25a>
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	2b28      	cmp	r3, #40	; 0x28
 800721c:	d111      	bne.n	8007242 <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a0b      	ldr	r2, [pc, #44]	; (8007250 <I2C_ITError+0x268>)
 8007222:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2220      	movs	r2, #32
 800722e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007242:	bf00      	nop
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	08007255 	.word	0x08007255
 8007250:	ffff0000 	.word	0xffff0000

08007254 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007264:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800726e:	4b4c      	ldr	r3, [pc, #304]	; (80073a0 <I2C_DMAAbort+0x14c>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	08db      	lsrs	r3, r3, #3
 8007274:	4a4b      	ldr	r2, [pc, #300]	; (80073a4 <I2C_DMAAbort+0x150>)
 8007276:	fba2 2303 	umull	r2, r3, r2, r3
 800727a:	0a1a      	lsrs	r2, r3, #8
 800727c:	4613      	mov	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	00da      	lsls	r2, r3, #3
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d106      	bne.n	800729c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007292:	f043 0220 	orr.w	r2, r3, #32
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800729a:	e00a      	b.n	80072b2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	3b01      	subs	r3, #1
 80072a0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072b0:	d0ea      	beq.n	8007288 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072be:	2200      	movs	r2, #0
 80072c0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	2200      	movs	r2, #0
 80072d0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072e0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2200      	movs	r2, #0
 80072e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f4:	2200      	movs	r2, #0
 80072f6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d003      	beq.n	8007308 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007304:	2200      	movs	r2, #0
 8007306:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 0201 	bic.w	r2, r2, #1
 8007316:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b60      	cmp	r3, #96	; 0x60
 8007322:	d10f      	bne.n	8007344 <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	2220      	movs	r2, #32
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	2200      	movs	r2, #0
 8007338:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800733e:	6978      	ldr	r0, [r7, #20]
 8007340:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007342:	e028      	b.n	8007396 <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007344:	7cfb      	ldrb	r3, [r7, #19]
 8007346:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800734a:	2b28      	cmp	r3, #40	; 0x28
 800734c:	d117      	bne.n	800737e <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f042 0201 	orr.w	r2, r2, #1
 800735c:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800736c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2200      	movs	r2, #0
 8007372:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	2228      	movs	r2, #40	; 0x28
 8007378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800737c:	e007      	b.n	800738e <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	2220      	movs	r2, #32
 8007382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCallback(hi2c);
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007392:	6978      	ldr	r0, [r7, #20]
 8007394:	4798      	blx	r3
}
 8007396:	bf00      	nop
 8007398:	3718      	adds	r7, #24
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	20000004 	.word	0x20000004
 80073a4:	14f8b589 	.word	0x14f8b589

080073a8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80073b4:	4b13      	ldr	r3, [pc, #76]	; (8007404 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	08db      	lsrs	r3, r3, #3
 80073ba:	4a13      	ldr	r2, [pc, #76]	; (8007408 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80073bc:	fba2 2303 	umull	r2, r3, r2, r3
 80073c0:	0a1a      	lsrs	r2, r3, #8
 80073c2:	4613      	mov	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d107      	bne.n	80073e6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	f043 0220 	orr.w	r2, r3, #32
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e008      	b.n	80073f8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073f4:	d0e9      	beq.n	80073ca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	20000004 	.word	0x20000004
 8007408:	14f8b589 	.word	0x14f8b589

0800740c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007418:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800741c:	d103      	bne.n	8007426 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007424:	e007      	b.n	8007436 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800742e:	d102      	bne.n	8007436 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2208      	movs	r2, #8
 8007434:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
	...

08007444 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8007448:	4b06      	ldr	r3, [pc, #24]	; (8007464 <HAL_PWR_PVD_IRQHandler+0x20>)
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d005      	beq.n	8007460 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8007454:	f000 f808 	bl	8007468 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8007458:	4b02      	ldr	r3, [pc, #8]	; (8007464 <HAL_PWR_PVD_IRQHandler+0x20>)
 800745a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800745e:	615a      	str	r2, [r3, #20]
  }
}
 8007460:	bf00      	nop
 8007462:	bd80      	pop	{r7, pc}
 8007464:	40013c00 	.word	0x40013c00

08007468 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8007468:	b480      	push	{r7}
 800746a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800746c:	bf00      	nop
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
	...

08007478 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e314      	b.n	8007ab4 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b0f      	cmp	r3, #15
 8007490:	d903      	bls.n	800749a <HAL_RCC_OscConfig+0x22>
 8007492:	21e6      	movs	r1, #230	; 0xe6
 8007494:	4897      	ldr	r0, [pc, #604]	; (80076f4 <HAL_RCC_OscConfig+0x27c>)
 8007496:	f7fa ff8a 	bl	80023ae <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 8088 	beq.w	80075b8 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00d      	beq.n	80074cc <HAL_RCC_OscConfig+0x54>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074b8:	d008      	beq.n	80074cc <HAL_RCC_OscConfig+0x54>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074c2:	d003      	beq.n	80074cc <HAL_RCC_OscConfig+0x54>
 80074c4:	21eb      	movs	r1, #235	; 0xeb
 80074c6:	488b      	ldr	r0, [pc, #556]	; (80076f4 <HAL_RCC_OscConfig+0x27c>)
 80074c8:	f7fa ff71 	bl	80023ae <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80074cc:	4b8a      	ldr	r3, [pc, #552]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f003 030c 	and.w	r3, r3, #12
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	d00c      	beq.n	80074f2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074d8:	4b87      	ldr	r3, [pc, #540]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80074e0:	2b08      	cmp	r3, #8
 80074e2:	d112      	bne.n	800750a <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074e4:	4b84      	ldr	r3, [pc, #528]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074f0:	d10b      	bne.n	800750a <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074f2:	4b81      	ldr	r3, [pc, #516]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d05b      	beq.n	80075b6 <HAL_RCC_OscConfig+0x13e>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d157      	bne.n	80075b6 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e2d4      	b.n	8007ab4 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007512:	d106      	bne.n	8007522 <HAL_RCC_OscConfig+0xaa>
 8007514:	4b78      	ldr	r3, [pc, #480]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a77      	ldr	r2, [pc, #476]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 800751a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	e01d      	b.n	800755e <HAL_RCC_OscConfig+0xe6>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800752a:	d10c      	bne.n	8007546 <HAL_RCC_OscConfig+0xce>
 800752c:	4b72      	ldr	r3, [pc, #456]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a71      	ldr	r2, [pc, #452]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 8007532:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	4b6f      	ldr	r3, [pc, #444]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a6e      	ldr	r2, [pc, #440]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 800753e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007542:	6013      	str	r3, [r2, #0]
 8007544:	e00b      	b.n	800755e <HAL_RCC_OscConfig+0xe6>
 8007546:	4b6c      	ldr	r3, [pc, #432]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a6b      	ldr	r2, [pc, #428]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 800754c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	4b69      	ldr	r3, [pc, #420]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a68      	ldr	r2, [pc, #416]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 8007558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800755c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d013      	beq.n	800758e <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007566:	f7fb fde5 	bl	8003134 <HAL_GetTick>
 800756a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800756c:	e008      	b.n	8007580 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800756e:	f7fb fde1 	bl	8003134 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	2b64      	cmp	r3, #100	; 0x64
 800757a:	d901      	bls.n	8007580 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e299      	b.n	8007ab4 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007580:	4b5d      	ldr	r3, [pc, #372]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d0f0      	beq.n	800756e <HAL_RCC_OscConfig+0xf6>
 800758c:	e014      	b.n	80075b8 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800758e:	f7fb fdd1 	bl	8003134 <HAL_GetTick>
 8007592:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007594:	e008      	b.n	80075a8 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007596:	f7fb fdcd 	bl	8003134 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	2b64      	cmp	r3, #100	; 0x64
 80075a2:	d901      	bls.n	80075a8 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e285      	b.n	8007ab4 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075a8:	4b53      	ldr	r3, [pc, #332]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1f0      	bne.n	8007596 <HAL_RCC_OscConfig+0x11e>
 80075b4:	e000      	b.n	80075b8 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075b6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d079      	beq.n	80076b8 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d008      	beq.n	80075de <HAL_RCC_OscConfig+0x166>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d004      	beq.n	80075de <HAL_RCC_OscConfig+0x166>
 80075d4:	f240 111d 	movw	r1, #285	; 0x11d
 80075d8:	4846      	ldr	r0, [pc, #280]	; (80076f4 <HAL_RCC_OscConfig+0x27c>)
 80075da:	f7fa fee8 	bl	80023ae <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	2b1f      	cmp	r3, #31
 80075e4:	d904      	bls.n	80075f0 <HAL_RCC_OscConfig+0x178>
 80075e6:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80075ea:	4842      	ldr	r0, [pc, #264]	; (80076f4 <HAL_RCC_OscConfig+0x27c>)
 80075ec:	f7fa fedf 	bl	80023ae <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075f0:	4b41      	ldr	r3, [pc, #260]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f003 030c 	and.w	r3, r3, #12
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00b      	beq.n	8007614 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075fc:	4b3e      	ldr	r3, [pc, #248]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007604:	2b08      	cmp	r3, #8
 8007606:	d11c      	bne.n	8007642 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007608:	4b3b      	ldr	r3, [pc, #236]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d116      	bne.n	8007642 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007614:	4b38      	ldr	r3, [pc, #224]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0302 	and.w	r3, r3, #2
 800761c:	2b00      	cmp	r3, #0
 800761e:	d005      	beq.n	800762c <HAL_RCC_OscConfig+0x1b4>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d001      	beq.n	800762c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e243      	b.n	8007ab4 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800762c:	4b32      	ldr	r3, [pc, #200]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	00db      	lsls	r3, r3, #3
 800763a:	492f      	ldr	r1, [pc, #188]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 800763c:	4313      	orrs	r3, r2
 800763e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007640:	e03a      	b.n	80076b8 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d020      	beq.n	800768c <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800764a:	4b2c      	ldr	r3, [pc, #176]	; (80076fc <HAL_RCC_OscConfig+0x284>)
 800764c:	2201      	movs	r2, #1
 800764e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007650:	f7fb fd70 	bl	8003134 <HAL_GetTick>
 8007654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007656:	e008      	b.n	800766a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007658:	f7fb fd6c 	bl	8003134 <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b02      	cmp	r3, #2
 8007664:	d901      	bls.n	800766a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e224      	b.n	8007ab4 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800766a:	4b23      	ldr	r3, [pc, #140]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0f0      	beq.n	8007658 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007676:	4b20      	ldr	r3, [pc, #128]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	491c      	ldr	r1, [pc, #112]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 8007686:	4313      	orrs	r3, r2
 8007688:	600b      	str	r3, [r1, #0]
 800768a:	e015      	b.n	80076b8 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800768c:	4b1b      	ldr	r3, [pc, #108]	; (80076fc <HAL_RCC_OscConfig+0x284>)
 800768e:	2200      	movs	r2, #0
 8007690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007692:	f7fb fd4f 	bl	8003134 <HAL_GetTick>
 8007696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007698:	e008      	b.n	80076ac <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800769a:	f7fb fd4b 	bl	8003134 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d901      	bls.n	80076ac <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e203      	b.n	8007ab4 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076ac:	4b12      	ldr	r3, [pc, #72]	; (80076f8 <HAL_RCC_OscConfig+0x280>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1f0      	bne.n	800769a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0308 	and.w	r3, r3, #8
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d045      	beq.n	8007750 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d008      	beq.n	80076de <HAL_RCC_OscConfig+0x266>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	695b      	ldr	r3, [r3, #20]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d004      	beq.n	80076de <HAL_RCC_OscConfig+0x266>
 80076d4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80076d8:	4806      	ldr	r0, [pc, #24]	; (80076f4 <HAL_RCC_OscConfig+0x27c>)
 80076da:	f7fa fe68 	bl	80023ae <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d01e      	beq.n	8007724 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076e6:	4b06      	ldr	r3, [pc, #24]	; (8007700 <HAL_RCC_OscConfig+0x288>)
 80076e8:	2201      	movs	r2, #1
 80076ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076ec:	f7fb fd22 	bl	8003134 <HAL_GetTick>
 80076f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076f2:	e010      	b.n	8007716 <HAL_RCC_OscConfig+0x29e>
 80076f4:	0800efb8 	.word	0x0800efb8
 80076f8:	40023800 	.word	0x40023800
 80076fc:	42470000 	.word	0x42470000
 8007700:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007704:	f7fb fd16 	bl	8003134 <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b02      	cmp	r3, #2
 8007710:	d901      	bls.n	8007716 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e1ce      	b.n	8007ab4 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007716:	4b5e      	ldr	r3, [pc, #376]	; (8007890 <HAL_RCC_OscConfig+0x418>)
 8007718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800771a:	f003 0302 	and.w	r3, r3, #2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d0f0      	beq.n	8007704 <HAL_RCC_OscConfig+0x28c>
 8007722:	e015      	b.n	8007750 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007724:	4b5b      	ldr	r3, [pc, #364]	; (8007894 <HAL_RCC_OscConfig+0x41c>)
 8007726:	2200      	movs	r2, #0
 8007728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800772a:	f7fb fd03 	bl	8003134 <HAL_GetTick>
 800772e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007730:	e008      	b.n	8007744 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007732:	f7fb fcff 	bl	8003134 <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	2b02      	cmp	r3, #2
 800773e:	d901      	bls.n	8007744 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e1b7      	b.n	8007ab4 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007744:	4b52      	ldr	r3, [pc, #328]	; (8007890 <HAL_RCC_OscConfig+0x418>)
 8007746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007748:	f003 0302 	and.w	r3, r3, #2
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1f0      	bne.n	8007732 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 80b0 	beq.w	80078be <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 800775e:	2300      	movs	r3, #0
 8007760:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00c      	beq.n	8007784 <HAL_RCC_OscConfig+0x30c>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d008      	beq.n	8007784 <HAL_RCC_OscConfig+0x30c>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	2b05      	cmp	r3, #5
 8007778:	d004      	beq.n	8007784 <HAL_RCC_OscConfig+0x30c>
 800777a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800777e:	4846      	ldr	r0, [pc, #280]	; (8007898 <HAL_RCC_OscConfig+0x420>)
 8007780:	f7fa fe15 	bl	80023ae <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007784:	4b42      	ldr	r3, [pc, #264]	; (8007890 <HAL_RCC_OscConfig+0x418>)
 8007786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10f      	bne.n	80077b0 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007790:	2300      	movs	r3, #0
 8007792:	60bb      	str	r3, [r7, #8]
 8007794:	4b3e      	ldr	r3, [pc, #248]	; (8007890 <HAL_RCC_OscConfig+0x418>)
 8007796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007798:	4a3d      	ldr	r2, [pc, #244]	; (8007890 <HAL_RCC_OscConfig+0x418>)
 800779a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800779e:	6413      	str	r3, [r2, #64]	; 0x40
 80077a0:	4b3b      	ldr	r3, [pc, #236]	; (8007890 <HAL_RCC_OscConfig+0x418>)
 80077a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077a8:	60bb      	str	r3, [r7, #8]
 80077aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077ac:	2301      	movs	r3, #1
 80077ae:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077b0:	4b3a      	ldr	r3, [pc, #232]	; (800789c <HAL_RCC_OscConfig+0x424>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d118      	bne.n	80077ee <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80077bc:	4b37      	ldr	r3, [pc, #220]	; (800789c <HAL_RCC_OscConfig+0x424>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a36      	ldr	r2, [pc, #216]	; (800789c <HAL_RCC_OscConfig+0x424>)
 80077c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077c8:	f7fb fcb4 	bl	8003134 <HAL_GetTick>
 80077cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077ce:	e008      	b.n	80077e2 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077d0:	f7fb fcb0 	bl	8003134 <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d901      	bls.n	80077e2 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e168      	b.n	8007ab4 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077e2:	4b2e      	ldr	r3, [pc, #184]	; (800789c <HAL_RCC_OscConfig+0x424>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0f0      	beq.n	80077d0 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d106      	bne.n	8007804 <HAL_RCC_OscConfig+0x38c>
 80077f6:	4b26      	ldr	r3, [pc, #152]	; (8007890 <HAL_RCC_OscConfig+0x418>)
 80077f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fa:	4a25      	ldr	r2, [pc, #148]	; (8007890 <HAL_RCC_OscConfig+0x418>)
 80077fc:	f043 0301 	orr.w	r3, r3, #1
 8007800:	6713      	str	r3, [r2, #112]	; 0x70
 8007802:	e01c      	b.n	800783e <HAL_RCC_OscConfig+0x3c6>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	2b05      	cmp	r3, #5
 800780a:	d10c      	bne.n	8007826 <HAL_RCC_OscConfig+0x3ae>
 800780c:	4b20      	ldr	r3, [pc, #128]	; (8007890 <HAL_RCC_OscConfig+0x418>)
 800780e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007810:	4a1f      	ldr	r2, [pc, #124]	; (8007890 <HAL_RCC_OscConfig+0x418>)
 8007812:	f043 0304 	orr.w	r3, r3, #4
 8007816:	6713      	str	r3, [r2, #112]	; 0x70
 8007818:	4b1d      	ldr	r3, [pc, #116]	; (8007890 <HAL_RCC_OscConfig+0x418>)
 800781a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781c:	4a1c      	ldr	r2, [pc, #112]	; (8007890 <HAL_RCC_OscConfig+0x418>)
 800781e:	f043 0301 	orr.w	r3, r3, #1
 8007822:	6713      	str	r3, [r2, #112]	; 0x70
 8007824:	e00b      	b.n	800783e <HAL_RCC_OscConfig+0x3c6>
 8007826:	4b1a      	ldr	r3, [pc, #104]	; (8007890 <HAL_RCC_OscConfig+0x418>)
 8007828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800782a:	4a19      	ldr	r2, [pc, #100]	; (8007890 <HAL_RCC_OscConfig+0x418>)
 800782c:	f023 0301 	bic.w	r3, r3, #1
 8007830:	6713      	str	r3, [r2, #112]	; 0x70
 8007832:	4b17      	ldr	r3, [pc, #92]	; (8007890 <HAL_RCC_OscConfig+0x418>)
 8007834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007836:	4a16      	ldr	r2, [pc, #88]	; (8007890 <HAL_RCC_OscConfig+0x418>)
 8007838:	f023 0304 	bic.w	r3, r3, #4
 800783c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d015      	beq.n	8007872 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007846:	f7fb fc75 	bl	8003134 <HAL_GetTick>
 800784a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800784c:	e00a      	b.n	8007864 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800784e:	f7fb fc71 	bl	8003134 <HAL_GetTick>
 8007852:	4602      	mov	r2, r0
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	f241 3288 	movw	r2, #5000	; 0x1388
 800785c:	4293      	cmp	r3, r2
 800785e:	d901      	bls.n	8007864 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e127      	b.n	8007ab4 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007864:	4b0a      	ldr	r3, [pc, #40]	; (8007890 <HAL_RCC_OscConfig+0x418>)
 8007866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007868:	f003 0302 	and.w	r3, r3, #2
 800786c:	2b00      	cmp	r3, #0
 800786e:	d0ee      	beq.n	800784e <HAL_RCC_OscConfig+0x3d6>
 8007870:	e01c      	b.n	80078ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007872:	f7fb fc5f 	bl	8003134 <HAL_GetTick>
 8007876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007878:	e012      	b.n	80078a0 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800787a:	f7fb fc5b 	bl	8003134 <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	f241 3288 	movw	r2, #5000	; 0x1388
 8007888:	4293      	cmp	r3, r2
 800788a:	d909      	bls.n	80078a0 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e111      	b.n	8007ab4 <HAL_RCC_OscConfig+0x63c>
 8007890:	40023800 	.word	0x40023800
 8007894:	42470e80 	.word	0x42470e80
 8007898:	0800efb8 	.word	0x0800efb8
 800789c:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078a0:	4b86      	ldr	r3, [pc, #536]	; (8007abc <HAL_RCC_OscConfig+0x644>)
 80078a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a4:	f003 0302 	and.w	r3, r3, #2
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1e6      	bne.n	800787a <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078ac:	7dfb      	ldrb	r3, [r7, #23]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d105      	bne.n	80078be <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078b2:	4b82      	ldr	r3, [pc, #520]	; (8007abc <HAL_RCC_OscConfig+0x644>)
 80078b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b6:	4a81      	ldr	r2, [pc, #516]	; (8007abc <HAL_RCC_OscConfig+0x644>)
 80078b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00c      	beq.n	80078e0 <HAL_RCC_OscConfig+0x468>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d008      	beq.n	80078e0 <HAL_RCC_OscConfig+0x468>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d004      	beq.n	80078e0 <HAL_RCC_OscConfig+0x468>
 80078d6:	f240 11cd 	movw	r1, #461	; 0x1cd
 80078da:	4879      	ldr	r0, [pc, #484]	; (8007ac0 <HAL_RCC_OscConfig+0x648>)
 80078dc:	f7fa fd67 	bl	80023ae <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 80e4 	beq.w	8007ab2 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80078ea:	4b74      	ldr	r3, [pc, #464]	; (8007abc <HAL_RCC_OscConfig+0x644>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f003 030c 	and.w	r3, r3, #12
 80078f2:	2b08      	cmp	r3, #8
 80078f4:	f000 80a5 	beq.w	8007a42 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	f040 8089 	bne.w	8007a14 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	69db      	ldr	r3, [r3, #28]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d009      	beq.n	800791e <HAL_RCC_OscConfig+0x4a6>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	69db      	ldr	r3, [r3, #28]
 800790e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007912:	d004      	beq.n	800791e <HAL_RCC_OscConfig+0x4a6>
 8007914:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8007918:	4869      	ldr	r0, [pc, #420]	; (8007ac0 <HAL_RCC_OscConfig+0x648>)
 800791a:	f7fa fd48 	bl	80023ae <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	2b3f      	cmp	r3, #63	; 0x3f
 8007924:	d904      	bls.n	8007930 <HAL_RCC_OscConfig+0x4b8>
 8007926:	f240 11d7 	movw	r1, #471	; 0x1d7
 800792a:	4865      	ldr	r0, [pc, #404]	; (8007ac0 <HAL_RCC_OscConfig+0x648>)
 800792c:	f7fa fd3f 	bl	80023ae <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007934:	2b31      	cmp	r3, #49	; 0x31
 8007936:	d904      	bls.n	8007942 <HAL_RCC_OscConfig+0x4ca>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007940:	d904      	bls.n	800794c <HAL_RCC_OscConfig+0x4d4>
 8007942:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8007946:	485e      	ldr	r0, [pc, #376]	; (8007ac0 <HAL_RCC_OscConfig+0x648>)
 8007948:	f7fa fd31 	bl	80023ae <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007950:	2b02      	cmp	r3, #2
 8007952:	d010      	beq.n	8007976 <HAL_RCC_OscConfig+0x4fe>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007958:	2b04      	cmp	r3, #4
 800795a:	d00c      	beq.n	8007976 <HAL_RCC_OscConfig+0x4fe>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007960:	2b06      	cmp	r3, #6
 8007962:	d008      	beq.n	8007976 <HAL_RCC_OscConfig+0x4fe>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007968:	2b08      	cmp	r3, #8
 800796a:	d004      	beq.n	8007976 <HAL_RCC_OscConfig+0x4fe>
 800796c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007970:	4853      	ldr	r0, [pc, #332]	; (8007ac0 <HAL_RCC_OscConfig+0x648>)
 8007972:	f7fa fd1c 	bl	80023ae <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797a:	2b01      	cmp	r3, #1
 800797c:	d903      	bls.n	8007986 <HAL_RCC_OscConfig+0x50e>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007982:	2b0f      	cmp	r3, #15
 8007984:	d904      	bls.n	8007990 <HAL_RCC_OscConfig+0x518>
 8007986:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800798a:	484d      	ldr	r0, [pc, #308]	; (8007ac0 <HAL_RCC_OscConfig+0x648>)
 800798c:	f7fa fd0f 	bl	80023ae <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007990:	4b4c      	ldr	r3, [pc, #304]	; (8007ac4 <HAL_RCC_OscConfig+0x64c>)
 8007992:	2200      	movs	r2, #0
 8007994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007996:	f7fb fbcd 	bl	8003134 <HAL_GetTick>
 800799a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800799c:	e008      	b.n	80079b0 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800799e:	f7fb fbc9 	bl	8003134 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d901      	bls.n	80079b0 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e081      	b.n	8007ab4 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079b0:	4b42      	ldr	r3, [pc, #264]	; (8007abc <HAL_RCC_OscConfig+0x644>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1f0      	bne.n	800799e <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	69da      	ldr	r2, [r3, #28]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a1b      	ldr	r3, [r3, #32]
 80079c4:	431a      	orrs	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	019b      	lsls	r3, r3, #6
 80079cc:	431a      	orrs	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d2:	085b      	lsrs	r3, r3, #1
 80079d4:	3b01      	subs	r3, #1
 80079d6:	041b      	lsls	r3, r3, #16
 80079d8:	431a      	orrs	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079de:	061b      	lsls	r3, r3, #24
 80079e0:	4936      	ldr	r1, [pc, #216]	; (8007abc <HAL_RCC_OscConfig+0x644>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079e6:	4b37      	ldr	r3, [pc, #220]	; (8007ac4 <HAL_RCC_OscConfig+0x64c>)
 80079e8:	2201      	movs	r2, #1
 80079ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079ec:	f7fb fba2 	bl	8003134 <HAL_GetTick>
 80079f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079f2:	e008      	b.n	8007a06 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079f4:	f7fb fb9e 	bl	8003134 <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d901      	bls.n	8007a06 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e056      	b.n	8007ab4 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a06:	4b2d      	ldr	r3, [pc, #180]	; (8007abc <HAL_RCC_OscConfig+0x644>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d0f0      	beq.n	80079f4 <HAL_RCC_OscConfig+0x57c>
 8007a12:	e04e      	b.n	8007ab2 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a14:	4b2b      	ldr	r3, [pc, #172]	; (8007ac4 <HAL_RCC_OscConfig+0x64c>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a1a:	f7fb fb8b 	bl	8003134 <HAL_GetTick>
 8007a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a20:	e008      	b.n	8007a34 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a22:	f7fb fb87 	bl	8003134 <HAL_GetTick>
 8007a26:	4602      	mov	r2, r0
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d901      	bls.n	8007a34 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8007a30:	2303      	movs	r3, #3
 8007a32:	e03f      	b.n	8007ab4 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a34:	4b21      	ldr	r3, [pc, #132]	; (8007abc <HAL_RCC_OscConfig+0x644>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1f0      	bne.n	8007a22 <HAL_RCC_OscConfig+0x5aa>
 8007a40:	e037      	b.n	8007ab2 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d101      	bne.n	8007a4e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e032      	b.n	8007ab4 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a4e:	4b1b      	ldr	r3, [pc, #108]	; (8007abc <HAL_RCC_OscConfig+0x644>)
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d028      	beq.n	8007aae <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d121      	bne.n	8007aae <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d11a      	bne.n	8007aae <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a7e:	4013      	ands	r3, r2
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a84:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d111      	bne.n	8007aae <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a94:	085b      	lsrs	r3, r3, #1
 8007a96:	3b01      	subs	r3, #1
 8007a98:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d107      	bne.n	8007aae <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d001      	beq.n	8007ab2 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e000      	b.n	8007ab4 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3718      	adds	r7, #24
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	40023800 	.word	0x40023800
 8007ac0:	0800efb8 	.word	0x0800efb8
 8007ac4:	42470060 	.word	0x42470060

08007ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e174      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d003      	beq.n	8007aec <HAL_RCC_ClockConfig+0x24>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b0f      	cmp	r3, #15
 8007aea:	d904      	bls.n	8007af6 <HAL_RCC_ClockConfig+0x2e>
 8007aec:	f240 215a 	movw	r1, #602	; 0x25a
 8007af0:	487b      	ldr	r0, [pc, #492]	; (8007ce0 <HAL_RCC_ClockConfig+0x218>)
 8007af2:	f7fa fc5c 	bl	80023ae <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d019      	beq.n	8007b30 <HAL_RCC_ClockConfig+0x68>
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d016      	beq.n	8007b30 <HAL_RCC_ClockConfig+0x68>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d013      	beq.n	8007b30 <HAL_RCC_ClockConfig+0x68>
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d010      	beq.n	8007b30 <HAL_RCC_ClockConfig+0x68>
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b04      	cmp	r3, #4
 8007b12:	d00d      	beq.n	8007b30 <HAL_RCC_ClockConfig+0x68>
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	2b05      	cmp	r3, #5
 8007b18:	d00a      	beq.n	8007b30 <HAL_RCC_ClockConfig+0x68>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b06      	cmp	r3, #6
 8007b1e:	d007      	beq.n	8007b30 <HAL_RCC_ClockConfig+0x68>
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2b07      	cmp	r3, #7
 8007b24:	d004      	beq.n	8007b30 <HAL_RCC_ClockConfig+0x68>
 8007b26:	f240 215b 	movw	r1, #603	; 0x25b
 8007b2a:	486d      	ldr	r0, [pc, #436]	; (8007ce0 <HAL_RCC_ClockConfig+0x218>)
 8007b2c:	f7fa fc3f 	bl	80023ae <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b30:	4b6c      	ldr	r3, [pc, #432]	; (8007ce4 <HAL_RCC_ClockConfig+0x21c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 0307 	and.w	r3, r3, #7
 8007b38:	683a      	ldr	r2, [r7, #0]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d90c      	bls.n	8007b58 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b3e:	4b69      	ldr	r3, [pc, #420]	; (8007ce4 <HAL_RCC_ClockConfig+0x21c>)
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	b2d2      	uxtb	r2, r2
 8007b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b46:	4b67      	ldr	r3, [pc, #412]	; (8007ce4 <HAL_RCC_ClockConfig+0x21c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0307 	and.w	r3, r3, #7
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d001      	beq.n	8007b58 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e136      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0302 	and.w	r3, r3, #2
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d049      	beq.n	8007bf8 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0304 	and.w	r3, r3, #4
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d005      	beq.n	8007b7c <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b70:	4b5d      	ldr	r3, [pc, #372]	; (8007ce8 <HAL_RCC_ClockConfig+0x220>)
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	4a5c      	ldr	r2, [pc, #368]	; (8007ce8 <HAL_RCC_ClockConfig+0x220>)
 8007b76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007b7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0308 	and.w	r3, r3, #8
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d005      	beq.n	8007b94 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b88:	4b57      	ldr	r3, [pc, #348]	; (8007ce8 <HAL_RCC_ClockConfig+0x220>)
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	4a56      	ldr	r2, [pc, #344]	; (8007ce8 <HAL_RCC_ClockConfig+0x220>)
 8007b8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007b92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d024      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x11e>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	2b80      	cmp	r3, #128	; 0x80
 8007ba2:	d020      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x11e>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	2b90      	cmp	r3, #144	; 0x90
 8007baa:	d01c      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x11e>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	2ba0      	cmp	r3, #160	; 0xa0
 8007bb2:	d018      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x11e>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	2bb0      	cmp	r3, #176	; 0xb0
 8007bba:	d014      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x11e>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	2bc0      	cmp	r3, #192	; 0xc0
 8007bc2:	d010      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x11e>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	2bd0      	cmp	r3, #208	; 0xd0
 8007bca:	d00c      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x11e>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	2be0      	cmp	r3, #224	; 0xe0
 8007bd2:	d008      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x11e>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	2bf0      	cmp	r3, #240	; 0xf0
 8007bda:	d004      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x11e>
 8007bdc:	f240 217e 	movw	r1, #638	; 0x27e
 8007be0:	483f      	ldr	r0, [pc, #252]	; (8007ce0 <HAL_RCC_ClockConfig+0x218>)
 8007be2:	f7fa fbe4 	bl	80023ae <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007be6:	4b40      	ldr	r3, [pc, #256]	; (8007ce8 <HAL_RCC_ClockConfig+0x220>)
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	493d      	ldr	r1, [pc, #244]	; (8007ce8 <HAL_RCC_ClockConfig+0x220>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0301 	and.w	r3, r3, #1
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d059      	beq.n	8007cb8 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d010      	beq.n	8007c2e <HAL_RCC_ClockConfig+0x166>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d00c      	beq.n	8007c2e <HAL_RCC_ClockConfig+0x166>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d008      	beq.n	8007c2e <HAL_RCC_ClockConfig+0x166>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	2b03      	cmp	r3, #3
 8007c22:	d004      	beq.n	8007c2e <HAL_RCC_ClockConfig+0x166>
 8007c24:	f240 2185 	movw	r1, #645	; 0x285
 8007c28:	482d      	ldr	r0, [pc, #180]	; (8007ce0 <HAL_RCC_ClockConfig+0x218>)
 8007c2a:	f7fa fbc0 	bl	80023ae <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d107      	bne.n	8007c46 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c36:	4b2c      	ldr	r3, [pc, #176]	; (8007ce8 <HAL_RCC_ClockConfig+0x220>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d119      	bne.n	8007c76 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e0bf      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d003      	beq.n	8007c56 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	d107      	bne.n	8007c66 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c56:	4b24      	ldr	r3, [pc, #144]	; (8007ce8 <HAL_RCC_ClockConfig+0x220>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d109      	bne.n	8007c76 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e0af      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c66:	4b20      	ldr	r3, [pc, #128]	; (8007ce8 <HAL_RCC_ClockConfig+0x220>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e0a7      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c76:	4b1c      	ldr	r3, [pc, #112]	; (8007ce8 <HAL_RCC_ClockConfig+0x220>)
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f023 0203 	bic.w	r2, r3, #3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	4919      	ldr	r1, [pc, #100]	; (8007ce8 <HAL_RCC_ClockConfig+0x220>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c88:	f7fb fa54 	bl	8003134 <HAL_GetTick>
 8007c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c8e:	e00a      	b.n	8007ca6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c90:	f7fb fa50 	bl	8003134 <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d901      	bls.n	8007ca6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e08f      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ca6:	4b10      	ldr	r3, [pc, #64]	; (8007ce8 <HAL_RCC_ClockConfig+0x220>)
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 020c 	and.w	r2, r3, #12
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d1eb      	bne.n	8007c90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007cb8:	4b0a      	ldr	r3, [pc, #40]	; (8007ce4 <HAL_RCC_ClockConfig+0x21c>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0307 	and.w	r3, r3, #7
 8007cc0:	683a      	ldr	r2, [r7, #0]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d212      	bcs.n	8007cec <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cc6:	4b07      	ldr	r3, [pc, #28]	; (8007ce4 <HAL_RCC_ClockConfig+0x21c>)
 8007cc8:	683a      	ldr	r2, [r7, #0]
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cce:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <HAL_RCC_ClockConfig+0x21c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0307 	and.w	r3, r3, #7
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d007      	beq.n	8007cec <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e072      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x2fe>
 8007ce0:	0800efb8 	.word	0x0800efb8
 8007ce4:	40023c00 	.word	0x40023c00
 8007ce8:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0304 	and.w	r3, r3, #4
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d025      	beq.n	8007d44 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d018      	beq.n	8007d32 <HAL_RCC_ClockConfig+0x26a>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d08:	d013      	beq.n	8007d32 <HAL_RCC_ClockConfig+0x26a>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d12:	d00e      	beq.n	8007d32 <HAL_RCC_ClockConfig+0x26a>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007d1c:	d009      	beq.n	8007d32 <HAL_RCC_ClockConfig+0x26a>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007d26:	d004      	beq.n	8007d32 <HAL_RCC_ClockConfig+0x26a>
 8007d28:	f240 21c3 	movw	r1, #707	; 0x2c3
 8007d2c:	4828      	ldr	r0, [pc, #160]	; (8007dd0 <HAL_RCC_ClockConfig+0x308>)
 8007d2e:	f7fa fb3e 	bl	80023ae <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d32:	4b28      	ldr	r3, [pc, #160]	; (8007dd4 <HAL_RCC_ClockConfig+0x30c>)
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	4925      	ldr	r1, [pc, #148]	; (8007dd4 <HAL_RCC_ClockConfig+0x30c>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0308 	and.w	r3, r3, #8
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d026      	beq.n	8007d9e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d018      	beq.n	8007d8a <HAL_RCC_ClockConfig+0x2c2>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d60:	d013      	beq.n	8007d8a <HAL_RCC_ClockConfig+0x2c2>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d6a:	d00e      	beq.n	8007d8a <HAL_RCC_ClockConfig+0x2c2>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007d74:	d009      	beq.n	8007d8a <HAL_RCC_ClockConfig+0x2c2>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007d7e:	d004      	beq.n	8007d8a <HAL_RCC_ClockConfig+0x2c2>
 8007d80:	f240 21ca 	movw	r1, #714	; 0x2ca
 8007d84:	4812      	ldr	r0, [pc, #72]	; (8007dd0 <HAL_RCC_ClockConfig+0x308>)
 8007d86:	f7fa fb12 	bl	80023ae <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d8a:	4b12      	ldr	r3, [pc, #72]	; (8007dd4 <HAL_RCC_ClockConfig+0x30c>)
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	00db      	lsls	r3, r3, #3
 8007d98:	490e      	ldr	r1, [pc, #56]	; (8007dd4 <HAL_RCC_ClockConfig+0x30c>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d9e:	f000 f821 	bl	8007de4 <HAL_RCC_GetSysClockFreq>
 8007da2:	4602      	mov	r2, r0
 8007da4:	4b0b      	ldr	r3, [pc, #44]	; (8007dd4 <HAL_RCC_ClockConfig+0x30c>)
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	091b      	lsrs	r3, r3, #4
 8007daa:	f003 030f 	and.w	r3, r3, #15
 8007dae:	490a      	ldr	r1, [pc, #40]	; (8007dd8 <HAL_RCC_ClockConfig+0x310>)
 8007db0:	5ccb      	ldrb	r3, [r1, r3]
 8007db2:	fa22 f303 	lsr.w	r3, r2, r3
 8007db6:	4a09      	ldr	r2, [pc, #36]	; (8007ddc <HAL_RCC_ClockConfig+0x314>)
 8007db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007dba:	4b09      	ldr	r3, [pc, #36]	; (8007de0 <HAL_RCC_ClockConfig+0x318>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fa fca8 	bl	8002714 <HAL_InitTick>

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	0800efb8 	.word	0x0800efb8
 8007dd4:	40023800 	.word	0x40023800
 8007dd8:	0800f3c4 	.word	0x0800f3c4
 8007ddc:	20000004 	.word	0x20000004
 8007de0:	20000008 	.word	0x20000008

08007de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007de8:	b094      	sub	sp, #80	; 0x50
 8007dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007dec:	2300      	movs	r3, #0
 8007dee:	647b      	str	r3, [r7, #68]	; 0x44
 8007df0:	2300      	movs	r3, #0
 8007df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007df4:	2300      	movs	r3, #0
 8007df6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dfc:	4b79      	ldr	r3, [pc, #484]	; (8007fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	f003 030c 	and.w	r3, r3, #12
 8007e04:	2b08      	cmp	r3, #8
 8007e06:	d00d      	beq.n	8007e24 <HAL_RCC_GetSysClockFreq+0x40>
 8007e08:	2b08      	cmp	r3, #8
 8007e0a:	f200 80e1 	bhi.w	8007fd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <HAL_RCC_GetSysClockFreq+0x34>
 8007e12:	2b04      	cmp	r3, #4
 8007e14:	d003      	beq.n	8007e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8007e16:	e0db      	b.n	8007fd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e18:	4b73      	ldr	r3, [pc, #460]	; (8007fe8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007e1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007e1c:	e0db      	b.n	8007fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e1e:	4b73      	ldr	r3, [pc, #460]	; (8007fec <HAL_RCC_GetSysClockFreq+0x208>)
 8007e20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007e22:	e0d8      	b.n	8007fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e24:	4b6f      	ldr	r3, [pc, #444]	; (8007fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e2e:	4b6d      	ldr	r3, [pc, #436]	; (8007fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d063      	beq.n	8007f02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e3a:	4b6a      	ldr	r3, [pc, #424]	; (8007fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	099b      	lsrs	r3, r3, #6
 8007e40:	2200      	movs	r2, #0
 8007e42:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8007e4e:	2300      	movs	r3, #0
 8007e50:	637b      	str	r3, [r7, #52]	; 0x34
 8007e52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007e56:	4622      	mov	r2, r4
 8007e58:	462b      	mov	r3, r5
 8007e5a:	f04f 0000 	mov.w	r0, #0
 8007e5e:	f04f 0100 	mov.w	r1, #0
 8007e62:	0159      	lsls	r1, r3, #5
 8007e64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e68:	0150      	lsls	r0, r2, #5
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4621      	mov	r1, r4
 8007e70:	1a51      	subs	r1, r2, r1
 8007e72:	6139      	str	r1, [r7, #16]
 8007e74:	4629      	mov	r1, r5
 8007e76:	eb63 0301 	sbc.w	r3, r3, r1
 8007e7a:	617b      	str	r3, [r7, #20]
 8007e7c:	f04f 0200 	mov.w	r2, #0
 8007e80:	f04f 0300 	mov.w	r3, #0
 8007e84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e88:	4659      	mov	r1, fp
 8007e8a:	018b      	lsls	r3, r1, #6
 8007e8c:	4651      	mov	r1, sl
 8007e8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e92:	4651      	mov	r1, sl
 8007e94:	018a      	lsls	r2, r1, #6
 8007e96:	4651      	mov	r1, sl
 8007e98:	ebb2 0801 	subs.w	r8, r2, r1
 8007e9c:	4659      	mov	r1, fp
 8007e9e:	eb63 0901 	sbc.w	r9, r3, r1
 8007ea2:	f04f 0200 	mov.w	r2, #0
 8007ea6:	f04f 0300 	mov.w	r3, #0
 8007eaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007eae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007eb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007eb6:	4690      	mov	r8, r2
 8007eb8:	4699      	mov	r9, r3
 8007eba:	4623      	mov	r3, r4
 8007ebc:	eb18 0303 	adds.w	r3, r8, r3
 8007ec0:	60bb      	str	r3, [r7, #8]
 8007ec2:	462b      	mov	r3, r5
 8007ec4:	eb49 0303 	adc.w	r3, r9, r3
 8007ec8:	60fb      	str	r3, [r7, #12]
 8007eca:	f04f 0200 	mov.w	r2, #0
 8007ece:	f04f 0300 	mov.w	r3, #0
 8007ed2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	024b      	lsls	r3, r1, #9
 8007eda:	4621      	mov	r1, r4
 8007edc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	024a      	lsls	r2, r1, #9
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eea:	2200      	movs	r2, #0
 8007eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ef0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ef4:	f7f8 f974 	bl	80001e0 <__aeabi_uldivmod>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4613      	mov	r3, r2
 8007efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f00:	e058      	b.n	8007fb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f02:	4b38      	ldr	r3, [pc, #224]	; (8007fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	099b      	lsrs	r3, r3, #6
 8007f08:	2200      	movs	r2, #0
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007f12:	623b      	str	r3, [r7, #32]
 8007f14:	2300      	movs	r3, #0
 8007f16:	627b      	str	r3, [r7, #36]	; 0x24
 8007f18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007f1c:	4642      	mov	r2, r8
 8007f1e:	464b      	mov	r3, r9
 8007f20:	f04f 0000 	mov.w	r0, #0
 8007f24:	f04f 0100 	mov.w	r1, #0
 8007f28:	0159      	lsls	r1, r3, #5
 8007f2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f2e:	0150      	lsls	r0, r2, #5
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4641      	mov	r1, r8
 8007f36:	ebb2 0a01 	subs.w	sl, r2, r1
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007f40:	f04f 0200 	mov.w	r2, #0
 8007f44:	f04f 0300 	mov.w	r3, #0
 8007f48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007f4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007f50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007f54:	ebb2 040a 	subs.w	r4, r2, sl
 8007f58:	eb63 050b 	sbc.w	r5, r3, fp
 8007f5c:	f04f 0200 	mov.w	r2, #0
 8007f60:	f04f 0300 	mov.w	r3, #0
 8007f64:	00eb      	lsls	r3, r5, #3
 8007f66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f6a:	00e2      	lsls	r2, r4, #3
 8007f6c:	4614      	mov	r4, r2
 8007f6e:	461d      	mov	r5, r3
 8007f70:	4643      	mov	r3, r8
 8007f72:	18e3      	adds	r3, r4, r3
 8007f74:	603b      	str	r3, [r7, #0]
 8007f76:	464b      	mov	r3, r9
 8007f78:	eb45 0303 	adc.w	r3, r5, r3
 8007f7c:	607b      	str	r3, [r7, #4]
 8007f7e:	f04f 0200 	mov.w	r2, #0
 8007f82:	f04f 0300 	mov.w	r3, #0
 8007f86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	028b      	lsls	r3, r1, #10
 8007f8e:	4621      	mov	r1, r4
 8007f90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f94:	4621      	mov	r1, r4
 8007f96:	028a      	lsls	r2, r1, #10
 8007f98:	4610      	mov	r0, r2
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	61bb      	str	r3, [r7, #24]
 8007fa2:	61fa      	str	r2, [r7, #28]
 8007fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fa8:	f7f8 f91a 	bl	80001e0 <__aeabi_uldivmod>
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007fb4:	4b0b      	ldr	r3, [pc, #44]	; (8007fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	0c1b      	lsrs	r3, r3, #16
 8007fba:	f003 0303 	and.w	r3, r3, #3
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	005b      	lsls	r3, r3, #1
 8007fc2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007fc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007fce:	e002      	b.n	8007fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007fd0:	4b05      	ldr	r3, [pc, #20]	; (8007fe8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007fd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3750      	adds	r7, #80	; 0x50
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fe2:	bf00      	nop
 8007fe4:	40023800 	.word	0x40023800
 8007fe8:	00f42400 	.word	0x00f42400
 8007fec:	007a1200 	.word	0x007a1200

08007ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ff4:	4b03      	ldr	r3, [pc, #12]	; (8008004 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	20000004 	.word	0x20000004

08008008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800800c:	f7ff fff0 	bl	8007ff0 <HAL_RCC_GetHCLKFreq>
 8008010:	4602      	mov	r2, r0
 8008012:	4b05      	ldr	r3, [pc, #20]	; (8008028 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	0a9b      	lsrs	r3, r3, #10
 8008018:	f003 0307 	and.w	r3, r3, #7
 800801c:	4903      	ldr	r1, [pc, #12]	; (800802c <HAL_RCC_GetPCLK1Freq+0x24>)
 800801e:	5ccb      	ldrb	r3, [r1, r3]
 8008020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008024:	4618      	mov	r0, r3
 8008026:	bd80      	pop	{r7, pc}
 8008028:	40023800 	.word	0x40023800
 800802c:	0800f3d4 	.word	0x0800f3d4

08008030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008034:	f7ff ffdc 	bl	8007ff0 <HAL_RCC_GetHCLKFreq>
 8008038:	4602      	mov	r2, r0
 800803a:	4b05      	ldr	r3, [pc, #20]	; (8008050 <HAL_RCC_GetPCLK2Freq+0x20>)
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	0b5b      	lsrs	r3, r3, #13
 8008040:	f003 0307 	and.w	r3, r3, #7
 8008044:	4903      	ldr	r1, [pc, #12]	; (8008054 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008046:	5ccb      	ldrb	r3, [r1, r3]
 8008048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800804c:	4618      	mov	r0, r3
 800804e:	bd80      	pop	{r7, pc}
 8008050:	40023800 	.word	0x40023800
 8008054:	0800f3d4 	.word	0x0800f3d4

08008058 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	220f      	movs	r2, #15
 8008066:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008068:	4b12      	ldr	r3, [pc, #72]	; (80080b4 <HAL_RCC_GetClockConfig+0x5c>)
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f003 0203 	and.w	r2, r3, #3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008074:	4b0f      	ldr	r3, [pc, #60]	; (80080b4 <HAL_RCC_GetClockConfig+0x5c>)
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008080:	4b0c      	ldr	r3, [pc, #48]	; (80080b4 <HAL_RCC_GetClockConfig+0x5c>)
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800808c:	4b09      	ldr	r3, [pc, #36]	; (80080b4 <HAL_RCC_GetClockConfig+0x5c>)
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	08db      	lsrs	r3, r3, #3
 8008092:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800809a:	4b07      	ldr	r3, [pc, #28]	; (80080b8 <HAL_RCC_GetClockConfig+0x60>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0207 	and.w	r2, r3, #7
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	601a      	str	r2, [r3, #0]
}
 80080a6:	bf00      	nop
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	40023800 	.word	0x40023800
 80080b8:	40023c00 	.word	0x40023c00

080080bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80080c4:	2300      	movs	r3, #0
 80080c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d003      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x20>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b0f      	cmp	r3, #15
 80080da:	d904      	bls.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80080dc:	f640 11d7 	movw	r1, #2519	; 0x9d7
 80080e0:	4834      	ldr	r0, [pc, #208]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80080e2:	f7fa f964 	bl	80023ae <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d105      	bne.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d066      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	2b01      	cmp	r3, #1
 8008104:	d903      	bls.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	2b07      	cmp	r3, #7
 800810c:	d904      	bls.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800810e:	f640 11de 	movw	r1, #2526	; 0x9de
 8008112:	4828      	ldr	r0, [pc, #160]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8008114:	f7fa f94b 	bl	80023ae <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	2b31      	cmp	r3, #49	; 0x31
 800811e:	d904      	bls.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8008128:	d904      	bls.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800812a:	f640 11df 	movw	r1, #2527	; 0x9df
 800812e:	4821      	ldr	r0, [pc, #132]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8008130:	f7fa f93d 	bl	80023ae <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d903      	bls.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	2b3f      	cmp	r3, #63	; 0x3f
 8008142:	d904      	bls.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8008144:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8008148:	481a      	ldr	r0, [pc, #104]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800814a:	f7fa f930 	bl	80023ae <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800814e:	4b1a      	ldr	r3, [pc, #104]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8008150:	2200      	movs	r2, #0
 8008152:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008154:	f7fa ffee 	bl	8003134 <HAL_GetTick>
 8008158:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800815a:	e008      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800815c:	f7fa ffea 	bl	8003134 <HAL_GetTick>
 8008160:	4602      	mov	r2, r0
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	2b02      	cmp	r3, #2
 8008168:	d901      	bls.n	800816e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e1b3      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800816e:	4b13      	ldr	r3, [pc, #76]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1f0      	bne.n	800815c <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	019b      	lsls	r3, r3, #6
 8008184:	431a      	orrs	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	071b      	lsls	r3, r3, #28
 800818c:	490b      	ldr	r1, [pc, #44]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800818e:	4313      	orrs	r3, r2
 8008190:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008194:	4b08      	ldr	r3, [pc, #32]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8008196:	2201      	movs	r2, #1
 8008198:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800819a:	f7fa ffcb 	bl	8003134 <HAL_GetTick>
 800819e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081a0:	e00e      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80081a2:	f7fa ffc7 	bl	8003134 <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d907      	bls.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e190      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80081b4:	0800f02c 	.word	0x0800f02c
 80081b8:	42470068 	.word	0x42470068
 80081bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081c0:	4b88      	ldr	r3, [pc, #544]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d0ea      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0302 	and.w	r3, r3, #2
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 8173 	beq.w	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081e2:	f000 80a6 	beq.w	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ee:	f000 80a0 	beq.w	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	4a7c      	ldr	r2, [pc, #496]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	f000 809a 	beq.w	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	4a7a      	ldr	r2, [pc, #488]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008204:	4293      	cmp	r3, r2
 8008206:	f000 8094 	beq.w	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	4a78      	ldr	r2, [pc, #480]	; (80083f0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8008210:	4293      	cmp	r3, r2
 8008212:	f000 808e 	beq.w	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	4a76      	ldr	r2, [pc, #472]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800821c:	4293      	cmp	r3, r2
 800821e:	f000 8088 	beq.w	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	4a74      	ldr	r2, [pc, #464]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008228:	4293      	cmp	r3, r2
 800822a:	f000 8082 	beq.w	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	4a72      	ldr	r2, [pc, #456]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d07c      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	4a70      	ldr	r2, [pc, #448]	; (8008400 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d077      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	4a6f      	ldr	r2, [pc, #444]	; (8008404 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d072      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	4a6d      	ldr	r2, [pc, #436]	; (8008408 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d06d      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	4a6c      	ldr	r2, [pc, #432]	; (800840c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d068      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	4a6a      	ldr	r2, [pc, #424]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d063      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	4a69      	ldr	r2, [pc, #420]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d05e      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	4a67      	ldr	r2, [pc, #412]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d059      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	4a66      	ldr	r2, [pc, #408]	; (800841c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d054      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	4a64      	ldr	r2, [pc, #400]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d04f      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	4a63      	ldr	r2, [pc, #396]	; (8008424 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d04a      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	4a61      	ldr	r2, [pc, #388]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d045      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	4a60      	ldr	r2, [pc, #384]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d040      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	4a5e      	ldr	r2, [pc, #376]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d03b      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	4a5d      	ldr	r2, [pc, #372]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d036      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	4a5b      	ldr	r2, [pc, #364]	; (8008438 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d031      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	4a5a      	ldr	r2, [pc, #360]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x380>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d02c      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	4a58      	ldr	r2, [pc, #352]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d027      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	4a57      	ldr	r2, [pc, #348]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d022      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	4a55      	ldr	r2, [pc, #340]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d01d      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	4a54      	ldr	r2, [pc, #336]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d018      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	4a52      	ldr	r2, [pc, #328]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d013      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	4a51      	ldr	r2, [pc, #324]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d00e      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	4a4f      	ldr	r2, [pc, #316]	; (8008458 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d009      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	4a4e      	ldr	r2, [pc, #312]	; (800845c <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d004      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008328:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 800832c:	484c      	ldr	r0, [pc, #304]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 800832e:	f7fa f83e 	bl	80023ae <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008332:	2300      	movs	r3, #0
 8008334:	60fb      	str	r3, [r7, #12]
 8008336:	4b2b      	ldr	r3, [pc, #172]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	4a2a      	ldr	r2, [pc, #168]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800833c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008340:	6413      	str	r3, [r2, #64]	; 0x40
 8008342:	4b28      	ldr	r3, [pc, #160]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800834a:	60fb      	str	r3, [r7, #12]
 800834c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800834e:	4b45      	ldr	r3, [pc, #276]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a44      	ldr	r2, [pc, #272]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8008354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008358:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800835a:	f7fa feeb 	bl	8003134 <HAL_GetTick>
 800835e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008360:	e008      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008362:	f7fa fee7 	bl	8003134 <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	2b02      	cmp	r3, #2
 800836e:	d901      	bls.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e0b0      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008374:	4b3b      	ldr	r3, [pc, #236]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800837c:	2b00      	cmp	r3, #0
 800837e:	d0f0      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008380:	4b18      	ldr	r3, [pc, #96]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008388:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d073      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	429a      	cmp	r2, r3
 800839c:	d06c      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800839e:	4b11      	ldr	r3, [pc, #68]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80083a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083a8:	4b2f      	ldr	r3, [pc, #188]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80083aa:	2201      	movs	r2, #1
 80083ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80083ae:	4b2e      	ldr	r3, [pc, #184]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80083b4:	4a0b      	ldr	r2, [pc, #44]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80083ba:	4b0a      	ldr	r3, [pc, #40]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80083bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d158      	bne.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80083c6:	f7fa feb5 	bl	8003134 <HAL_GetTick>
 80083ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083cc:	e04e      	b.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083ce:	f7fa feb1 	bl	8003134 <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083dc:	4293      	cmp	r3, r2
 80083de:	d945      	bls.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e078      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80083e4:	40023800 	.word	0x40023800
 80083e8:	00020300 	.word	0x00020300
 80083ec:	00030300 	.word	0x00030300
 80083f0:	00040300 	.word	0x00040300
 80083f4:	00050300 	.word	0x00050300
 80083f8:	00060300 	.word	0x00060300
 80083fc:	00070300 	.word	0x00070300
 8008400:	00080300 	.word	0x00080300
 8008404:	00090300 	.word	0x00090300
 8008408:	000a0300 	.word	0x000a0300
 800840c:	000b0300 	.word	0x000b0300
 8008410:	000c0300 	.word	0x000c0300
 8008414:	000d0300 	.word	0x000d0300
 8008418:	000e0300 	.word	0x000e0300
 800841c:	000f0300 	.word	0x000f0300
 8008420:	00100300 	.word	0x00100300
 8008424:	00110300 	.word	0x00110300
 8008428:	00120300 	.word	0x00120300
 800842c:	00130300 	.word	0x00130300
 8008430:	00140300 	.word	0x00140300
 8008434:	00150300 	.word	0x00150300
 8008438:	00160300 	.word	0x00160300
 800843c:	00170300 	.word	0x00170300
 8008440:	00180300 	.word	0x00180300
 8008444:	00190300 	.word	0x00190300
 8008448:	001a0300 	.word	0x001a0300
 800844c:	001b0300 	.word	0x001b0300
 8008450:	001c0300 	.word	0x001c0300
 8008454:	001d0300 	.word	0x001d0300
 8008458:	001e0300 	.word	0x001e0300
 800845c:	001f0300 	.word	0x001f0300
 8008460:	0800f02c 	.word	0x0800f02c
 8008464:	40007000 	.word	0x40007000
 8008468:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800846c:	4b1c      	ldr	r3, [pc, #112]	; (80084e0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800846e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008470:	f003 0302 	and.w	r3, r3, #2
 8008474:	2b00      	cmp	r3, #0
 8008476:	d0aa      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008484:	d10d      	bne.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008486:	4b16      	ldr	r3, [pc, #88]	; (80084e0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800849a:	4911      	ldr	r1, [pc, #68]	; (80084e0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800849c:	4313      	orrs	r3, r2
 800849e:	608b      	str	r3, [r1, #8]
 80084a0:	e005      	b.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80084a2:	4b0f      	ldr	r3, [pc, #60]	; (80084e0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	4a0e      	ldr	r2, [pc, #56]	; (80084e0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80084a8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80084ac:	6093      	str	r3, [r2, #8]
 80084ae:	4b0c      	ldr	r3, [pc, #48]	; (80084e0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80084b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084ba:	4909      	ldr	r1, [pc, #36]	; (80084e0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0308 	and.w	r3, r3, #8
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d003      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	7d1a      	ldrb	r2, [r3, #20]
 80084d0:	4b04      	ldr	r3, [pc, #16]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80084d2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	40023800 	.word	0x40023800
 80084e4:	424711e0 	.word	0x424711e0

080084e8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e0e2      	b.n	80086c4 <HAL_RTC_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a72      	ldr	r2, [pc, #456]	; (80086cc <HAL_RTC_Init+0x1e4>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d004      	beq.n	8008512 <HAL_RTC_Init+0x2a>
 8008508:	f44f 7182 	mov.w	r1, #260	; 0x104
 800850c:	4870      	ldr	r0, [pc, #448]	; (80086d0 <HAL_RTC_Init+0x1e8>)
 800850e:	f7f9 ff4e 	bl	80023ae <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	2b40      	cmp	r3, #64	; 0x40
 8008518:	d008      	beq.n	800852c <HAL_RTC_Init+0x44>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d004      	beq.n	800852c <HAL_RTC_Init+0x44>
 8008522:	f240 1105 	movw	r1, #261	; 0x105
 8008526:	486a      	ldr	r0, [pc, #424]	; (80086d0 <HAL_RTC_Init+0x1e8>)
 8008528:	f7f9 ff41 	bl	80023ae <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	2b7f      	cmp	r3, #127	; 0x7f
 8008532:	d904      	bls.n	800853e <HAL_RTC_Init+0x56>
 8008534:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008538:	4865      	ldr	r0, [pc, #404]	; (80086d0 <HAL_RTC_Init+0x1e8>)
 800853a:	f7f9 ff38 	bl	80023ae <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008546:	d304      	bcc.n	8008552 <HAL_RTC_Init+0x6a>
 8008548:	f240 1107 	movw	r1, #263	; 0x107
 800854c:	4860      	ldr	r0, [pc, #384]	; (80086d0 <HAL_RTC_Init+0x1e8>)
 800854e:	f7f9 ff2e 	bl	80023ae <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d013      	beq.n	8008582 <HAL_RTC_Init+0x9a>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008562:	d00e      	beq.n	8008582 <HAL_RTC_Init+0x9a>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800856c:	d009      	beq.n	8008582 <HAL_RTC_Init+0x9a>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008576:	d004      	beq.n	8008582 <HAL_RTC_Init+0x9a>
 8008578:	f44f 7184 	mov.w	r1, #264	; 0x108
 800857c:	4854      	ldr	r0, [pc, #336]	; (80086d0 <HAL_RTC_Init+0x1e8>)
 800857e:	f7f9 ff16 	bl	80023ae <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d009      	beq.n	800859e <HAL_RTC_Init+0xb6>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008592:	d004      	beq.n	800859e <HAL_RTC_Init+0xb6>
 8008594:	f240 1109 	movw	r1, #265	; 0x109
 8008598:	484d      	ldr	r0, [pc, #308]	; (80086d0 <HAL_RTC_Init+0x1e8>)
 800859a:	f7f9 ff08 	bl	80023ae <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d009      	beq.n	80085ba <HAL_RTC_Init+0xd2>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80085ae:	d004      	beq.n	80085ba <HAL_RTC_Init+0xd2>
 80085b0:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80085b4:	4846      	ldr	r0, [pc, #280]	; (80086d0 <HAL_RTC_Init+0x1e8>)
 80085b6:	f7f9 fefa 	bl	80023ae <assert_failed>

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	7f5b      	ldrb	r3, [r3, #29]
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d123      	bne.n	800860c <HAL_RTC_Init+0x124>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a41      	ldr	r2, [pc, #260]	; (80086d4 <HAL_RTC_Init+0x1ec>)
 80085ce:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a41      	ldr	r2, [pc, #260]	; (80086d8 <HAL_RTC_Init+0x1f0>)
 80085d4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a40      	ldr	r2, [pc, #256]	; (80086dc <HAL_RTC_Init+0x1f4>)
 80085da:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a40      	ldr	r2, [pc, #256]	; (80086e0 <HAL_RTC_Init+0x1f8>)
 80085e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a3f      	ldr	r2, [pc, #252]	; (80086e4 <HAL_RTC_Init+0x1fc>)
 80085e6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(RTC_TAMPER2_SUPPORT)
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
#endif /* RTC_TAMPER2_SUPPORT */

    if (hrtc->MspInitCallback == NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d102      	bne.n	80085f6 <HAL_RTC_Init+0x10e>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a3d      	ldr	r2, [pc, #244]	; (80086e8 <HAL_RTC_Init+0x200>)
 80085f4:	635a      	str	r2, [r3, #52]	; 0x34
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	4798      	blx	r3

    if (hrtc->MspDeInitCallback == NULL)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008602:	2b00      	cmp	r3, #0
 8008604:	d102      	bne.n	800860c <HAL_RTC_Init+0x124>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a38      	ldr	r2, [pc, #224]	; (80086ec <HAL_RTC_Init+0x204>)
 800860a:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_RTC_MspInit(hrtc);
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2202      	movs	r2, #2
 8008610:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	22ca      	movs	r2, #202	; 0xca
 8008618:	625a      	str	r2, [r3, #36]	; 0x24
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2253      	movs	r2, #83	; 0x53
 8008620:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fdc8 	bl	80091b8 <RTC_EnterInitMode>
 8008628:	4603      	mov	r3, r0
 800862a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800862c:	7bfb      	ldrb	r3, [r7, #15]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d12c      	bne.n	800868c <HAL_RTC_Init+0x1a4>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	6812      	ldr	r2, [r2, #0]
 800863c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008644:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6899      	ldr	r1, [r3, #8]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	431a      	orrs	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	431a      	orrs	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	430a      	orrs	r2, r1
 8008662:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	68d2      	ldr	r2, [r2, #12]
 800866c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	6919      	ldr	r1, [r3, #16]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	041a      	lsls	r2, r3, #16
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fdcf 	bl	8009226 <RTC_ExitInitMode>
 8008688:	4603      	mov	r3, r0
 800868a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800868c:	7bfb      	ldrb	r3, [r7, #15]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d113      	bne.n	80086ba <HAL_RTC_Init+0x1d2>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80086a0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	699a      	ldr	r2, [r3, #24]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	430a      	orrs	r2, r1
 80086b2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	22ff      	movs	r2, #255	; 0xff
 80086c0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	40002800 	.word	0x40002800
 80086d0:	0800f0a4 	.word	0x0800f0a4
 80086d4:	08009155 	.word	0x08009155
 80086d8:	080094a1 	.word	0x080094a1
 80086dc:	080092e3 	.word	0x080092e3
 80086e0:	0800948d 	.word	0x0800948d
 80086e4:	080092f7 	.word	0x080092f7
 80086e8:	0800250d 	.word	0x0800250d
 80086ec:	08002565 	.word	0x08002565

080086f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80086f0:	b590      	push	{r4, r7, lr}
 80086f2:	b087      	sub	sp, #28
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80086fc:	2300      	movs	r3, #0
 80086fe:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d007      	beq.n	8008716 <HAL_RTC_SetTime+0x26>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d004      	beq.n	8008716 <HAL_RTC_SetTime+0x26>
 800870c:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8008710:	489a      	ldr	r0, [pc, #616]	; (800897c <HAL_RTC_SetTime+0x28c>)
 8008712:	f7f9 fe4c 	bl	80023ae <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800871e:	d00d      	beq.n	800873c <HAL_RTC_SetTime+0x4c>
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008728:	d008      	beq.n	800873c <HAL_RTC_SetTime+0x4c>
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d004      	beq.n	800873c <HAL_RTC_SetTime+0x4c>
 8008732:	f240 21b5 	movw	r1, #693	; 0x2b5
 8008736:	4891      	ldr	r0, [pc, #580]	; (800897c <HAL_RTC_SetTime+0x28c>)
 8008738:	f7f9 fe39 	bl	80023ae <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d009      	beq.n	8008758 <HAL_RTC_SetTime+0x68>
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800874c:	d004      	beq.n	8008758 <HAL_RTC_SetTime+0x68>
 800874e:	f240 21b6 	movw	r1, #694	; 0x2b6
 8008752:	488a      	ldr	r0, [pc, #552]	; (800897c <HAL_RTC_SetTime+0x28c>)
 8008754:	f7f9 fe2b 	bl	80023ae <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	7f1b      	ldrb	r3, [r3, #28]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d101      	bne.n	8008764 <HAL_RTC_SetTime+0x74>
 8008760:	2302      	movs	r3, #2
 8008762:	e107      	b.n	8008974 <HAL_RTC_SetTime+0x284>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2201      	movs	r2, #1
 8008768:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2202      	movs	r2, #2
 800876e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d15c      	bne.n	8008830 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008780:	2b00      	cmp	r3, #0
 8008782:	d01a      	beq.n	80087ba <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <HAL_RTC_SetTime+0xa4>
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	2b0c      	cmp	r3, #12
 8008792:	d904      	bls.n	800879e <HAL_RTC_SetTime+0xae>
 8008794:	f240 21c1 	movw	r1, #705	; 0x2c1
 8008798:	4878      	ldr	r0, [pc, #480]	; (800897c <HAL_RTC_SetTime+0x28c>)
 800879a:	f7f9 fe08 	bl	80023ae <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	78db      	ldrb	r3, [r3, #3]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d015      	beq.n	80087d2 <HAL_RTC_SetTime+0xe2>
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	78db      	ldrb	r3, [r3, #3]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d011      	beq.n	80087d2 <HAL_RTC_SetTime+0xe2>
 80087ae:	f240 21c2 	movw	r1, #706	; 0x2c2
 80087b2:	4872      	ldr	r0, [pc, #456]	; (800897c <HAL_RTC_SetTime+0x28c>)
 80087b4:	f7f9 fdfb 	bl	80023ae <assert_failed>
 80087b8:	e00b      	b.n	80087d2 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2200      	movs	r2, #0
 80087be:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	2b17      	cmp	r3, #23
 80087c6:	d904      	bls.n	80087d2 <HAL_RTC_SetTime+0xe2>
 80087c8:	f240 21c7 	movw	r1, #711	; 0x2c7
 80087cc:	486b      	ldr	r0, [pc, #428]	; (800897c <HAL_RTC_SetTime+0x28c>)
 80087ce:	f7f9 fdee 	bl	80023ae <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	785b      	ldrb	r3, [r3, #1]
 80087d6:	2b3b      	cmp	r3, #59	; 0x3b
 80087d8:	d904      	bls.n	80087e4 <HAL_RTC_SetTime+0xf4>
 80087da:	f240 21c9 	movw	r1, #713	; 0x2c9
 80087de:	4867      	ldr	r0, [pc, #412]	; (800897c <HAL_RTC_SetTime+0x28c>)
 80087e0:	f7f9 fde5 	bl	80023ae <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	789b      	ldrb	r3, [r3, #2]
 80087e8:	2b3b      	cmp	r3, #59	; 0x3b
 80087ea:	d904      	bls.n	80087f6 <HAL_RTC_SetTime+0x106>
 80087ec:	f240 21ca 	movw	r1, #714	; 0x2ca
 80087f0:	4862      	ldr	r0, [pc, #392]	; (800897c <HAL_RTC_SetTime+0x28c>)
 80087f2:	f7f9 fddc 	bl	80023ae <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 fd38 	bl	8009270 <RTC_ByteToBcd2>
 8008800:	4603      	mov	r3, r0
 8008802:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	785b      	ldrb	r3, [r3, #1]
 8008808:	4618      	mov	r0, r3
 800880a:	f000 fd31 	bl	8009270 <RTC_ByteToBcd2>
 800880e:	4603      	mov	r3, r0
 8008810:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008812:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	789b      	ldrb	r3, [r3, #2]
 8008818:	4618      	mov	r0, r3
 800881a:	f000 fd29 	bl	8009270 <RTC_ByteToBcd2>
 800881e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008820:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	78db      	ldrb	r3, [r3, #3]
 8008828:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800882a:	4313      	orrs	r3, r2
 800882c:	617b      	str	r3, [r7, #20]
 800882e:	e062      	b.n	80088f6 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800883a:	2b00      	cmp	r3, #0
 800883c:	d022      	beq.n	8008884 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	4618      	mov	r0, r3
 8008844:	f000 fd31 	bl	80092aa <RTC_Bcd2ToByte>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d007      	beq.n	800885e <HAL_RTC_SetTime+0x16e>
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	4618      	mov	r0, r3
 8008854:	f000 fd29 	bl	80092aa <RTC_Bcd2ToByte>
 8008858:	4603      	mov	r3, r0
 800885a:	2b0c      	cmp	r3, #12
 800885c:	d904      	bls.n	8008868 <HAL_RTC_SetTime+0x178>
 800885e:	f240 21d5 	movw	r1, #725	; 0x2d5
 8008862:	4846      	ldr	r0, [pc, #280]	; (800897c <HAL_RTC_SetTime+0x28c>)
 8008864:	f7f9 fda3 	bl	80023ae <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	78db      	ldrb	r3, [r3, #3]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d019      	beq.n	80088a4 <HAL_RTC_SetTime+0x1b4>
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	78db      	ldrb	r3, [r3, #3]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d015      	beq.n	80088a4 <HAL_RTC_SetTime+0x1b4>
 8008878:	f240 21d6 	movw	r1, #726	; 0x2d6
 800887c:	483f      	ldr	r0, [pc, #252]	; (800897c <HAL_RTC_SetTime+0x28c>)
 800887e:	f7f9 fd96 	bl	80023ae <assert_failed>
 8008882:	e00f      	b.n	80088a4 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2200      	movs	r2, #0
 8008888:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	4618      	mov	r0, r3
 8008890:	f000 fd0b 	bl	80092aa <RTC_Bcd2ToByte>
 8008894:	4603      	mov	r3, r0
 8008896:	2b17      	cmp	r3, #23
 8008898:	d904      	bls.n	80088a4 <HAL_RTC_SetTime+0x1b4>
 800889a:	f240 21db 	movw	r1, #731	; 0x2db
 800889e:	4837      	ldr	r0, [pc, #220]	; (800897c <HAL_RTC_SetTime+0x28c>)
 80088a0:	f7f9 fd85 	bl	80023ae <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	785b      	ldrb	r3, [r3, #1]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f000 fcfe 	bl	80092aa <RTC_Bcd2ToByte>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b3b      	cmp	r3, #59	; 0x3b
 80088b2:	d904      	bls.n	80088be <HAL_RTC_SetTime+0x1ce>
 80088b4:	f240 21dd 	movw	r1, #733	; 0x2dd
 80088b8:	4830      	ldr	r0, [pc, #192]	; (800897c <HAL_RTC_SetTime+0x28c>)
 80088ba:	f7f9 fd78 	bl	80023ae <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	789b      	ldrb	r3, [r3, #2]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 fcf1 	bl	80092aa <RTC_Bcd2ToByte>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b3b      	cmp	r3, #59	; 0x3b
 80088cc:	d904      	bls.n	80088d8 <HAL_RTC_SetTime+0x1e8>
 80088ce:	f240 21de 	movw	r1, #734	; 0x2de
 80088d2:	482a      	ldr	r0, [pc, #168]	; (800897c <HAL_RTC_SetTime+0x28c>)
 80088d4:	f7f9 fd6b 	bl	80023ae <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	785b      	ldrb	r3, [r3, #1]
 80088e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80088e4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80088ea:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	78db      	ldrb	r3, [r3, #3]
 80088f0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80088f2:	4313      	orrs	r3, r2
 80088f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	22ca      	movs	r2, #202	; 0xca
 80088fc:	625a      	str	r2, [r3, #36]	; 0x24
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2253      	movs	r2, #83	; 0x53
 8008904:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f000 fc56 	bl	80091b8 <RTC_EnterInitMode>
 800890c:	4603      	mov	r3, r0
 800890e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008910:	7cfb      	ldrb	r3, [r7, #19]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d120      	bne.n	8008958 <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008920:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008924:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	689a      	ldr	r2, [r3, #8]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008934:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6899      	ldr	r1, [r3, #8]
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	68da      	ldr	r2, [r3, #12]
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	431a      	orrs	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f000 fc69 	bl	8009226 <RTC_ExitInitMode>
 8008954:	4603      	mov	r3, r0
 8008956:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008958:	7cfb      	ldrb	r3, [r7, #19]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d102      	bne.n	8008964 <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2201      	movs	r2, #1
 8008962:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	22ff      	movs	r2, #255	; 0xff
 800896a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	771a      	strb	r2, [r3, #28]

  return status;
 8008972:	7cfb      	ldrb	r3, [r7, #19]
}
 8008974:	4618      	mov	r0, r3
 8008976:	371c      	adds	r7, #28
 8008978:	46bd      	mov	sp, r7
 800897a:	bd90      	pop	{r4, r7, pc}
 800897c:	0800f0a4 	.word	0x0800f0a4

08008980 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008980:	b590      	push	{r4, r7, lr}
 8008982:	b087      	sub	sp, #28
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d007      	beq.n	80089a6 <HAL_RTC_SetDate+0x26>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d004      	beq.n	80089a6 <HAL_RTC_SetDate+0x26>
 800899c:	f240 3153 	movw	r1, #851	; 0x353
 80089a0:	487c      	ldr	r0, [pc, #496]	; (8008b94 <HAL_RTC_SetDate+0x214>)
 80089a2:	f7f9 fd04 	bl	80023ae <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	7f1b      	ldrb	r3, [r3, #28]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d101      	bne.n	80089b2 <HAL_RTC_SetDate+0x32>
 80089ae:	2302      	movs	r3, #2
 80089b0:	e0ec      	b.n	8008b8c <HAL_RTC_SetDate+0x20c>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2201      	movs	r2, #1
 80089b6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2202      	movs	r2, #2
 80089bc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10e      	bne.n	80089e2 <HAL_RTC_SetDate+0x62>
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	785b      	ldrb	r3, [r3, #1]
 80089c8:	f003 0310 	and.w	r3, r3, #16
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d008      	beq.n	80089e2 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	785b      	ldrb	r3, [r3, #1]
 80089d4:	f023 0310 	bic.w	r3, r3, #16
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	330a      	adds	r3, #10
 80089dc:	b2da      	uxtb	r2, r3
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d01c      	beq.n	8008a24 <HAL_RTC_SetDate+0xa4>
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d018      	beq.n	8008a24 <HAL_RTC_SetDate+0xa4>
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	2b03      	cmp	r3, #3
 80089f8:	d014      	beq.n	8008a24 <HAL_RTC_SetDate+0xa4>
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	2b04      	cmp	r3, #4
 8008a00:	d010      	beq.n	8008a24 <HAL_RTC_SetDate+0xa4>
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	2b05      	cmp	r3, #5
 8008a08:	d00c      	beq.n	8008a24 <HAL_RTC_SetDate+0xa4>
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	2b06      	cmp	r3, #6
 8008a10:	d008      	beq.n	8008a24 <HAL_RTC_SetDate+0xa4>
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	2b07      	cmp	r3, #7
 8008a18:	d004      	beq.n	8008a24 <HAL_RTC_SetDate+0xa4>
 8008a1a:	f240 315f 	movw	r1, #863	; 0x35f
 8008a1e:	485d      	ldr	r0, [pc, #372]	; (8008b94 <HAL_RTC_SetDate+0x214>)
 8008a20:	f7f9 fcc5 	bl	80023ae <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d13f      	bne.n	8008aaa <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	78db      	ldrb	r3, [r3, #3]
 8008a2e:	2b63      	cmp	r3, #99	; 0x63
 8008a30:	d904      	bls.n	8008a3c <HAL_RTC_SetDate+0xbc>
 8008a32:	f240 3163 	movw	r1, #867	; 0x363
 8008a36:	4857      	ldr	r0, [pc, #348]	; (8008b94 <HAL_RTC_SetDate+0x214>)
 8008a38:	f7f9 fcb9 	bl	80023ae <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	785b      	ldrb	r3, [r3, #1]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d003      	beq.n	8008a4c <HAL_RTC_SetDate+0xcc>
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	785b      	ldrb	r3, [r3, #1]
 8008a48:	2b0c      	cmp	r3, #12
 8008a4a:	d904      	bls.n	8008a56 <HAL_RTC_SetDate+0xd6>
 8008a4c:	f44f 7159 	mov.w	r1, #868	; 0x364
 8008a50:	4850      	ldr	r0, [pc, #320]	; (8008b94 <HAL_RTC_SetDate+0x214>)
 8008a52:	f7f9 fcac 	bl	80023ae <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	789b      	ldrb	r3, [r3, #2]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d003      	beq.n	8008a66 <HAL_RTC_SetDate+0xe6>
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	789b      	ldrb	r3, [r3, #2]
 8008a62:	2b1f      	cmp	r3, #31
 8008a64:	d904      	bls.n	8008a70 <HAL_RTC_SetDate+0xf0>
 8008a66:	f240 3165 	movw	r1, #869	; 0x365
 8008a6a:	484a      	ldr	r0, [pc, #296]	; (8008b94 <HAL_RTC_SetDate+0x214>)
 8008a6c:	f7f9 fc9f 	bl	80023ae <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	78db      	ldrb	r3, [r3, #3]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 fbfb 	bl	8009270 <RTC_ByteToBcd2>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	785b      	ldrb	r3, [r3, #1]
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 fbf4 	bl	8009270 <RTC_ByteToBcd2>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008a8c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	789b      	ldrb	r3, [r3, #2]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 fbec 	bl	8009270 <RTC_ByteToBcd2>
 8008a98:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008a9a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	617b      	str	r3, [r7, #20]
 8008aa8:	e045      	b.n	8008b36 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	78db      	ldrb	r3, [r3, #3]
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f000 fbfb 	bl	80092aa <RTC_Bcd2ToByte>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b63      	cmp	r3, #99	; 0x63
 8008ab8:	d904      	bls.n	8008ac4 <HAL_RTC_SetDate+0x144>
 8008aba:	f240 316e 	movw	r1, #878	; 0x36e
 8008abe:	4835      	ldr	r0, [pc, #212]	; (8008b94 <HAL_RTC_SetDate+0x214>)
 8008ac0:	f7f9 fc75 	bl	80023ae <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	785b      	ldrb	r3, [r3, #1]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fbee 	bl	80092aa <RTC_Bcd2ToByte>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d007      	beq.n	8008ae4 <HAL_RTC_SetDate+0x164>
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	785b      	ldrb	r3, [r3, #1]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f000 fbe6 	bl	80092aa <RTC_Bcd2ToByte>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b0c      	cmp	r3, #12
 8008ae2:	d904      	bls.n	8008aee <HAL_RTC_SetDate+0x16e>
 8008ae4:	f240 316f 	movw	r1, #879	; 0x36f
 8008ae8:	482a      	ldr	r0, [pc, #168]	; (8008b94 <HAL_RTC_SetDate+0x214>)
 8008aea:	f7f9 fc60 	bl	80023ae <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	789b      	ldrb	r3, [r3, #2]
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 fbd9 	bl	80092aa <RTC_Bcd2ToByte>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d007      	beq.n	8008b0e <HAL_RTC_SetDate+0x18e>
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	789b      	ldrb	r3, [r3, #2]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 fbd1 	bl	80092aa <RTC_Bcd2ToByte>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b1f      	cmp	r3, #31
 8008b0c:	d904      	bls.n	8008b18 <HAL_RTC_SetDate+0x198>
 8008b0e:	f44f 715c 	mov.w	r1, #880	; 0x370
 8008b12:	4820      	ldr	r0, [pc, #128]	; (8008b94 <HAL_RTC_SetDate+0x214>)
 8008b14:	f7f9 fc4b 	bl	80023ae <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	78db      	ldrb	r3, [r3, #3]
 8008b1c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	785b      	ldrb	r3, [r3, #1]
 8008b22:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008b24:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008b2a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008b32:	4313      	orrs	r3, r2
 8008b34:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	22ca      	movs	r2, #202	; 0xca
 8008b3c:	625a      	str	r2, [r3, #36]	; 0x24
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2253      	movs	r2, #83	; 0x53
 8008b44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f000 fb36 	bl	80091b8 <RTC_EnterInitMode>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008b50:	7cfb      	ldrb	r3, [r7, #19]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10c      	bne.n	8008b70 <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008b60:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008b64:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f000 fb5d 	bl	8009226 <RTC_ExitInitMode>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008b70:	7cfb      	ldrb	r3, [r7, #19]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d102      	bne.n	8008b7c <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	22ff      	movs	r2, #255	; 0xff
 8008b82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2200      	movs	r2, #0
 8008b88:	771a      	strb	r2, [r3, #28]

  return status;
 8008b8a:	7cfb      	ldrb	r3, [r7, #19]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	371c      	adds	r7, #28
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd90      	pop	{r4, r7, pc}
 8008b94:	0800f0a4 	.word	0x0800f0a4

08008b98 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008b98:	b590      	push	{r4, r7, lr}
 8008b9a:	b089      	sub	sp, #36	; 0x24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8008bac:	2300      	movs	r3, #0
 8008bae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d007      	beq.n	8008bc6 <HAL_RTC_SetAlarm+0x2e>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d004      	beq.n	8008bc6 <HAL_RTC_SetAlarm+0x2e>
 8008bbc:	f240 31e7 	movw	r1, #999	; 0x3e7
 8008bc0:	4876      	ldr	r0, [pc, #472]	; (8008d9c <HAL_RTC_SetAlarm+0x204>)
 8008bc2:	f7f9 fbf4 	bl	80023ae <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bce:	d009      	beq.n	8008be4 <HAL_RTC_SetAlarm+0x4c>
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bd8:	d004      	beq.n	8008be4 <HAL_RTC_SetAlarm+0x4c>
 8008bda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008bde:	486f      	ldr	r0, [pc, #444]	; (8008d9c <HAL_RTC_SetAlarm+0x204>)
 8008be0:	f7f9 fbe5 	bl	80023ae <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	695b      	ldr	r3, [r3, #20]
 8008be8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d004      	beq.n	8008bfa <HAL_RTC_SetAlarm+0x62>
 8008bf0:	f240 31e9 	movw	r1, #1001	; 0x3e9
 8008bf4:	4869      	ldr	r0, [pc, #420]	; (8008d9c <HAL_RTC_SetAlarm+0x204>)
 8008bf6:	f7f9 fbda 	bl	80023ae <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	69db      	ldr	r3, [r3, #28]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d009      	beq.n	8008c16 <HAL_RTC_SetAlarm+0x7e>
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	69db      	ldr	r3, [r3, #28]
 8008c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c0a:	d004      	beq.n	8008c16 <HAL_RTC_SetAlarm+0x7e>
 8008c0c:	f240 31ea 	movw	r1, #1002	; 0x3ea
 8008c10:	4862      	ldr	r0, [pc, #392]	; (8008d9c <HAL_RTC_SetAlarm+0x204>)
 8008c12:	f7f9 fbcc 	bl	80023ae <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c1e:	d304      	bcc.n	8008c2a <HAL_RTC_SetAlarm+0x92>
 8008c20:	f240 31eb 	movw	r1, #1003	; 0x3eb
 8008c24:	485d      	ldr	r0, [pc, #372]	; (8008d9c <HAL_RTC_SetAlarm+0x204>)
 8008c26:	f7f9 fbc2 	bl	80023ae <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d04f      	beq.n	8008cd2 <HAL_RTC_SetAlarm+0x13a>
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c3a:	d04a      	beq.n	8008cd2 <HAL_RTC_SetAlarm+0x13a>
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c44:	d045      	beq.n	8008cd2 <HAL_RTC_SetAlarm+0x13a>
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c4e:	d040      	beq.n	8008cd2 <HAL_RTC_SetAlarm+0x13a>
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c58:	d03b      	beq.n	8008cd2 <HAL_RTC_SetAlarm+0x13a>
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008c62:	d036      	beq.n	8008cd2 <HAL_RTC_SetAlarm+0x13a>
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8008c6c:	d031      	beq.n	8008cd2 <HAL_RTC_SetAlarm+0x13a>
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8008c76:	d02c      	beq.n	8008cd2 <HAL_RTC_SetAlarm+0x13a>
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c80:	d027      	beq.n	8008cd2 <HAL_RTC_SetAlarm+0x13a>
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	699b      	ldr	r3, [r3, #24]
 8008c86:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8008c8a:	d022      	beq.n	8008cd2 <HAL_RTC_SetAlarm+0x13a>
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8008c94:	d01d      	beq.n	8008cd2 <HAL_RTC_SetAlarm+0x13a>
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8008c9e:	d018      	beq.n	8008cd2 <HAL_RTC_SetAlarm+0x13a>
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008ca8:	d013      	beq.n	8008cd2 <HAL_RTC_SetAlarm+0x13a>
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8008cb2:	d00e      	beq.n	8008cd2 <HAL_RTC_SetAlarm+0x13a>
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8008cbc:	d009      	beq.n	8008cd2 <HAL_RTC_SetAlarm+0x13a>
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008cc6:	d004      	beq.n	8008cd2 <HAL_RTC_SetAlarm+0x13a>
 8008cc8:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
 8008ccc:	4833      	ldr	r0, [pc, #204]	; (8008d9c <HAL_RTC_SetAlarm+0x204>)
 8008cce:	f7f9 fb6e 	bl	80023ae <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	7f1b      	ldrb	r3, [r3, #28]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d101      	bne.n	8008cde <HAL_RTC_SetAlarm+0x146>
 8008cda:	2302      	movs	r3, #2
 8008cdc:	e235      	b.n	800914a <HAL_RTC_SetAlarm+0x5b2>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f040 80ad 	bne.w	8008e4c <HAL_RTC_SetAlarm+0x2b4>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d01a      	beq.n	8008d36 <HAL_RTC_SetAlarm+0x19e>
    {
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d003      	beq.n	8008d10 <HAL_RTC_SetAlarm+0x178>
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	2b0c      	cmp	r3, #12
 8008d0e:	d904      	bls.n	8008d1a <HAL_RTC_SetAlarm+0x182>
 8008d10:	f240 31fa 	movw	r1, #1018	; 0x3fa
 8008d14:	4821      	ldr	r0, [pc, #132]	; (8008d9c <HAL_RTC_SetAlarm+0x204>)
 8008d16:	f7f9 fb4a 	bl	80023ae <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	78db      	ldrb	r3, [r3, #3]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d015      	beq.n	8008d4e <HAL_RTC_SetAlarm+0x1b6>
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	78db      	ldrb	r3, [r3, #3]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d011      	beq.n	8008d4e <HAL_RTC_SetAlarm+0x1b6>
 8008d2a:	f240 31fb 	movw	r1, #1019	; 0x3fb
 8008d2e:	481b      	ldr	r0, [pc, #108]	; (8008d9c <HAL_RTC_SetAlarm+0x204>)
 8008d30:	f7f9 fb3d 	bl	80023ae <assert_failed>
 8008d34:	e00b      	b.n	8008d4e <HAL_RTC_SetAlarm+0x1b6>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	2b17      	cmp	r3, #23
 8008d42:	d904      	bls.n	8008d4e <HAL_RTC_SetAlarm+0x1b6>
 8008d44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008d48:	4814      	ldr	r0, [pc, #80]	; (8008d9c <HAL_RTC_SetAlarm+0x204>)
 8008d4a:	f7f9 fb30 	bl	80023ae <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	785b      	ldrb	r3, [r3, #1]
 8008d52:	2b3b      	cmp	r3, #59	; 0x3b
 8008d54:	d904      	bls.n	8008d60 <HAL_RTC_SetAlarm+0x1c8>
 8008d56:	f240 4102 	movw	r1, #1026	; 0x402
 8008d5a:	4810      	ldr	r0, [pc, #64]	; (8008d9c <HAL_RTC_SetAlarm+0x204>)
 8008d5c:	f7f9 fb27 	bl	80023ae <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	789b      	ldrb	r3, [r3, #2]
 8008d64:	2b3b      	cmp	r3, #59	; 0x3b
 8008d66:	d904      	bls.n	8008d72 <HAL_RTC_SetAlarm+0x1da>
 8008d68:	f240 4103 	movw	r1, #1027	; 0x403
 8008d6c:	480b      	ldr	r0, [pc, #44]	; (8008d9c <HAL_RTC_SetAlarm+0x204>)
 8008d6e:	f7f9 fb1e 	bl	80023ae <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d112      	bne.n	8008da0 <HAL_RTC_SetAlarm+0x208>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d004      	beq.n	8008d8e <HAL_RTC_SetAlarm+0x1f6>
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d8a:	2b1f      	cmp	r3, #31
 8008d8c:	d930      	bls.n	8008df0 <HAL_RTC_SetAlarm+0x258>
 8008d8e:	f240 4107 	movw	r1, #1031	; 0x407
 8008d92:	4802      	ldr	r0, [pc, #8]	; (8008d9c <HAL_RTC_SetAlarm+0x204>)
 8008d94:	f7f9 fb0b 	bl	80023ae <assert_failed>
 8008d98:	e02a      	b.n	8008df0 <HAL_RTC_SetAlarm+0x258>
 8008d9a:	bf00      	nop
 8008d9c:	0800f0a4 	.word	0x0800f0a4
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d022      	beq.n	8008df0 <HAL_RTC_SetAlarm+0x258>
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d01d      	beq.n	8008df0 <HAL_RTC_SetAlarm+0x258>
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	d018      	beq.n	8008df0 <HAL_RTC_SetAlarm+0x258>
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008dc4:	2b04      	cmp	r3, #4
 8008dc6:	d013      	beq.n	8008df0 <HAL_RTC_SetAlarm+0x258>
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008dce:	2b05      	cmp	r3, #5
 8008dd0:	d00e      	beq.n	8008df0 <HAL_RTC_SetAlarm+0x258>
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008dd8:	2b06      	cmp	r3, #6
 8008dda:	d009      	beq.n	8008df0 <HAL_RTC_SetAlarm+0x258>
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008de2:	2b07      	cmp	r3, #7
 8008de4:	d004      	beq.n	8008df0 <HAL_RTC_SetAlarm+0x258>
 8008de6:	f240 410b 	movw	r1, #1035	; 0x40b
 8008dea:	48a1      	ldr	r0, [pc, #644]	; (8009070 <HAL_RTC_SetAlarm+0x4d8>)
 8008dec:	f7f9 fadf 	bl	80023ae <assert_failed>
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 fa3b 	bl	8009270 <RTC_ByteToBcd2>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	785b      	ldrb	r3, [r3, #1]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 fa34 	bl	8009270 <RTC_ByteToBcd2>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008e0c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	789b      	ldrb	r3, [r3, #2]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 fa2c 	bl	8009270 <RTC_ByteToBcd2>
 8008e18:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008e1a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	78db      	ldrb	r3, [r3, #3]
 8008e22:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008e24:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 fa1e 	bl	8009270 <RTC_ByteToBcd2>
 8008e34:	4603      	mov	r3, r0
 8008e36:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008e38:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008e40:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008e46:	4313      	orrs	r3, r2
 8008e48:	61fb      	str	r3, [r7, #28]
 8008e4a:	e0cd      	b.n	8008fe8 <HAL_RTC_SetAlarm+0x450>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d022      	beq.n	8008ea0 <HAL_RTC_SetAlarm+0x308>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 fa23 	bl	80092aa <RTC_Bcd2ToByte>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d007      	beq.n	8008e7a <HAL_RTC_SetAlarm+0x2e2>
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 fa1b 	bl	80092aa <RTC_Bcd2ToByte>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b0c      	cmp	r3, #12
 8008e78:	d904      	bls.n	8008e84 <HAL_RTC_SetAlarm+0x2ec>
 8008e7a:	f240 411a 	movw	r1, #1050	; 0x41a
 8008e7e:	487c      	ldr	r0, [pc, #496]	; (8009070 <HAL_RTC_SetAlarm+0x4d8>)
 8008e80:	f7f9 fa95 	bl	80023ae <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	78db      	ldrb	r3, [r3, #3]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d019      	beq.n	8008ec0 <HAL_RTC_SetAlarm+0x328>
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	78db      	ldrb	r3, [r3, #3]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d015      	beq.n	8008ec0 <HAL_RTC_SetAlarm+0x328>
 8008e94:	f240 411b 	movw	r1, #1051	; 0x41b
 8008e98:	4875      	ldr	r0, [pc, #468]	; (8009070 <HAL_RTC_SetAlarm+0x4d8>)
 8008e9a:	f7f9 fa88 	bl	80023ae <assert_failed>
 8008e9e:	e00f      	b.n	8008ec0 <HAL_RTC_SetAlarm+0x328>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 f9fd 	bl	80092aa <RTC_Bcd2ToByte>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b17      	cmp	r3, #23
 8008eb4:	d904      	bls.n	8008ec0 <HAL_RTC_SetAlarm+0x328>
 8008eb6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8008eba:	486d      	ldr	r0, [pc, #436]	; (8009070 <HAL_RTC_SetAlarm+0x4d8>)
 8008ebc:	f7f9 fa77 	bl	80023ae <assert_failed>
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	785b      	ldrb	r3, [r3, #1]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f000 f9f0 	bl	80092aa <RTC_Bcd2ToByte>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b3b      	cmp	r3, #59	; 0x3b
 8008ece:	d904      	bls.n	8008eda <HAL_RTC_SetAlarm+0x342>
 8008ed0:	f240 4123 	movw	r1, #1059	; 0x423
 8008ed4:	4866      	ldr	r0, [pc, #408]	; (8009070 <HAL_RTC_SetAlarm+0x4d8>)
 8008ed6:	f7f9 fa6a 	bl	80023ae <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	789b      	ldrb	r3, [r3, #2]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 f9e3 	bl	80092aa <RTC_Bcd2ToByte>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b3b      	cmp	r3, #59	; 0x3b
 8008ee8:	d904      	bls.n	8008ef4 <HAL_RTC_SetAlarm+0x35c>
 8008eea:	f240 4124 	movw	r1, #1060	; 0x424
 8008eee:	4860      	ldr	r0, [pc, #384]	; (8009070 <HAL_RTC_SetAlarm+0x4d8>)
 8008ef0:	f7f9 fa5d 	bl	80023ae <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d117      	bne.n	8008f2c <HAL_RTC_SetAlarm+0x394>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 f9d1 	bl	80092aa <RTC_Bcd2ToByte>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d008      	beq.n	8008f20 <HAL_RTC_SetAlarm+0x388>
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 f9c8 	bl	80092aa <RTC_Bcd2ToByte>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b1f      	cmp	r3, #31
 8008f1e:	d949      	bls.n	8008fb4 <HAL_RTC_SetAlarm+0x41c>
 8008f20:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8008f24:	4852      	ldr	r0, [pc, #328]	; (8009070 <HAL_RTC_SetAlarm+0x4d8>)
 8008f26:	f7f9 fa42 	bl	80023ae <assert_failed>
 8008f2a:	e043      	b.n	8008fb4 <HAL_RTC_SetAlarm+0x41c>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 f9b9 	bl	80092aa <RTC_Bcd2ToByte>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d03a      	beq.n	8008fb4 <HAL_RTC_SetAlarm+0x41c>
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 f9b0 	bl	80092aa <RTC_Bcd2ToByte>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d031      	beq.n	8008fb4 <HAL_RTC_SetAlarm+0x41c>
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 f9a7 	bl	80092aa <RTC_Bcd2ToByte>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	d028      	beq.n	8008fb4 <HAL_RTC_SetAlarm+0x41c>
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f000 f99e 	bl	80092aa <RTC_Bcd2ToByte>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b04      	cmp	r3, #4
 8008f72:	d01f      	beq.n	8008fb4 <HAL_RTC_SetAlarm+0x41c>
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 f995 	bl	80092aa <RTC_Bcd2ToByte>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b05      	cmp	r3, #5
 8008f84:	d016      	beq.n	8008fb4 <HAL_RTC_SetAlarm+0x41c>
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 f98c 	bl	80092aa <RTC_Bcd2ToByte>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b06      	cmp	r3, #6
 8008f96:	d00d      	beq.n	8008fb4 <HAL_RTC_SetAlarm+0x41c>
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f000 f983 	bl	80092aa <RTC_Bcd2ToByte>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b07      	cmp	r3, #7
 8008fa8:	d004      	beq.n	8008fb4 <HAL_RTC_SetAlarm+0x41c>
 8008faa:	f240 412c 	movw	r1, #1068	; 0x42c
 8008fae:	4830      	ldr	r0, [pc, #192]	; (8009070 <HAL_RTC_SetAlarm+0x4d8>)
 8008fb0:	f7f9 f9fd 	bl	80023ae <assert_failed>
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	785b      	ldrb	r3, [r3, #1]
 8008fbe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008fc0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008fc6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	78db      	ldrb	r3, [r3, #3]
 8008fcc:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008fce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fd6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008fd8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008fde:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	22ca      	movs	r2, #202	; 0xca
 8008ffa:	625a      	str	r2, [r3, #36]	; 0x24
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2253      	movs	r2, #83	; 0x53
 8009002:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800900c:	d14a      	bne.n	80090a4 <HAL_RTC_SetAlarm+0x50c>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	689a      	ldr	r2, [r3, #8]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800901c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	689a      	ldr	r2, [r3, #8]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800902c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	b2da      	uxtb	r2, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800903e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009040:	f7fa f878 	bl	8003134 <HAL_GetTick>
 8009044:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009046:	e015      	b.n	8009074 <HAL_RTC_SetAlarm+0x4dc>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009048:	f7fa f874 	bl	8003134 <HAL_GetTick>
 800904c:	4602      	mov	r2, r0
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009056:	d90d      	bls.n	8009074 <HAL_RTC_SetAlarm+0x4dc>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	22ff      	movs	r2, #255	; 0xff
 800905e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2203      	movs	r2, #3
 8009064:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800906c:	2303      	movs	r3, #3
 800906e:	e06c      	b.n	800914a <HAL_RTC_SetAlarm+0x5b2>
 8009070:	0800f0a4 	.word	0x0800f0a4
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	2b00      	cmp	r3, #0
 8009080:	d0e2      	beq.n	8009048 <HAL_RTC_SetAlarm+0x4b0>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	69fa      	ldr	r2, [r7, #28]
 8009088:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	689a      	ldr	r2, [r3, #8]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090a0:	609a      	str	r2, [r3, #8]
 80090a2:	e047      	b.n	8009134 <HAL_RTC_SetAlarm+0x59c>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	689a      	ldr	r2, [r3, #8]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80090b2:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	689a      	ldr	r2, [r3, #8]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090c2:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	b2da      	uxtb	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f462 7220 	orn	r2, r2, #640	; 0x280
 80090d4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80090d6:	f7fa f82d 	bl	8003134 <HAL_GetTick>
 80090da:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80090dc:	e013      	b.n	8009106 <HAL_RTC_SetAlarm+0x56e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80090de:	f7fa f829 	bl	8003134 <HAL_GetTick>
 80090e2:	4602      	mov	r2, r0
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090ec:	d90b      	bls.n	8009106 <HAL_RTC_SetAlarm+0x56e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	22ff      	movs	r2, #255	; 0xff
 80090f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2203      	movs	r2, #3
 80090fa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009102:	2303      	movs	r3, #3
 8009104:	e021      	b.n	800914a <HAL_RTC_SetAlarm+0x5b2>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	f003 0302 	and.w	r3, r3, #2
 8009110:	2b00      	cmp	r3, #0
 8009112:	d0e4      	beq.n	80090de <HAL_RTC_SetAlarm+0x546>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	69fa      	ldr	r2, [r7, #28]
 800911a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	689a      	ldr	r2, [r3, #8]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009132:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	22ff      	movs	r2, #255	; 0xff
 800913a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2201      	movs	r2, #1
 8009140:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2200      	movs	r2, #0
 8009146:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	3724      	adds	r7, #36	; 0x24
 800914e:	46bd      	mov	sp, r7
 8009150:	bd90      	pop	{r4, r7, pc}
 8009152:	bf00      	nop

08009154 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800915c:	bf00      	nop
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009170:	2300      	movs	r3, #0
 8009172:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68da      	ldr	r2, [r3, #12]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009182:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009184:	f7f9 ffd6 	bl	8003134 <HAL_GetTick>
 8009188:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800918a:	e009      	b.n	80091a0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800918c:	f7f9 ffd2 	bl	8003134 <HAL_GetTick>
 8009190:	4602      	mov	r2, r0
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800919a:	d901      	bls.n	80091a0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800919c:	2303      	movs	r3, #3
 800919e:	e007      	b.n	80091b0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	f003 0320 	and.w	r3, r3, #32
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0ee      	beq.n	800918c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80091c0:	2300      	movs	r3, #0
 80091c2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d122      	bne.n	800921c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68da      	ldr	r2, [r3, #12]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80091e4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80091e6:	f7f9 ffa5 	bl	8003134 <HAL_GetTick>
 80091ea:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80091ec:	e00c      	b.n	8009208 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80091ee:	f7f9 ffa1 	bl	8003134 <HAL_GetTick>
 80091f2:	4602      	mov	r2, r0
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091fc:	d904      	bls.n	8009208 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2204      	movs	r2, #4
 8009202:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009212:	2b00      	cmp	r3, #0
 8009214:	d102      	bne.n	800921c <RTC_EnterInitMode+0x64>
 8009216:	7bfb      	ldrb	r3, [r7, #15]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d1e8      	bne.n	80091ee <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800921c:	7bfb      	ldrb	r3, [r7, #15]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b084      	sub	sp, #16
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68da      	ldr	r2, [r3, #12]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009240:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	f003 0320 	and.w	r3, r3, #32
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10a      	bne.n	8009266 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7ff ff89 	bl	8009168 <HAL_RTC_WaitForSynchro>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d004      	beq.n	8009266 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2204      	movs	r2, #4
 8009260:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009266:	7bfb      	ldrb	r3, [r7, #15]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	4603      	mov	r3, r0
 8009278:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800927a:	2300      	movs	r3, #0
 800927c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800927e:	e005      	b.n	800928c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009280:	7bfb      	ldrb	r3, [r7, #15]
 8009282:	3301      	adds	r3, #1
 8009284:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8009286:	79fb      	ldrb	r3, [r7, #7]
 8009288:	3b0a      	subs	r3, #10
 800928a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800928c:	79fb      	ldrb	r3, [r7, #7]
 800928e:	2b09      	cmp	r3, #9
 8009290:	d8f6      	bhi.n	8009280 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009292:	7bfb      	ldrb	r3, [r7, #15]
 8009294:	011b      	lsls	r3, r3, #4
 8009296:	b2da      	uxtb	r2, r3
 8009298:	79fb      	ldrb	r3, [r7, #7]
 800929a:	4313      	orrs	r3, r2
 800929c:	b2db      	uxtb	r3, r3
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3714      	adds	r7, #20
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr

080092aa <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80092aa:	b480      	push	{r7}
 80092ac:	b085      	sub	sp, #20
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	4603      	mov	r3, r0
 80092b2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80092b4:	2300      	movs	r3, #0
 80092b6:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80092b8:	79fb      	ldrb	r3, [r7, #7]
 80092ba:	091b      	lsrs	r3, r3, #4
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	461a      	mov	r2, r3
 80092c0:	0092      	lsls	r2, r2, #2
 80092c2:	4413      	add	r3, r2
 80092c4:	005b      	lsls	r3, r3, #1
 80092c6:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80092c8:	79fb      	ldrb	r3, [r7, #7]
 80092ca:	f003 030f 	and.w	r3, r3, #15
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
 80092d2:	4413      	add	r3, r2
 80092d4:	b2db      	uxtb	r3, r3
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3714      	adds	r7, #20
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b083      	sub	sp, #12
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 80092ea:	bf00      	nop
 80092ec:	370c      	adds	r7, #12
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 80092f6:	b480      	push	{r7}
 80092f8:	b083      	sub	sp, #12
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 80092fe:	bf00      	nop
 8009300:	370c      	adds	r7, #12
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
	...

0800930c <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009318:	2300      	movs	r3, #0
 800931a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d013      	beq.n	800934a <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d010      	beq.n	800934a <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2b02      	cmp	r3, #2
 800932c:	d00d      	beq.n	800934a <HAL_RTCEx_SetWakeUpTimer+0x3e>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2b03      	cmp	r3, #3
 8009332:	d00a      	beq.n	800934a <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b04      	cmp	r3, #4
 8009338:	d007      	beq.n	800934a <HAL_RTCEx_SetWakeUpTimer+0x3e>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b06      	cmp	r3, #6
 800933e:	d004      	beq.n	800934a <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8009340:	f240 3165 	movw	r1, #869	; 0x365
 8009344:	4850      	ldr	r0, [pc, #320]	; (8009488 <HAL_RTCEx_SetWakeUpTimer+0x17c>)
 8009346:	f7f9 f832 	bl	80023ae <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009350:	d304      	bcc.n	800935c <HAL_RTCEx_SetWakeUpTimer+0x50>
 8009352:	f240 3166 	movw	r1, #870	; 0x366
 8009356:	484c      	ldr	r0, [pc, #304]	; (8009488 <HAL_RTCEx_SetWakeUpTimer+0x17c>)
 8009358:	f7f9 f829 	bl	80023ae <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	7f1b      	ldrb	r3, [r3, #28]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d101      	bne.n	8009368 <HAL_RTCEx_SetWakeUpTimer+0x5c>
 8009364:	2302      	movs	r3, #2
 8009366:	e08a      	b.n	800947e <HAL_RTCEx_SetWakeUpTimer+0x172>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2201      	movs	r2, #1
 800936c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2202      	movs	r2, #2
 8009372:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	22ca      	movs	r2, #202	; 0xca
 800937a:	625a      	str	r2, [r3, #36]	; 0x24
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2253      	movs	r2, #83	; 0x53
 8009382:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800938e:	2b00      	cmp	r3, #0
 8009390:	d01e      	beq.n	80093d0 <HAL_RTCEx_SetWakeUpTimer+0xc4>
  {
    tickstart = HAL_GetTick();
 8009392:	f7f9 fecf 	bl	8003134 <HAL_GetTick>
 8009396:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8009398:	e013      	b.n	80093c2 <HAL_RTCEx_SetWakeUpTimer+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800939a:	f7f9 fecb 	bl	8003134 <HAL_GetTick>
 800939e:	4602      	mov	r2, r0
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093a8:	d90b      	bls.n	80093c2 <HAL_RTCEx_SetWakeUpTimer+0xb6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	22ff      	movs	r2, #255	; 0xff
 80093b0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2203      	movs	r2, #3
 80093b6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80093be:	2303      	movs	r3, #3
 80093c0:	e05d      	b.n	800947e <HAL_RTCEx_SetWakeUpTimer+0x172>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	f003 0304 	and.w	r3, r3, #4
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1e4      	bne.n	800939a <HAL_RTCEx_SetWakeUpTimer+0x8e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	689a      	ldr	r2, [r3, #8]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093de:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80093f0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80093f2:	f7f9 fe9f 	bl	8003134 <HAL_GetTick>
 80093f6:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80093f8:	e013      	b.n	8009422 <HAL_RTCEx_SetWakeUpTimer+0x116>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80093fa:	f7f9 fe9b 	bl	8003134 <HAL_GetTick>
 80093fe:	4602      	mov	r2, r0
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009408:	d90b      	bls.n	8009422 <HAL_RTCEx_SetWakeUpTimer+0x116>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	22ff      	movs	r2, #255	; 0xff
 8009410:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2203      	movs	r2, #3
 8009416:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800941e:	2303      	movs	r3, #3
 8009420:	e02d      	b.n	800947e <HAL_RTCEx_SetWakeUpTimer+0x172>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	f003 0304 	and.w	r3, r3, #4
 800942c:	2b00      	cmp	r3, #0
 800942e:	d0e4      	beq.n	80093fa <HAL_RTCEx_SetWakeUpTimer+0xee>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	689a      	ldr	r2, [r3, #8]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f022 0207 	bic.w	r2, r2, #7
 800943e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	6899      	ldr	r1, [r3, #8]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	430a      	orrs	r2, r1
 800944e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68ba      	ldr	r2, [r7, #8]
 8009456:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	689a      	ldr	r2, [r3, #8]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009466:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	22ff      	movs	r2, #255	; 0xff
 800946e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2201      	movs	r2, #1
 8009474:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3718      	adds	r7, #24
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	0800f118 	.word	0x0800f118

0800948c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e1ac      	b.n	8009820 <HAL_SPI_Init+0x36c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a75      	ldr	r2, [pc, #468]	; (80096a0 <HAL_SPI_Init+0x1ec>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d018      	beq.n	8009502 <HAL_SPI_Init+0x4e>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a73      	ldr	r2, [pc, #460]	; (80096a4 <HAL_SPI_Init+0x1f0>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d013      	beq.n	8009502 <HAL_SPI_Init+0x4e>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a72      	ldr	r2, [pc, #456]	; (80096a8 <HAL_SPI_Init+0x1f4>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d00e      	beq.n	8009502 <HAL_SPI_Init+0x4e>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a70      	ldr	r2, [pc, #448]	; (80096ac <HAL_SPI_Init+0x1f8>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d009      	beq.n	8009502 <HAL_SPI_Init+0x4e>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a6f      	ldr	r2, [pc, #444]	; (80096b0 <HAL_SPI_Init+0x1fc>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d004      	beq.n	8009502 <HAL_SPI_Init+0x4e>
 80094f8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80094fc:	486d      	ldr	r0, [pc, #436]	; (80096b4 <HAL_SPI_Init+0x200>)
 80094fe:	f7f8 ff56 	bl	80023ae <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d009      	beq.n	800951e <HAL_SPI_Init+0x6a>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009512:	d004      	beq.n	800951e <HAL_SPI_Init+0x6a>
 8009514:	f240 1141 	movw	r1, #321	; 0x141
 8009518:	4866      	ldr	r0, [pc, #408]	; (80096b4 <HAL_SPI_Init+0x200>)
 800951a:	f7f8 ff48 	bl	80023ae <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00e      	beq.n	8009544 <HAL_SPI_Init+0x90>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800952e:	d009      	beq.n	8009544 <HAL_SPI_Init+0x90>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009538:	d004      	beq.n	8009544 <HAL_SPI_Init+0x90>
 800953a:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800953e:	485d      	ldr	r0, [pc, #372]	; (80096b4 <HAL_SPI_Init+0x200>)
 8009540:	f7f8 ff35 	bl	80023ae <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800954c:	d008      	beq.n	8009560 <HAL_SPI_Init+0xac>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d004      	beq.n	8009560 <HAL_SPI_Init+0xac>
 8009556:	f240 1143 	movw	r1, #323	; 0x143
 800955a:	4856      	ldr	r0, [pc, #344]	; (80096b4 <HAL_SPI_Init+0x200>)
 800955c:	f7f8 ff27 	bl	80023ae <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	699b      	ldr	r3, [r3, #24]
 8009564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009568:	d00d      	beq.n	8009586 <HAL_SPI_Init+0xd2>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	699b      	ldr	r3, [r3, #24]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d009      	beq.n	8009586 <HAL_SPI_Init+0xd2>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800957a:	d004      	beq.n	8009586 <HAL_SPI_Init+0xd2>
 800957c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8009580:	484c      	ldr	r0, [pc, #304]	; (80096b4 <HAL_SPI_Init+0x200>)
 8009582:	f7f8 ff14 	bl	80023ae <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	69db      	ldr	r3, [r3, #28]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d020      	beq.n	80095d0 <HAL_SPI_Init+0x11c>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	69db      	ldr	r3, [r3, #28]
 8009592:	2b08      	cmp	r3, #8
 8009594:	d01c      	beq.n	80095d0 <HAL_SPI_Init+0x11c>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	69db      	ldr	r3, [r3, #28]
 800959a:	2b10      	cmp	r3, #16
 800959c:	d018      	beq.n	80095d0 <HAL_SPI_Init+0x11c>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	69db      	ldr	r3, [r3, #28]
 80095a2:	2b18      	cmp	r3, #24
 80095a4:	d014      	beq.n	80095d0 <HAL_SPI_Init+0x11c>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	69db      	ldr	r3, [r3, #28]
 80095aa:	2b20      	cmp	r3, #32
 80095ac:	d010      	beq.n	80095d0 <HAL_SPI_Init+0x11c>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	69db      	ldr	r3, [r3, #28]
 80095b2:	2b28      	cmp	r3, #40	; 0x28
 80095b4:	d00c      	beq.n	80095d0 <HAL_SPI_Init+0x11c>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	69db      	ldr	r3, [r3, #28]
 80095ba:	2b30      	cmp	r3, #48	; 0x30
 80095bc:	d008      	beq.n	80095d0 <HAL_SPI_Init+0x11c>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	69db      	ldr	r3, [r3, #28]
 80095c2:	2b38      	cmp	r3, #56	; 0x38
 80095c4:	d004      	beq.n	80095d0 <HAL_SPI_Init+0x11c>
 80095c6:	f240 1145 	movw	r1, #325	; 0x145
 80095ca:	483a      	ldr	r0, [pc, #232]	; (80096b4 <HAL_SPI_Init+0x200>)
 80095cc:	f7f8 feef 	bl	80023ae <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a1b      	ldr	r3, [r3, #32]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d008      	beq.n	80095ea <HAL_SPI_Init+0x136>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a1b      	ldr	r3, [r3, #32]
 80095dc:	2b80      	cmp	r3, #128	; 0x80
 80095de:	d004      	beq.n	80095ea <HAL_SPI_Init+0x136>
 80095e0:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80095e4:	4833      	ldr	r0, [pc, #204]	; (80096b4 <HAL_SPI_Init+0x200>)
 80095e6:	f7f8 fee2 	bl	80023ae <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d008      	beq.n	8009604 <HAL_SPI_Init+0x150>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f6:	2b10      	cmp	r3, #16
 80095f8:	d004      	beq.n	8009604 <HAL_SPI_Init+0x150>
 80095fa:	f240 1147 	movw	r1, #327	; 0x147
 80095fe:	482d      	ldr	r0, [pc, #180]	; (80096b4 <HAL_SPI_Init+0x200>)
 8009600:	f7f8 fed5 	bl	80023ae <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009608:	2b00      	cmp	r3, #0
 800960a:	d155      	bne.n	80096b8 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d008      	beq.n	8009626 <HAL_SPI_Init+0x172>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	691b      	ldr	r3, [r3, #16]
 8009618:	2b02      	cmp	r3, #2
 800961a:	d004      	beq.n	8009626 <HAL_SPI_Init+0x172>
 800961c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8009620:	4824      	ldr	r0, [pc, #144]	; (80096b4 <HAL_SPI_Init+0x200>)
 8009622:	f7f8 fec4 	bl	80023ae <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	695b      	ldr	r3, [r3, #20]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d008      	beq.n	8009640 <HAL_SPI_Init+0x18c>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	695b      	ldr	r3, [r3, #20]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d004      	beq.n	8009640 <HAL_SPI_Init+0x18c>
 8009636:	f240 114b 	movw	r1, #331	; 0x14b
 800963a:	481e      	ldr	r0, [pc, #120]	; (80096b4 <HAL_SPI_Init+0x200>)
 800963c:	f7f8 feb7 	bl	80023ae <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009648:	d125      	bne.n	8009696 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d05d      	beq.n	800970e <HAL_SPI_Init+0x25a>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	69db      	ldr	r3, [r3, #28]
 8009656:	2b08      	cmp	r3, #8
 8009658:	d059      	beq.n	800970e <HAL_SPI_Init+0x25a>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	69db      	ldr	r3, [r3, #28]
 800965e:	2b10      	cmp	r3, #16
 8009660:	d055      	beq.n	800970e <HAL_SPI_Init+0x25a>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	69db      	ldr	r3, [r3, #28]
 8009666:	2b18      	cmp	r3, #24
 8009668:	d051      	beq.n	800970e <HAL_SPI_Init+0x25a>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	69db      	ldr	r3, [r3, #28]
 800966e:	2b20      	cmp	r3, #32
 8009670:	d04d      	beq.n	800970e <HAL_SPI_Init+0x25a>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	2b28      	cmp	r3, #40	; 0x28
 8009678:	d049      	beq.n	800970e <HAL_SPI_Init+0x25a>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	69db      	ldr	r3, [r3, #28]
 800967e:	2b30      	cmp	r3, #48	; 0x30
 8009680:	d045      	beq.n	800970e <HAL_SPI_Init+0x25a>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	69db      	ldr	r3, [r3, #28]
 8009686:	2b38      	cmp	r3, #56	; 0x38
 8009688:	d041      	beq.n	800970e <HAL_SPI_Init+0x25a>
 800968a:	f240 114f 	movw	r1, #335	; 0x14f
 800968e:	4809      	ldr	r0, [pc, #36]	; (80096b4 <HAL_SPI_Init+0x200>)
 8009690:	f7f8 fe8d 	bl	80023ae <assert_failed>
 8009694:	e03b      	b.n	800970e <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	61da      	str	r2, [r3, #28]
 800969c:	e037      	b.n	800970e <HAL_SPI_Init+0x25a>
 800969e:	bf00      	nop
 80096a0:	40013000 	.word	0x40013000
 80096a4:	40003800 	.word	0x40003800
 80096a8:	40003c00 	.word	0x40003c00
 80096ac:	40013400 	.word	0x40013400
 80096b0:	40015000 	.word	0x40015000
 80096b4:	0800f190 	.word	0x0800f190
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	69db      	ldr	r3, [r3, #28]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d020      	beq.n	8009702 <HAL_SPI_Init+0x24e>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	69db      	ldr	r3, [r3, #28]
 80096c4:	2b08      	cmp	r3, #8
 80096c6:	d01c      	beq.n	8009702 <HAL_SPI_Init+0x24e>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	69db      	ldr	r3, [r3, #28]
 80096cc:	2b10      	cmp	r3, #16
 80096ce:	d018      	beq.n	8009702 <HAL_SPI_Init+0x24e>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	69db      	ldr	r3, [r3, #28]
 80096d4:	2b18      	cmp	r3, #24
 80096d6:	d014      	beq.n	8009702 <HAL_SPI_Init+0x24e>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	69db      	ldr	r3, [r3, #28]
 80096dc:	2b20      	cmp	r3, #32
 80096de:	d010      	beq.n	8009702 <HAL_SPI_Init+0x24e>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	69db      	ldr	r3, [r3, #28]
 80096e4:	2b28      	cmp	r3, #40	; 0x28
 80096e6:	d00c      	beq.n	8009702 <HAL_SPI_Init+0x24e>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	69db      	ldr	r3, [r3, #28]
 80096ec:	2b30      	cmp	r3, #48	; 0x30
 80096ee:	d008      	beq.n	8009702 <HAL_SPI_Init+0x24e>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	69db      	ldr	r3, [r3, #28]
 80096f4:	2b38      	cmp	r3, #56	; 0x38
 80096f6:	d004      	beq.n	8009702 <HAL_SPI_Init+0x24e>
 80096f8:	f240 1159 	movw	r1, #345	; 0x159
 80096fc:	484a      	ldr	r0, [pc, #296]	; (8009828 <HAL_SPI_Init+0x374>)
 80096fe:	f7f8 fe56 	bl	80023ae <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800971a:	b2db      	uxtb	r3, r3
 800971c:	2b00      	cmp	r3, #0
 800971e:	d126      	bne.n	800976e <HAL_SPI_Init+0x2ba>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a40      	ldr	r2, [pc, #256]	; (800982c <HAL_SPI_Init+0x378>)
 800972c:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a3f      	ldr	r2, [pc, #252]	; (8009830 <HAL_SPI_Init+0x37c>)
 8009732:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a3f      	ldr	r2, [pc, #252]	; (8009834 <HAL_SPI_Init+0x380>)
 8009738:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a3e      	ldr	r2, [pc, #248]	; (8009838 <HAL_SPI_Init+0x384>)
 800973e:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a3e      	ldr	r2, [pc, #248]	; (800983c <HAL_SPI_Init+0x388>)
 8009744:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a3d      	ldr	r2, [pc, #244]	; (8009840 <HAL_SPI_Init+0x38c>)
 800974a:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a3d      	ldr	r2, [pc, #244]	; (8009844 <HAL_SPI_Init+0x390>)
 8009750:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a3c      	ldr	r2, [pc, #240]	; (8009848 <HAL_SPI_Init+0x394>)
 8009756:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800975c:	2b00      	cmp	r3, #0
 800975e:	d102      	bne.n	8009766 <HAL_SPI_Init+0x2b2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a3a      	ldr	r2, [pc, #232]	; (800984c <HAL_SPI_Init+0x398>)
 8009764:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2202      	movs	r2, #2
 8009772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009784:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009796:	431a      	orrs	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097a0:	431a      	orrs	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	f003 0302 	and.w	r3, r3, #2
 80097aa:	431a      	orrs	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	f003 0301 	and.w	r3, r3, #1
 80097b4:	431a      	orrs	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	699b      	ldr	r3, [r3, #24]
 80097ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097be:	431a      	orrs	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	69db      	ldr	r3, [r3, #28]
 80097c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097c8:	431a      	orrs	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097d2:	ea42 0103 	orr.w	r1, r2, r3
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	430a      	orrs	r2, r1
 80097e4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	0c1b      	lsrs	r3, r3, #16
 80097ec:	f003 0104 	and.w	r1, r3, #4
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f4:	f003 0210 	and.w	r2, r3, #16
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	430a      	orrs	r2, r1
 80097fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	69da      	ldr	r2, [r3, #28]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800980e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2201      	movs	r2, #1
 800981a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	0800f190 	.word	0x0800f190
 800982c:	08009a51 	.word	0x08009a51
 8009830:	08009a65 	.word	0x08009a65
 8009834:	08009a79 	.word	0x08009a79
 8009838:	08009a8d 	.word	0x08009a8d
 800983c:	08009aa1 	.word	0x08009aa1
 8009840:	08009ab5 	.word	0x08009ab5
 8009844:	08009ac9 	.word	0x08009ac9
 8009848:	08009add 	.word	0x08009add
 800984c:	080025fd 	.word	0x080025fd

08009850 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b088      	sub	sp, #32
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	099b      	lsrs	r3, r3, #6
 800986c:	f003 0301 	and.w	r3, r3, #1
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10f      	bne.n	8009894 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00a      	beq.n	8009894 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	099b      	lsrs	r3, r3, #6
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	2b00      	cmp	r3, #0
 8009888:	d004      	beq.n	8009894 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	4798      	blx	r3
    return;
 8009892:	e0d8      	b.n	8009a46 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	085b      	lsrs	r3, r3, #1
 8009898:	f003 0301 	and.w	r3, r3, #1
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00a      	beq.n	80098b6 <HAL_SPI_IRQHandler+0x66>
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	09db      	lsrs	r3, r3, #7
 80098a4:	f003 0301 	and.w	r3, r3, #1
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d004      	beq.n	80098b6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	4798      	blx	r3
    return;
 80098b4:	e0c7      	b.n	8009a46 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	095b      	lsrs	r3, r3, #5
 80098ba:	f003 0301 	and.w	r3, r3, #1
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d10c      	bne.n	80098dc <HAL_SPI_IRQHandler+0x8c>
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	099b      	lsrs	r3, r3, #6
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d106      	bne.n	80098dc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	0a1b      	lsrs	r3, r3, #8
 80098d2:	f003 0301 	and.w	r3, r3, #1
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f000 80b5 	beq.w	8009a46 <HAL_SPI_IRQHandler+0x1f6>
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	095b      	lsrs	r3, r3, #5
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f000 80ae 	beq.w	8009a46 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	099b      	lsrs	r3, r3, #6
 80098ee:	f003 0301 	and.w	r3, r3, #1
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d023      	beq.n	800993e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b03      	cmp	r3, #3
 8009900:	d011      	beq.n	8009926 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009906:	f043 0204 	orr.w	r2, r3, #4
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800990e:	2300      	movs	r3, #0
 8009910:	617b      	str	r3, [r7, #20]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	617b      	str	r3, [r7, #20]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	617b      	str	r3, [r7, #20]
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	e00b      	b.n	800993e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009926:	2300      	movs	r3, #0
 8009928:	613b      	str	r3, [r7, #16]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	613b      	str	r3, [r7, #16]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	613b      	str	r3, [r7, #16]
 800993a:	693b      	ldr	r3, [r7, #16]
        return;
 800993c:	e083      	b.n	8009a46 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	095b      	lsrs	r3, r3, #5
 8009942:	f003 0301 	and.w	r3, r3, #1
 8009946:	2b00      	cmp	r3, #0
 8009948:	d014      	beq.n	8009974 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800994e:	f043 0201 	orr.w	r2, r3, #1
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009956:	2300      	movs	r3, #0
 8009958:	60fb      	str	r3, [r7, #12]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	60fb      	str	r3, [r7, #12]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009970:	601a      	str	r2, [r3, #0]
 8009972:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	0a1b      	lsrs	r3, r3, #8
 8009978:	f003 0301 	and.w	r3, r3, #1
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00c      	beq.n	800999a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009984:	f043 0208 	orr.w	r2, r3, #8
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800998c:	2300      	movs	r3, #0
 800998e:	60bb      	str	r3, [r7, #8]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	60bb      	str	r3, [r7, #8]
 8009998:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d050      	beq.n	8009a44 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	685a      	ldr	r2, [r3, #4]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80099b0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	f003 0302 	and.w	r3, r3, #2
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d104      	bne.n	80099ce <HAL_SPI_IRQHandler+0x17e>
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	f003 0301 	and.w	r3, r3, #1
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d034      	beq.n	8009a38 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	685a      	ldr	r2, [r3, #4]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f022 0203 	bic.w	r2, r2, #3
 80099dc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d011      	beq.n	8009a0a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099ea:	4a18      	ldr	r2, [pc, #96]	; (8009a4c <HAL_SPI_IRQHandler+0x1fc>)
 80099ec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fa feea 	bl	80047cc <HAL_DMA_Abort_IT>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d005      	beq.n	8009a0a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d017      	beq.n	8009a42 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a16:	4a0d      	ldr	r2, [pc, #52]	; (8009a4c <HAL_SPI_IRQHandler+0x1fc>)
 8009a18:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fa fed4 	bl	80047cc <HAL_DMA_Abort_IT>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00b      	beq.n	8009a42 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009a36:	e004      	b.n	8009a42 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009a40:	e000      	b.n	8009a44 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8009a42:	bf00      	nop
    return;
 8009a44:	bf00      	nop
  }
}
 8009a46:	3720      	adds	r7, #32
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	08009af1 	.word	0x08009af1

08009a50 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009a58:	bf00      	nop
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009a6c:	bf00      	nop
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009a94:	bf00      	nop
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009aa8:	bf00      	nop
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009abc:	bf00      	nop
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009ad0:	bf00      	nop
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8009ae4:	bf00      	nop
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2200      	movs	r2, #0
 8009b02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2200      	movs	r2, #0
 8009b08:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b12:	bf00      	nop
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
	...

08009b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d101      	bne.n	8009b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e0b2      	b.n	8009c94 <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a5a      	ldr	r2, [pc, #360]	; (8009c9c <HAL_TIM_Base_Init+0x180>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d027      	beq.n	8009b88 <HAL_TIM_Base_Init+0x6c>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b40:	d022      	beq.n	8009b88 <HAL_TIM_Base_Init+0x6c>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a56      	ldr	r2, [pc, #344]	; (8009ca0 <HAL_TIM_Base_Init+0x184>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d01d      	beq.n	8009b88 <HAL_TIM_Base_Init+0x6c>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a54      	ldr	r2, [pc, #336]	; (8009ca4 <HAL_TIM_Base_Init+0x188>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d018      	beq.n	8009b88 <HAL_TIM_Base_Init+0x6c>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a53      	ldr	r2, [pc, #332]	; (8009ca8 <HAL_TIM_Base_Init+0x18c>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d013      	beq.n	8009b88 <HAL_TIM_Base_Init+0x6c>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a51      	ldr	r2, [pc, #324]	; (8009cac <HAL_TIM_Base_Init+0x190>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d00e      	beq.n	8009b88 <HAL_TIM_Base_Init+0x6c>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a50      	ldr	r2, [pc, #320]	; (8009cb0 <HAL_TIM_Base_Init+0x194>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d009      	beq.n	8009b88 <HAL_TIM_Base_Init+0x6c>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a4e      	ldr	r2, [pc, #312]	; (8009cb4 <HAL_TIM_Base_Init+0x198>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d004      	beq.n	8009b88 <HAL_TIM_Base_Init+0x6c>
 8009b7e:	f240 1113 	movw	r1, #275	; 0x113
 8009b82:	484d      	ldr	r0, [pc, #308]	; (8009cb8 <HAL_TIM_Base_Init+0x19c>)
 8009b84:	f7f8 fc13 	bl	80023ae <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d014      	beq.n	8009bba <HAL_TIM_Base_Init+0x9e>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	2b10      	cmp	r3, #16
 8009b96:	d010      	beq.n	8009bba <HAL_TIM_Base_Init+0x9e>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	2b20      	cmp	r3, #32
 8009b9e:	d00c      	beq.n	8009bba <HAL_TIM_Base_Init+0x9e>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	2b40      	cmp	r3, #64	; 0x40
 8009ba6:	d008      	beq.n	8009bba <HAL_TIM_Base_Init+0x9e>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	2b60      	cmp	r3, #96	; 0x60
 8009bae:	d004      	beq.n	8009bba <HAL_TIM_Base_Init+0x9e>
 8009bb0:	f44f 718a 	mov.w	r1, #276	; 0x114
 8009bb4:	4840      	ldr	r0, [pc, #256]	; (8009cb8 <HAL_TIM_Base_Init+0x19c>)
 8009bb6:	f7f8 fbfa 	bl	80023ae <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00e      	beq.n	8009be0 <HAL_TIM_Base_Init+0xc4>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bca:	d009      	beq.n	8009be0 <HAL_TIM_Base_Init+0xc4>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bd4:	d004      	beq.n	8009be0 <HAL_TIM_Base_Init+0xc4>
 8009bd6:	f240 1115 	movw	r1, #277	; 0x115
 8009bda:	4837      	ldr	r0, [pc, #220]	; (8009cb8 <HAL_TIM_Base_Init+0x19c>)
 8009bdc:	f7f8 fbe7 	bl	80023ae <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	699b      	ldr	r3, [r3, #24]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d008      	beq.n	8009bfa <HAL_TIM_Base_Init+0xde>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	2b80      	cmp	r3, #128	; 0x80
 8009bee:	d004      	beq.n	8009bfa <HAL_TIM_Base_Init+0xde>
 8009bf0:	f44f 718b 	mov.w	r1, #278	; 0x116
 8009bf4:	4830      	ldr	r0, [pc, #192]	; (8009cb8 <HAL_TIM_Base_Init+0x19c>)
 8009bf6:	f7f8 fbda 	bl	80023ae <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d111      	bne.n	8009c2a <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 ff80 	bl	800ab14 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d102      	bne.n	8009c22 <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a27      	ldr	r2, [pc, #156]	; (8009cbc <HAL_TIM_Base_Init+0x1a0>)
 8009c20:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2202      	movs	r2, #2
 8009c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	3304      	adds	r3, #4
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	f000 fe4f 	bl	800a8e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2201      	movs	r2, #1
 8009c46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2201      	movs	r2, #1
 8009c56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2201      	movs	r2, #1
 8009c76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	40010000 	.word	0x40010000
 8009ca0:	40000400 	.word	0x40000400
 8009ca4:	40000800 	.word	0x40000800
 8009ca8:	40000c00 	.word	0x40000c00
 8009cac:	40014000 	.word	0x40014000
 8009cb0:	40014400 	.word	0x40014400
 8009cb4:	40014800 	.word	0x40014800
 8009cb8:	0800f204 	.word	0x0800f204
 8009cbc:	08002cb5 	.word	0x08002cb5

08009cc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a39      	ldr	r2, [pc, #228]	; (8009db4 <HAL_TIM_Base_Start+0xf4>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d027      	beq.n	8009d22 <HAL_TIM_Base_Start+0x62>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cda:	d022      	beq.n	8009d22 <HAL_TIM_Base_Start+0x62>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a35      	ldr	r2, [pc, #212]	; (8009db8 <HAL_TIM_Base_Start+0xf8>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d01d      	beq.n	8009d22 <HAL_TIM_Base_Start+0x62>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a34      	ldr	r2, [pc, #208]	; (8009dbc <HAL_TIM_Base_Start+0xfc>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d018      	beq.n	8009d22 <HAL_TIM_Base_Start+0x62>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a32      	ldr	r2, [pc, #200]	; (8009dc0 <HAL_TIM_Base_Start+0x100>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d013      	beq.n	8009d22 <HAL_TIM_Base_Start+0x62>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a31      	ldr	r2, [pc, #196]	; (8009dc4 <HAL_TIM_Base_Start+0x104>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d00e      	beq.n	8009d22 <HAL_TIM_Base_Start+0x62>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a2f      	ldr	r2, [pc, #188]	; (8009dc8 <HAL_TIM_Base_Start+0x108>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d009      	beq.n	8009d22 <HAL_TIM_Base_Start+0x62>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a2e      	ldr	r2, [pc, #184]	; (8009dcc <HAL_TIM_Base_Start+0x10c>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d004      	beq.n	8009d22 <HAL_TIM_Base_Start+0x62>
 8009d18:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8009d1c:	482c      	ldr	r0, [pc, #176]	; (8009dd0 <HAL_TIM_Base_Start+0x110>)
 8009d1e:	f7f8 fb46 	bl	80023ae <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d001      	beq.n	8009d32 <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e03c      	b.n	8009dac <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2202      	movs	r2, #2
 8009d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a1d      	ldr	r2, [pc, #116]	; (8009db4 <HAL_TIM_Base_Start+0xf4>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d018      	beq.n	8009d76 <HAL_TIM_Base_Start+0xb6>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d4c:	d013      	beq.n	8009d76 <HAL_TIM_Base_Start+0xb6>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a19      	ldr	r2, [pc, #100]	; (8009db8 <HAL_TIM_Base_Start+0xf8>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d00e      	beq.n	8009d76 <HAL_TIM_Base_Start+0xb6>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a17      	ldr	r2, [pc, #92]	; (8009dbc <HAL_TIM_Base_Start+0xfc>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d009      	beq.n	8009d76 <HAL_TIM_Base_Start+0xb6>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a16      	ldr	r2, [pc, #88]	; (8009dc0 <HAL_TIM_Base_Start+0x100>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d004      	beq.n	8009d76 <HAL_TIM_Base_Start+0xb6>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a14      	ldr	r2, [pc, #80]	; (8009dc4 <HAL_TIM_Base_Start+0x104>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d111      	bne.n	8009d9a <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	f003 0307 	and.w	r3, r3, #7
 8009d80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2b06      	cmp	r3, #6
 8009d86:	d010      	beq.n	8009daa <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f042 0201 	orr.w	r2, r2, #1
 8009d96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d98:	e007      	b.n	8009daa <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f042 0201 	orr.w	r2, r2, #1
 8009da8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	40010000 	.word	0x40010000
 8009db8:	40000400 	.word	0x40000400
 8009dbc:	40000800 	.word	0x40000800
 8009dc0:	40000c00 	.word	0x40000c00
 8009dc4:	40014000 	.word	0x40014000
 8009dc8:	40014400 	.word	0x40014400
 8009dcc:	40014800 	.word	0x40014800
 8009dd0:	0800f204 	.word	0x0800f204

08009dd4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a25      	ldr	r2, [pc, #148]	; (8009e78 <HAL_TIM_Base_Stop+0xa4>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d027      	beq.n	8009e36 <HAL_TIM_Base_Stop+0x62>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dee:	d022      	beq.n	8009e36 <HAL_TIM_Base_Stop+0x62>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a21      	ldr	r2, [pc, #132]	; (8009e7c <HAL_TIM_Base_Stop+0xa8>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d01d      	beq.n	8009e36 <HAL_TIM_Base_Stop+0x62>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a20      	ldr	r2, [pc, #128]	; (8009e80 <HAL_TIM_Base_Stop+0xac>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d018      	beq.n	8009e36 <HAL_TIM_Base_Stop+0x62>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a1e      	ldr	r2, [pc, #120]	; (8009e84 <HAL_TIM_Base_Stop+0xb0>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d013      	beq.n	8009e36 <HAL_TIM_Base_Stop+0x62>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a1d      	ldr	r2, [pc, #116]	; (8009e88 <HAL_TIM_Base_Stop+0xb4>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d00e      	beq.n	8009e36 <HAL_TIM_Base_Stop+0x62>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a1b      	ldr	r2, [pc, #108]	; (8009e8c <HAL_TIM_Base_Stop+0xb8>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d009      	beq.n	8009e36 <HAL_TIM_Base_Stop+0x62>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a1a      	ldr	r2, [pc, #104]	; (8009e90 <HAL_TIM_Base_Stop+0xbc>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d004      	beq.n	8009e36 <HAL_TIM_Base_Stop+0x62>
 8009e2c:	f240 11b9 	movw	r1, #441	; 0x1b9
 8009e30:	4818      	ldr	r0, [pc, #96]	; (8009e94 <HAL_TIM_Base_Stop+0xc0>)
 8009e32:	f7f8 fabc 	bl	80023ae <assert_failed>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	6a1a      	ldr	r2, [r3, #32]
 8009e3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009e40:	4013      	ands	r3, r2
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10f      	bne.n	8009e66 <HAL_TIM_Base_Stop+0x92>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	6a1a      	ldr	r2, [r3, #32]
 8009e4c:	f240 4344 	movw	r3, #1092	; 0x444
 8009e50:	4013      	ands	r3, r2
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d107      	bne.n	8009e66 <HAL_TIM_Base_Stop+0x92>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f022 0201 	bic.w	r2, r2, #1
 8009e64:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	40010000 	.word	0x40010000
 8009e7c:	40000400 	.word	0x40000400
 8009e80:	40000800 	.word	0x40000800
 8009e84:	40000c00 	.word	0x40000c00
 8009e88:	40014000 	.word	0x40014000
 8009e8c:	40014400 	.word	0x40014400
 8009e90:	40014800 	.word	0x40014800
 8009e94:	0800f204 	.word	0x0800f204

08009e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a3d      	ldr	r2, [pc, #244]	; (8009f9c <HAL_TIM_Base_Start_IT+0x104>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d027      	beq.n	8009efa <HAL_TIM_Base_Start_IT+0x62>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eb2:	d022      	beq.n	8009efa <HAL_TIM_Base_Start_IT+0x62>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a39      	ldr	r2, [pc, #228]	; (8009fa0 <HAL_TIM_Base_Start_IT+0x108>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d01d      	beq.n	8009efa <HAL_TIM_Base_Start_IT+0x62>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a38      	ldr	r2, [pc, #224]	; (8009fa4 <HAL_TIM_Base_Start_IT+0x10c>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d018      	beq.n	8009efa <HAL_TIM_Base_Start_IT+0x62>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a36      	ldr	r2, [pc, #216]	; (8009fa8 <HAL_TIM_Base_Start_IT+0x110>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d013      	beq.n	8009efa <HAL_TIM_Base_Start_IT+0x62>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a35      	ldr	r2, [pc, #212]	; (8009fac <HAL_TIM_Base_Start_IT+0x114>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d00e      	beq.n	8009efa <HAL_TIM_Base_Start_IT+0x62>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a33      	ldr	r2, [pc, #204]	; (8009fb0 <HAL_TIM_Base_Start_IT+0x118>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d009      	beq.n	8009efa <HAL_TIM_Base_Start_IT+0x62>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a32      	ldr	r2, [pc, #200]	; (8009fb4 <HAL_TIM_Base_Start_IT+0x11c>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d004      	beq.n	8009efa <HAL_TIM_Base_Start_IT+0x62>
 8009ef0:	f240 11cf 	movw	r1, #463	; 0x1cf
 8009ef4:	4830      	ldr	r0, [pc, #192]	; (8009fb8 <HAL_TIM_Base_Start_IT+0x120>)
 8009ef6:	f7f8 fa5a 	bl	80023ae <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d001      	beq.n	8009f0a <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e044      	b.n	8009f94 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2202      	movs	r2, #2
 8009f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	68da      	ldr	r2, [r3, #12]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f042 0201 	orr.w	r2, r2, #1
 8009f20:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a1d      	ldr	r2, [pc, #116]	; (8009f9c <HAL_TIM_Base_Start_IT+0x104>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d018      	beq.n	8009f5e <HAL_TIM_Base_Start_IT+0xc6>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f34:	d013      	beq.n	8009f5e <HAL_TIM_Base_Start_IT+0xc6>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a19      	ldr	r2, [pc, #100]	; (8009fa0 <HAL_TIM_Base_Start_IT+0x108>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d00e      	beq.n	8009f5e <HAL_TIM_Base_Start_IT+0xc6>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a17      	ldr	r2, [pc, #92]	; (8009fa4 <HAL_TIM_Base_Start_IT+0x10c>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d009      	beq.n	8009f5e <HAL_TIM_Base_Start_IT+0xc6>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a16      	ldr	r2, [pc, #88]	; (8009fa8 <HAL_TIM_Base_Start_IT+0x110>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d004      	beq.n	8009f5e <HAL_TIM_Base_Start_IT+0xc6>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a14      	ldr	r2, [pc, #80]	; (8009fac <HAL_TIM_Base_Start_IT+0x114>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d111      	bne.n	8009f82 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	f003 0307 	and.w	r3, r3, #7
 8009f68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2b06      	cmp	r3, #6
 8009f6e:	d010      	beq.n	8009f92 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f042 0201 	orr.w	r2, r2, #1
 8009f7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f80:	e007      	b.n	8009f92 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f042 0201 	orr.w	r2, r2, #1
 8009f90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	40010000 	.word	0x40010000
 8009fa0:	40000400 	.word	0x40000400
 8009fa4:	40000800 	.word	0x40000800
 8009fa8:	40000c00 	.word	0x40000c00
 8009fac:	40014000 	.word	0x40014000
 8009fb0:	40014400 	.word	0x40014400
 8009fb4:	40014800 	.word	0x40014800
 8009fb8:	0800f204 	.word	0x0800f204

08009fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	f003 0302 	and.w	r3, r3, #2
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	d128      	bne.n	800a024 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	f003 0302 	and.w	r3, r3, #2
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	d121      	bne.n	800a024 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f06f 0202 	mvn.w	r2, #2
 8009fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	f003 0303 	and.w	r3, r3, #3
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d005      	beq.n	800a00a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	4798      	blx	r3
 800a008:	e009      	b.n	800a01e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	f003 0304 	and.w	r3, r3, #4
 800a02e:	2b04      	cmp	r3, #4
 800a030:	d128      	bne.n	800a084 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	f003 0304 	and.w	r3, r3, #4
 800a03c:	2b04      	cmp	r3, #4
 800a03e:	d121      	bne.n	800a084 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f06f 0204 	mvn.w	r2, #4
 800a048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2202      	movs	r2, #2
 800a04e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d005      	beq.n	800a06a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	4798      	blx	r3
 800a068:	e009      	b.n	800a07e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	f003 0308 	and.w	r3, r3, #8
 800a08e:	2b08      	cmp	r3, #8
 800a090:	d128      	bne.n	800a0e4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	f003 0308 	and.w	r3, r3, #8
 800a09c:	2b08      	cmp	r3, #8
 800a09e:	d121      	bne.n	800a0e4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f06f 0208 	mvn.w	r2, #8
 800a0a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2204      	movs	r2, #4
 800a0ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	69db      	ldr	r3, [r3, #28]
 800a0b6:	f003 0303 	and.w	r3, r3, #3
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d005      	beq.n	800a0ca <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	4798      	blx	r3
 800a0c8:	e009      	b.n	800a0de <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	f003 0310 	and.w	r3, r3, #16
 800a0ee:	2b10      	cmp	r3, #16
 800a0f0:	d128      	bne.n	800a144 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	f003 0310 	and.w	r3, r3, #16
 800a0fc:	2b10      	cmp	r3, #16
 800a0fe:	d121      	bne.n	800a144 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f06f 0210 	mvn.w	r2, #16
 800a108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2208      	movs	r2, #8
 800a10e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	69db      	ldr	r3, [r3, #28]
 800a116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d005      	beq.n	800a12a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	4798      	blx	r3
 800a128:	e009      	b.n	800a13e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	691b      	ldr	r3, [r3, #16]
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d110      	bne.n	800a174 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	f003 0301 	and.w	r3, r3, #1
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d109      	bne.n	800a174 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f06f 0201 	mvn.w	r2, #1
 800a168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a17e:	2b80      	cmp	r3, #128	; 0x80
 800a180:	d110      	bne.n	800a1a4 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a18c:	2b80      	cmp	r3, #128	; 0x80
 800a18e:	d109      	bne.n	800a1a4 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ae:	2b40      	cmp	r3, #64	; 0x40
 800a1b0:	d110      	bne.n	800a1d4 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1bc:	2b40      	cmp	r3, #64	; 0x40
 800a1be:	d109      	bne.n	800a1d4 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a1c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	f003 0320 	and.w	r3, r3, #32
 800a1de:	2b20      	cmp	r3, #32
 800a1e0:	d110      	bne.n	800a204 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	f003 0320 	and.w	r3, r3, #32
 800a1ec:	2b20      	cmp	r3, #32
 800a1ee:	d109      	bne.n	800a204 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f06f 0220 	mvn.w	r2, #32
 800a1f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a204:	bf00      	nop
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a216:	2300      	movs	r3, #0
 800a218:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a220:	2b01      	cmp	r3, #1
 800a222:	d101      	bne.n	800a228 <HAL_TIM_ConfigClockSource+0x1c>
 800a224:	2302      	movs	r3, #2
 800a226:	e2f0      	b.n	800a80a <HAL_TIM_ConfigClockSource+0x5fe>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2202      	movs	r2, #2
 800a234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a240:	d029      	beq.n	800a296 <HAL_TIM_ConfigClockSource+0x8a>
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b70      	cmp	r3, #112	; 0x70
 800a248:	d025      	beq.n	800a296 <HAL_TIM_ConfigClockSource+0x8a>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a252:	d020      	beq.n	800a296 <HAL_TIM_ConfigClockSource+0x8a>
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2b40      	cmp	r3, #64	; 0x40
 800a25a:	d01c      	beq.n	800a296 <HAL_TIM_ConfigClockSource+0x8a>
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b50      	cmp	r3, #80	; 0x50
 800a262:	d018      	beq.n	800a296 <HAL_TIM_ConfigClockSource+0x8a>
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b60      	cmp	r3, #96	; 0x60
 800a26a:	d014      	beq.n	800a296 <HAL_TIM_ConfigClockSource+0x8a>
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d010      	beq.n	800a296 <HAL_TIM_ConfigClockSource+0x8a>
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b10      	cmp	r3, #16
 800a27a:	d00c      	beq.n	800a296 <HAL_TIM_ConfigClockSource+0x8a>
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b20      	cmp	r3, #32
 800a282:	d008      	beq.n	800a296 <HAL_TIM_ConfigClockSource+0x8a>
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2b30      	cmp	r3, #48	; 0x30
 800a28a:	d004      	beq.n	800a296 <HAL_TIM_ConfigClockSource+0x8a>
 800a28c:	f241 41b7 	movw	r1, #5303	; 0x14b7
 800a290:	487c      	ldr	r0, [pc, #496]	; (800a484 <HAL_TIM_ConfigClockSource+0x278>)
 800a292:	f7f8 f88c 	bl	80023ae <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a2a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2ac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	68ba      	ldr	r2, [r7, #8]
 800a2b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2be:	f000 80f1 	beq.w	800a4a4 <HAL_TIM_ConfigClockSource+0x298>
 800a2c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2c6:	f200 8293 	bhi.w	800a7f0 <HAL_TIM_ConfigClockSource+0x5e4>
 800a2ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2ce:	d02d      	beq.n	800a32c <HAL_TIM_ConfigClockSource+0x120>
 800a2d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2d4:	f200 828c 	bhi.w	800a7f0 <HAL_TIM_ConfigClockSource+0x5e4>
 800a2d8:	2b70      	cmp	r3, #112	; 0x70
 800a2da:	d05d      	beq.n	800a398 <HAL_TIM_ConfigClockSource+0x18c>
 800a2dc:	2b70      	cmp	r3, #112	; 0x70
 800a2de:	f200 8287 	bhi.w	800a7f0 <HAL_TIM_ConfigClockSource+0x5e4>
 800a2e2:	2b60      	cmp	r3, #96	; 0x60
 800a2e4:	f000 81a0 	beq.w	800a628 <HAL_TIM_ConfigClockSource+0x41c>
 800a2e8:	2b60      	cmp	r3, #96	; 0x60
 800a2ea:	f200 8281 	bhi.w	800a7f0 <HAL_TIM_ConfigClockSource+0x5e4>
 800a2ee:	2b50      	cmp	r3, #80	; 0x50
 800a2f0:	f000 8144 	beq.w	800a57c <HAL_TIM_ConfigClockSource+0x370>
 800a2f4:	2b50      	cmp	r3, #80	; 0x50
 800a2f6:	f200 827b 	bhi.w	800a7f0 <HAL_TIM_ConfigClockSource+0x5e4>
 800a2fa:	2b40      	cmp	r3, #64	; 0x40
 800a2fc:	f000 81f6 	beq.w	800a6ec <HAL_TIM_ConfigClockSource+0x4e0>
 800a300:	2b40      	cmp	r3, #64	; 0x40
 800a302:	f200 8275 	bhi.w	800a7f0 <HAL_TIM_ConfigClockSource+0x5e4>
 800a306:	2b30      	cmp	r3, #48	; 0x30
 800a308:	f000 8246 	beq.w	800a798 <HAL_TIM_ConfigClockSource+0x58c>
 800a30c:	2b30      	cmp	r3, #48	; 0x30
 800a30e:	f200 826f 	bhi.w	800a7f0 <HAL_TIM_ConfigClockSource+0x5e4>
 800a312:	2b20      	cmp	r3, #32
 800a314:	f000 8240 	beq.w	800a798 <HAL_TIM_ConfigClockSource+0x58c>
 800a318:	2b20      	cmp	r3, #32
 800a31a:	f200 8269 	bhi.w	800a7f0 <HAL_TIM_ConfigClockSource+0x5e4>
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f000 823a 	beq.w	800a798 <HAL_TIM_ConfigClockSource+0x58c>
 800a324:	2b10      	cmp	r3, #16
 800a326:	f000 8237 	beq.w	800a798 <HAL_TIM_ConfigClockSource+0x58c>
 800a32a:	e261      	b.n	800a7f0 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a55      	ldr	r2, [pc, #340]	; (800a488 <HAL_TIM_ConfigClockSource+0x27c>)
 800a332:	4293      	cmp	r3, r2
 800a334:	f000 825f 	beq.w	800a7f6 <HAL_TIM_ConfigClockSource+0x5ea>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a340:	f000 8259 	beq.w	800a7f6 <HAL_TIM_ConfigClockSource+0x5ea>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a50      	ldr	r2, [pc, #320]	; (800a48c <HAL_TIM_ConfigClockSource+0x280>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	f000 8253 	beq.w	800a7f6 <HAL_TIM_ConfigClockSource+0x5ea>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a4e      	ldr	r2, [pc, #312]	; (800a490 <HAL_TIM_ConfigClockSource+0x284>)
 800a356:	4293      	cmp	r3, r2
 800a358:	f000 824d 	beq.w	800a7f6 <HAL_TIM_ConfigClockSource+0x5ea>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a4c      	ldr	r2, [pc, #304]	; (800a494 <HAL_TIM_ConfigClockSource+0x288>)
 800a362:	4293      	cmp	r3, r2
 800a364:	f000 8247 	beq.w	800a7f6 <HAL_TIM_ConfigClockSource+0x5ea>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a4a      	ldr	r2, [pc, #296]	; (800a498 <HAL_TIM_ConfigClockSource+0x28c>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	f000 8241 	beq.w	800a7f6 <HAL_TIM_ConfigClockSource+0x5ea>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a48      	ldr	r2, [pc, #288]	; (800a49c <HAL_TIM_ConfigClockSource+0x290>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	f000 823b 	beq.w	800a7f6 <HAL_TIM_ConfigClockSource+0x5ea>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a46      	ldr	r2, [pc, #280]	; (800a4a0 <HAL_TIM_ConfigClockSource+0x294>)
 800a386:	4293      	cmp	r3, r2
 800a388:	f000 8235 	beq.w	800a7f6 <HAL_TIM_ConfigClockSource+0x5ea>
 800a38c:	f241 41c3 	movw	r1, #5315	; 0x14c3
 800a390:	483c      	ldr	r0, [pc, #240]	; (800a484 <HAL_TIM_ConfigClockSource+0x278>)
 800a392:	f7f8 f80c 	bl	80023ae <assert_failed>
      break;
 800a396:	e22e      	b.n	800a7f6 <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a3a      	ldr	r2, [pc, #232]	; (800a488 <HAL_TIM_ConfigClockSource+0x27c>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d01d      	beq.n	800a3de <HAL_TIM_ConfigClockSource+0x1d2>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3aa:	d018      	beq.n	800a3de <HAL_TIM_ConfigClockSource+0x1d2>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a36      	ldr	r2, [pc, #216]	; (800a48c <HAL_TIM_ConfigClockSource+0x280>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d013      	beq.n	800a3de <HAL_TIM_ConfigClockSource+0x1d2>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a35      	ldr	r2, [pc, #212]	; (800a490 <HAL_TIM_ConfigClockSource+0x284>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d00e      	beq.n	800a3de <HAL_TIM_ConfigClockSource+0x1d2>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a33      	ldr	r2, [pc, #204]	; (800a494 <HAL_TIM_ConfigClockSource+0x288>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d009      	beq.n	800a3de <HAL_TIM_ConfigClockSource+0x1d2>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a32      	ldr	r2, [pc, #200]	; (800a498 <HAL_TIM_ConfigClockSource+0x28c>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d004      	beq.n	800a3de <HAL_TIM_ConfigClockSource+0x1d2>
 800a3d4:	f241 41ca 	movw	r1, #5322	; 0x14ca
 800a3d8:	482a      	ldr	r0, [pc, #168]	; (800a484 <HAL_TIM_ConfigClockSource+0x278>)
 800a3da:	f7f7 ffe8 	bl	80023ae <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d013      	beq.n	800a40e <HAL_TIM_ConfigClockSource+0x202>
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3ee:	d00e      	beq.n	800a40e <HAL_TIM_ConfigClockSource+0x202>
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3f8:	d009      	beq.n	800a40e <HAL_TIM_ConfigClockSource+0x202>
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a402:	d004      	beq.n	800a40e <HAL_TIM_ConfigClockSource+0x202>
 800a404:	f241 41cd 	movw	r1, #5325	; 0x14cd
 800a408:	481e      	ldr	r0, [pc, #120]	; (800a484 <HAL_TIM_ConfigClockSource+0x278>)
 800a40a:	f7f7 ffd0 	bl	80023ae <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a416:	d014      	beq.n	800a442 <HAL_TIM_ConfigClockSource+0x236>
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d010      	beq.n	800a442 <HAL_TIM_ConfigClockSource+0x236>
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00c      	beq.n	800a442 <HAL_TIM_ConfigClockSource+0x236>
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	d008      	beq.n	800a442 <HAL_TIM_ConfigClockSource+0x236>
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	2b0a      	cmp	r3, #10
 800a436:	d004      	beq.n	800a442 <HAL_TIM_ConfigClockSource+0x236>
 800a438:	f241 41ce 	movw	r1, #5326	; 0x14ce
 800a43c:	4811      	ldr	r0, [pc, #68]	; (800a484 <HAL_TIM_ConfigClockSource+0x278>)
 800a43e:	f7f7 ffb6 	bl	80023ae <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	2b0f      	cmp	r3, #15
 800a448:	d904      	bls.n	800a454 <HAL_TIM_ConfigClockSource+0x248>
 800a44a:	f241 41cf 	movw	r1, #5327	; 0x14cf
 800a44e:	480d      	ldr	r0, [pc, #52]	; (800a484 <HAL_TIM_ConfigClockSource+0x278>)
 800a450:	f7f7 ffad 	bl	80023ae <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6818      	ldr	r0, [r3, #0]
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	6899      	ldr	r1, [r3, #8]
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	685a      	ldr	r2, [r3, #4]
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	f000 fb36 	bl	800aad4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a476:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	609a      	str	r2, [r3, #8]
      break;
 800a480:	e1ba      	b.n	800a7f8 <HAL_TIM_ConfigClockSource+0x5ec>
 800a482:	bf00      	nop
 800a484:	0800f204 	.word	0x0800f204
 800a488:	40010000 	.word	0x40010000
 800a48c:	40000400 	.word	0x40000400
 800a490:	40000800 	.word	0x40000800
 800a494:	40000c00 	.word	0x40000c00
 800a498:	40014000 	.word	0x40014000
 800a49c:	40014400 	.word	0x40014400
 800a4a0:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a8a      	ldr	r2, [pc, #552]	; (800a6d4 <HAL_TIM_ConfigClockSource+0x4c8>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d018      	beq.n	800a4e0 <HAL_TIM_ConfigClockSource+0x2d4>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4b6:	d013      	beq.n	800a4e0 <HAL_TIM_ConfigClockSource+0x2d4>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a86      	ldr	r2, [pc, #536]	; (800a6d8 <HAL_TIM_ConfigClockSource+0x4cc>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d00e      	beq.n	800a4e0 <HAL_TIM_ConfigClockSource+0x2d4>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a85      	ldr	r2, [pc, #532]	; (800a6dc <HAL_TIM_ConfigClockSource+0x4d0>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d009      	beq.n	800a4e0 <HAL_TIM_ConfigClockSource+0x2d4>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a83      	ldr	r2, [pc, #524]	; (800a6e0 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d004      	beq.n	800a4e0 <HAL_TIM_ConfigClockSource+0x2d4>
 800a4d6:	f241 41e2 	movw	r1, #5346	; 0x14e2
 800a4da:	4882      	ldr	r0, [pc, #520]	; (800a6e4 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a4dc:	f7f7 ff67 	bl	80023ae <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d013      	beq.n	800a510 <HAL_TIM_ConfigClockSource+0x304>
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4f0:	d00e      	beq.n	800a510 <HAL_TIM_ConfigClockSource+0x304>
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4fa:	d009      	beq.n	800a510 <HAL_TIM_ConfigClockSource+0x304>
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a504:	d004      	beq.n	800a510 <HAL_TIM_ConfigClockSource+0x304>
 800a506:	f241 41e5 	movw	r1, #5349	; 0x14e5
 800a50a:	4876      	ldr	r0, [pc, #472]	; (800a6e4 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a50c:	f7f7 ff4f 	bl	80023ae <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a518:	d014      	beq.n	800a544 <HAL_TIM_ConfigClockSource+0x338>
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d010      	beq.n	800a544 <HAL_TIM_ConfigClockSource+0x338>
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00c      	beq.n	800a544 <HAL_TIM_ConfigClockSource+0x338>
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	2b02      	cmp	r3, #2
 800a530:	d008      	beq.n	800a544 <HAL_TIM_ConfigClockSource+0x338>
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	2b0a      	cmp	r3, #10
 800a538:	d004      	beq.n	800a544 <HAL_TIM_ConfigClockSource+0x338>
 800a53a:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800a53e:	4869      	ldr	r0, [pc, #420]	; (800a6e4 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a540:	f7f7 ff35 	bl	80023ae <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	2b0f      	cmp	r3, #15
 800a54a:	d904      	bls.n	800a556 <HAL_TIM_ConfigClockSource+0x34a>
 800a54c:	f241 41e7 	movw	r1, #5351	; 0x14e7
 800a550:	4864      	ldr	r0, [pc, #400]	; (800a6e4 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a552:	f7f7 ff2c 	bl	80023ae <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6818      	ldr	r0, [r3, #0]
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	6899      	ldr	r1, [r3, #8]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	685a      	ldr	r2, [r3, #4]
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	f000 fab5 	bl	800aad4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	689a      	ldr	r2, [r3, #8]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a578:	609a      	str	r2, [r3, #8]
      break;
 800a57a:	e13d      	b.n	800a7f8 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a54      	ldr	r2, [pc, #336]	; (800a6d4 <HAL_TIM_ConfigClockSource+0x4c8>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d01d      	beq.n	800a5c2 <HAL_TIM_ConfigClockSource+0x3b6>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a58e:	d018      	beq.n	800a5c2 <HAL_TIM_ConfigClockSource+0x3b6>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a50      	ldr	r2, [pc, #320]	; (800a6d8 <HAL_TIM_ConfigClockSource+0x4cc>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d013      	beq.n	800a5c2 <HAL_TIM_ConfigClockSource+0x3b6>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a4f      	ldr	r2, [pc, #316]	; (800a6dc <HAL_TIM_ConfigClockSource+0x4d0>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d00e      	beq.n	800a5c2 <HAL_TIM_ConfigClockSource+0x3b6>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a4d      	ldr	r2, [pc, #308]	; (800a6e0 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d009      	beq.n	800a5c2 <HAL_TIM_ConfigClockSource+0x3b6>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a4d      	ldr	r2, [pc, #308]	; (800a6e8 <HAL_TIM_ConfigClockSource+0x4dc>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d004      	beq.n	800a5c2 <HAL_TIM_ConfigClockSource+0x3b6>
 800a5b8:	f241 41f6 	movw	r1, #5366	; 0x14f6
 800a5bc:	4849      	ldr	r0, [pc, #292]	; (800a6e4 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a5be:	f7f7 fef6 	bl	80023ae <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5ca:	d014      	beq.n	800a5f6 <HAL_TIM_ConfigClockSource+0x3ea>
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d010      	beq.n	800a5f6 <HAL_TIM_ConfigClockSource+0x3ea>
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00c      	beq.n	800a5f6 <HAL_TIM_ConfigClockSource+0x3ea>
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	d008      	beq.n	800a5f6 <HAL_TIM_ConfigClockSource+0x3ea>
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	2b0a      	cmp	r3, #10
 800a5ea:	d004      	beq.n	800a5f6 <HAL_TIM_ConfigClockSource+0x3ea>
 800a5ec:	f241 41f9 	movw	r1, #5369	; 0x14f9
 800a5f0:	483c      	ldr	r0, [pc, #240]	; (800a6e4 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a5f2:	f7f7 fedc 	bl	80023ae <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	2b0f      	cmp	r3, #15
 800a5fc:	d904      	bls.n	800a608 <HAL_TIM_ConfigClockSource+0x3fc>
 800a5fe:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800a602:	4838      	ldr	r0, [pc, #224]	; (800a6e4 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a604:	f7f7 fed3 	bl	80023ae <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6818      	ldr	r0, [r3, #0]
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	6859      	ldr	r1, [r3, #4]
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	461a      	mov	r2, r3
 800a616:	f000 f9e3 	bl	800a9e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2150      	movs	r1, #80	; 0x50
 800a620:	4618      	mov	r0, r3
 800a622:	f000 fa3c 	bl	800aa9e <TIM_ITRx_SetConfig>
      break;
 800a626:	e0e7      	b.n	800a7f8 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a29      	ldr	r2, [pc, #164]	; (800a6d4 <HAL_TIM_ConfigClockSource+0x4c8>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d01d      	beq.n	800a66e <HAL_TIM_ConfigClockSource+0x462>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a63a:	d018      	beq.n	800a66e <HAL_TIM_ConfigClockSource+0x462>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a25      	ldr	r2, [pc, #148]	; (800a6d8 <HAL_TIM_ConfigClockSource+0x4cc>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d013      	beq.n	800a66e <HAL_TIM_ConfigClockSource+0x462>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a24      	ldr	r2, [pc, #144]	; (800a6dc <HAL_TIM_ConfigClockSource+0x4d0>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d00e      	beq.n	800a66e <HAL_TIM_ConfigClockSource+0x462>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a22      	ldr	r2, [pc, #136]	; (800a6e0 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d009      	beq.n	800a66e <HAL_TIM_ConfigClockSource+0x462>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4a22      	ldr	r2, [pc, #136]	; (800a6e8 <HAL_TIM_ConfigClockSource+0x4dc>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d004      	beq.n	800a66e <HAL_TIM_ConfigClockSource+0x462>
 800a664:	f241 5106 	movw	r1, #5382	; 0x1506
 800a668:	481e      	ldr	r0, [pc, #120]	; (800a6e4 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a66a:	f7f7 fea0 	bl	80023ae <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a676:	d014      	beq.n	800a6a2 <HAL_TIM_ConfigClockSource+0x496>
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d010      	beq.n	800a6a2 <HAL_TIM_ConfigClockSource+0x496>
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d00c      	beq.n	800a6a2 <HAL_TIM_ConfigClockSource+0x496>
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	d008      	beq.n	800a6a2 <HAL_TIM_ConfigClockSource+0x496>
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	2b0a      	cmp	r3, #10
 800a696:	d004      	beq.n	800a6a2 <HAL_TIM_ConfigClockSource+0x496>
 800a698:	f241 5109 	movw	r1, #5385	; 0x1509
 800a69c:	4811      	ldr	r0, [pc, #68]	; (800a6e4 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a69e:	f7f7 fe86 	bl	80023ae <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	2b0f      	cmp	r3, #15
 800a6a8:	d904      	bls.n	800a6b4 <HAL_TIM_ConfigClockSource+0x4a8>
 800a6aa:	f241 510a 	movw	r1, #5386	; 0x150a
 800a6ae:	480d      	ldr	r0, [pc, #52]	; (800a6e4 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a6b0:	f7f7 fe7d 	bl	80023ae <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6818      	ldr	r0, [r3, #0]
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	6859      	ldr	r1, [r3, #4]
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	f000 f9bc 	bl	800aa3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2160      	movs	r1, #96	; 0x60
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 f9e6 	bl	800aa9e <TIM_ITRx_SetConfig>
      break;
 800a6d2:	e091      	b.n	800a7f8 <HAL_TIM_ConfigClockSource+0x5ec>
 800a6d4:	40010000 	.word	0x40010000
 800a6d8:	40000400 	.word	0x40000400
 800a6dc:	40000800 	.word	0x40000800
 800a6e0:	40000c00 	.word	0x40000c00
 800a6e4:	0800f204 	.word	0x0800f204
 800a6e8:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a48      	ldr	r2, [pc, #288]	; (800a814 <HAL_TIM_ConfigClockSource+0x608>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d01d      	beq.n	800a732 <HAL_TIM_ConfigClockSource+0x526>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6fe:	d018      	beq.n	800a732 <HAL_TIM_ConfigClockSource+0x526>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a44      	ldr	r2, [pc, #272]	; (800a818 <HAL_TIM_ConfigClockSource+0x60c>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d013      	beq.n	800a732 <HAL_TIM_ConfigClockSource+0x526>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a43      	ldr	r2, [pc, #268]	; (800a81c <HAL_TIM_ConfigClockSource+0x610>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d00e      	beq.n	800a732 <HAL_TIM_ConfigClockSource+0x526>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a41      	ldr	r2, [pc, #260]	; (800a820 <HAL_TIM_ConfigClockSource+0x614>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d009      	beq.n	800a732 <HAL_TIM_ConfigClockSource+0x526>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a40      	ldr	r2, [pc, #256]	; (800a824 <HAL_TIM_ConfigClockSource+0x618>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d004      	beq.n	800a732 <HAL_TIM_ConfigClockSource+0x526>
 800a728:	f241 5116 	movw	r1, #5398	; 0x1516
 800a72c:	483e      	ldr	r0, [pc, #248]	; (800a828 <HAL_TIM_ConfigClockSource+0x61c>)
 800a72e:	f7f7 fe3e 	bl	80023ae <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a73a:	d014      	beq.n	800a766 <HAL_TIM_ConfigClockSource+0x55a>
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d010      	beq.n	800a766 <HAL_TIM_ConfigClockSource+0x55a>
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00c      	beq.n	800a766 <HAL_TIM_ConfigClockSource+0x55a>
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	2b02      	cmp	r3, #2
 800a752:	d008      	beq.n	800a766 <HAL_TIM_ConfigClockSource+0x55a>
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	2b0a      	cmp	r3, #10
 800a75a:	d004      	beq.n	800a766 <HAL_TIM_ConfigClockSource+0x55a>
 800a75c:	f241 5119 	movw	r1, #5401	; 0x1519
 800a760:	4831      	ldr	r0, [pc, #196]	; (800a828 <HAL_TIM_ConfigClockSource+0x61c>)
 800a762:	f7f7 fe24 	bl	80023ae <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	2b0f      	cmp	r3, #15
 800a76c:	d904      	bls.n	800a778 <HAL_TIM_ConfigClockSource+0x56c>
 800a76e:	f241 511a 	movw	r1, #5402	; 0x151a
 800a772:	482d      	ldr	r0, [pc, #180]	; (800a828 <HAL_TIM_ConfigClockSource+0x61c>)
 800a774:	f7f7 fe1b 	bl	80023ae <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6818      	ldr	r0, [r3, #0]
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	6859      	ldr	r1, [r3, #4]
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	461a      	mov	r2, r3
 800a786:	f000 f92b 	bl	800a9e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2140      	movs	r1, #64	; 0x40
 800a790:	4618      	mov	r0, r3
 800a792:	f000 f984 	bl	800aa9e <TIM_ITRx_SetConfig>
      break;
 800a796:	e02f      	b.n	800a7f8 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a1d      	ldr	r2, [pc, #116]	; (800a814 <HAL_TIM_ConfigClockSource+0x608>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d01d      	beq.n	800a7de <HAL_TIM_ConfigClockSource+0x5d2>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7aa:	d018      	beq.n	800a7de <HAL_TIM_ConfigClockSource+0x5d2>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a19      	ldr	r2, [pc, #100]	; (800a818 <HAL_TIM_ConfigClockSource+0x60c>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d013      	beq.n	800a7de <HAL_TIM_ConfigClockSource+0x5d2>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a18      	ldr	r2, [pc, #96]	; (800a81c <HAL_TIM_ConfigClockSource+0x610>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d00e      	beq.n	800a7de <HAL_TIM_ConfigClockSource+0x5d2>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a16      	ldr	r2, [pc, #88]	; (800a820 <HAL_TIM_ConfigClockSource+0x614>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d009      	beq.n	800a7de <HAL_TIM_ConfigClockSource+0x5d2>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a15      	ldr	r2, [pc, #84]	; (800a824 <HAL_TIM_ConfigClockSource+0x618>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d004      	beq.n	800a7de <HAL_TIM_ConfigClockSource+0x5d2>
 800a7d4:	f241 5129 	movw	r1, #5417	; 0x1529
 800a7d8:	4813      	ldr	r0, [pc, #76]	; (800a828 <HAL_TIM_ConfigClockSource+0x61c>)
 800a7da:	f7f7 fde8 	bl	80023ae <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	4610      	mov	r0, r2
 800a7ea:	f000 f958 	bl	800aa9e <TIM_ITRx_SetConfig>
      break;
 800a7ee:	e003      	b.n	800a7f8 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a7f4:	e000      	b.n	800a7f8 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 800a7f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a808:	7bfb      	ldrb	r3, [r7, #15]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	40010000 	.word	0x40010000
 800a818:	40000400 	.word	0x40000400
 800a81c:	40000800 	.word	0x40000800
 800a820:	40000c00 	.word	0x40000c00
 800a824:	40014000 	.word	0x40014000
 800a828:	0800f204 	.word	0x0800f204

0800a82c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a848:	bf00      	nop
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a85c:	bf00      	nop
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a884:	bf00      	nop
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a898:	bf00      	nop
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a8c0:	bf00      	nop
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a8d4:	bf00      	nop
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a34      	ldr	r2, [pc, #208]	; (800a9c4 <TIM_Base_SetConfig+0xe4>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d00f      	beq.n	800a918 <TIM_Base_SetConfig+0x38>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8fe:	d00b      	beq.n	800a918 <TIM_Base_SetConfig+0x38>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a31      	ldr	r2, [pc, #196]	; (800a9c8 <TIM_Base_SetConfig+0xe8>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d007      	beq.n	800a918 <TIM_Base_SetConfig+0x38>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a30      	ldr	r2, [pc, #192]	; (800a9cc <TIM_Base_SetConfig+0xec>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d003      	beq.n	800a918 <TIM_Base_SetConfig+0x38>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a2f      	ldr	r2, [pc, #188]	; (800a9d0 <TIM_Base_SetConfig+0xf0>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d108      	bne.n	800a92a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a91e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	4313      	orrs	r3, r2
 800a928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4a25      	ldr	r2, [pc, #148]	; (800a9c4 <TIM_Base_SetConfig+0xe4>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d01b      	beq.n	800a96a <TIM_Base_SetConfig+0x8a>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a938:	d017      	beq.n	800a96a <TIM_Base_SetConfig+0x8a>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a22      	ldr	r2, [pc, #136]	; (800a9c8 <TIM_Base_SetConfig+0xe8>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d013      	beq.n	800a96a <TIM_Base_SetConfig+0x8a>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a21      	ldr	r2, [pc, #132]	; (800a9cc <TIM_Base_SetConfig+0xec>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d00f      	beq.n	800a96a <TIM_Base_SetConfig+0x8a>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a20      	ldr	r2, [pc, #128]	; (800a9d0 <TIM_Base_SetConfig+0xf0>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d00b      	beq.n	800a96a <TIM_Base_SetConfig+0x8a>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a1f      	ldr	r2, [pc, #124]	; (800a9d4 <TIM_Base_SetConfig+0xf4>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d007      	beq.n	800a96a <TIM_Base_SetConfig+0x8a>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a1e      	ldr	r2, [pc, #120]	; (800a9d8 <TIM_Base_SetConfig+0xf8>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d003      	beq.n	800a96a <TIM_Base_SetConfig+0x8a>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a1d      	ldr	r2, [pc, #116]	; (800a9dc <TIM_Base_SetConfig+0xfc>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d108      	bne.n	800a97c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	4313      	orrs	r3, r2
 800a97a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	4313      	orrs	r3, r2
 800a988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	689a      	ldr	r2, [r3, #8]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	4a08      	ldr	r2, [pc, #32]	; (800a9c4 <TIM_Base_SetConfig+0xe4>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d103      	bne.n	800a9b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	691a      	ldr	r2, [r3, #16]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	615a      	str	r2, [r3, #20]
}
 800a9b6:	bf00      	nop
 800a9b8:	3714      	adds	r7, #20
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	40010000 	.word	0x40010000
 800a9c8:	40000400 	.word	0x40000400
 800a9cc:	40000800 	.word	0x40000800
 800a9d0:	40000c00 	.word	0x40000c00
 800a9d4:	40014000 	.word	0x40014000
 800a9d8:	40014400 	.word	0x40014400
 800a9dc:	40014800 	.word	0x40014800

0800a9e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b087      	sub	sp, #28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6a1b      	ldr	r3, [r3, #32]
 800a9f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	f023 0201 	bic.w	r2, r3, #1
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	699b      	ldr	r3, [r3, #24]
 800aa02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	011b      	lsls	r3, r3, #4
 800aa10:	693a      	ldr	r2, [r7, #16]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f023 030a 	bic.w	r3, r3, #10
 800aa1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa1e:	697a      	ldr	r2, [r7, #20]
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	697a      	ldr	r2, [r7, #20]
 800aa30:	621a      	str	r2, [r3, #32]
}
 800aa32:	bf00      	nop
 800aa34:	371c      	adds	r7, #28
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa3e:	b480      	push	{r7}
 800aa40:	b087      	sub	sp, #28
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	60f8      	str	r0, [r7, #12]
 800aa46:	60b9      	str	r1, [r7, #8]
 800aa48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	f023 0210 	bic.w	r2, r3, #16
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	699b      	ldr	r3, [r3, #24]
 800aa5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6a1b      	ldr	r3, [r3, #32]
 800aa60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	031b      	lsls	r3, r3, #12
 800aa6e:	697a      	ldr	r2, [r7, #20]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	011b      	lsls	r3, r3, #4
 800aa80:	693a      	ldr	r2, [r7, #16]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	697a      	ldr	r2, [r7, #20]
 800aa8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	693a      	ldr	r2, [r7, #16]
 800aa90:	621a      	str	r2, [r3, #32]
}
 800aa92:	bf00      	nop
 800aa94:	371c      	adds	r7, #28
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr

0800aa9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa9e:	b480      	push	{r7}
 800aaa0:	b085      	sub	sp, #20
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	4313      	orrs	r3, r2
 800aabc:	f043 0307 	orr.w	r3, r3, #7
 800aac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	609a      	str	r2, [r3, #8]
}
 800aac8:	bf00      	nop
 800aaca:	3714      	adds	r7, #20
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b087      	sub	sp, #28
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	607a      	str	r2, [r7, #4]
 800aae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aaee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	021a      	lsls	r2, r3, #8
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	431a      	orrs	r2, r3
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	697a      	ldr	r2, [r7, #20]
 800aafe:	4313      	orrs	r3, r2
 800ab00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	697a      	ldr	r2, [r7, #20]
 800ab06:	609a      	str	r2, [r3, #8]
}
 800ab08:	bf00      	nop
 800ab0a:	371c      	adds	r7, #28
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a1c      	ldr	r2, [pc, #112]	; (800ab90 <TIM_ResetCallback+0x7c>)
 800ab20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a1b      	ldr	r2, [pc, #108]	; (800ab94 <TIM_ResetCallback+0x80>)
 800ab28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a1a      	ldr	r2, [pc, #104]	; (800ab98 <TIM_ResetCallback+0x84>)
 800ab30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a19      	ldr	r2, [pc, #100]	; (800ab9c <TIM_ResetCallback+0x88>)
 800ab38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a18      	ldr	r2, [pc, #96]	; (800aba0 <TIM_ResetCallback+0x8c>)
 800ab40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a17      	ldr	r2, [pc, #92]	; (800aba4 <TIM_ResetCallback+0x90>)
 800ab48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a16      	ldr	r2, [pc, #88]	; (800aba8 <TIM_ResetCallback+0x94>)
 800ab50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a15      	ldr	r2, [pc, #84]	; (800abac <TIM_ResetCallback+0x98>)
 800ab58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a14      	ldr	r2, [pc, #80]	; (800abb0 <TIM_ResetCallback+0x9c>)
 800ab60:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a13      	ldr	r2, [pc, #76]	; (800abb4 <TIM_ResetCallback+0xa0>)
 800ab68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a12      	ldr	r2, [pc, #72]	; (800abb8 <TIM_ResetCallback+0xa4>)
 800ab70:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	4a11      	ldr	r2, [pc, #68]	; (800abbc <TIM_ResetCallback+0xa8>)
 800ab78:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4a10      	ldr	r2, [pc, #64]	; (800abc0 <TIM_ResetCallback+0xac>)
 800ab80:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800ab84:	bf00      	nop
 800ab86:	370c      	adds	r7, #12
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr
 800ab90:	08002381 	.word	0x08002381
 800ab94:	0800a82d 	.word	0x0800a82d
 800ab98:	0800a8a5 	.word	0x0800a8a5
 800ab9c:	0800a8b9 	.word	0x0800a8b9
 800aba0:	0800a855 	.word	0x0800a855
 800aba4:	0800a869 	.word	0x0800a869
 800aba8:	0800a841 	.word	0x0800a841
 800abac:	0800a87d 	.word	0x0800a87d
 800abb0:	0800a891 	.word	0x0800a891
 800abb4:	0800a8cd 	.word	0x0800a8cd
 800abb8:	0800ad41 	.word	0x0800ad41
 800abbc:	0800ad55 	.word	0x0800ad55
 800abc0:	0800ad69 	.word	0x0800ad69

0800abc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a55      	ldr	r2, [pc, #340]	; (800ad28 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d018      	beq.n	800ac0a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abe0:	d013      	beq.n	800ac0a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a51      	ldr	r2, [pc, #324]	; (800ad2c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d00e      	beq.n	800ac0a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a4f      	ldr	r2, [pc, #316]	; (800ad30 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d009      	beq.n	800ac0a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a4e      	ldr	r2, [pc, #312]	; (800ad34 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d004      	beq.n	800ac0a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800ac00:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800ac04:	484c      	ldr	r0, [pc, #304]	; (800ad38 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800ac06:	f7f7 fbd2 	bl	80023ae <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d020      	beq.n	800ac54 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2b10      	cmp	r3, #16
 800ac18:	d01c      	beq.n	800ac54 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b20      	cmp	r3, #32
 800ac20:	d018      	beq.n	800ac54 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2b30      	cmp	r3, #48	; 0x30
 800ac28:	d014      	beq.n	800ac54 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2b40      	cmp	r3, #64	; 0x40
 800ac30:	d010      	beq.n	800ac54 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2b50      	cmp	r3, #80	; 0x50
 800ac38:	d00c      	beq.n	800ac54 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	2b60      	cmp	r3, #96	; 0x60
 800ac40:	d008      	beq.n	800ac54 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2b70      	cmp	r3, #112	; 0x70
 800ac48:	d004      	beq.n	800ac54 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ac4a:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800ac4e:	483a      	ldr	r0, [pc, #232]	; (800ad38 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800ac50:	f7f7 fbad 	bl	80023ae <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	2b80      	cmp	r3, #128	; 0x80
 800ac5a:	d008      	beq.n	800ac6e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d004      	beq.n	800ac6e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800ac64:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800ac68:	4833      	ldr	r0, [pc, #204]	; (800ad38 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800ac6a:	f7f7 fba0 	bl	80023ae <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d101      	bne.n	800ac7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ac78:	2302      	movs	r3, #2
 800ac7a:	e050      	b.n	800ad1e <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2201      	movs	r2, #1
 800ac80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2202      	movs	r2, #2
 800ac88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	4313      	orrs	r3, r2
 800acac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	68fa      	ldr	r2, [r7, #12]
 800acb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a1b      	ldr	r2, [pc, #108]	; (800ad28 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d018      	beq.n	800acf2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acc8:	d013      	beq.n	800acf2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a17      	ldr	r2, [pc, #92]	; (800ad2c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d00e      	beq.n	800acf2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a15      	ldr	r2, [pc, #84]	; (800ad30 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d009      	beq.n	800acf2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a14      	ldr	r2, [pc, #80]	; (800ad34 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d004      	beq.n	800acf2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a13      	ldr	r2, [pc, #76]	; (800ad3c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d10c      	bne.n	800ad0c <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	68ba      	ldr	r2, [r7, #8]
 800ad00:	4313      	orrs	r3, r2
 800ad02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	68ba      	ldr	r2, [r7, #8]
 800ad0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad1c:	2300      	movs	r3, #0
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	40010000 	.word	0x40010000
 800ad2c:	40000400 	.word	0x40000400
 800ad30:	40000800 	.word	0x40000800
 800ad34:	40000c00 	.word	0x40000c00
 800ad38:	0800f278 	.word	0x0800f278
 800ad3c:	40014000 	.word	0x40014000

0800ad40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad48:	bf00      	nop
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad70:	bf00      	nop
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d101      	bne.n	800ad8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e0ab      	b.n	800aee6 <HAL_UART_Init+0x16a>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	699b      	ldr	r3, [r3, #24]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d02c      	beq.n	800adf0 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a55      	ldr	r2, [pc, #340]	; (800aef0 <HAL_UART_Init+0x174>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d00e      	beq.n	800adbe <HAL_UART_Init+0x42>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a53      	ldr	r2, [pc, #332]	; (800aef4 <HAL_UART_Init+0x178>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d009      	beq.n	800adbe <HAL_UART_Init+0x42>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4a52      	ldr	r2, [pc, #328]	; (800aef8 <HAL_UART_Init+0x17c>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d004      	beq.n	800adbe <HAL_UART_Init+0x42>
 800adb4:	f240 1173 	movw	r1, #371	; 0x173
 800adb8:	4850      	ldr	r0, [pc, #320]	; (800aefc <HAL_UART_Init+0x180>)
 800adba:	f7f7 faf8 	bl	80023ae <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	699b      	ldr	r3, [r3, #24]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d028      	beq.n	800ae18 <HAL_UART_Init+0x9c>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	699b      	ldr	r3, [r3, #24]
 800adca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adce:	d023      	beq.n	800ae18 <HAL_UART_Init+0x9c>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	699b      	ldr	r3, [r3, #24]
 800add4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800add8:	d01e      	beq.n	800ae18 <HAL_UART_Init+0x9c>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	699b      	ldr	r3, [r3, #24]
 800adde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ade2:	d019      	beq.n	800ae18 <HAL_UART_Init+0x9c>
 800ade4:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800ade8:	4844      	ldr	r0, [pc, #272]	; (800aefc <HAL_UART_Init+0x180>)
 800adea:	f7f7 fae0 	bl	80023ae <assert_failed>
 800adee:	e013      	b.n	800ae18 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a3e      	ldr	r2, [pc, #248]	; (800aef0 <HAL_UART_Init+0x174>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d00e      	beq.n	800ae18 <HAL_UART_Init+0x9c>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a3d      	ldr	r2, [pc, #244]	; (800aef4 <HAL_UART_Init+0x178>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d009      	beq.n	800ae18 <HAL_UART_Init+0x9c>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a3b      	ldr	r2, [pc, #236]	; (800aef8 <HAL_UART_Init+0x17c>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d004      	beq.n	800ae18 <HAL_UART_Init+0x9c>
 800ae0e:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800ae12:	483a      	ldr	r0, [pc, #232]	; (800aefc <HAL_UART_Init+0x180>)
 800ae14:	f7f7 facb 	bl	80023ae <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d009      	beq.n	800ae34 <HAL_UART_Init+0xb8>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae28:	d004      	beq.n	800ae34 <HAL_UART_Init+0xb8>
 800ae2a:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800ae2e:	4833      	ldr	r0, [pc, #204]	; (800aefc <HAL_UART_Init+0x180>)
 800ae30:	f7f7 fabd 	bl	80023ae <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	69db      	ldr	r3, [r3, #28]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d009      	beq.n	800ae50 <HAL_UART_Init+0xd4>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	69db      	ldr	r3, [r3, #28]
 800ae40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae44:	d004      	beq.n	800ae50 <HAL_UART_Init+0xd4>
 800ae46:	f240 117b 	movw	r1, #379	; 0x17b
 800ae4a:	482c      	ldr	r0, [pc, #176]	; (800aefc <HAL_UART_Init+0x180>)
 800ae4c:	f7f7 faaf 	bl	80023ae <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d111      	bne.n	800ae80 <HAL_UART_Init+0x104>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fb61 	bl	800b52c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d102      	bne.n	800ae78 <HAL_UART_Init+0xfc>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4a22      	ldr	r2, [pc, #136]	; (800af00 <HAL_UART_Init+0x184>)
 800ae76:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2224      	movs	r2, #36	; 0x24
 800ae84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	68da      	ldr	r2, [r3, #12]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 fd5b 	bl	800b954 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	691a      	ldr	r2, [r3, #16]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aeac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	695a      	ldr	r2, [r3, #20]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aebc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	68da      	ldr	r2, [r3, #12]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aecc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2220      	movs	r2, #32
 800aed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2220      	movs	r2, #32
 800aee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aee4:	2300      	movs	r3, #0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3708      	adds	r7, #8
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	bf00      	nop
 800aef0:	40011000 	.word	0x40011000
 800aef4:	40004400 	.word	0x40004400
 800aef8:	40011400 	.word	0x40011400
 800aefc:	0800f2f0 	.word	0x0800f2f0
 800af00:	08002e61 	.word	0x08002e61

0800af04 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	4613      	mov	r3, r2
 800af10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b20      	cmp	r3, #32
 800af1c:	d11d      	bne.n	800af5a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d002      	beq.n	800af2a <HAL_UART_Receive_IT+0x26>
 800af24:	88fb      	ldrh	r3, [r7, #6]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d101      	bne.n	800af2e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800af2a:	2301      	movs	r3, #1
 800af2c:	e016      	b.n	800af5c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af34:	2b01      	cmp	r3, #1
 800af36:	d101      	bne.n	800af3c <HAL_UART_Receive_IT+0x38>
 800af38:	2302      	movs	r3, #2
 800af3a:	e00f      	b.n	800af5c <HAL_UART_Receive_IT+0x58>
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2201      	movs	r2, #1
 800af40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2200      	movs	r2, #0
 800af48:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800af4a:	88fb      	ldrh	r3, [r7, #6]
 800af4c:	461a      	mov	r2, r3
 800af4e:	68b9      	ldr	r1, [r7, #8]
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f000 fb23 	bl	800b59c <UART_Start_Receive_IT>
 800af56:	4603      	mov	r3, r0
 800af58:	e000      	b.n	800af5c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800af5a:	2302      	movs	r3, #2
  }
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3710      	adds	r7, #16
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b0ba      	sub	sp, #232	; 0xe8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	695b      	ldr	r3, [r3, #20]
 800af86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800af8a:	2300      	movs	r3, #0
 800af8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800af90:	2300      	movs	r3, #0
 800af92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800af96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af9a:	f003 030f 	and.w	r3, r3, #15
 800af9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800afa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d10f      	bne.n	800afca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800afaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afae:	f003 0320 	and.w	r3, r3, #32
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d009      	beq.n	800afca <HAL_UART_IRQHandler+0x66>
 800afb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afba:	f003 0320 	and.w	r3, r3, #32
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d003      	beq.n	800afca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 fc09 	bl	800b7da <UART_Receive_IT>
      return;
 800afc8:	e25b      	b.n	800b482 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800afca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f000 80e1 	beq.w	800b196 <HAL_UART_IRQHandler+0x232>
 800afd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afd8:	f003 0301 	and.w	r3, r3, #1
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d106      	bne.n	800afee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800afe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afe4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800afe8:	2b00      	cmp	r3, #0
 800afea:	f000 80d4 	beq.w	800b196 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800afee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aff2:	f003 0301 	and.w	r3, r3, #1
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00b      	beq.n	800b012 <HAL_UART_IRQHandler+0xae>
 800affa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800affe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b002:	2b00      	cmp	r3, #0
 800b004:	d005      	beq.n	800b012 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b00a:	f043 0201 	orr.w	r2, r3, #1
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b016:	f003 0304 	and.w	r3, r3, #4
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00b      	beq.n	800b036 <HAL_UART_IRQHandler+0xd2>
 800b01e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b022:	f003 0301 	and.w	r3, r3, #1
 800b026:	2b00      	cmp	r3, #0
 800b028:	d005      	beq.n	800b036 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02e:	f043 0202 	orr.w	r2, r3, #2
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b03a:	f003 0302 	and.w	r3, r3, #2
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d00b      	beq.n	800b05a <HAL_UART_IRQHandler+0xf6>
 800b042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b046:	f003 0301 	and.w	r3, r3, #1
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d005      	beq.n	800b05a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b052:	f043 0204 	orr.w	r2, r3, #4
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b05a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b05e:	f003 0308 	and.w	r3, r3, #8
 800b062:	2b00      	cmp	r3, #0
 800b064:	d011      	beq.n	800b08a <HAL_UART_IRQHandler+0x126>
 800b066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b06a:	f003 0320 	and.w	r3, r3, #32
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d105      	bne.n	800b07e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b076:	f003 0301 	and.w	r3, r3, #1
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d005      	beq.n	800b08a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b082:	f043 0208 	orr.w	r2, r3, #8
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08e:	2b00      	cmp	r3, #0
 800b090:	f000 81f2 	beq.w	800b478 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b098:	f003 0320 	and.w	r3, r3, #32
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d008      	beq.n	800b0b2 <HAL_UART_IRQHandler+0x14e>
 800b0a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0a4:	f003 0320 	and.w	r3, r3, #32
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 fb94 	bl	800b7da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	695b      	ldr	r3, [r3, #20]
 800b0b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0bc:	2b40      	cmp	r3, #64	; 0x40
 800b0be:	bf0c      	ite	eq
 800b0c0:	2301      	moveq	r3, #1
 800b0c2:	2300      	movne	r3, #0
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ce:	f003 0308 	and.w	r3, r3, #8
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d103      	bne.n	800b0de <HAL_UART_IRQHandler+0x17a>
 800b0d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d051      	beq.n	800b182 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 fa9a 	bl	800b618 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	695b      	ldr	r3, [r3, #20]
 800b0ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0ee:	2b40      	cmp	r3, #64	; 0x40
 800b0f0:	d142      	bne.n	800b178 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	3314      	adds	r3, #20
 800b0f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b100:	e853 3f00 	ldrex	r3, [r3]
 800b104:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b108:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b10c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b110:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	3314      	adds	r3, #20
 800b11a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b11e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b126:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b12a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b12e:	e841 2300 	strex	r3, r2, [r1]
 800b132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d1d9      	bne.n	800b0f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b142:	2b00      	cmp	r3, #0
 800b144:	d013      	beq.n	800b16e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b14a:	4a7f      	ldr	r2, [pc, #508]	; (800b348 <HAL_UART_IRQHandler+0x3e4>)
 800b14c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b152:	4618      	mov	r0, r3
 800b154:	f7f9 fb3a 	bl	80047cc <HAL_DMA_Abort_IT>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d019      	beq.n	800b192 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b168:	4610      	mov	r0, r2
 800b16a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b16c:	e011      	b.n	800b192 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b176:	e00c      	b.n	800b192 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b180:	e007      	b.n	800b192 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b190:	e172      	b.n	800b478 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b192:	bf00      	nop
    return;
 800b194:	e170      	b.n	800b478 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	f040 814c 	bne.w	800b438 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b1a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1a4:	f003 0310 	and.w	r3, r3, #16
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f000 8145 	beq.w	800b438 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b1ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1b2:	f003 0310 	and.w	r3, r3, #16
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	f000 813e 	beq.w	800b438 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b1bc:	2300      	movs	r3, #0
 800b1be:	60bb      	str	r3, [r7, #8]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	60bb      	str	r3, [r7, #8]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	60bb      	str	r3, [r7, #8]
 800b1d0:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	695b      	ldr	r3, [r3, #20]
 800b1d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1dc:	2b40      	cmp	r3, #64	; 0x40
 800b1de:	f040 80b5 	bne.w	800b34c <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b1ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f000 8142 	beq.w	800b47c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b1fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b200:	429a      	cmp	r2, r3
 800b202:	f080 813b 	bcs.w	800b47c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b20c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b212:	69db      	ldr	r3, [r3, #28]
 800b214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b218:	f000 8088 	beq.w	800b32c <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	330c      	adds	r3, #12
 800b222:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b226:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b22a:	e853 3f00 	ldrex	r3, [r3]
 800b22e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b232:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b236:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b23a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	330c      	adds	r3, #12
 800b244:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b248:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b24c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b250:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b254:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b258:	e841 2300 	strex	r3, r2, [r1]
 800b25c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b260:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b264:	2b00      	cmp	r3, #0
 800b266:	d1d9      	bne.n	800b21c <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	3314      	adds	r3, #20
 800b26e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b272:	e853 3f00 	ldrex	r3, [r3]
 800b276:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b278:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b27a:	f023 0301 	bic.w	r3, r3, #1
 800b27e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	3314      	adds	r3, #20
 800b288:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b28c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b290:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b292:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b294:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b298:	e841 2300 	strex	r3, r2, [r1]
 800b29c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b29e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d1e1      	bne.n	800b268 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	3314      	adds	r3, #20
 800b2aa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b2ae:	e853 3f00 	ldrex	r3, [r3]
 800b2b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b2b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	3314      	adds	r3, #20
 800b2c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b2c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b2ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b2ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b2d0:	e841 2300 	strex	r3, r2, [r1]
 800b2d4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b2d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1e3      	bne.n	800b2a4 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2220      	movs	r2, #32
 800b2e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	330c      	adds	r3, #12
 800b2f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2f4:	e853 3f00 	ldrex	r3, [r3]
 800b2f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b2fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2fc:	f023 0310 	bic.w	r3, r3, #16
 800b300:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	330c      	adds	r3, #12
 800b30a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b30e:	65ba      	str	r2, [r7, #88]	; 0x58
 800b310:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b312:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b314:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b316:	e841 2300 	strex	r3, r2, [r1]
 800b31a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b31c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d1e3      	bne.n	800b2ea <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b326:	4618      	mov	r0, r3
 800b328:	f7f9 f9e0 	bl	80046ec <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b338:	b292      	uxth	r2, r2
 800b33a:	1a8a      	subs	r2, r1, r2
 800b33c:	b292      	uxth	r2, r2
 800b33e:	4611      	mov	r1, r2
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b344:	e09a      	b.n	800b47c <HAL_UART_IRQHandler+0x518>
 800b346:	bf00      	nop
 800b348:	0800b6df 	.word	0x0800b6df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b354:	b29b      	uxth	r3, r3
 800b356:	1ad3      	subs	r3, r2, r3
 800b358:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b360:	b29b      	uxth	r3, r3
 800b362:	2b00      	cmp	r3, #0
 800b364:	f000 808c 	beq.w	800b480 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b368:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f000 8087 	beq.w	800b480 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	330c      	adds	r3, #12
 800b378:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37c:	e853 3f00 	ldrex	r3, [r3]
 800b380:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b384:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b388:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	330c      	adds	r3, #12
 800b392:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b396:	647a      	str	r2, [r7, #68]	; 0x44
 800b398:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b39c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b39e:	e841 2300 	strex	r3, r2, [r1]
 800b3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1e3      	bne.n	800b372 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3314      	adds	r3, #20
 800b3b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b4:	e853 3f00 	ldrex	r3, [r3]
 800b3b8:	623b      	str	r3, [r7, #32]
   return(result);
 800b3ba:	6a3b      	ldr	r3, [r7, #32]
 800b3bc:	f023 0301 	bic.w	r3, r3, #1
 800b3c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	3314      	adds	r3, #20
 800b3ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b3ce:	633a      	str	r2, [r7, #48]	; 0x30
 800b3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3d6:	e841 2300 	strex	r3, r2, [r1]
 800b3da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d1e3      	bne.n	800b3aa <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2220      	movs	r2, #32
 800b3e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	330c      	adds	r3, #12
 800b3f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	e853 3f00 	ldrex	r3, [r3]
 800b3fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f023 0310 	bic.w	r3, r3, #16
 800b406:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	330c      	adds	r3, #12
 800b410:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b414:	61fa      	str	r2, [r7, #28]
 800b416:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b418:	69b9      	ldr	r1, [r7, #24]
 800b41a:	69fa      	ldr	r2, [r7, #28]
 800b41c:	e841 2300 	strex	r3, r2, [r1]
 800b420:	617b      	str	r3, [r7, #20]
   return(result);
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1e3      	bne.n	800b3f0 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b42c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b430:	4611      	mov	r1, r2
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b436:	e023      	b.n	800b480 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b43c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b440:	2b00      	cmp	r3, #0
 800b442:	d009      	beq.n	800b458 <HAL_UART_IRQHandler+0x4f4>
 800b444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d003      	beq.n	800b458 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 f959 	bl	800b708 <UART_Transmit_IT>
    return;
 800b456:	e014      	b.n	800b482 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00e      	beq.n	800b482 <HAL_UART_IRQHandler+0x51e>
 800b464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d008      	beq.n	800b482 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 f999 	bl	800b7a8 <UART_EndTransmit_IT>
    return;
 800b476:	e004      	b.n	800b482 <HAL_UART_IRQHandler+0x51e>
    return;
 800b478:	bf00      	nop
 800b47a:	e002      	b.n	800b482 <HAL_UART_IRQHandler+0x51e>
      return;
 800b47c:	bf00      	nop
 800b47e:	e000      	b.n	800b482 <HAL_UART_IRQHandler+0x51e>
      return;
 800b480:	bf00      	nop
  }
}
 800b482:	37e8      	adds	r7, #232	; 0xe8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b490:	bf00      	nop
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b4a4:	bf00      	nop
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr

0800b4b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b4b8:	bf00      	nop
 800b4ba:	370c      	adds	r7, #12
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b4cc:	bf00      	nop
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b4e0:	bf00      	nop
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b4f4:	bf00      	nop
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b508:	bf00      	nop
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	460b      	mov	r3, r1
 800b51e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b520:	bf00      	nop
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	4a10      	ldr	r2, [pc, #64]	; (800b578 <UART_InitCallbacksToDefault+0x4c>)
 800b538:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	4a0f      	ldr	r2, [pc, #60]	; (800b57c <UART_InitCallbacksToDefault+0x50>)
 800b53e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4a0f      	ldr	r2, [pc, #60]	; (800b580 <UART_InitCallbacksToDefault+0x54>)
 800b544:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	4a0e      	ldr	r2, [pc, #56]	; (800b584 <UART_InitCallbacksToDefault+0x58>)
 800b54a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	4a0e      	ldr	r2, [pc, #56]	; (800b588 <UART_InitCallbacksToDefault+0x5c>)
 800b550:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	4a0d      	ldr	r2, [pc, #52]	; (800b58c <UART_InitCallbacksToDefault+0x60>)
 800b556:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a0d      	ldr	r2, [pc, #52]	; (800b590 <UART_InitCallbacksToDefault+0x64>)
 800b55c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	4a0c      	ldr	r2, [pc, #48]	; (800b594 <UART_InitCallbacksToDefault+0x68>)
 800b562:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	4a0c      	ldr	r2, [pc, #48]	; (800b598 <UART_InitCallbacksToDefault+0x6c>)
 800b568:	669a      	str	r2, [r3, #104]	; 0x68

}
 800b56a:	bf00      	nop
 800b56c:	370c      	adds	r7, #12
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	0800b49d 	.word	0x0800b49d
 800b57c:	0800b489 	.word	0x0800b489
 800b580:	0800b4b1 	.word	0x0800b4b1
 800b584:	08002f41 	.word	0x08002f41
 800b588:	0800b4c5 	.word	0x0800b4c5
 800b58c:	0800b4d9 	.word	0x0800b4d9
 800b590:	0800b4ed 	.word	0x0800b4ed
 800b594:	0800b501 	.word	0x0800b501
 800b598:	0800b515 	.word	0x0800b515

0800b59c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	68ba      	ldr	r2, [r7, #8]
 800b5ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	88fa      	ldrh	r2, [r7, #6]
 800b5b4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	88fa      	ldrh	r2, [r7, #6]
 800b5ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2222      	movs	r2, #34	; 0x22
 800b5c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	691b      	ldr	r3, [r3, #16]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d007      	beq.n	800b5ea <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	68da      	ldr	r2, [r3, #12]
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b5e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	695a      	ldr	r2, [r3, #20]
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f042 0201 	orr.w	r2, r2, #1
 800b5f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	68da      	ldr	r2, [r3, #12]
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f042 0220 	orr.w	r2, r2, #32
 800b608:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b60a:	2300      	movs	r3, #0
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3714      	adds	r7, #20
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b618:	b480      	push	{r7}
 800b61a:	b095      	sub	sp, #84	; 0x54
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	330c      	adds	r3, #12
 800b626:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b62a:	e853 3f00 	ldrex	r3, [r3]
 800b62e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b632:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b636:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	330c      	adds	r3, #12
 800b63e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b640:	643a      	str	r2, [r7, #64]	; 0x40
 800b642:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b644:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b646:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b648:	e841 2300 	strex	r3, r2, [r1]
 800b64c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b650:	2b00      	cmp	r3, #0
 800b652:	d1e5      	bne.n	800b620 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	3314      	adds	r3, #20
 800b65a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b65c:	6a3b      	ldr	r3, [r7, #32]
 800b65e:	e853 3f00 	ldrex	r3, [r3]
 800b662:	61fb      	str	r3, [r7, #28]
   return(result);
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	f023 0301 	bic.w	r3, r3, #1
 800b66a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	3314      	adds	r3, #20
 800b672:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b674:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b676:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b67a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b67c:	e841 2300 	strex	r3, r2, [r1]
 800b680:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b684:	2b00      	cmp	r3, #0
 800b686:	d1e5      	bne.n	800b654 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d119      	bne.n	800b6c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	330c      	adds	r3, #12
 800b696:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	e853 3f00 	ldrex	r3, [r3]
 800b69e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	f023 0310 	bic.w	r3, r3, #16
 800b6a6:	647b      	str	r3, [r7, #68]	; 0x44
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	330c      	adds	r3, #12
 800b6ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b6b0:	61ba      	str	r2, [r7, #24]
 800b6b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b4:	6979      	ldr	r1, [r7, #20]
 800b6b6:	69ba      	ldr	r2, [r7, #24]
 800b6b8:	e841 2300 	strex	r3, r2, [r1]
 800b6bc:	613b      	str	r3, [r7, #16]
   return(result);
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d1e5      	bne.n	800b690 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2220      	movs	r2, #32
 800b6c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b6d2:	bf00      	nop
 800b6d4:	3754      	adds	r7, #84	; 0x54
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr

0800b6de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b084      	sub	sp, #16
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6fc:	68f8      	ldr	r0, [r7, #12]
 800b6fe:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b700:	bf00      	nop
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b708:	b480      	push	{r7}
 800b70a:	b085      	sub	sp, #20
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b716:	b2db      	uxtb	r3, r3
 800b718:	2b21      	cmp	r3, #33	; 0x21
 800b71a:	d13e      	bne.n	800b79a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	689b      	ldr	r3, [r3, #8]
 800b720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b724:	d114      	bne.n	800b750 <UART_Transmit_IT+0x48>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d110      	bne.n	800b750 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	881b      	ldrh	r3, [r3, #0]
 800b738:	461a      	mov	r2, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b742:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6a1b      	ldr	r3, [r3, #32]
 800b748:	1c9a      	adds	r2, r3, #2
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	621a      	str	r2, [r3, #32]
 800b74e:	e008      	b.n	800b762 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6a1b      	ldr	r3, [r3, #32]
 800b754:	1c59      	adds	r1, r3, #1
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	6211      	str	r1, [r2, #32]
 800b75a:	781a      	ldrb	r2, [r3, #0]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b766:	b29b      	uxth	r3, r3
 800b768:	3b01      	subs	r3, #1
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	4619      	mov	r1, r3
 800b770:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b772:	2b00      	cmp	r3, #0
 800b774:	d10f      	bne.n	800b796 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	68da      	ldr	r2, [r3, #12]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b784:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	68da      	ldr	r2, [r3, #12]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b794:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b796:	2300      	movs	r3, #0
 800b798:	e000      	b.n	800b79c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b79a:	2302      	movs	r3, #2
  }
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3714      	adds	r7, #20
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	68da      	ldr	r2, [r3, #12]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2220      	movs	r2, #32
 800b7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3708      	adds	r7, #8
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}

0800b7da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b08c      	sub	sp, #48	; 0x30
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	2b22      	cmp	r3, #34	; 0x22
 800b7ec:	f040 80ad 	bne.w	800b94a <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7f8:	d117      	bne.n	800b82a <UART_Receive_IT+0x50>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	691b      	ldr	r3, [r3, #16]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d113      	bne.n	800b82a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b802:	2300      	movs	r3, #0
 800b804:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b80a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	b29b      	uxth	r3, r3
 800b814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b818:	b29a      	uxth	r2, r3
 800b81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b822:	1c9a      	adds	r2, r3, #2
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	629a      	str	r2, [r3, #40]	; 0x28
 800b828:	e026      	b.n	800b878 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b82e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b830:	2300      	movs	r3, #0
 800b832:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b83c:	d007      	beq.n	800b84e <UART_Receive_IT+0x74>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d10a      	bne.n	800b85c <UART_Receive_IT+0x82>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	691b      	ldr	r3, [r3, #16]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d106      	bne.n	800b85c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	b2da      	uxtb	r2, r3
 800b856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b858:	701a      	strb	r2, [r3, #0]
 800b85a:	e008      	b.n	800b86e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	b2db      	uxtb	r3, r3
 800b864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b868:	b2da      	uxtb	r2, r3
 800b86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b872:	1c5a      	adds	r2, r3, #1
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	3b01      	subs	r3, #1
 800b880:	b29b      	uxth	r3, r3
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	4619      	mov	r1, r3
 800b886:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d15c      	bne.n	800b946 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	68da      	ldr	r2, [r3, #12]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f022 0220 	bic.w	r2, r2, #32
 800b89a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68da      	ldr	r2, [r3, #12]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b8aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	695a      	ldr	r2, [r3, #20]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f022 0201 	bic.w	r2, r2, #1
 800b8ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2220      	movs	r2, #32
 800b8c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d136      	bne.n	800b93a <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	330c      	adds	r3, #12
 800b8d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	e853 3f00 	ldrex	r3, [r3]
 800b8e0:	613b      	str	r3, [r7, #16]
   return(result);
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	f023 0310 	bic.w	r3, r3, #16
 800b8e8:	627b      	str	r3, [r7, #36]	; 0x24
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	330c      	adds	r3, #12
 800b8f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8f2:	623a      	str	r2, [r7, #32]
 800b8f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f6:	69f9      	ldr	r1, [r7, #28]
 800b8f8:	6a3a      	ldr	r2, [r7, #32]
 800b8fa:	e841 2300 	strex	r3, r2, [r1]
 800b8fe:	61bb      	str	r3, [r7, #24]
   return(result);
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d1e5      	bne.n	800b8d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f003 0310 	and.w	r3, r3, #16
 800b910:	2b10      	cmp	r3, #16
 800b912:	d10a      	bne.n	800b92a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b914:	2300      	movs	r3, #0
 800b916:	60fb      	str	r3, [r7, #12]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	60fb      	str	r3, [r7, #12]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	60fb      	str	r3, [r7, #12]
 800b928:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b932:	4611      	mov	r1, r2
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	4798      	blx	r3
 800b938:	e003      	b.n	800b942 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b942:	2300      	movs	r3, #0
 800b944:	e002      	b.n	800b94c <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800b946:	2300      	movs	r3, #0
 800b948:	e000      	b.n	800b94c <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800b94a:	2302      	movs	r3, #2
  }
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3730      	adds	r7, #48	; 0x30
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b958:	b0c0      	sub	sp, #256	; 0x100
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800b960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b964:	685a      	ldr	r2, [r3, #4]
 800b966:	4bcf      	ldr	r3, [pc, #828]	; (800bca4 <UART_SetConfig+0x350>)
 800b968:	429a      	cmp	r2, r3
 800b96a:	d904      	bls.n	800b976 <UART_SetConfig+0x22>
 800b96c:	f640 6161 	movw	r1, #3681	; 0xe61
 800b970:	48cd      	ldr	r0, [pc, #820]	; (800bca8 <UART_SetConfig+0x354>)
 800b972:	f7f6 fd1c 	bl	80023ae <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800b976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00a      	beq.n	800b996 <UART_SetConfig+0x42>
 800b980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b98a:	d004      	beq.n	800b996 <UART_SetConfig+0x42>
 800b98c:	f640 6162 	movw	r1, #3682	; 0xe62
 800b990:	48c5      	ldr	r0, [pc, #788]	; (800bca8 <UART_SetConfig+0x354>)
 800b992:	f7f6 fd0c 	bl	80023ae <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800b996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b99a:	691b      	ldr	r3, [r3, #16]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d010      	beq.n	800b9c2 <UART_SetConfig+0x6e>
 800b9a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9a4:	691b      	ldr	r3, [r3, #16]
 800b9a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9aa:	d00a      	beq.n	800b9c2 <UART_SetConfig+0x6e>
 800b9ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9b0:	691b      	ldr	r3, [r3, #16]
 800b9b2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b9b6:	d004      	beq.n	800b9c2 <UART_SetConfig+0x6e>
 800b9b8:	f640 6163 	movw	r1, #3683	; 0xe63
 800b9bc:	48ba      	ldr	r0, [pc, #744]	; (800bca8 <UART_SetConfig+0x354>)
 800b9be:	f7f6 fcf6 	bl	80023ae <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800b9c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9c6:	695a      	ldr	r2, [r3, #20]
 800b9c8:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d104      	bne.n	800b9dc <UART_SetConfig+0x88>
 800b9d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9d6:	695b      	ldr	r3, [r3, #20]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d104      	bne.n	800b9e6 <UART_SetConfig+0x92>
 800b9dc:	f640 6164 	movw	r1, #3684	; 0xe64
 800b9e0:	48b1      	ldr	r0, [pc, #708]	; (800bca8 <UART_SetConfig+0x354>)
 800b9e2:	f7f6 fce4 	bl	80023ae <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b9f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9f6:	68d9      	ldr	r1, [r3, #12]
 800b9f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	ea40 0301 	orr.w	r3, r0, r1
 800ba02:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ba04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba08:	689a      	ldr	r2, [r3, #8]
 800ba0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba0e:	691b      	ldr	r3, [r3, #16]
 800ba10:	431a      	orrs	r2, r3
 800ba12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba16:	695b      	ldr	r3, [r3, #20]
 800ba18:	431a      	orrs	r2, r3
 800ba1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba1e:	69db      	ldr	r3, [r3, #28]
 800ba20:	4313      	orrs	r3, r2
 800ba22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ba26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	68db      	ldr	r3, [r3, #12]
 800ba2e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ba32:	f021 010c 	bic.w	r1, r1, #12
 800ba36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba40:	430b      	orrs	r3, r1
 800ba42:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ba44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	695b      	ldr	r3, [r3, #20]
 800ba4c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ba50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba54:	6999      	ldr	r1, [r3, #24]
 800ba56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	ea40 0301 	orr.w	r3, r0, r1
 800ba60:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ba62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	4b90      	ldr	r3, [pc, #576]	; (800bcac <UART_SetConfig+0x358>)
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d005      	beq.n	800ba7a <UART_SetConfig+0x126>
 800ba6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	4b8e      	ldr	r3, [pc, #568]	; (800bcb0 <UART_SetConfig+0x35c>)
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d104      	bne.n	800ba84 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ba7a:	f7fc fad9 	bl	8008030 <HAL_RCC_GetPCLK2Freq>
 800ba7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ba82:	e003      	b.n	800ba8c <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ba84:	f7fc fac0 	bl	8008008 <HAL_RCC_GetPCLK1Freq>
 800ba88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba90:	69db      	ldr	r3, [r3, #28]
 800ba92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba96:	f040 810f 	bne.w	800bcb8 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ba9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800baa4:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800baa8:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800baac:	4622      	mov	r2, r4
 800baae:	462b      	mov	r3, r5
 800bab0:	1891      	adds	r1, r2, r2
 800bab2:	65b9      	str	r1, [r7, #88]	; 0x58
 800bab4:	415b      	adcs	r3, r3
 800bab6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bab8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800babc:	4621      	mov	r1, r4
 800babe:	eb12 0801 	adds.w	r8, r2, r1
 800bac2:	4629      	mov	r1, r5
 800bac4:	eb43 0901 	adc.w	r9, r3, r1
 800bac8:	f04f 0200 	mov.w	r2, #0
 800bacc:	f04f 0300 	mov.w	r3, #0
 800bad0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bad4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bad8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800badc:	4690      	mov	r8, r2
 800bade:	4699      	mov	r9, r3
 800bae0:	4623      	mov	r3, r4
 800bae2:	eb18 0303 	adds.w	r3, r8, r3
 800bae6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800baea:	462b      	mov	r3, r5
 800baec:	eb49 0303 	adc.w	r3, r9, r3
 800baf0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800baf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bb00:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bb04:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bb08:	460b      	mov	r3, r1
 800bb0a:	18db      	adds	r3, r3, r3
 800bb0c:	653b      	str	r3, [r7, #80]	; 0x50
 800bb0e:	4613      	mov	r3, r2
 800bb10:	eb42 0303 	adc.w	r3, r2, r3
 800bb14:	657b      	str	r3, [r7, #84]	; 0x54
 800bb16:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bb1a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bb1e:	f7f4 fb5f 	bl	80001e0 <__aeabi_uldivmod>
 800bb22:	4602      	mov	r2, r0
 800bb24:	460b      	mov	r3, r1
 800bb26:	4b63      	ldr	r3, [pc, #396]	; (800bcb4 <UART_SetConfig+0x360>)
 800bb28:	fba3 2302 	umull	r2, r3, r3, r2
 800bb2c:	095b      	lsrs	r3, r3, #5
 800bb2e:	011c      	lsls	r4, r3, #4
 800bb30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb34:	2200      	movs	r2, #0
 800bb36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb3a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bb3e:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bb42:	4642      	mov	r2, r8
 800bb44:	464b      	mov	r3, r9
 800bb46:	1891      	adds	r1, r2, r2
 800bb48:	64b9      	str	r1, [r7, #72]	; 0x48
 800bb4a:	415b      	adcs	r3, r3
 800bb4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb4e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bb52:	4641      	mov	r1, r8
 800bb54:	eb12 0a01 	adds.w	sl, r2, r1
 800bb58:	4649      	mov	r1, r9
 800bb5a:	eb43 0b01 	adc.w	fp, r3, r1
 800bb5e:	f04f 0200 	mov.w	r2, #0
 800bb62:	f04f 0300 	mov.w	r3, #0
 800bb66:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bb6a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bb6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bb72:	4692      	mov	sl, r2
 800bb74:	469b      	mov	fp, r3
 800bb76:	4643      	mov	r3, r8
 800bb78:	eb1a 0303 	adds.w	r3, sl, r3
 800bb7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bb80:	464b      	mov	r3, r9
 800bb82:	eb4b 0303 	adc.w	r3, fp, r3
 800bb86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bb8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb96:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bb9a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bb9e:	460b      	mov	r3, r1
 800bba0:	18db      	adds	r3, r3, r3
 800bba2:	643b      	str	r3, [r7, #64]	; 0x40
 800bba4:	4613      	mov	r3, r2
 800bba6:	eb42 0303 	adc.w	r3, r2, r3
 800bbaa:	647b      	str	r3, [r7, #68]	; 0x44
 800bbac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bbb0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bbb4:	f7f4 fb14 	bl	80001e0 <__aeabi_uldivmod>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	460b      	mov	r3, r1
 800bbbc:	4611      	mov	r1, r2
 800bbbe:	4b3d      	ldr	r3, [pc, #244]	; (800bcb4 <UART_SetConfig+0x360>)
 800bbc0:	fba3 2301 	umull	r2, r3, r3, r1
 800bbc4:	095b      	lsrs	r3, r3, #5
 800bbc6:	2264      	movs	r2, #100	; 0x64
 800bbc8:	fb02 f303 	mul.w	r3, r2, r3
 800bbcc:	1acb      	subs	r3, r1, r3
 800bbce:	00db      	lsls	r3, r3, #3
 800bbd0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bbd4:	4b37      	ldr	r3, [pc, #220]	; (800bcb4 <UART_SetConfig+0x360>)
 800bbd6:	fba3 2302 	umull	r2, r3, r3, r2
 800bbda:	095b      	lsrs	r3, r3, #5
 800bbdc:	005b      	lsls	r3, r3, #1
 800bbde:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bbe2:	441c      	add	r4, r3
 800bbe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bbee:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bbf2:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bbf6:	4642      	mov	r2, r8
 800bbf8:	464b      	mov	r3, r9
 800bbfa:	1891      	adds	r1, r2, r2
 800bbfc:	63b9      	str	r1, [r7, #56]	; 0x38
 800bbfe:	415b      	adcs	r3, r3
 800bc00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc02:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bc06:	4641      	mov	r1, r8
 800bc08:	1851      	adds	r1, r2, r1
 800bc0a:	6339      	str	r1, [r7, #48]	; 0x30
 800bc0c:	4649      	mov	r1, r9
 800bc0e:	414b      	adcs	r3, r1
 800bc10:	637b      	str	r3, [r7, #52]	; 0x34
 800bc12:	f04f 0200 	mov.w	r2, #0
 800bc16:	f04f 0300 	mov.w	r3, #0
 800bc1a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bc1e:	4659      	mov	r1, fp
 800bc20:	00cb      	lsls	r3, r1, #3
 800bc22:	4651      	mov	r1, sl
 800bc24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc28:	4651      	mov	r1, sl
 800bc2a:	00ca      	lsls	r2, r1, #3
 800bc2c:	4610      	mov	r0, r2
 800bc2e:	4619      	mov	r1, r3
 800bc30:	4603      	mov	r3, r0
 800bc32:	4642      	mov	r2, r8
 800bc34:	189b      	adds	r3, r3, r2
 800bc36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc3a:	464b      	mov	r3, r9
 800bc3c:	460a      	mov	r2, r1
 800bc3e:	eb42 0303 	adc.w	r3, r2, r3
 800bc42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bc52:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bc56:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	18db      	adds	r3, r3, r3
 800bc5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc60:	4613      	mov	r3, r2
 800bc62:	eb42 0303 	adc.w	r3, r2, r3
 800bc66:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bc6c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bc70:	f7f4 fab6 	bl	80001e0 <__aeabi_uldivmod>
 800bc74:	4602      	mov	r2, r0
 800bc76:	460b      	mov	r3, r1
 800bc78:	4b0e      	ldr	r3, [pc, #56]	; (800bcb4 <UART_SetConfig+0x360>)
 800bc7a:	fba3 1302 	umull	r1, r3, r3, r2
 800bc7e:	095b      	lsrs	r3, r3, #5
 800bc80:	2164      	movs	r1, #100	; 0x64
 800bc82:	fb01 f303 	mul.w	r3, r1, r3
 800bc86:	1ad3      	subs	r3, r2, r3
 800bc88:	00db      	lsls	r3, r3, #3
 800bc8a:	3332      	adds	r3, #50	; 0x32
 800bc8c:	4a09      	ldr	r2, [pc, #36]	; (800bcb4 <UART_SetConfig+0x360>)
 800bc8e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc92:	095b      	lsrs	r3, r3, #5
 800bc94:	f003 0207 	and.w	r2, r3, #7
 800bc98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4422      	add	r2, r4
 800bca0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bca2:	e108      	b.n	800beb6 <UART_SetConfig+0x562>
 800bca4:	00a037a0 	.word	0x00a037a0
 800bca8:	0800f2f0 	.word	0x0800f2f0
 800bcac:	40011000 	.word	0x40011000
 800bcb0:	40011400 	.word	0x40011400
 800bcb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bcb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bcc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bcc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bcca:	4642      	mov	r2, r8
 800bccc:	464b      	mov	r3, r9
 800bcce:	1891      	adds	r1, r2, r2
 800bcd0:	6239      	str	r1, [r7, #32]
 800bcd2:	415b      	adcs	r3, r3
 800bcd4:	627b      	str	r3, [r7, #36]	; 0x24
 800bcd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bcda:	4641      	mov	r1, r8
 800bcdc:	1854      	adds	r4, r2, r1
 800bcde:	4649      	mov	r1, r9
 800bce0:	eb43 0501 	adc.w	r5, r3, r1
 800bce4:	f04f 0200 	mov.w	r2, #0
 800bce8:	f04f 0300 	mov.w	r3, #0
 800bcec:	00eb      	lsls	r3, r5, #3
 800bcee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bcf2:	00e2      	lsls	r2, r4, #3
 800bcf4:	4614      	mov	r4, r2
 800bcf6:	461d      	mov	r5, r3
 800bcf8:	4643      	mov	r3, r8
 800bcfa:	18e3      	adds	r3, r4, r3
 800bcfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bd00:	464b      	mov	r3, r9
 800bd02:	eb45 0303 	adc.w	r3, r5, r3
 800bd06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bd0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bd16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bd1a:	f04f 0200 	mov.w	r2, #0
 800bd1e:	f04f 0300 	mov.w	r3, #0
 800bd22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bd26:	4629      	mov	r1, r5
 800bd28:	008b      	lsls	r3, r1, #2
 800bd2a:	4621      	mov	r1, r4
 800bd2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bd30:	4621      	mov	r1, r4
 800bd32:	008a      	lsls	r2, r1, #2
 800bd34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bd38:	f7f4 fa52 	bl	80001e0 <__aeabi_uldivmod>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	460b      	mov	r3, r1
 800bd40:	4b60      	ldr	r3, [pc, #384]	; (800bec4 <UART_SetConfig+0x570>)
 800bd42:	fba3 2302 	umull	r2, r3, r3, r2
 800bd46:	095b      	lsrs	r3, r3, #5
 800bd48:	011c      	lsls	r4, r3, #4
 800bd4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bd54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bd58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bd5c:	4642      	mov	r2, r8
 800bd5e:	464b      	mov	r3, r9
 800bd60:	1891      	adds	r1, r2, r2
 800bd62:	61b9      	str	r1, [r7, #24]
 800bd64:	415b      	adcs	r3, r3
 800bd66:	61fb      	str	r3, [r7, #28]
 800bd68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bd6c:	4641      	mov	r1, r8
 800bd6e:	1851      	adds	r1, r2, r1
 800bd70:	6139      	str	r1, [r7, #16]
 800bd72:	4649      	mov	r1, r9
 800bd74:	414b      	adcs	r3, r1
 800bd76:	617b      	str	r3, [r7, #20]
 800bd78:	f04f 0200 	mov.w	r2, #0
 800bd7c:	f04f 0300 	mov.w	r3, #0
 800bd80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bd84:	4659      	mov	r1, fp
 800bd86:	00cb      	lsls	r3, r1, #3
 800bd88:	4651      	mov	r1, sl
 800bd8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bd8e:	4651      	mov	r1, sl
 800bd90:	00ca      	lsls	r2, r1, #3
 800bd92:	4610      	mov	r0, r2
 800bd94:	4619      	mov	r1, r3
 800bd96:	4603      	mov	r3, r0
 800bd98:	4642      	mov	r2, r8
 800bd9a:	189b      	adds	r3, r3, r2
 800bd9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bda0:	464b      	mov	r3, r9
 800bda2:	460a      	mov	r2, r1
 800bda4:	eb42 0303 	adc.w	r3, r2, r3
 800bda8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bdac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	67bb      	str	r3, [r7, #120]	; 0x78
 800bdb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bdb8:	f04f 0200 	mov.w	r2, #0
 800bdbc:	f04f 0300 	mov.w	r3, #0
 800bdc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bdc4:	4649      	mov	r1, r9
 800bdc6:	008b      	lsls	r3, r1, #2
 800bdc8:	4641      	mov	r1, r8
 800bdca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bdce:	4641      	mov	r1, r8
 800bdd0:	008a      	lsls	r2, r1, #2
 800bdd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bdd6:	f7f4 fa03 	bl	80001e0 <__aeabi_uldivmod>
 800bdda:	4602      	mov	r2, r0
 800bddc:	460b      	mov	r3, r1
 800bdde:	4b39      	ldr	r3, [pc, #228]	; (800bec4 <UART_SetConfig+0x570>)
 800bde0:	fba3 1302 	umull	r1, r3, r3, r2
 800bde4:	095b      	lsrs	r3, r3, #5
 800bde6:	2164      	movs	r1, #100	; 0x64
 800bde8:	fb01 f303 	mul.w	r3, r1, r3
 800bdec:	1ad3      	subs	r3, r2, r3
 800bdee:	011b      	lsls	r3, r3, #4
 800bdf0:	3332      	adds	r3, #50	; 0x32
 800bdf2:	4a34      	ldr	r2, [pc, #208]	; (800bec4 <UART_SetConfig+0x570>)
 800bdf4:	fba2 2303 	umull	r2, r3, r2, r3
 800bdf8:	095b      	lsrs	r3, r3, #5
 800bdfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bdfe:	441c      	add	r4, r3
 800be00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be04:	2200      	movs	r2, #0
 800be06:	673b      	str	r3, [r7, #112]	; 0x70
 800be08:	677a      	str	r2, [r7, #116]	; 0x74
 800be0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800be0e:	4642      	mov	r2, r8
 800be10:	464b      	mov	r3, r9
 800be12:	1891      	adds	r1, r2, r2
 800be14:	60b9      	str	r1, [r7, #8]
 800be16:	415b      	adcs	r3, r3
 800be18:	60fb      	str	r3, [r7, #12]
 800be1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800be1e:	4641      	mov	r1, r8
 800be20:	1851      	adds	r1, r2, r1
 800be22:	6039      	str	r1, [r7, #0]
 800be24:	4649      	mov	r1, r9
 800be26:	414b      	adcs	r3, r1
 800be28:	607b      	str	r3, [r7, #4]
 800be2a:	f04f 0200 	mov.w	r2, #0
 800be2e:	f04f 0300 	mov.w	r3, #0
 800be32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800be36:	4659      	mov	r1, fp
 800be38:	00cb      	lsls	r3, r1, #3
 800be3a:	4651      	mov	r1, sl
 800be3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be40:	4651      	mov	r1, sl
 800be42:	00ca      	lsls	r2, r1, #3
 800be44:	4610      	mov	r0, r2
 800be46:	4619      	mov	r1, r3
 800be48:	4603      	mov	r3, r0
 800be4a:	4642      	mov	r2, r8
 800be4c:	189b      	adds	r3, r3, r2
 800be4e:	66bb      	str	r3, [r7, #104]	; 0x68
 800be50:	464b      	mov	r3, r9
 800be52:	460a      	mov	r2, r1
 800be54:	eb42 0303 	adc.w	r3, r2, r3
 800be58:	66fb      	str	r3, [r7, #108]	; 0x6c
 800be5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	663b      	str	r3, [r7, #96]	; 0x60
 800be64:	667a      	str	r2, [r7, #100]	; 0x64
 800be66:	f04f 0200 	mov.w	r2, #0
 800be6a:	f04f 0300 	mov.w	r3, #0
 800be6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800be72:	4649      	mov	r1, r9
 800be74:	008b      	lsls	r3, r1, #2
 800be76:	4641      	mov	r1, r8
 800be78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800be7c:	4641      	mov	r1, r8
 800be7e:	008a      	lsls	r2, r1, #2
 800be80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800be84:	f7f4 f9ac 	bl	80001e0 <__aeabi_uldivmod>
 800be88:	4602      	mov	r2, r0
 800be8a:	460b      	mov	r3, r1
 800be8c:	4b0d      	ldr	r3, [pc, #52]	; (800bec4 <UART_SetConfig+0x570>)
 800be8e:	fba3 1302 	umull	r1, r3, r3, r2
 800be92:	095b      	lsrs	r3, r3, #5
 800be94:	2164      	movs	r1, #100	; 0x64
 800be96:	fb01 f303 	mul.w	r3, r1, r3
 800be9a:	1ad3      	subs	r3, r2, r3
 800be9c:	011b      	lsls	r3, r3, #4
 800be9e:	3332      	adds	r3, #50	; 0x32
 800bea0:	4a08      	ldr	r2, [pc, #32]	; (800bec4 <UART_SetConfig+0x570>)
 800bea2:	fba2 2303 	umull	r2, r3, r2, r3
 800bea6:	095b      	lsrs	r3, r3, #5
 800bea8:	f003 020f 	and.w	r2, r3, #15
 800beac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4422      	add	r2, r4
 800beb4:	609a      	str	r2, [r3, #8]
}
 800beb6:	bf00      	nop
 800beb8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bebc:	46bd      	mov	sp, r7
 800bebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bec2:	bf00      	nop
 800bec4:	51eb851f 	.word	0x51eb851f

0800bec8 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 800bec8:	b480      	push	{r7}
 800beca:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 800becc:	bf00      	nop
 800bece:	46bd      	mov	sp, r7
 800bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed4:	4770      	bx	lr
	...

0800bed8 <__NVIC_SetPriority>:
{
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	4603      	mov	r3, r0
 800bee0:	6039      	str	r1, [r7, #0]
 800bee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	db0a      	blt.n	800bf02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	b2da      	uxtb	r2, r3
 800bef0:	490c      	ldr	r1, [pc, #48]	; (800bf24 <__NVIC_SetPriority+0x4c>)
 800bef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bef6:	0112      	lsls	r2, r2, #4
 800bef8:	b2d2      	uxtb	r2, r2
 800befa:	440b      	add	r3, r1
 800befc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bf00:	e00a      	b.n	800bf18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	b2da      	uxtb	r2, r3
 800bf06:	4908      	ldr	r1, [pc, #32]	; (800bf28 <__NVIC_SetPriority+0x50>)
 800bf08:	79fb      	ldrb	r3, [r7, #7]
 800bf0a:	f003 030f 	and.w	r3, r3, #15
 800bf0e:	3b04      	subs	r3, #4
 800bf10:	0112      	lsls	r2, r2, #4
 800bf12:	b2d2      	uxtb	r2, r2
 800bf14:	440b      	add	r3, r1
 800bf16:	761a      	strb	r2, [r3, #24]
}
 800bf18:	bf00      	nop
 800bf1a:	370c      	adds	r7, #12
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr
 800bf24:	e000e100 	.word	0xe000e100
 800bf28:	e000ed00 	.word	0xe000ed00

0800bf2c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bf30:	4b05      	ldr	r3, [pc, #20]	; (800bf48 <SysTick_Handler+0x1c>)
 800bf32:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bf34:	f002 f964 	bl	800e200 <xTaskGetSchedulerState>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d001      	beq.n	800bf42 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bf3e:	f000 fd9b 	bl	800ca78 <xPortSysTickHandler>
  }
}
 800bf42:	bf00      	nop
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	e000e010 	.word	0xe000e010

0800bf4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bf50:	2100      	movs	r1, #0
 800bf52:	f06f 0004 	mvn.w	r0, #4
 800bf56:	f7ff ffbf 	bl	800bed8 <__NVIC_SetPriority>
#endif
}
 800bf5a:	bf00      	nop
 800bf5c:	bd80      	pop	{r7, pc}
	...

0800bf60 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf66:	f3ef 8305 	mrs	r3, IPSR
 800bf6a:	603b      	str	r3, [r7, #0]
  return(result);
 800bf6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d003      	beq.n	800bf7a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bf72:	f06f 0305 	mvn.w	r3, #5
 800bf76:	607b      	str	r3, [r7, #4]
 800bf78:	e00c      	b.n	800bf94 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bf7a:	4b0a      	ldr	r3, [pc, #40]	; (800bfa4 <osKernelInitialize+0x44>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d105      	bne.n	800bf8e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bf82:	4b08      	ldr	r3, [pc, #32]	; (800bfa4 <osKernelInitialize+0x44>)
 800bf84:	2201      	movs	r2, #1
 800bf86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	607b      	str	r3, [r7, #4]
 800bf8c:	e002      	b.n	800bf94 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bf8e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bf94:	687b      	ldr	r3, [r7, #4]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	370c      	adds	r7, #12
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
 800bfa2:	bf00      	nop
 800bfa4:	20000924 	.word	0x20000924

0800bfa8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfae:	f3ef 8305 	mrs	r3, IPSR
 800bfb2:	603b      	str	r3, [r7, #0]
  return(result);
 800bfb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d003      	beq.n	800bfc2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800bfba:	f06f 0305 	mvn.w	r3, #5
 800bfbe:	607b      	str	r3, [r7, #4]
 800bfc0:	e010      	b.n	800bfe4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bfc2:	4b0b      	ldr	r3, [pc, #44]	; (800bff0 <osKernelStart+0x48>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d109      	bne.n	800bfde <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bfca:	f7ff ffbf 	bl	800bf4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bfce:	4b08      	ldr	r3, [pc, #32]	; (800bff0 <osKernelStart+0x48>)
 800bfd0:	2202      	movs	r2, #2
 800bfd2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bfd4:	f001 fcb8 	bl	800d948 <vTaskStartScheduler>
      stat = osOK;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	607b      	str	r3, [r7, #4]
 800bfdc:	e002      	b.n	800bfe4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bfde:	f04f 33ff 	mov.w	r3, #4294967295
 800bfe2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bfe4:	687b      	ldr	r3, [r7, #4]
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3708      	adds	r7, #8
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	bf00      	nop
 800bff0:	20000924 	.word	0x20000924

0800bff4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b08e      	sub	sp, #56	; 0x38
 800bff8:	af04      	add	r7, sp, #16
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c000:	2300      	movs	r3, #0
 800c002:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c004:	f3ef 8305 	mrs	r3, IPSR
 800c008:	617b      	str	r3, [r7, #20]
  return(result);
 800c00a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d17e      	bne.n	800c10e <osThreadNew+0x11a>
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d07b      	beq.n	800c10e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c016:	2380      	movs	r3, #128	; 0x80
 800c018:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c01a:	2318      	movs	r3, #24
 800c01c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c01e:	2300      	movs	r3, #0
 800c020:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c022:	f04f 33ff 	mov.w	r3, #4294967295
 800c026:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d045      	beq.n	800c0ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d002      	beq.n	800c03c <osThreadNew+0x48>
        name = attr->name;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	699b      	ldr	r3, [r3, #24]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d002      	beq.n	800c04a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	699b      	ldr	r3, [r3, #24]
 800c048:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d008      	beq.n	800c062 <osThreadNew+0x6e>
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	2b38      	cmp	r3, #56	; 0x38
 800c054:	d805      	bhi.n	800c062 <osThreadNew+0x6e>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	f003 0301 	and.w	r3, r3, #1
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d001      	beq.n	800c066 <osThreadNew+0x72>
        return (NULL);
 800c062:	2300      	movs	r3, #0
 800c064:	e054      	b.n	800c110 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	695b      	ldr	r3, [r3, #20]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d003      	beq.n	800c076 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	695b      	ldr	r3, [r3, #20]
 800c072:	089b      	lsrs	r3, r3, #2
 800c074:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d00e      	beq.n	800c09c <osThreadNew+0xa8>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	2bbb      	cmp	r3, #187	; 0xbb
 800c084:	d90a      	bls.n	800c09c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d006      	beq.n	800c09c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	695b      	ldr	r3, [r3, #20]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d002      	beq.n	800c09c <osThreadNew+0xa8>
        mem = 1;
 800c096:	2301      	movs	r3, #1
 800c098:	61bb      	str	r3, [r7, #24]
 800c09a:	e010      	b.n	800c0be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d10c      	bne.n	800c0be <osThreadNew+0xca>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	68db      	ldr	r3, [r3, #12]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d108      	bne.n	800c0be <osThreadNew+0xca>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	691b      	ldr	r3, [r3, #16]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d104      	bne.n	800c0be <osThreadNew+0xca>
          mem = 0;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	61bb      	str	r3, [r7, #24]
 800c0b8:	e001      	b.n	800c0be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c0be:	69bb      	ldr	r3, [r7, #24]
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	d110      	bne.n	800c0e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c0cc:	9202      	str	r2, [sp, #8]
 800c0ce:	9301      	str	r3, [sp, #4]
 800c0d0:	69fb      	ldr	r3, [r7, #28]
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	6a3a      	ldr	r2, [r7, #32]
 800c0d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0da:	68f8      	ldr	r0, [r7, #12]
 800c0dc:	f001 fa48 	bl	800d570 <xTaskCreateStatic>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	613b      	str	r3, [r7, #16]
 800c0e4:	e013      	b.n	800c10e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d110      	bne.n	800c10e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c0ec:	6a3b      	ldr	r3, [r7, #32]
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	f107 0310 	add.w	r3, r7, #16
 800c0f4:	9301      	str	r3, [sp, #4]
 800c0f6:	69fb      	ldr	r3, [r7, #28]
 800c0f8:	9300      	str	r3, [sp, #0]
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0fe:	68f8      	ldr	r0, [r7, #12]
 800c100:	f001 fa93 	bl	800d62a <xTaskCreate>
 800c104:	4603      	mov	r3, r0
 800c106:	2b01      	cmp	r3, #1
 800c108:	d001      	beq.n	800c10e <osThreadNew+0x11a>
            hTask = NULL;
 800c10a:	2300      	movs	r3, #0
 800c10c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c10e:	693b      	ldr	r3, [r7, #16]
}
 800c110:	4618      	mov	r0, r3
 800c112:	3728      	adds	r7, #40	; 0x28
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c120:	f3ef 8305 	mrs	r3, IPSR
 800c124:	60bb      	str	r3, [r7, #8]
  return(result);
 800c126:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d003      	beq.n	800c134 <osDelay+0x1c>
    stat = osErrorISR;
 800c12c:	f06f 0305 	mvn.w	r3, #5
 800c130:	60fb      	str	r3, [r7, #12]
 800c132:	e007      	b.n	800c144 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c134:	2300      	movs	r3, #0
 800c136:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d002      	beq.n	800c144 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f001 fbce 	bl	800d8e0 <vTaskDelay>
    }
  }

  return (stat);
 800c144:	68fb      	ldr	r3, [r7, #12]
}
 800c146:	4618      	mov	r0, r3
 800c148:	3710      	adds	r7, #16
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
	...

0800c150 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c150:	b480      	push	{r7}
 800c152:	b085      	sub	sp, #20
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	4a07      	ldr	r2, [pc, #28]	; (800c17c <vApplicationGetIdleTaskMemory+0x2c>)
 800c160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	4a06      	ldr	r2, [pc, #24]	; (800c180 <vApplicationGetIdleTaskMemory+0x30>)
 800c166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2280      	movs	r2, #128	; 0x80
 800c16c:	601a      	str	r2, [r3, #0]
}
 800c16e:	bf00      	nop
 800c170:	3714      	adds	r7, #20
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr
 800c17a:	bf00      	nop
 800c17c:	20000928 	.word	0x20000928
 800c180:	200009e4 	.word	0x200009e4

0800c184 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c184:	b480      	push	{r7}
 800c186:	b085      	sub	sp, #20
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	4a07      	ldr	r2, [pc, #28]	; (800c1b0 <vApplicationGetTimerTaskMemory+0x2c>)
 800c194:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	4a06      	ldr	r2, [pc, #24]	; (800c1b4 <vApplicationGetTimerTaskMemory+0x30>)
 800c19a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c1a2:	601a      	str	r2, [r3, #0]
}
 800c1a4:	bf00      	nop
 800c1a6:	3714      	adds	r7, #20
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr
 800c1b0:	20000be4 	.word	0x20000be4
 800c1b4:	20000ca0 	.word	0x20000ca0

0800c1b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b08a      	sub	sp, #40	; 0x28
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c1c4:	f001 fc30 	bl	800da28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c1c8:	4b5b      	ldr	r3, [pc, #364]	; (800c338 <pvPortMalloc+0x180>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d101      	bne.n	800c1d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c1d0:	f000 f920 	bl	800c414 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c1d4:	4b59      	ldr	r3, [pc, #356]	; (800c33c <pvPortMalloc+0x184>)
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	4013      	ands	r3, r2
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	f040 8093 	bne.w	800c308 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d01d      	beq.n	800c224 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c1e8:	2208      	movs	r2, #8
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f003 0307 	and.w	r3, r3, #7
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d014      	beq.n	800c224 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f023 0307 	bic.w	r3, r3, #7
 800c200:	3308      	adds	r3, #8
 800c202:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f003 0307 	and.w	r3, r3, #7
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00a      	beq.n	800c224 <pvPortMalloc+0x6c>
	__asm volatile
 800c20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c212:	f383 8811 	msr	BASEPRI, r3
 800c216:	f3bf 8f6f 	isb	sy
 800c21a:	f3bf 8f4f 	dsb	sy
 800c21e:	617b      	str	r3, [r7, #20]
}
 800c220:	bf00      	nop
 800c222:	e7fe      	b.n	800c222 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d06e      	beq.n	800c308 <pvPortMalloc+0x150>
 800c22a:	4b45      	ldr	r3, [pc, #276]	; (800c340 <pvPortMalloc+0x188>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	429a      	cmp	r2, r3
 800c232:	d869      	bhi.n	800c308 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c234:	4b43      	ldr	r3, [pc, #268]	; (800c344 <pvPortMalloc+0x18c>)
 800c236:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c238:	4b42      	ldr	r3, [pc, #264]	; (800c344 <pvPortMalloc+0x18c>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c23e:	e004      	b.n	800c24a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c242:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	429a      	cmp	r2, r3
 800c252:	d903      	bls.n	800c25c <pvPortMalloc+0xa4>
 800c254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d1f1      	bne.n	800c240 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c25c:	4b36      	ldr	r3, [pc, #216]	; (800c338 <pvPortMalloc+0x180>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c262:	429a      	cmp	r2, r3
 800c264:	d050      	beq.n	800c308 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c266:	6a3b      	ldr	r3, [r7, #32]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2208      	movs	r2, #8
 800c26c:	4413      	add	r3, r2
 800c26e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	6a3b      	ldr	r3, [r7, #32]
 800c276:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27a:	685a      	ldr	r2, [r3, #4]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	1ad2      	subs	r2, r2, r3
 800c280:	2308      	movs	r3, #8
 800c282:	005b      	lsls	r3, r3, #1
 800c284:	429a      	cmp	r2, r3
 800c286:	d91f      	bls.n	800c2c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4413      	add	r3, r2
 800c28e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	f003 0307 	and.w	r3, r3, #7
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00a      	beq.n	800c2b0 <pvPortMalloc+0xf8>
	__asm volatile
 800c29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29e:	f383 8811 	msr	BASEPRI, r3
 800c2a2:	f3bf 8f6f 	isb	sy
 800c2a6:	f3bf 8f4f 	dsb	sy
 800c2aa:	613b      	str	r3, [r7, #16]
}
 800c2ac:	bf00      	nop
 800c2ae:	e7fe      	b.n	800c2ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b2:	685a      	ldr	r2, [r3, #4]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	1ad2      	subs	r2, r2, r3
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c2c2:	69b8      	ldr	r0, [r7, #24]
 800c2c4:	f000 f908 	bl	800c4d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c2c8:	4b1d      	ldr	r3, [pc, #116]	; (800c340 <pvPortMalloc+0x188>)
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	4a1b      	ldr	r2, [pc, #108]	; (800c340 <pvPortMalloc+0x188>)
 800c2d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c2d6:	4b1a      	ldr	r3, [pc, #104]	; (800c340 <pvPortMalloc+0x188>)
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	4b1b      	ldr	r3, [pc, #108]	; (800c348 <pvPortMalloc+0x190>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d203      	bcs.n	800c2ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c2e2:	4b17      	ldr	r3, [pc, #92]	; (800c340 <pvPortMalloc+0x188>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4a18      	ldr	r2, [pc, #96]	; (800c348 <pvPortMalloc+0x190>)
 800c2e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ec:	685a      	ldr	r2, [r3, #4]
 800c2ee:	4b13      	ldr	r3, [pc, #76]	; (800c33c <pvPortMalloc+0x184>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	431a      	orrs	r2, r3
 800c2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c2fe:	4b13      	ldr	r3, [pc, #76]	; (800c34c <pvPortMalloc+0x194>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	3301      	adds	r3, #1
 800c304:	4a11      	ldr	r2, [pc, #68]	; (800c34c <pvPortMalloc+0x194>)
 800c306:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c308:	f001 fb9c 	bl	800da44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	f003 0307 	and.w	r3, r3, #7
 800c312:	2b00      	cmp	r3, #0
 800c314:	d00a      	beq.n	800c32c <pvPortMalloc+0x174>
	__asm volatile
 800c316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31a:	f383 8811 	msr	BASEPRI, r3
 800c31e:	f3bf 8f6f 	isb	sy
 800c322:	f3bf 8f4f 	dsb	sy
 800c326:	60fb      	str	r3, [r7, #12]
}
 800c328:	bf00      	nop
 800c32a:	e7fe      	b.n	800c32a <pvPortMalloc+0x172>
	return pvReturn;
 800c32c:	69fb      	ldr	r3, [r7, #28]
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3728      	adds	r7, #40	; 0x28
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	20004ca8 	.word	0x20004ca8
 800c33c:	20004cbc 	.word	0x20004cbc
 800c340:	20004cac 	.word	0x20004cac
 800c344:	20004ca0 	.word	0x20004ca0
 800c348:	20004cb0 	.word	0x20004cb0
 800c34c:	20004cb4 	.word	0x20004cb4

0800c350 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d04d      	beq.n	800c3fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c362:	2308      	movs	r3, #8
 800c364:	425b      	negs	r3, r3
 800c366:	697a      	ldr	r2, [r7, #20]
 800c368:	4413      	add	r3, r2
 800c36a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	685a      	ldr	r2, [r3, #4]
 800c374:	4b24      	ldr	r3, [pc, #144]	; (800c408 <vPortFree+0xb8>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4013      	ands	r3, r2
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10a      	bne.n	800c394 <vPortFree+0x44>
	__asm volatile
 800c37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c382:	f383 8811 	msr	BASEPRI, r3
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	60fb      	str	r3, [r7, #12]
}
 800c390:	bf00      	nop
 800c392:	e7fe      	b.n	800c392 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d00a      	beq.n	800c3b2 <vPortFree+0x62>
	__asm volatile
 800c39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a0:	f383 8811 	msr	BASEPRI, r3
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	60bb      	str	r3, [r7, #8]
}
 800c3ae:	bf00      	nop
 800c3b0:	e7fe      	b.n	800c3b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	685a      	ldr	r2, [r3, #4]
 800c3b6:	4b14      	ldr	r3, [pc, #80]	; (800c408 <vPortFree+0xb8>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4013      	ands	r3, r2
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d01e      	beq.n	800c3fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d11a      	bne.n	800c3fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	685a      	ldr	r2, [r3, #4]
 800c3cc:	4b0e      	ldr	r3, [pc, #56]	; (800c408 <vPortFree+0xb8>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	43db      	mvns	r3, r3
 800c3d2:	401a      	ands	r2, r3
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c3d8:	f001 fb26 	bl	800da28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	685a      	ldr	r2, [r3, #4]
 800c3e0:	4b0a      	ldr	r3, [pc, #40]	; (800c40c <vPortFree+0xbc>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	4a09      	ldr	r2, [pc, #36]	; (800c40c <vPortFree+0xbc>)
 800c3e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c3ea:	6938      	ldr	r0, [r7, #16]
 800c3ec:	f000 f874 	bl	800c4d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c3f0:	4b07      	ldr	r3, [pc, #28]	; (800c410 <vPortFree+0xc0>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	4a06      	ldr	r2, [pc, #24]	; (800c410 <vPortFree+0xc0>)
 800c3f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c3fa:	f001 fb23 	bl	800da44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c3fe:	bf00      	nop
 800c400:	3718      	adds	r7, #24
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	20004cbc 	.word	0x20004cbc
 800c40c:	20004cac 	.word	0x20004cac
 800c410:	20004cb8 	.word	0x20004cb8

0800c414 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c414:	b480      	push	{r7}
 800c416:	b085      	sub	sp, #20
 800c418:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c41a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c41e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c420:	4b27      	ldr	r3, [pc, #156]	; (800c4c0 <prvHeapInit+0xac>)
 800c422:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f003 0307 	and.w	r3, r3, #7
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d00c      	beq.n	800c448 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	3307      	adds	r3, #7
 800c432:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f023 0307 	bic.w	r3, r3, #7
 800c43a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c43c:	68ba      	ldr	r2, [r7, #8]
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	1ad3      	subs	r3, r2, r3
 800c442:	4a1f      	ldr	r2, [pc, #124]	; (800c4c0 <prvHeapInit+0xac>)
 800c444:	4413      	add	r3, r2
 800c446:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c44c:	4a1d      	ldr	r2, [pc, #116]	; (800c4c4 <prvHeapInit+0xb0>)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c452:	4b1c      	ldr	r3, [pc, #112]	; (800c4c4 <prvHeapInit+0xb0>)
 800c454:	2200      	movs	r2, #0
 800c456:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	68ba      	ldr	r2, [r7, #8]
 800c45c:	4413      	add	r3, r2
 800c45e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c460:	2208      	movs	r2, #8
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	1a9b      	subs	r3, r3, r2
 800c466:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f023 0307 	bic.w	r3, r3, #7
 800c46e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	4a15      	ldr	r2, [pc, #84]	; (800c4c8 <prvHeapInit+0xb4>)
 800c474:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c476:	4b14      	ldr	r3, [pc, #80]	; (800c4c8 <prvHeapInit+0xb4>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2200      	movs	r2, #0
 800c47c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c47e:	4b12      	ldr	r3, [pc, #72]	; (800c4c8 <prvHeapInit+0xb4>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2200      	movs	r2, #0
 800c484:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	68fa      	ldr	r2, [r7, #12]
 800c48e:	1ad2      	subs	r2, r2, r3
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c494:	4b0c      	ldr	r3, [pc, #48]	; (800c4c8 <prvHeapInit+0xb4>)
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	4a0a      	ldr	r2, [pc, #40]	; (800c4cc <prvHeapInit+0xb8>)
 800c4a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	4a09      	ldr	r2, [pc, #36]	; (800c4d0 <prvHeapInit+0xbc>)
 800c4aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c4ac:	4b09      	ldr	r3, [pc, #36]	; (800c4d4 <prvHeapInit+0xc0>)
 800c4ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c4b2:	601a      	str	r2, [r3, #0]
}
 800c4b4:	bf00      	nop
 800c4b6:	3714      	adds	r7, #20
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr
 800c4c0:	200010a0 	.word	0x200010a0
 800c4c4:	20004ca0 	.word	0x20004ca0
 800c4c8:	20004ca8 	.word	0x20004ca8
 800c4cc:	20004cb0 	.word	0x20004cb0
 800c4d0:	20004cac 	.word	0x20004cac
 800c4d4:	20004cbc 	.word	0x20004cbc

0800c4d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c4e0:	4b28      	ldr	r3, [pc, #160]	; (800c584 <prvInsertBlockIntoFreeList+0xac>)
 800c4e2:	60fb      	str	r3, [r7, #12]
 800c4e4:	e002      	b.n	800c4ec <prvInsertBlockIntoFreeList+0x14>
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	60fb      	str	r3, [r7, #12]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d8f7      	bhi.n	800c4e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	68ba      	ldr	r2, [r7, #8]
 800c500:	4413      	add	r3, r2
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	429a      	cmp	r2, r3
 800c506:	d108      	bne.n	800c51a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	685a      	ldr	r2, [r3, #4]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	441a      	add	r2, r3
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	68ba      	ldr	r2, [r7, #8]
 800c524:	441a      	add	r2, r3
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d118      	bne.n	800c560 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	4b15      	ldr	r3, [pc, #84]	; (800c588 <prvInsertBlockIntoFreeList+0xb0>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	429a      	cmp	r2, r3
 800c538:	d00d      	beq.n	800c556 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	685a      	ldr	r2, [r3, #4]
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	441a      	add	r2, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	601a      	str	r2, [r3, #0]
 800c554:	e008      	b.n	800c568 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c556:	4b0c      	ldr	r3, [pc, #48]	; (800c588 <prvInsertBlockIntoFreeList+0xb0>)
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	601a      	str	r2, [r3, #0]
 800c55e:	e003      	b.n	800c568 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681a      	ldr	r2, [r3, #0]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d002      	beq.n	800c576 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c576:	bf00      	nop
 800c578:	3714      	adds	r7, #20
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop
 800c584:	20004ca0 	.word	0x20004ca0
 800c588:	20004ca8 	.word	0x20004ca8

0800c58c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f103 0208 	add.w	r2, r3, #8
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c5a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f103 0208 	add.w	r2, r3, #8
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f103 0208 	add.w	r2, r3, #8
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c5c0:	bf00      	nop
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b083      	sub	sp, #12
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c5da:	bf00      	nop
 800c5dc:	370c      	adds	r7, #12
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr

0800c5e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c5e6:	b480      	push	{r7}
 800c5e8:	b085      	sub	sp, #20
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
 800c5ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	689a      	ldr	r2, [r3, #8]
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	683a      	ldr	r2, [r7, #0]
 800c60a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	683a      	ldr	r2, [r7, #0]
 800c610:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	1c5a      	adds	r2, r3, #1
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	601a      	str	r2, [r3, #0]
}
 800c622:	bf00      	nop
 800c624:	3714      	adds	r7, #20
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr

0800c62e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c62e:	b480      	push	{r7}
 800c630:	b085      	sub	sp, #20
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
 800c636:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c644:	d103      	bne.n	800c64e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	691b      	ldr	r3, [r3, #16]
 800c64a:	60fb      	str	r3, [r7, #12]
 800c64c:	e00c      	b.n	800c668 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	3308      	adds	r3, #8
 800c652:	60fb      	str	r3, [r7, #12]
 800c654:	e002      	b.n	800c65c <vListInsert+0x2e>
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	60fb      	str	r3, [r7, #12]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	68ba      	ldr	r2, [r7, #8]
 800c664:	429a      	cmp	r2, r3
 800c666:	d2f6      	bcs.n	800c656 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	685a      	ldr	r2, [r3, #4]
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	683a      	ldr	r2, [r7, #0]
 800c676:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	68fa      	ldr	r2, [r7, #12]
 800c67c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	683a      	ldr	r2, [r7, #0]
 800c682:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	687a      	ldr	r2, [r7, #4]
 800c688:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	1c5a      	adds	r2, r3, #1
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	601a      	str	r2, [r3, #0]
}
 800c694:	bf00      	nop
 800c696:	3714      	adds	r7, #20
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b085      	sub	sp, #20
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	691b      	ldr	r3, [r3, #16]
 800c6ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	6892      	ldr	r2, [r2, #8]
 800c6b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	689b      	ldr	r3, [r3, #8]
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	6852      	ldr	r2, [r2, #4]
 800c6c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d103      	bne.n	800c6d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	689a      	ldr	r2, [r3, #8]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	1e5a      	subs	r2, r3, #1
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3714      	adds	r7, #20
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	60b9      	str	r1, [r7, #8]
 800c6fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	3b04      	subs	r3, #4
 800c704:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c70c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	3b04      	subs	r3, #4
 800c712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	f023 0201 	bic.w	r2, r3, #1
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	3b04      	subs	r3, #4
 800c722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c724:	4a0c      	ldr	r2, [pc, #48]	; (800c758 <pxPortInitialiseStack+0x64>)
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	3b14      	subs	r3, #20
 800c72e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	3b04      	subs	r3, #4
 800c73a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f06f 0202 	mvn.w	r2, #2
 800c742:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	3b20      	subs	r3, #32
 800c748:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c74a:	68fb      	ldr	r3, [r7, #12]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3714      	adds	r7, #20
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr
 800c758:	0800c75d 	.word	0x0800c75d

0800c75c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c75c:	b480      	push	{r7}
 800c75e:	b085      	sub	sp, #20
 800c760:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c762:	2300      	movs	r3, #0
 800c764:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c766:	4b12      	ldr	r3, [pc, #72]	; (800c7b0 <prvTaskExitError+0x54>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c76e:	d00a      	beq.n	800c786 <prvTaskExitError+0x2a>
	__asm volatile
 800c770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c774:	f383 8811 	msr	BASEPRI, r3
 800c778:	f3bf 8f6f 	isb	sy
 800c77c:	f3bf 8f4f 	dsb	sy
 800c780:	60fb      	str	r3, [r7, #12]
}
 800c782:	bf00      	nop
 800c784:	e7fe      	b.n	800c784 <prvTaskExitError+0x28>
	__asm volatile
 800c786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78a:	f383 8811 	msr	BASEPRI, r3
 800c78e:	f3bf 8f6f 	isb	sy
 800c792:	f3bf 8f4f 	dsb	sy
 800c796:	60bb      	str	r3, [r7, #8]
}
 800c798:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c79a:	bf00      	nop
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d0fc      	beq.n	800c79c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c7a2:	bf00      	nop
 800c7a4:	bf00      	nop
 800c7a6:	3714      	adds	r7, #20
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr
 800c7b0:	20000010 	.word	0x20000010
	...

0800c7c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c7c0:	4b07      	ldr	r3, [pc, #28]	; (800c7e0 <pxCurrentTCBConst2>)
 800c7c2:	6819      	ldr	r1, [r3, #0]
 800c7c4:	6808      	ldr	r0, [r1, #0]
 800c7c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ca:	f380 8809 	msr	PSP, r0
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f04f 0000 	mov.w	r0, #0
 800c7d6:	f380 8811 	msr	BASEPRI, r0
 800c7da:	4770      	bx	lr
 800c7dc:	f3af 8000 	nop.w

0800c7e0 <pxCurrentTCBConst2>:
 800c7e0:	20004d08 	.word	0x20004d08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c7e4:	bf00      	nop
 800c7e6:	bf00      	nop

0800c7e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c7e8:	4808      	ldr	r0, [pc, #32]	; (800c80c <prvPortStartFirstTask+0x24>)
 800c7ea:	6800      	ldr	r0, [r0, #0]
 800c7ec:	6800      	ldr	r0, [r0, #0]
 800c7ee:	f380 8808 	msr	MSP, r0
 800c7f2:	f04f 0000 	mov.w	r0, #0
 800c7f6:	f380 8814 	msr	CONTROL, r0
 800c7fa:	b662      	cpsie	i
 800c7fc:	b661      	cpsie	f
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	f3bf 8f6f 	isb	sy
 800c806:	df00      	svc	0
 800c808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c80a:	bf00      	nop
 800c80c:	e000ed08 	.word	0xe000ed08

0800c810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b086      	sub	sp, #24
 800c814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c816:	4b46      	ldr	r3, [pc, #280]	; (800c930 <xPortStartScheduler+0x120>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4a46      	ldr	r2, [pc, #280]	; (800c934 <xPortStartScheduler+0x124>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d10a      	bne.n	800c836 <xPortStartScheduler+0x26>
	__asm volatile
 800c820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	613b      	str	r3, [r7, #16]
}
 800c832:	bf00      	nop
 800c834:	e7fe      	b.n	800c834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c836:	4b3e      	ldr	r3, [pc, #248]	; (800c930 <xPortStartScheduler+0x120>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a3f      	ldr	r2, [pc, #252]	; (800c938 <xPortStartScheduler+0x128>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d10a      	bne.n	800c856 <xPortStartScheduler+0x46>
	__asm volatile
 800c840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c844:	f383 8811 	msr	BASEPRI, r3
 800c848:	f3bf 8f6f 	isb	sy
 800c84c:	f3bf 8f4f 	dsb	sy
 800c850:	60fb      	str	r3, [r7, #12]
}
 800c852:	bf00      	nop
 800c854:	e7fe      	b.n	800c854 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c856:	4b39      	ldr	r3, [pc, #228]	; (800c93c <xPortStartScheduler+0x12c>)
 800c858:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	b2db      	uxtb	r3, r3
 800c860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	22ff      	movs	r2, #255	; 0xff
 800c866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c870:	78fb      	ldrb	r3, [r7, #3]
 800c872:	b2db      	uxtb	r3, r3
 800c874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c878:	b2da      	uxtb	r2, r3
 800c87a:	4b31      	ldr	r3, [pc, #196]	; (800c940 <xPortStartScheduler+0x130>)
 800c87c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c87e:	4b31      	ldr	r3, [pc, #196]	; (800c944 <xPortStartScheduler+0x134>)
 800c880:	2207      	movs	r2, #7
 800c882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c884:	e009      	b.n	800c89a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c886:	4b2f      	ldr	r3, [pc, #188]	; (800c944 <xPortStartScheduler+0x134>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	3b01      	subs	r3, #1
 800c88c:	4a2d      	ldr	r2, [pc, #180]	; (800c944 <xPortStartScheduler+0x134>)
 800c88e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c890:	78fb      	ldrb	r3, [r7, #3]
 800c892:	b2db      	uxtb	r3, r3
 800c894:	005b      	lsls	r3, r3, #1
 800c896:	b2db      	uxtb	r3, r3
 800c898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c89a:	78fb      	ldrb	r3, [r7, #3]
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8a2:	2b80      	cmp	r3, #128	; 0x80
 800c8a4:	d0ef      	beq.n	800c886 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c8a6:	4b27      	ldr	r3, [pc, #156]	; (800c944 <xPortStartScheduler+0x134>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f1c3 0307 	rsb	r3, r3, #7
 800c8ae:	2b04      	cmp	r3, #4
 800c8b0:	d00a      	beq.n	800c8c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b6:	f383 8811 	msr	BASEPRI, r3
 800c8ba:	f3bf 8f6f 	isb	sy
 800c8be:	f3bf 8f4f 	dsb	sy
 800c8c2:	60bb      	str	r3, [r7, #8]
}
 800c8c4:	bf00      	nop
 800c8c6:	e7fe      	b.n	800c8c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c8c8:	4b1e      	ldr	r3, [pc, #120]	; (800c944 <xPortStartScheduler+0x134>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	021b      	lsls	r3, r3, #8
 800c8ce:	4a1d      	ldr	r2, [pc, #116]	; (800c944 <xPortStartScheduler+0x134>)
 800c8d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c8d2:	4b1c      	ldr	r3, [pc, #112]	; (800c944 <xPortStartScheduler+0x134>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c8da:	4a1a      	ldr	r2, [pc, #104]	; (800c944 <xPortStartScheduler+0x134>)
 800c8dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	b2da      	uxtb	r2, r3
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c8e6:	4b18      	ldr	r3, [pc, #96]	; (800c948 <xPortStartScheduler+0x138>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a17      	ldr	r2, [pc, #92]	; (800c948 <xPortStartScheduler+0x138>)
 800c8ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c8f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c8f2:	4b15      	ldr	r3, [pc, #84]	; (800c948 <xPortStartScheduler+0x138>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a14      	ldr	r2, [pc, #80]	; (800c948 <xPortStartScheduler+0x138>)
 800c8f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c8fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c8fe:	f000 f8dd 	bl	800cabc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c902:	4b12      	ldr	r3, [pc, #72]	; (800c94c <xPortStartScheduler+0x13c>)
 800c904:	2200      	movs	r2, #0
 800c906:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c908:	f000 f8fc 	bl	800cb04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c90c:	4b10      	ldr	r3, [pc, #64]	; (800c950 <xPortStartScheduler+0x140>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	4a0f      	ldr	r2, [pc, #60]	; (800c950 <xPortStartScheduler+0x140>)
 800c912:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c916:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c918:	f7ff ff66 	bl	800c7e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c91c:	f001 f9fa 	bl	800dd14 <vTaskSwitchContext>
	prvTaskExitError();
 800c920:	f7ff ff1c 	bl	800c75c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c924:	2300      	movs	r3, #0
}
 800c926:	4618      	mov	r0, r3
 800c928:	3718      	adds	r7, #24
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	e000ed00 	.word	0xe000ed00
 800c934:	410fc271 	.word	0x410fc271
 800c938:	410fc270 	.word	0x410fc270
 800c93c:	e000e400 	.word	0xe000e400
 800c940:	20004cc0 	.word	0x20004cc0
 800c944:	20004cc4 	.word	0x20004cc4
 800c948:	e000ed20 	.word	0xe000ed20
 800c94c:	20000010 	.word	0x20000010
 800c950:	e000ef34 	.word	0xe000ef34

0800c954 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
	__asm volatile
 800c95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95e:	f383 8811 	msr	BASEPRI, r3
 800c962:	f3bf 8f6f 	isb	sy
 800c966:	f3bf 8f4f 	dsb	sy
 800c96a:	607b      	str	r3, [r7, #4]
}
 800c96c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c96e:	4b0f      	ldr	r3, [pc, #60]	; (800c9ac <vPortEnterCritical+0x58>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	3301      	adds	r3, #1
 800c974:	4a0d      	ldr	r2, [pc, #52]	; (800c9ac <vPortEnterCritical+0x58>)
 800c976:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c978:	4b0c      	ldr	r3, [pc, #48]	; (800c9ac <vPortEnterCritical+0x58>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d10f      	bne.n	800c9a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c980:	4b0b      	ldr	r3, [pc, #44]	; (800c9b0 <vPortEnterCritical+0x5c>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	b2db      	uxtb	r3, r3
 800c986:	2b00      	cmp	r3, #0
 800c988:	d00a      	beq.n	800c9a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98e:	f383 8811 	msr	BASEPRI, r3
 800c992:	f3bf 8f6f 	isb	sy
 800c996:	f3bf 8f4f 	dsb	sy
 800c99a:	603b      	str	r3, [r7, #0]
}
 800c99c:	bf00      	nop
 800c99e:	e7fe      	b.n	800c99e <vPortEnterCritical+0x4a>
	}
}
 800c9a0:	bf00      	nop
 800c9a2:	370c      	adds	r7, #12
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr
 800c9ac:	20000010 	.word	0x20000010
 800c9b0:	e000ed04 	.word	0xe000ed04

0800c9b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c9ba:	4b12      	ldr	r3, [pc, #72]	; (800ca04 <vPortExitCritical+0x50>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d10a      	bne.n	800c9d8 <vPortExitCritical+0x24>
	__asm volatile
 800c9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c6:	f383 8811 	msr	BASEPRI, r3
 800c9ca:	f3bf 8f6f 	isb	sy
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	607b      	str	r3, [r7, #4]
}
 800c9d4:	bf00      	nop
 800c9d6:	e7fe      	b.n	800c9d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c9d8:	4b0a      	ldr	r3, [pc, #40]	; (800ca04 <vPortExitCritical+0x50>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	3b01      	subs	r3, #1
 800c9de:	4a09      	ldr	r2, [pc, #36]	; (800ca04 <vPortExitCritical+0x50>)
 800c9e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c9e2:	4b08      	ldr	r3, [pc, #32]	; (800ca04 <vPortExitCritical+0x50>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d105      	bne.n	800c9f6 <vPortExitCritical+0x42>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	f383 8811 	msr	BASEPRI, r3
}
 800c9f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c9f6:	bf00      	nop
 800c9f8:	370c      	adds	r7, #12
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr
 800ca02:	bf00      	nop
 800ca04:	20000010 	.word	0x20000010
	...

0800ca10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca10:	f3ef 8009 	mrs	r0, PSP
 800ca14:	f3bf 8f6f 	isb	sy
 800ca18:	4b15      	ldr	r3, [pc, #84]	; (800ca70 <pxCurrentTCBConst>)
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	f01e 0f10 	tst.w	lr, #16
 800ca20:	bf08      	it	eq
 800ca22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca2a:	6010      	str	r0, [r2, #0]
 800ca2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ca34:	f380 8811 	msr	BASEPRI, r0
 800ca38:	f3bf 8f4f 	dsb	sy
 800ca3c:	f3bf 8f6f 	isb	sy
 800ca40:	f001 f968 	bl	800dd14 <vTaskSwitchContext>
 800ca44:	f04f 0000 	mov.w	r0, #0
 800ca48:	f380 8811 	msr	BASEPRI, r0
 800ca4c:	bc09      	pop	{r0, r3}
 800ca4e:	6819      	ldr	r1, [r3, #0]
 800ca50:	6808      	ldr	r0, [r1, #0]
 800ca52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca56:	f01e 0f10 	tst.w	lr, #16
 800ca5a:	bf08      	it	eq
 800ca5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ca60:	f380 8809 	msr	PSP, r0
 800ca64:	f3bf 8f6f 	isb	sy
 800ca68:	4770      	bx	lr
 800ca6a:	bf00      	nop
 800ca6c:	f3af 8000 	nop.w

0800ca70 <pxCurrentTCBConst>:
 800ca70:	20004d08 	.word	0x20004d08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ca74:	bf00      	nop
 800ca76:	bf00      	nop

0800ca78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	607b      	str	r3, [r7, #4]
}
 800ca90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca92:	f001 f885 	bl	800dba0 <xTaskIncrementTick>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d003      	beq.n	800caa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca9c:	4b06      	ldr	r3, [pc, #24]	; (800cab8 <xPortSysTickHandler+0x40>)
 800ca9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caa2:	601a      	str	r2, [r3, #0]
 800caa4:	2300      	movs	r3, #0
 800caa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	f383 8811 	msr	BASEPRI, r3
}
 800caae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cab0:	bf00      	nop
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	e000ed04 	.word	0xe000ed04

0800cabc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cabc:	b480      	push	{r7}
 800cabe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cac0:	4b0b      	ldr	r3, [pc, #44]	; (800caf0 <vPortSetupTimerInterrupt+0x34>)
 800cac2:	2200      	movs	r2, #0
 800cac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cac6:	4b0b      	ldr	r3, [pc, #44]	; (800caf4 <vPortSetupTimerInterrupt+0x38>)
 800cac8:	2200      	movs	r2, #0
 800caca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cacc:	4b0a      	ldr	r3, [pc, #40]	; (800caf8 <vPortSetupTimerInterrupt+0x3c>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a0a      	ldr	r2, [pc, #40]	; (800cafc <vPortSetupTimerInterrupt+0x40>)
 800cad2:	fba2 2303 	umull	r2, r3, r2, r3
 800cad6:	099b      	lsrs	r3, r3, #6
 800cad8:	4a09      	ldr	r2, [pc, #36]	; (800cb00 <vPortSetupTimerInterrupt+0x44>)
 800cada:	3b01      	subs	r3, #1
 800cadc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cade:	4b04      	ldr	r3, [pc, #16]	; (800caf0 <vPortSetupTimerInterrupt+0x34>)
 800cae0:	2207      	movs	r2, #7
 800cae2:	601a      	str	r2, [r3, #0]
}
 800cae4:	bf00      	nop
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	e000e010 	.word	0xe000e010
 800caf4:	e000e018 	.word	0xe000e018
 800caf8:	20000004 	.word	0x20000004
 800cafc:	10624dd3 	.word	0x10624dd3
 800cb00:	e000e014 	.word	0xe000e014

0800cb04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cb14 <vPortEnableVFP+0x10>
 800cb08:	6801      	ldr	r1, [r0, #0]
 800cb0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cb0e:	6001      	str	r1, [r0, #0]
 800cb10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb12:	bf00      	nop
 800cb14:	e000ed88 	.word	0xe000ed88

0800cb18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb18:	b480      	push	{r7}
 800cb1a:	b085      	sub	sp, #20
 800cb1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb1e:	f3ef 8305 	mrs	r3, IPSR
 800cb22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2b0f      	cmp	r3, #15
 800cb28:	d914      	bls.n	800cb54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb2a:	4a17      	ldr	r2, [pc, #92]	; (800cb88 <vPortValidateInterruptPriority+0x70>)
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	4413      	add	r3, r2
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb34:	4b15      	ldr	r3, [pc, #84]	; (800cb8c <vPortValidateInterruptPriority+0x74>)
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	7afa      	ldrb	r2, [r7, #11]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d20a      	bcs.n	800cb54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb42:	f383 8811 	msr	BASEPRI, r3
 800cb46:	f3bf 8f6f 	isb	sy
 800cb4a:	f3bf 8f4f 	dsb	sy
 800cb4e:	607b      	str	r3, [r7, #4]
}
 800cb50:	bf00      	nop
 800cb52:	e7fe      	b.n	800cb52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb54:	4b0e      	ldr	r3, [pc, #56]	; (800cb90 <vPortValidateInterruptPriority+0x78>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cb5c:	4b0d      	ldr	r3, [pc, #52]	; (800cb94 <vPortValidateInterruptPriority+0x7c>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d90a      	bls.n	800cb7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb68:	f383 8811 	msr	BASEPRI, r3
 800cb6c:	f3bf 8f6f 	isb	sy
 800cb70:	f3bf 8f4f 	dsb	sy
 800cb74:	603b      	str	r3, [r7, #0]
}
 800cb76:	bf00      	nop
 800cb78:	e7fe      	b.n	800cb78 <vPortValidateInterruptPriority+0x60>
	}
 800cb7a:	bf00      	nop
 800cb7c:	3714      	adds	r7, #20
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	e000e3f0 	.word	0xe000e3f0
 800cb8c:	20004cc0 	.word	0x20004cc0
 800cb90:	e000ed0c 	.word	0xe000ed0c
 800cb94:	20004cc4 	.word	0x20004cc4

0800cb98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d10a      	bne.n	800cbc2 <xQueueGenericReset+0x2a>
	__asm volatile
 800cbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb0:	f383 8811 	msr	BASEPRI, r3
 800cbb4:	f3bf 8f6f 	isb	sy
 800cbb8:	f3bf 8f4f 	dsb	sy
 800cbbc:	60bb      	str	r3, [r7, #8]
}
 800cbbe:	bf00      	nop
 800cbc0:	e7fe      	b.n	800cbc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cbc2:	f7ff fec7 	bl	800c954 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbce:	68f9      	ldr	r1, [r7, #12]
 800cbd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cbd2:	fb01 f303 	mul.w	r3, r1, r3
 800cbd6:	441a      	add	r2, r3
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681a      	ldr	r2, [r3, #0]
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681a      	ldr	r2, [r3, #0]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbf2:	3b01      	subs	r3, #1
 800cbf4:	68f9      	ldr	r1, [r7, #12]
 800cbf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cbf8:	fb01 f303 	mul.w	r3, r1, r3
 800cbfc:	441a      	add	r2, r3
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	22ff      	movs	r2, #255	; 0xff
 800cc06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	22ff      	movs	r2, #255	; 0xff
 800cc0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d114      	bne.n	800cc42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	691b      	ldr	r3, [r3, #16]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d01a      	beq.n	800cc56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	3310      	adds	r3, #16
 800cc24:	4618      	mov	r0, r3
 800cc26:	f001 f929 	bl	800de7c <xTaskRemoveFromEventList>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d012      	beq.n	800cc56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cc30:	4b0c      	ldr	r3, [pc, #48]	; (800cc64 <xQueueGenericReset+0xcc>)
 800cc32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc36:	601a      	str	r2, [r3, #0]
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	e009      	b.n	800cc56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	3310      	adds	r3, #16
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7ff fca0 	bl	800c58c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	3324      	adds	r3, #36	; 0x24
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7ff fc9b 	bl	800c58c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cc56:	f7ff fead 	bl	800c9b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cc5a:	2301      	movs	r3, #1
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3710      	adds	r7, #16
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	e000ed04 	.word	0xe000ed04

0800cc68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b08e      	sub	sp, #56	; 0x38
 800cc6c:	af02      	add	r7, sp, #8
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
 800cc74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d10a      	bne.n	800cc92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc80:	f383 8811 	msr	BASEPRI, r3
 800cc84:	f3bf 8f6f 	isb	sy
 800cc88:	f3bf 8f4f 	dsb	sy
 800cc8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cc8e:	bf00      	nop
 800cc90:	e7fe      	b.n	800cc90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d10a      	bne.n	800ccae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9c:	f383 8811 	msr	BASEPRI, r3
 800cca0:	f3bf 8f6f 	isb	sy
 800cca4:	f3bf 8f4f 	dsb	sy
 800cca8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ccaa:	bf00      	nop
 800ccac:	e7fe      	b.n	800ccac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d002      	beq.n	800ccba <xQueueGenericCreateStatic+0x52>
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d001      	beq.n	800ccbe <xQueueGenericCreateStatic+0x56>
 800ccba:	2301      	movs	r3, #1
 800ccbc:	e000      	b.n	800ccc0 <xQueueGenericCreateStatic+0x58>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10a      	bne.n	800ccda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ccc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc8:	f383 8811 	msr	BASEPRI, r3
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	623b      	str	r3, [r7, #32]
}
 800ccd6:	bf00      	nop
 800ccd8:	e7fe      	b.n	800ccd8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d102      	bne.n	800cce6 <xQueueGenericCreateStatic+0x7e>
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d101      	bne.n	800ccea <xQueueGenericCreateStatic+0x82>
 800cce6:	2301      	movs	r3, #1
 800cce8:	e000      	b.n	800ccec <xQueueGenericCreateStatic+0x84>
 800ccea:	2300      	movs	r3, #0
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d10a      	bne.n	800cd06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ccf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf4:	f383 8811 	msr	BASEPRI, r3
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	61fb      	str	r3, [r7, #28]
}
 800cd02:	bf00      	nop
 800cd04:	e7fe      	b.n	800cd04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cd06:	2350      	movs	r3, #80	; 0x50
 800cd08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	2b50      	cmp	r3, #80	; 0x50
 800cd0e:	d00a      	beq.n	800cd26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	61bb      	str	r3, [r7, #24]
}
 800cd22:	bf00      	nop
 800cd24:	e7fe      	b.n	800cd24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cd26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00d      	beq.n	800cd4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd34:	2201      	movs	r2, #1
 800cd36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd40:	9300      	str	r3, [sp, #0]
 800cd42:	4613      	mov	r3, r2
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	68b9      	ldr	r1, [r7, #8]
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f000 f805 	bl	800cd58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3730      	adds	r7, #48	; 0x30
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	607a      	str	r2, [r7, #4]
 800cd64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d103      	bne.n	800cd74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cd6c:	69bb      	ldr	r3, [r7, #24]
 800cd6e:	69ba      	ldr	r2, [r7, #24]
 800cd70:	601a      	str	r2, [r3, #0]
 800cd72:	e002      	b.n	800cd7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cd7a:	69bb      	ldr	r3, [r7, #24]
 800cd7c:	68fa      	ldr	r2, [r7, #12]
 800cd7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cd80:	69bb      	ldr	r3, [r7, #24]
 800cd82:	68ba      	ldr	r2, [r7, #8]
 800cd84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cd86:	2101      	movs	r1, #1
 800cd88:	69b8      	ldr	r0, [r7, #24]
 800cd8a:	f7ff ff05 	bl	800cb98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cd8e:	69bb      	ldr	r3, [r7, #24]
 800cd90:	78fa      	ldrb	r2, [r7, #3]
 800cd92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cd96:	bf00      	nop
 800cd98:	3710      	adds	r7, #16
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
	...

0800cda0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b08e      	sub	sp, #56	; 0x38
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	607a      	str	r2, [r7, #4]
 800cdac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d10a      	bne.n	800cdd2 <xQueueGenericSend+0x32>
	__asm volatile
 800cdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc0:	f383 8811 	msr	BASEPRI, r3
 800cdc4:	f3bf 8f6f 	isb	sy
 800cdc8:	f3bf 8f4f 	dsb	sy
 800cdcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cdce:	bf00      	nop
 800cdd0:	e7fe      	b.n	800cdd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d103      	bne.n	800cde0 <xQueueGenericSend+0x40>
 800cdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d101      	bne.n	800cde4 <xQueueGenericSend+0x44>
 800cde0:	2301      	movs	r3, #1
 800cde2:	e000      	b.n	800cde6 <xQueueGenericSend+0x46>
 800cde4:	2300      	movs	r3, #0
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d10a      	bne.n	800ce00 <xQueueGenericSend+0x60>
	__asm volatile
 800cdea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdee:	f383 8811 	msr	BASEPRI, r3
 800cdf2:	f3bf 8f6f 	isb	sy
 800cdf6:	f3bf 8f4f 	dsb	sy
 800cdfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cdfc:	bf00      	nop
 800cdfe:	e7fe      	b.n	800cdfe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	2b02      	cmp	r3, #2
 800ce04:	d103      	bne.n	800ce0e <xQueueGenericSend+0x6e>
 800ce06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	d101      	bne.n	800ce12 <xQueueGenericSend+0x72>
 800ce0e:	2301      	movs	r3, #1
 800ce10:	e000      	b.n	800ce14 <xQueueGenericSend+0x74>
 800ce12:	2300      	movs	r3, #0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d10a      	bne.n	800ce2e <xQueueGenericSend+0x8e>
	__asm volatile
 800ce18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce1c:	f383 8811 	msr	BASEPRI, r3
 800ce20:	f3bf 8f6f 	isb	sy
 800ce24:	f3bf 8f4f 	dsb	sy
 800ce28:	623b      	str	r3, [r7, #32]
}
 800ce2a:	bf00      	nop
 800ce2c:	e7fe      	b.n	800ce2c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce2e:	f001 f9e7 	bl	800e200 <xTaskGetSchedulerState>
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d102      	bne.n	800ce3e <xQueueGenericSend+0x9e>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d101      	bne.n	800ce42 <xQueueGenericSend+0xa2>
 800ce3e:	2301      	movs	r3, #1
 800ce40:	e000      	b.n	800ce44 <xQueueGenericSend+0xa4>
 800ce42:	2300      	movs	r3, #0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d10a      	bne.n	800ce5e <xQueueGenericSend+0xbe>
	__asm volatile
 800ce48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce4c:	f383 8811 	msr	BASEPRI, r3
 800ce50:	f3bf 8f6f 	isb	sy
 800ce54:	f3bf 8f4f 	dsb	sy
 800ce58:	61fb      	str	r3, [r7, #28]
}
 800ce5a:	bf00      	nop
 800ce5c:	e7fe      	b.n	800ce5c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce5e:	f7ff fd79 	bl	800c954 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d302      	bcc.n	800ce74 <xQueueGenericSend+0xd4>
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	2b02      	cmp	r3, #2
 800ce72:	d129      	bne.n	800cec8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce74:	683a      	ldr	r2, [r7, #0]
 800ce76:	68b9      	ldr	r1, [r7, #8]
 800ce78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce7a:	f000 fa0b 	bl	800d294 <prvCopyDataToQueue>
 800ce7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d010      	beq.n	800ceaa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce8a:	3324      	adds	r3, #36	; 0x24
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f000 fff5 	bl	800de7c <xTaskRemoveFromEventList>
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d013      	beq.n	800cec0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ce98:	4b3f      	ldr	r3, [pc, #252]	; (800cf98 <xQueueGenericSend+0x1f8>)
 800ce9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce9e:	601a      	str	r2, [r3, #0]
 800cea0:	f3bf 8f4f 	dsb	sy
 800cea4:	f3bf 8f6f 	isb	sy
 800cea8:	e00a      	b.n	800cec0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ceaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d007      	beq.n	800cec0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ceb0:	4b39      	ldr	r3, [pc, #228]	; (800cf98 <xQueueGenericSend+0x1f8>)
 800ceb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceb6:	601a      	str	r2, [r3, #0]
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cec0:	f7ff fd78 	bl	800c9b4 <vPortExitCritical>
				return pdPASS;
 800cec4:	2301      	movs	r3, #1
 800cec6:	e063      	b.n	800cf90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d103      	bne.n	800ced6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cece:	f7ff fd71 	bl	800c9b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ced2:	2300      	movs	r3, #0
 800ced4:	e05c      	b.n	800cf90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ced6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d106      	bne.n	800ceea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cedc:	f107 0314 	add.w	r3, r7, #20
 800cee0:	4618      	mov	r0, r3
 800cee2:	f001 f82f 	bl	800df44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cee6:	2301      	movs	r3, #1
 800cee8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ceea:	f7ff fd63 	bl	800c9b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ceee:	f000 fd9b 	bl	800da28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cef2:	f7ff fd2f 	bl	800c954 <vPortEnterCritical>
 800cef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cefc:	b25b      	sxtb	r3, r3
 800cefe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf02:	d103      	bne.n	800cf0c <xQueueGenericSend+0x16c>
 800cf04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf06:	2200      	movs	r2, #0
 800cf08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf12:	b25b      	sxtb	r3, r3
 800cf14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf18:	d103      	bne.n	800cf22 <xQueueGenericSend+0x182>
 800cf1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf22:	f7ff fd47 	bl	800c9b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf26:	1d3a      	adds	r2, r7, #4
 800cf28:	f107 0314 	add.w	r3, r7, #20
 800cf2c:	4611      	mov	r1, r2
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f001 f81e 	bl	800df70 <xTaskCheckForTimeOut>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d124      	bne.n	800cf84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cf3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf3c:	f000 faa2 	bl	800d484 <prvIsQueueFull>
 800cf40:	4603      	mov	r3, r0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d018      	beq.n	800cf78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf48:	3310      	adds	r3, #16
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	4611      	mov	r1, r2
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f000 ff44 	bl	800dddc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cf54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf56:	f000 fa2d 	bl	800d3b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cf5a:	f000 fd73 	bl	800da44 <xTaskResumeAll>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	f47f af7c 	bne.w	800ce5e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cf66:	4b0c      	ldr	r3, [pc, #48]	; (800cf98 <xQueueGenericSend+0x1f8>)
 800cf68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf6c:	601a      	str	r2, [r3, #0]
 800cf6e:	f3bf 8f4f 	dsb	sy
 800cf72:	f3bf 8f6f 	isb	sy
 800cf76:	e772      	b.n	800ce5e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cf78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf7a:	f000 fa1b 	bl	800d3b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf7e:	f000 fd61 	bl	800da44 <xTaskResumeAll>
 800cf82:	e76c      	b.n	800ce5e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cf84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf86:	f000 fa15 	bl	800d3b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf8a:	f000 fd5b 	bl	800da44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cf8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3738      	adds	r7, #56	; 0x38
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}
 800cf98:	e000ed04 	.word	0xe000ed04

0800cf9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b090      	sub	sp, #64	; 0x40
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	60f8      	str	r0, [r7, #12]
 800cfa4:	60b9      	str	r1, [r7, #8]
 800cfa6:	607a      	str	r2, [r7, #4]
 800cfa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cfae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d10a      	bne.n	800cfca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb8:	f383 8811 	msr	BASEPRI, r3
 800cfbc:	f3bf 8f6f 	isb	sy
 800cfc0:	f3bf 8f4f 	dsb	sy
 800cfc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cfc6:	bf00      	nop
 800cfc8:	e7fe      	b.n	800cfc8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d103      	bne.n	800cfd8 <xQueueGenericSendFromISR+0x3c>
 800cfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d101      	bne.n	800cfdc <xQueueGenericSendFromISR+0x40>
 800cfd8:	2301      	movs	r3, #1
 800cfda:	e000      	b.n	800cfde <xQueueGenericSendFromISR+0x42>
 800cfdc:	2300      	movs	r3, #0
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d10a      	bne.n	800cff8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe6:	f383 8811 	msr	BASEPRI, r3
 800cfea:	f3bf 8f6f 	isb	sy
 800cfee:	f3bf 8f4f 	dsb	sy
 800cff2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cff4:	bf00      	nop
 800cff6:	e7fe      	b.n	800cff6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	2b02      	cmp	r3, #2
 800cffc:	d103      	bne.n	800d006 <xQueueGenericSendFromISR+0x6a>
 800cffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d002:	2b01      	cmp	r3, #1
 800d004:	d101      	bne.n	800d00a <xQueueGenericSendFromISR+0x6e>
 800d006:	2301      	movs	r3, #1
 800d008:	e000      	b.n	800d00c <xQueueGenericSendFromISR+0x70>
 800d00a:	2300      	movs	r3, #0
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d10a      	bne.n	800d026 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d014:	f383 8811 	msr	BASEPRI, r3
 800d018:	f3bf 8f6f 	isb	sy
 800d01c:	f3bf 8f4f 	dsb	sy
 800d020:	623b      	str	r3, [r7, #32]
}
 800d022:	bf00      	nop
 800d024:	e7fe      	b.n	800d024 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d026:	f7ff fd77 	bl	800cb18 <vPortValidateInterruptPriority>
	__asm volatile
 800d02a:	f3ef 8211 	mrs	r2, BASEPRI
 800d02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d032:	f383 8811 	msr	BASEPRI, r3
 800d036:	f3bf 8f6f 	isb	sy
 800d03a:	f3bf 8f4f 	dsb	sy
 800d03e:	61fa      	str	r2, [r7, #28]
 800d040:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d042:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d044:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d04e:	429a      	cmp	r2, r3
 800d050:	d302      	bcc.n	800d058 <xQueueGenericSendFromISR+0xbc>
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	2b02      	cmp	r3, #2
 800d056:	d12f      	bne.n	800d0b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d05a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d066:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d068:	683a      	ldr	r2, [r7, #0]
 800d06a:	68b9      	ldr	r1, [r7, #8]
 800d06c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d06e:	f000 f911 	bl	800d294 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d072:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d07a:	d112      	bne.n	800d0a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d080:	2b00      	cmp	r3, #0
 800d082:	d016      	beq.n	800d0b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d086:	3324      	adds	r3, #36	; 0x24
 800d088:	4618      	mov	r0, r3
 800d08a:	f000 fef7 	bl	800de7c <xTaskRemoveFromEventList>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00e      	beq.n	800d0b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d00b      	beq.n	800d0b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2201      	movs	r2, #1
 800d09e:	601a      	str	r2, [r3, #0]
 800d0a0:	e007      	b.n	800d0b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d0a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	b25a      	sxtb	r2, r3
 800d0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d0b6:	e001      	b.n	800d0bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0be:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	f383 8811 	msr	BASEPRI, r3
}
 800d0c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3740      	adds	r7, #64	; 0x40
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
	...

0800d0d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b08c      	sub	sp, #48	; 0x30
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	60b9      	str	r1, [r7, #8]
 800d0de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d10a      	bne.n	800d104 <xQueueReceive+0x30>
	__asm volatile
 800d0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f2:	f383 8811 	msr	BASEPRI, r3
 800d0f6:	f3bf 8f6f 	isb	sy
 800d0fa:	f3bf 8f4f 	dsb	sy
 800d0fe:	623b      	str	r3, [r7, #32]
}
 800d100:	bf00      	nop
 800d102:	e7fe      	b.n	800d102 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d103      	bne.n	800d112 <xQueueReceive+0x3e>
 800d10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d101      	bne.n	800d116 <xQueueReceive+0x42>
 800d112:	2301      	movs	r3, #1
 800d114:	e000      	b.n	800d118 <xQueueReceive+0x44>
 800d116:	2300      	movs	r3, #0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d10a      	bne.n	800d132 <xQueueReceive+0x5e>
	__asm volatile
 800d11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d120:	f383 8811 	msr	BASEPRI, r3
 800d124:	f3bf 8f6f 	isb	sy
 800d128:	f3bf 8f4f 	dsb	sy
 800d12c:	61fb      	str	r3, [r7, #28]
}
 800d12e:	bf00      	nop
 800d130:	e7fe      	b.n	800d130 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d132:	f001 f865 	bl	800e200 <xTaskGetSchedulerState>
 800d136:	4603      	mov	r3, r0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d102      	bne.n	800d142 <xQueueReceive+0x6e>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d101      	bne.n	800d146 <xQueueReceive+0x72>
 800d142:	2301      	movs	r3, #1
 800d144:	e000      	b.n	800d148 <xQueueReceive+0x74>
 800d146:	2300      	movs	r3, #0
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d10a      	bne.n	800d162 <xQueueReceive+0x8e>
	__asm volatile
 800d14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d150:	f383 8811 	msr	BASEPRI, r3
 800d154:	f3bf 8f6f 	isb	sy
 800d158:	f3bf 8f4f 	dsb	sy
 800d15c:	61bb      	str	r3, [r7, #24]
}
 800d15e:	bf00      	nop
 800d160:	e7fe      	b.n	800d160 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d162:	f7ff fbf7 	bl	800c954 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d16a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d01f      	beq.n	800d1b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d172:	68b9      	ldr	r1, [r7, #8]
 800d174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d176:	f000 f8f7 	bl	800d368 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17c:	1e5a      	subs	r2, r3, #1
 800d17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d180:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d00f      	beq.n	800d1aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18c:	3310      	adds	r3, #16
 800d18e:	4618      	mov	r0, r3
 800d190:	f000 fe74 	bl	800de7c <xTaskRemoveFromEventList>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d007      	beq.n	800d1aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d19a:	4b3d      	ldr	r3, [pc, #244]	; (800d290 <xQueueReceive+0x1bc>)
 800d19c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1a0:	601a      	str	r2, [r3, #0]
 800d1a2:	f3bf 8f4f 	dsb	sy
 800d1a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d1aa:	f7ff fc03 	bl	800c9b4 <vPortExitCritical>
				return pdPASS;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	e069      	b.n	800d286 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d103      	bne.n	800d1c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d1b8:	f7ff fbfc 	bl	800c9b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	e062      	b.n	800d286 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d106      	bne.n	800d1d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1c6:	f107 0310 	add.w	r3, r7, #16
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f000 feba 	bl	800df44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1d4:	f7ff fbee 	bl	800c9b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1d8:	f000 fc26 	bl	800da28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1dc:	f7ff fbba 	bl	800c954 <vPortEnterCritical>
 800d1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1e6:	b25b      	sxtb	r3, r3
 800d1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ec:	d103      	bne.n	800d1f6 <xQueueReceive+0x122>
 800d1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1fc:	b25b      	sxtb	r3, r3
 800d1fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d202:	d103      	bne.n	800d20c <xQueueReceive+0x138>
 800d204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d206:	2200      	movs	r2, #0
 800d208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d20c:	f7ff fbd2 	bl	800c9b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d210:	1d3a      	adds	r2, r7, #4
 800d212:	f107 0310 	add.w	r3, r7, #16
 800d216:	4611      	mov	r1, r2
 800d218:	4618      	mov	r0, r3
 800d21a:	f000 fea9 	bl	800df70 <xTaskCheckForTimeOut>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b00      	cmp	r3, #0
 800d222:	d123      	bne.n	800d26c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d226:	f000 f917 	bl	800d458 <prvIsQueueEmpty>
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d017      	beq.n	800d260 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d232:	3324      	adds	r3, #36	; 0x24
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	4611      	mov	r1, r2
 800d238:	4618      	mov	r0, r3
 800d23a:	f000 fdcf 	bl	800dddc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d23e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d240:	f000 f8b8 	bl	800d3b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d244:	f000 fbfe 	bl	800da44 <xTaskResumeAll>
 800d248:	4603      	mov	r3, r0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d189      	bne.n	800d162 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d24e:	4b10      	ldr	r3, [pc, #64]	; (800d290 <xQueueReceive+0x1bc>)
 800d250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d254:	601a      	str	r2, [r3, #0]
 800d256:	f3bf 8f4f 	dsb	sy
 800d25a:	f3bf 8f6f 	isb	sy
 800d25e:	e780      	b.n	800d162 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d262:	f000 f8a7 	bl	800d3b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d266:	f000 fbed 	bl	800da44 <xTaskResumeAll>
 800d26a:	e77a      	b.n	800d162 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d26c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d26e:	f000 f8a1 	bl	800d3b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d272:	f000 fbe7 	bl	800da44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d278:	f000 f8ee 	bl	800d458 <prvIsQueueEmpty>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b00      	cmp	r3, #0
 800d280:	f43f af6f 	beq.w	800d162 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d284:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d286:	4618      	mov	r0, r3
 800d288:	3730      	adds	r7, #48	; 0x30
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	e000ed04 	.word	0xe000ed04

0800d294 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b086      	sub	sp, #24
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d10d      	bne.n	800d2ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d14d      	bne.n	800d356 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f000 ffbc 	bl	800e23c <xTaskPriorityDisinherit>
 800d2c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	609a      	str	r2, [r3, #8]
 800d2cc:	e043      	b.n	800d356 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d119      	bne.n	800d308 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	6858      	ldr	r0, [r3, #4]
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2dc:	461a      	mov	r2, r3
 800d2de:	68b9      	ldr	r1, [r7, #8]
 800d2e0:	f001 fbe0 	bl	800eaa4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	685a      	ldr	r2, [r3, #4]
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ec:	441a      	add	r2, r3
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	685a      	ldr	r2, [r3, #4]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	689b      	ldr	r3, [r3, #8]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d32b      	bcc.n	800d356 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681a      	ldr	r2, [r3, #0]
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	605a      	str	r2, [r3, #4]
 800d306:	e026      	b.n	800d356 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	68d8      	ldr	r0, [r3, #12]
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d310:	461a      	mov	r2, r3
 800d312:	68b9      	ldr	r1, [r7, #8]
 800d314:	f001 fbc6 	bl	800eaa4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	68da      	ldr	r2, [r3, #12]
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d320:	425b      	negs	r3, r3
 800d322:	441a      	add	r2, r3
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	68da      	ldr	r2, [r3, #12]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	429a      	cmp	r2, r3
 800d332:	d207      	bcs.n	800d344 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	689a      	ldr	r2, [r3, #8]
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d33c:	425b      	negs	r3, r3
 800d33e:	441a      	add	r2, r3
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2b02      	cmp	r3, #2
 800d348:	d105      	bne.n	800d356 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d002      	beq.n	800d356 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	3b01      	subs	r3, #1
 800d354:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	1c5a      	adds	r2, r3, #1
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d35e:	697b      	ldr	r3, [r7, #20]
}
 800d360:	4618      	mov	r0, r3
 800d362:	3718      	adds	r7, #24
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}

0800d368 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b082      	sub	sp, #8
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d376:	2b00      	cmp	r3, #0
 800d378:	d018      	beq.n	800d3ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	68da      	ldr	r2, [r3, #12]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d382:	441a      	add	r2, r3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	68da      	ldr	r2, [r3, #12]
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	689b      	ldr	r3, [r3, #8]
 800d390:	429a      	cmp	r2, r3
 800d392:	d303      	bcc.n	800d39c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	68d9      	ldr	r1, [r3, #12]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	6838      	ldr	r0, [r7, #0]
 800d3a8:	f001 fb7c 	bl	800eaa4 <memcpy>
	}
}
 800d3ac:	bf00      	nop
 800d3ae:	3708      	adds	r7, #8
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d3bc:	f7ff faca 	bl	800c954 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3c8:	e011      	b.n	800d3ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d012      	beq.n	800d3f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	3324      	adds	r3, #36	; 0x24
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f000 fd50 	bl	800de7c <xTaskRemoveFromEventList>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d001      	beq.n	800d3e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d3e2:	f000 fe27 	bl	800e034 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d3e6:	7bfb      	ldrb	r3, [r7, #15]
 800d3e8:	3b01      	subs	r3, #1
 800d3ea:	b2db      	uxtb	r3, r3
 800d3ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	dce9      	bgt.n	800d3ca <prvUnlockQueue+0x16>
 800d3f6:	e000      	b.n	800d3fa <prvUnlockQueue+0x46>
					break;
 800d3f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	22ff      	movs	r2, #255	; 0xff
 800d3fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d402:	f7ff fad7 	bl	800c9b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d406:	f7ff faa5 	bl	800c954 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d410:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d412:	e011      	b.n	800d438 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	691b      	ldr	r3, [r3, #16]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d012      	beq.n	800d442 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	3310      	adds	r3, #16
 800d420:	4618      	mov	r0, r3
 800d422:	f000 fd2b 	bl	800de7c <xTaskRemoveFromEventList>
 800d426:	4603      	mov	r3, r0
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d001      	beq.n	800d430 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d42c:	f000 fe02 	bl	800e034 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d430:	7bbb      	ldrb	r3, [r7, #14]
 800d432:	3b01      	subs	r3, #1
 800d434:	b2db      	uxtb	r3, r3
 800d436:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d438:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	dce9      	bgt.n	800d414 <prvUnlockQueue+0x60>
 800d440:	e000      	b.n	800d444 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d442:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	22ff      	movs	r2, #255	; 0xff
 800d448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d44c:	f7ff fab2 	bl	800c9b4 <vPortExitCritical>
}
 800d450:	bf00      	nop
 800d452:	3710      	adds	r7, #16
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b084      	sub	sp, #16
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d460:	f7ff fa78 	bl	800c954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d102      	bne.n	800d472 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d46c:	2301      	movs	r3, #1
 800d46e:	60fb      	str	r3, [r7, #12]
 800d470:	e001      	b.n	800d476 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d472:	2300      	movs	r3, #0
 800d474:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d476:	f7ff fa9d 	bl	800c9b4 <vPortExitCritical>

	return xReturn;
 800d47a:	68fb      	ldr	r3, [r7, #12]
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3710      	adds	r7, #16
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b084      	sub	sp, #16
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d48c:	f7ff fa62 	bl	800c954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d498:	429a      	cmp	r2, r3
 800d49a:	d102      	bne.n	800d4a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d49c:	2301      	movs	r3, #1
 800d49e:	60fb      	str	r3, [r7, #12]
 800d4a0:	e001      	b.n	800d4a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d4a6:	f7ff fa85 	bl	800c9b4 <vPortExitCritical>

	return xReturn;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3710      	adds	r7, #16
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b085      	sub	sp, #20
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d4be:	2300      	movs	r3, #0
 800d4c0:	60fb      	str	r3, [r7, #12]
 800d4c2:	e014      	b.n	800d4ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d4c4:	4a0f      	ldr	r2, [pc, #60]	; (800d504 <vQueueAddToRegistry+0x50>)
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d10b      	bne.n	800d4e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d4d0:	490c      	ldr	r1, [pc, #48]	; (800d504 <vQueueAddToRegistry+0x50>)
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	683a      	ldr	r2, [r7, #0]
 800d4d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d4da:	4a0a      	ldr	r2, [pc, #40]	; (800d504 <vQueueAddToRegistry+0x50>)
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	00db      	lsls	r3, r3, #3
 800d4e0:	4413      	add	r3, r2
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d4e6:	e006      	b.n	800d4f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	60fb      	str	r3, [r7, #12]
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2b07      	cmp	r3, #7
 800d4f2:	d9e7      	bls.n	800d4c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d4f4:	bf00      	nop
 800d4f6:	bf00      	nop
 800d4f8:	3714      	adds	r7, #20
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr
 800d502:	bf00      	nop
 800d504:	20004cc8 	.word	0x20004cc8

0800d508 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b086      	sub	sp, #24
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d518:	f7ff fa1c 	bl	800c954 <vPortEnterCritical>
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d522:	b25b      	sxtb	r3, r3
 800d524:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d528:	d103      	bne.n	800d532 <vQueueWaitForMessageRestricted+0x2a>
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	2200      	movs	r2, #0
 800d52e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d538:	b25b      	sxtb	r3, r3
 800d53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d53e:	d103      	bne.n	800d548 <vQueueWaitForMessageRestricted+0x40>
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	2200      	movs	r2, #0
 800d544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d548:	f7ff fa34 	bl	800c9b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d550:	2b00      	cmp	r3, #0
 800d552:	d106      	bne.n	800d562 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	3324      	adds	r3, #36	; 0x24
 800d558:	687a      	ldr	r2, [r7, #4]
 800d55a:	68b9      	ldr	r1, [r7, #8]
 800d55c:	4618      	mov	r0, r3
 800d55e:	f000 fc61 	bl	800de24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d562:	6978      	ldr	r0, [r7, #20]
 800d564:	f7ff ff26 	bl	800d3b4 <prvUnlockQueue>
	}
 800d568:	bf00      	nop
 800d56a:	3718      	adds	r7, #24
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d570:	b580      	push	{r7, lr}
 800d572:	b08e      	sub	sp, #56	; 0x38
 800d574:	af04      	add	r7, sp, #16
 800d576:	60f8      	str	r0, [r7, #12]
 800d578:	60b9      	str	r1, [r7, #8]
 800d57a:	607a      	str	r2, [r7, #4]
 800d57c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d580:	2b00      	cmp	r3, #0
 800d582:	d10a      	bne.n	800d59a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d588:	f383 8811 	msr	BASEPRI, r3
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	623b      	str	r3, [r7, #32]
}
 800d596:	bf00      	nop
 800d598:	e7fe      	b.n	800d598 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d10a      	bne.n	800d5b6 <xTaskCreateStatic+0x46>
	__asm volatile
 800d5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a4:	f383 8811 	msr	BASEPRI, r3
 800d5a8:	f3bf 8f6f 	isb	sy
 800d5ac:	f3bf 8f4f 	dsb	sy
 800d5b0:	61fb      	str	r3, [r7, #28]
}
 800d5b2:	bf00      	nop
 800d5b4:	e7fe      	b.n	800d5b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d5b6:	23bc      	movs	r3, #188	; 0xbc
 800d5b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	2bbc      	cmp	r3, #188	; 0xbc
 800d5be:	d00a      	beq.n	800d5d6 <xTaskCreateStatic+0x66>
	__asm volatile
 800d5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c4:	f383 8811 	msr	BASEPRI, r3
 800d5c8:	f3bf 8f6f 	isb	sy
 800d5cc:	f3bf 8f4f 	dsb	sy
 800d5d0:	61bb      	str	r3, [r7, #24]
}
 800d5d2:	bf00      	nop
 800d5d4:	e7fe      	b.n	800d5d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d5d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d01e      	beq.n	800d61c <xTaskCreateStatic+0xac>
 800d5de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d01b      	beq.n	800d61c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f0:	2202      	movs	r2, #2
 800d5f2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	9303      	str	r3, [sp, #12]
 800d5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fc:	9302      	str	r3, [sp, #8]
 800d5fe:	f107 0314 	add.w	r3, r7, #20
 800d602:	9301      	str	r3, [sp, #4]
 800d604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d606:	9300      	str	r3, [sp, #0]
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	68b9      	ldr	r1, [r7, #8]
 800d60e:	68f8      	ldr	r0, [r7, #12]
 800d610:	f000 f850 	bl	800d6b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d614:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d616:	f000 f8f3 	bl	800d800 <prvAddNewTaskToReadyList>
 800d61a:	e001      	b.n	800d620 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d61c:	2300      	movs	r3, #0
 800d61e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d620:	697b      	ldr	r3, [r7, #20]
	}
 800d622:	4618      	mov	r0, r3
 800d624:	3728      	adds	r7, #40	; 0x28
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}

0800d62a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d62a:	b580      	push	{r7, lr}
 800d62c:	b08c      	sub	sp, #48	; 0x30
 800d62e:	af04      	add	r7, sp, #16
 800d630:	60f8      	str	r0, [r7, #12]
 800d632:	60b9      	str	r1, [r7, #8]
 800d634:	603b      	str	r3, [r7, #0]
 800d636:	4613      	mov	r3, r2
 800d638:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d63a:	88fb      	ldrh	r3, [r7, #6]
 800d63c:	009b      	lsls	r3, r3, #2
 800d63e:	4618      	mov	r0, r3
 800d640:	f7fe fdba 	bl	800c1b8 <pvPortMalloc>
 800d644:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d00e      	beq.n	800d66a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d64c:	20bc      	movs	r0, #188	; 0xbc
 800d64e:	f7fe fdb3 	bl	800c1b8 <pvPortMalloc>
 800d652:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d003      	beq.n	800d662 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	697a      	ldr	r2, [r7, #20]
 800d65e:	631a      	str	r2, [r3, #48]	; 0x30
 800d660:	e005      	b.n	800d66e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d662:	6978      	ldr	r0, [r7, #20]
 800d664:	f7fe fe74 	bl	800c350 <vPortFree>
 800d668:	e001      	b.n	800d66e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d66a:	2300      	movs	r3, #0
 800d66c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d66e:	69fb      	ldr	r3, [r7, #28]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d017      	beq.n	800d6a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d674:	69fb      	ldr	r3, [r7, #28]
 800d676:	2200      	movs	r2, #0
 800d678:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d67c:	88fa      	ldrh	r2, [r7, #6]
 800d67e:	2300      	movs	r3, #0
 800d680:	9303      	str	r3, [sp, #12]
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	9302      	str	r3, [sp, #8]
 800d686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d688:	9301      	str	r3, [sp, #4]
 800d68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d68c:	9300      	str	r3, [sp, #0]
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	68b9      	ldr	r1, [r7, #8]
 800d692:	68f8      	ldr	r0, [r7, #12]
 800d694:	f000 f80e 	bl	800d6b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d698:	69f8      	ldr	r0, [r7, #28]
 800d69a:	f000 f8b1 	bl	800d800 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	61bb      	str	r3, [r7, #24]
 800d6a2:	e002      	b.n	800d6aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d6aa:	69bb      	ldr	r3, [r7, #24]
	}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3720      	adds	r7, #32
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b088      	sub	sp, #32
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	60f8      	str	r0, [r7, #12]
 800d6bc:	60b9      	str	r1, [r7, #8]
 800d6be:	607a      	str	r2, [r7, #4]
 800d6c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	21a5      	movs	r1, #165	; 0xa5
 800d6ce:	f001 f9f7 	bl	800eac0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d6dc:	3b01      	subs	r3, #1
 800d6de:	009b      	lsls	r3, r3, #2
 800d6e0:	4413      	add	r3, r2
 800d6e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d6e4:	69bb      	ldr	r3, [r7, #24]
 800d6e6:	f023 0307 	bic.w	r3, r3, #7
 800d6ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d6ec:	69bb      	ldr	r3, [r7, #24]
 800d6ee:	f003 0307 	and.w	r3, r3, #7
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d00a      	beq.n	800d70c <prvInitialiseNewTask+0x58>
	__asm volatile
 800d6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fa:	f383 8811 	msr	BASEPRI, r3
 800d6fe:	f3bf 8f6f 	isb	sy
 800d702:	f3bf 8f4f 	dsb	sy
 800d706:	617b      	str	r3, [r7, #20]
}
 800d708:	bf00      	nop
 800d70a:	e7fe      	b.n	800d70a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d01f      	beq.n	800d752 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d712:	2300      	movs	r3, #0
 800d714:	61fb      	str	r3, [r7, #28]
 800d716:	e012      	b.n	800d73e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d718:	68ba      	ldr	r2, [r7, #8]
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	4413      	add	r3, r2
 800d71e:	7819      	ldrb	r1, [r3, #0]
 800d720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	4413      	add	r3, r2
 800d726:	3334      	adds	r3, #52	; 0x34
 800d728:	460a      	mov	r2, r1
 800d72a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d72c:	68ba      	ldr	r2, [r7, #8]
 800d72e:	69fb      	ldr	r3, [r7, #28]
 800d730:	4413      	add	r3, r2
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d006      	beq.n	800d746 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d738:	69fb      	ldr	r3, [r7, #28]
 800d73a:	3301      	adds	r3, #1
 800d73c:	61fb      	str	r3, [r7, #28]
 800d73e:	69fb      	ldr	r3, [r7, #28]
 800d740:	2b0f      	cmp	r3, #15
 800d742:	d9e9      	bls.n	800d718 <prvInitialiseNewTask+0x64>
 800d744:	e000      	b.n	800d748 <prvInitialiseNewTask+0x94>
			{
				break;
 800d746:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74a:	2200      	movs	r2, #0
 800d74c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d750:	e003      	b.n	800d75a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d754:	2200      	movs	r2, #0
 800d756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75c:	2b37      	cmp	r3, #55	; 0x37
 800d75e:	d901      	bls.n	800d764 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d760:	2337      	movs	r3, #55	; 0x37
 800d762:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d768:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d76e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d772:	2200      	movs	r2, #0
 800d774:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d778:	3304      	adds	r3, #4
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7fe ff26 	bl	800c5cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d782:	3318      	adds	r3, #24
 800d784:	4618      	mov	r0, r3
 800d786:	f7fe ff21 	bl	800c5cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d78e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d792:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d798:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d79e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b2:	3354      	adds	r3, #84	; 0x54
 800d7b4:	2260      	movs	r2, #96	; 0x60
 800d7b6:	2100      	movs	r1, #0
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f001 f981 	bl	800eac0 <memset>
 800d7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c0:	4a0c      	ldr	r2, [pc, #48]	; (800d7f4 <prvInitialiseNewTask+0x140>)
 800d7c2:	659a      	str	r2, [r3, #88]	; 0x58
 800d7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c6:	4a0c      	ldr	r2, [pc, #48]	; (800d7f8 <prvInitialiseNewTask+0x144>)
 800d7c8:	65da      	str	r2, [r3, #92]	; 0x5c
 800d7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7cc:	4a0b      	ldr	r2, [pc, #44]	; (800d7fc <prvInitialiseNewTask+0x148>)
 800d7ce:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d7d0:	683a      	ldr	r2, [r7, #0]
 800d7d2:	68f9      	ldr	r1, [r7, #12]
 800d7d4:	69b8      	ldr	r0, [r7, #24]
 800d7d6:	f7fe ff8d 	bl	800c6f4 <pxPortInitialiseStack>
 800d7da:	4602      	mov	r2, r0
 800d7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d002      	beq.n	800d7ec <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d7ec:	bf00      	nop
 800d7ee:	3720      	adds	r7, #32
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}
 800d7f4:	0800f404 	.word	0x0800f404
 800d7f8:	0800f424 	.word	0x0800f424
 800d7fc:	0800f3e4 	.word	0x0800f3e4

0800d800 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d808:	f7ff f8a4 	bl	800c954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d80c:	4b2d      	ldr	r3, [pc, #180]	; (800d8c4 <prvAddNewTaskToReadyList+0xc4>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	3301      	adds	r3, #1
 800d812:	4a2c      	ldr	r2, [pc, #176]	; (800d8c4 <prvAddNewTaskToReadyList+0xc4>)
 800d814:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d816:	4b2c      	ldr	r3, [pc, #176]	; (800d8c8 <prvAddNewTaskToReadyList+0xc8>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d109      	bne.n	800d832 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d81e:	4a2a      	ldr	r2, [pc, #168]	; (800d8c8 <prvAddNewTaskToReadyList+0xc8>)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d824:	4b27      	ldr	r3, [pc, #156]	; (800d8c4 <prvAddNewTaskToReadyList+0xc4>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	2b01      	cmp	r3, #1
 800d82a:	d110      	bne.n	800d84e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d82c:	f000 fc26 	bl	800e07c <prvInitialiseTaskLists>
 800d830:	e00d      	b.n	800d84e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d832:	4b26      	ldr	r3, [pc, #152]	; (800d8cc <prvAddNewTaskToReadyList+0xcc>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d109      	bne.n	800d84e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d83a:	4b23      	ldr	r3, [pc, #140]	; (800d8c8 <prvAddNewTaskToReadyList+0xc8>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d844:	429a      	cmp	r2, r3
 800d846:	d802      	bhi.n	800d84e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d848:	4a1f      	ldr	r2, [pc, #124]	; (800d8c8 <prvAddNewTaskToReadyList+0xc8>)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d84e:	4b20      	ldr	r3, [pc, #128]	; (800d8d0 <prvAddNewTaskToReadyList+0xd0>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	3301      	adds	r3, #1
 800d854:	4a1e      	ldr	r2, [pc, #120]	; (800d8d0 <prvAddNewTaskToReadyList+0xd0>)
 800d856:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d858:	4b1d      	ldr	r3, [pc, #116]	; (800d8d0 <prvAddNewTaskToReadyList+0xd0>)
 800d85a:	681a      	ldr	r2, [r3, #0]
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d864:	4b1b      	ldr	r3, [pc, #108]	; (800d8d4 <prvAddNewTaskToReadyList+0xd4>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d903      	bls.n	800d874 <prvAddNewTaskToReadyList+0x74>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d870:	4a18      	ldr	r2, [pc, #96]	; (800d8d4 <prvAddNewTaskToReadyList+0xd4>)
 800d872:	6013      	str	r3, [r2, #0]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d878:	4613      	mov	r3, r2
 800d87a:	009b      	lsls	r3, r3, #2
 800d87c:	4413      	add	r3, r2
 800d87e:	009b      	lsls	r3, r3, #2
 800d880:	4a15      	ldr	r2, [pc, #84]	; (800d8d8 <prvAddNewTaskToReadyList+0xd8>)
 800d882:	441a      	add	r2, r3
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	3304      	adds	r3, #4
 800d888:	4619      	mov	r1, r3
 800d88a:	4610      	mov	r0, r2
 800d88c:	f7fe feab 	bl	800c5e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d890:	f7ff f890 	bl	800c9b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d894:	4b0d      	ldr	r3, [pc, #52]	; (800d8cc <prvAddNewTaskToReadyList+0xcc>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d00e      	beq.n	800d8ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d89c:	4b0a      	ldr	r3, [pc, #40]	; (800d8c8 <prvAddNewTaskToReadyList+0xc8>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d207      	bcs.n	800d8ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d8aa:	4b0c      	ldr	r3, [pc, #48]	; (800d8dc <prvAddNewTaskToReadyList+0xdc>)
 800d8ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8b0:	601a      	str	r2, [r3, #0]
 800d8b2:	f3bf 8f4f 	dsb	sy
 800d8b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8ba:	bf00      	nop
 800d8bc:	3708      	adds	r7, #8
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	200051dc 	.word	0x200051dc
 800d8c8:	20004d08 	.word	0x20004d08
 800d8cc:	200051e8 	.word	0x200051e8
 800d8d0:	200051f8 	.word	0x200051f8
 800d8d4:	200051e4 	.word	0x200051e4
 800d8d8:	20004d0c 	.word	0x20004d0c
 800d8dc:	e000ed04 	.word	0xe000ed04

0800d8e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d017      	beq.n	800d922 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d8f2:	4b13      	ldr	r3, [pc, #76]	; (800d940 <vTaskDelay+0x60>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d00a      	beq.n	800d910 <vTaskDelay+0x30>
	__asm volatile
 800d8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8fe:	f383 8811 	msr	BASEPRI, r3
 800d902:	f3bf 8f6f 	isb	sy
 800d906:	f3bf 8f4f 	dsb	sy
 800d90a:	60bb      	str	r3, [r7, #8]
}
 800d90c:	bf00      	nop
 800d90e:	e7fe      	b.n	800d90e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d910:	f000 f88a 	bl	800da28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d914:	2100      	movs	r1, #0
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 fcfe 	bl	800e318 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d91c:	f000 f892 	bl	800da44 <xTaskResumeAll>
 800d920:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d107      	bne.n	800d938 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d928:	4b06      	ldr	r3, [pc, #24]	; (800d944 <vTaskDelay+0x64>)
 800d92a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d92e:	601a      	str	r2, [r3, #0]
 800d930:	f3bf 8f4f 	dsb	sy
 800d934:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d938:	bf00      	nop
 800d93a:	3710      	adds	r7, #16
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	20005204 	.word	0x20005204
 800d944:	e000ed04 	.word	0xe000ed04

0800d948 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b08a      	sub	sp, #40	; 0x28
 800d94c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d94e:	2300      	movs	r3, #0
 800d950:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d952:	2300      	movs	r3, #0
 800d954:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d956:	463a      	mov	r2, r7
 800d958:	1d39      	adds	r1, r7, #4
 800d95a:	f107 0308 	add.w	r3, r7, #8
 800d95e:	4618      	mov	r0, r3
 800d960:	f7fe fbf6 	bl	800c150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d964:	6839      	ldr	r1, [r7, #0]
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	68ba      	ldr	r2, [r7, #8]
 800d96a:	9202      	str	r2, [sp, #8]
 800d96c:	9301      	str	r3, [sp, #4]
 800d96e:	2300      	movs	r3, #0
 800d970:	9300      	str	r3, [sp, #0]
 800d972:	2300      	movs	r3, #0
 800d974:	460a      	mov	r2, r1
 800d976:	4924      	ldr	r1, [pc, #144]	; (800da08 <vTaskStartScheduler+0xc0>)
 800d978:	4824      	ldr	r0, [pc, #144]	; (800da0c <vTaskStartScheduler+0xc4>)
 800d97a:	f7ff fdf9 	bl	800d570 <xTaskCreateStatic>
 800d97e:	4603      	mov	r3, r0
 800d980:	4a23      	ldr	r2, [pc, #140]	; (800da10 <vTaskStartScheduler+0xc8>)
 800d982:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d984:	4b22      	ldr	r3, [pc, #136]	; (800da10 <vTaskStartScheduler+0xc8>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d002      	beq.n	800d992 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d98c:	2301      	movs	r3, #1
 800d98e:	617b      	str	r3, [r7, #20]
 800d990:	e001      	b.n	800d996 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d992:	2300      	movs	r3, #0
 800d994:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	2b01      	cmp	r3, #1
 800d99a:	d102      	bne.n	800d9a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d99c:	f000 fd10 	bl	800e3c0 <xTimerCreateTimerTask>
 800d9a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d11b      	bne.n	800d9e0 <vTaskStartScheduler+0x98>
	__asm volatile
 800d9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ac:	f383 8811 	msr	BASEPRI, r3
 800d9b0:	f3bf 8f6f 	isb	sy
 800d9b4:	f3bf 8f4f 	dsb	sy
 800d9b8:	613b      	str	r3, [r7, #16]
}
 800d9ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d9bc:	4b15      	ldr	r3, [pc, #84]	; (800da14 <vTaskStartScheduler+0xcc>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	3354      	adds	r3, #84	; 0x54
 800d9c2:	4a15      	ldr	r2, [pc, #84]	; (800da18 <vTaskStartScheduler+0xd0>)
 800d9c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d9c6:	4b15      	ldr	r3, [pc, #84]	; (800da1c <vTaskStartScheduler+0xd4>)
 800d9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d9cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d9ce:	4b14      	ldr	r3, [pc, #80]	; (800da20 <vTaskStartScheduler+0xd8>)
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d9d4:	4b13      	ldr	r3, [pc, #76]	; (800da24 <vTaskStartScheduler+0xdc>)
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d9da:	f7fe ff19 	bl	800c810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d9de:	e00e      	b.n	800d9fe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9e6:	d10a      	bne.n	800d9fe <vTaskStartScheduler+0xb6>
	__asm volatile
 800d9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ec:	f383 8811 	msr	BASEPRI, r3
 800d9f0:	f3bf 8f6f 	isb	sy
 800d9f4:	f3bf 8f4f 	dsb	sy
 800d9f8:	60fb      	str	r3, [r7, #12]
}
 800d9fa:	bf00      	nop
 800d9fc:	e7fe      	b.n	800d9fc <vTaskStartScheduler+0xb4>
}
 800d9fe:	bf00      	nop
 800da00:	3718      	adds	r7, #24
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop
 800da08:	0800f364 	.word	0x0800f364
 800da0c:	0800e04d 	.word	0x0800e04d
 800da10:	20005200 	.word	0x20005200
 800da14:	20004d08 	.word	0x20004d08
 800da18:	20000014 	.word	0x20000014
 800da1c:	200051fc 	.word	0x200051fc
 800da20:	200051e8 	.word	0x200051e8
 800da24:	200051e0 	.word	0x200051e0

0800da28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800da28:	b480      	push	{r7}
 800da2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800da2c:	4b04      	ldr	r3, [pc, #16]	; (800da40 <vTaskSuspendAll+0x18>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	3301      	adds	r3, #1
 800da32:	4a03      	ldr	r2, [pc, #12]	; (800da40 <vTaskSuspendAll+0x18>)
 800da34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800da36:	bf00      	nop
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr
 800da40:	20005204 	.word	0x20005204

0800da44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800da4a:	2300      	movs	r3, #0
 800da4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800da4e:	2300      	movs	r3, #0
 800da50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800da52:	4b42      	ldr	r3, [pc, #264]	; (800db5c <xTaskResumeAll+0x118>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d10a      	bne.n	800da70 <xTaskResumeAll+0x2c>
	__asm volatile
 800da5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da5e:	f383 8811 	msr	BASEPRI, r3
 800da62:	f3bf 8f6f 	isb	sy
 800da66:	f3bf 8f4f 	dsb	sy
 800da6a:	603b      	str	r3, [r7, #0]
}
 800da6c:	bf00      	nop
 800da6e:	e7fe      	b.n	800da6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800da70:	f7fe ff70 	bl	800c954 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800da74:	4b39      	ldr	r3, [pc, #228]	; (800db5c <xTaskResumeAll+0x118>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	3b01      	subs	r3, #1
 800da7a:	4a38      	ldr	r2, [pc, #224]	; (800db5c <xTaskResumeAll+0x118>)
 800da7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da7e:	4b37      	ldr	r3, [pc, #220]	; (800db5c <xTaskResumeAll+0x118>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d162      	bne.n	800db4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800da86:	4b36      	ldr	r3, [pc, #216]	; (800db60 <xTaskResumeAll+0x11c>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d05e      	beq.n	800db4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da8e:	e02f      	b.n	800daf0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da90:	4b34      	ldr	r3, [pc, #208]	; (800db64 <xTaskResumeAll+0x120>)
 800da92:	68db      	ldr	r3, [r3, #12]
 800da94:	68db      	ldr	r3, [r3, #12]
 800da96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	3318      	adds	r3, #24
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7fe fdff 	bl	800c6a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	3304      	adds	r3, #4
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7fe fdfa 	bl	800c6a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dab0:	4b2d      	ldr	r3, [pc, #180]	; (800db68 <xTaskResumeAll+0x124>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d903      	bls.n	800dac0 <xTaskResumeAll+0x7c>
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dabc:	4a2a      	ldr	r2, [pc, #168]	; (800db68 <xTaskResumeAll+0x124>)
 800dabe:	6013      	str	r3, [r2, #0]
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dac4:	4613      	mov	r3, r2
 800dac6:	009b      	lsls	r3, r3, #2
 800dac8:	4413      	add	r3, r2
 800daca:	009b      	lsls	r3, r3, #2
 800dacc:	4a27      	ldr	r2, [pc, #156]	; (800db6c <xTaskResumeAll+0x128>)
 800dace:	441a      	add	r2, r3
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	3304      	adds	r3, #4
 800dad4:	4619      	mov	r1, r3
 800dad6:	4610      	mov	r0, r2
 800dad8:	f7fe fd85 	bl	800c5e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dae0:	4b23      	ldr	r3, [pc, #140]	; (800db70 <xTaskResumeAll+0x12c>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d302      	bcc.n	800daf0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800daea:	4b22      	ldr	r3, [pc, #136]	; (800db74 <xTaskResumeAll+0x130>)
 800daec:	2201      	movs	r2, #1
 800daee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800daf0:	4b1c      	ldr	r3, [pc, #112]	; (800db64 <xTaskResumeAll+0x120>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d1cb      	bne.n	800da90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d001      	beq.n	800db02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dafe:	f000 fb5f 	bl	800e1c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800db02:	4b1d      	ldr	r3, [pc, #116]	; (800db78 <xTaskResumeAll+0x134>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d010      	beq.n	800db30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800db0e:	f000 f847 	bl	800dba0 <xTaskIncrementTick>
 800db12:	4603      	mov	r3, r0
 800db14:	2b00      	cmp	r3, #0
 800db16:	d002      	beq.n	800db1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800db18:	4b16      	ldr	r3, [pc, #88]	; (800db74 <xTaskResumeAll+0x130>)
 800db1a:	2201      	movs	r2, #1
 800db1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	3b01      	subs	r3, #1
 800db22:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d1f1      	bne.n	800db0e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800db2a:	4b13      	ldr	r3, [pc, #76]	; (800db78 <xTaskResumeAll+0x134>)
 800db2c:	2200      	movs	r2, #0
 800db2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800db30:	4b10      	ldr	r3, [pc, #64]	; (800db74 <xTaskResumeAll+0x130>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d009      	beq.n	800db4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800db38:	2301      	movs	r3, #1
 800db3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800db3c:	4b0f      	ldr	r3, [pc, #60]	; (800db7c <xTaskResumeAll+0x138>)
 800db3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db42:	601a      	str	r2, [r3, #0]
 800db44:	f3bf 8f4f 	dsb	sy
 800db48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db4c:	f7fe ff32 	bl	800c9b4 <vPortExitCritical>

	return xAlreadyYielded;
 800db50:	68bb      	ldr	r3, [r7, #8]
}
 800db52:	4618      	mov	r0, r3
 800db54:	3710      	adds	r7, #16
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
 800db5a:	bf00      	nop
 800db5c:	20005204 	.word	0x20005204
 800db60:	200051dc 	.word	0x200051dc
 800db64:	2000519c 	.word	0x2000519c
 800db68:	200051e4 	.word	0x200051e4
 800db6c:	20004d0c 	.word	0x20004d0c
 800db70:	20004d08 	.word	0x20004d08
 800db74:	200051f0 	.word	0x200051f0
 800db78:	200051ec 	.word	0x200051ec
 800db7c:	e000ed04 	.word	0xe000ed04

0800db80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800db80:	b480      	push	{r7}
 800db82:	b083      	sub	sp, #12
 800db84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800db86:	4b05      	ldr	r3, [pc, #20]	; (800db9c <xTaskGetTickCount+0x1c>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800db8c:	687b      	ldr	r3, [r7, #4]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	370c      	adds	r7, #12
 800db92:	46bd      	mov	sp, r7
 800db94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db98:	4770      	bx	lr
 800db9a:	bf00      	nop
 800db9c:	200051e0 	.word	0x200051e0

0800dba0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b086      	sub	sp, #24
 800dba4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dba6:	2300      	movs	r3, #0
 800dba8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbaa:	4b4f      	ldr	r3, [pc, #316]	; (800dce8 <xTaskIncrementTick+0x148>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	f040 808f 	bne.w	800dcd2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dbb4:	4b4d      	ldr	r3, [pc, #308]	; (800dcec <xTaskIncrementTick+0x14c>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dbbc:	4a4b      	ldr	r2, [pc, #300]	; (800dcec <xTaskIncrementTick+0x14c>)
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d120      	bne.n	800dc0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dbc8:	4b49      	ldr	r3, [pc, #292]	; (800dcf0 <xTaskIncrementTick+0x150>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d00a      	beq.n	800dbe8 <xTaskIncrementTick+0x48>
	__asm volatile
 800dbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd6:	f383 8811 	msr	BASEPRI, r3
 800dbda:	f3bf 8f6f 	isb	sy
 800dbde:	f3bf 8f4f 	dsb	sy
 800dbe2:	603b      	str	r3, [r7, #0]
}
 800dbe4:	bf00      	nop
 800dbe6:	e7fe      	b.n	800dbe6 <xTaskIncrementTick+0x46>
 800dbe8:	4b41      	ldr	r3, [pc, #260]	; (800dcf0 <xTaskIncrementTick+0x150>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	60fb      	str	r3, [r7, #12]
 800dbee:	4b41      	ldr	r3, [pc, #260]	; (800dcf4 <xTaskIncrementTick+0x154>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	4a3f      	ldr	r2, [pc, #252]	; (800dcf0 <xTaskIncrementTick+0x150>)
 800dbf4:	6013      	str	r3, [r2, #0]
 800dbf6:	4a3f      	ldr	r2, [pc, #252]	; (800dcf4 <xTaskIncrementTick+0x154>)
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	6013      	str	r3, [r2, #0]
 800dbfc:	4b3e      	ldr	r3, [pc, #248]	; (800dcf8 <xTaskIncrementTick+0x158>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	3301      	adds	r3, #1
 800dc02:	4a3d      	ldr	r2, [pc, #244]	; (800dcf8 <xTaskIncrementTick+0x158>)
 800dc04:	6013      	str	r3, [r2, #0]
 800dc06:	f000 fadb 	bl	800e1c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dc0a:	4b3c      	ldr	r3, [pc, #240]	; (800dcfc <xTaskIncrementTick+0x15c>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	693a      	ldr	r2, [r7, #16]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d349      	bcc.n	800dca8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc14:	4b36      	ldr	r3, [pc, #216]	; (800dcf0 <xTaskIncrementTick+0x150>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d104      	bne.n	800dc28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc1e:	4b37      	ldr	r3, [pc, #220]	; (800dcfc <xTaskIncrementTick+0x15c>)
 800dc20:	f04f 32ff 	mov.w	r2, #4294967295
 800dc24:	601a      	str	r2, [r3, #0]
					break;
 800dc26:	e03f      	b.n	800dca8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc28:	4b31      	ldr	r3, [pc, #196]	; (800dcf0 <xTaskIncrementTick+0x150>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	68db      	ldr	r3, [r3, #12]
 800dc2e:	68db      	ldr	r3, [r3, #12]
 800dc30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	685b      	ldr	r3, [r3, #4]
 800dc36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dc38:	693a      	ldr	r2, [r7, #16]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d203      	bcs.n	800dc48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dc40:	4a2e      	ldr	r2, [pc, #184]	; (800dcfc <xTaskIncrementTick+0x15c>)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dc46:	e02f      	b.n	800dca8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	3304      	adds	r3, #4
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7fe fd27 	bl	800c6a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d004      	beq.n	800dc64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	3318      	adds	r3, #24
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7fe fd1e 	bl	800c6a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc68:	4b25      	ldr	r3, [pc, #148]	; (800dd00 <xTaskIncrementTick+0x160>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d903      	bls.n	800dc78 <xTaskIncrementTick+0xd8>
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc74:	4a22      	ldr	r2, [pc, #136]	; (800dd00 <xTaskIncrementTick+0x160>)
 800dc76:	6013      	str	r3, [r2, #0]
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc7c:	4613      	mov	r3, r2
 800dc7e:	009b      	lsls	r3, r3, #2
 800dc80:	4413      	add	r3, r2
 800dc82:	009b      	lsls	r3, r3, #2
 800dc84:	4a1f      	ldr	r2, [pc, #124]	; (800dd04 <xTaskIncrementTick+0x164>)
 800dc86:	441a      	add	r2, r3
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	3304      	adds	r3, #4
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	4610      	mov	r0, r2
 800dc90:	f7fe fca9 	bl	800c5e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc98:	4b1b      	ldr	r3, [pc, #108]	; (800dd08 <xTaskIncrementTick+0x168>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d3b8      	bcc.n	800dc14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dca2:	2301      	movs	r3, #1
 800dca4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dca6:	e7b5      	b.n	800dc14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dca8:	4b17      	ldr	r3, [pc, #92]	; (800dd08 <xTaskIncrementTick+0x168>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcae:	4915      	ldr	r1, [pc, #84]	; (800dd04 <xTaskIncrementTick+0x164>)
 800dcb0:	4613      	mov	r3, r2
 800dcb2:	009b      	lsls	r3, r3, #2
 800dcb4:	4413      	add	r3, r2
 800dcb6:	009b      	lsls	r3, r3, #2
 800dcb8:	440b      	add	r3, r1
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	d901      	bls.n	800dcc4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dcc4:	4b11      	ldr	r3, [pc, #68]	; (800dd0c <xTaskIncrementTick+0x16c>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d007      	beq.n	800dcdc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800dccc:	2301      	movs	r3, #1
 800dcce:	617b      	str	r3, [r7, #20]
 800dcd0:	e004      	b.n	800dcdc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dcd2:	4b0f      	ldr	r3, [pc, #60]	; (800dd10 <xTaskIncrementTick+0x170>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	4a0d      	ldr	r2, [pc, #52]	; (800dd10 <xTaskIncrementTick+0x170>)
 800dcda:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dcdc:	697b      	ldr	r3, [r7, #20]
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3718      	adds	r7, #24
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	20005204 	.word	0x20005204
 800dcec:	200051e0 	.word	0x200051e0
 800dcf0:	20005194 	.word	0x20005194
 800dcf4:	20005198 	.word	0x20005198
 800dcf8:	200051f4 	.word	0x200051f4
 800dcfc:	200051fc 	.word	0x200051fc
 800dd00:	200051e4 	.word	0x200051e4
 800dd04:	20004d0c 	.word	0x20004d0c
 800dd08:	20004d08 	.word	0x20004d08
 800dd0c:	200051f0 	.word	0x200051f0
 800dd10:	200051ec 	.word	0x200051ec

0800dd14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dd14:	b480      	push	{r7}
 800dd16:	b085      	sub	sp, #20
 800dd18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dd1a:	4b2a      	ldr	r3, [pc, #168]	; (800ddc4 <vTaskSwitchContext+0xb0>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d003      	beq.n	800dd2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dd22:	4b29      	ldr	r3, [pc, #164]	; (800ddc8 <vTaskSwitchContext+0xb4>)
 800dd24:	2201      	movs	r2, #1
 800dd26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dd28:	e046      	b.n	800ddb8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800dd2a:	4b27      	ldr	r3, [pc, #156]	; (800ddc8 <vTaskSwitchContext+0xb4>)
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd30:	4b26      	ldr	r3, [pc, #152]	; (800ddcc <vTaskSwitchContext+0xb8>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	60fb      	str	r3, [r7, #12]
 800dd36:	e010      	b.n	800dd5a <vTaskSwitchContext+0x46>
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d10a      	bne.n	800dd54 <vTaskSwitchContext+0x40>
	__asm volatile
 800dd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd42:	f383 8811 	msr	BASEPRI, r3
 800dd46:	f3bf 8f6f 	isb	sy
 800dd4a:	f3bf 8f4f 	dsb	sy
 800dd4e:	607b      	str	r3, [r7, #4]
}
 800dd50:	bf00      	nop
 800dd52:	e7fe      	b.n	800dd52 <vTaskSwitchContext+0x3e>
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	3b01      	subs	r3, #1
 800dd58:	60fb      	str	r3, [r7, #12]
 800dd5a:	491d      	ldr	r1, [pc, #116]	; (800ddd0 <vTaskSwitchContext+0xbc>)
 800dd5c:	68fa      	ldr	r2, [r7, #12]
 800dd5e:	4613      	mov	r3, r2
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	4413      	add	r3, r2
 800dd64:	009b      	lsls	r3, r3, #2
 800dd66:	440b      	add	r3, r1
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d0e4      	beq.n	800dd38 <vTaskSwitchContext+0x24>
 800dd6e:	68fa      	ldr	r2, [r7, #12]
 800dd70:	4613      	mov	r3, r2
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	4413      	add	r3, r2
 800dd76:	009b      	lsls	r3, r3, #2
 800dd78:	4a15      	ldr	r2, [pc, #84]	; (800ddd0 <vTaskSwitchContext+0xbc>)
 800dd7a:	4413      	add	r3, r2
 800dd7c:	60bb      	str	r3, [r7, #8]
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	685b      	ldr	r3, [r3, #4]
 800dd82:	685a      	ldr	r2, [r3, #4]
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	605a      	str	r2, [r3, #4]
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	685a      	ldr	r2, [r3, #4]
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	3308      	adds	r3, #8
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d104      	bne.n	800dd9e <vTaskSwitchContext+0x8a>
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	685a      	ldr	r2, [r3, #4]
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	605a      	str	r2, [r3, #4]
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	4a0b      	ldr	r2, [pc, #44]	; (800ddd4 <vTaskSwitchContext+0xc0>)
 800dda6:	6013      	str	r3, [r2, #0]
 800dda8:	4a08      	ldr	r2, [pc, #32]	; (800ddcc <vTaskSwitchContext+0xb8>)
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ddae:	4b09      	ldr	r3, [pc, #36]	; (800ddd4 <vTaskSwitchContext+0xc0>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	3354      	adds	r3, #84	; 0x54
 800ddb4:	4a08      	ldr	r2, [pc, #32]	; (800ddd8 <vTaskSwitchContext+0xc4>)
 800ddb6:	6013      	str	r3, [r2, #0]
}
 800ddb8:	bf00      	nop
 800ddba:	3714      	adds	r7, #20
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc2:	4770      	bx	lr
 800ddc4:	20005204 	.word	0x20005204
 800ddc8:	200051f0 	.word	0x200051f0
 800ddcc:	200051e4 	.word	0x200051e4
 800ddd0:	20004d0c 	.word	0x20004d0c
 800ddd4:	20004d08 	.word	0x20004d08
 800ddd8:	20000014 	.word	0x20000014

0800dddc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d10a      	bne.n	800de02 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ddec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf0:	f383 8811 	msr	BASEPRI, r3
 800ddf4:	f3bf 8f6f 	isb	sy
 800ddf8:	f3bf 8f4f 	dsb	sy
 800ddfc:	60fb      	str	r3, [r7, #12]
}
 800ddfe:	bf00      	nop
 800de00:	e7fe      	b.n	800de00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de02:	4b07      	ldr	r3, [pc, #28]	; (800de20 <vTaskPlaceOnEventList+0x44>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	3318      	adds	r3, #24
 800de08:	4619      	mov	r1, r3
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f7fe fc0f 	bl	800c62e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800de10:	2101      	movs	r1, #1
 800de12:	6838      	ldr	r0, [r7, #0]
 800de14:	f000 fa80 	bl	800e318 <prvAddCurrentTaskToDelayedList>
}
 800de18:	bf00      	nop
 800de1a:	3710      	adds	r7, #16
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	20004d08 	.word	0x20004d08

0800de24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d10a      	bne.n	800de4c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800de36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de3a:	f383 8811 	msr	BASEPRI, r3
 800de3e:	f3bf 8f6f 	isb	sy
 800de42:	f3bf 8f4f 	dsb	sy
 800de46:	617b      	str	r3, [r7, #20]
}
 800de48:	bf00      	nop
 800de4a:	e7fe      	b.n	800de4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de4c:	4b0a      	ldr	r3, [pc, #40]	; (800de78 <vTaskPlaceOnEventListRestricted+0x54>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	3318      	adds	r3, #24
 800de52:	4619      	mov	r1, r3
 800de54:	68f8      	ldr	r0, [r7, #12]
 800de56:	f7fe fbc6 	bl	800c5e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d002      	beq.n	800de66 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800de60:	f04f 33ff 	mov.w	r3, #4294967295
 800de64:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800de66:	6879      	ldr	r1, [r7, #4]
 800de68:	68b8      	ldr	r0, [r7, #8]
 800de6a:	f000 fa55 	bl	800e318 <prvAddCurrentTaskToDelayedList>
	}
 800de6e:	bf00      	nop
 800de70:	3718      	adds	r7, #24
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
 800de76:	bf00      	nop
 800de78:	20004d08 	.word	0x20004d08

0800de7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b086      	sub	sp, #24
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	68db      	ldr	r3, [r3, #12]
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d10a      	bne.n	800dea8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800de92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de96:	f383 8811 	msr	BASEPRI, r3
 800de9a:	f3bf 8f6f 	isb	sy
 800de9e:	f3bf 8f4f 	dsb	sy
 800dea2:	60fb      	str	r3, [r7, #12]
}
 800dea4:	bf00      	nop
 800dea6:	e7fe      	b.n	800dea6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	3318      	adds	r3, #24
 800deac:	4618      	mov	r0, r3
 800deae:	f7fe fbf7 	bl	800c6a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800deb2:	4b1e      	ldr	r3, [pc, #120]	; (800df2c <xTaskRemoveFromEventList+0xb0>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d11d      	bne.n	800def6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	3304      	adds	r3, #4
 800debe:	4618      	mov	r0, r3
 800dec0:	f7fe fbee 	bl	800c6a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dec8:	4b19      	ldr	r3, [pc, #100]	; (800df30 <xTaskRemoveFromEventList+0xb4>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	429a      	cmp	r2, r3
 800dece:	d903      	bls.n	800ded8 <xTaskRemoveFromEventList+0x5c>
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ded4:	4a16      	ldr	r2, [pc, #88]	; (800df30 <xTaskRemoveFromEventList+0xb4>)
 800ded6:	6013      	str	r3, [r2, #0]
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dedc:	4613      	mov	r3, r2
 800dede:	009b      	lsls	r3, r3, #2
 800dee0:	4413      	add	r3, r2
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	4a13      	ldr	r2, [pc, #76]	; (800df34 <xTaskRemoveFromEventList+0xb8>)
 800dee6:	441a      	add	r2, r3
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	3304      	adds	r3, #4
 800deec:	4619      	mov	r1, r3
 800deee:	4610      	mov	r0, r2
 800def0:	f7fe fb79 	bl	800c5e6 <vListInsertEnd>
 800def4:	e005      	b.n	800df02 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	3318      	adds	r3, #24
 800defa:	4619      	mov	r1, r3
 800defc:	480e      	ldr	r0, [pc, #56]	; (800df38 <xTaskRemoveFromEventList+0xbc>)
 800defe:	f7fe fb72 	bl	800c5e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df06:	4b0d      	ldr	r3, [pc, #52]	; (800df3c <xTaskRemoveFromEventList+0xc0>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d905      	bls.n	800df1c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800df10:	2301      	movs	r3, #1
 800df12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800df14:	4b0a      	ldr	r3, [pc, #40]	; (800df40 <xTaskRemoveFromEventList+0xc4>)
 800df16:	2201      	movs	r2, #1
 800df18:	601a      	str	r2, [r3, #0]
 800df1a:	e001      	b.n	800df20 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800df1c:	2300      	movs	r3, #0
 800df1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800df20:	697b      	ldr	r3, [r7, #20]
}
 800df22:	4618      	mov	r0, r3
 800df24:	3718      	adds	r7, #24
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	bf00      	nop
 800df2c:	20005204 	.word	0x20005204
 800df30:	200051e4 	.word	0x200051e4
 800df34:	20004d0c 	.word	0x20004d0c
 800df38:	2000519c 	.word	0x2000519c
 800df3c:	20004d08 	.word	0x20004d08
 800df40:	200051f0 	.word	0x200051f0

0800df44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800df44:	b480      	push	{r7}
 800df46:	b083      	sub	sp, #12
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800df4c:	4b06      	ldr	r3, [pc, #24]	; (800df68 <vTaskInternalSetTimeOutState+0x24>)
 800df4e:	681a      	ldr	r2, [r3, #0]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800df54:	4b05      	ldr	r3, [pc, #20]	; (800df6c <vTaskInternalSetTimeOutState+0x28>)
 800df56:	681a      	ldr	r2, [r3, #0]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	605a      	str	r2, [r3, #4]
}
 800df5c:	bf00      	nop
 800df5e:	370c      	adds	r7, #12
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr
 800df68:	200051f4 	.word	0x200051f4
 800df6c:	200051e0 	.word	0x200051e0

0800df70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b088      	sub	sp, #32
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d10a      	bne.n	800df96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800df80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df84:	f383 8811 	msr	BASEPRI, r3
 800df88:	f3bf 8f6f 	isb	sy
 800df8c:	f3bf 8f4f 	dsb	sy
 800df90:	613b      	str	r3, [r7, #16]
}
 800df92:	bf00      	nop
 800df94:	e7fe      	b.n	800df94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d10a      	bne.n	800dfb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800df9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa0:	f383 8811 	msr	BASEPRI, r3
 800dfa4:	f3bf 8f6f 	isb	sy
 800dfa8:	f3bf 8f4f 	dsb	sy
 800dfac:	60fb      	str	r3, [r7, #12]
}
 800dfae:	bf00      	nop
 800dfb0:	e7fe      	b.n	800dfb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dfb2:	f7fe fccf 	bl	800c954 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dfb6:	4b1d      	ldr	r3, [pc, #116]	; (800e02c <xTaskCheckForTimeOut+0xbc>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	685b      	ldr	r3, [r3, #4]
 800dfc0:	69ba      	ldr	r2, [r7, #24]
 800dfc2:	1ad3      	subs	r3, r2, r3
 800dfc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfce:	d102      	bne.n	800dfd6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	61fb      	str	r3, [r7, #28]
 800dfd4:	e023      	b.n	800e01e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681a      	ldr	r2, [r3, #0]
 800dfda:	4b15      	ldr	r3, [pc, #84]	; (800e030 <xTaskCheckForTimeOut+0xc0>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d007      	beq.n	800dff2 <xTaskCheckForTimeOut+0x82>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	69ba      	ldr	r2, [r7, #24]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d302      	bcc.n	800dff2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dfec:	2301      	movs	r3, #1
 800dfee:	61fb      	str	r3, [r7, #28]
 800dff0:	e015      	b.n	800e01e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	697a      	ldr	r2, [r7, #20]
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d20b      	bcs.n	800e014 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	681a      	ldr	r2, [r3, #0]
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	1ad2      	subs	r2, r2, r3
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f7ff ff9b 	bl	800df44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e00e:	2300      	movs	r3, #0
 800e010:	61fb      	str	r3, [r7, #28]
 800e012:	e004      	b.n	800e01e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	2200      	movs	r2, #0
 800e018:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e01a:	2301      	movs	r3, #1
 800e01c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e01e:	f7fe fcc9 	bl	800c9b4 <vPortExitCritical>

	return xReturn;
 800e022:	69fb      	ldr	r3, [r7, #28]
}
 800e024:	4618      	mov	r0, r3
 800e026:	3720      	adds	r7, #32
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}
 800e02c:	200051e0 	.word	0x200051e0
 800e030:	200051f4 	.word	0x200051f4

0800e034 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e034:	b480      	push	{r7}
 800e036:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e038:	4b03      	ldr	r3, [pc, #12]	; (800e048 <vTaskMissedYield+0x14>)
 800e03a:	2201      	movs	r2, #1
 800e03c:	601a      	str	r2, [r3, #0]
}
 800e03e:	bf00      	nop
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr
 800e048:	200051f0 	.word	0x200051f0

0800e04c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e054:	f000 f852 	bl	800e0fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e058:	4b06      	ldr	r3, [pc, #24]	; (800e074 <prvIdleTask+0x28>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d9f9      	bls.n	800e054 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e060:	4b05      	ldr	r3, [pc, #20]	; (800e078 <prvIdleTask+0x2c>)
 800e062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e066:	601a      	str	r2, [r3, #0]
 800e068:	f3bf 8f4f 	dsb	sy
 800e06c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e070:	e7f0      	b.n	800e054 <prvIdleTask+0x8>
 800e072:	bf00      	nop
 800e074:	20004d0c 	.word	0x20004d0c
 800e078:	e000ed04 	.word	0xe000ed04

0800e07c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e082:	2300      	movs	r3, #0
 800e084:	607b      	str	r3, [r7, #4]
 800e086:	e00c      	b.n	800e0a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	4613      	mov	r3, r2
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	4413      	add	r3, r2
 800e090:	009b      	lsls	r3, r3, #2
 800e092:	4a12      	ldr	r2, [pc, #72]	; (800e0dc <prvInitialiseTaskLists+0x60>)
 800e094:	4413      	add	r3, r2
 800e096:	4618      	mov	r0, r3
 800e098:	f7fe fa78 	bl	800c58c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	3301      	adds	r3, #1
 800e0a0:	607b      	str	r3, [r7, #4]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2b37      	cmp	r3, #55	; 0x37
 800e0a6:	d9ef      	bls.n	800e088 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e0a8:	480d      	ldr	r0, [pc, #52]	; (800e0e0 <prvInitialiseTaskLists+0x64>)
 800e0aa:	f7fe fa6f 	bl	800c58c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e0ae:	480d      	ldr	r0, [pc, #52]	; (800e0e4 <prvInitialiseTaskLists+0x68>)
 800e0b0:	f7fe fa6c 	bl	800c58c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e0b4:	480c      	ldr	r0, [pc, #48]	; (800e0e8 <prvInitialiseTaskLists+0x6c>)
 800e0b6:	f7fe fa69 	bl	800c58c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e0ba:	480c      	ldr	r0, [pc, #48]	; (800e0ec <prvInitialiseTaskLists+0x70>)
 800e0bc:	f7fe fa66 	bl	800c58c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e0c0:	480b      	ldr	r0, [pc, #44]	; (800e0f0 <prvInitialiseTaskLists+0x74>)
 800e0c2:	f7fe fa63 	bl	800c58c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e0c6:	4b0b      	ldr	r3, [pc, #44]	; (800e0f4 <prvInitialiseTaskLists+0x78>)
 800e0c8:	4a05      	ldr	r2, [pc, #20]	; (800e0e0 <prvInitialiseTaskLists+0x64>)
 800e0ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e0cc:	4b0a      	ldr	r3, [pc, #40]	; (800e0f8 <prvInitialiseTaskLists+0x7c>)
 800e0ce:	4a05      	ldr	r2, [pc, #20]	; (800e0e4 <prvInitialiseTaskLists+0x68>)
 800e0d0:	601a      	str	r2, [r3, #0]
}
 800e0d2:	bf00      	nop
 800e0d4:	3708      	adds	r7, #8
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	20004d0c 	.word	0x20004d0c
 800e0e0:	2000516c 	.word	0x2000516c
 800e0e4:	20005180 	.word	0x20005180
 800e0e8:	2000519c 	.word	0x2000519c
 800e0ec:	200051b0 	.word	0x200051b0
 800e0f0:	200051c8 	.word	0x200051c8
 800e0f4:	20005194 	.word	0x20005194
 800e0f8:	20005198 	.word	0x20005198

0800e0fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e102:	e019      	b.n	800e138 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e104:	f7fe fc26 	bl	800c954 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e108:	4b10      	ldr	r3, [pc, #64]	; (800e14c <prvCheckTasksWaitingTermination+0x50>)
 800e10a:	68db      	ldr	r3, [r3, #12]
 800e10c:	68db      	ldr	r3, [r3, #12]
 800e10e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	3304      	adds	r3, #4
 800e114:	4618      	mov	r0, r3
 800e116:	f7fe fac3 	bl	800c6a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e11a:	4b0d      	ldr	r3, [pc, #52]	; (800e150 <prvCheckTasksWaitingTermination+0x54>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	3b01      	subs	r3, #1
 800e120:	4a0b      	ldr	r2, [pc, #44]	; (800e150 <prvCheckTasksWaitingTermination+0x54>)
 800e122:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e124:	4b0b      	ldr	r3, [pc, #44]	; (800e154 <prvCheckTasksWaitingTermination+0x58>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	3b01      	subs	r3, #1
 800e12a:	4a0a      	ldr	r2, [pc, #40]	; (800e154 <prvCheckTasksWaitingTermination+0x58>)
 800e12c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e12e:	f7fe fc41 	bl	800c9b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 f810 	bl	800e158 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e138:	4b06      	ldr	r3, [pc, #24]	; (800e154 <prvCheckTasksWaitingTermination+0x58>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d1e1      	bne.n	800e104 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e140:	bf00      	nop
 800e142:	bf00      	nop
 800e144:	3708      	adds	r7, #8
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	200051b0 	.word	0x200051b0
 800e150:	200051dc 	.word	0x200051dc
 800e154:	200051c4 	.word	0x200051c4

0800e158 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b084      	sub	sp, #16
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	3354      	adds	r3, #84	; 0x54
 800e164:	4618      	mov	r0, r3
 800e166:	f000 fd0d 	bl	800eb84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e170:	2b00      	cmp	r3, #0
 800e172:	d108      	bne.n	800e186 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e178:	4618      	mov	r0, r3
 800e17a:	f7fe f8e9 	bl	800c350 <vPortFree>
				vPortFree( pxTCB );
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f7fe f8e6 	bl	800c350 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e184:	e018      	b.n	800e1b8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d103      	bne.n	800e198 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f7fe f8dd 	bl	800c350 <vPortFree>
	}
 800e196:	e00f      	b.n	800e1b8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e19e:	2b02      	cmp	r3, #2
 800e1a0:	d00a      	beq.n	800e1b8 <prvDeleteTCB+0x60>
	__asm volatile
 800e1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a6:	f383 8811 	msr	BASEPRI, r3
 800e1aa:	f3bf 8f6f 	isb	sy
 800e1ae:	f3bf 8f4f 	dsb	sy
 800e1b2:	60fb      	str	r3, [r7, #12]
}
 800e1b4:	bf00      	nop
 800e1b6:	e7fe      	b.n	800e1b6 <prvDeleteTCB+0x5e>
	}
 800e1b8:	bf00      	nop
 800e1ba:	3710      	adds	r7, #16
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}

0800e1c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1c6:	4b0c      	ldr	r3, [pc, #48]	; (800e1f8 <prvResetNextTaskUnblockTime+0x38>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d104      	bne.n	800e1da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e1d0:	4b0a      	ldr	r3, [pc, #40]	; (800e1fc <prvResetNextTaskUnblockTime+0x3c>)
 800e1d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e1d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e1d8:	e008      	b.n	800e1ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1da:	4b07      	ldr	r3, [pc, #28]	; (800e1f8 <prvResetNextTaskUnblockTime+0x38>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	68db      	ldr	r3, [r3, #12]
 800e1e0:	68db      	ldr	r3, [r3, #12]
 800e1e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	4a04      	ldr	r2, [pc, #16]	; (800e1fc <prvResetNextTaskUnblockTime+0x3c>)
 800e1ea:	6013      	str	r3, [r2, #0]
}
 800e1ec:	bf00      	nop
 800e1ee:	370c      	adds	r7, #12
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr
 800e1f8:	20005194 	.word	0x20005194
 800e1fc:	200051fc 	.word	0x200051fc

0800e200 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e200:	b480      	push	{r7}
 800e202:	b083      	sub	sp, #12
 800e204:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e206:	4b0b      	ldr	r3, [pc, #44]	; (800e234 <xTaskGetSchedulerState+0x34>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d102      	bne.n	800e214 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e20e:	2301      	movs	r3, #1
 800e210:	607b      	str	r3, [r7, #4]
 800e212:	e008      	b.n	800e226 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e214:	4b08      	ldr	r3, [pc, #32]	; (800e238 <xTaskGetSchedulerState+0x38>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d102      	bne.n	800e222 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e21c:	2302      	movs	r3, #2
 800e21e:	607b      	str	r3, [r7, #4]
 800e220:	e001      	b.n	800e226 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e222:	2300      	movs	r3, #0
 800e224:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e226:	687b      	ldr	r3, [r7, #4]
	}
 800e228:	4618      	mov	r0, r3
 800e22a:	370c      	adds	r7, #12
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr
 800e234:	200051e8 	.word	0x200051e8
 800e238:	20005204 	.word	0x20005204

0800e23c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b086      	sub	sp, #24
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e248:	2300      	movs	r3, #0
 800e24a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d056      	beq.n	800e300 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e252:	4b2e      	ldr	r3, [pc, #184]	; (800e30c <xTaskPriorityDisinherit+0xd0>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	693a      	ldr	r2, [r7, #16]
 800e258:	429a      	cmp	r2, r3
 800e25a:	d00a      	beq.n	800e272 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e260:	f383 8811 	msr	BASEPRI, r3
 800e264:	f3bf 8f6f 	isb	sy
 800e268:	f3bf 8f4f 	dsb	sy
 800e26c:	60fb      	str	r3, [r7, #12]
}
 800e26e:	bf00      	nop
 800e270:	e7fe      	b.n	800e270 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e276:	2b00      	cmp	r3, #0
 800e278:	d10a      	bne.n	800e290 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27e:	f383 8811 	msr	BASEPRI, r3
 800e282:	f3bf 8f6f 	isb	sy
 800e286:	f3bf 8f4f 	dsb	sy
 800e28a:	60bb      	str	r3, [r7, #8]
}
 800e28c:	bf00      	nop
 800e28e:	e7fe      	b.n	800e28e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e294:	1e5a      	subs	r2, r3, #1
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d02c      	beq.n	800e300 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d128      	bne.n	800e300 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	3304      	adds	r3, #4
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fe f9f4 	bl	800c6a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2d0:	4b0f      	ldr	r3, [pc, #60]	; (800e310 <xTaskPriorityDisinherit+0xd4>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d903      	bls.n	800e2e0 <xTaskPriorityDisinherit+0xa4>
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2dc:	4a0c      	ldr	r2, [pc, #48]	; (800e310 <xTaskPriorityDisinherit+0xd4>)
 800e2de:	6013      	str	r3, [r2, #0]
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2e4:	4613      	mov	r3, r2
 800e2e6:	009b      	lsls	r3, r3, #2
 800e2e8:	4413      	add	r3, r2
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	4a09      	ldr	r2, [pc, #36]	; (800e314 <xTaskPriorityDisinherit+0xd8>)
 800e2ee:	441a      	add	r2, r3
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	3304      	adds	r3, #4
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	4610      	mov	r0, r2
 800e2f8:	f7fe f975 	bl	800c5e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e300:	697b      	ldr	r3, [r7, #20]
	}
 800e302:	4618      	mov	r0, r3
 800e304:	3718      	adds	r7, #24
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
 800e30a:	bf00      	nop
 800e30c:	20004d08 	.word	0x20004d08
 800e310:	200051e4 	.word	0x200051e4
 800e314:	20004d0c 	.word	0x20004d0c

0800e318 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b084      	sub	sp, #16
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e322:	4b21      	ldr	r3, [pc, #132]	; (800e3a8 <prvAddCurrentTaskToDelayedList+0x90>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e328:	4b20      	ldr	r3, [pc, #128]	; (800e3ac <prvAddCurrentTaskToDelayedList+0x94>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	3304      	adds	r3, #4
 800e32e:	4618      	mov	r0, r3
 800e330:	f7fe f9b6 	bl	800c6a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e33a:	d10a      	bne.n	800e352 <prvAddCurrentTaskToDelayedList+0x3a>
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d007      	beq.n	800e352 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e342:	4b1a      	ldr	r3, [pc, #104]	; (800e3ac <prvAddCurrentTaskToDelayedList+0x94>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	3304      	adds	r3, #4
 800e348:	4619      	mov	r1, r3
 800e34a:	4819      	ldr	r0, [pc, #100]	; (800e3b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800e34c:	f7fe f94b 	bl	800c5e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e350:	e026      	b.n	800e3a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e352:	68fa      	ldr	r2, [r7, #12]
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	4413      	add	r3, r2
 800e358:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e35a:	4b14      	ldr	r3, [pc, #80]	; (800e3ac <prvAddCurrentTaskToDelayedList+0x94>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	68ba      	ldr	r2, [r7, #8]
 800e360:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e362:	68ba      	ldr	r2, [r7, #8]
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	429a      	cmp	r2, r3
 800e368:	d209      	bcs.n	800e37e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e36a:	4b12      	ldr	r3, [pc, #72]	; (800e3b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e36c:	681a      	ldr	r2, [r3, #0]
 800e36e:	4b0f      	ldr	r3, [pc, #60]	; (800e3ac <prvAddCurrentTaskToDelayedList+0x94>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	3304      	adds	r3, #4
 800e374:	4619      	mov	r1, r3
 800e376:	4610      	mov	r0, r2
 800e378:	f7fe f959 	bl	800c62e <vListInsert>
}
 800e37c:	e010      	b.n	800e3a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e37e:	4b0e      	ldr	r3, [pc, #56]	; (800e3b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	4b0a      	ldr	r3, [pc, #40]	; (800e3ac <prvAddCurrentTaskToDelayedList+0x94>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	3304      	adds	r3, #4
 800e388:	4619      	mov	r1, r3
 800e38a:	4610      	mov	r0, r2
 800e38c:	f7fe f94f 	bl	800c62e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e390:	4b0a      	ldr	r3, [pc, #40]	; (800e3bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	68ba      	ldr	r2, [r7, #8]
 800e396:	429a      	cmp	r2, r3
 800e398:	d202      	bcs.n	800e3a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e39a:	4a08      	ldr	r2, [pc, #32]	; (800e3bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	6013      	str	r3, [r2, #0]
}
 800e3a0:	bf00      	nop
 800e3a2:	3710      	adds	r7, #16
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	200051e0 	.word	0x200051e0
 800e3ac:	20004d08 	.word	0x20004d08
 800e3b0:	200051c8 	.word	0x200051c8
 800e3b4:	20005198 	.word	0x20005198
 800e3b8:	20005194 	.word	0x20005194
 800e3bc:	200051fc 	.word	0x200051fc

0800e3c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b08a      	sub	sp, #40	; 0x28
 800e3c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e3ca:	f000 fb07 	bl	800e9dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e3ce:	4b1c      	ldr	r3, [pc, #112]	; (800e440 <xTimerCreateTimerTask+0x80>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d021      	beq.n	800e41a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e3de:	1d3a      	adds	r2, r7, #4
 800e3e0:	f107 0108 	add.w	r1, r7, #8
 800e3e4:	f107 030c 	add.w	r3, r7, #12
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f7fd fecb 	bl	800c184 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e3ee:	6879      	ldr	r1, [r7, #4]
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	68fa      	ldr	r2, [r7, #12]
 800e3f4:	9202      	str	r2, [sp, #8]
 800e3f6:	9301      	str	r3, [sp, #4]
 800e3f8:	2302      	movs	r3, #2
 800e3fa:	9300      	str	r3, [sp, #0]
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	460a      	mov	r2, r1
 800e400:	4910      	ldr	r1, [pc, #64]	; (800e444 <xTimerCreateTimerTask+0x84>)
 800e402:	4811      	ldr	r0, [pc, #68]	; (800e448 <xTimerCreateTimerTask+0x88>)
 800e404:	f7ff f8b4 	bl	800d570 <xTaskCreateStatic>
 800e408:	4603      	mov	r3, r0
 800e40a:	4a10      	ldr	r2, [pc, #64]	; (800e44c <xTimerCreateTimerTask+0x8c>)
 800e40c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e40e:	4b0f      	ldr	r3, [pc, #60]	; (800e44c <xTimerCreateTimerTask+0x8c>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d001      	beq.n	800e41a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e416:	2301      	movs	r3, #1
 800e418:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d10a      	bne.n	800e436 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e424:	f383 8811 	msr	BASEPRI, r3
 800e428:	f3bf 8f6f 	isb	sy
 800e42c:	f3bf 8f4f 	dsb	sy
 800e430:	613b      	str	r3, [r7, #16]
}
 800e432:	bf00      	nop
 800e434:	e7fe      	b.n	800e434 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e436:	697b      	ldr	r3, [r7, #20]
}
 800e438:	4618      	mov	r0, r3
 800e43a:	3718      	adds	r7, #24
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	20005238 	.word	0x20005238
 800e444:	0800f36c 	.word	0x0800f36c
 800e448:	0800e585 	.word	0x0800e585
 800e44c:	2000523c 	.word	0x2000523c

0800e450 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b08a      	sub	sp, #40	; 0x28
 800e454:	af00      	add	r7, sp, #0
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	607a      	str	r2, [r7, #4]
 800e45c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e45e:	2300      	movs	r3, #0
 800e460:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d10a      	bne.n	800e47e <xTimerGenericCommand+0x2e>
	__asm volatile
 800e468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e46c:	f383 8811 	msr	BASEPRI, r3
 800e470:	f3bf 8f6f 	isb	sy
 800e474:	f3bf 8f4f 	dsb	sy
 800e478:	623b      	str	r3, [r7, #32]
}
 800e47a:	bf00      	nop
 800e47c:	e7fe      	b.n	800e47c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e47e:	4b1a      	ldr	r3, [pc, #104]	; (800e4e8 <xTimerGenericCommand+0x98>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d02a      	beq.n	800e4dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	2b05      	cmp	r3, #5
 800e496:	dc18      	bgt.n	800e4ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e498:	f7ff feb2 	bl	800e200 <xTaskGetSchedulerState>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b02      	cmp	r3, #2
 800e4a0:	d109      	bne.n	800e4b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e4a2:	4b11      	ldr	r3, [pc, #68]	; (800e4e8 <xTimerGenericCommand+0x98>)
 800e4a4:	6818      	ldr	r0, [r3, #0]
 800e4a6:	f107 0110 	add.w	r1, r7, #16
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4ae:	f7fe fc77 	bl	800cda0 <xQueueGenericSend>
 800e4b2:	6278      	str	r0, [r7, #36]	; 0x24
 800e4b4:	e012      	b.n	800e4dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e4b6:	4b0c      	ldr	r3, [pc, #48]	; (800e4e8 <xTimerGenericCommand+0x98>)
 800e4b8:	6818      	ldr	r0, [r3, #0]
 800e4ba:	f107 0110 	add.w	r1, r7, #16
 800e4be:	2300      	movs	r3, #0
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	f7fe fc6d 	bl	800cda0 <xQueueGenericSend>
 800e4c6:	6278      	str	r0, [r7, #36]	; 0x24
 800e4c8:	e008      	b.n	800e4dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e4ca:	4b07      	ldr	r3, [pc, #28]	; (800e4e8 <xTimerGenericCommand+0x98>)
 800e4cc:	6818      	ldr	r0, [r3, #0]
 800e4ce:	f107 0110 	add.w	r1, r7, #16
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	683a      	ldr	r2, [r7, #0]
 800e4d6:	f7fe fd61 	bl	800cf9c <xQueueGenericSendFromISR>
 800e4da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3728      	adds	r7, #40	; 0x28
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	20005238 	.word	0x20005238

0800e4ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b088      	sub	sp, #32
 800e4f0:	af02      	add	r7, sp, #8
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4f6:	4b22      	ldr	r3, [pc, #136]	; (800e580 <prvProcessExpiredTimer+0x94>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	68db      	ldr	r3, [r3, #12]
 800e4fc:	68db      	ldr	r3, [r3, #12]
 800e4fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	3304      	adds	r3, #4
 800e504:	4618      	mov	r0, r3
 800e506:	f7fe f8cb 	bl	800c6a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e510:	f003 0304 	and.w	r3, r3, #4
 800e514:	2b00      	cmp	r3, #0
 800e516:	d022      	beq.n	800e55e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	699a      	ldr	r2, [r3, #24]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	18d1      	adds	r1, r2, r3
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	683a      	ldr	r2, [r7, #0]
 800e524:	6978      	ldr	r0, [r7, #20]
 800e526:	f000 f8d1 	bl	800e6cc <prvInsertTimerInActiveList>
 800e52a:	4603      	mov	r3, r0
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d01f      	beq.n	800e570 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e530:	2300      	movs	r3, #0
 800e532:	9300      	str	r3, [sp, #0]
 800e534:	2300      	movs	r3, #0
 800e536:	687a      	ldr	r2, [r7, #4]
 800e538:	2100      	movs	r1, #0
 800e53a:	6978      	ldr	r0, [r7, #20]
 800e53c:	f7ff ff88 	bl	800e450 <xTimerGenericCommand>
 800e540:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d113      	bne.n	800e570 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e54c:	f383 8811 	msr	BASEPRI, r3
 800e550:	f3bf 8f6f 	isb	sy
 800e554:	f3bf 8f4f 	dsb	sy
 800e558:	60fb      	str	r3, [r7, #12]
}
 800e55a:	bf00      	nop
 800e55c:	e7fe      	b.n	800e55c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e564:	f023 0301 	bic.w	r3, r3, #1
 800e568:	b2da      	uxtb	r2, r3
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	6a1b      	ldr	r3, [r3, #32]
 800e574:	6978      	ldr	r0, [r7, #20]
 800e576:	4798      	blx	r3
}
 800e578:	bf00      	nop
 800e57a:	3718      	adds	r7, #24
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}
 800e580:	20005230 	.word	0x20005230

0800e584 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e58c:	f107 0308 	add.w	r3, r7, #8
 800e590:	4618      	mov	r0, r3
 800e592:	f000 f857 	bl	800e644 <prvGetNextExpireTime>
 800e596:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	4619      	mov	r1, r3
 800e59c:	68f8      	ldr	r0, [r7, #12]
 800e59e:	f000 f803 	bl	800e5a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e5a2:	f000 f8d5 	bl	800e750 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e5a6:	e7f1      	b.n	800e58c <prvTimerTask+0x8>

0800e5a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b084      	sub	sp, #16
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e5b2:	f7ff fa39 	bl	800da28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e5b6:	f107 0308 	add.w	r3, r7, #8
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f000 f866 	bl	800e68c <prvSampleTimeNow>
 800e5c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d130      	bne.n	800e62a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d10a      	bne.n	800e5e4 <prvProcessTimerOrBlockTask+0x3c>
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d806      	bhi.n	800e5e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e5d6:	f7ff fa35 	bl	800da44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e5da:	68f9      	ldr	r1, [r7, #12]
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f7ff ff85 	bl	800e4ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e5e2:	e024      	b.n	800e62e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d008      	beq.n	800e5fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e5ea:	4b13      	ldr	r3, [pc, #76]	; (800e638 <prvProcessTimerOrBlockTask+0x90>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d101      	bne.n	800e5f8 <prvProcessTimerOrBlockTask+0x50>
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	e000      	b.n	800e5fa <prvProcessTimerOrBlockTask+0x52>
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e5fc:	4b0f      	ldr	r3, [pc, #60]	; (800e63c <prvProcessTimerOrBlockTask+0x94>)
 800e5fe:	6818      	ldr	r0, [r3, #0]
 800e600:	687a      	ldr	r2, [r7, #4]
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	1ad3      	subs	r3, r2, r3
 800e606:	683a      	ldr	r2, [r7, #0]
 800e608:	4619      	mov	r1, r3
 800e60a:	f7fe ff7d 	bl	800d508 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e60e:	f7ff fa19 	bl	800da44 <xTaskResumeAll>
 800e612:	4603      	mov	r3, r0
 800e614:	2b00      	cmp	r3, #0
 800e616:	d10a      	bne.n	800e62e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e618:	4b09      	ldr	r3, [pc, #36]	; (800e640 <prvProcessTimerOrBlockTask+0x98>)
 800e61a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e61e:	601a      	str	r2, [r3, #0]
 800e620:	f3bf 8f4f 	dsb	sy
 800e624:	f3bf 8f6f 	isb	sy
}
 800e628:	e001      	b.n	800e62e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e62a:	f7ff fa0b 	bl	800da44 <xTaskResumeAll>
}
 800e62e:	bf00      	nop
 800e630:	3710      	adds	r7, #16
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
 800e636:	bf00      	nop
 800e638:	20005234 	.word	0x20005234
 800e63c:	20005238 	.word	0x20005238
 800e640:	e000ed04 	.word	0xe000ed04

0800e644 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e644:	b480      	push	{r7}
 800e646:	b085      	sub	sp, #20
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e64c:	4b0e      	ldr	r3, [pc, #56]	; (800e688 <prvGetNextExpireTime+0x44>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d101      	bne.n	800e65a <prvGetNextExpireTime+0x16>
 800e656:	2201      	movs	r2, #1
 800e658:	e000      	b.n	800e65c <prvGetNextExpireTime+0x18>
 800e65a:	2200      	movs	r2, #0
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d105      	bne.n	800e674 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e668:	4b07      	ldr	r3, [pc, #28]	; (800e688 <prvGetNextExpireTime+0x44>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	68db      	ldr	r3, [r3, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	60fb      	str	r3, [r7, #12]
 800e672:	e001      	b.n	800e678 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e674:	2300      	movs	r3, #0
 800e676:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e678:	68fb      	ldr	r3, [r7, #12]
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3714      	adds	r7, #20
 800e67e:	46bd      	mov	sp, r7
 800e680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e684:	4770      	bx	lr
 800e686:	bf00      	nop
 800e688:	20005230 	.word	0x20005230

0800e68c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b084      	sub	sp, #16
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e694:	f7ff fa74 	bl	800db80 <xTaskGetTickCount>
 800e698:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e69a:	4b0b      	ldr	r3, [pc, #44]	; (800e6c8 <prvSampleTimeNow+0x3c>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	68fa      	ldr	r2, [r7, #12]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d205      	bcs.n	800e6b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e6a4:	f000 f936 	bl	800e914 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2201      	movs	r2, #1
 800e6ac:	601a      	str	r2, [r3, #0]
 800e6ae:	e002      	b.n	800e6b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e6b6:	4a04      	ldr	r2, [pc, #16]	; (800e6c8 <prvSampleTimeNow+0x3c>)
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3710      	adds	r7, #16
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	20005240 	.word	0x20005240

0800e6cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b086      	sub	sp, #24
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	60f8      	str	r0, [r7, #12]
 800e6d4:	60b9      	str	r1, [r7, #8]
 800e6d6:	607a      	str	r2, [r7, #4]
 800e6d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	68ba      	ldr	r2, [r7, #8]
 800e6e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	68fa      	ldr	r2, [r7, #12]
 800e6e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e6ea:	68ba      	ldr	r2, [r7, #8]
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d812      	bhi.n	800e718 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6f2:	687a      	ldr	r2, [r7, #4]
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	1ad2      	subs	r2, r2, r3
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	699b      	ldr	r3, [r3, #24]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d302      	bcc.n	800e706 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e700:	2301      	movs	r3, #1
 800e702:	617b      	str	r3, [r7, #20]
 800e704:	e01b      	b.n	800e73e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e706:	4b10      	ldr	r3, [pc, #64]	; (800e748 <prvInsertTimerInActiveList+0x7c>)
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	3304      	adds	r3, #4
 800e70e:	4619      	mov	r1, r3
 800e710:	4610      	mov	r0, r2
 800e712:	f7fd ff8c 	bl	800c62e <vListInsert>
 800e716:	e012      	b.n	800e73e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e718:	687a      	ldr	r2, [r7, #4]
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d206      	bcs.n	800e72e <prvInsertTimerInActiveList+0x62>
 800e720:	68ba      	ldr	r2, [r7, #8]
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	429a      	cmp	r2, r3
 800e726:	d302      	bcc.n	800e72e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e728:	2301      	movs	r3, #1
 800e72a:	617b      	str	r3, [r7, #20]
 800e72c:	e007      	b.n	800e73e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e72e:	4b07      	ldr	r3, [pc, #28]	; (800e74c <prvInsertTimerInActiveList+0x80>)
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	3304      	adds	r3, #4
 800e736:	4619      	mov	r1, r3
 800e738:	4610      	mov	r0, r2
 800e73a:	f7fd ff78 	bl	800c62e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e73e:	697b      	ldr	r3, [r7, #20]
}
 800e740:	4618      	mov	r0, r3
 800e742:	3718      	adds	r7, #24
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}
 800e748:	20005234 	.word	0x20005234
 800e74c:	20005230 	.word	0x20005230

0800e750 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b08e      	sub	sp, #56	; 0x38
 800e754:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e756:	e0ca      	b.n	800e8ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	da18      	bge.n	800e790 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e75e:	1d3b      	adds	r3, r7, #4
 800e760:	3304      	adds	r3, #4
 800e762:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e766:	2b00      	cmp	r3, #0
 800e768:	d10a      	bne.n	800e780 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e76e:	f383 8811 	msr	BASEPRI, r3
 800e772:	f3bf 8f6f 	isb	sy
 800e776:	f3bf 8f4f 	dsb	sy
 800e77a:	61fb      	str	r3, [r7, #28]
}
 800e77c:	bf00      	nop
 800e77e:	e7fe      	b.n	800e77e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e786:	6850      	ldr	r0, [r2, #4]
 800e788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e78a:	6892      	ldr	r2, [r2, #8]
 800e78c:	4611      	mov	r1, r2
 800e78e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2b00      	cmp	r3, #0
 800e794:	f2c0 80aa 	blt.w	800e8ec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79e:	695b      	ldr	r3, [r3, #20]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d004      	beq.n	800e7ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a6:	3304      	adds	r3, #4
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7fd ff79 	bl	800c6a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e7ae:	463b      	mov	r3, r7
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7ff ff6b 	bl	800e68c <prvSampleTimeNow>
 800e7b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2b09      	cmp	r3, #9
 800e7bc:	f200 8097 	bhi.w	800e8ee <prvProcessReceivedCommands+0x19e>
 800e7c0:	a201      	add	r2, pc, #4	; (adr r2, 800e7c8 <prvProcessReceivedCommands+0x78>)
 800e7c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7c6:	bf00      	nop
 800e7c8:	0800e7f1 	.word	0x0800e7f1
 800e7cc:	0800e7f1 	.word	0x0800e7f1
 800e7d0:	0800e7f1 	.word	0x0800e7f1
 800e7d4:	0800e865 	.word	0x0800e865
 800e7d8:	0800e879 	.word	0x0800e879
 800e7dc:	0800e8c3 	.word	0x0800e8c3
 800e7e0:	0800e7f1 	.word	0x0800e7f1
 800e7e4:	0800e7f1 	.word	0x0800e7f1
 800e7e8:	0800e865 	.word	0x0800e865
 800e7ec:	0800e879 	.word	0x0800e879
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7f6:	f043 0301 	orr.w	r3, r3, #1
 800e7fa:	b2da      	uxtb	r2, r3
 800e7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e802:	68ba      	ldr	r2, [r7, #8]
 800e804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e806:	699b      	ldr	r3, [r3, #24]
 800e808:	18d1      	adds	r1, r2, r3
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e80e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e810:	f7ff ff5c 	bl	800e6cc <prvInsertTimerInActiveList>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d069      	beq.n	800e8ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81c:	6a1b      	ldr	r3, [r3, #32]
 800e81e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e820:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e828:	f003 0304 	and.w	r3, r3, #4
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d05e      	beq.n	800e8ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e830:	68ba      	ldr	r2, [r7, #8]
 800e832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e834:	699b      	ldr	r3, [r3, #24]
 800e836:	441a      	add	r2, r3
 800e838:	2300      	movs	r3, #0
 800e83a:	9300      	str	r3, [sp, #0]
 800e83c:	2300      	movs	r3, #0
 800e83e:	2100      	movs	r1, #0
 800e840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e842:	f7ff fe05 	bl	800e450 <xTimerGenericCommand>
 800e846:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e848:	6a3b      	ldr	r3, [r7, #32]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d14f      	bne.n	800e8ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e852:	f383 8811 	msr	BASEPRI, r3
 800e856:	f3bf 8f6f 	isb	sy
 800e85a:	f3bf 8f4f 	dsb	sy
 800e85e:	61bb      	str	r3, [r7, #24]
}
 800e860:	bf00      	nop
 800e862:	e7fe      	b.n	800e862 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e866:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e86a:	f023 0301 	bic.w	r3, r3, #1
 800e86e:	b2da      	uxtb	r2, r3
 800e870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e876:	e03a      	b.n	800e8ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e87e:	f043 0301 	orr.w	r3, r3, #1
 800e882:	b2da      	uxtb	r2, r3
 800e884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e886:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e88a:	68ba      	ldr	r2, [r7, #8]
 800e88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e892:	699b      	ldr	r3, [r3, #24]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d10a      	bne.n	800e8ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e89c:	f383 8811 	msr	BASEPRI, r3
 800e8a0:	f3bf 8f6f 	isb	sy
 800e8a4:	f3bf 8f4f 	dsb	sy
 800e8a8:	617b      	str	r3, [r7, #20]
}
 800e8aa:	bf00      	nop
 800e8ac:	e7fe      	b.n	800e8ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b0:	699a      	ldr	r2, [r3, #24]
 800e8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b4:	18d1      	adds	r1, r2, r3
 800e8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8bc:	f7ff ff06 	bl	800e6cc <prvInsertTimerInActiveList>
					break;
 800e8c0:	e015      	b.n	800e8ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8c8:	f003 0302 	and.w	r3, r3, #2
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d103      	bne.n	800e8d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e8d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8d2:	f7fd fd3d 	bl	800c350 <vPortFree>
 800e8d6:	e00a      	b.n	800e8ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8de:	f023 0301 	bic.w	r3, r3, #1
 800e8e2:	b2da      	uxtb	r2, r3
 800e8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e8ea:	e000      	b.n	800e8ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e8ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e8ee:	4b08      	ldr	r3, [pc, #32]	; (800e910 <prvProcessReceivedCommands+0x1c0>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	1d39      	adds	r1, r7, #4
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7fe fbec 	bl	800d0d4 <xQueueReceive>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	f47f af2a 	bne.w	800e758 <prvProcessReceivedCommands+0x8>
	}
}
 800e904:	bf00      	nop
 800e906:	bf00      	nop
 800e908:	3730      	adds	r7, #48	; 0x30
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
 800e90e:	bf00      	nop
 800e910:	20005238 	.word	0x20005238

0800e914 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b088      	sub	sp, #32
 800e918:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e91a:	e048      	b.n	800e9ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e91c:	4b2d      	ldr	r3, [pc, #180]	; (800e9d4 <prvSwitchTimerLists+0xc0>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	68db      	ldr	r3, [r3, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e926:	4b2b      	ldr	r3, [pc, #172]	; (800e9d4 <prvSwitchTimerLists+0xc0>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	68db      	ldr	r3, [r3, #12]
 800e92e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	3304      	adds	r3, #4
 800e934:	4618      	mov	r0, r3
 800e936:	f7fd feb3 	bl	800c6a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	6a1b      	ldr	r3, [r3, #32]
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e948:	f003 0304 	and.w	r3, r3, #4
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d02e      	beq.n	800e9ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	699b      	ldr	r3, [r3, #24]
 800e954:	693a      	ldr	r2, [r7, #16]
 800e956:	4413      	add	r3, r2
 800e958:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e95a:	68ba      	ldr	r2, [r7, #8]
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	429a      	cmp	r2, r3
 800e960:	d90e      	bls.n	800e980 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	68ba      	ldr	r2, [r7, #8]
 800e966:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	68fa      	ldr	r2, [r7, #12]
 800e96c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e96e:	4b19      	ldr	r3, [pc, #100]	; (800e9d4 <prvSwitchTimerLists+0xc0>)
 800e970:	681a      	ldr	r2, [r3, #0]
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	3304      	adds	r3, #4
 800e976:	4619      	mov	r1, r3
 800e978:	4610      	mov	r0, r2
 800e97a:	f7fd fe58 	bl	800c62e <vListInsert>
 800e97e:	e016      	b.n	800e9ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e980:	2300      	movs	r3, #0
 800e982:	9300      	str	r3, [sp, #0]
 800e984:	2300      	movs	r3, #0
 800e986:	693a      	ldr	r2, [r7, #16]
 800e988:	2100      	movs	r1, #0
 800e98a:	68f8      	ldr	r0, [r7, #12]
 800e98c:	f7ff fd60 	bl	800e450 <xTimerGenericCommand>
 800e990:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d10a      	bne.n	800e9ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99c:	f383 8811 	msr	BASEPRI, r3
 800e9a0:	f3bf 8f6f 	isb	sy
 800e9a4:	f3bf 8f4f 	dsb	sy
 800e9a8:	603b      	str	r3, [r7, #0]
}
 800e9aa:	bf00      	nop
 800e9ac:	e7fe      	b.n	800e9ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e9ae:	4b09      	ldr	r3, [pc, #36]	; (800e9d4 <prvSwitchTimerLists+0xc0>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d1b1      	bne.n	800e91c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e9b8:	4b06      	ldr	r3, [pc, #24]	; (800e9d4 <prvSwitchTimerLists+0xc0>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e9be:	4b06      	ldr	r3, [pc, #24]	; (800e9d8 <prvSwitchTimerLists+0xc4>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	4a04      	ldr	r2, [pc, #16]	; (800e9d4 <prvSwitchTimerLists+0xc0>)
 800e9c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e9c6:	4a04      	ldr	r2, [pc, #16]	; (800e9d8 <prvSwitchTimerLists+0xc4>)
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	6013      	str	r3, [r2, #0]
}
 800e9cc:	bf00      	nop
 800e9ce:	3718      	adds	r7, #24
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	20005230 	.word	0x20005230
 800e9d8:	20005234 	.word	0x20005234

0800e9dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e9e2:	f7fd ffb7 	bl	800c954 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e9e6:	4b15      	ldr	r3, [pc, #84]	; (800ea3c <prvCheckForValidListAndQueue+0x60>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d120      	bne.n	800ea30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e9ee:	4814      	ldr	r0, [pc, #80]	; (800ea40 <prvCheckForValidListAndQueue+0x64>)
 800e9f0:	f7fd fdcc 	bl	800c58c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e9f4:	4813      	ldr	r0, [pc, #76]	; (800ea44 <prvCheckForValidListAndQueue+0x68>)
 800e9f6:	f7fd fdc9 	bl	800c58c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e9fa:	4b13      	ldr	r3, [pc, #76]	; (800ea48 <prvCheckForValidListAndQueue+0x6c>)
 800e9fc:	4a10      	ldr	r2, [pc, #64]	; (800ea40 <prvCheckForValidListAndQueue+0x64>)
 800e9fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ea00:	4b12      	ldr	r3, [pc, #72]	; (800ea4c <prvCheckForValidListAndQueue+0x70>)
 800ea02:	4a10      	ldr	r2, [pc, #64]	; (800ea44 <prvCheckForValidListAndQueue+0x68>)
 800ea04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ea06:	2300      	movs	r3, #0
 800ea08:	9300      	str	r3, [sp, #0]
 800ea0a:	4b11      	ldr	r3, [pc, #68]	; (800ea50 <prvCheckForValidListAndQueue+0x74>)
 800ea0c:	4a11      	ldr	r2, [pc, #68]	; (800ea54 <prvCheckForValidListAndQueue+0x78>)
 800ea0e:	2110      	movs	r1, #16
 800ea10:	200a      	movs	r0, #10
 800ea12:	f7fe f929 	bl	800cc68 <xQueueGenericCreateStatic>
 800ea16:	4603      	mov	r3, r0
 800ea18:	4a08      	ldr	r2, [pc, #32]	; (800ea3c <prvCheckForValidListAndQueue+0x60>)
 800ea1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ea1c:	4b07      	ldr	r3, [pc, #28]	; (800ea3c <prvCheckForValidListAndQueue+0x60>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d005      	beq.n	800ea30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ea24:	4b05      	ldr	r3, [pc, #20]	; (800ea3c <prvCheckForValidListAndQueue+0x60>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	490b      	ldr	r1, [pc, #44]	; (800ea58 <prvCheckForValidListAndQueue+0x7c>)
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7fe fd42 	bl	800d4b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ea30:	f7fd ffc0 	bl	800c9b4 <vPortExitCritical>
}
 800ea34:	bf00      	nop
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}
 800ea3a:	bf00      	nop
 800ea3c:	20005238 	.word	0x20005238
 800ea40:	20005208 	.word	0x20005208
 800ea44:	2000521c 	.word	0x2000521c
 800ea48:	20005230 	.word	0x20005230
 800ea4c:	20005234 	.word	0x20005234
 800ea50:	200052e4 	.word	0x200052e4
 800ea54:	20005244 	.word	0x20005244
 800ea58:	0800f374 	.word	0x0800f374

0800ea5c <__libc_init_array>:
 800ea5c:	b570      	push	{r4, r5, r6, lr}
 800ea5e:	4d0d      	ldr	r5, [pc, #52]	; (800ea94 <__libc_init_array+0x38>)
 800ea60:	4c0d      	ldr	r4, [pc, #52]	; (800ea98 <__libc_init_array+0x3c>)
 800ea62:	1b64      	subs	r4, r4, r5
 800ea64:	10a4      	asrs	r4, r4, #2
 800ea66:	2600      	movs	r6, #0
 800ea68:	42a6      	cmp	r6, r4
 800ea6a:	d109      	bne.n	800ea80 <__libc_init_array+0x24>
 800ea6c:	4d0b      	ldr	r5, [pc, #44]	; (800ea9c <__libc_init_array+0x40>)
 800ea6e:	4c0c      	ldr	r4, [pc, #48]	; (800eaa0 <__libc_init_array+0x44>)
 800ea70:	f000 f8f0 	bl	800ec54 <_init>
 800ea74:	1b64      	subs	r4, r4, r5
 800ea76:	10a4      	asrs	r4, r4, #2
 800ea78:	2600      	movs	r6, #0
 800ea7a:	42a6      	cmp	r6, r4
 800ea7c:	d105      	bne.n	800ea8a <__libc_init_array+0x2e>
 800ea7e:	bd70      	pop	{r4, r5, r6, pc}
 800ea80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea84:	4798      	blx	r3
 800ea86:	3601      	adds	r6, #1
 800ea88:	e7ee      	b.n	800ea68 <__libc_init_array+0xc>
 800ea8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea8e:	4798      	blx	r3
 800ea90:	3601      	adds	r6, #1
 800ea92:	e7f2      	b.n	800ea7a <__libc_init_array+0x1e>
 800ea94:	0800f44c 	.word	0x0800f44c
 800ea98:	0800f44c 	.word	0x0800f44c
 800ea9c:	0800f44c 	.word	0x0800f44c
 800eaa0:	0800f450 	.word	0x0800f450

0800eaa4 <memcpy>:
 800eaa4:	440a      	add	r2, r1
 800eaa6:	4291      	cmp	r1, r2
 800eaa8:	f100 33ff 	add.w	r3, r0, #4294967295
 800eaac:	d100      	bne.n	800eab0 <memcpy+0xc>
 800eaae:	4770      	bx	lr
 800eab0:	b510      	push	{r4, lr}
 800eab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eaba:	4291      	cmp	r1, r2
 800eabc:	d1f9      	bne.n	800eab2 <memcpy+0xe>
 800eabe:	bd10      	pop	{r4, pc}

0800eac0 <memset>:
 800eac0:	4402      	add	r2, r0
 800eac2:	4603      	mov	r3, r0
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d100      	bne.n	800eaca <memset+0xa>
 800eac8:	4770      	bx	lr
 800eaca:	f803 1b01 	strb.w	r1, [r3], #1
 800eace:	e7f9      	b.n	800eac4 <memset+0x4>

0800ead0 <_free_r>:
 800ead0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ead2:	2900      	cmp	r1, #0
 800ead4:	d044      	beq.n	800eb60 <_free_r+0x90>
 800ead6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eada:	9001      	str	r0, [sp, #4]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	f1a1 0404 	sub.w	r4, r1, #4
 800eae2:	bfb8      	it	lt
 800eae4:	18e4      	addlt	r4, r4, r3
 800eae6:	f000 f8a9 	bl	800ec3c <__malloc_lock>
 800eaea:	4a1e      	ldr	r2, [pc, #120]	; (800eb64 <_free_r+0x94>)
 800eaec:	9801      	ldr	r0, [sp, #4]
 800eaee:	6813      	ldr	r3, [r2, #0]
 800eaf0:	b933      	cbnz	r3, 800eb00 <_free_r+0x30>
 800eaf2:	6063      	str	r3, [r4, #4]
 800eaf4:	6014      	str	r4, [r2, #0]
 800eaf6:	b003      	add	sp, #12
 800eaf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eafc:	f000 b8a4 	b.w	800ec48 <__malloc_unlock>
 800eb00:	42a3      	cmp	r3, r4
 800eb02:	d908      	bls.n	800eb16 <_free_r+0x46>
 800eb04:	6825      	ldr	r5, [r4, #0]
 800eb06:	1961      	adds	r1, r4, r5
 800eb08:	428b      	cmp	r3, r1
 800eb0a:	bf01      	itttt	eq
 800eb0c:	6819      	ldreq	r1, [r3, #0]
 800eb0e:	685b      	ldreq	r3, [r3, #4]
 800eb10:	1949      	addeq	r1, r1, r5
 800eb12:	6021      	streq	r1, [r4, #0]
 800eb14:	e7ed      	b.n	800eaf2 <_free_r+0x22>
 800eb16:	461a      	mov	r2, r3
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	b10b      	cbz	r3, 800eb20 <_free_r+0x50>
 800eb1c:	42a3      	cmp	r3, r4
 800eb1e:	d9fa      	bls.n	800eb16 <_free_r+0x46>
 800eb20:	6811      	ldr	r1, [r2, #0]
 800eb22:	1855      	adds	r5, r2, r1
 800eb24:	42a5      	cmp	r5, r4
 800eb26:	d10b      	bne.n	800eb40 <_free_r+0x70>
 800eb28:	6824      	ldr	r4, [r4, #0]
 800eb2a:	4421      	add	r1, r4
 800eb2c:	1854      	adds	r4, r2, r1
 800eb2e:	42a3      	cmp	r3, r4
 800eb30:	6011      	str	r1, [r2, #0]
 800eb32:	d1e0      	bne.n	800eaf6 <_free_r+0x26>
 800eb34:	681c      	ldr	r4, [r3, #0]
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	6053      	str	r3, [r2, #4]
 800eb3a:	4421      	add	r1, r4
 800eb3c:	6011      	str	r1, [r2, #0]
 800eb3e:	e7da      	b.n	800eaf6 <_free_r+0x26>
 800eb40:	d902      	bls.n	800eb48 <_free_r+0x78>
 800eb42:	230c      	movs	r3, #12
 800eb44:	6003      	str	r3, [r0, #0]
 800eb46:	e7d6      	b.n	800eaf6 <_free_r+0x26>
 800eb48:	6825      	ldr	r5, [r4, #0]
 800eb4a:	1961      	adds	r1, r4, r5
 800eb4c:	428b      	cmp	r3, r1
 800eb4e:	bf04      	itt	eq
 800eb50:	6819      	ldreq	r1, [r3, #0]
 800eb52:	685b      	ldreq	r3, [r3, #4]
 800eb54:	6063      	str	r3, [r4, #4]
 800eb56:	bf04      	itt	eq
 800eb58:	1949      	addeq	r1, r1, r5
 800eb5a:	6021      	streq	r1, [r4, #0]
 800eb5c:	6054      	str	r4, [r2, #4]
 800eb5e:	e7ca      	b.n	800eaf6 <_free_r+0x26>
 800eb60:	b003      	add	sp, #12
 800eb62:	bd30      	pop	{r4, r5, pc}
 800eb64:	20005334 	.word	0x20005334

0800eb68 <cleanup_glue>:
 800eb68:	b538      	push	{r3, r4, r5, lr}
 800eb6a:	460c      	mov	r4, r1
 800eb6c:	6809      	ldr	r1, [r1, #0]
 800eb6e:	4605      	mov	r5, r0
 800eb70:	b109      	cbz	r1, 800eb76 <cleanup_glue+0xe>
 800eb72:	f7ff fff9 	bl	800eb68 <cleanup_glue>
 800eb76:	4621      	mov	r1, r4
 800eb78:	4628      	mov	r0, r5
 800eb7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb7e:	f7ff bfa7 	b.w	800ead0 <_free_r>
	...

0800eb84 <_reclaim_reent>:
 800eb84:	4b2c      	ldr	r3, [pc, #176]	; (800ec38 <_reclaim_reent+0xb4>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	4283      	cmp	r3, r0
 800eb8a:	b570      	push	{r4, r5, r6, lr}
 800eb8c:	4604      	mov	r4, r0
 800eb8e:	d051      	beq.n	800ec34 <_reclaim_reent+0xb0>
 800eb90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800eb92:	b143      	cbz	r3, 800eba6 <_reclaim_reent+0x22>
 800eb94:	68db      	ldr	r3, [r3, #12]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d14a      	bne.n	800ec30 <_reclaim_reent+0xac>
 800eb9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb9c:	6819      	ldr	r1, [r3, #0]
 800eb9e:	b111      	cbz	r1, 800eba6 <_reclaim_reent+0x22>
 800eba0:	4620      	mov	r0, r4
 800eba2:	f7ff ff95 	bl	800ead0 <_free_r>
 800eba6:	6961      	ldr	r1, [r4, #20]
 800eba8:	b111      	cbz	r1, 800ebb0 <_reclaim_reent+0x2c>
 800ebaa:	4620      	mov	r0, r4
 800ebac:	f7ff ff90 	bl	800ead0 <_free_r>
 800ebb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ebb2:	b111      	cbz	r1, 800ebba <_reclaim_reent+0x36>
 800ebb4:	4620      	mov	r0, r4
 800ebb6:	f7ff ff8b 	bl	800ead0 <_free_r>
 800ebba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ebbc:	b111      	cbz	r1, 800ebc4 <_reclaim_reent+0x40>
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	f7ff ff86 	bl	800ead0 <_free_r>
 800ebc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ebc6:	b111      	cbz	r1, 800ebce <_reclaim_reent+0x4a>
 800ebc8:	4620      	mov	r0, r4
 800ebca:	f7ff ff81 	bl	800ead0 <_free_r>
 800ebce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ebd0:	b111      	cbz	r1, 800ebd8 <_reclaim_reent+0x54>
 800ebd2:	4620      	mov	r0, r4
 800ebd4:	f7ff ff7c 	bl	800ead0 <_free_r>
 800ebd8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ebda:	b111      	cbz	r1, 800ebe2 <_reclaim_reent+0x5e>
 800ebdc:	4620      	mov	r0, r4
 800ebde:	f7ff ff77 	bl	800ead0 <_free_r>
 800ebe2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ebe4:	b111      	cbz	r1, 800ebec <_reclaim_reent+0x68>
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	f7ff ff72 	bl	800ead0 <_free_r>
 800ebec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebee:	b111      	cbz	r1, 800ebf6 <_reclaim_reent+0x72>
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	f7ff ff6d 	bl	800ead0 <_free_r>
 800ebf6:	69a3      	ldr	r3, [r4, #24]
 800ebf8:	b1e3      	cbz	r3, 800ec34 <_reclaim_reent+0xb0>
 800ebfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	4798      	blx	r3
 800ec00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ec02:	b1b9      	cbz	r1, 800ec34 <_reclaim_reent+0xb0>
 800ec04:	4620      	mov	r0, r4
 800ec06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec0a:	f7ff bfad 	b.w	800eb68 <cleanup_glue>
 800ec0e:	5949      	ldr	r1, [r1, r5]
 800ec10:	b941      	cbnz	r1, 800ec24 <_reclaim_reent+0xa0>
 800ec12:	3504      	adds	r5, #4
 800ec14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec16:	2d80      	cmp	r5, #128	; 0x80
 800ec18:	68d9      	ldr	r1, [r3, #12]
 800ec1a:	d1f8      	bne.n	800ec0e <_reclaim_reent+0x8a>
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	f7ff ff57 	bl	800ead0 <_free_r>
 800ec22:	e7ba      	b.n	800eb9a <_reclaim_reent+0x16>
 800ec24:	680e      	ldr	r6, [r1, #0]
 800ec26:	4620      	mov	r0, r4
 800ec28:	f7ff ff52 	bl	800ead0 <_free_r>
 800ec2c:	4631      	mov	r1, r6
 800ec2e:	e7ef      	b.n	800ec10 <_reclaim_reent+0x8c>
 800ec30:	2500      	movs	r5, #0
 800ec32:	e7ef      	b.n	800ec14 <_reclaim_reent+0x90>
 800ec34:	bd70      	pop	{r4, r5, r6, pc}
 800ec36:	bf00      	nop
 800ec38:	20000014 	.word	0x20000014

0800ec3c <__malloc_lock>:
 800ec3c:	4801      	ldr	r0, [pc, #4]	; (800ec44 <__malloc_lock+0x8>)
 800ec3e:	f7f4 ba1a 	b.w	8003076 <__retarget_lock_acquire_recursive>
 800ec42:	bf00      	nop
 800ec44:	200008f4 	.word	0x200008f4

0800ec48 <__malloc_unlock>:
 800ec48:	4801      	ldr	r0, [pc, #4]	; (800ec50 <__malloc_unlock+0x8>)
 800ec4a:	f7f4 ba28 	b.w	800309e <__retarget_lock_release_recursive>
 800ec4e:	bf00      	nop
 800ec50:	200008f4 	.word	0x200008f4

0800ec54 <_init>:
 800ec54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec56:	bf00      	nop
 800ec58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec5a:	bc08      	pop	{r3}
 800ec5c:	469e      	mov	lr, r3
 800ec5e:	4770      	bx	lr

0800ec60 <_fini>:
 800ec60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec62:	bf00      	nop
 800ec64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec66:	bc08      	pop	{r3}
 800ec68:	469e      	mov	lr, r3
 800ec6a:	4770      	bx	lr
